
NUCLEO-G474RET6-TMC2590_Dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c00  08005c00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c08  08005c08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c08  08005c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08005c1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08005c1c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015fa0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c89  00000000  00000000  0003601f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00038ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e46  00000000  00000000  00039ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002954  00000000  00000000  0003ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c83  00000000  00000000  0003d692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdcb9  00000000  00000000  00054315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e24  00000000  00000000  00151fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00156df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005a78 	.word	0x08005a78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005a78 	.word	0x08005a78

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b970 	b.w	8000b2c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9e08      	ldr	r6, [sp, #32]
 800086a:	460d      	mov	r5, r1
 800086c:	4604      	mov	r4, r0
 800086e:	460f      	mov	r7, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4694      	mov	ip, r2
 8000878:	d965      	bls.n	8000946 <__udivmoddi4+0xe2>
 800087a:	fab2 f382 	clz	r3, r2
 800087e:	b143      	cbz	r3, 8000892 <__udivmoddi4+0x2e>
 8000880:	fa02 fc03 	lsl.w	ip, r2, r3
 8000884:	f1c3 0220 	rsb	r2, r3, #32
 8000888:	409f      	lsls	r7, r3
 800088a:	fa20 f202 	lsr.w	r2, r0, r2
 800088e:	4317      	orrs	r7, r2
 8000890:	409c      	lsls	r4, r3
 8000892:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000896:	fa1f f58c 	uxth.w	r5, ip
 800089a:	fbb7 f1fe 	udiv	r1, r7, lr
 800089e:	0c22      	lsrs	r2, r4, #16
 80008a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008a8:	fb01 f005 	mul.w	r0, r1, r5
 80008ac:	4290      	cmp	r0, r2
 80008ae:	d90a      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b0:	eb1c 0202 	adds.w	r2, ip, r2
 80008b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008b8:	f080 811c 	bcs.w	8000af4 <__udivmoddi4+0x290>
 80008bc:	4290      	cmp	r0, r2
 80008be:	f240 8119 	bls.w	8000af4 <__udivmoddi4+0x290>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4462      	add	r2, ip
 80008c6:	1a12      	subs	r2, r2, r0
 80008c8:	b2a4      	uxth	r4, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008d6:	fb00 f505 	mul.w	r5, r0, r5
 80008da:	42a5      	cmp	r5, r4
 80008dc:	d90a      	bls.n	80008f4 <__udivmoddi4+0x90>
 80008de:	eb1c 0404 	adds.w	r4, ip, r4
 80008e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e6:	f080 8107 	bcs.w	8000af8 <__udivmoddi4+0x294>
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	f240 8104 	bls.w	8000af8 <__udivmoddi4+0x294>
 80008f0:	4464      	add	r4, ip
 80008f2:	3802      	subs	r0, #2
 80008f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11e      	cbz	r6, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40dc      	lsrs	r4, r3
 8000900:	2300      	movs	r3, #0
 8000902:	e9c6 4300 	strd	r4, r3, [r6]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0xbc>
 800090e:	2e00      	cmp	r6, #0
 8000910:	f000 80ed 	beq.w	8000aee <__udivmoddi4+0x28a>
 8000914:	2100      	movs	r1, #0
 8000916:	e9c6 0500 	strd	r0, r5, [r6]
 800091a:	4608      	mov	r0, r1
 800091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000920:	fab3 f183 	clz	r1, r3
 8000924:	2900      	cmp	r1, #0
 8000926:	d149      	bne.n	80009bc <__udivmoddi4+0x158>
 8000928:	42ab      	cmp	r3, r5
 800092a:	d302      	bcc.n	8000932 <__udivmoddi4+0xce>
 800092c:	4282      	cmp	r2, r0
 800092e:	f200 80f8 	bhi.w	8000b22 <__udivmoddi4+0x2be>
 8000932:	1a84      	subs	r4, r0, r2
 8000934:	eb65 0203 	sbc.w	r2, r5, r3
 8000938:	2001      	movs	r0, #1
 800093a:	4617      	mov	r7, r2
 800093c:	2e00      	cmp	r6, #0
 800093e:	d0e2      	beq.n	8000906 <__udivmoddi4+0xa2>
 8000940:	e9c6 4700 	strd	r4, r7, [r6]
 8000944:	e7df      	b.n	8000906 <__udivmoddi4+0xa2>
 8000946:	b902      	cbnz	r2, 800094a <__udivmoddi4+0xe6>
 8000948:	deff      	udf	#255	; 0xff
 800094a:	fab2 f382 	clz	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	f040 8090 	bne.w	8000a74 <__udivmoddi4+0x210>
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095a:	fa1f fe8c 	uxth.w	lr, ip
 800095e:	2101      	movs	r1, #1
 8000960:	fbb2 f5f7 	udiv	r5, r2, r7
 8000964:	fb07 2015 	mls	r0, r7, r5, r2
 8000968:	0c22      	lsrs	r2, r4, #16
 800096a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800096e:	fb0e f005 	mul.w	r0, lr, r5
 8000972:	4290      	cmp	r0, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x124>
 8000976:	eb1c 0202 	adds.w	r2, ip, r2
 800097a:	f105 38ff 	add.w	r8, r5, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x122>
 8000980:	4290      	cmp	r0, r2
 8000982:	f200 80cb 	bhi.w	8000b1c <__udivmoddi4+0x2b8>
 8000986:	4645      	mov	r5, r8
 8000988:	1a12      	subs	r2, r2, r0
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000990:	fb07 2210 	mls	r2, r7, r0, r2
 8000994:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000998:	fb0e fe00 	mul.w	lr, lr, r0
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x14e>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009a8:	d202      	bcs.n	80009b0 <__udivmoddi4+0x14c>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	f200 80bb 	bhi.w	8000b26 <__udivmoddi4+0x2c2>
 80009b0:	4610      	mov	r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ba:	e79f      	b.n	80008fc <__udivmoddi4+0x98>
 80009bc:	f1c1 0720 	rsb	r7, r1, #32
 80009c0:	408b      	lsls	r3, r1
 80009c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ca:	fa05 f401 	lsl.w	r4, r5, r1
 80009ce:	fa20 f307 	lsr.w	r3, r0, r7
 80009d2:	40fd      	lsrs	r5, r7
 80009d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d8:	4323      	orrs	r3, r4
 80009da:	fbb5 f8f9 	udiv	r8, r5, r9
 80009de:	fa1f fe8c 	uxth.w	lr, ip
 80009e2:	fb09 5518 	mls	r5, r9, r8, r5
 80009e6:	0c1c      	lsrs	r4, r3, #16
 80009e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ec:	fb08 f50e 	mul.w	r5, r8, lr
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	fa00 f001 	lsl.w	r0, r0, r1
 80009fa:	d90b      	bls.n	8000a14 <__udivmoddi4+0x1b0>
 80009fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000a00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a04:	f080 8088 	bcs.w	8000b18 <__udivmoddi4+0x2b4>
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	f240 8085 	bls.w	8000b18 <__udivmoddi4+0x2b4>
 8000a0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a12:	4464      	add	r4, ip
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	b29d      	uxth	r5, r3
 8000a18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a28:	45a6      	cmp	lr, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x1da>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a34:	d26c      	bcs.n	8000b10 <__udivmoddi4+0x2ac>
 8000a36:	45a6      	cmp	lr, r4
 8000a38:	d96a      	bls.n	8000b10 <__udivmoddi4+0x2ac>
 8000a3a:	3b02      	subs	r3, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a42:	fba3 9502 	umull	r9, r5, r3, r2
 8000a46:	eba4 040e 	sub.w	r4, r4, lr
 8000a4a:	42ac      	cmp	r4, r5
 8000a4c:	46c8      	mov	r8, r9
 8000a4e:	46ae      	mov	lr, r5
 8000a50:	d356      	bcc.n	8000b00 <__udivmoddi4+0x29c>
 8000a52:	d053      	beq.n	8000afc <__udivmoddi4+0x298>
 8000a54:	b156      	cbz	r6, 8000a6c <__udivmoddi4+0x208>
 8000a56:	ebb0 0208 	subs.w	r2, r0, r8
 8000a5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a62:	40ca      	lsrs	r2, r1
 8000a64:	40cc      	lsrs	r4, r1
 8000a66:	4317      	orrs	r7, r2
 8000a68:	e9c6 7400 	strd	r7, r4, [r6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a74:	f1c3 0120 	rsb	r1, r3, #32
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a80:	fa25 f101 	lsr.w	r1, r5, r1
 8000a84:	409d      	lsls	r5, r3
 8000a86:	432a      	orrs	r2, r5
 8000a88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8c:	fa1f fe8c 	uxth.w	lr, ip
 8000a90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a94:	fb07 1510 	mls	r5, r7, r0, r1
 8000a98:	0c11      	lsrs	r1, r2, #16
 8000a9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000aa2:	428d      	cmp	r5, r1
 8000aa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x258>
 8000aaa:	eb1c 0101 	adds.w	r1, ip, r1
 8000aae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ab2:	d22f      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab4:	428d      	cmp	r5, r1
 8000ab6:	d92d      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab8:	3802      	subs	r0, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	1b49      	subs	r1, r1, r5
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ac4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ac8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000acc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad0:	4291      	cmp	r1, r2
 8000ad2:	d908      	bls.n	8000ae6 <__udivmoddi4+0x282>
 8000ad4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000adc:	d216      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000ade:	4291      	cmp	r1, r2
 8000ae0:	d914      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000ae2:	3d02      	subs	r5, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a52      	subs	r2, r2, r1
 8000ae8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aec:	e738      	b.n	8000960 <__udivmoddi4+0xfc>
 8000aee:	4631      	mov	r1, r6
 8000af0:	4630      	mov	r0, r6
 8000af2:	e708      	b.n	8000906 <__udivmoddi4+0xa2>
 8000af4:	4639      	mov	r1, r7
 8000af6:	e6e6      	b.n	80008c6 <__udivmoddi4+0x62>
 8000af8:	4610      	mov	r0, r2
 8000afa:	e6fb      	b.n	80008f4 <__udivmoddi4+0x90>
 8000afc:	4548      	cmp	r0, r9
 8000afe:	d2a9      	bcs.n	8000a54 <__udivmoddi4+0x1f0>
 8000b00:	ebb9 0802 	subs.w	r8, r9, r2
 8000b04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	e7a3      	b.n	8000a54 <__udivmoddi4+0x1f0>
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	e7ea      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b10:	462b      	mov	r3, r5
 8000b12:	e794      	b.n	8000a3e <__udivmoddi4+0x1da>
 8000b14:	4640      	mov	r0, r8
 8000b16:	e7d1      	b.n	8000abc <__udivmoddi4+0x258>
 8000b18:	46d0      	mov	r8, sl
 8000b1a:	e77b      	b.n	8000a14 <__udivmoddi4+0x1b0>
 8000b1c:	3d02      	subs	r5, #2
 8000b1e:	4462      	add	r2, ip
 8000b20:	e732      	b.n	8000988 <__udivmoddi4+0x124>
 8000b22:	4608      	mov	r0, r1
 8000b24:	e70a      	b.n	800093c <__udivmoddi4+0xd8>
 8000b26:	4464      	add	r4, ip
 8000b28:	3802      	subs	r0, #2
 8000b2a:	e742      	b.n	80009b2 <__udivmoddi4+0x14e>

08000b2c <__aeabi_idiv0>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b44      	ldr	r3, [pc, #272]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a43      	ldr	r2, [pc, #268]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a3d      	ldr	r2, [pc, #244]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a37      	ldr	r2, [pc, #220]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a31      	ldr	r2, [pc, #196]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nCS_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f001 f914 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_ENN_GPIO_Port, DRV_ENN_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <MX_GPIO_Init+0x12c>)
 8000bba:	f001 f90f 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc4:	4826      	ldr	r0, [pc, #152]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bc6:	f001 f909 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	481e      	ldr	r0, [pc, #120]	; (8000c5c <MX_GPIO_Init+0x12c>)
 8000be2:	f000 ff79 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|nCS_Pin;
 8000be6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f000 ff69 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_ENN_Pin;
 8000c06:	2310      	movs	r3, #16
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_ENN_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480f      	ldr	r0, [pc, #60]	; (8000c5c <MX_GPIO_Init+0x12c>)
 8000c1e:	f000 ff5b 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4809      	ldr	r0, [pc, #36]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000c3c:	f000 ff4c 	bl	8001ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2028      	movs	r0, #40	; 0x28
 8000c46:	f000 ff12 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4a:	2028      	movs	r0, #40	; 0x28
 8000c4c:	f000 ff29 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	48000400 	.word	0x48000400

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 fd92 	bl	8001792 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6e:	f000 f847 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f7ff ff5d 	bl	8000b30 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000c76:	f000 fcc1 	bl	80015fc <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000c7a:	f000 f993 	bl	8000fa4 <MX_TIM1_Init>
  MX_SPI3_Init();
 8000c7e:	f000 f88d 	bl	8000d9c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000c82:	f000 fa25 	bl	80010d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"*********************\r\n", 23, 100);
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	2217      	movs	r2, #23
 8000c8a:	4917      	ldr	r1, [pc, #92]	; (8000ce8 <main+0x84>)
 8000c8c:	4817      	ldr	r0, [pc, #92]	; (8000cec <main+0x88>)
 8000c8e:	f004 f87d 	bl	8004d8c <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"* TMC2590 Test Code *\r\n", 23, 100);
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	2217      	movs	r2, #23
 8000c96:	4916      	ldr	r1, [pc, #88]	; (8000cf0 <main+0x8c>)
 8000c98:	4814      	ldr	r0, [pc, #80]	; (8000cec <main+0x88>)
 8000c9a:	f004 f877 	bl	8004d8c <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"*********************\r\n", 23, 100);
 8000c9e:	2364      	movs	r3, #100	; 0x64
 8000ca0:	2217      	movs	r2, #23
 8000ca2:	4911      	ldr	r1, [pc, #68]	; (8000ce8 <main+0x84>)
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <main+0x88>)
 8000ca6:	f004 f871 	bl	8004d8c <HAL_UART_Transmit>

	tmc2590_Init(&htmc2590, &hspi3, nCS_GPIO_Port, nCS_Pin, DRV_ENN_GPIO_Port, DRV_ENN_Pin);
 8000caa:	2310      	movs	r3, #16
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <main+0x90>)
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cba:	490f      	ldr	r1, [pc, #60]	; (8000cf8 <main+0x94>)
 8000cbc:	480f      	ldr	r0, [pc, #60]	; (8000cfc <main+0x98>)
 8000cbe:	f000 facf 	bl	8001260 <tmc2590_Init>

		// Add code to choose nCS

		// On va définir moteur 1/2/3 pour les steppers
		// Moteur 4/5/6 pour les autres
		sendOrderStepper(1, 90);
 8000cc2:	215a      	movs	r1, #90	; 0x5a
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 fbb3 	bl	8001430 <sendOrderStepper>

		HAL_Delay(1000);
 8000cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cce:	f000 fdd1 	bl	8001874 <HAL_Delay>
		//tmc2590_dumpRegister(&htmc2590);  //Report doesn't work - Fail to turn if ON

		sendOrderStepper(1, -90);
 8000cd2:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 fbaa 	bl	8001430 <sendOrderStepper>

		HAL_Delay(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce0:	f000 fdc8 	bl	8001874 <HAL_Delay>
		sendOrderStepper(1, 90);
 8000ce4:	e7ed      	b.n	8000cc2 <main+0x5e>
 8000ce6:	bf00      	nop
 8000ce8:	08005a90 	.word	0x08005a90
 8000cec:	20000168 	.word	0x20000168
 8000cf0:	08005aa8 	.word	0x08005aa8
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	20000124 	.word	0x20000124

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	; 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	2238      	movs	r2, #56	; 0x38
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 fe86 	bl	8005a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f001 f896 	bl	8001e54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d30:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d3e:	2355      	movs	r3, #85	; 0x55
 8000d40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f932 	bl	8001fbc <HAL_RCC_OscConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d5e:	f000 f818 	bl	8000d92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d62:	230f      	movs	r3, #15
 8000d64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d66:	2303      	movs	r3, #3
 8000d68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fc36 	bl	80025ec <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d86:	f000 f804 	bl	8000d92 <Error_Handler>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3750      	adds	r7, #80	; 0x50
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d96:	b672      	cpsid	i
}
 8000d98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d9a:	e7fe      	b.n	8000d9a <Error_Handler+0x8>

08000d9c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <MX_SPI3_Init+0x78>)
 8000da4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000da8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000db6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000dd2:	2238      	movs	r2, #56	; 0x38
 8000dd4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000dea:	2207      	movs	r2, #7
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000df6:	2208      	movs	r2, #8
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_SPI3_Init+0x74>)
 8000dfc:	f002 f860 	bl	8002ec0 <HAL_SPI_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f7ff ffc4 	bl	8000d92 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000028 	.word	0x20000028
 8000e14:	40003c00 	.word	0x40003c00

08000e18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <HAL_SPI_MspInit+0x9c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d137      	bne.n	8000eaa <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_SPI_MspInit+0xa0>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <HAL_SPI_MspInit+0xa0>)
 8000e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <HAL_SPI_MspInit+0xa0>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_SPI_MspInit+0xa0>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_SPI_MspInit+0xa0>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_SPI_MspInit+0xa0>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000e6a:	2318      	movs	r3, #24
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <HAL_SPI_MspInit+0xa4>)
 8000e86:	f000 fe27 	bl	8001ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e96:	2302      	movs	r3, #2
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_SPI_MspInit+0xa4>)
 8000ea6:	f000 fe17 	bl	8001ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40003c00 	.word	0x40003c00
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x44>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ef6:	f001 f851 	bl	8001f9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 fc70 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM2_IRQHandler+0x10>)
 8000f62:	f002 fcf6 	bl	8003952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000d8 	.word	0x200000d8

08000f70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f78:	f000 ff48 	bl	8001e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b098      	sub	sp, #96	; 0x60
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2234      	movs	r2, #52	; 0x34
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fd25 	bl	8005a20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <MX_TIM1_Init+0x124>)
 8000fd8:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <MX_TIM1_Init+0x128>)
 8000fda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000;
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <MX_TIM1_Init+0x124>)
 8000fde:	f244 2268 	movw	r2, #17000	; 0x4268
 8000fe2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <MX_TIM1_Init+0x124>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <MX_TIM1_Init+0x124>)
 8000fec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <MX_TIM1_Init+0x124>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <MX_TIM1_Init+0x124>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <MX_TIM1_Init+0x124>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001004:	4830      	ldr	r0, [pc, #192]	; (80010c8 <MX_TIM1_Init+0x124>)
 8001006:	f002 fc4d 	bl	80038a4 <HAL_TIM_PWM_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001010:	f7ff febf 	bl	8000d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001020:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001024:	4619      	mov	r1, r3
 8001026:	4828      	ldr	r0, [pc, #160]	; (80010c8 <MX_TIM1_Init+0x124>)
 8001028:	f003 fcd2 	bl	80049d0 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001032:	f7ff feae 	bl	8000d92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001036:	2360      	movs	r3, #96	; 0x60
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 800103a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001044:	2300      	movs	r3, #0
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001054:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	481a      	ldr	r0, [pc, #104]	; (80010c8 <MX_TIM1_Init+0x124>)
 800105e:	f002 fdf7 	bl	8003c50 <HAL_TIM_PWM_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001068:	f7ff fe93 	bl	8000d92 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_TIM1_Init+0x124>)
 80010aa:	f003 fd27 	bl	8004afc <HAL_TIMEx_ConfigBreakDeadTime>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80010b4:	f7ff fe6d 	bl	8000d92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <MX_TIM1_Init+0x124>)
 80010ba:	f000 f899 	bl	80011f0 <HAL_TIM_MspPostInit>

}
 80010be:	bf00      	nop
 80010c0:	3760      	adds	r7, #96	; 0x60
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	40012c00 	.word	0x40012c00

080010d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_TIM2_Init+0x94>)
 80010f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_TIM2_Init+0x94>)
 80010f8:	22aa      	movs	r2, #170	; 0xaa
 80010fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_TIM2_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_TIM2_Init+0x94>)
 8001104:	2214      	movs	r2, #20
 8001106:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_TIM2_Init+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM2_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_TIM2_Init+0x94>)
 8001116:	f002 faf5 	bl	8003704 <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001120:	f7ff fe37 	bl	8000d92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_TIM2_Init+0x94>)
 8001132:	f002 fea1 	bl	8003e78 <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800113c:	f7ff fe29 	bl	8000d92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_TIM2_Init+0x94>)
 800114e:	f003 fc3f 	bl	80049d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001158:	f7ff fe1b 	bl	8000d92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000d8 	.word	0x200000d8

08001168 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10b      	bne.n	8001192 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40012c00 	.word	0x40012c00
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d113      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6593      	str	r3, [r2, #88]	; 0x58
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_TIM_Base_MspInit+0x44>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	201c      	movs	r0, #28
 80011d8:	f000 fc49 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011dc:	201c      	movs	r0, #28
 80011de:	f000 fc60 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_TIM_MspPostInit+0x68>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d11d      	bne.n	800124e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_TIM_MspPostInit+0x6c>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <HAL_TIM_MspPostInit+0x6c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_TIM_MspPostInit+0x6c>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_STEP_Pin;
 800122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800123c:	2306      	movs	r3, #6
 800123e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_STEP_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f000 fc45 	bl	8001ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012c00 	.word	0x40012c00
 800125c:	40021000 	.word	0x40021000

08001260 <tmc2590_Init>:
		176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,201,202,203,204,205,206,
		207,207,208,209,210,211,212,212,213,214,215,215,216,217,218,218,219,220,220,221,222,223,223,224,225,225,226,226,227,228,228,229,
		229,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,238,239,239,240,240,240,241,241,241,242,242,242,243,243,
		243,244,244,244,244,245,245,245,245,246,246,246,246,246,247,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,248};

void tmc2590_Init(TMC2590_HandleTypeDef *phtmc2590, SPI_HandleTypeDef *hspi, GPIO_TypeDef *gpioPortNCS, uint16_t gpioPinNCS, GPIO_TypeDef *gpioPortDrvEnN, uint16_t gpioPinDrvEnN){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	807b      	strh	r3, [r7, #2]
	uint8_t pData[3];
	phtmc2590->hspi = hspi;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	601a      	str	r2, [r3, #0]
	phtmc2590->gpioPinNCS = gpioPinNCS;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	809a      	strh	r2, [r3, #4]
	phtmc2590->gpioPortNCS = gpioPortNCS;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	609a      	str	r2, [r3, #8]
	phtmc2590->gpioPinDrvEnN = gpioPinDrvEnN;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001284:	819a      	strh	r2, [r3, #12]
	phtmc2590->gpioPortDrvEnN = gpioPortDrvEnN;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	611a      	str	r2, [r3, #16]

	tmc2590_SetPowerEnable(phtmc2590, SET);
 800128c:	2101      	movs	r1, #1
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 f868 	bl	8001364 <tmc2590_SetPowerEnable>
	tmc2590_SetnCS(phtmc2590, SET);
 8001294:	2101      	movs	r1, #1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f852 	bl	8001340 <tmc2590_SetnCS>

	phtmc2590->drvCtrlRegister 			= 0x00000; // No Current
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
	phtmc2590->chopConfRegister			= 0b10011000000000001111; // 100 10
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4a22      	ldr	r2, [pc, #136]	; (8001330 <tmc2590_Init+0xd0>)
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
	phtmc2590->smartEnRegister 			= 0b10100000000000000000; // 101 0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
	phtmc2590->stallGuardCtrlRegister 	= 0b11000000000000011111;//0xD001F; // 110 1---- 11111
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4a20      	ldr	r2, [pc, #128]	; (8001334 <tmc2590_Init+0xd4>)
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
	phtmc2590->drvConfRegister 			= 0b11100000011110110000;//0xE0480; // 1110 0000 0100 1000 0000
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <tmc2590_Init+0xd8>)
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30

	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->drvCtrlRegister);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4619      	mov	r1, r3
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 f886 	bl	80013d4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80012c8:	2103      	movs	r1, #3
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f85f 	bl	800138e <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->chopConfRegister);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f87c 	bl	80013d4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80012dc:	2103      	movs	r1, #3
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f855 	bl	800138e <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->smartEnRegister);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	4619      	mov	r1, r3
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f872 	bl	80013d4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80012f0:	2103      	movs	r1, #3
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 f84b 	bl	800138e <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->stallGuardCtrlRegister);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	4619      	mov	r1, r3
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 f868 	bl	80013d4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8001304:	2103      	movs	r1, #3
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f841 	bl	800138e <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->drvConfRegister);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4619      	mov	r1, r3
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f85e 	bl	80013d4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8001318:	2103      	movs	r1, #3
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f837 	bl	800138e <tmc2590_TransmitReceive>

	HAL_TIM_Base_Start_IT(&htim2);
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <tmc2590_Init+0xdc>)
 8001322:	f002 fa47 	bl	80037b4 <HAL_TIM_Base_Start_IT>

}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	0009800f 	.word	0x0009800f
 8001334:	000c001f 	.word	0x000c001f
 8001338:	000e07b0 	.word	0x000e07b0
 800133c:	200000d8 	.word	0x200000d8

08001340 <tmc2590_SetnCS>:

void tmc2590_SetnCS(TMC2590_HandleTypeDef *phtmc2590, FlagStatus status){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(phtmc2590->gpioPortNCS, phtmc2590->gpioPinNCS, status);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6898      	ldr	r0, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	889b      	ldrh	r3, [r3, #4]
 8001354:	78fa      	ldrb	r2, [r7, #3]
 8001356:	4619      	mov	r1, r3
 8001358:	f000 fd40 	bl	8001ddc <HAL_GPIO_WritePin>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <tmc2590_SetPowerEnable>:

void tmc2590_SetPowerEnable(TMC2590_HandleTypeDef *phtmc2590, FlagStatus status){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(phtmc2590->gpioPortDrvEnN, phtmc2590->gpioPinDrvEnN, 1-status);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6918      	ldr	r0, [r3, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	8999      	ldrh	r1, [r3, #12]
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	f1c3 0301 	rsb	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	f000 fd2b 	bl	8001ddc <HAL_GPIO_WritePin>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <tmc2590_TransmitReceive>:


HAL_StatusTypeDef tmc2590_TransmitReceive(TMC2590_HandleTypeDef *phtmc2590, int size){
 800138e:	b590      	push	{r4, r7, lr}
 8001390:	b087      	sub	sp, #28
 8001392:	af02      	add	r7, sp, #8
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	tmc2590_SetnCS(phtmc2590, RESET);
 8001398:	2100      	movs	r1, #0
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffd0 	bl	8001340 <tmc2590_SetnCS>
	status = HAL_SPI_TransmitReceive(phtmc2590->hspi, phtmc2590->spiTxBuffer, phtmc2590->spiRxBuffer, size, HAL_MAX_DELAY);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f103 0114 	add.w	r1, r3, #20
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f103 021a 	add.w	r2, r3, #26
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f04f 34ff 	mov.w	r4, #4294967295
 80013b8:	9400      	str	r4, [sp, #0]
 80013ba:	f001 fe2c 	bl	8003016 <HAL_SPI_TransmitReceive>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]
	tmc2590_SetnCS(phtmc2590, SET);
 80013c2:	2101      	movs	r1, #1
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffbb 	bl	8001340 <tmc2590_SetnCS>
	}
	else{

	}

	return status;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}

080013d4 <tmc2590_SetTxBufferInt32>:

void tmc2590_SetTxBuffer(TMC2590_HandleTypeDef *phtmc2590, uint8_t *pData, int size){
	memcpy(phtmc2590->spiTxBuffer, pData, size);
}

void tmc2590_SetTxBufferInt32(TMC2590_HandleTypeDef *phtmc2590, uint32_t data){
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	phtmc2590->spiTxBuffer[0] = (data >> 16) & 0xFF;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	751a      	strb	r2, [r3, #20]
	phtmc2590->spiTxBuffer[1] = (data >> 8) & 0xFF;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	755a      	strb	r2, [r3, #21]
	phtmc2590->spiTxBuffer[2] = (data >> 0) & 0xFF;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	759a      	strb	r2, [r3, #22]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_TIM_PeriodElapsedCallback>:

}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001418:	d102      	bne.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x18>
		perioedElapsed_IT = 1;
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
	}
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000158 	.word	0x20000158

08001430 <sendOrderStepper>:

void sendOrderStepper(int numberStepper, int inputOrder){
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	/*
	 * We need to put in input how much we want to turn in degrees and what stepper we want to move
	 * For the moment, we have only one stepper but witch nCS signal, we will be able to change with
	 * stepper we wwant to communicate
	 */
	int polarity = (inputOrder<0);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	0fdb      	lsrs	r3, r3, #31
 800143e:	b2db      	uxtb	r3, r3
 8001440:	613b      	str	r3, [r7, #16]
	int order = (int) abs(inputOrder)*142.2;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	bfb8      	it	lt
 8001448:	425b      	neglt	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f960 	bl	8000710 <__aeabi_i2d>
 8001450:	a368      	add	r3, pc, #416	; (adr r3, 80015f4 <sendOrderStepper+0x1c4>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7fe fedf 	bl	8000218 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff f9bf 	bl	80007e4 <__aeabi_d2iz>
 8001466:	4603      	mov	r3, r0
 8001468:	60fb      	str	r3, [r7, #12]
	int indice = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
	while (indice != order){
 800146e:	e0a2      	b.n	80015b6 <sendOrderStepper+0x186>
		if(perioedElapsed_IT){
 8001470:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <sendOrderStepper+0x1a0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 809e 	beq.w	80015b6 <sendOrderStepper+0x186>
				if(index_sin_loop < 256){
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <sendOrderStepper+0x1a4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2bff      	cmp	r3, #255	; 0xff
 8001480:	dc15      	bgt.n	80014ae <sendOrderStepper+0x7e>
					currentCoilA = sinTable[index_sin_loop];
 8001482:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <sendOrderStepper+0x1a4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a54      	ldr	r2, [pc, #336]	; (80015d8 <sendOrderStepper+0x1a8>)
 8001488:	5cd2      	ldrb	r2, [r2, r3]
 800148a:	4b54      	ldr	r3, [pc, #336]	; (80015dc <sendOrderStepper+0x1ac>)
 800148c:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[256-index_sin_loop];
 800148e:	4b51      	ldr	r3, [pc, #324]	; (80015d4 <sendOrderStepper+0x1a4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001496:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <sendOrderStepper+0x1a8>)
 8001498:	5cd2      	ldrb	r2, [r2, r3]
 800149a:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <sendOrderStepper+0x1b0>)
 800149c:	701a      	strb	r2, [r3, #0]
					polarityCoilA = polarity;
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <sendOrderStepper+0x1b4>)
 80014a4:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 1;
 80014a6:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <sendOrderStepper+0x1b8>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e056      	b.n	800155c <sendOrderStepper+0x12c>
				}
				else if(index_sin_loop < 512){
 80014ae:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <sendOrderStepper+0x1a4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b6:	da17      	bge.n	80014e8 <sendOrderStepper+0xb8>
					currentCoilA = sinTable[512-index_sin_loop];
 80014b8:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <sendOrderStepper+0x1a4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80014c0:	4a45      	ldr	r2, [pc, #276]	; (80015d8 <sendOrderStepper+0x1a8>)
 80014c2:	5cd2      	ldrb	r2, [r2, r3]
 80014c4:	4b45      	ldr	r3, [pc, #276]	; (80015dc <sendOrderStepper+0x1ac>)
 80014c6:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[index_sin_loop-256];
 80014c8:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <sendOrderStepper+0x1a4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014d0:	4a41      	ldr	r2, [pc, #260]	; (80015d8 <sendOrderStepper+0x1a8>)
 80014d2:	5cd2      	ldrb	r2, [r2, r3]
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <sendOrderStepper+0x1b0>)
 80014d6:	701a      	strb	r2, [r3, #0]
					polarityCoilA = polarity;
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <sendOrderStepper+0x1b4>)
 80014de:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 0;
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <sendOrderStepper+0x1b8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e039      	b.n	800155c <sendOrderStepper+0x12c>
				}
				else if(index_sin_loop < 768){
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <sendOrderStepper+0x1a4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014f0:	da1a      	bge.n	8001528 <sendOrderStepper+0xf8>
					currentCoilA = sinTable[index_sin_loop-512];
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <sendOrderStepper+0x1a4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80014fa:	4a37      	ldr	r2, [pc, #220]	; (80015d8 <sendOrderStepper+0x1a8>)
 80014fc:	5cd2      	ldrb	r2, [r2, r3]
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <sendOrderStepper+0x1ac>)
 8001500:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[768-index_sin_loop];
 8001502:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <sendOrderStepper+0x1a4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f5c3 7340 	rsb	r3, r3, #768	; 0x300
 800150a:	4a33      	ldr	r2, [pc, #204]	; (80015d8 <sendOrderStepper+0x1a8>)
 800150c:	5cd2      	ldrb	r2, [r2, r3]
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <sendOrderStepper+0x1b0>)
 8001510:	701a      	strb	r2, [r3, #0]
					polarityCoilA = 1 - polarity;
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f1c3 0301 	rsb	r3, r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <sendOrderStepper+0x1b4>)
 800151e:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 0;
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <sendOrderStepper+0x1b8>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e019      	b.n	800155c <sendOrderStepper+0x12c>
				}
				else{
					currentCoilA = sinTable[1024-index_sin_loop];
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <sendOrderStepper+0x1a4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001530:	4a29      	ldr	r2, [pc, #164]	; (80015d8 <sendOrderStepper+0x1a8>)
 8001532:	5cd2      	ldrb	r2, [r2, r3]
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <sendOrderStepper+0x1ac>)
 8001536:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[index_sin_loop-768];
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <sendOrderStepper+0x1a4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001540:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <sendOrderStepper+0x1a8>)
 8001542:	5cd2      	ldrb	r2, [r2, r3]
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <sendOrderStepper+0x1b0>)
 8001546:	701a      	strb	r2, [r3, #0]
					polarityCoilA = 1 - polarity;
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f1c3 0301 	rsb	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <sendOrderStepper+0x1b4>)
 8001554:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 1;
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <sendOrderStepper+0x1b8>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
				}
				index_sin_loop = (index_sin_loop+1)%1024;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <sendOrderStepper+0x1a4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	425a      	negs	r2, r3
 8001564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001568:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800156c:	bf58      	it	pl
 800156e:	4253      	negpl	r3, r2
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <sendOrderStepper+0x1a4>)
 8001572:	6013      	str	r3, [r2, #0]
				indice++;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]

				drvCtrlCommand = (polarityCoilA << 17) | (currentCoilA << 9) | (polarityCoilB << 8) | (currentCoilB << 0);
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <sendOrderStepper+0x1b4>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	045a      	lsls	r2, r3, #17
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <sendOrderStepper+0x1ac>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	431a      	orrs	r2, r3
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <sendOrderStepper+0x1b8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	4313      	orrs	r3, r2
 8001590:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <sendOrderStepper+0x1b0>)
 8001592:	7812      	ldrb	r2, [r2, #0]
 8001594:	4313      	orrs	r3, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <sendOrderStepper+0x1bc>)
 800159a:	601a      	str	r2, [r3, #0]
				tmc2590_SetTxBufferInt32(&htmc2590, drvCtrlCommand);
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <sendOrderStepper+0x1bc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sendOrderStepper+0x1c0>)
 80015a4:	f7ff ff16 	bl	80013d4 <tmc2590_SetTxBufferInt32>
				tmc2590_TransmitReceive(&htmc2590, TMC2590_CMD_SIZE);
 80015a8:	2103      	movs	r1, #3
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <sendOrderStepper+0x1c0>)
 80015ac:	f7ff feef 	bl	800138e <tmc2590_TransmitReceive>
				perioedElapsed_IT = 0;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <sendOrderStepper+0x1a0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	while (indice != order){
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f47f af58 	bne.w	8001470 <sendOrderStepper+0x40>
			}
	}
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	f3af 8000 	nop.w
 80015d0:	20000158 	.word	0x20000158
 80015d4:	2000015c 	.word	0x2000015c
 80015d8:	08005ad8 	.word	0x08005ad8
 80015dc:	20000160 	.word	0x20000160
 80015e0:	20000161 	.word	0x20000161
 80015e4:	20000162 	.word	0x20000162
 80015e8:	20000163 	.word	0x20000163
 80015ec:	20000164 	.word	0x20000164
 80015f0:	20000124 	.word	0x20000124
 80015f4:	66666666 	.word	0x66666666
 80015f8:	4061c666 	.word	0x4061c666

080015fc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001602:	4a22      	ldr	r2, [pc, #136]	; (800168c <MX_LPUART1_UART_Init+0x90>)
 8001604:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800163e:	4812      	ldr	r0, [pc, #72]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001640:	f003 fb54 	bl	8004cec <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800164a:	f7ff fba2 	bl	8000d92 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001652:	f004 f91b 	bl	800588c <HAL_UARTEx_SetTxFifoThreshold>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800165c:	f7ff fb99 	bl	8000d92 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001664:	f004 f950 	bl	8005908 <HAL_UARTEx_SetRxFifoThreshold>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800166e:	f7ff fb90 	bl	8000d92 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_LPUART1_UART_Init+0x8c>)
 8001674:	f004 f8d1 	bl	800581a <HAL_UARTEx_DisableFifoMode>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800167e:	f7ff fb88 	bl	8000d92 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000168 	.word	0x20000168
 800168c:	40008000 	.word	0x40008000

08001690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b09e      	sub	sp, #120	; 0x78
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2254      	movs	r2, #84	; 0x54
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 f9b5 	bl	8005a20 <memset>
  if(uartHandle->Instance==LPUART1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_UART_MspInit+0xa8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d136      	bne.n	800172e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016c0:	2320      	movs	r3, #32
 80016c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 f9a9 	bl	8002a24 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d8:	f7ff fb5b 	bl	8000d92 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_UART_MspInit+0xac>)
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	4a16      	ldr	r2, [pc, #88]	; (800173c <HAL_UART_MspInit+0xac>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_UART_MspInit+0xac>)
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_UART_MspInit+0xac>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_UART_MspInit+0xac>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_UART_MspInit+0xac>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800170c:	230c      	movs	r3, #12
 800170e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800171c:	230c      	movs	r3, #12
 800171e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f000 f9d5 	bl	8001ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800172e:	bf00      	nop
 8001730:	3778      	adds	r7, #120	; 0x78
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40008000 	.word	0x40008000
 800173c:	40021000 	.word	0x40021000

08001740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001742:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <LoopForever+0x6>)
  ldr r1, =_edata
 8001746:	490e      	ldr	r1, [pc, #56]	; (8001780 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <LoopForever+0xe>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <LoopForever+0x12>)
  ldr r4, =_ebss
 800175c:	4c0b      	ldr	r4, [pc, #44]	; (800178c <LoopForever+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800176a:	f7ff fc09 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f004 f95f 	bl	8005a30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001772:	f7ff fa77 	bl	8000c64 <main>

08001776 <LoopForever>:

LoopForever:
    b LoopForever
 8001776:	e7fe      	b.n	8001776 <LoopForever>
  ldr   r0, =_estack
 8001778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001784:	08005c10 	.word	0x08005c10
  ldr r2, =_sbss
 8001788:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800178c:	200001fc 	.word	0x200001fc

08001790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC1_2_IRQHandler>

08001792 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f95b 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 f80e 	bl	80017c4 <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	e001      	b.n	80017b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b4:	f7ff fb84 	bl	8000ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b8:	79fb      	ldrb	r3, [r7, #7]

}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_InitTick+0x68>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d022      	beq.n	800181e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_InitTick+0x6c>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_InitTick+0x68>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f966 	bl	8001abe <HAL_SYSTICK_Config>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10f      	bne.n	8001818 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d809      	bhi.n	8001812 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fe:	2200      	movs	r2, #0
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	f04f 30ff 	mov.w	r0, #4294967295
 8001806:	f000 f932 	bl	8001a6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_InitTick+0x70>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e007      	b.n	8001822 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	e004      	b.n	8001822 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e001      	b.n	8001822 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000008 	.word	0x20000008
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4413      	add	r3, r2
 8001846:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_IncTick+0x1c>)
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	200001f8 	.word	0x200001f8
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200001f8 	.word	0x200001f8

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff ffee 	bl	800185c <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d004      	beq.n	8001898 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_Delay+0x40>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001898:	bf00      	nop
 800189a:	f7ff ffdf 	bl	800185c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d8f7      	bhi.n	800189a <HAL_Delay+0x26>
  {
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000008 	.word	0x20000008

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff40 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff90 	bl	80019ac <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5f 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff33 	bl	800191c <__NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa4 	bl	8001a14 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ae6:	e15a      	b.n	8001d9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 814c 	beq.w	8001d98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d005      	beq.n	8001b18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d130      	bne.n	8001b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b4e:	2201      	movs	r2, #1
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	f003 0201 	and.w	r2, r3, #1
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d017      	beq.n	8001bb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d123      	bne.n	8001c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	6939      	ldr	r1, [r7, #16]
 8001c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0203 	and.w	r2, r3, #3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80a6 	beq.w	8001d98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4c:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c50:	4a5a      	ldr	r2, [pc, #360]	; (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6613      	str	r3, [r2, #96]	; 0x60
 8001c58:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c64:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c8e:	d01f      	beq.n	8001cd0 <HAL_GPIO_Init+0x1f8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4c      	ldr	r2, [pc, #304]	; (8001dc4 <HAL_GPIO_Init+0x2ec>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d019      	beq.n	8001ccc <HAL_GPIO_Init+0x1f4>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_GPIO_Init+0x1f0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a4a      	ldr	r2, [pc, #296]	; (8001dcc <HAL_GPIO_Init+0x2f4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_GPIO_Init+0x1ec>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <HAL_GPIO_Init+0x2f8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_GPIO_Init+0x2fc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_GPIO_Init+0x1e4>
 8001cb8:	2305      	movs	r3, #5
 8001cba:	e00a      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	e008      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	e006      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e004      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_GPIO_Init+0x1fa>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce2:	4937      	ldr	r1, [pc, #220]	; (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d14:	4a30      	ldr	r2, [pc, #192]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d3e:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d92:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f ae9d 	bne.w	8001ae8 <HAL_GPIO_Init+0x10>
  }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	48000400 	.word	0x48000400
 8001dc8:	48000800 	.word	0x48000800
 8001dcc:	48000c00 	.word	0x48000c00
 8001dd0:	48001000 	.word	0x48001000
 8001dd4:	48001400 	.word	0x48001400
 8001dd8:	40010400 	.word	0x40010400

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f806 	bl	8001e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d141      	bne.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e62:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6e:	d131      	bne.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e70:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e76:	4a46      	ldr	r2, [pc, #280]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e88:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e90:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2232      	movs	r2, #50	; 0x32
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	; (8001f98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea6:	e002      	b.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eba:	d102      	bne.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f2      	bne.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ece:	d158      	bne.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e057      	b.n	8001f84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eda:	4a2d      	ldr	r2, [pc, #180]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ee4:	e04d      	b.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eec:	d141      	bne.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eee:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d131      	bne.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f02:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f14:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2232      	movs	r2, #50	; 0x32
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	0c9b      	lsrs	r3, r3, #18
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f32:	e002      	b.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f46:	d102      	bne.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f2      	bne.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5a:	d112      	bne.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e011      	b.n	8001f84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f70:	e007      	b.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40007000 	.word	0x40007000
 8001f94:	20000000 	.word	0x20000000
 8001f98:	431bde83 	.word	0x431bde83

08001f9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001faa:	6093      	str	r3, [r2, #8]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40007000 	.word	0x40007000

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e306      	b.n	80025dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fda:	4b97      	ldr	r3, [pc, #604]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe4:	4b94      	ldr	r3, [pc, #592]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3e>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d002      	beq.n	8002000 <HAL_RCC_OscConfig+0x44>
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b8d      	ldr	r3, [pc, #564]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d157      	bne.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e2e1      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x74>
 8002022:	4b85      	ldr	r3, [pc, #532]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a84      	ldr	r2, [pc, #528]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x98>
 800203a:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a7e      	ldr	r2, [pc, #504]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b7c      	ldr	r3, [pc, #496]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7b      	ldr	r2, [pc, #492]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002054:	4b78      	ldr	r3, [pc, #480]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a77      	ldr	r2, [pc, #476]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b75      	ldr	r3, [pc, #468]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a74      	ldr	r2, [pc, #464]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7ff fbf2 	bl	800185c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fbee 	bl	800185c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e2a6      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208e:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xc0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff fbde 	bl	800185c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fbda 	bl	800185c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e292      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b6:	4b60      	ldr	r3, [pc, #384]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d075      	beq.n	80021be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d2:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020dc:	4b56      	ldr	r3, [pc, #344]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x136>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_OscConfig+0x13c>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d11f      	bne.n	8002138 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_OscConfig+0x154>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e265      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b49      	ldr	r3, [pc, #292]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	4946      	ldr	r1, [pc, #280]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002124:	4b45      	ldr	r3, [pc, #276]	; (800223c <HAL_RCC_OscConfig+0x280>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fb4b 	bl	80017c4 <HAL_InitTick>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d043      	beq.n	80021bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e251      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3c      	ldr	r2, [pc, #240]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff fb86 	bl	800185c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff fb82 	bl	800185c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e23a      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002166:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	061b      	lsls	r3, r3, #24
 8002180:	492d      	ldr	r1, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
 8002186:	e01a      	b.n	80021be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 800218e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fb62 	bl	800185c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff fb5e 	bl	800185c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e216      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1e0>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d041      	beq.n	800224e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01c      	beq.n	800220c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d8:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7ff fb3b 	bl	800185c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff fb37 	bl	800185c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e1ef      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80021fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0ef      	beq.n	80021ea <HAL_RCC_OscConfig+0x22e>
 800220a:	e020      	b.n	800224e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff fb1e 	bl	800185c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002222:	e00d      	b.n	8002240 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002224:	f7ff fb1a 	bl	800185c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d906      	bls.n	8002240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1d2      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002240:	4b8c      	ldr	r3, [pc, #560]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ea      	bne.n	8002224 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80a6 	beq.w	80023a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002260:	4b84      	ldr	r3, [pc, #528]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x2b4>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x2b6>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00d      	beq.n	8002292 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b7f      	ldr	r3, [pc, #508]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	4a7e      	ldr	r2, [pc, #504]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6593      	str	r3, [r2, #88]	; 0x58
 8002282:	4b7c      	ldr	r3, [pc, #496]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002292:	4b79      	ldr	r3, [pc, #484]	; (8002478 <HAL_RCC_OscConfig+0x4bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x4bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a75      	ldr	r2, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x4bc>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fad7 	bl	800185c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7ff fad3 	bl	800185c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e18b      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c4:	4b6c      	ldr	r3, [pc, #432]	; (8002478 <HAL_RCC_OscConfig+0x4bc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d108      	bne.n	80022ea <HAL_RCC_OscConfig+0x32e>
 80022d8:	4b66      	ldr	r3, [pc, #408]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a65      	ldr	r2, [pc, #404]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e8:	e024      	b.n	8002334 <HAL_RCC_OscConfig+0x378>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d110      	bne.n	8002314 <HAL_RCC_OscConfig+0x358>
 80022f2:	4b60      	ldr	r3, [pc, #384]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	4a5e      	ldr	r2, [pc, #376]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002302:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	4a5a      	ldr	r2, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002312:	e00f      	b.n	8002334 <HAL_RCC_OscConfig+0x378>
 8002314:	4b57      	ldr	r3, [pc, #348]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	4a56      	ldr	r2, [pc, #344]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d016      	beq.n	800236a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7ff fa8e 	bl	800185c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7ff fa8a 	bl	800185c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e140      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235a:	4b46      	ldr	r3, [pc, #280]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ed      	beq.n	8002344 <HAL_RCC_OscConfig+0x388>
 8002368:	e015      	b.n	8002396 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7ff fa77 	bl	800185c <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7ff fa73 	bl	800185c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e129      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ed      	bne.n	8002372 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002396:	7ffb      	ldrb	r3, [r7, #31]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	4a34      	ldr	r2, [pc, #208]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d03c      	beq.n	800242e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01c      	beq.n	80023f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80023be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023c2:	4a2c      	ldr	r2, [pc, #176]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7ff fa46 	bl	800185c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d4:	f7ff fa42 	bl	800185c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0fa      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80023e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ef      	beq.n	80023d4 <HAL_RCC_OscConfig+0x418>
 80023f4:	e01b      	b.n	800242e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80023f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7ff fa29 	bl	800185c <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800240e:	f7ff fa25 	bl	800185c <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0dd      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ef      	bne.n	800240e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80d1 	beq.w	80025da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b0c      	cmp	r3, #12
 8002442:	f000 808b 	beq.w	800255c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d15e      	bne.n	800250c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_RCC_OscConfig+0x4b8>)
 8002454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7ff f9ff 	bl	800185c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002460:	e00c      	b.n	800247c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7ff f9fb 	bl	800185c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d905      	bls.n	800247c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0b3      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ec      	bne.n	8002462 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002488:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <HAL_RCC_OscConfig+0x62c>)
 800248e:	4013      	ands	r3, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6a11      	ldr	r1, [r2, #32]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002498:	3a01      	subs	r2, #1
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024a2:	0212      	lsls	r2, r2, #8
 80024a4:	4311      	orrs	r1, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024aa:	0852      	lsrs	r2, r2, #1
 80024ac:	3a01      	subs	r2, #1
 80024ae:	0552      	lsls	r2, r2, #21
 80024b0:	4311      	orrs	r1, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024b6:	0852      	lsrs	r2, r2, #1
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0652      	lsls	r2, r2, #25
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024c2:	06d2      	lsls	r2, r2, #27
 80024c4:	430a      	orrs	r2, r1
 80024c6:	4947      	ldr	r1, [pc, #284]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a44      	ldr	r2, [pc, #272]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 80024d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d8:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a41      	ldr	r2, [pc, #260]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7ff f9ba 	bl	800185c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7ff f9b6 	bl	800185c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e06e      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fe:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x530>
 800250a:	e066      	b.n	80025da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a34      	ldr	r2, [pc, #208]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 8002512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002524:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a2e      	ldr	r2, [pc, #184]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 800252a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff f992 	bl	800185c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff f98e 	bl	800185c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e046      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x580>
 800255a:	e03e      	b.n	80025da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e039      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_OscConfig+0x628>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	429a      	cmp	r2, r3
 800257a:	d12c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	3b01      	subs	r3, #1
 8002588:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d123      	bne.n	80025d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d11b      	bne.n	80025d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d113      	bne.n	80025d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	3b01      	subs	r3, #1
 80025bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	019f800c 	.word	0x019f800c

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e11e      	b.n	8002842 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b91      	ldr	r3, [pc, #580]	; (800284c <HAL_RCC_ClockConfig+0x260>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <HAL_RCC_ClockConfig+0x260>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 020f 	bic.w	r2, r3, #15
 800261a:	498c      	ldr	r1, [pc, #560]	; (800284c <HAL_RCC_ClockConfig+0x260>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b8a      	ldr	r3, [pc, #552]	; (800284c <HAL_RCC_ClockConfig+0x260>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e106      	b.n	8002842 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d073      	beq.n	8002728 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d129      	bne.n	800269c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002648:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0f4      	b.n	8002842 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002658:	f000 f99e 	bl	8002998 <RCC_GetSysClockFreqFromPLLSource>
 800265c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4a7c      	ldr	r2, [pc, #496]	; (8002854 <HAL_RCC_ClockConfig+0x268>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d93f      	bls.n	80026e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002666:	4b7a      	ldr	r3, [pc, #488]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800267a:	2b00      	cmp	r3, #0
 800267c:	d033      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002682:	2b00      	cmp	r3, #0
 8002684:	d12f      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002686:	4b72      	ldr	r3, [pc, #456]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800268e:	4a70      	ldr	r2, [pc, #448]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e024      	b.n	80026e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0c6      	b.n	8002842 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0be      	b.n	8002842 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026c4:	f000 f8ce 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4a61      	ldr	r2, [pc, #388]	; (8002854 <HAL_RCC_ClockConfig+0x268>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d909      	bls.n	80026e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026da:	4a5d      	ldr	r2, [pc, #372]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 80026dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4957      	ldr	r1, [pc, #348]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7ff f8b0 	bl	800185c <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7ff f8ac 	bl	800185c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e095      	b.n	8002842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800274a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002758:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002760:	4a3b      	ldr	r2, [pc, #236]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4936      	ldr	r1, [pc, #216]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
 800277a:	e008      	b.n	800278e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b80      	cmp	r3, #128	; 0x80
 8002780:	d105      	bne.n	800278e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4a32      	ldr	r2, [pc, #200]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002788:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800278c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_ClockConfig+0x260>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d21d      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_ClockConfig+0x260>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 020f 	bic.w	r2, r3, #15
 80027a4:	4929      	ldr	r1, [pc, #164]	; (800284c <HAL_RCC_ClockConfig+0x260>)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027ac:	f7ff f856 	bl	800185c <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7ff f852 	bl	800185c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e03b      	b.n	8002842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_RCC_ClockConfig+0x260>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1ed      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4917      	ldr	r1, [pc, #92]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490f      	ldr	r1, [pc, #60]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002816:	f000 f825 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCC_ClockConfig+0x264>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490c      	ldr	r1, [pc, #48]	; (8002858 <HAL_RCC_ClockConfig+0x26c>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <HAL_RCC_ClockConfig+0x270>)
 8002834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <HAL_RCC_ClockConfig+0x274>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe ffc2 	bl	80017c4 <HAL_InitTick>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40022000 	.word	0x40022000
 8002850:	40021000 	.word	0x40021000
 8002854:	04c4b400 	.word	0x04c4b400
 8002858:	08005ac0 	.word	0x08005ac0
 800285c:	20000000 	.word	0x20000000
 8002860:	20000004 	.word	0x20000004

08002864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b04      	cmp	r3, #4
 8002874:	d102      	bne.n	800287c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	e047      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d102      	bne.n	800288e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <HAL_RCC_GetSysClockFreq+0xc0>)
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	e03e      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d136      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3301      	adds	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b8:	4a1a      	ldr	r2, [pc, #104]	; (8002924 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	4a16      	ldr	r2, [pc, #88]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c2:	68d2      	ldr	r2, [r2, #12]
 80028c4:	0a12      	lsrs	r2, r2, #8
 80028c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
      break;
 80028d0:	e00c      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028dc:	68d2      	ldr	r2, [r2, #12]
 80028de:	0a12      	lsrs	r2, r2, #8
 80028e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028e4:	fb02 f303 	mul.w	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
      break;
 80028ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	0e5b      	lsrs	r3, r3, #25
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	3301      	adds	r3, #1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	e001      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800290c:	693b      	ldr	r3, [r7, #16]
}
 800290e:	4618      	mov	r0, r3
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	00f42400 	.word	0x00f42400
 8002924:	016e3600 	.word	0x016e3600

08002928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_GetHCLKFreq+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000000 	.word	0x20000000

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002944:	f7ff fff0 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	08005ad0 	.word	0x08005ad0

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002970:	f7ff ffda 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0adb      	lsrs	r3, r3, #11
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4904      	ldr	r1, [pc, #16]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	08005ad0 	.word	0x08005ad0

08002998 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800299e:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d10c      	bne.n	80029d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029bc:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c6:	68d2      	ldr	r2, [r2, #12]
 80029c8:	0a12      	lsrs	r2, r2, #8
 80029ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	617b      	str	r3, [r7, #20]
    break;
 80029d4:	e00c      	b.n	80029f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d6:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029e0:	68d2      	ldr	r2, [r2, #12]
 80029e2:	0a12      	lsrs	r2, r2, #8
 80029e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
    break;
 80029ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0e5b      	lsrs	r3, r3, #25
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	3301      	adds	r3, #1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a0a:	687b      	ldr	r3, [r7, #4]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	016e3600 	.word	0x016e3600
 8002a20:	00f42400 	.word	0x00f42400

08002a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a30:	2300      	movs	r3, #0
 8002a32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8098 	beq.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	4a3f      	ldr	r2, [pc, #252]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a39      	ldr	r2, [pc, #228]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a7a:	f7fe feef 	bl	800185c <HAL_GetTick>
 8002a7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a80:	e009      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a82:	f7fe feeb 	bl	800185c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d902      	bls.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	74fb      	strb	r3, [r7, #19]
        break;
 8002a94:	e005      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ef      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d159      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01e      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d019      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ac4:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ace:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe feab 	bl	800185c <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b08:	e00b      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fea7 	bl	800185c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d902      	bls.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	74fb      	strb	r3, [r7, #19]
            break;
 8002b20:	e006      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ec      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b4c:	e008      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	74bb      	strb	r3, [r7, #18]
 8002b52:	e005      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b60:	7c7b      	ldrb	r3, [r7, #17]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4ba7      	ldr	r3, [pc, #668]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	4aa6      	ldr	r2, [pc, #664]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7e:	4ba1      	ldr	r3, [pc, #644]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f023 0203 	bic.w	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	499d      	ldr	r1, [pc, #628]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba0:	4b98      	ldr	r3, [pc, #608]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f023 020c 	bic.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4995      	ldr	r1, [pc, #596]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc2:	4b90      	ldr	r3, [pc, #576]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	498c      	ldr	r1, [pc, #560]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be4:	4b87      	ldr	r3, [pc, #540]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	4984      	ldr	r1, [pc, #528]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c06:	4b7f      	ldr	r3, [pc, #508]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	497b      	ldr	r1, [pc, #492]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c28:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	4973      	ldr	r1, [pc, #460]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c4a:	4b6e      	ldr	r3, [pc, #440]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	496a      	ldr	r1, [pc, #424]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c6c:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	4962      	ldr	r1, [pc, #392]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	4959      	ldr	r1, [pc, #356]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cb0:	4b54      	ldr	r3, [pc, #336]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	4951      	ldr	r1, [pc, #324]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	4948      	ldr	r1, [pc, #288]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cf4:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4940      	ldr	r1, [pc, #256]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d12:	d105      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d14:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d015      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d2c:	4b35      	ldr	r3, [pc, #212]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	4932      	ldr	r1, [pc, #200]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a2c      	ldr	r2, [pc, #176]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d64:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	4924      	ldr	r1, [pc, #144]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d82:	d105      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d84:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d015      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d9c:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	4916      	ldr	r1, [pc, #88]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d019      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4908      	ldr	r1, [pc, #32]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df2:	d109      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a02      	ldr	r2, [pc, #8]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfe:	60d3      	str	r3, [r2, #12]
 8002e00:	e002      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d015      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4926      	ldr	r1, [pc, #152]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e32:	d105      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e34:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d015      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	4918      	ldr	r1, [pc, #96]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d015      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e84:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	490a      	ldr	r1, [pc, #40]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ea2:	d105      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e09d      	b.n	800300e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee2:	d009      	beq.n	8002ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
 8002eea:	e005      	b.n	8002ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd ff80 	bl	8000e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f38:	d902      	bls.n	8002f40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	e002      	b.n	8002f46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f4e:	d007      	beq.n	8002f60 <HAL_SPI_Init+0xa0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f58:	d002      	beq.n	8002f60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	ea42 0103 	orr.w	r1, r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	0c1b      	lsrs	r3, r3, #16
 8002fbc:	f003 0204 	and.w	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fdc:	ea42 0103 	orr.w	r1, r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b08a      	sub	sp, #40	; 0x28
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003024:	2301      	movs	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_SPI_TransmitReceive+0x26>
 8003038:	2302      	movs	r3, #2
 800303a:	e1fb      	b.n	8003434 <HAL_SPI_TransmitReceive+0x41e>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003044:	f7fe fc0a 	bl	800185c <HAL_GetTick>
 8003048:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003050:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003060:	7efb      	ldrb	r3, [r7, #27]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d00e      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x6e>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800306c:	d106      	bne.n	800307c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <HAL_SPI_TransmitReceive+0x66>
 8003076:	7efb      	ldrb	r3, [r7, #27]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d003      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800307c:	2302      	movs	r3, #2
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003082:	e1cd      	b.n	8003420 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_SPI_TransmitReceive+0x80>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_SPI_TransmitReceive+0x80>
 8003090:	887b      	ldrh	r3, [r7, #2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800309c:	e1c0      	b.n	8003420 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d003      	beq.n	80030b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2205      	movs	r2, #5
 80030ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	887a      	ldrh	r2, [r7, #2]
 80030c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	887a      	ldrh	r2, [r7, #2]
 80030de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f4:	d802      	bhi.n	80030fc <HAL_SPI_TransmitReceive+0xe6>
 80030f6:	8a3b      	ldrh	r3, [r7, #16]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d908      	bls.n	800310e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	e007      	b.n	800311e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800311c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d007      	beq.n	800313c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003144:	d97c      	bls.n	8003240 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_SPI_TransmitReceive+0x13e>
 800314e:	8a7b      	ldrh	r3, [r7, #18]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d169      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	881a      	ldrh	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	1c9a      	adds	r2, r3, #2
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003178:	e056      	b.n	8003228 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b02      	cmp	r3, #2
 8003186:	d11b      	bne.n	80031c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_SPI_TransmitReceive+0x1aa>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	2b01      	cmp	r3, #1
 8003196:	d113      	bne.n	80031c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d11c      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x1f2>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	b292      	uxth	r2, r2
 80031e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003204:	2301      	movs	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003208:	f7fe fb28 	bl	800185c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003214:	429a      	cmp	r2, r3
 8003216:	d807      	bhi.n	8003228 <HAL_SPI_TransmitReceive+0x212>
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d003      	beq.n	8003228 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003226:	e0fb      	b.n	8003420 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1a3      	bne.n	800317a <HAL_SPI_TransmitReceive+0x164>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d19d      	bne.n	800317a <HAL_SPI_TransmitReceive+0x164>
 800323e:	e0df      	b.n	8003400 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x23a>
 8003248:	8a7b      	ldrh	r3, [r7, #18]
 800324a:	2b01      	cmp	r3, #1
 800324c:	f040 80cb 	bne.w	80033e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d912      	bls.n	8003280 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	881a      	ldrh	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	1c9a      	adds	r2, r3, #2
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b02      	subs	r3, #2
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800327e:	e0b2      	b.n	80033e6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a6:	e09e      	b.n	80033e6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d134      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x30a>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02f      	beq.n	8003320 <HAL_SPI_TransmitReceive+0x30a>
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d12c      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d912      	bls.n	80032f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b02      	subs	r3, #2
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032f4:	e012      	b.n	800331c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d148      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x3aa>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d042      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d923      	bls.n	800338e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	b292      	uxth	r2, r2
 8003352:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b02      	subs	r3, #2
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d81f      	bhi.n	80033bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	e016      	b.n	80033bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f103 020c 	add.w	r2, r3, #12
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033bc:	2301      	movs	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033c0:	f7fe fa4c 	bl	800185c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d803      	bhi.n	80033d8 <HAL_SPI_TransmitReceive+0x3c2>
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d102      	bne.n	80033de <HAL_SPI_TransmitReceive+0x3c8>
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033e4:	e01c      	b.n	8003420 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f47f af5b 	bne.w	80032a8 <HAL_SPI_TransmitReceive+0x292>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f af54 	bne.w	80032a8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f937 	bl	8003678 <SPI_EndRxTxTransaction>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d006      	beq.n	800341e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	661a      	str	r2, [r3, #96]	; 0x60
 800341c:	e000      	b.n	8003420 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800341e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003434:	4618      	mov	r0, r3
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800344c:	f7fe fa06 	bl	800185c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4413      	add	r3, r2
 800345a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800345c:	f7fe f9fe 	bl	800185c <HAL_GetTick>
 8003460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	015b      	lsls	r3, r3, #5
 8003468:	0d1b      	lsrs	r3, r3, #20
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003472:	e054      	b.n	800351e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d050      	beq.n	800351e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800347c:	f7fe f9ee 	bl	800185c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	429a      	cmp	r2, r3
 800348a:	d902      	bls.n	8003492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d13d      	bne.n	800350e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d111      	bne.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b4:	d004      	beq.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034be:	d107      	bne.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d8:	d10f      	bne.n	80034fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e017      	b.n	800353e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	3b01      	subs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	429a      	cmp	r2, r3
 800353a:	d19b      	bne.n	8003474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000000 	.word	0x20000000

0800354c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800355e:	f7fe f97d 	bl	800185c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4413      	add	r3, r2
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800356e:	f7fe f975 	bl	800185c <HAL_GetTick>
 8003572:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800357c:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	00da      	lsls	r2, r3, #3
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	0d1b      	lsrs	r3, r3, #20
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003594:	e060      	b.n	8003658 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800359c:	d107      	bne.n	80035ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d050      	beq.n	8003658 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035b6:	f7fe f951 	bl	800185c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d902      	bls.n	80035cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d13d      	bne.n	8003648 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e4:	d111      	bne.n	800360a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ee:	d004      	beq.n	80035fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	d107      	bne.n	800360a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003608:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003612:	d10f      	bne.n	8003634 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003632:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e010      	b.n	800366a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	3b01      	subs	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d196      	bne.n	8003596 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3728      	adds	r7, #40	; 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000000 	.word	0x20000000

08003678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ff5b 	bl	800354c <SPI_WaitFifoStateUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e027      	b.n	80036fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff fec0 	bl	800343c <SPI_WaitFlagStateUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e014      	b.n	80036fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff ff34 	bl	800354c <SPI_WaitFifoStateUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e000      	b.n	80036fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e049      	b.n	80037aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fd3c 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f000 fcd6 	bl	80040f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e054      	b.n	8003876 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_TIM_Base_Start_IT+0xd0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d022      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d01d      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <HAL_TIM_Base_Start_IT+0xd4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d018      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a21      	ldr	r2, [pc, #132]	; (800388c <HAL_TIM_Base_Start_IT+0xd8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <HAL_TIM_Base_Start_IT+0xdc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00e      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_TIM_Base_Start_IT+0xe0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_TIM_Base_Start_IT+0xe4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1b      	ldr	r2, [pc, #108]	; (800389c <HAL_TIM_Base_Start_IT+0xe8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d115      	bne.n	8003860 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_TIM_Base_Start_IT+0xec>)
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b06      	cmp	r3, #6
 8003844:	d015      	beq.n	8003872 <HAL_TIM_Base_Start_IT+0xbe>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384c:	d011      	beq.n	8003872 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	e008      	b.n	8003872 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e000      	b.n	8003874 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40013400 	.word	0x40013400
 8003898:	40014000 	.word	0x40014000
 800389c:	40015000 	.word	0x40015000
 80038a0:	00010007 	.word	0x00010007

080038a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e049      	b.n	800394a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fc4c 	bl	8001168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	4610      	mov	r0, r2
 80038e4:	f000 fc06 	bl	80040f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d122      	bne.n	80039ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d11b      	bne.n	80039ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0202 	mvn.w	r2, #2
 800397e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fb8f 	bl	80040b8 <HAL_TIM_IC_CaptureCallback>
 800399a:	e005      	b.n	80039a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fb81 	bl	80040a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fb92 	bl	80040cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d122      	bne.n	8003a02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d11b      	bne.n	8003a02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0204 	mvn.w	r2, #4
 80039d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb65 	bl	80040b8 <HAL_TIM_IC_CaptureCallback>
 80039ee:	e005      	b.n	80039fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fb57 	bl	80040a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fb68 	bl	80040cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d122      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d11b      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0208 	mvn.w	r2, #8
 8003a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fb3b 	bl	80040b8 <HAL_TIM_IC_CaptureCallback>
 8003a42:	e005      	b.n	8003a50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fb2d 	bl	80040a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fb3e 	bl	80040cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d122      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d11b      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f06f 0210 	mvn.w	r2, #16
 8003a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2208      	movs	r2, #8
 8003a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fb11 	bl	80040b8 <HAL_TIM_IC_CaptureCallback>
 8003a96:	e005      	b.n	8003aa4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fb03 	bl	80040a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fb14 	bl	80040cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f06f 0201 	mvn.w	r2, #1
 8003ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7fd fc99 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d10e      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d107      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f001 f8b9 	bl	8004c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b80      	cmp	r3, #128	; 0x80
 8003b1e:	d107      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 f8ac 	bl	8004c88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fac2 	bl	80040e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d107      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0220 	mvn.w	r2, #32
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f001 f86c 	bl	8004c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b96:	d10f      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba6:	d107      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f001 f872 	bl	8004c9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc6:	d10f      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 f864 	bl	8004cb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf6:	d10f      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f001 f856 	bl	8004cc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c26:	d10f      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c36:	d107      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f001 f848 	bl	8004cd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0ff      	b.n	8003e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b14      	cmp	r3, #20
 8003c7a:	f200 80f0 	bhi.w	8003e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003e5f 	.word	0x08003e5f
 8003c8c:	08003e5f 	.word	0x08003e5f
 8003c90:	08003e5f 	.word	0x08003e5f
 8003c94:	08003d19 	.word	0x08003d19
 8003c98:	08003e5f 	.word	0x08003e5f
 8003c9c:	08003e5f 	.word	0x08003e5f
 8003ca0:	08003e5f 	.word	0x08003e5f
 8003ca4:	08003d5b 	.word	0x08003d5b
 8003ca8:	08003e5f 	.word	0x08003e5f
 8003cac:	08003e5f 	.word	0x08003e5f
 8003cb0:	08003e5f 	.word	0x08003e5f
 8003cb4:	08003d9b 	.word	0x08003d9b
 8003cb8:	08003e5f 	.word	0x08003e5f
 8003cbc:	08003e5f 	.word	0x08003e5f
 8003cc0:	08003e5f 	.word	0x08003e5f
 8003cc4:	08003ddd 	.word	0x08003ddd
 8003cc8:	08003e5f 	.word	0x08003e5f
 8003ccc:	08003e5f 	.word	0x08003e5f
 8003cd0:	08003e5f 	.word	0x08003e5f
 8003cd4:	08003e1d 	.word	0x08003e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fab0 	bl	8004244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0204 	bic.w	r2, r2, #4
 8003d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6999      	ldr	r1, [r3, #24]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	619a      	str	r2, [r3, #24]
      break;
 8003d16:	e0a5      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fb2a 	bl	8004378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6999      	ldr	r1, [r3, #24]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	619a      	str	r2, [r3, #24]
      break;
 8003d58:	e084      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fb9d 	bl	80044a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0208 	orr.w	r2, r2, #8
 8003d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0204 	bic.w	r2, r2, #4
 8003d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69d9      	ldr	r1, [r3, #28]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	61da      	str	r2, [r3, #28]
      break;
 8003d98:	e064      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fc0f 	bl	80045c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69d9      	ldr	r1, [r3, #28]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	021a      	lsls	r2, r3, #8
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	61da      	str	r2, [r3, #28]
      break;
 8003dda:	e043      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fc82 	bl	80046ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0208 	orr.w	r2, r2, #8
 8003df6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0204 	bic.w	r2, r2, #4
 8003e06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e1a:	e023      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fccc 	bl	80047c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e5c:	e002      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
      break;
 8003e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop

08003e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_TIM_ConfigClockSource+0x1c>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e0f6      	b.n	8004082 <HAL_TIM_ConfigClockSource+0x20a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003eb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6f      	ldr	r2, [pc, #444]	; (800408c <HAL_TIM_ConfigClockSource+0x214>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	f000 80c1 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003ed4:	4a6d      	ldr	r2, [pc, #436]	; (800408c <HAL_TIM_ConfigClockSource+0x214>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f200 80c6 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003edc:	4a6c      	ldr	r2, [pc, #432]	; (8004090 <HAL_TIM_ConfigClockSource+0x218>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	f000 80b9 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003ee4:	4a6a      	ldr	r2, [pc, #424]	; (8004090 <HAL_TIM_ConfigClockSource+0x218>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	f200 80be 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003eec:	4a69      	ldr	r2, [pc, #420]	; (8004094 <HAL_TIM_ConfigClockSource+0x21c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f000 80b1 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003ef4:	4a67      	ldr	r2, [pc, #412]	; (8004094 <HAL_TIM_ConfigClockSource+0x21c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	f200 80b6 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003efc:	4a66      	ldr	r2, [pc, #408]	; (8004098 <HAL_TIM_ConfigClockSource+0x220>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f000 80a9 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003f04:	4a64      	ldr	r2, [pc, #400]	; (8004098 <HAL_TIM_ConfigClockSource+0x220>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f200 80ae 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f0c:	4a63      	ldr	r2, [pc, #396]	; (800409c <HAL_TIM_ConfigClockSource+0x224>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	f000 80a1 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003f14:	4a61      	ldr	r2, [pc, #388]	; (800409c <HAL_TIM_ConfigClockSource+0x224>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f200 80a6 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f1c:	4a60      	ldr	r2, [pc, #384]	; (80040a0 <HAL_TIM_ConfigClockSource+0x228>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f000 8099 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003f24:	4a5e      	ldr	r2, [pc, #376]	; (80040a0 <HAL_TIM_ConfigClockSource+0x228>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f200 809e 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f30:	f000 8091 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003f34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f38:	f200 8096 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f40:	f000 8089 	beq.w	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f48:	f200 808e 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f50:	d03e      	beq.n	8003fd0 <HAL_TIM_ConfigClockSource+0x158>
 8003f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f56:	f200 8087 	bhi.w	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5e:	f000 8086 	beq.w	800406e <HAL_TIM_ConfigClockSource+0x1f6>
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	d87f      	bhi.n	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f68:	2b70      	cmp	r3, #112	; 0x70
 8003f6a:	d01a      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x12a>
 8003f6c:	2b70      	cmp	r3, #112	; 0x70
 8003f6e:	d87b      	bhi.n	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f70:	2b60      	cmp	r3, #96	; 0x60
 8003f72:	d050      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x19e>
 8003f74:	2b60      	cmp	r3, #96	; 0x60
 8003f76:	d877      	bhi.n	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f78:	2b50      	cmp	r3, #80	; 0x50
 8003f7a:	d03c      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0x17e>
 8003f7c:	2b50      	cmp	r3, #80	; 0x50
 8003f7e:	d873      	bhi.n	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d058      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0x1be>
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d86f      	bhi.n	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f88:	2b30      	cmp	r3, #48	; 0x30
 8003f8a:	d064      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003f8c:	2b30      	cmp	r3, #48	; 0x30
 8003f8e:	d86b      	bhi.n	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d060      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d867      	bhi.n	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d05c      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d05a      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x1de>
 8003fa0:	e062      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6899      	ldr	r1, [r3, #8]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f000 fced 	bl	8004990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	609a      	str	r2, [r3, #8]
      break;
 8003fce:	e04f      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6899      	ldr	r1, [r3, #8]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f000 fcd6 	bl	8004990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff2:	609a      	str	r2, [r3, #8]
      break;
 8003ff4:	e03c      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	461a      	mov	r2, r3
 8004004:	f000 fc48 	bl	8004898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2150      	movs	r1, #80	; 0x50
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fca1 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004014:	e02c      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	461a      	mov	r2, r3
 8004024:	f000 fc67 	bl	80048f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2160      	movs	r1, #96	; 0x60
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fc91 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004034:	e01c      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	461a      	mov	r2, r3
 8004044:	f000 fc28 	bl	8004898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2140      	movs	r1, #64	; 0x40
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fc81 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004054:	e00c      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f000 fc78 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004066:	e003      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
      break;
 800406c:	e000      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800406e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	00100070 	.word	0x00100070
 8004090:	00100060 	.word	0x00100060
 8004094:	00100050 	.word	0x00100050
 8004098:	00100040 	.word	0x00100040
 800409c:	00100030 	.word	0x00100030
 80040a0:	00100020 	.word	0x00100020

080040a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a46      	ldr	r2, [pc, #280]	; (8004220 <TIM_Base_SetConfig+0x12c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d017      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004112:	d013      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a43      	ldr	r2, [pc, #268]	; (8004224 <TIM_Base_SetConfig+0x130>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00f      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a42      	ldr	r2, [pc, #264]	; (8004228 <TIM_Base_SetConfig+0x134>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a41      	ldr	r2, [pc, #260]	; (800422c <TIM_Base_SetConfig+0x138>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d007      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a40      	ldr	r2, [pc, #256]	; (8004230 <TIM_Base_SetConfig+0x13c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3f      	ldr	r2, [pc, #252]	; (8004234 <TIM_Base_SetConfig+0x140>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a33      	ldr	r2, [pc, #204]	; (8004220 <TIM_Base_SetConfig+0x12c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d023      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d01f      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a30      	ldr	r2, [pc, #192]	; (8004224 <TIM_Base_SetConfig+0x130>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01b      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2f      	ldr	r2, [pc, #188]	; (8004228 <TIM_Base_SetConfig+0x134>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d017      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2e      	ldr	r2, [pc, #184]	; (800422c <TIM_Base_SetConfig+0x138>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2d      	ldr	r2, [pc, #180]	; (8004230 <TIM_Base_SetConfig+0x13c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2d      	ldr	r2, [pc, #180]	; (8004238 <TIM_Base_SetConfig+0x144>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a2c      	ldr	r2, [pc, #176]	; (800423c <TIM_Base_SetConfig+0x148>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <TIM_Base_SetConfig+0x14c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <TIM_Base_SetConfig+0x140>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a12      	ldr	r2, [pc, #72]	; (8004220 <TIM_Base_SetConfig+0x12c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a14      	ldr	r2, [pc, #80]	; (8004230 <TIM_Base_SetConfig+0x13c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00f      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <TIM_Base_SetConfig+0x144>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <TIM_Base_SetConfig+0x148>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <TIM_Base_SetConfig+0x14c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <TIM_Base_SetConfig+0x140>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	615a      	str	r2, [r3, #20]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40013400 	.word	0x40013400
 8004234:	40015000 	.word	0x40015000
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 0302 	bic.w	r3, r3, #2
 8004290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a30      	ldr	r2, [pc, #192]	; (8004360 <TIM_OC1_SetConfig+0x11c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <TIM_OC1_SetConfig+0x120>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00f      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a2e      	ldr	r2, [pc, #184]	; (8004368 <TIM_OC1_SetConfig+0x124>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a2d      	ldr	r2, [pc, #180]	; (800436c <TIM_OC1_SetConfig+0x128>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a2c      	ldr	r2, [pc, #176]	; (8004370 <TIM_OC1_SetConfig+0x12c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a2b      	ldr	r2, [pc, #172]	; (8004374 <TIM_OC1_SetConfig+0x130>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d10c      	bne.n	80042e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0308 	bic.w	r3, r3, #8
 80042d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 0304 	bic.w	r3, r3, #4
 80042e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <TIM_OC1_SetConfig+0x11c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <TIM_OC1_SetConfig+0x120>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <TIM_OC1_SetConfig+0x124>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1a      	ldr	r2, [pc, #104]	; (800436c <TIM_OC1_SetConfig+0x128>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a19      	ldr	r2, [pc, #100]	; (8004370 <TIM_OC1_SetConfig+0x12c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a18      	ldr	r2, [pc, #96]	; (8004374 <TIM_OC1_SetConfig+0x130>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d111      	bne.n	800433a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40013400 	.word	0x40013400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800
 8004374:	40015000 	.word	0x40015000

08004378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0210 	bic.w	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0320 	bic.w	r3, r3, #32
 80043c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <TIM_OC2_SetConfig+0x110>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_OC2_SetConfig+0x74>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a2b      	ldr	r2, [pc, #172]	; (800448c <TIM_OC2_SetConfig+0x114>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC2_SetConfig+0x74>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <TIM_OC2_SetConfig+0x118>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10d      	bne.n	8004408 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004406:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <TIM_OC2_SetConfig+0x110>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1e      	ldr	r2, [pc, #120]	; (800448c <TIM_OC2_SetConfig+0x114>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00f      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <TIM_OC2_SetConfig+0x11c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <TIM_OC2_SetConfig+0x120>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <TIM_OC2_SetConfig+0x124>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a17      	ldr	r2, [pc, #92]	; (8004490 <TIM_OC2_SetConfig+0x118>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d113      	bne.n	8004460 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800443e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40015000 	.word	0x40015000
 8004494:	40014000 	.word	0x40014000
 8004498:	40014400 	.word	0x40014400
 800449c:	40014800 	.word	0x40014800

080044a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <TIM_OC3_SetConfig+0x10c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_OC3_SetConfig+0x72>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <TIM_OC3_SetConfig+0x110>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC3_SetConfig+0x72>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a29      	ldr	r2, [pc, #164]	; (80045b4 <TIM_OC3_SetConfig+0x114>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10d      	bne.n	800452e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800452c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <TIM_OC3_SetConfig+0x10c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <TIM_OC3_SetConfig+0x110>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00f      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <TIM_OC3_SetConfig+0x118>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <TIM_OC3_SetConfig+0x11c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <TIM_OC3_SetConfig+0x120>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <TIM_OC3_SetConfig+0x114>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40013400 	.word	0x40013400
 80045b4:	40015000 	.word	0x40015000
 80045b8:	40014000 	.word	0x40014000
 80045bc:	40014400 	.word	0x40014400
 80045c0:	40014800 	.word	0x40014800

080045c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a2c      	ldr	r2, [pc, #176]	; (80046d4 <TIM_OC4_SetConfig+0x110>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_OC4_SetConfig+0x74>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a2b      	ldr	r2, [pc, #172]	; (80046d8 <TIM_OC4_SetConfig+0x114>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC4_SetConfig+0x74>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <TIM_OC4_SetConfig+0x118>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10d      	bne.n	8004654 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	031b      	lsls	r3, r3, #12
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <TIM_OC4_SetConfig+0x110>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <TIM_OC4_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00f      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <TIM_OC4_SetConfig+0x11c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <TIM_OC4_SetConfig+0x120>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <TIM_OC4_SetConfig+0x124>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <TIM_OC4_SetConfig+0x118>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d113      	bne.n	80046ac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800468a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004692:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40015000 	.word	0x40015000
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800

080046ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a19      	ldr	r2, [pc, #100]	; (80047a8 <TIM_OC5_SetConfig+0xbc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <TIM_OC5_SetConfig+0xc0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00f      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <TIM_OC5_SetConfig+0xc4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <TIM_OC5_SetConfig+0xc8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <TIM_OC5_SetConfig+0xcc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a14      	ldr	r2, [pc, #80]	; (80047bc <TIM_OC5_SetConfig+0xd0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d109      	bne.n	8004782 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	40013400 	.word	0x40013400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800
 80047bc:	40015000 	.word	0x40015000

080047c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	051b      	lsls	r3, r3, #20
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a1a      	ldr	r2, [pc, #104]	; (8004880 <TIM_OC6_SetConfig+0xc0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a19      	ldr	r2, [pc, #100]	; (8004884 <TIM_OC6_SetConfig+0xc4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00f      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a18      	ldr	r2, [pc, #96]	; (8004888 <TIM_OC6_SetConfig+0xc8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a17      	ldr	r2, [pc, #92]	; (800488c <TIM_OC6_SetConfig+0xcc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a16      	ldr	r2, [pc, #88]	; (8004890 <TIM_OC6_SetConfig+0xd0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <TIM_OC6_SetConfig+0xd4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d109      	bne.n	8004858 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	029b      	lsls	r3, r3, #10
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800
 8004894:	40015000 	.word	0x40015000

08004898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0210 	bic.w	r2, r3, #16
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	f043 0307 	orr.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	609a      	str	r2, [r3, #8]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e074      	b.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a34      	ldr	r2, [pc, #208]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a33      	ldr	r2, [pc, #204]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a31      	ldr	r2, [pc, #196]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d108      	bne.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a21      	ldr	r2, [pc, #132]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d01d      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d018      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a11      	ldr	r2, [pc, #68]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40013400 	.word	0x40013400
 8004ae8:	40015000 	.word	0x40015000
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40014000 	.word	0x40014000

08004afc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e096      	b.n	8004c46 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2d      	ldr	r2, [pc, #180]	; (8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2c      	ldr	r2, [pc, #176]	; (8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d106      	bne.n	8004bbe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a22      	ldr	r2, [pc, #136]	; (8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a21      	ldr	r2, [pc, #132]	; (8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d12b      	bne.n	8004c34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	051b      	lsls	r3, r3, #20
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d106      	bne.n	8004c34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40013400 	.word	0x40013400
 8004c5c:	40015000 	.word	0x40015000

08004c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e042      	b.n	8004d84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fc fcbd 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2224      	movs	r2, #36	; 0x24
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8c2 	bl	8004eb8 <UART_SetConfig>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e022      	b.n	8004d84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fbb2 	bl	80054b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fc39 	bl	80055f4 <UART_CheckIdleState>
 8004d82:	4603      	mov	r3, r0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	f040 8083 	bne.w	8004eae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_UART_Transmit+0x28>
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e07b      	b.n	8004eb0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Transmit+0x3a>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e074      	b.n	8004eb0 <HAL_UART_Transmit+0x124>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2221      	movs	r2, #33	; 0x21
 8004dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dde:	f7fc fd3d 	bl	800185c <HAL_GetTick>
 8004de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfc:	d108      	bne.n	8004e10 <HAL_UART_Transmit+0x84>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	e003      	b.n	8004e18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004e20:	e02c      	b.n	8004e7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fc2c 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e039      	b.n	8004eb0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10b      	bne.n	8004e5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	3302      	adds	r3, #2
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	e007      	b.n	8004e6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	781a      	ldrb	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	3301      	adds	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1cc      	bne.n	8004e22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2140      	movs	r1, #64	; 0x40
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fbf9 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e006      	b.n	8004eb0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e000      	b.n	8004eb0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004eae:	2302      	movs	r3, #2
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ebc:	b08c      	sub	sp, #48	; 0x30
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4baa      	ldr	r3, [pc, #680]	; (8005190 <UART_SetConfig+0x2d8>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a9f      	ldr	r2, [pc, #636]	; (8005194 <UART_SetConfig+0x2dc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f20:	4313      	orrs	r3, r2
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	f023 010f 	bic.w	r1, r3, #15
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a90      	ldr	r2, [pc, #576]	; (8005198 <UART_SetConfig+0x2e0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d125      	bne.n	8004fa8 <UART_SetConfig+0xf0>
 8004f5c:	4b8f      	ldr	r3, [pc, #572]	; (800519c <UART_SetConfig+0x2e4>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d81a      	bhi.n	8004fa0 <UART_SetConfig+0xe8>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0xb8>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004f89 	.word	0x08004f89
 8004f7c:	08004f99 	.word	0x08004f99
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f86:	e116      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8e:	e112      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f96:	e10e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9e:	e10a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	e106      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7c      	ldr	r2, [pc, #496]	; (80051a0 <UART_SetConfig+0x2e8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d138      	bne.n	8005024 <UART_SetConfig+0x16c>
 8004fb2:	4b7a      	ldr	r3, [pc, #488]	; (800519c <UART_SetConfig+0x2e4>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d82d      	bhi.n	800501c <UART_SetConfig+0x164>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x110>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ffd 	.word	0x08004ffd
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	0800501d 	.word	0x0800501d
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800501d 	.word	0x0800501d
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	0800501d 	.word	0x0800501d
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005002:	e0d8      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005004:	2302      	movs	r3, #2
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500a:	e0d4      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005012:	e0d0      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501a:	e0cc      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e0c8      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5e      	ldr	r2, [pc, #376]	; (80051a4 <UART_SetConfig+0x2ec>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d125      	bne.n	800507a <UART_SetConfig+0x1c2>
 800502e:	4b5b      	ldr	r3, [pc, #364]	; (800519c <UART_SetConfig+0x2e4>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005038:	2b30      	cmp	r3, #48	; 0x30
 800503a:	d016      	beq.n	800506a <UART_SetConfig+0x1b2>
 800503c:	2b30      	cmp	r3, #48	; 0x30
 800503e:	d818      	bhi.n	8005072 <UART_SetConfig+0x1ba>
 8005040:	2b20      	cmp	r3, #32
 8005042:	d00a      	beq.n	800505a <UART_SetConfig+0x1a2>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d814      	bhi.n	8005072 <UART_SetConfig+0x1ba>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <UART_SetConfig+0x19a>
 800504c:	2b10      	cmp	r3, #16
 800504e:	d008      	beq.n	8005062 <UART_SetConfig+0x1aa>
 8005050:	e00f      	b.n	8005072 <UART_SetConfig+0x1ba>
 8005052:	2300      	movs	r3, #0
 8005054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005058:	e0ad      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800505a:	2302      	movs	r3, #2
 800505c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005060:	e0a9      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005062:	2304      	movs	r3, #4
 8005064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005068:	e0a5      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800506a:	2308      	movs	r3, #8
 800506c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005070:	e0a1      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005072:	2310      	movs	r3, #16
 8005074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005078:	e09d      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4a      	ldr	r2, [pc, #296]	; (80051a8 <UART_SetConfig+0x2f0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d125      	bne.n	80050d0 <UART_SetConfig+0x218>
 8005084:	4b45      	ldr	r3, [pc, #276]	; (800519c <UART_SetConfig+0x2e4>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800508e:	2bc0      	cmp	r3, #192	; 0xc0
 8005090:	d016      	beq.n	80050c0 <UART_SetConfig+0x208>
 8005092:	2bc0      	cmp	r3, #192	; 0xc0
 8005094:	d818      	bhi.n	80050c8 <UART_SetConfig+0x210>
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d00a      	beq.n	80050b0 <UART_SetConfig+0x1f8>
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d814      	bhi.n	80050c8 <UART_SetConfig+0x210>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <UART_SetConfig+0x1f0>
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d008      	beq.n	80050b8 <UART_SetConfig+0x200>
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x210>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ae:	e082      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b6:	e07e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050be:	e07a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c6:	e076      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e072      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a35      	ldr	r2, [pc, #212]	; (80051ac <UART_SetConfig+0x2f4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d12a      	bne.n	8005130 <UART_SetConfig+0x278>
 80050da:	4b30      	ldr	r3, [pc, #192]	; (800519c <UART_SetConfig+0x2e4>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e8:	d01a      	beq.n	8005120 <UART_SetConfig+0x268>
 80050ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ee:	d81b      	bhi.n	8005128 <UART_SetConfig+0x270>
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d00c      	beq.n	8005110 <UART_SetConfig+0x258>
 80050f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fa:	d815      	bhi.n	8005128 <UART_SetConfig+0x270>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <UART_SetConfig+0x250>
 8005100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005104:	d008      	beq.n	8005118 <UART_SetConfig+0x260>
 8005106:	e00f      	b.n	8005128 <UART_SetConfig+0x270>
 8005108:	2300      	movs	r3, #0
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510e:	e052      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005110:	2302      	movs	r3, #2
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	e04e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005118:	2304      	movs	r3, #4
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511e:	e04a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005120:	2308      	movs	r3, #8
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005126:	e046      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005128:	2310      	movs	r3, #16
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512e:	e042      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <UART_SetConfig+0x2dc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d13a      	bne.n	80051b0 <UART_SetConfig+0x2f8>
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <UART_SetConfig+0x2e4>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005148:	d01a      	beq.n	8005180 <UART_SetConfig+0x2c8>
 800514a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800514e:	d81b      	bhi.n	8005188 <UART_SetConfig+0x2d0>
 8005150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005154:	d00c      	beq.n	8005170 <UART_SetConfig+0x2b8>
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515a:	d815      	bhi.n	8005188 <UART_SetConfig+0x2d0>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <UART_SetConfig+0x2b0>
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005164:	d008      	beq.n	8005178 <UART_SetConfig+0x2c0>
 8005166:	e00f      	b.n	8005188 <UART_SetConfig+0x2d0>
 8005168:	2300      	movs	r3, #0
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516e:	e022      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005170:	2302      	movs	r3, #2
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005176:	e01e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517e:	e01a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005186:	e016      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518e:	e012      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005190:	cfff69f3 	.word	0xcfff69f3
 8005194:	40008000 	.word	0x40008000
 8005198:	40013800 	.word	0x40013800
 800519c:	40021000 	.word	0x40021000
 80051a0:	40004400 	.word	0x40004400
 80051a4:	40004800 	.word	0x40004800
 80051a8:	40004c00 	.word	0x40004c00
 80051ac:	40005000 	.word	0x40005000
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4aae      	ldr	r2, [pc, #696]	; (8005474 <UART_SetConfig+0x5bc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	f040 8097 	bne.w	80052f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d823      	bhi.n	8005212 <UART_SetConfig+0x35a>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x318>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	08005213 	.word	0x08005213
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005213 	.word	0x08005213
 80051e0:	08005203 	.word	0x08005203
 80051e4:	08005213 	.word	0x08005213
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005213 	.word	0x08005213
 80051f0:	0800520b 	.word	0x0800520b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fd fba4 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051fa:	e010      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051fc:	4b9e      	ldr	r3, [pc, #632]	; (8005478 <UART_SetConfig+0x5c0>)
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005200:	e00d      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005202:	f7fd fb2f 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8005206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005208:	e009      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005210:	e005      	b.n	800521e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800521c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8130 	beq.w	8005486 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	4a94      	ldr	r2, [pc, #592]	; (800547c <UART_SetConfig+0x5c4>)
 800522c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005230:	461a      	mov	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	fbb3 f3f2 	udiv	r3, r3, r2
 8005238:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	429a      	cmp	r2, r3
 8005248:	d305      	bcc.n	8005256 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	429a      	cmp	r2, r3
 8005254:	d903      	bls.n	800525e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800525c:	e113      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	2200      	movs	r2, #0
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	60fa      	str	r2, [r7, #12]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	4a84      	ldr	r2, [pc, #528]	; (800547c <UART_SetConfig+0x5c4>)
 800526c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005270:	b29b      	uxth	r3, r3
 8005272:	2200      	movs	r2, #0
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800527c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005280:	f7fb fad8 	bl	8000834 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	020b      	lsls	r3, r1, #8
 8005296:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800529a:	0202      	lsls	r2, r0, #8
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	6849      	ldr	r1, [r1, #4]
 80052a0:	0849      	lsrs	r1, r1, #1
 80052a2:	2000      	movs	r0, #0
 80052a4:	460c      	mov	r4, r1
 80052a6:	4605      	mov	r5, r0
 80052a8:	eb12 0804 	adds.w	r8, r2, r4
 80052ac:	eb43 0905 	adc.w	r9, r3, r5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	469a      	mov	sl, r3
 80052b8:	4693      	mov	fp, r2
 80052ba:	4652      	mov	r2, sl
 80052bc:	465b      	mov	r3, fp
 80052be:	4640      	mov	r0, r8
 80052c0:	4649      	mov	r1, r9
 80052c2:	f7fb fab7 	bl	8000834 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4613      	mov	r3, r2
 80052cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d4:	d308      	bcc.n	80052e8 <UART_SetConfig+0x430>
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052dc:	d204      	bcs.n	80052e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	e0ce      	b.n	8005486 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052ee:	e0ca      	b.n	8005486 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f8:	d166      	bne.n	80053c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80052fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d827      	bhi.n	8005352 <UART_SetConfig+0x49a>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x450>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005335 	.word	0x08005335
 8005310:	0800533d 	.word	0x0800533d
 8005314:	08005353 	.word	0x08005353
 8005318:	08005343 	.word	0x08005343
 800531c:	08005353 	.word	0x08005353
 8005320:	08005353 	.word	0x08005353
 8005324:	08005353 	.word	0x08005353
 8005328:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fd fb08 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8005330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005332:	e014      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fd fb1a 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8005338:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800533a:	e010      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b4e      	ldr	r3, [pc, #312]	; (8005478 <UART_SetConfig+0x5c0>)
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005340:	e00d      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7fd fa8f 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005348:	e009      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005350:	e005      	b.n	800535e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800535c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8090 	beq.w	8005486 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	4a44      	ldr	r2, [pc, #272]	; (800547c <UART_SetConfig+0x5c4>)
 800536c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005370:	461a      	mov	r2, r3
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	fbb3 f3f2 	udiv	r3, r3, r2
 8005378:	005a      	lsls	r2, r3, #1
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	441a      	add	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d916      	bls.n	80053c0 <UART_SetConfig+0x508>
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d212      	bcs.n	80053c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	8bfb      	ldrh	r3, [r7, #30]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	8bfa      	ldrh	r2, [r7, #30]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e062      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053c6:	e05e      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d828      	bhi.n	8005422 <UART_SetConfig+0x56a>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x520>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	08005423 	.word	0x08005423
 80053e8:	08005413 	.word	0x08005413
 80053ec:	08005423 	.word	0x08005423
 80053f0:	08005423 	.word	0x08005423
 80053f4:	08005423 	.word	0x08005423
 80053f8:	0800541b 	.word	0x0800541b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fd faa0 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8005400:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005402:	e014      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7fd fab2 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8005408:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800540a:	e010      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <UART_SetConfig+0x5c0>)
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005410:	e00d      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005412:	f7fd fa27 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8005416:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005418:	e009      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005420:	e005      	b.n	800542e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800542c:	bf00      	nop
    }

    if (pclk != 0U)
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	2b00      	cmp	r3, #0
 8005432:	d028      	beq.n	8005486 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	4a10      	ldr	r2, [pc, #64]	; (800547c <UART_SetConfig+0x5c4>)
 800543a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543e:	461a      	mov	r2, r3
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	fbb3 f2f2 	udiv	r2, r3, r2
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	441a      	add	r2, r3
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d910      	bls.n	8005480 <UART_SetConfig+0x5c8>
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005464:	d20c      	bcs.n	8005480 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	b29a      	uxth	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e009      	b.n	8005486 <UART_SetConfig+0x5ce>
 8005472:	bf00      	nop
 8005474:	40008000 	.word	0x40008000
 8005478:	00f42400 	.word	0x00f42400
 800547c:	08005bd8 	.word	0x08005bd8
      }
      else
      {
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2201      	movs	r2, #1
 800548a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2201      	movs	r2, #1
 8005492:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2200      	movs	r2, #0
 80054a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80054a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3730      	adds	r7, #48	; 0x30
 80054aa:	46bd      	mov	sp, r7
 80054ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01a      	beq.n	80055c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ae:	d10a      	bne.n	80055c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
  }
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005604:	f7fc f92a 	bl	800185c <HAL_GetTick>
 8005608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b08      	cmp	r3, #8
 8005616:	d10e      	bne.n	8005636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f82f 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e025      	b.n	8005682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b04      	cmp	r3, #4
 8005642:	d10e      	bne.n	8005662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f819 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e00f      	b.n	8005682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b09c      	sub	sp, #112	; 0x70
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569a:	e0a9      	b.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	f000 80a5 	beq.w	80057f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a6:	f7fc f8d9 	bl	800185c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <UART_WaitOnFlagUntilTimeout+0x32>
 80056b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d140      	bne.n	800573e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056d0:	667b      	str	r3, [r7, #100]	; 0x64
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	663b      	str	r3, [r7, #96]	; 0x60
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800570e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e069      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d051      	beq.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800575a:	d149      	bne.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005764:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800577a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
 8005786:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800578a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e6      	bne.n	8005766 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	613b      	str	r3, [r7, #16]
   return(result);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057b8:	623a      	str	r2, [r7, #32]
 80057ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	69f9      	ldr	r1, [r7, #28]
 80057be:	6a3a      	ldr	r2, [r7, #32]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e5      	bne.n	8005798 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e010      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	429a      	cmp	r2, r3
 800580c:	f43f af46 	beq.w	800569c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3770      	adds	r7, #112	; 0x70
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_UARTEx_DisableFifoMode+0x16>
 800582c:	2302      	movs	r3, #2
 800582e:	e027      	b.n	8005880 <HAL_UARTEx_DisableFifoMode+0x66>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800585e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e02d      	b.n	8005900 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f84f 	bl	8005984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800591c:	2302      	movs	r3, #2
 800591e:	e02d      	b.n	800597c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f811 	bl	8005984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005990:	2b00      	cmp	r3, #0
 8005992:	d108      	bne.n	80059a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059a4:	e031      	b.n	8005a0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059a6:	2308      	movs	r3, #8
 80059a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059aa:	2308      	movs	r3, #8
 80059ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	0e5b      	lsrs	r3, r3, #25
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	0f5b      	lsrs	r3, r3, #29
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	7b3a      	ldrb	r2, [r7, #12]
 80059d2:	4911      	ldr	r1, [pc, #68]	; (8005a18 <UARTEx_SetNbDataToProcess+0x94>)
 80059d4:	5c8a      	ldrb	r2, [r1, r2]
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059da:	7b3a      	ldrb	r2, [r7, #12]
 80059dc:	490f      	ldr	r1, [pc, #60]	; (8005a1c <UARTEx_SetNbDataToProcess+0x98>)
 80059de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	7b7a      	ldrb	r2, [r7, #13]
 80059f0:	4909      	ldr	r1, [pc, #36]	; (8005a18 <UARTEx_SetNbDataToProcess+0x94>)
 80059f2:	5c8a      	ldrb	r2, [r1, r2]
 80059f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059f8:	7b7a      	ldrb	r2, [r7, #13]
 80059fa:	4908      	ldr	r1, [pc, #32]	; (8005a1c <UARTEx_SetNbDataToProcess+0x98>)
 80059fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	08005bf0 	.word	0x08005bf0
 8005a1c:	08005bf8 	.word	0x08005bf8

08005a20 <memset>:
 8005a20:	4402      	add	r2, r0
 8005a22:	4603      	mov	r3, r0
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d100      	bne.n	8005a2a <memset+0xa>
 8005a28:	4770      	bx	lr
 8005a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a2e:	e7f9      	b.n	8005a24 <memset+0x4>

08005a30 <__libc_init_array>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	4d0d      	ldr	r5, [pc, #52]	; (8005a68 <__libc_init_array+0x38>)
 8005a34:	4c0d      	ldr	r4, [pc, #52]	; (8005a6c <__libc_init_array+0x3c>)
 8005a36:	1b64      	subs	r4, r4, r5
 8005a38:	10a4      	asrs	r4, r4, #2
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	42a6      	cmp	r6, r4
 8005a3e:	d109      	bne.n	8005a54 <__libc_init_array+0x24>
 8005a40:	4d0b      	ldr	r5, [pc, #44]	; (8005a70 <__libc_init_array+0x40>)
 8005a42:	4c0c      	ldr	r4, [pc, #48]	; (8005a74 <__libc_init_array+0x44>)
 8005a44:	f000 f818 	bl	8005a78 <_init>
 8005a48:	1b64      	subs	r4, r4, r5
 8005a4a:	10a4      	asrs	r4, r4, #2
 8005a4c:	2600      	movs	r6, #0
 8005a4e:	42a6      	cmp	r6, r4
 8005a50:	d105      	bne.n	8005a5e <__libc_init_array+0x2e>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a58:	4798      	blx	r3
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	e7ee      	b.n	8005a3c <__libc_init_array+0xc>
 8005a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a62:	4798      	blx	r3
 8005a64:	3601      	adds	r6, #1
 8005a66:	e7f2      	b.n	8005a4e <__libc_init_array+0x1e>
 8005a68:	08005c08 	.word	0x08005c08
 8005a6c:	08005c08 	.word	0x08005c08
 8005a70:	08005c08 	.word	0x08005c08
 8005a74:	08005c0c 	.word	0x08005c0c

08005a78 <_init>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr

08005a84 <_fini>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	bf00      	nop
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr
