
NUCLEO-G474RET6-TMC2590_Dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005130  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005490  08005490  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005498  08005498  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080054a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  080054ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080054ac  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169fe  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea0  00000000  00000000  00036a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00039920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4c  00000000  00000000  0003ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b4e  00000000  00000000  0003b9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001641a  00000000  00000000  0006251a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdc42  00000000  00000000  00078934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d08  00000000  00000000  00176578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0017b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080052f0 	.word	0x080052f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080052f0 	.word	0x080052f0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b44      	ldr	r3, [pc, #272]	; (800063c <MX_GPIO_Init+0x128>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a43      	ldr	r2, [pc, #268]	; (800063c <MX_GPIO_Init+0x128>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b41      	ldr	r3, [pc, #260]	; (800063c <MX_GPIO_Init+0x128>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4b3e      	ldr	r3, [pc, #248]	; (800063c <MX_GPIO_Init+0x128>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a3d      	ldr	r2, [pc, #244]	; (800063c <MX_GPIO_Init+0x128>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b3b      	ldr	r3, [pc, #236]	; (800063c <MX_GPIO_Init+0x128>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b38      	ldr	r3, [pc, #224]	; (800063c <MX_GPIO_Init+0x128>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a37      	ldr	r2, [pc, #220]	; (800063c <MX_GPIO_Init+0x128>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b35      	ldr	r3, [pc, #212]	; (800063c <MX_GPIO_Init+0x128>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b32      	ldr	r3, [pc, #200]	; (800063c <MX_GPIO_Init+0x128>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a31      	ldr	r2, [pc, #196]	; (800063c <MX_GPIO_Init+0x128>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b2f      	ldr	r3, [pc, #188]	; (800063c <MX_GPIO_Init+0x128>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nCS_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f001 f822 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_ENN_GPIO_Port, DRV_ENN_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4828      	ldr	r0, [pc, #160]	; (8000640 <MX_GPIO_Init+0x12c>)
 800059e:	f001 f81d 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a8:	4826      	ldr	r0, [pc, #152]	; (8000644 <MX_GPIO_Init+0x130>)
 80005aa:	f001 f817 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	481e      	ldr	r0, [pc, #120]	; (8000640 <MX_GPIO_Init+0x12c>)
 80005c6:	f000 fe87 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|nCS_Pin;
 80005ca:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f000 fe77 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_ENN_Pin;
 80005ea:	2310      	movs	r3, #16
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_ENN_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <MX_GPIO_Init+0x12c>)
 8000602:	f000 fe69 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <MX_GPIO_Init+0x130>)
 8000620:	f000 fe5a 	bl	80012d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2028      	movs	r0, #40	; 0x28
 800062a:	f000 fe2d 	bl	8001288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800062e:	2028      	movs	r0, #40	; 0x28
 8000630:	f000 fe44 	bl	80012bc <HAL_NVIC_EnableIRQ>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800
 8000644:	48000400 	.word	0x48000400

08000648 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	uint8_t pData[SPI_BUFFER_SIZE] = {0};
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	2300      	movs	r3, #0
 8000654:	813b      	strh	r3, [r7, #8]
	int index_sin_loop = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065a:	f000 fd26 	bl	80010aa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800065e:	f000 f89f 	bl	80007a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000662:	f7ff ff57 	bl	8000514 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000666:	f000 fc55 	bl	8000f14 <MX_LPUART1_UART_Init>
	MX_TIM1_Init();
 800066a:	f000 fa6d 	bl	8000b48 <MX_TIM1_Init>
	MX_SPI3_Init();
 800066e:	f000 f8f9 	bl	8000864 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"*********************\r\n", 23, 100);
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	2217      	movs	r2, #23
 8000676:	4943      	ldr	r1, [pc, #268]	; (8000784 <main+0x13c>)
 8000678:	4843      	ldr	r0, [pc, #268]	; (8000788 <main+0x140>)
 800067a:	f003 ffc3 	bl	8004604 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"* TMC2590 Test Code *\r\n", 23, 100);
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	2217      	movs	r2, #23
 8000682:	4942      	ldr	r1, [pc, #264]	; (800078c <main+0x144>)
 8000684:	4840      	ldr	r0, [pc, #256]	; (8000788 <main+0x140>)
 8000686:	f003 ffbd 	bl	8004604 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"*********************\r\n", 23, 100);
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2217      	movs	r2, #23
 800068e:	493d      	ldr	r1, [pc, #244]	; (8000784 <main+0x13c>)
 8000690:	483d      	ldr	r0, [pc, #244]	; (8000788 <main+0x140>)
 8000692:	f003 ffb7 	bl	8004604 <HAL_UART_Transmit>

	tmc2590_Init(&htmc2590, &hspi3, nCS_GPIO_Port, nCS_Pin, DRV_ENN_GPIO_Port, DRV_ENN_Pin);
 8000696:	2310      	movs	r3, #16
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <main+0x148>)
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a6:	493b      	ldr	r1, [pc, #236]	; (8000794 <main+0x14c>)
 80006a8:	483b      	ldr	r0, [pc, #236]	; (8000798 <main+0x150>)
 80006aa:	f000 fb57 	bl	8000d5c <tmc2590_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(index_sin_loop < 256){
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2bff      	cmp	r3, #255	; 0xff
 80006b2:	dc0f      	bgt.n	80006d4 <main+0x8c>
			currentCoilA = sinTable[index_sin_loop];
 80006b4:	4a39      	ldr	r2, [pc, #228]	; (800079c <main+0x154>)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	74fb      	strb	r3, [r7, #19]
			currentCoilB = sinTable[256-index_sin_loop];
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80006c4:	4a35      	ldr	r2, [pc, #212]	; (800079c <main+0x154>)
 80006c6:	5cd3      	ldrb	r3, [r2, r3]
 80006c8:	74bb      	strb	r3, [r7, #18]
			polarityCoilA = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	747b      	strb	r3, [r7, #17]
			polarityCoilB = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	743b      	strb	r3, [r7, #16]
 80006d2:	e039      	b.n	8000748 <main+0x100>
		}
		else if(index_sin_loop < 512){
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006da:	da10      	bge.n	80006fe <main+0xb6>
			currentCoilA = sinTable[512-index_sin_loop];
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80006e2:	4a2e      	ldr	r2, [pc, #184]	; (800079c <main+0x154>)
 80006e4:	5cd3      	ldrb	r3, [r2, r3]
 80006e6:	74fb      	strb	r3, [r7, #19]
			currentCoilB = sinTable[index_sin_loop-256];
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006ee:	4a2b      	ldr	r2, [pc, #172]	; (800079c <main+0x154>)
 80006f0:	5cd3      	ldrb	r3, [r2, r3]
 80006f2:	74bb      	strb	r3, [r7, #18]
			polarityCoilA = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	747b      	strb	r3, [r7, #17]
			polarityCoilB = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	743b      	strb	r3, [r7, #16]
 80006fc:	e024      	b.n	8000748 <main+0x100>
		}
		else if(index_sin_loop < 768){
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000704:	da10      	bge.n	8000728 <main+0xe0>
			currentCoilA = sinTable[index_sin_loop-512];
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800070c:	4a23      	ldr	r2, [pc, #140]	; (800079c <main+0x154>)
 800070e:	5cd3      	ldrb	r3, [r2, r3]
 8000710:	74fb      	strb	r3, [r7, #19]
			currentCoilB = sinTable[768-index_sin_loop];
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	f5c3 7340 	rsb	r3, r3, #768	; 0x300
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <main+0x154>)
 800071a:	5cd3      	ldrb	r3, [r2, r3]
 800071c:	74bb      	strb	r3, [r7, #18]
			polarityCoilA = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	747b      	strb	r3, [r7, #17]
			polarityCoilB = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	743b      	strb	r3, [r7, #16]
 8000726:	e00f      	b.n	8000748 <main+0x100>
		}
		else{
			currentCoilA = sinTable[1024-index_sin_loop];
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <main+0x154>)
 8000730:	5cd3      	ldrb	r3, [r2, r3]
 8000732:	74fb      	strb	r3, [r7, #19]
			currentCoilB = sinTable[index_sin_loop-768];
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <main+0x154>)
 800073c:	5cd3      	ldrb	r3, [r2, r3]
 800073e:	74bb      	strb	r3, [r7, #18]
			polarityCoilA = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	747b      	strb	r3, [r7, #17]
			polarityCoilB = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	743b      	strb	r3, [r7, #16]
		}
		index_sin_loop = (index_sin_loop+1)%1024;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	425a      	negs	r2, r3
 800074e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000752:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000756:	bf58      	it	pl
 8000758:	4253      	negpl	r3, r2
 800075a:	617b      	str	r3, [r7, #20]
		drvCtrlCommand = (polarityCoilA << 17) | (currentCoilA << 9) | (polarityCoilB << 8) | (currentCoilB << 0);
 800075c:	7c7b      	ldrb	r3, [r7, #17]
 800075e:	045a      	lsls	r2, r3, #17
 8000760:	7cfb      	ldrb	r3, [r7, #19]
 8000762:	025b      	lsls	r3, r3, #9
 8000764:	431a      	orrs	r2, r3
 8000766:	7c3b      	ldrb	r3, [r7, #16]
 8000768:	021b      	lsls	r3, r3, #8
 800076a:	431a      	orrs	r2, r3
 800076c:	7cbb      	ldrb	r3, [r7, #18]
 800076e:	4313      	orrs	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
		tmc2590_SetTxBufferInt32(&htmc2590, drvCtrlCommand);
 8000772:	68f9      	ldr	r1, [r7, #12]
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <main+0x150>)
 8000776:	f000 fbb3 	bl	8000ee0 <tmc2590_SetTxBufferInt32>
		tmc2590_TransmitReceive(&htmc2590, TMC2590_CMD_SIZE);
 800077a:	2103      	movs	r1, #3
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <main+0x150>)
 800077e:	f000 fb7f 	bl	8000e80 <tmc2590_TransmitReceive>
		if(index_sin_loop < 256){
 8000782:	e794      	b.n	80006ae <main+0x66>
 8000784:	08005308 	.word	0x08005308
 8000788:	20000158 	.word	0x20000158
 800078c:	08005320 	.word	0x08005320
 8000790:	48000800 	.word	0x48000800
 8000794:	20000028 	.word	0x20000028
 8000798:	20000124 	.word	0x20000124
 800079c:	08005368 	.word	0x08005368

080007a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2238      	movs	r2, #56	; 0x38
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fd72 	bl	8005298 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 ff46 	bl	8001654 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d0:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	2303      	movs	r3, #3
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007da:	2306      	movs	r3, #6
 80007dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80007de:	2355      	movs	r3, #85	; 0x55
 80007e0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 ffe2 	bl	80017bc <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x62>
	{
		Error_Handler();
 80007fe:	f000 f82b 	bl	8000858 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fae6 	bl	8001dec <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000826:	f000 f817 	bl	8000858 <Error_Handler>
	}
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000846:	f000 fc49 	bl	80010dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40001000 	.word	0x40001000

08000858 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_SPI3_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_SPI3_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_SPI3_Init+0x74>)
 8000870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_SPI3_Init+0x74>)
 800087e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000882:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_SPI3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI3_Init+0x74>)
 8000892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000896:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_SPI3_Init+0x74>)
 800089a:	2238      	movs	r2, #56	; 0x38
 800089c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008b2:	2207      	movs	r2, #7
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008be:	2208      	movs	r2, #8
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_SPI3_Init+0x74>)
 80008c4:	f001 ff2e 	bl	8002724 <HAL_SPI_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f7ff ffc3 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000028 	.word	0x20000028
 80008dc:	40003c00 	.word	0x40003c00

080008e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1f      	ldr	r2, [pc, #124]	; (800097c <HAL_SPI_MspInit+0x9c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d137      	bne.n	8000972 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_SPI_MspInit+0xa0>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <HAL_SPI_MspInit+0xa0>)
 8000908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_SPI_MspInit+0xa0>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_SPI_MspInit+0xa0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <HAL_SPI_MspInit+0xa0>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_SPI_MspInit+0xa0>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000932:	2318      	movs	r3, #24
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000942:	2306      	movs	r3, #6
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <HAL_SPI_MspInit+0xa4>)
 800094e:	f000 fcc3 	bl	80012d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000952:	2320      	movs	r3, #32
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000962:	2306      	movs	r3, #6
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_SPI_MspInit+0xa4>)
 800096e:	f000 fcb3 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40003c00 	.word	0x40003c00
 8000980:	40021000 	.word	0x40021000
 8000984:	48000400 	.word	0x48000400

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6593      	str	r3, [r2, #88]	; 0x58
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009be:	f000 feed 	bl	800179c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <HAL_InitTick+0xc4>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <HAL_InitTick+0xc4>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6593      	str	r3, [r2, #88]	; 0x58
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <HAL_InitTick+0xc4>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 020c 	add.w	r2, r7, #12
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fbc8 	bl	8002198 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a08:	f001 fb9a 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8000a0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a10:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <HAL_InitTick+0xc8>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_InitTick+0xcc>)
 8000a1e:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <HAL_InitTick+0xd0>)
 8000a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <HAL_InitTick+0xcc>)
 8000a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <HAL_InitTick+0xcc>)
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <HAL_InitTick+0xcc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_InitTick+0xcc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000a3c:	4817      	ldr	r0, [pc, #92]	; (8000a9c <HAL_InitTick+0xcc>)
 8000a3e:	f002 fa93 	bl	8002f68 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d11b      	bne.n	8000a88 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <HAL_InitTick+0xcc>)
 8000a52:	f002 fae1 	bl	8003018 <HAL_TIM_Base_Start_IT>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d111      	bne.n	8000a88 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a64:	2036      	movs	r0, #54	; 0x36
 8000a66:	f000 fc29 	bl	80012bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d808      	bhi.n	8000a82 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2036      	movs	r0, #54	; 0x36
 8000a76:	f000 fc07 	bl	8001288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_InitTick+0xd4>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	e002      	b.n	8000a88 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	431bde83 	.word	0x431bde83
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b02:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b06:	f000 fd81 	bl	800160c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <TIM6_DAC_IRQHandler+0x10>)
 8000b16:	f002 fb58 	bl	80031ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000008c 	.word	0x2000008c

08000b24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b09c      	sub	sp, #112	; 0x70
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	615a      	str	r2, [r3, #20]
 8000b7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2234      	movs	r2, #52	; 0x34
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f004 fb88 	bl	8005298 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000b8a:	4a47      	ldr	r2, [pc, #284]	; (8000ca8 <MX_TIM1_Init+0x160>)
 8000b8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000;
 8000b8e:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000b90:	f244 2268 	movw	r2, #17000	; 0x4268
 8000b94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000b9c:	4b41      	ldr	r3, [pc, #260]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000baa:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb6:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000bb8:	f002 f9d6 	bl	8002f68 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000bc2:	f7ff fe49 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4834      	ldr	r0, [pc, #208]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000bd4:	f002 fd8c 	bl	80036f0 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000bde:	f7ff fe3b 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000be2:	4830      	ldr	r0, [pc, #192]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000be4:	f002 fa90 	bl	8003108 <HAL_TIM_PWM_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000bee:	f7ff fe33 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c02:	4619      	mov	r1, r3
 8000c04:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000c06:	f003 fb1f 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000c10:	f7ff fe22 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c14:	2360      	movs	r3, #96	; 0x60
 8000c16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 8000c18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c22:	2300      	movs	r3, #0
 8000c24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c36:	2200      	movs	r2, #0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481a      	ldr	r0, [pc, #104]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000c3c:	f002 fc44 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000c46:	f7ff fe07 	bl	8000858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000c88:	f003 fb74 	bl	8004374 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000c92:	f7ff fde1 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM1_Init+0x15c>)
 8000c98:	f000 f828 	bl	8000cec <HAL_TIM_MspPostInit>

}
 8000c9c:	bf00      	nop
 8000c9e:	3770      	adds	r7, #112	; 0x70
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000d8 	.word	0x200000d8
 8000ca8:	40012c00 	.word	0x40012c00

08000cac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_TIM_Base_MspInit+0x38>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10b      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40012c00 	.word	0x40012c00
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_TIM_MspPostInit+0x68>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d11d      	bne.n	8000d4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_STEP_Pin;
 8000d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_STEP_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f000 fac7 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40021000 	.word	0x40021000

08000d5c <tmc2590_Init>:
		176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,201,202,203,204,205,206,
		207,207,208,209,210,211,212,212,213,214,215,215,216,217,218,218,219,220,220,221,222,223,223,224,225,225,226,226,227,228,228,229,
		229,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,238,239,239,240,240,240,241,241,241,242,242,242,243,243,
		243,244,244,244,244,245,245,245,245,246,246,246,246,246,247,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,248};

void tmc2590_Init(TMC2590_HandleTypeDef *phtmc2590, SPI_HandleTypeDef *hspi, GPIO_TypeDef *gpioPortNCS, uint16_t gpioPinNCS, GPIO_TypeDef *gpioPortDrvEnN, uint16_t gpioPinDrvEnN){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	807b      	strh	r3, [r7, #2]
	uint8_t pData[3];
	phtmc2590->hspi = hspi;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	601a      	str	r2, [r3, #0]
	phtmc2590->gpioPinNCS = gpioPinNCS;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	809a      	strh	r2, [r3, #4]
	phtmc2590->gpioPortNCS = gpioPortNCS;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
	phtmc2590->gpioPinDrvEnN = gpioPinDrvEnN;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d80:	819a      	strh	r2, [r3, #12]
	phtmc2590->gpioPortDrvEnN = gpioPortDrvEnN;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6a3a      	ldr	r2, [r7, #32]
 8000d86:	611a      	str	r2, [r3, #16]

	tmc2590_SetPowerEnable(phtmc2590, SET);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f000 f862 	bl	8000e54 <tmc2590_SetPowerEnable>
	tmc2590_SetnCS(phtmc2590, SET);
 8000d90:	2101      	movs	r1, #1
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f000 f84c 	bl	8000e30 <tmc2590_SetnCS>

	phtmc2590->drvCtrlRegister 			= 0x00000; // No Current
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
	phtmc2590->chopConfRegister			= 0b10011000000000001111; // 100 10
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <tmc2590_Init+0xc8>)
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
	phtmc2590->smartEnRegister 			= 0b10100000000000000000; // 101 0
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
	phtmc2590->stallGuardCtrlRegister 	= 0b11000000000000011111;//0xD001F; // 110 1---- 11111
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <tmc2590_Init+0xcc>)
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
	phtmc2590->drvConfRegister 			= 0x11100000011110110000;//0xE0480; // 1110 0000 0100 1000 0000
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <tmc2590_Init+0xd0>)
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30

	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->drvCtrlRegister);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f000 f88e 	bl	8000ee0 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 f85a 	bl	8000e80 <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->chopConfRegister);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f000 f884 	bl	8000ee0 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8000dd8:	2103      	movs	r1, #3
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f000 f850 	bl	8000e80 <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->smartEnRegister);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	4619      	mov	r1, r3
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 f87a 	bl	8000ee0 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8000dec:	2103      	movs	r1, #3
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 f846 	bl	8000e80 <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->stallGuardCtrlRegister);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f000 f870 	bl	8000ee0 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8000e00:	2103      	movs	r1, #3
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f000 f83c 	bl	8000e80 <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->drvConfRegister);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f000 f866 	bl	8000ee0 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8000e14:	2103      	movs	r1, #3
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f000 f832 	bl	8000e80 <tmc2590_TransmitReceive>
	}
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	0009800f 	.word	0x0009800f
 8000e28:	000c001f 	.word	0x000c001f
 8000e2c:	10110000 	.word	0x10110000

08000e30 <tmc2590_SetnCS>:

void tmc2590_SetnCS(TMC2590_HandleTypeDef *phtmc2590, FlagStatus status){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(phtmc2590->gpioPortNCS, phtmc2590->gpioPinNCS, status);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6898      	ldr	r0, [r3, #8]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	889b      	ldrh	r3, [r3, #4]
 8000e44:	78fa      	ldrb	r2, [r7, #3]
 8000e46:	4619      	mov	r1, r3
 8000e48:	f000 fbc8 	bl	80015dc <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <tmc2590_SetPowerEnable>:

void tmc2590_SetPowerEnable(TMC2590_HandleTypeDef *phtmc2590, FlagStatus status){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(phtmc2590->gpioPortDrvEnN, phtmc2590->gpioPinDrvEnN, 1-status);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6918      	ldr	r0, [r3, #16]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	8999      	ldrh	r1, [r3, #12]
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	f1c3 0301 	rsb	r3, r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	f000 fbb3 	bl	80015dc <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <tmc2590_TransmitReceive>:


HAL_StatusTypeDef tmc2590_TransmitReceive(TMC2590_HandleTypeDef *phtmc2590, int size){
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	tmc2590_SetnCS(phtmc2590, RESET);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ffcf 	bl	8000e30 <tmc2590_SetnCS>
	status = HAL_SPI_TransmitReceive(phtmc2590->hspi, phtmc2590->spiTxBuffer, phtmc2590->spiRxBuffer, size, HAL_MAX_DELAY);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f103 0114 	add.w	r1, r3, #20
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f103 021a 	add.w	r2, r3, #26
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000eaa:	9400      	str	r4, [sp, #0]
 8000eac:	f001 fce5 	bl	800287a <HAL_SPI_TransmitReceive>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
	tmc2590_SetnCS(phtmc2590, SET);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffba 	bl	8000e30 <tmc2590_SetnCS>

	if(status == HAL_OK){
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <tmc2590_TransmitReceive+0x4e>
		HAL_UART_Transmit(&hlpuart1, (uint8_t *)transmit_ok, sizeof(transmit_ok), 100);
 8000ec2:	2364      	movs	r3, #100	; 0x64
 8000ec4:	2218      	movs	r2, #24
 8000ec6:	4904      	ldr	r1, [pc, #16]	; (8000ed8 <tmc2590_TransmitReceive+0x58>)
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <tmc2590_TransmitReceive+0x5c>)
 8000eca:	f003 fb9b 	bl	8004604 <HAL_UART_Transmit>
	}
	else{

	}

	return status;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}
 8000ed8:	08005350 	.word	0x08005350
 8000edc:	20000158 	.word	0x20000158

08000ee0 <tmc2590_SetTxBufferInt32>:

void tmc2590_SetTxBuffer(TMC2590_HandleTypeDef *phtmc2590, uint8_t *pData, int size){
	memcpy(phtmc2590->spiTxBuffer, pData, size);
}

void tmc2590_SetTxBufferInt32(TMC2590_HandleTypeDef *phtmc2590, uint32_t data){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	phtmc2590->spiTxBuffer[0] = (data >> 16) & 0xFF;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	751a      	strb	r2, [r3, #20]
	phtmc2590->spiTxBuffer[1] = (data >> 8) & 0xFF;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	755a      	strb	r2, [r3, #21]
	phtmc2590->spiTxBuffer[2] = (data >> 0) & 0xFF;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	759a      	strb	r2, [r3, #22]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <MX_LPUART1_UART_Init+0x90>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f58:	f003 fb04 	bl	8004564 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f62:	f7ff fc79 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f6a:	f004 f8cb 	bl	8005104 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f74:	f7ff fc70 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f7c:	f004 f900 	bl	8005180 <HAL_UARTEx_SetRxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f86:	f7ff fc67 	bl	8000858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f8c:	f004 f881 	bl	8005092 <HAL_UARTEx_DisableFifoMode>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f96:	f7ff fc5f 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000158 	.word	0x20000158
 8000fa4:	40008000 	.word	0x40008000

08000fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b09e      	sub	sp, #120	; 0x78
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2254      	movs	r2, #84	; 0x54
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f965 	bl	8005298 <memset>
  if(uartHandle->Instance==LPUART1)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <HAL_UART_MspInit+0xa8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d136      	bne.n	8001046 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f94f 	bl	8002288 <HAL_RCCEx_PeriphCLKConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ff0:	f7ff fc32 	bl	8000858 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_UART_MspInit+0xac>)
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_UART_MspInit+0xac>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_UART_MspInit+0xac>)
 8001002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0xac>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_UART_MspInit+0xac>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_UART_MspInit+0xac>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001024:	230c      	movs	r3, #12
 8001026:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001034:	230c      	movs	r3, #12
 8001036:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f000 f949 	bl	80012d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	3778      	adds	r7, #120	; 0x78
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40008000 	.word	0x40008000
 8001054:	40021000 	.word	0x40021000

08001058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800105a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopForever+0x6>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopForever+0xe>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopForever+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001082:	f7ff fd4f 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f004 f90f 	bl	80052a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800108a:	f7ff fadd 	bl	8000648 <main>

0800108e <LoopForever>:

LoopForever:
    b LoopForever
 800108e:	e7fe      	b.n	800108e <LoopForever>
  ldr   r0, =_estack
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800109c:	080054a0 	.word	0x080054a0
  ldr r2, =_sbss
 80010a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a4:	200001ec 	.word	0x200001ec

080010a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_2_IRQHandler>

080010aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 f8dc 	bl	8001272 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ba:	200f      	movs	r0, #15
 80010bc:	f7ff fc88 	bl	80009d0 <HAL_InitTick>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	e001      	b.n	80010d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010cc:	f7ff fc5c 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d0:	79fb      	ldrb	r3, [r7, #7]

}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x1c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x20>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <HAL_IncTick+0x1c>)
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	200001e8 	.word	0x200001e8
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	200001e8 	.word	0x200001e8

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff4c 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001296:	f7ff ff63 	bl	8001160 <__NVIC_GetPriorityGrouping>
 800129a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	6978      	ldr	r0, [r7, #20]
 80012a2:	f7ff ffb3 	bl	800120c <NVIC_EncodePriority>
 80012a6:	4602      	mov	r2, r0
 80012a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff82 	bl	80011b8 <__NVIC_SetPriority>
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff56 	bl	800117c <__NVIC_EnableIRQ>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012e6:	e15a      	b.n	800159e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 814c 	beq.w	8001598 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b01      	cmp	r3, #1
 800130a:	d005      	beq.n	8001318 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001314:	2b02      	cmp	r3, #2
 8001316:	d130      	bne.n	800137a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134e:	2201      	movs	r2, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	f003 0201 	and.w	r2, r3, #1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	2b03      	cmp	r3, #3
 8001384:	d017      	beq.n	80013b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d123      	bne.n	800140a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	6939      	ldr	r1, [r7, #16]
 8001406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0203 	and.w	r2, r3, #3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a6 	beq.w	8001598 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144c:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <HAL_GPIO_Init+0x2e4>)
 800144e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001450:	4a5a      	ldr	r2, [pc, #360]	; (80015bc <HAL_GPIO_Init+0x2e4>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6613      	str	r3, [r2, #96]	; 0x60
 8001458:	4b58      	ldr	r3, [pc, #352]	; (80015bc <HAL_GPIO_Init+0x2e4>)
 800145a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001464:	4a56      	ldr	r2, [pc, #344]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800148e:	d01f      	beq.n	80014d0 <HAL_GPIO_Init+0x1f8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a4c      	ldr	r2, [pc, #304]	; (80015c4 <HAL_GPIO_Init+0x2ec>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d019      	beq.n	80014cc <HAL_GPIO_Init+0x1f4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a4b      	ldr	r2, [pc, #300]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d013      	beq.n	80014c8 <HAL_GPIO_Init+0x1f0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a4a      	ldr	r2, [pc, #296]	; (80015cc <HAL_GPIO_Init+0x2f4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d00d      	beq.n	80014c4 <HAL_GPIO_Init+0x1ec>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a49      	ldr	r2, [pc, #292]	; (80015d0 <HAL_GPIO_Init+0x2f8>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d007      	beq.n	80014c0 <HAL_GPIO_Init+0x1e8>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2fc>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d101      	bne.n	80014bc <HAL_GPIO_Init+0x1e4>
 80014b8:	2305      	movs	r3, #5
 80014ba:	e00a      	b.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014bc:	2306      	movs	r3, #6
 80014be:	e008      	b.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e006      	b.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014c4:	2303      	movs	r3, #3
 80014c6:	e004      	b.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e002      	b.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_GPIO_Init+0x1fa>
 80014d0:	2300      	movs	r3, #0
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	f002 0203 	and.w	r2, r2, #3
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	4093      	lsls	r3, r2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e2:	4937      	ldr	r1, [pc, #220]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f0:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_GPIO_Init+0x300>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001514:	4a30      	ldr	r2, [pc, #192]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <HAL_GPIO_Init+0x300>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800153e:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_GPIO_Init+0x300>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001592:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_GPIO_Init+0x300>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f ae9d 	bne.w	80012e8 <HAL_GPIO_Init+0x10>
  }
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010000 	.word	0x40010000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	48000800 	.word	0x48000800
 80015cc:	48000c00 	.word	0x48000c00
 80015d0:	48001000 	.word	0x48001000
 80015d4:	48001400 	.word	0x48001400
 80015d8:	40010400 	.word	0x40010400

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f806 	bl	800163c <HAL_GPIO_EXTI_Callback>
  }
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d141      	bne.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001662:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166e:	d131      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001670:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001676:	4a46      	ldr	r2, [pc, #280]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001688:	4a41      	ldr	r2, [pc, #260]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2232      	movs	r2, #50	; 0x32
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	4a3f      	ldr	r2, [pc, #252]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	0c9b      	lsrs	r3, r3, #18
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a6:	e002      	b.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ba:	d102      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f2      	bne.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ce:	d158      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e057      	b.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016da:	4a2d      	ldr	r2, [pc, #180]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e4:	e04d      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ec:	d141      	bne.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d131      	bne.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001714:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2232      	movs	r2, #50	; 0x32
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	0c9b      	lsrs	r3, r3, #18
 800172e:	3301      	adds	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001732:	e002      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3b01      	subs	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001746:	d102      	bne.n	800174e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f2      	bne.n	8001734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175a:	d112      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e011      	b.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001770:	e007      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001780:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	40007000 	.word	0x40007000
 8001794:	20000000 	.word	0x20000000
 8001798:	431bde83 	.word	0x431bde83

0800179c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017aa:	6093      	str	r3, [r2, #8]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40007000 	.word	0x40007000

080017bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e306      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d075      	beq.n	80018c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4b97      	ldr	r3, [pc, #604]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	4b94      	ldr	r3, [pc, #592]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0x3e>
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_OscConfig+0x44>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d10b      	bne.n	8001818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	4b8d      	ldr	r3, [pc, #564]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d05b      	beq.n	80018c4 <HAL_RCC_OscConfig+0x108>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d157      	bne.n	80018c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e2e1      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x74>
 8001822:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a84      	ldr	r2, [pc, #528]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0xb0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x98>
 800183a:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7e      	ldr	r2, [pc, #504]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a7b      	ldr	r2, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xb0>
 8001854:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a77      	ldr	r2, [pc, #476]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b75      	ldr	r3, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a74      	ldr	r2, [pc, #464]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fc44 	bl	8001100 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fc40 	bl	8001100 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e2a6      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0xc0>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fc30 	bl	8001100 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fc2c 	bl	8001100 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e292      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b6:	4b60      	ldr	r3, [pc, #384]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0xe8>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d075      	beq.n	80019be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d2:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b0c      	cmp	r3, #12
 80018ea:	d102      	bne.n	80018f2 <HAL_RCC_OscConfig+0x136>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_OscConfig+0x13c>
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d11f      	bne.n	8001938 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x154>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e265      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	4946      	ldr	r1, [pc, #280]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001924:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <HAL_RCC_OscConfig+0x280>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff f851 	bl	80009d0 <HAL_InitTick>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d043      	beq.n	80019bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e251      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d023      	beq.n	8001988 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a3c      	ldr	r2, [pc, #240]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff fbd8 	bl	8001100 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff fbd4 	bl	8001100 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e23a      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001966:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	061b      	lsls	r3, r3, #24
 8001980:	492d      	ldr	r1, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
 8001986:	e01a      	b.n	80019be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 800198e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fbb4 	bl	8001100 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fbb0 	bl	8001100 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e216      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x1e0>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d041      	beq.n	8001a4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d8:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb8d 	bl	8001100 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fb89 	bl	8001100 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1ef      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0ef      	beq.n	80019ea <HAL_RCC_OscConfig+0x22e>
 8001a0a:	e020      	b.n	8001a4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_RCC_OscConfig+0x27c>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fb70 	bl	8001100 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a22:	e00d      	b.n	8001a40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb6c 	bl	8001100 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d906      	bls.n	8001a40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1d2      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a40:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ea      	bne.n	8001a24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80a6 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a60:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2b4>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x2b6>
 8001a70:	2300      	movs	r3, #0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b7f      	ldr	r3, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	4a7e      	ldr	r2, [pc, #504]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6593      	str	r3, [r2, #88]	; 0x58
 8001a82:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a92:	4b79      	ldr	r3, [pc, #484]	; (8001c78 <HAL_RCC_OscConfig+0x4bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d118      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9e:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <HAL_RCC_OscConfig+0x4bc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x4bc>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fb29 	bl	8001100 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab2:	f7ff fb25 	bl	8001100 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e18b      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac4:	4b6c      	ldr	r3, [pc, #432]	; (8001c78 <HAL_RCC_OscConfig+0x4bc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d108      	bne.n	8001aea <HAL_RCC_OscConfig+0x32e>
 8001ad8:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	4a65      	ldr	r2, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae8:	e024      	b.n	8001b34 <HAL_RCC_OscConfig+0x378>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d110      	bne.n	8001b14 <HAL_RCC_OscConfig+0x358>
 8001af2:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af8:	4a5e      	ldr	r2, [pc, #376]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b08:	4a5a      	ldr	r2, [pc, #360]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b12:	e00f      	b.n	8001b34 <HAL_RCC_OscConfig+0x378>
 8001b14:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	4a56      	ldr	r2, [pc, #344]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b24:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d016      	beq.n	8001b6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fae0 	bl	8001100 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff fadc 	bl	8001100 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e140      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5a:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ed      	beq.n	8001b44 <HAL_RCC_OscConfig+0x388>
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fac9 	bl	8001100 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fac5 	bl	8001100 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e129      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ed      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	4a34      	ldr	r2, [pc, #208]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d03c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc2:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fa98 	bl	8001100 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd4:	f7ff fa94 	bl	8001100 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0fa      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ef      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x418>
 8001bf4:	e01b      	b.n	8001c2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c06:	f7ff fa7b 	bl	8001100 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0e:	f7ff fa77 	bl	8001100 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0dd      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ef      	bne.n	8001c0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80d1 	beq.w	8001dda <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	f000 808b 	beq.w	8001d5c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d15e      	bne.n	8001d0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_RCC_OscConfig+0x4b8>)
 8001c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fa51 	bl	8001100 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c60:	e00c      	b.n	8001c7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fa4d 	bl	8001100 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d905      	bls.n	8001c7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0b3      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ec      	bne.n	8001c62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c88:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <HAL_RCC_OscConfig+0x62c>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6a11      	ldr	r1, [r2, #32]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ca2:	0212      	lsls	r2, r2, #8
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001caa:	0852      	lsrs	r2, r2, #1
 8001cac:	3a01      	subs	r2, #1
 8001cae:	0552      	lsls	r2, r2, #21
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cb6:	0852      	lsrs	r2, r2, #1
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	0652      	lsls	r2, r2, #25
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cc2:	06d2      	lsls	r2, r2, #27
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	4947      	ldr	r1, [pc, #284]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a44      	ldr	r2, [pc, #272]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fa0c 	bl	8001100 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff fa08 	bl	8001100 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e06e      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x530>
 8001d0a:	e066      	b.n	8001dda <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d16:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a31      	ldr	r2, [pc, #196]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a2e      	ldr	r2, [pc, #184]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f9e4 	bl	8001100 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f9e0 	bl	8001100 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e046      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x580>
 8001d5a:	e03e      	b.n	8001dda <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e039      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d12c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	3b01      	subs	r3, #1
 8001d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d123      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d113      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	019f800c 	.word	0x019f800c

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e11e      	b.n	8002042 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b91      	ldr	r3, [pc, #580]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b8e      	ldr	r3, [pc, #568]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020f 	bic.w	r2, r3, #15
 8001e1a:	498c      	ldr	r1, [pc, #560]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b8a      	ldr	r3, [pc, #552]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e106      	b.n	8002042 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d073      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d129      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e48:	4b81      	ldr	r3, [pc, #516]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0f4      	b.n	8002042 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e58:	f000 f9d0 	bl	80021fc <RCC_GetSysClockFreqFromPLLSource>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4a7c      	ldr	r2, [pc, #496]	; (8002054 <HAL_RCC_ClockConfig+0x268>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d93f      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e66:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d033      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d12f      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e86:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8e:	4a70      	ldr	r2, [pc, #448]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e024      	b.n	8001ee6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0c6      	b.n	8002042 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	4b66      	ldr	r3, [pc, #408]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0be      	b.n	8002042 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ec4:	f000 f8ce 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4a61      	ldr	r2, [pc, #388]	; (8002054 <HAL_RCC_ClockConfig+0x268>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d909      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eda:	4a5d      	ldr	r2, [pc, #372]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4957      	ldr	r1, [pc, #348]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef8:	f7ff f902 	bl	8001100 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7ff f8fe 	bl	8001100 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e095      	b.n	8002042 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d023      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a42      	ldr	r2, [pc, #264]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f58:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f60:	4a3b      	ldr	r2, [pc, #236]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b39      	ldr	r3, [pc, #228]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4936      	ldr	r1, [pc, #216]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d105      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f82:	4b33      	ldr	r3, [pc, #204]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d21d      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 020f 	bic.w	r2, r3, #15
 8001fa4:	4929      	ldr	r1, [pc, #164]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fac:	f7ff f8a8 	bl	8001100 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7ff f8a4 	bl	8001100 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e03b      	b.n	8002042 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1ed      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4917      	ldr	r1, [pc, #92]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490f      	ldr	r1, [pc, #60]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002016:	f000 f825 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_RCC_ClockConfig+0x264>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490c      	ldr	r1, [pc, #48]	; (8002058 <HAL_RCC_ClockConfig+0x26c>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x270>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fcc8 	bl	80009d0 <HAL_InitTick>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	04c4b400 	.word	0x04c4b400
 8002058:	08005338 	.word	0x08005338
 800205c:	20000000 	.word	0x20000000
 8002060:	20000004 	.word	0x20000004

08002064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800206a:	4b2c      	ldr	r3, [pc, #176]	; (800211c <HAL_RCC_GetSysClockFreq+0xb8>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d102      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	e047      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_GetSysClockFreq+0xb8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d102      	bne.n	800208e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc0>)
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	e03e      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d136      	bne.n	8002108 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_RCC_GetSysClockFreq+0xb8>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3301      	adds	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b8:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c2:	68d2      	ldr	r2, [r2, #12]
 80020c4:	0a12      	lsrs	r2, r2, #8
 80020c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
      break;
 80020d0:	e00c      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d2:	4a13      	ldr	r2, [pc, #76]	; (8002120 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	0a12      	lsrs	r2, r2, #8
 80020e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
      break;
 80020ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0e5b      	lsrs	r3, r3, #25
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	e001      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800210c:	693b      	ldr	r3, [r7, #16]
}
 800210e:	4618      	mov	r0, r3
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	00f42400 	.word	0x00f42400
 8002124:	016e3600 	.word	0x016e3600

08002128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002144:	f7ff fff0 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4904      	ldr	r1, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	08005348 	.word	0x08005348

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002170:	f7ff ffda 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0adb      	lsrs	r3, r3, #11
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4904      	ldr	r1, [pc, #16]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	08005348 	.word	0x08005348

08002198 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	220f      	movs	r2, #15
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_RCC_GetClockConfig+0x60>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 020f 	and.w	r2, r3, #15
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40022000 	.word	0x40022000

080021fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d10c      	bne.n	800223a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002220:	4a17      	ldr	r2, [pc, #92]	; (8002280 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800222a:	68d2      	ldr	r2, [r2, #12]
 800222c:	0a12      	lsrs	r2, r2, #8
 800222e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
    break;
 8002238:	e00c      	b.n	8002254 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4a0e      	ldr	r2, [pc, #56]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	0a12      	lsrs	r2, r2, #8
 8002248:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    break;
 8002252:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0e5b      	lsrs	r3, r3, #25
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	3301      	adds	r3, #1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800226e:	687b      	ldr	r3, [r7, #4]
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	016e3600 	.word	0x016e3600
 8002284:	00f42400 	.word	0x00f42400

08002288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002290:	2300      	movs	r3, #0
 8002292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002294:	2300      	movs	r3, #0
 8002296:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8098 	beq.w	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	4a3f      	ldr	r2, [pc, #252]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6593      	str	r3, [r2, #88]	; 0x58
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ce:	2301      	movs	r3, #1
 80022d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d2:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a39      	ldr	r2, [pc, #228]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022de:	f7fe ff0f 	bl	8001100 <HAL_GetTick>
 80022e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e4:	e009      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe ff0b 	bl	8001100 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d902      	bls.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	74fb      	strb	r3, [r7, #19]
        break;
 80022f8:	e005      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022fa:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ef      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d159      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01e      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	d019      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002332:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fe fecb 	bl	8001100 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236c:	e00b      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fec7 	bl	8001100 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d902      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	74fb      	strb	r3, [r7, #19]
            break;
 8002384:	e006      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ec      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10b      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023b0:	e008      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	74bb      	strb	r3, [r7, #18]
 80023b6:	e005      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c4:	7c7b      	ldrb	r3, [r7, #17]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4ba7      	ldr	r3, [pc, #668]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	4aa6      	ldr	r2, [pc, #664]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e2:	4ba1      	ldr	r3, [pc, #644]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f023 0203 	bic.w	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	499d      	ldr	r1, [pc, #628]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002404:	4b98      	ldr	r3, [pc, #608]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f023 020c 	bic.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4995      	ldr	r1, [pc, #596]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002426:	4b90      	ldr	r3, [pc, #576]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	498c      	ldr	r1, [pc, #560]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002448:	4b87      	ldr	r3, [pc, #540]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	4984      	ldr	r1, [pc, #528]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800246a:	4b7f      	ldr	r3, [pc, #508]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	497b      	ldr	r1, [pc, #492]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800248c:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	4973      	ldr	r1, [pc, #460]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ae:	4b6e      	ldr	r3, [pc, #440]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	496a      	ldr	r1, [pc, #424]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d0:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4962      	ldr	r1, [pc, #392]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	4959      	ldr	r1, [pc, #356]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002514:	4b54      	ldr	r3, [pc, #336]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	4951      	ldr	r1, [pc, #324]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002536:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	4948      	ldr	r1, [pc, #288]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d015      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4940      	ldr	r1, [pc, #256]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002576:	d105      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002582:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	2b00      	cmp	r3, #0
 800258e:	d015      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	4932      	ldr	r1, [pc, #200]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ae:	d105      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a2c      	ldr	r2, [pc, #176]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d015      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	4924      	ldr	r1, [pc, #144]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e6:	d105      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	4916      	ldr	r1, [pc, #88]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261e:	d105      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a10      	ldr	r2, [pc, #64]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d019      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4908      	ldr	r1, [pc, #32]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002656:	d109      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a02      	ldr	r2, [pc, #8]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002662:	60d3      	str	r3, [r2, #12]
 8002664:	e002      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d015      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002678:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4926      	ldr	r1, [pc, #152]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002696:	d105      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	4918      	ldr	r1, [pc, #96]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ce:	d105      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	490a      	ldr	r1, [pc, #40]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002706:	d105      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800270e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002712:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002714:	7cbb      	ldrb	r3, [r7, #18]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e09d      	b.n	8002872 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002746:	d009      	beq.n	800275c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
 800274e:	e005      	b.n	800275c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe f8b2 	bl	80008e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002792:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800279c:	d902      	bls.n	80027a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e002      	b.n	80027aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027b2:	d007      	beq.n	80027c4 <HAL_SPI_Init+0xa0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027bc:	d002      	beq.n	80027c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	ea42 0103 	orr.w	r1, r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	f003 0204 	and.w	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002840:	ea42 0103 	orr.w	r1, r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002860:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b08a      	sub	sp, #40	; 0x28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002888:	2301      	movs	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x26>
 800289c:	2302      	movs	r3, #2
 800289e:	e1fb      	b.n	8002c98 <HAL_SPI_TransmitReceive+0x41e>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a8:	f7fe fc2a 	bl	8001100 <HAL_GetTick>
 80028ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80028c0:	887b      	ldrh	r3, [r7, #2]
 80028c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028c4:	7efb      	ldrb	r3, [r7, #27]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d00e      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0x6e>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028d0:	d106      	bne.n	80028e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_TransmitReceive+0x66>
 80028da:	7efb      	ldrb	r3, [r7, #27]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d003      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
 80028e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028e6:	e1cd      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_SPI_TransmitReceive+0x80>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_SPI_TransmitReceive+0x80>
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002900:	e1c0      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b04      	cmp	r3, #4
 800290c:	d003      	beq.n	8002916 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2205      	movs	r2, #5
 8002912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	887a      	ldrh	r2, [r7, #2]
 8002926:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	887a      	ldrh	r2, [r7, #2]
 800292e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002958:	d802      	bhi.n	8002960 <HAL_SPI_TransmitReceive+0xe6>
 800295a:	8a3b      	ldrh	r3, [r7, #16]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d908      	bls.n	8002972 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	e007      	b.n	8002982 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002980:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d007      	beq.n	80029a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029a8:	d97c      	bls.n	8002aa4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x13e>
 80029b2:	8a7b      	ldrh	r3, [r7, #18]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d169      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	1c9a      	adds	r2, r3, #2
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029dc:	e056      	b.n	8002a8c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d11b      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x1aa>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x1aa>
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d113      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	881a      	ldrh	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	1c9a      	adds	r2, r3, #2
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d11c      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x1f2>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	1c9a      	adds	r2, r3, #2
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a6c:	f7fe fb48 	bl	8001100 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d807      	bhi.n	8002a8c <HAL_SPI_TransmitReceive+0x212>
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a82:	d003      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a8a:	e0fb      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1a3      	bne.n	80029de <HAL_SPI_TransmitReceive+0x164>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d19d      	bne.n	80029de <HAL_SPI_TransmitReceive+0x164>
 8002aa2:	e0df      	b.n	8002c64 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_SPI_TransmitReceive+0x23a>
 8002aac:	8a7b      	ldrh	r3, [r7, #18]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f040 80cb 	bne.w	8002c4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d912      	bls.n	8002ae4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	1c9a      	adds	r2, r3, #2
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b02      	subs	r3, #2
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ae2:	e0b2      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	7812      	ldrb	r2, [r2, #0]
 8002af0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b0a:	e09e      	b.n	8002c4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d134      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x30a>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d02f      	beq.n	8002b84 <HAL_SPI_TransmitReceive+0x30a>
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d12c      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d912      	bls.n	8002b5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	1c9a      	adds	r2, r3, #2
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b02      	subs	r3, #2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b58:	e012      	b.n	8002b80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d148      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x3aa>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d042      	beq.n	8002c24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d923      	bls.n	8002bf2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b02      	subs	r3, #2
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d81f      	bhi.n	8002c20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	e016      	b.n	8002c20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f103 020c 	add.w	r2, r3, #12
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c20:	2301      	movs	r3, #1
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c24:	f7fe fa6c 	bl	8001100 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d803      	bhi.n	8002c3c <HAL_SPI_TransmitReceive+0x3c2>
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3a:	d102      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x3c8>
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c48:	e01c      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f af5b 	bne.w	8002b0c <HAL_SPI_TransmitReceive+0x292>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f47f af54 	bne.w	8002b0c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f937 	bl	8002edc <SPI_EndRxTxTransaction>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	661a      	str	r2, [r3, #96]	; 0x60
 8002c80:	e000      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002c82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cb0:	f7fe fa26 	bl	8001100 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cc0:	f7fe fa1e 	bl	8001100 <HAL_GetTick>
 8002cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cc6:	4b39      	ldr	r3, [pc, #228]	; (8002dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	0d1b      	lsrs	r3, r3, #20
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd6:	e054      	b.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cde:	d050      	beq.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ce0:	f7fe fa0e 	bl	8001100 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d902      	bls.n	8002cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d13d      	bne.n	8002d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d0e:	d111      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d18:	d004      	beq.n	8002d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d22:	d107      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3c:	d10f      	bne.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e017      	b.n	8002da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d19b      	bne.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002dc2:	f7fe f99d 	bl	8001100 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002dd2:	f7fe f995 	bl	8001100 <HAL_GetTick>
 8002dd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002de0:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00da      	lsls	r2, r3, #3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	0d1b      	lsrs	r3, r3, #20
 8002df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002df8:	e060      	b.n	8002ebc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e00:	d107      	bne.n	8002e12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e18:	d050      	beq.n	8002ebc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e1a:	f7fe f971 	bl	8001100 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d902      	bls.n	8002e30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d13d      	bne.n	8002eac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e48:	d111      	bne.n	8002e6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e52:	d004      	beq.n	8002e5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5c:	d107      	bne.n	8002e6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e76:	d10f      	bne.n	8002e98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e010      	b.n	8002ece <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d196      	bne.n	8002dfa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000

08002edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff ff5b 	bl	8002db0 <SPI_WaitFifoStateUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e027      	b.n	8002f60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fec0 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e014      	b.n	8002f60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7ff ff34 	bl	8002db0 <SPI_WaitFifoStateUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e000      	b.n	8002f60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e049      	b.n	800300e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fe8c 	bl	8000cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 fce0 	bl	800396c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d001      	beq.n	8003030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e054      	b.n	80030da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a26      	ldr	r2, [pc, #152]	; (80030e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d022      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305a:	d01d      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a22      	ldr	r2, [pc, #136]	; (80030ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_TIM_Base_Start_IT+0xe4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_TIM_Base_Start_IT+0xe8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d115      	bne.n	80030c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_TIM_Base_Start_IT+0xec>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d015      	beq.n	80030d6 <HAL_TIM_Base_Start_IT+0xbe>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b0:	d011      	beq.n	80030d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c2:	e008      	b.n	80030d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	e000      	b.n	80030d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40013400 	.word	0x40013400
 80030fc:	40014000 	.word	0x40014000
 8003100:	40015000 	.word	0x40015000
 8003104:	00010007 	.word	0x00010007

08003108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e049      	b.n	80031ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f841 	bl	80031b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f000 fc10 	bl	800396c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d122      	bne.n	8003226 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d11b      	bne.n	8003226 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0202 	mvn.w	r2, #2
 80031f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fb8f 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 8003212:	e005      	b.n	8003220 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fb81 	bl	800391c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fb92 	bl	8003944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d122      	bne.n	800327a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b04      	cmp	r3, #4
 8003240:	d11b      	bne.n	800327a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0204 	mvn.w	r2, #4
 800324a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fb65 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 8003266:	e005      	b.n	8003274 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fb57 	bl	800391c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fb68 	bl	8003944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b08      	cmp	r3, #8
 8003286:	d122      	bne.n	80032ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b08      	cmp	r3, #8
 8003294:	d11b      	bne.n	80032ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f06f 0208 	mvn.w	r2, #8
 800329e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2204      	movs	r2, #4
 80032a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fb3b 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 80032ba:	e005      	b.n	80032c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fb2d 	bl	800391c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fb3e 	bl	8003944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d122      	bne.n	8003322 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d11b      	bne.n	8003322 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0210 	mvn.w	r2, #16
 80032f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2208      	movs	r2, #8
 80032f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fb11 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 800330e:	e005      	b.n	800331c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fb03 	bl	800391c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fb14 	bl	8003944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d10e      	bne.n	800334e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d107      	bne.n	800334e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0201 	mvn.w	r2, #1
 8003346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fd fa73 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	2b80      	cmp	r3, #128	; 0x80
 800335a:	d10e      	bne.n	800337a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d107      	bne.n	800337a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f001 f8b9 	bl	80044ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003388:	d10e      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d107      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f001 f8ac 	bl	8004500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d10e      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d107      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fac2 	bl	8003958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d10e      	bne.n	8003400 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d107      	bne.n	8003400 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0220 	mvn.w	r2, #32
 80033f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 f86c 	bl	80044d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340e:	d10f      	bne.n	8003430 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341e:	d107      	bne.n	8003430 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 f872 	bl	8004514 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343e:	d10f      	bne.n	8003460 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800344e:	d107      	bne.n	8003460 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f001 f864 	bl	8004528 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346e:	d10f      	bne.n	8003490 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f001 f856 	bl	800453c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800349a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800349e:	d10f      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f001 f848 	bl	8004550 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e0ff      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b14      	cmp	r3, #20
 80034f2:	f200 80f0 	bhi.w	80036d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003551 	.word	0x08003551
 8003500:	080036d7 	.word	0x080036d7
 8003504:	080036d7 	.word	0x080036d7
 8003508:	080036d7 	.word	0x080036d7
 800350c:	08003591 	.word	0x08003591
 8003510:	080036d7 	.word	0x080036d7
 8003514:	080036d7 	.word	0x080036d7
 8003518:	080036d7 	.word	0x080036d7
 800351c:	080035d3 	.word	0x080035d3
 8003520:	080036d7 	.word	0x080036d7
 8003524:	080036d7 	.word	0x080036d7
 8003528:	080036d7 	.word	0x080036d7
 800352c:	08003613 	.word	0x08003613
 8003530:	080036d7 	.word	0x080036d7
 8003534:	080036d7 	.word	0x080036d7
 8003538:	080036d7 	.word	0x080036d7
 800353c:	08003655 	.word	0x08003655
 8003540:	080036d7 	.word	0x080036d7
 8003544:	080036d7 	.word	0x080036d7
 8003548:	080036d7 	.word	0x080036d7
 800354c:	08003695 	.word	0x08003695
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fab0 	bl	8003abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0208 	orr.w	r2, r2, #8
 800356a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6999      	ldr	r1, [r3, #24]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	619a      	str	r2, [r3, #24]
      break;
 800358e:	e0a5      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fb2a 	bl	8003bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	619a      	str	r2, [r3, #24]
      break;
 80035d0:	e084      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fb9d 	bl	8003d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0208 	orr.w	r2, r2, #8
 80035ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0204 	bic.w	r2, r2, #4
 80035fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69d9      	ldr	r1, [r3, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	61da      	str	r2, [r3, #28]
      break;
 8003610:	e064      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fc0f 	bl	8003e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69d9      	ldr	r1, [r3, #28]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	021a      	lsls	r2, r3, #8
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	61da      	str	r2, [r3, #28]
      break;
 8003652:	e043      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fc82 	bl	8003f64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0208 	orr.w	r2, r2, #8
 800366e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0204 	bic.w	r2, r2, #4
 800367e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003692:	e023      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fccc 	bl	8004038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	021a      	lsls	r2, r3, #8
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80036d4:	e002      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
      break;
 80036da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop

080036f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIM_ConfigClockSource+0x1c>
 8003708:	2302      	movs	r3, #2
 800370a:	e0f6      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x20a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800372a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800372e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6f      	ldr	r2, [pc, #444]	; (8003904 <HAL_TIM_ConfigClockSource+0x214>)
 8003746:	4293      	cmp	r3, r2
 8003748:	f000 80c1 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800374c:	4a6d      	ldr	r2, [pc, #436]	; (8003904 <HAL_TIM_ConfigClockSource+0x214>)
 800374e:	4293      	cmp	r3, r2
 8003750:	f200 80c6 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003754:	4a6c      	ldr	r2, [pc, #432]	; (8003908 <HAL_TIM_ConfigClockSource+0x218>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f000 80b9 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800375c:	4a6a      	ldr	r2, [pc, #424]	; (8003908 <HAL_TIM_ConfigClockSource+0x218>)
 800375e:	4293      	cmp	r3, r2
 8003760:	f200 80be 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003764:	4a69      	ldr	r2, [pc, #420]	; (800390c <HAL_TIM_ConfigClockSource+0x21c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	f000 80b1 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800376c:	4a67      	ldr	r2, [pc, #412]	; (800390c <HAL_TIM_ConfigClockSource+0x21c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	f200 80b6 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003774:	4a66      	ldr	r2, [pc, #408]	; (8003910 <HAL_TIM_ConfigClockSource+0x220>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f000 80a9 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800377c:	4a64      	ldr	r2, [pc, #400]	; (8003910 <HAL_TIM_ConfigClockSource+0x220>)
 800377e:	4293      	cmp	r3, r2
 8003780:	f200 80ae 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003784:	4a63      	ldr	r2, [pc, #396]	; (8003914 <HAL_TIM_ConfigClockSource+0x224>)
 8003786:	4293      	cmp	r3, r2
 8003788:	f000 80a1 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800378c:	4a61      	ldr	r2, [pc, #388]	; (8003914 <HAL_TIM_ConfigClockSource+0x224>)
 800378e:	4293      	cmp	r3, r2
 8003790:	f200 80a6 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003794:	4a60      	ldr	r2, [pc, #384]	; (8003918 <HAL_TIM_ConfigClockSource+0x228>)
 8003796:	4293      	cmp	r3, r2
 8003798:	f000 8099 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800379c:	4a5e      	ldr	r2, [pc, #376]	; (8003918 <HAL_TIM_ConfigClockSource+0x228>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	f200 809e 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037a8:	f000 8091 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 80037ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037b0:	f200 8096 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b8:	f000 8089 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 80037bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037c0:	f200 808e 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d03e      	beq.n	8003848 <HAL_TIM_ConfigClockSource+0x158>
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ce:	f200 8087 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	f000 8086 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1f6>
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037de:	d87f      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	d01a      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x12a>
 80037e4:	2b70      	cmp	r3, #112	; 0x70
 80037e6:	d87b      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e8:	2b60      	cmp	r3, #96	; 0x60
 80037ea:	d050      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x19e>
 80037ec:	2b60      	cmp	r3, #96	; 0x60
 80037ee:	d877      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f0:	2b50      	cmp	r3, #80	; 0x50
 80037f2:	d03c      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x17e>
 80037f4:	2b50      	cmp	r3, #80	; 0x50
 80037f6:	d873      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d058      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x1be>
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d86f      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003800:	2b30      	cmp	r3, #48	; 0x30
 8003802:	d064      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 8003804:	2b30      	cmp	r3, #48	; 0x30
 8003806:	d86b      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d060      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800380c:	2b20      	cmp	r3, #32
 800380e:	d867      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 8003814:	2b10      	cmp	r3, #16
 8003816:	d05a      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 8003818:	e062      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6899      	ldr	r1, [r3, #8]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f000 fced 	bl	8004208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800383c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	609a      	str	r2, [r3, #8]
      break;
 8003846:	e04f      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f000 fcd6 	bl	8004208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386a:	609a      	str	r2, [r3, #8]
      break;
 800386c:	e03c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	461a      	mov	r2, r3
 800387c:	f000 fc48 	bl	8004110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2150      	movs	r1, #80	; 0x50
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fca1 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 800388c:	e02c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	461a      	mov	r2, r3
 800389c:	f000 fc67 	bl	800416e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2160      	movs	r1, #96	; 0x60
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fc91 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 80038ac:	e01c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 fc28 	bl	8004110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fc81 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 80038cc:	e00c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f000 fc78 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 80038de:	e003      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e000      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80038e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	00100070 	.word	0x00100070
 8003908:	00100060 	.word	0x00100060
 800390c:	00100050 	.word	0x00100050
 8003910:	00100040 	.word	0x00100040
 8003914:	00100030 	.word	0x00100030
 8003918:	00100020 	.word	0x00100020

0800391c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a46      	ldr	r2, [pc, #280]	; (8003a98 <TIM_Base_SetConfig+0x12c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d017      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398a:	d013      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <TIM_Base_SetConfig+0x130>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00f      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a42      	ldr	r2, [pc, #264]	; (8003aa0 <TIM_Base_SetConfig+0x134>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a41      	ldr	r2, [pc, #260]	; (8003aa4 <TIM_Base_SetConfig+0x138>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <TIM_Base_SetConfig+0x13c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <TIM_Base_SetConfig+0x140>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <TIM_Base_SetConfig+0x12c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d023      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d01f      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a30      	ldr	r2, [pc, #192]	; (8003a9c <TIM_Base_SetConfig+0x130>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01b      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <TIM_Base_SetConfig+0x134>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d017      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2e      	ldr	r2, [pc, #184]	; (8003aa4 <TIM_Base_SetConfig+0x138>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2d      	ldr	r2, [pc, #180]	; (8003aa8 <TIM_Base_SetConfig+0x13c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2d      	ldr	r2, [pc, #180]	; (8003ab0 <TIM_Base_SetConfig+0x144>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <TIM_Base_SetConfig+0x148>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2b      	ldr	r2, [pc, #172]	; (8003ab8 <TIM_Base_SetConfig+0x14c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a26      	ldr	r2, [pc, #152]	; (8003aac <TIM_Base_SetConfig+0x140>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <TIM_Base_SetConfig+0x12c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <TIM_Base_SetConfig+0x13c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00f      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <TIM_Base_SetConfig+0x144>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <TIM_Base_SetConfig+0x148>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <TIM_Base_SetConfig+0x14c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <TIM_Base_SetConfig+0x140>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d103      	bne.n	8003a84 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	615a      	str	r2, [r3, #20]
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40013400 	.word	0x40013400
 8003aac:	40015000 	.word	0x40015000
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40014400 	.word	0x40014400
 8003ab8:	40014800 	.word	0x40014800

08003abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 0302 	bic.w	r3, r3, #2
 8003b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <TIM_OC1_SetConfig+0x11c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <TIM_OC1_SetConfig+0x88>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <TIM_OC1_SetConfig+0x120>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00f      	beq.n	8003b44 <TIM_OC1_SetConfig+0x88>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a2e      	ldr	r2, [pc, #184]	; (8003be0 <TIM_OC1_SetConfig+0x124>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <TIM_OC1_SetConfig+0x88>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a2d      	ldr	r2, [pc, #180]	; (8003be4 <TIM_OC1_SetConfig+0x128>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d007      	beq.n	8003b44 <TIM_OC1_SetConfig+0x88>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <TIM_OC1_SetConfig+0x12c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_OC1_SetConfig+0x88>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <TIM_OC1_SetConfig+0x130>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10c      	bne.n	8003b5e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0308 	bic.w	r3, r3, #8
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 0304 	bic.w	r3, r3, #4
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <TIM_OC1_SetConfig+0x11c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <TIM_OC1_SetConfig+0xd2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1c      	ldr	r2, [pc, #112]	; (8003bdc <TIM_OC1_SetConfig+0x120>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00f      	beq.n	8003b8e <TIM_OC1_SetConfig+0xd2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <TIM_OC1_SetConfig+0x124>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_OC1_SetConfig+0xd2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <TIM_OC1_SetConfig+0x128>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_OC1_SetConfig+0xd2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <TIM_OC1_SetConfig+0x12c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_OC1_SetConfig+0xd2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a18      	ldr	r2, [pc, #96]	; (8003bec <TIM_OC1_SetConfig+0x130>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d111      	bne.n	8003bb2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	621a      	str	r2, [r3, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800
 8003bec:	40015000 	.word	0x40015000

08003bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f023 0210 	bic.w	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0320 	bic.w	r3, r3, #32
 8003c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <TIM_OC2_SetConfig+0x110>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_OC2_SetConfig+0x74>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a2b      	ldr	r2, [pc, #172]	; (8003d04 <TIM_OC2_SetConfig+0x114>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_OC2_SetConfig+0x74>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <TIM_OC2_SetConfig+0x118>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10d      	bne.n	8003c80 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <TIM_OC2_SetConfig+0x110>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xc0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <TIM_OC2_SetConfig+0x114>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xc0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <TIM_OC2_SetConfig+0x11c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xc0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <TIM_OC2_SetConfig+0x120>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xc0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <TIM_OC2_SetConfig+0x124>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC2_SetConfig+0xc0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <TIM_OC2_SetConfig+0x118>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d113      	bne.n	8003cd8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40013400 	.word	0x40013400
 8003d08:	40015000 	.word	0x40015000
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <TIM_OC3_SetConfig+0x10c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_OC3_SetConfig+0x72>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <TIM_OC3_SetConfig+0x110>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_OC3_SetConfig+0x72>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <TIM_OC3_SetConfig+0x114>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10d      	bne.n	8003da6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1e      	ldr	r2, [pc, #120]	; (8003e24 <TIM_OC3_SetConfig+0x10c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <TIM_OC3_SetConfig+0xbe>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <TIM_OC3_SetConfig+0x110>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00f      	beq.n	8003dd6 <TIM_OC3_SetConfig+0xbe>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <TIM_OC3_SetConfig+0x118>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_OC3_SetConfig+0xbe>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <TIM_OC3_SetConfig+0x11c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <TIM_OC3_SetConfig+0xbe>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <TIM_OC3_SetConfig+0x120>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_OC3_SetConfig+0xbe>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <TIM_OC3_SetConfig+0x114>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d113      	bne.n	8003dfe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40013400 	.word	0x40013400
 8003e2c:	40015000 	.word	0x40015000
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800

08003e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	031b      	lsls	r3, r3, #12
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a2c      	ldr	r2, [pc, #176]	; (8003f4c <TIM_OC4_SetConfig+0x110>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_OC4_SetConfig+0x74>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a2b      	ldr	r2, [pc, #172]	; (8003f50 <TIM_OC4_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_OC4_SetConfig+0x74>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a2a      	ldr	r2, [pc, #168]	; (8003f54 <TIM_OC4_SetConfig+0x118>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10d      	bne.n	8003ecc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	031b      	lsls	r3, r3, #12
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <TIM_OC4_SetConfig+0x110>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <TIM_OC4_SetConfig+0xc0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <TIM_OC4_SetConfig+0x114>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00f      	beq.n	8003efc <TIM_OC4_SetConfig+0xc0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a1e      	ldr	r2, [pc, #120]	; (8003f58 <TIM_OC4_SetConfig+0x11c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_OC4_SetConfig+0xc0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <TIM_OC4_SetConfig+0x120>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_OC4_SetConfig+0xc0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <TIM_OC4_SetConfig+0x124>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC4_SetConfig+0xc0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <TIM_OC4_SetConfig+0x118>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d113      	bne.n	8003f24 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	019b      	lsls	r3, r3, #6
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40013400 	.word	0x40013400
 8003f54:	40015000 	.word	0x40015000
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800

08003f64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <TIM_OC5_SetConfig+0xbc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <TIM_OC5_SetConfig+0x82>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	; (8004024 <TIM_OC5_SetConfig+0xc0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00f      	beq.n	8003fe6 <TIM_OC5_SetConfig+0x82>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	; (8004028 <TIM_OC5_SetConfig+0xc4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00b      	beq.n	8003fe6 <TIM_OC5_SetConfig+0x82>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <TIM_OC5_SetConfig+0xc8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d007      	beq.n	8003fe6 <TIM_OC5_SetConfig+0x82>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <TIM_OC5_SetConfig+0xcc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC5_SetConfig+0x82>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <TIM_OC5_SetConfig+0xd0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d109      	bne.n	8003ffa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40013400 	.word	0x40013400
 8004028:	40014000 	.word	0x40014000
 800402c:	40014400 	.word	0x40014400
 8004030:	40014800 	.word	0x40014800
 8004034:	40015000 	.word	0x40015000

08004038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800407e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	051b      	lsls	r3, r3, #20
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <TIM_OC6_SetConfig+0xc0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <TIM_OC6_SetConfig+0x84>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a19      	ldr	r2, [pc, #100]	; (80040fc <TIM_OC6_SetConfig+0xc4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_OC6_SetConfig+0x84>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a18      	ldr	r2, [pc, #96]	; (8004100 <TIM_OC6_SetConfig+0xc8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_OC6_SetConfig+0x84>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a17      	ldr	r2, [pc, #92]	; (8004104 <TIM_OC6_SetConfig+0xcc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_OC6_SetConfig+0x84>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a16      	ldr	r2, [pc, #88]	; (8004108 <TIM_OC6_SetConfig+0xd0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC6_SetConfig+0x84>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a15      	ldr	r2, [pc, #84]	; (800410c <TIM_OC6_SetConfig+0xd4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d109      	bne.n	80040d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40013400 	.word	0x40013400
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800
 800410c:	40015000 	.word	0x40015000

08004110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 030a 	bic.w	r3, r3, #10
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	031b      	lsls	r3, r3, #12
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f043 0307 	orr.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	431a      	orrs	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800425c:	2302      	movs	r3, #2
 800425e:	e074      	b.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a34      	ldr	r2, [pc, #208]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a33      	ldr	r2, [pc, #204]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a31      	ldr	r2, [pc, #196]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a21      	ldr	r2, [pc, #132]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d022      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d01d      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d018      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a15      	ldr	r2, [pc, #84]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a11      	ldr	r2, [pc, #68]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10c      	bne.n	8004338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4313      	orrs	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40013400 	.word	0x40013400
 8004360:	40015000 	.word	0x40015000
 8004364:	40000400 	.word	0x40000400
 8004368:	40000800 	.word	0x40000800
 800436c:	40000c00 	.word	0x40000c00
 8004370:	40014000 	.word	0x40014000

08004374 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800438c:	2302      	movs	r3, #2
 800438e:	e096      	b.n	80044be <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2c      	ldr	r2, [pc, #176]	; (80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d106      	bne.n	8004436 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a24      	ldr	r2, [pc, #144]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d12b      	bne.n	80044ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	051b      	lsls	r3, r3, #20
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a11      	ldr	r2, [pc, #68]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d106      	bne.n	80044ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40013400 	.word	0x40013400
 80044d4:	40015000 	.word	0x40015000

080044d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e042      	b.n	80045fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fc fd0d 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2224      	movs	r2, #36	; 0x24
 8004592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8c2 	bl	8004730 <UART_SetConfig>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e022      	b.n	80045fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fbb2 	bl	8004d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fc39 	bl	8004e6c <UART_CheckIdleState>
 80045fa:	4603      	mov	r3, r0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461a:	2b20      	cmp	r3, #32
 800461c:	f040 8083 	bne.w	8004726 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_UART_Transmit+0x28>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e07b      	b.n	8004728 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Transmit+0x3a>
 800463a:	2302      	movs	r3, #2
 800463c:	e074      	b.n	8004728 <HAL_UART_Transmit+0x124>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2221      	movs	r2, #33	; 0x21
 8004652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004656:	f7fc fd53 	bl	8001100 <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	88fa      	ldrh	r2, [r7, #6]
 8004668:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d108      	bne.n	8004688 <HAL_UART_Transmit+0x84>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e003      	b.n	8004690 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004698:	e02c      	b.n	80046f4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fc2c 	bl	8004f02 <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e039      	b.n	8004728 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	3302      	adds	r3, #2
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e007      	b.n	80046e2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3301      	adds	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1cc      	bne.n	800469a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2200      	movs	r2, #0
 8004708:	2140      	movs	r1, #64	; 0x40
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fbf9 	bl	8004f02 <UART_WaitOnFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e006      	b.n	8004728 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004734:	b08c      	sub	sp, #48	; 0x30
 8004736:	af00      	add	r7, sp, #0
 8004738:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	431a      	orrs	r2, r3
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	431a      	orrs	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4313      	orrs	r3, r2
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4baa      	ldr	r3, [pc, #680]	; (8004a08 <UART_SetConfig+0x2d8>)
 8004760:	4013      	ands	r3, r2
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004768:	430b      	orrs	r3, r1
 800476a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a9f      	ldr	r2, [pc, #636]	; (8004a0c <UART_SetConfig+0x2dc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004798:	4313      	orrs	r3, r2
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	f023 010f 	bic.w	r1, r3, #15
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a90      	ldr	r2, [pc, #576]	; (8004a10 <UART_SetConfig+0x2e0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d125      	bne.n	8004820 <UART_SetConfig+0xf0>
 80047d4:	4b8f      	ldr	r3, [pc, #572]	; (8004a14 <UART_SetConfig+0x2e4>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d81a      	bhi.n	8004818 <UART_SetConfig+0xe8>
 80047e2:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <UART_SetConfig+0xb8>)
 80047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	08004809 	.word	0x08004809
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004811 	.word	0x08004811
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fe:	e116      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004800:	2302      	movs	r3, #2
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004806:	e112      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480e:	e10e      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004816:	e10a      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800481e:	e106      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a7c      	ldr	r2, [pc, #496]	; (8004a18 <UART_SetConfig+0x2e8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d138      	bne.n	800489c <UART_SetConfig+0x16c>
 800482a:	4b7a      	ldr	r3, [pc, #488]	; (8004a14 <UART_SetConfig+0x2e4>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d82d      	bhi.n	8004894 <UART_SetConfig+0x164>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0x110>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004875 	.word	0x08004875
 8004844:	08004895 	.word	0x08004895
 8004848:	08004895 	.word	0x08004895
 800484c:	08004895 	.word	0x08004895
 8004850:	08004885 	.word	0x08004885
 8004854:	08004895 	.word	0x08004895
 8004858:	08004895 	.word	0x08004895
 800485c:	08004895 	.word	0x08004895
 8004860:	0800487d 	.word	0x0800487d
 8004864:	08004895 	.word	0x08004895
 8004868:	08004895 	.word	0x08004895
 800486c:	08004895 	.word	0x08004895
 8004870:	0800488d 	.word	0x0800488d
 8004874:	2300      	movs	r3, #0
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e0d8      	b.n	8004a2e <UART_SetConfig+0x2fe>
 800487c:	2302      	movs	r3, #2
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004882:	e0d4      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488a:	e0d0      	b.n	8004a2e <UART_SetConfig+0x2fe>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004892:	e0cc      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489a:	e0c8      	b.n	8004a2e <UART_SetConfig+0x2fe>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a5e      	ldr	r2, [pc, #376]	; (8004a1c <UART_SetConfig+0x2ec>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d125      	bne.n	80048f2 <UART_SetConfig+0x1c2>
 80048a6:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <UART_SetConfig+0x2e4>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048b0:	2b30      	cmp	r3, #48	; 0x30
 80048b2:	d016      	beq.n	80048e2 <UART_SetConfig+0x1b2>
 80048b4:	2b30      	cmp	r3, #48	; 0x30
 80048b6:	d818      	bhi.n	80048ea <UART_SetConfig+0x1ba>
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d00a      	beq.n	80048d2 <UART_SetConfig+0x1a2>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d814      	bhi.n	80048ea <UART_SetConfig+0x1ba>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <UART_SetConfig+0x19a>
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d008      	beq.n	80048da <UART_SetConfig+0x1aa>
 80048c8:	e00f      	b.n	80048ea <UART_SetConfig+0x1ba>
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d0:	e0ad      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80048d2:	2302      	movs	r3, #2
 80048d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d8:	e0a9      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80048da:	2304      	movs	r3, #4
 80048dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e0:	e0a5      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80048e2:	2308      	movs	r3, #8
 80048e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e8:	e0a1      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80048ea:	2310      	movs	r3, #16
 80048ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f0:	e09d      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a4a      	ldr	r2, [pc, #296]	; (8004a20 <UART_SetConfig+0x2f0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d125      	bne.n	8004948 <UART_SetConfig+0x218>
 80048fc:	4b45      	ldr	r3, [pc, #276]	; (8004a14 <UART_SetConfig+0x2e4>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004906:	2bc0      	cmp	r3, #192	; 0xc0
 8004908:	d016      	beq.n	8004938 <UART_SetConfig+0x208>
 800490a:	2bc0      	cmp	r3, #192	; 0xc0
 800490c:	d818      	bhi.n	8004940 <UART_SetConfig+0x210>
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d00a      	beq.n	8004928 <UART_SetConfig+0x1f8>
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d814      	bhi.n	8004940 <UART_SetConfig+0x210>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <UART_SetConfig+0x1f0>
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d008      	beq.n	8004930 <UART_SetConfig+0x200>
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0x210>
 8004920:	2300      	movs	r3, #0
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004926:	e082      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004928:	2302      	movs	r3, #2
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492e:	e07e      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004930:	2304      	movs	r3, #4
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e07a      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004938:	2308      	movs	r3, #8
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493e:	e076      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004940:	2310      	movs	r3, #16
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004946:	e072      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a35      	ldr	r2, [pc, #212]	; (8004a24 <UART_SetConfig+0x2f4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d12a      	bne.n	80049a8 <UART_SetConfig+0x278>
 8004952:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <UART_SetConfig+0x2e4>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004960:	d01a      	beq.n	8004998 <UART_SetConfig+0x268>
 8004962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004966:	d81b      	bhi.n	80049a0 <UART_SetConfig+0x270>
 8004968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496c:	d00c      	beq.n	8004988 <UART_SetConfig+0x258>
 800496e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004972:	d815      	bhi.n	80049a0 <UART_SetConfig+0x270>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <UART_SetConfig+0x250>
 8004978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497c:	d008      	beq.n	8004990 <UART_SetConfig+0x260>
 800497e:	e00f      	b.n	80049a0 <UART_SetConfig+0x270>
 8004980:	2300      	movs	r3, #0
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004986:	e052      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004988:	2302      	movs	r3, #2
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e04e      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004990:	2304      	movs	r3, #4
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004996:	e04a      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004998:	2308      	movs	r3, #8
 800499a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499e:	e046      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80049a0:	2310      	movs	r3, #16
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a6:	e042      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <UART_SetConfig+0x2dc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d13a      	bne.n	8004a28 <UART_SetConfig+0x2f8>
 80049b2:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <UART_SetConfig+0x2e4>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c0:	d01a      	beq.n	80049f8 <UART_SetConfig+0x2c8>
 80049c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c6:	d81b      	bhi.n	8004a00 <UART_SetConfig+0x2d0>
 80049c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049cc:	d00c      	beq.n	80049e8 <UART_SetConfig+0x2b8>
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d2:	d815      	bhi.n	8004a00 <UART_SetConfig+0x2d0>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <UART_SetConfig+0x2b0>
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	d008      	beq.n	80049f0 <UART_SetConfig+0x2c0>
 80049de:	e00f      	b.n	8004a00 <UART_SetConfig+0x2d0>
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e6:	e022      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80049e8:	2302      	movs	r3, #2
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ee:	e01e      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80049f0:	2304      	movs	r3, #4
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f6:	e01a      	b.n	8004a2e <UART_SetConfig+0x2fe>
 80049f8:	2308      	movs	r3, #8
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fe:	e016      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004a00:	2310      	movs	r3, #16
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a06:	e012      	b.n	8004a2e <UART_SetConfig+0x2fe>
 8004a08:	cfff69f3 	.word	0xcfff69f3
 8004a0c:	40008000 	.word	0x40008000
 8004a10:	40013800 	.word	0x40013800
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40004400 	.word	0x40004400
 8004a1c:	40004800 	.word	0x40004800
 8004a20:	40004c00 	.word	0x40004c00
 8004a24:	40005000 	.word	0x40005000
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4aae      	ldr	r2, [pc, #696]	; (8004cec <UART_SetConfig+0x5bc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f040 8097 	bne.w	8004b68 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d823      	bhi.n	8004a8a <UART_SetConfig+0x35a>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x318>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a8b 	.word	0x08004a8b
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a8b 	.word	0x08004a8b
 8004a58:	08004a7b 	.word	0x08004a7b
 8004a5c:	08004a8b 	.word	0x08004a8b
 8004a60:	08004a8b 	.word	0x08004a8b
 8004a64:	08004a8b 	.word	0x08004a8b
 8004a68:	08004a83 	.word	0x08004a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a6c:	f7fd fb68 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a72:	e010      	b.n	8004a96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a74:	4b9e      	ldr	r3, [pc, #632]	; (8004cf0 <UART_SetConfig+0x5c0>)
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a78:	e00d      	b.n	8004a96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7a:	f7fd faf3 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8004a7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a80:	e009      	b.n	8004a96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a88:	e005      	b.n	8004a96 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8130 	beq.w	8004cfe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	4a94      	ldr	r2, [pc, #592]	; (8004cf4 <UART_SetConfig+0x5c4>)
 8004aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d305      	bcc.n	8004ace <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d903      	bls.n	8004ad6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ad4:	e113      	b.n	8004cfe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2200      	movs	r2, #0
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	60fa      	str	r2, [r7, #12]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	4a84      	ldr	r2, [pc, #528]	; (8004cf4 <UART_SetConfig+0x5c4>)
 8004ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2200      	movs	r2, #0
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004af8:	f7fb fb8e 	bl	8000218 <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	020b      	lsls	r3, r1, #8
 8004b0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b12:	0202      	lsls	r2, r0, #8
 8004b14:	6979      	ldr	r1, [r7, #20]
 8004b16:	6849      	ldr	r1, [r1, #4]
 8004b18:	0849      	lsrs	r1, r1, #1
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	4605      	mov	r5, r0
 8004b20:	eb12 0804 	adds.w	r8, r2, r4
 8004b24:	eb43 0905 	adc.w	r9, r3, r5
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	469a      	mov	sl, r3
 8004b30:	4693      	mov	fp, r2
 8004b32:	4652      	mov	r2, sl
 8004b34:	465b      	mov	r3, fp
 8004b36:	4640      	mov	r0, r8
 8004b38:	4649      	mov	r1, r9
 8004b3a:	f7fb fb6d 	bl	8000218 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4613      	mov	r3, r2
 8004b44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b4c:	d308      	bcc.n	8004b60 <UART_SetConfig+0x430>
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b54:	d204      	bcs.n	8004b60 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a3a      	ldr	r2, [r7, #32]
 8004b5c:	60da      	str	r2, [r3, #12]
 8004b5e:	e0ce      	b.n	8004cfe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b66:	e0ca      	b.n	8004cfe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b70:	d166      	bne.n	8004c40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d827      	bhi.n	8004bca <UART_SetConfig+0x49a>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x450>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	08004bcb 	.word	0x08004bcb
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004bcb 	.word	0x08004bcb
 8004b98:	08004bcb 	.word	0x08004bcb
 8004b9c:	08004bcb 	.word	0x08004bcb
 8004ba0:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7fd facc 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004baa:	e014      	b.n	8004bd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7fd fade 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8004bb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb2:	e010      	b.n	8004bd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb4:	4b4e      	ldr	r3, [pc, #312]	; (8004cf0 <UART_SetConfig+0x5c0>)
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb8:	e00d      	b.n	8004bd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bba:	f7fd fa53 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8004bbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bc0:	e009      	b.n	8004bd6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc8:	e005      	b.n	8004bd6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8090 	beq.w	8004cfe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	4a44      	ldr	r2, [pc, #272]	; (8004cf4 <UART_SetConfig+0x5c4>)
 8004be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bf0:	005a      	lsls	r2, r3, #1
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	441a      	add	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d916      	bls.n	8004c38 <UART_SetConfig+0x508>
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d212      	bcs.n	8004c38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f023 030f 	bic.w	r3, r3, #15
 8004c1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	8bfb      	ldrh	r3, [r7, #30]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	8bfa      	ldrh	r2, [r7, #30]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	e062      	b.n	8004cfe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c3e:	e05e      	b.n	8004cfe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d828      	bhi.n	8004c9a <UART_SetConfig+0x56a>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x520>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	08004c9b 	.word	0x08004c9b
 8004c60:	08004c8b 	.word	0x08004c8b
 8004c64:	08004c9b 	.word	0x08004c9b
 8004c68:	08004c9b 	.word	0x08004c9b
 8004c6c:	08004c9b 	.word	0x08004c9b
 8004c70:	08004c93 	.word	0x08004c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c74:	f7fd fa64 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8004c78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c7a:	e014      	b.n	8004ca6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7fd fa76 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 8004c80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c82:	e010      	b.n	8004ca6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <UART_SetConfig+0x5c0>)
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c88:	e00d      	b.n	8004ca6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8a:	f7fd f9eb 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c90:	e009      	b.n	8004ca6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c98:	e005      	b.n	8004ca6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ca4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d028      	beq.n	8004cfe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <UART_SetConfig+0x5c4>)
 8004cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	441a      	add	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	2b0f      	cmp	r3, #15
 8004cd4:	d910      	bls.n	8004cf8 <UART_SetConfig+0x5c8>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d20c      	bcs.n	8004cf8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60da      	str	r2, [r3, #12]
 8004ce8:	e009      	b.n	8004cfe <UART_SetConfig+0x5ce>
 8004cea:	bf00      	nop
 8004cec:	40008000 	.word	0x40008000
 8004cf0:	00f42400 	.word	0x00f42400
 8004cf4:	08005468 	.word	0x08005468
      }
      else
      {
        ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2200      	movs	r2, #0
 8004d18:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3730      	adds	r7, #48	; 0x30
 8004d22:	46bd      	mov	sp, r7
 8004d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e26:	d10a      	bne.n	8004e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e7c:	f7fc f940 	bl	8001100 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d10e      	bne.n	8004eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f82f 	bl	8004f02 <UART_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e025      	b.n	8004efa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d10e      	bne.n	8004eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f819 	bl	8004f02 <UART_WaitOnFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e00f      	b.n	8004efa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b09c      	sub	sp, #112	; 0x70
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f12:	e0a9      	b.n	8005068 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f1a:	f000 80a5 	beq.w	8005068 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7fc f8ef 	bl	8001100 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d140      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f48:	667b      	str	r3, [r7, #100]	; 0x64
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e6      	bne.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3308      	adds	r3, #8
 8004f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f86:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e5      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e069      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d051      	beq.n	8005068 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd2:	d149      	bne.n	8005068 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e6      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3308      	adds	r3, #8
 8005016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	613b      	str	r3, [r7, #16]
   return(result);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	66bb      	str	r3, [r7, #104]	; 0x68
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3308      	adds	r3, #8
 800502e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005030:	623a      	str	r2, [r7, #32]
 8005032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	69f9      	ldr	r1, [r7, #28]
 8005036:	6a3a      	ldr	r2, [r7, #32]
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	61bb      	str	r3, [r7, #24]
   return(result);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e5      	bne.n	8005010 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e010      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4013      	ands	r3, r2
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	bf0c      	ite	eq
 8005078:	2301      	moveq	r3, #1
 800507a:	2300      	movne	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	429a      	cmp	r2, r3
 8005084:	f43f af46 	beq.w	8004f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3770      	adds	r7, #112	; 0x70
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e027      	b.n	80050f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2224      	movs	r2, #36	; 0x24
 80050b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005118:	2302      	movs	r3, #2
 800511a:	e02d      	b.n	8005178 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2224      	movs	r2, #36	; 0x24
 8005128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f84f 	bl	80051fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005194:	2302      	movs	r3, #2
 8005196:	e02d      	b.n	80051f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	; 0x24
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f811 	bl	80051fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800521c:	e031      	b.n	8005282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800521e:	2308      	movs	r3, #8
 8005220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005222:	2308      	movs	r3, #8
 8005224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	0e5b      	lsrs	r3, r3, #25
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	0f5b      	lsrs	r3, r3, #29
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005246:	7bbb      	ldrb	r3, [r7, #14]
 8005248:	7b3a      	ldrb	r2, [r7, #12]
 800524a:	4911      	ldr	r1, [pc, #68]	; (8005290 <UARTEx_SetNbDataToProcess+0x94>)
 800524c:	5c8a      	ldrb	r2, [r1, r2]
 800524e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005252:	7b3a      	ldrb	r2, [r7, #12]
 8005254:	490f      	ldr	r1, [pc, #60]	; (8005294 <UARTEx_SetNbDataToProcess+0x98>)
 8005256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005258:	fb93 f3f2 	sdiv	r3, r3, r2
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	7b7a      	ldrb	r2, [r7, #13]
 8005268:	4909      	ldr	r1, [pc, #36]	; (8005290 <UARTEx_SetNbDataToProcess+0x94>)
 800526a:	5c8a      	ldrb	r2, [r1, r2]
 800526c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005270:	7b7a      	ldrb	r2, [r7, #13]
 8005272:	4908      	ldr	r1, [pc, #32]	; (8005294 <UARTEx_SetNbDataToProcess+0x98>)
 8005274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005276:	fb93 f3f2 	sdiv	r3, r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	08005480 	.word	0x08005480
 8005294:	08005488 	.word	0x08005488

08005298 <memset>:
 8005298:	4402      	add	r2, r0
 800529a:	4603      	mov	r3, r0
 800529c:	4293      	cmp	r3, r2
 800529e:	d100      	bne.n	80052a2 <memset+0xa>
 80052a0:	4770      	bx	lr
 80052a2:	f803 1b01 	strb.w	r1, [r3], #1
 80052a6:	e7f9      	b.n	800529c <memset+0x4>

080052a8 <__libc_init_array>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4d0d      	ldr	r5, [pc, #52]	; (80052e0 <__libc_init_array+0x38>)
 80052ac:	4c0d      	ldr	r4, [pc, #52]	; (80052e4 <__libc_init_array+0x3c>)
 80052ae:	1b64      	subs	r4, r4, r5
 80052b0:	10a4      	asrs	r4, r4, #2
 80052b2:	2600      	movs	r6, #0
 80052b4:	42a6      	cmp	r6, r4
 80052b6:	d109      	bne.n	80052cc <__libc_init_array+0x24>
 80052b8:	4d0b      	ldr	r5, [pc, #44]	; (80052e8 <__libc_init_array+0x40>)
 80052ba:	4c0c      	ldr	r4, [pc, #48]	; (80052ec <__libc_init_array+0x44>)
 80052bc:	f000 f818 	bl	80052f0 <_init>
 80052c0:	1b64      	subs	r4, r4, r5
 80052c2:	10a4      	asrs	r4, r4, #2
 80052c4:	2600      	movs	r6, #0
 80052c6:	42a6      	cmp	r6, r4
 80052c8:	d105      	bne.n	80052d6 <__libc_init_array+0x2e>
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d0:	4798      	blx	r3
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7ee      	b.n	80052b4 <__libc_init_array+0xc>
 80052d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052da:	4798      	blx	r3
 80052dc:	3601      	adds	r6, #1
 80052de:	e7f2      	b.n	80052c6 <__libc_init_array+0x1e>
 80052e0:	08005498 	.word	0x08005498
 80052e4:	08005498 	.word	0x08005498
 80052e8:	08005498 	.word	0x08005498
 80052ec:	0800549c 	.word	0x0800549c

080052f0 <_init>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr

080052fc <_fini>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr
