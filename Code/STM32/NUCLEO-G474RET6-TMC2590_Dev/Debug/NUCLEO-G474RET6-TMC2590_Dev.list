
NUCLEO-G474RET6-TMC2590_Dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a3c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d18  08005d18  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d20  08005d20  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000005c  08005d84  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08005d84  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016972  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f3b  00000000  00000000  00036a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00039980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e51  00000000  00000000  0003abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c43  00000000  00000000  0003ba41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016624  00000000  00000000  00062684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc240  00000000  00000000  00078ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005230  00000000  00000000  00174ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0017a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005c04 	.word	0x08005c04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005c04 	.word	0x08005c04

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	4b44      	ldr	r3, [pc, #272]	; (80006e4 <MX_GPIO_Init+0x128>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a43      	ldr	r2, [pc, #268]	; (80006e4 <MX_GPIO_Init+0x128>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b41      	ldr	r3, [pc, #260]	; (80006e4 <MX_GPIO_Init+0x128>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ea:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <MX_GPIO_Init+0x128>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a3d      	ldr	r2, [pc, #244]	; (80006e4 <MX_GPIO_Init+0x128>)
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <MX_GPIO_Init+0x128>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b38      	ldr	r3, [pc, #224]	; (80006e4 <MX_GPIO_Init+0x128>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a37      	ldr	r2, [pc, #220]	; (80006e4 <MX_GPIO_Init+0x128>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <MX_GPIO_Init+0x128>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <MX_GPIO_Init+0x128>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a31      	ldr	r2, [pc, #196]	; (80006e4 <MX_GPIO_Init+0x128>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <MX_GPIO_Init+0x128>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nCS_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 ffcc 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_ENN_GPIO_Port, DRV_ENN_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2110      	movs	r1, #16
 8000644:	4828      	ldr	r0, [pc, #160]	; (80006e8 <MX_GPIO_Init+0x12c>)
 8000646:	f000 ffc7 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000650:	4826      	ldr	r0, [pc, #152]	; (80006ec <MX_GPIO_Init+0x130>)
 8000652:	f000 ffc1 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	481e      	ldr	r0, [pc, #120]	; (80006e8 <MX_GPIO_Init+0x12c>)
 800066e:	f000 fe31 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|nCS_Pin;
 8000672:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068e:	f000 fe21 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_ENN_Pin;
 8000692:	2310      	movs	r3, #16
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_ENN_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	480f      	ldr	r0, [pc, #60]	; (80006e8 <MX_GPIO_Init+0x12c>)
 80006aa:	f000 fe13 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80006ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_GPIO_Init+0x130>)
 80006c8:	f000 fe04 	bl	80012d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2028      	movs	r0, #40	; 0x28
 80006d2:	f000 fdd7 	bl	8001284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d6:	2028      	movs	r0, #40	; 0x28
 80006d8:	f000 fdee 	bl	80012b8 <HAL_NVIC_EnableIRQ>

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000400 	.word	0x48000400

080006f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006f6:	f000 fcd6 	bl	80010a6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006fa:	f000 f83d 	bl	8000778 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006fe:	f7ff ff5d 	bl	80005bc <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000702:	f000 fc05 	bl	8000f10 <MX_LPUART1_UART_Init>
	MX_TIM1_Init();
 8000706:	f000 fa31 	bl	8000b6c <MX_TIM1_Init>
	MX_SPI3_Init();
 800070a:	f000 f897 	bl	800083c <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&hlpuart1, "*********************\r\n", 23, 100);
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2217      	movs	r2, #23
 8000712:	4913      	ldr	r1, [pc, #76]	; (8000760 <main+0x70>)
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <main+0x74>)
 8000716:	f003 ff73 	bl	8004600 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, "* TMC2590 Test Code *\r\n", 23, 100);
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	2217      	movs	r2, #23
 800071e:	4912      	ldr	r1, [pc, #72]	; (8000768 <main+0x78>)
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <main+0x74>)
 8000722:	f003 ff6d 	bl	8004600 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, "*********************\r\n", 23, 100);
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	2217      	movs	r2, #23
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <main+0x70>)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <main+0x74>)
 800072e:	f003 ff67 	bl	8004600 <HAL_UART_Transmit>

	tmc2590_Init(&htmc2590, &hspi3, nCS_GPIO_Port, nCS_Pin, DRV_ENN_GPIO_Port, DRV_ENN_Pin);
 8000732:	2310      	movs	r3, #16
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <main+0x7c>)
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000742:	490b      	ldr	r1, [pc, #44]	; (8000770 <main+0x80>)
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <main+0x84>)
 8000746:	f000 fb1b 	bl	8000d80 <tmc2590_Init>
	tmc2590_PrintReport(&htmc2590);
 800074a:	480a      	ldr	r0, [pc, #40]	; (8000774 <main+0x84>)
 800074c:	f000 fb92 	bl	8000e74 <tmc2590_PrintReport>
	tmc2590_TransmitReceive(&htmc2590, 3);
 8000750:	2103      	movs	r1, #3
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <main+0x84>)
 8000754:	f000 fb5e 	bl	8000e14 <tmc2590_TransmitReceive>
	tmc2590_PrintReport(&htmc2590);
 8000758:	4806      	ldr	r0, [pc, #24]	; (8000774 <main+0x84>)
 800075a:	f000 fb8b 	bl	8000e74 <tmc2590_PrintReport>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800075e:	e7fe      	b.n	800075e <main+0x6e>
 8000760:	08005c1c 	.word	0x08005c1c
 8000764:	200001a0 	.word	0x200001a0
 8000768:	08005c34 	.word	0x08005c34
 800076c:	48000800 	.word	0x48000800
 8000770:	20000078 	.word	0x20000078
 8000774:	20000178 	.word	0x20000178

08000778 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2238      	movs	r2, #56	; 0x38
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 fdb8 	bl	80052fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 ff58 	bl	8001650 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	2303      	movs	r3, #3
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007b2:	2306      	movs	r3, #6
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80007b6:	2355      	movs	r3, #85	; 0x55
 80007b8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fff4 	bl	80017b8 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x62>
	{
		Error_Handler();
 80007d6:	f000 f82b 	bl	8000830 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2104      	movs	r1, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 faf8 	bl	8001de8 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80007fe:	f000 f817 	bl	8000830 <Error_Handler>
	}
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d101      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800081e:	f000 fc5b 	bl	80010d8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40001000 	.word	0x40001000

08000830 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_SPI3_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000856:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800085a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI3_Init+0x74>)
 800086a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000872:	2238      	movs	r2, #56	; 0x38
 8000874:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI3_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI3_Init+0x74>)
 800088a:	2207      	movs	r2, #7
 800088c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000896:	2208      	movs	r2, #8
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_SPI3_Init+0x74>)
 800089c:	f001 ff40 	bl	8002720 <HAL_SPI_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f7ff ffc3 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000078 	.word	0x20000078
 80008b4:	40003c00 	.word	0x40003c00

080008b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_SPI_MspInit+0x7c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d127      	bne.n	800092a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <HAL_SPI_MspInit+0x80>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <HAL_SPI_MspInit+0x80>)
 80008e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e4:	6593      	str	r3, [r2, #88]	; 0x58
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <HAL_SPI_MspInit+0x80>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_SPI_MspInit+0x80>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <HAL_SPI_MspInit+0x80>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_SPI_MspInit+0x80>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800090a:	2338      	movs	r3, #56	; 0x38
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091a:	2306      	movs	r3, #6
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <HAL_SPI_MspInit+0x84>)
 8000926:	f000 fcd5 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40003c00 	.word	0x40003c00
 8000938:	40021000 	.word	0x40021000
 800093c:	48000400 	.word	0x48000400

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000976:	f000 ff0f 	bl	8001798 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <HAL_InitTick+0xc4>)
 800099a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099c:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <HAL_InitTick+0xc4>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6593      	str	r3, [r2, #88]	; 0x58
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_InitTick+0xc4>)
 80009a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b0:	f107 020c 	add.w	r2, r7, #12
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 fbea 	bl	8002194 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009c0:	f001 fbbc 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 80009c4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <HAL_InitTick+0xc8>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9b      	lsrs	r3, r3, #18
 80009d0:	3b01      	subs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <HAL_InitTick+0xcc>)
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <HAL_InitTick+0xd0>)
 80009d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <HAL_InitTick+0xcc>)
 80009dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <HAL_InitTick+0xcc>)
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_InitTick+0xcc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_InitTick+0xcc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80009f4:	4817      	ldr	r0, [pc, #92]	; (8000a54 <HAL_InitTick+0xcc>)
 80009f6:	f002 fab5 	bl	8002f64 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11b      	bne.n	8000a40 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <HAL_InitTick+0xcc>)
 8000a0a:	f002 fb03 	bl	8003014 <HAL_TIM_Base_Start_IT>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d111      	bne.n	8000a40 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a1c:	2036      	movs	r0, #54	; 0x36
 8000a1e:	f000 fc4b 	bl	80012b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d808      	bhi.n	8000a3a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	2036      	movs	r0, #54	; 0x36
 8000a2e:	f000 fc29 	bl	8001284 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_InitTick+0xd4>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e002      	b.n	8000a40 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	200000dc 	.word	0x200000dc
 8000a58:	40001000 	.word	0x40001000
 8000a5c:	20000004 	.word	0x20000004

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000aba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000abe:	f000 fda3 	bl	8001608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <TIM6_DAC_IRQHandler+0x10>)
 8000ace:	f002 fb7a 	bl	80031c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000dc 	.word	0x200000dc

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f004 fbfe 	bl	800530c <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20020000 	.word	0x20020000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20000128 	.word	0x20000128
 8000b44:	20000380 	.word	0x20000380

08000b48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b09c      	sub	sp, #112	; 0x70
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2234      	movs	r2, #52	; 0x34
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 fba8 	bl	80052fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bac:	4b46      	ldr	r3, [pc, #280]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bae:	4a47      	ldr	r2, [pc, #284]	; (8000ccc <MX_TIM1_Init+0x160>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000;
 8000bb2:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bb4:	f244 2268 	movw	r2, #17000	; 0x4268
 8000bb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000bc0:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bda:	483b      	ldr	r0, [pc, #236]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bdc:	f002 f9c2 	bl	8002f64 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000be6:	f7ff fe23 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4834      	ldr	r0, [pc, #208]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000bf8:	f002 fd78 	bl	80036ec <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000c02:	f7ff fe15 	bl	8000830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c06:	4830      	ldr	r0, [pc, #192]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000c08:	f002 fa7c 	bl	8003104 <HAL_TIM_PWM_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000c12:	f7ff fe0d 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c26:	4619      	mov	r1, r3
 8000c28:	4827      	ldr	r0, [pc, #156]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000c2a:	f003 fb0b 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000c34:	f7ff fdfc 	bl	8000830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c38:	2360      	movs	r3, #96	; 0x60
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 8000c3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000c60:	f002 fc30 	bl	80034c4 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000c6a:	f7ff fde1 	bl	8000830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000cac:	f003 fb60 	bl	8004370 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000cb6:	f7ff fdbb 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <MX_TIM1_Init+0x15c>)
 8000cbc:	f000 f828 	bl	8000d10 <HAL_TIM_MspPostInit>

}
 8000cc0:	bf00      	nop
 8000cc2:	3770      	adds	r7, #112	; 0x70
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000012c 	.word	0x2000012c
 8000ccc:	40012c00 	.word	0x40012c00

08000cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_TIM_Base_MspInit+0x38>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10b      	bne.n	8000cfa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_TIM_Base_MspInit+0x3c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <HAL_TIM_MspPostInit+0x68>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d11d      	bne.n	8000d6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_TIM_MspPostInit+0x6c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_STEP_Pin;
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_STEP_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f000 fab3 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40012c00 	.word	0x40012c00
 8000d7c:	40021000 	.word	0x40021000

08000d80 <tmc2590_Init>:
TMC2590_HandleTypeDef htmc2590;

const char transmit_ok[] = "Transmission SPI done\r\n";
const char stringReportHeader[] = "SPI Tx/Rx Buffers\r\n";

void tmc2590_Init(TMC2590_HandleTypeDef *htmc2590, SPI_HandleTypeDef *hspi, GPIO_TypeDef *gpio_port_nCS, uint16_t gpio_pin_nCS, GPIO_TypeDef *gpio_port_drv_enn, uint16_t gpio_pin_drv_enn){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	807b      	strh	r3, [r7, #2]
	htmc2590->hspi = hspi;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	601a      	str	r2, [r3, #0]
	htmc2590->gpio_pin_nCS = gpio_pin_nCS;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	809a      	strh	r2, [r3, #4]
	htmc2590->gpio_port_nCS = gpio_port_nCS;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
	htmc2590->gpio_pin_drv_enn = gpio_pin_drv_enn;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	8bba      	ldrh	r2, [r7, #28]
 8000da4:	819a      	strh	r2, [r3, #12]
	htmc2590->gpio_port_drv_enn = gpio_port_drv_enn;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	611a      	str	r2, [r3, #16]

	tmc2590_SetPowerEnable(htmc2590, SET);
 8000dac:	2101      	movs	r1, #1
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f000 f81a 	bl	8000de8 <tmc2590_SetPowerEnable>
	tmc2590_SetnCS(htmc2590, SET);
 8000db4:	2101      	movs	r1, #1
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 f804 	bl	8000dc4 <tmc2590_SetnCS>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <tmc2590_SetnCS>:

void tmc2590_SetnCS(TMC2590_HandleTypeDef *htmc2590, FlagStatus status){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(htmc2590->gpio_port_nCS, htmc2590->gpio_pin_nCS, status);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6898      	ldr	r0, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	889b      	ldrh	r3, [r3, #4]
 8000dd8:	78fa      	ldrb	r2, [r7, #3]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f000 fbfc 	bl	80015d8 <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <tmc2590_SetPowerEnable>:

void tmc2590_SetPowerEnable(TMC2590_HandleTypeDef *htmc2590, FlagStatus status){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(htmc2590->gpio_port_drv_enn, htmc2590->gpio_pin_drv_enn, 1-status);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6918      	ldr	r0, [r3, #16]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	8999      	ldrh	r1, [r3, #12]
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	f1c3 0301 	rsb	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	f000 fbe7 	bl	80015d8 <HAL_GPIO_WritePin>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <tmc2590_TransmitReceive>:


HAL_StatusTypeDef tmc2590_TransmitReceive(TMC2590_HandleTypeDef *htmc2590, int size){
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	tmc2590_SetnCS(htmc2590, RESET);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffcf 	bl	8000dc4 <tmc2590_SetnCS>
	status = HAL_SPI_TransmitReceive(htmc2590->hspi, htmc2590->spiTxBuffer, htmc2590->spiRxBuffer, size, HAL_MAX_DELAY);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f103 0114 	add.w	r1, r3, #20
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f103 021e 	add.w	r2, r3, #30
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e3e:	9400      	str	r4, [sp, #0]
 8000e40:	f001 fd19 	bl	8002876 <HAL_SPI_TransmitReceive>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
	tmc2590_SetnCS(htmc2590, SET);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffba 	bl	8000dc4 <tmc2590_SetnCS>

	if(status == HAL_OK){
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d105      	bne.n	8000e62 <tmc2590_TransmitReceive+0x4e>
		HAL_UART_Transmit(&hlpuart1, (uint8_t *)transmit_ok, sizeof(transmit_ok), 100);
 8000e56:	2364      	movs	r3, #100	; 0x64
 8000e58:	2218      	movs	r2, #24
 8000e5a:	4904      	ldr	r1, [pc, #16]	; (8000e6c <tmc2590_TransmitReceive+0x58>)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <tmc2590_TransmitReceive+0x5c>)
 8000e5e:	f003 fbcf 	bl	8004600 <HAL_UART_Transmit>
	}
	else{

	}

	return status;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	08005c90 	.word	0x08005c90
 8000e70:	200001a0 	.word	0x200001a0

08000e74 <tmc2590_PrintReport>:

HAL_StatusTypeDef tmc2590_SetTxBuffer(TMC2590_HandleTypeDef *htmc2590, uint8_t *pData, int size){
	memcpy(htmc2590->spiTxBuffer, pData, size);
}

HAL_StatusTypeDef tmc2590_PrintReport(TMC2590_HandleTypeDef *htmc2590){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b096      	sub	sp, #88	; 0x58
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
	char string[64];
	int stringLength, i;
	HAL_UART_Transmit(&hlpuart1, stringReportHeader, sizeof(stringReportHeader), 100);
 8000e7c:	2364      	movs	r3, #100	; 0x64
 8000e7e:	2214      	movs	r2, #20
 8000e80:	491f      	ldr	r1, [pc, #124]	; (8000f00 <tmc2590_PrintReport+0x8c>)
 8000e82:	4820      	ldr	r0, [pc, #128]	; (8000f04 <tmc2590_PrintReport+0x90>)
 8000e84:	f003 fbbc 	bl	8004600 <HAL_UART_Transmit>
	stringLength = snprintf(string, 64, "      Tx  |  Rx \r\n");
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <tmc2590_PrintReport+0x94>)
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 f9ff 	bl	8005294 <sniprintf>
 8000e96:	64b8      	str	r0, [r7, #72]	; 0x48
	HAL_UART_Transmit(&hlpuart1, string, stringLength, 100);
 8000e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f107 0108 	add.w	r1, r7, #8
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	4818      	ldr	r0, [pc, #96]	; (8000f04 <tmc2590_PrintReport+0x90>)
 8000ea4:	f003 fbac 	bl	8004600 <HAL_UART_Transmit>

	for(i = 0; i < SPI_BUFFER_SIZE; i++){
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eac:	e01f      	b.n	8000eee <tmc2590_PrintReport+0x7a>
		stringLength = snprintf(string, 64, "%2d : 0x%2x | 0x%2x\r\n", i, htmc2590->spiTxBuffer[i], htmc2590->spiRxBuffer[i]);
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3314      	adds	r3, #20
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ebe:	4413      	add	r3, r2
 8000ec0:	331e      	adds	r3, #30
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	f107 0008 	add.w	r0, r7, #8
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	9100      	str	r1, [sp, #0]
 8000ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <tmc2590_PrintReport+0x98>)
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	f004 f9df 	bl	8005294 <sniprintf>
 8000ed6:	64b8      	str	r0, [r7, #72]	; 0x48
 		HAL_UART_Transmit(&hlpuart1, string, stringLength, 100);
 8000ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f107 0108 	add.w	r1, r7, #8
 8000ee0:	2364      	movs	r3, #100	; 0x64
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <tmc2590_PrintReport+0x90>)
 8000ee4:	f003 fb8c 	bl	8004600 <HAL_UART_Transmit>
	for(i = 0; i < SPI_BUFFER_SIZE; i++){
 8000ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eea:	3301      	adds	r3, #1
 8000eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ef0:	2b09      	cmp	r3, #9
 8000ef2:	dddc      	ble.n	8000eae <tmc2590_PrintReport+0x3a>
	}


}
 8000ef4:	bf00      	nop
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08005ca8 	.word	0x08005ca8
 8000f04:	200001a0 	.word	0x200001a0
 8000f08:	08005c4c 	.word	0x08005c4c
 8000f0c:	08005c60 	.word	0x08005c60

08000f10 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f16:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <MX_LPUART1_UART_Init+0x90>)
 8000f18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f52:	4812      	ldr	r0, [pc, #72]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f54:	f003 fb04 	bl	8004560 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f5e:	f7ff fc67 	bl	8000830 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f66:	f004 f8cb 	bl	8005100 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f70:	f7ff fc5e 	bl	8000830 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f78:	f004 f900 	bl	800517c <HAL_UARTEx_SetRxFifoThreshold>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f82:	f7ff fc55 	bl	8000830 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_LPUART1_UART_Init+0x8c>)
 8000f88:	f004 f881 	bl	800508e <HAL_UARTEx_DisableFifoMode>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f92:	f7ff fc4d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001a0 	.word	0x200001a0
 8000fa0:	40008000 	.word	0x40008000

08000fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b09e      	sub	sp, #120	; 0x78
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2254      	movs	r2, #84	; 0x54
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 f999 	bl	80052fc <memset>
  if(uartHandle->Instance==LPUART1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1f      	ldr	r2, [pc, #124]	; (800104c <HAL_UART_MspInit+0xa8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d136      	bne.n	8001042 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f94f 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fec:	f7ff fc20 	bl	8000830 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_UART_MspInit+0xac>)
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff4:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_UART_MspInit+0xac>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_MspInit+0xac>)
 8000ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_MspInit+0xac>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_UART_MspInit+0xac>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_UART_MspInit+0xac>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001020:	230c      	movs	r3, #12
 8001022:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001030:	230c      	movs	r3, #12
 8001032:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f000 f949 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	3778      	adds	r7, #120	; 0x78
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40008000 	.word	0x40008000
 8001050:	40021000 	.word	0x40021000

08001054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001056:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0b      	ldr	r4, [pc, #44]	; (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107e:	f7ff fd63 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f004 f949 	bl	8005318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001086:	f7ff fb33 	bl	80006f0 <main>

0800108a <LoopForever>:

LoopForever:
    b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   r0, =_estack
 800108c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001098:	08005d28 	.word	0x08005d28
  ldr r2, =_sbss
 800109c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010a0:	2000037c 	.word	0x2000037c

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>

080010a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f000 f8dc 	bl	800126e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b6:	200f      	movs	r0, #15
 80010b8:	f7ff fc66 	bl	8000988 <HAL_InitTick>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	e001      	b.n	80010cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c8:	f7ff fc3a 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010cc:	79fb      	ldrb	r3, [r7, #7]

}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x1c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x20>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <HAL_IncTick+0x1c>)
 80010e8:	6013      	str	r3, [r2, #0]
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	20000230 	.word	0x20000230
 80010f8:	20000008 	.word	0x20000008

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000230 	.word	0x20000230

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <__NVIC_EnableIRQ+0x38>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff4c 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001292:	f7ff ff63 	bl	800115c <__NVIC_GetPriorityGrouping>
 8001296:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f7ff ffb3 	bl	8001208 <NVIC_EncodePriority>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff82 	bl	80011b4 <__NVIC_SetPriority>
}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff56 	bl	8001178 <__NVIC_EnableIRQ>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012e2:	e15a      	b.n	800159a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 814c 	beq.w	8001594 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d005      	beq.n	8001314 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001310:	2b02      	cmp	r3, #2
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b03      	cmp	r3, #3
 8001380:	d017      	beq.n	80013b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d123      	bne.n	8001406 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	6939      	ldr	r1, [r7, #16]
 8001402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0203 	and.w	r2, r3, #3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80a6 	beq.w	8001594 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001448:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	4a5a      	ldr	r2, [pc, #360]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6613      	str	r3, [r2, #96]	; 0x60
 8001454:	4b58      	ldr	r3, [pc, #352]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 8001456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001460:	4a56      	ldr	r2, [pc, #344]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800148a:	d01f      	beq.n	80014cc <HAL_GPIO_Init+0x1f8>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a4c      	ldr	r2, [pc, #304]	; (80015c0 <HAL_GPIO_Init+0x2ec>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d019      	beq.n	80014c8 <HAL_GPIO_Init+0x1f4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4b      	ldr	r2, [pc, #300]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x1f0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4a      	ldr	r2, [pc, #296]	; (80015c8 <HAL_GPIO_Init+0x2f4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1ec>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a49      	ldr	r2, [pc, #292]	; (80015cc <HAL_GPIO_Init+0x2f8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1e8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a48      	ldr	r2, [pc, #288]	; (80015d0 <HAL_GPIO_Init+0x2fc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1e4>
 80014b4:	2305      	movs	r3, #5
 80014b6:	e00a      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014b8:	2306      	movs	r3, #6
 80014ba:	e008      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014bc:	2304      	movs	r3, #4
 80014be:	e006      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014c0:	2303      	movs	r3, #3
 80014c2:	e004      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014cc:	2300      	movs	r3, #0
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	f002 0203 	and.w	r2, r2, #3
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	4093      	lsls	r3, r2
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014de:	4937      	ldr	r1, [pc, #220]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <HAL_GPIO_Init+0x300>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001510:	4a30      	ldr	r2, [pc, #192]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800153a:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <HAL_GPIO_Init+0x300>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_GPIO_Init+0x300>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f47f ae9d 	bne.w	80012e4 <HAL_GPIO_Init+0x10>
  }
}
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010000 	.word	0x40010000
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800
 80015c8:	48000c00 	.word	0x48000c00
 80015cc:	48001000 	.word	0x48001000
 80015d0:	48001400 	.word	0x48001400
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f806 	bl	8001638 <HAL_GPIO_EXTI_Callback>
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d141      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d131      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2232      	movs	r2, #50	; 0x32
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a2:	e002      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d102      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f2      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d158      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e0:	e04d      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d112      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e011      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e007      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a6:	6093      	str	r3, [r2, #8]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e306      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d075      	beq.n	80018c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4b97      	ldr	r3, [pc, #604]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e0:	4b94      	ldr	r3, [pc, #592]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3e>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_OscConfig+0x44>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	4b8d      	ldr	r3, [pc, #564]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d05b      	beq.n	80018c0 <HAL_RCC_OscConfig+0x108>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d157      	bne.n	80018c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2e1      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x74>
 800181e:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a84      	ldr	r2, [pc, #528]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x98>
 8001836:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a7e      	ldr	r2, [pc, #504]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b7c      	ldr	r3, [pc, #496]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a7b      	ldr	r2, [pc, #492]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xb0>
 8001850:	4b78      	ldr	r3, [pc, #480]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a77      	ldr	r2, [pc, #476]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a74      	ldr	r2, [pc, #464]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fc44 	bl	80010fc <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fc40 	bl	80010fc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2a6      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xc0>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fc30 	bl	80010fc <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fc2c 	bl	80010fc <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e292      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	4b60      	ldr	r3, [pc, #384]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0xe8>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d075      	beq.n	80019ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x136>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_OscConfig+0x13c>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d11f      	bne.n	8001934 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x154>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e265      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	4946      	ldr	r1, [pc, #280]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f82f 	bl	8000988 <HAL_InitTick>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d043      	beq.n	80019b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e251      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800193c:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a3c      	ldr	r2, [pc, #240]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fbd8 	bl	80010fc <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff fbd4 	bl	80010fc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e23a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001962:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	061b      	lsls	r3, r3, #24
 800197c:	492d      	ldr	r1, [pc, #180]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e01a      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 800198a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fbb4 	bl	80010fc <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fbb0 	bl	80010fc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e216      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1e0>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d041      	beq.n	8001a4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff fb8d 	bl	80010fc <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fb89 	bl	80010fc <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1ef      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0ef      	beq.n	80019e6 <HAL_RCC_OscConfig+0x22e>
 8001a06:	e020      	b.n	8001a4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fb70 	bl	80010fc <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a1e:	e00d      	b.n	8001a3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fb6c 	bl	80010fc <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d906      	bls.n	8001a3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1d2      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a3c:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ea      	bne.n	8001a20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80a6 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a5c:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x2b6>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4a7e      	ldr	r2, [pc, #504]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7e:	4b7c      	ldr	r3, [pc, #496]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8e:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_OscConfig+0x4bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x4bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a75      	ldr	r2, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x4bc>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fb29 	bl	80010fc <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff fb25 	bl	80010fc <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e18b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x4bc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d108      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x32e>
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ada:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae4:	e024      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d110      	bne.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001aee:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	4a5e      	ldr	r2, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a5a      	ldr	r2, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x378>
 8001b10:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d016      	beq.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fae0 	bl	80010fc <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fadc 	bl	80010fc <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e140      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ed      	beq.n	8001b40 <HAL_RCC_OscConfig+0x388>
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fac9 	bl	80010fc <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fac5 	bl	80010fc <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e129      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ed      	bne.n	8001b6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a34      	ldr	r2, [pc, #208]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bbe:	4a2c      	ldr	r2, [pc, #176]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fa98 	bl	80010fc <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd0:	f7ff fa94 	bl	80010fc <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0fa      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x418>
 8001bf0:	e01b      	b.n	8001c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff fa7b 	bl	80010fc <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7ff fa77 	bl	80010fc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0dd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ef      	bne.n	8001c0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80d1 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	f000 808b 	beq.w	8001d58 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d15e      	bne.n	8001d08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fa51 	bl	80010fc <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	e00c      	b.n	8001c78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fa4d 	bl	80010fc <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d905      	bls.n	8001c78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0b3      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ec      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c84:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <HAL_RCC_OscConfig+0x62c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6a11      	ldr	r1, [r2, #32]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c94:	3a01      	subs	r2, #1
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c9e:	0212      	lsls	r2, r2, #8
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca6:	0852      	lsrs	r2, r2, #1
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	0552      	lsls	r2, r2, #21
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cb2:	0852      	lsrs	r2, r2, #1
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	0652      	lsls	r2, r2, #25
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cbe:	06d2      	lsls	r2, r2, #27
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	4947      	ldr	r1, [pc, #284]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a44      	ldr	r2, [pc, #272]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4a41      	ldr	r2, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fa0c 	bl	80010fc <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff fa08 	bl	80010fc <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e06e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x530>
 8001d06:	e066      	b.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f9e4 	bl	80010fc <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f9e0 	bl	80010fc <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e046      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x580>
 8001d56:	e03e      	b.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e039      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_RCC_OscConfig+0x628>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d12c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	3b01      	subs	r3, #1
 8001d84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d123      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11b      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d113      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	3b01      	subs	r3, #1
 8001db8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	019f800c 	.word	0x019f800c

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e11e      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b91      	ldr	r3, [pc, #580]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 020f 	bic.w	r2, r3, #15
 8001e16:	498c      	ldr	r1, [pc, #560]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b8a      	ldr	r3, [pc, #552]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e106      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d073      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d129      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0f4      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e54:	f000 f9d0 	bl	80021f8 <RCC_GetSysClockFreqFromPLLSource>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4a7c      	ldr	r2, [pc, #496]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d93f      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d033      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12f      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8a:	4a70      	ldr	r2, [pc, #448]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e024      	b.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0c6      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0be      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ec0:	f000 f8ce 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <HAL_RCC_ClockConfig+0x268>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d909      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed6:	4a5d      	ldr	r2, [pc, #372]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4957      	ldr	r1, [pc, #348]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f902 	bl	80010fc <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f8fe 	bl	80010fc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e095      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f54:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a32      	ldr	r2, [pc, #200]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d21d      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 020f 	bic.w	r2, r3, #15
 8001fa0:	4929      	ldr	r1, [pc, #164]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f8a8 	bl	80010fc <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff f8a4 	bl	80010fc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e03b      	b.n	800203e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1ed      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4917      	ldr	r1, [pc, #92]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002012:	f000 f825 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_ClockConfig+0x264>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490c      	ldr	r1, [pc, #48]	; (8002054 <HAL_RCC_ClockConfig+0x26c>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x270>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x274>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fca6 	bl	8000988 <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	04c4b400 	.word	0x04c4b400
 8002054:	08005c78 	.word	0x08005c78
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d102      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e047      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d102      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e03e      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d136      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020be:	68d2      	ldr	r2, [r2, #12]
 80020c0:	0a12      	lsrs	r2, r2, #8
 80020c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
      break;
 80020cc:	e00c      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	0a12      	lsrs	r2, r2, #8
 80020dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0e5b      	lsrs	r3, r3, #25
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e001      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002108:	693b      	ldr	r3, [r7, #16]
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	00f42400 	.word	0x00f42400
 8002120:	016e3600 	.word	0x016e3600

08002124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_GetHCLKFreq+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000

0800213c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002140:	f7ff fff0 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08005c88 	.word	0x08005c88

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800216c:	f7ff ffda 	bl	8002124 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4904      	ldr	r1, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	08005c88 	.word	0x08005c88

08002194 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	220f      	movs	r2, #15
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0203 	and.w	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_RCC_GetClockConfig+0x60>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 020f 	and.w	r2, r3, #15
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	601a      	str	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40022000 	.word	0x40022000

080021f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3301      	adds	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d10c      	bne.n	8002236 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800221c:	4a17      	ldr	r2, [pc, #92]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002226:	68d2      	ldr	r2, [r2, #12]
 8002228:	0a12      	lsrs	r2, r2, #8
 800222a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	617b      	str	r3, [r7, #20]
    break;
 8002234:	e00c      	b.n	8002250 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002240:	68d2      	ldr	r2, [r2, #12]
 8002242:	0a12      	lsrs	r2, r2, #8
 8002244:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    break;
 800224e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0e5b      	lsrs	r3, r3, #25
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	3301      	adds	r3, #1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800226a:	687b      	ldr	r3, [r7, #4]
}
 800226c:	4618      	mov	r0, r3
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40021000 	.word	0x40021000
 800227c:	016e3600 	.word	0x016e3600
 8002280:	00f42400 	.word	0x00f42400

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800228c:	2300      	movs	r3, #0
 800228e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002290:	2300      	movs	r3, #0
 8002292:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8098 	beq.w	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	4a3f      	ldr	r2, [pc, #252]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	; 0x58
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ce:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022da:	f7fe ff0f 	bl	80010fc <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e0:	e009      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7fe ff0b 	bl	80010fc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d902      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	74fb      	strb	r3, [r7, #19]
        break;
 80022f4:	e005      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ef      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d159      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002312:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01e      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	d019      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002340:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	4a1b      	ldr	r2, [pc, #108]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002350:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fecb 	bl	80010fc <HAL_GetTick>
 8002366:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002368:	e00b      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fec7 	bl	80010fc <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d902      	bls.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	74fb      	strb	r3, [r7, #19]
            break;
 8002380:	e006      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ec      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10b      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ac:	e008      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	74bb      	strb	r3, [r7, #18]
 80023b2:	e005      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c0:	7c7b      	ldrb	r3, [r7, #17]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4ba7      	ldr	r3, [pc, #668]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	4aa6      	ldr	r2, [pc, #664]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023de:	4ba1      	ldr	r3, [pc, #644]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f023 0203 	bic.w	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	499d      	ldr	r1, [pc, #628]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002400:	4b98      	ldr	r3, [pc, #608]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 020c 	bic.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4995      	ldr	r1, [pc, #596]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002422:	4b90      	ldr	r3, [pc, #576]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	498c      	ldr	r1, [pc, #560]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002444:	4b87      	ldr	r3, [pc, #540]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	4984      	ldr	r1, [pc, #528]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002466:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	497b      	ldr	r1, [pc, #492]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002488:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4973      	ldr	r1, [pc, #460]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024aa:	4b6e      	ldr	r3, [pc, #440]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	496a      	ldr	r1, [pc, #424]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024cc:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4962      	ldr	r1, [pc, #392]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ee:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	4959      	ldr	r1, [pc, #356]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002510:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	4951      	ldr	r1, [pc, #324]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002532:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	4948      	ldr	r1, [pc, #288]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002554:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4940      	ldr	r1, [pc, #256]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002572:	d105      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a3a      	ldr	r2, [pc, #232]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002588:	2b00      	cmp	r3, #0
 800258a:	d015      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	4932      	ldr	r1, [pc, #200]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d105      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	4924      	ldr	r1, [pc, #144]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e2:	d105      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d015      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261a:	d105      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d019      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002652:	d109      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a02      	ldr	r2, [pc, #8]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265e:	60d3      	str	r3, [r2, #12]
 8002660:	e002      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d015      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4926      	ldr	r1, [pc, #152]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002692:	d105      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a20      	ldr	r2, [pc, #128]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	4918      	ldr	r1, [pc, #96]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ca:	d105      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002702:	d105      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800270a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002710:	7cbb      	ldrb	r3, [r7, #18]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e09d      	b.n	800286e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002742:	d009      	beq.n	8002758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
 800274a:	e005      	b.n	8002758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe f8a0 	bl	80008b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002798:	d902      	bls.n	80027a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e002      	b.n	80027a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027ae:	d007      	beq.n	80027c0 <HAL_SPI_Init+0xa0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	ea42 0103 	orr.w	r1, r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	f003 0204 	and.w	r2, r3, #4
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800283c:	ea42 0103 	orr.w	r1, r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b08a      	sub	sp, #40	; 0x28
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002884:	2301      	movs	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_SPI_TransmitReceive+0x26>
 8002898:	2302      	movs	r3, #2
 800289a:	e1fb      	b.n	8002c94 <HAL_SPI_TransmitReceive+0x41e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a4:	f7fe fc2a 	bl	80010fc <HAL_GetTick>
 80028a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028c0:	7efb      	ldrb	r3, [r7, #27]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d00e      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x6e>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028cc:	d106      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x66>
 80028d6:	7efb      	ldrb	r3, [r7, #27]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d003      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
 80028de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028e2:	e1cd      	b.n	8002c80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x80>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x80>
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028fc:	e1c0      	b.n	8002c80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b04      	cmp	r3, #4
 8002908:	d003      	beq.n	8002912 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2205      	movs	r2, #5
 800290e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	887a      	ldrh	r2, [r7, #2]
 8002922:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	887a      	ldrh	r2, [r7, #2]
 800292a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	887a      	ldrh	r2, [r7, #2]
 800293e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002954:	d802      	bhi.n	800295c <HAL_SPI_TransmitReceive+0xe6>
 8002956:	8a3b      	ldrh	r3, [r7, #16]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d908      	bls.n	800296e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	e007      	b.n	800297e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d007      	beq.n	800299c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029a4:	d97c      	bls.n	8002aa0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_TransmitReceive+0x13e>
 80029ae:	8a7b      	ldrh	r3, [r7, #18]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d169      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	1c9a      	adds	r2, r3, #2
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d8:	e056      	b.n	8002a88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d11b      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x1aa>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_SPI_TransmitReceive+0x1aa>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d113      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	881a      	ldrh	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	1c9a      	adds	r2, r3, #2
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d11c      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x1f2>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	b292      	uxth	r2, r2
 8002a46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a64:	2301      	movs	r3, #1
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a68:	f7fe fb48 	bl	80010fc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d807      	bhi.n	8002a88 <HAL_SPI_TransmitReceive+0x212>
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7e:	d003      	beq.n	8002a88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a86:	e0fb      	b.n	8002c80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1a3      	bne.n	80029da <HAL_SPI_TransmitReceive+0x164>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d19d      	bne.n	80029da <HAL_SPI_TransmitReceive+0x164>
 8002a9e:	e0df      	b.n	8002c60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x23a>
 8002aa8:	8a7b      	ldrh	r3, [r7, #18]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	f040 80cb 	bne.w	8002c46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d912      	bls.n	8002ae0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	1c9a      	adds	r2, r3, #2
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b02      	subs	r3, #2
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ade:	e0b2      	b.n	8002c46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	7812      	ldrb	r2, [r2, #0]
 8002aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b06:	e09e      	b.n	8002c46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d134      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x30a>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d02f      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x30a>
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d12c      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d912      	bls.n	8002b56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	881a      	ldrh	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	1c9a      	adds	r2, r3, #2
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b02      	subs	r3, #2
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b54:	e012      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d148      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x3aa>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d042      	beq.n	8002c20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d923      	bls.n	8002bee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	1c9a      	adds	r2, r3, #2
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b02      	subs	r3, #2
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d81f      	bhi.n	8002c1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	e016      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f103 020c 	add.w	r2, r3, #12
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c20:	f7fe fa6c 	bl	80010fc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d803      	bhi.n	8002c38 <HAL_SPI_TransmitReceive+0x3c2>
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c36:	d102      	bne.n	8002c3e <HAL_SPI_TransmitReceive+0x3c8>
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c44:	e01c      	b.n	8002c80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f47f af5b 	bne.w	8002b08 <HAL_SPI_TransmitReceive+0x292>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f47f af54 	bne.w	8002b08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f937 	bl	8002ed8 <SPI_EndRxTxTransaction>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	661a      	str	r2, [r3, #96]	; 0x60
 8002c7c:	e000      	b.n	8002c80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002c7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3728      	adds	r7, #40	; 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cac:	f7fe fa26 	bl	80010fc <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cbc:	f7fe fa1e 	bl	80010fc <HAL_GetTick>
 8002cc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	015b      	lsls	r3, r3, #5
 8002cc8:	0d1b      	lsrs	r3, r3, #20
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd2:	e054      	b.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cda:	d050      	beq.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cdc:	f7fe fa0e 	bl	80010fc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d902      	bls.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d13d      	bne.n	8002d6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d0a:	d111      	bne.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d14:	d004      	beq.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1e:	d107      	bne.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d38:	d10f      	bne.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e017      	b.n	8002d9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d19b      	bne.n	8002cd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000000 	.word	0x20000000

08002dac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002dbe:	f7fe f99d 	bl	80010fc <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002dce:	f7fe f995 	bl	80010fc <HAL_GetTick>
 8002dd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ddc:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00da      	lsls	r2, r3, #3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	0d1b      	lsrs	r3, r3, #20
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002df4:	e060      	b.n	8002eb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002dfc:	d107      	bne.n	8002e0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d104      	bne.n	8002e0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e14:	d050      	beq.n	8002eb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e16:	f7fe f971 	bl	80010fc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d902      	bls.n	8002e2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d13d      	bne.n	8002ea8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e44:	d111      	bne.n	8002e6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4e:	d004      	beq.n	8002e5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e58:	d107      	bne.n	8002e6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e72:	d10f      	bne.n	8002e94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e010      	b.n	8002eca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d196      	bne.n	8002df6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3728      	adds	r7, #40	; 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff ff5b 	bl	8002dac <SPI_WaitFifoStateUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e027      	b.n	8002f5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2200      	movs	r2, #0
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff fec0 	bl	8002c9c <SPI_WaitFlagStateUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e014      	b.n	8002f5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff ff34 	bl	8002dac <SPI_WaitFifoStateUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e000      	b.n	8002f5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e049      	b.n	800300a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fea0 	bl	8000cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 fce0 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d001      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e054      	b.n	80030d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d022      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x80>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003056:	d01d      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x80>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d018      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x80>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a21      	ldr	r2, [pc, #132]	; (80030ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d013      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x80>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00e      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x80>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1e      	ldr	r2, [pc, #120]	; (80030f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x80>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d004      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x80>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1b      	ldr	r2, [pc, #108]	; (80030fc <HAL_TIM_Base_Start_IT+0xe8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d115      	bne.n	80030c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_TIM_Base_Start_IT+0xec>)
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d015      	beq.n	80030d2 <HAL_TIM_Base_Start_IT+0xbe>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d011      	beq.n	80030d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	e008      	b.n	80030d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e000      	b.n	80030d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800
 80030f0:	40000c00 	.word	0x40000c00
 80030f4:	40013400 	.word	0x40013400
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40015000 	.word	0x40015000
 8003100:	00010007 	.word	0x00010007

08003104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e049      	b.n	80031aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f841 	bl	80031b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f000 fc10 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d122      	bne.n	8003222 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d11b      	bne.n	8003222 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0202 	mvn.w	r2, #2
 80031f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb8f 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 800320e:	e005      	b.n	800321c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fb81 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fb92 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d122      	bne.n	8003276 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d11b      	bne.n	8003276 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0204 	mvn.w	r2, #4
 8003246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb65 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 8003262:	e005      	b.n	8003270 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fb57 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fb68 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d122      	bne.n	80032ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b08      	cmp	r3, #8
 8003290:	d11b      	bne.n	80032ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0208 	mvn.w	r2, #8
 800329a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2204      	movs	r2, #4
 80032a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fb3b 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 80032b6:	e005      	b.n	80032c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb2d 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fb3e 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d122      	bne.n	800331e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d11b      	bne.n	800331e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0210 	mvn.w	r2, #16
 80032ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2208      	movs	r2, #8
 80032f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb11 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 800330a:	e005      	b.n	8003318 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fb03 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fb14 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10e      	bne.n	800334a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f06f 0201 	mvn.w	r2, #1
 8003342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fd fa61 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003354:	2b80      	cmp	r3, #128	; 0x80
 8003356:	d10e      	bne.n	8003376 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d107      	bne.n	8003376 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800336e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f001 f8b9 	bl	80044e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f001 f8ac 	bl	80044fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fac2 	bl	8003954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0220 	mvn.w	r2, #32
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 f86c 	bl	80044d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340a:	d10f      	bne.n	800342c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341a:	d107      	bne.n	800342c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f001 f872 	bl	8004510 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343a:	d10f      	bne.n	800345c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800344a:	d107      	bne.n	800345c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 f864 	bl	8004524 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346a:	d10f      	bne.n	800348c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347a:	d107      	bne.n	800348c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f001 f856 	bl	8004538 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800349a:	d10f      	bne.n	80034bc <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034aa:	d107      	bne.n	80034bc <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80034b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 f848 	bl	800454c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034de:	2302      	movs	r3, #2
 80034e0:	e0ff      	b.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b14      	cmp	r3, #20
 80034ee:	f200 80f0 	bhi.w	80036d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	080036d3 	.word	0x080036d3
 8003500:	080036d3 	.word	0x080036d3
 8003504:	080036d3 	.word	0x080036d3
 8003508:	0800358d 	.word	0x0800358d
 800350c:	080036d3 	.word	0x080036d3
 8003510:	080036d3 	.word	0x080036d3
 8003514:	080036d3 	.word	0x080036d3
 8003518:	080035cf 	.word	0x080035cf
 800351c:	080036d3 	.word	0x080036d3
 8003520:	080036d3 	.word	0x080036d3
 8003524:	080036d3 	.word	0x080036d3
 8003528:	0800360f 	.word	0x0800360f
 800352c:	080036d3 	.word	0x080036d3
 8003530:	080036d3 	.word	0x080036d3
 8003534:	080036d3 	.word	0x080036d3
 8003538:	08003651 	.word	0x08003651
 800353c:	080036d3 	.word	0x080036d3
 8003540:	080036d3 	.word	0x080036d3
 8003544:	080036d3 	.word	0x080036d3
 8003548:	08003691 	.word	0x08003691
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fab0 	bl	8003ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0208 	orr.w	r2, r2, #8
 8003566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6999      	ldr	r1, [r3, #24]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	619a      	str	r2, [r3, #24]
      break;
 800358a:	e0a5      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fb2a 	bl	8003bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6999      	ldr	r1, [r3, #24]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	619a      	str	r2, [r3, #24]
      break;
 80035cc:	e084      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fb9d 	bl	8003d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0208 	orr.w	r2, r2, #8
 80035e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0204 	bic.w	r2, r2, #4
 80035f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69d9      	ldr	r1, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	61da      	str	r2, [r3, #28]
      break;
 800360c:	e064      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fc0f 	bl	8003e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69d9      	ldr	r1, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	021a      	lsls	r2, r3, #8
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	61da      	str	r2, [r3, #28]
      break;
 800364e:	e043      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fc82 	bl	8003f60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0208 	orr.w	r2, r2, #8
 800366a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800368e:	e023      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fccc 	bl	8004034 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80036d0:	e002      	b.n	80036d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
      break;
 80036d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop

080036ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_TIM_ConfigClockSource+0x1c>
 8003704:	2302      	movs	r3, #2
 8003706:	e0f6      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x20a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800372a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6f      	ldr	r2, [pc, #444]	; (8003900 <HAL_TIM_ConfigClockSource+0x214>)
 8003742:	4293      	cmp	r3, r2
 8003744:	f000 80c1 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003748:	4a6d      	ldr	r2, [pc, #436]	; (8003900 <HAL_TIM_ConfigClockSource+0x214>)
 800374a:	4293      	cmp	r3, r2
 800374c:	f200 80c6 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003750:	4a6c      	ldr	r2, [pc, #432]	; (8003904 <HAL_TIM_ConfigClockSource+0x218>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f000 80b9 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003758:	4a6a      	ldr	r2, [pc, #424]	; (8003904 <HAL_TIM_ConfigClockSource+0x218>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f200 80be 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003760:	4a69      	ldr	r2, [pc, #420]	; (8003908 <HAL_TIM_ConfigClockSource+0x21c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f000 80b1 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003768:	4a67      	ldr	r2, [pc, #412]	; (8003908 <HAL_TIM_ConfigClockSource+0x21c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	f200 80b6 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003770:	4a66      	ldr	r2, [pc, #408]	; (800390c <HAL_TIM_ConfigClockSource+0x220>)
 8003772:	4293      	cmp	r3, r2
 8003774:	f000 80a9 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003778:	4a64      	ldr	r2, [pc, #400]	; (800390c <HAL_TIM_ConfigClockSource+0x220>)
 800377a:	4293      	cmp	r3, r2
 800377c:	f200 80ae 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003780:	4a63      	ldr	r2, [pc, #396]	; (8003910 <HAL_TIM_ConfigClockSource+0x224>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f000 80a1 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003788:	4a61      	ldr	r2, [pc, #388]	; (8003910 <HAL_TIM_ConfigClockSource+0x224>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f200 80a6 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003790:	4a60      	ldr	r2, [pc, #384]	; (8003914 <HAL_TIM_ConfigClockSource+0x228>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f000 8099 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003798:	4a5e      	ldr	r2, [pc, #376]	; (8003914 <HAL_TIM_ConfigClockSource+0x228>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f200 809e 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037a4:	f000 8091 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 80037a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037ac:	f200 8096 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b4:	f000 8089 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 80037b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037bc:	f200 808e 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c4:	d03e      	beq.n	8003844 <HAL_TIM_ConfigClockSource+0x158>
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ca:	f200 8087 	bhi.w	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	f000 8086 	beq.w	80038e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037da:	d87f      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037dc:	2b70      	cmp	r3, #112	; 0x70
 80037de:	d01a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x12a>
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	d87b      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037e4:	2b60      	cmp	r3, #96	; 0x60
 80037e6:	d050      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x19e>
 80037e8:	2b60      	cmp	r3, #96	; 0x60
 80037ea:	d877      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037ec:	2b50      	cmp	r3, #80	; 0x50
 80037ee:	d03c      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x17e>
 80037f0:	2b50      	cmp	r3, #80	; 0x50
 80037f2:	d873      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d058      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1be>
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d86f      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 80037fc:	2b30      	cmp	r3, #48	; 0x30
 80037fe:	d064      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003800:	2b30      	cmp	r3, #48	; 0x30
 8003802:	d86b      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d060      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d867      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05c      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003810:	2b10      	cmp	r3, #16
 8003812:	d05a      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x1de>
 8003814:	e062      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f000 fced 	bl	8004204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	609a      	str	r2, [r3, #8]
      break;
 8003842:	e04f      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f000 fcd6 	bl	8004204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003866:	609a      	str	r2, [r3, #8]
      break;
 8003868:	e03c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 fc48 	bl	800410c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2150      	movs	r1, #80	; 0x50
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fca1 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003888:	e02c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	461a      	mov	r2, r3
 8003898:	f000 fc67 	bl	800416a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2160      	movs	r1, #96	; 0x60
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fc91 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 80038a8:	e01c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f000 fc28 	bl	800410c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fc81 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 80038c8:	e00c      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f000 fc78 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 80038da:	e003      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	e000      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80038e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	00100070 	.word	0x00100070
 8003904:	00100060 	.word	0x00100060
 8003908:	00100050 	.word	0x00100050
 800390c:	00100040 	.word	0x00100040
 8003910:	00100030 	.word	0x00100030
 8003914:	00100020 	.word	0x00100020

08003918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d017      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d013      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00f      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00b      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_Base_SetConfig+0x48>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3f      	ldr	r2, [pc, #252]	; (8003aa8 <TIM_Base_SetConfig+0x140>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d108      	bne.n	80039c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a33      	ldr	r2, [pc, #204]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d023      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d01f      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a30      	ldr	r2, [pc, #192]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2f      	ldr	r2, [pc, #188]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d017      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2d      	ldr	r2, [pc, #180]	; (8003aac <TIM_Base_SetConfig+0x144>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <TIM_Base_SetConfig+0x148>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <TIM_Base_SetConfig+0x14c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0xaa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a26      	ldr	r2, [pc, #152]	; (8003aa8 <TIM_Base_SetConfig+0x140>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00f      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a14      	ldr	r2, [pc, #80]	; (8003aac <TIM_Base_SetConfig+0x144>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <TIM_Base_SetConfig+0x148>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <TIM_Base_SetConfig+0x14c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_Base_SetConfig+0x110>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <TIM_Base_SetConfig+0x140>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d103      	bne.n	8003a80 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	615a      	str	r2, [r3, #20]
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40013400 	.word	0x40013400
 8003aa8:	40015000 	.word	0x40015000
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800

08003ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 0302 	bic.w	r3, r3, #2
 8003b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a30      	ldr	r2, [pc, #192]	; (8003bd4 <TIM_OC1_SetConfig+0x11c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <TIM_OC1_SetConfig+0x88>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <TIM_OC1_SetConfig+0x120>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00f      	beq.n	8003b40 <TIM_OC1_SetConfig+0x88>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a2e      	ldr	r2, [pc, #184]	; (8003bdc <TIM_OC1_SetConfig+0x124>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00b      	beq.n	8003b40 <TIM_OC1_SetConfig+0x88>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a2d      	ldr	r2, [pc, #180]	; (8003be0 <TIM_OC1_SetConfig+0x128>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d007      	beq.n	8003b40 <TIM_OC1_SetConfig+0x88>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <TIM_OC1_SetConfig+0x12c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_OC1_SetConfig+0x88>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a2b      	ldr	r2, [pc, #172]	; (8003be8 <TIM_OC1_SetConfig+0x130>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d10c      	bne.n	8003b5a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0308 	bic.w	r3, r3, #8
 8003b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <TIM_OC1_SetConfig+0x11c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <TIM_OC1_SetConfig+0xd2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <TIM_OC1_SetConfig+0x120>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00f      	beq.n	8003b8a <TIM_OC1_SetConfig+0xd2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <TIM_OC1_SetConfig+0x124>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_OC1_SetConfig+0xd2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <TIM_OC1_SetConfig+0x128>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_OC1_SetConfig+0xd2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <TIM_OC1_SetConfig+0x12c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_OC1_SetConfig+0xd2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <TIM_OC1_SetConfig+0x130>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d111      	bne.n	8003bae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	621a      	str	r2, [r3, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40013400 	.word	0x40013400
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800
 8003be8:	40015000 	.word	0x40015000

08003bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f023 0210 	bic.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0320 	bic.w	r3, r3, #32
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a2c      	ldr	r2, [pc, #176]	; (8003cfc <TIM_OC2_SetConfig+0x110>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_OC2_SetConfig+0x74>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a2b      	ldr	r2, [pc, #172]	; (8003d00 <TIM_OC2_SetConfig+0x114>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_OC2_SetConfig+0x74>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <TIM_OC2_SetConfig+0x118>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d10d      	bne.n	8003c7c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <TIM_OC2_SetConfig+0x110>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <TIM_OC2_SetConfig+0xc0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <TIM_OC2_SetConfig+0x114>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00f      	beq.n	8003cac <TIM_OC2_SetConfig+0xc0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <TIM_OC2_SetConfig+0x11c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00b      	beq.n	8003cac <TIM_OC2_SetConfig+0xc0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <TIM_OC2_SetConfig+0x120>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_OC2_SetConfig+0xc0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <TIM_OC2_SetConfig+0x124>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_OC2_SetConfig+0xc0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <TIM_OC2_SetConfig+0x118>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d113      	bne.n	8003cd4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40015000 	.word	0x40015000
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800

08003d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <TIM_OC3_SetConfig+0x10c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_OC3_SetConfig+0x72>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <TIM_OC3_SetConfig+0x110>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_OC3_SetConfig+0x72>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <TIM_OC3_SetConfig+0x114>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10d      	bne.n	8003da2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <TIM_OC3_SetConfig+0x10c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <TIM_OC3_SetConfig+0xbe>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <TIM_OC3_SetConfig+0x110>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00f      	beq.n	8003dd2 <TIM_OC3_SetConfig+0xbe>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <TIM_OC3_SetConfig+0x118>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_OC3_SetConfig+0xbe>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <TIM_OC3_SetConfig+0x11c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_OC3_SetConfig+0xbe>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <TIM_OC3_SetConfig+0x120>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC3_SetConfig+0xbe>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <TIM_OC3_SetConfig+0x114>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d113      	bne.n	8003dfa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40013400 	.word	0x40013400
 8003e28:	40015000 	.word	0x40015000
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800

08003e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	031b      	lsls	r3, r3, #12
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a2c      	ldr	r2, [pc, #176]	; (8003f48 <TIM_OC4_SetConfig+0x110>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_OC4_SetConfig+0x74>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a2b      	ldr	r2, [pc, #172]	; (8003f4c <TIM_OC4_SetConfig+0x114>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC4_SetConfig+0x74>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a2a      	ldr	r2, [pc, #168]	; (8003f50 <TIM_OC4_SetConfig+0x118>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10d      	bne.n	8003ec8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	031b      	lsls	r3, r3, #12
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <TIM_OC4_SetConfig+0x110>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <TIM_OC4_SetConfig+0xc0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <TIM_OC4_SetConfig+0x114>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_OC4_SetConfig+0xc0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <TIM_OC4_SetConfig+0x11c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <TIM_OC4_SetConfig+0xc0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <TIM_OC4_SetConfig+0x120>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_OC4_SetConfig+0xc0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <TIM_OC4_SetConfig+0x124>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_OC4_SetConfig+0xc0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <TIM_OC4_SetConfig+0x118>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d113      	bne.n	8003f20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	bf00      	nop
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40013400 	.word	0x40013400
 8003f50:	40015000 	.word	0x40015000
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800

08003f60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <TIM_OC5_SetConfig+0xbc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x82>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <TIM_OC5_SetConfig+0xc0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x82>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	; (8004024 <TIM_OC5_SetConfig+0xc4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x82>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	; (8004028 <TIM_OC5_SetConfig+0xc8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x82>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <TIM_OC5_SetConfig+0xcc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x82>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a14      	ldr	r2, [pc, #80]	; (8004030 <TIM_OC5_SetConfig+0xd0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d109      	bne.n	8003ff6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40013400 	.word	0x40013400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800
 8004030:	40015000 	.word	0x40015000

08004034 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800407a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	051b      	lsls	r3, r3, #20
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <TIM_OC6_SetConfig+0xc0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <TIM_OC6_SetConfig+0x84>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <TIM_OC6_SetConfig+0xc4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00f      	beq.n	80040b8 <TIM_OC6_SetConfig+0x84>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a18      	ldr	r2, [pc, #96]	; (80040fc <TIM_OC6_SetConfig+0xc8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00b      	beq.n	80040b8 <TIM_OC6_SetConfig+0x84>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a17      	ldr	r2, [pc, #92]	; (8004100 <TIM_OC6_SetConfig+0xcc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <TIM_OC6_SetConfig+0x84>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a16      	ldr	r2, [pc, #88]	; (8004104 <TIM_OC6_SetConfig+0xd0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_OC6_SetConfig+0x84>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a15      	ldr	r2, [pc, #84]	; (8004108 <TIM_OC6_SetConfig+0xd4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d109      	bne.n	80040cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40013400 	.word	0x40013400
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800
 8004108:	40015000 	.word	0x40015000

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f043 0307 	orr.w	r3, r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	431a      	orrs	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004258:	2302      	movs	r3, #2
 800425a:	e074      	b.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a34      	ldr	r2, [pc, #208]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a33      	ldr	r2, [pc, #204]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a31      	ldr	r2, [pc, #196]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a21      	ldr	r2, [pc, #132]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d022      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d01d      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d018      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10c      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40013400 	.word	0x40013400
 800435c:	40015000 	.word	0x40015000
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40014000 	.word	0x40014000

08004370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004388:	2302      	movs	r3, #2
 800438a:	e096      	b.n	80044ba <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2d      	ldr	r2, [pc, #180]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2c      	ldr	r2, [pc, #176]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d106      	bne.n	8004432 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d12b      	bne.n	80044a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	051b      	lsls	r3, r3, #20
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a10      	ldr	r2, [pc, #64]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d106      	bne.n	80044a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40015000 	.word	0x40015000

080044d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e042      	b.n	80045f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fc fd0d 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2224      	movs	r2, #36	; 0x24
 800458e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8c2 	bl	800472c <UART_SetConfig>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e022      	b.n	80045f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fbb2 	bl	8004d24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fc39 	bl	8004e68 <UART_CheckIdleState>
 80045f6:	4603      	mov	r3, r0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004616:	2b20      	cmp	r3, #32
 8004618:	f040 8083 	bne.w	8004722 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Transmit+0x28>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e07b      	b.n	8004724 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_UART_Transmit+0x3a>
 8004636:	2302      	movs	r3, #2
 8004638:	e074      	b.n	8004724 <HAL_UART_Transmit+0x124>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2221      	movs	r2, #33	; 0x21
 800464e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004652:	f7fc fd53 	bl	80010fc <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004670:	d108      	bne.n	8004684 <HAL_UART_Transmit+0x84>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d104      	bne.n	8004684 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e003      	b.n	800468c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004694:	e02c      	b.n	80046f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	2180      	movs	r1, #128	; 0x80
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fc2c 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e039      	b.n	8004724 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	3302      	adds	r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	e007      	b.n	80046de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	781a      	ldrb	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	3301      	adds	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1cc      	bne.n	8004696 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2200      	movs	r2, #0
 8004704:	2140      	movs	r1, #64	; 0x40
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fbf9 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e006      	b.n	8004724 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e000      	b.n	8004724 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004722:	2302      	movs	r3, #2
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	3720      	adds	r7, #32
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800472c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004730:	b08c      	sub	sp, #48	; 0x30
 8004732:	af00      	add	r7, sp, #0
 8004734:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	431a      	orrs	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	431a      	orrs	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	4313      	orrs	r3, r2
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4baa      	ldr	r3, [pc, #680]	; (8004a04 <UART_SetConfig+0x2d8>)
 800475c:	4013      	ands	r3, r2
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004764:	430b      	orrs	r3, r1
 8004766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a9f      	ldr	r2, [pc, #636]	; (8004a08 <UART_SetConfig+0x2dc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004794:	4313      	orrs	r3, r2
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	f023 010f 	bic.w	r1, r3, #15
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a90      	ldr	r2, [pc, #576]	; (8004a0c <UART_SetConfig+0x2e0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d125      	bne.n	800481c <UART_SetConfig+0xf0>
 80047d0:	4b8f      	ldr	r3, [pc, #572]	; (8004a10 <UART_SetConfig+0x2e4>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d81a      	bhi.n	8004814 <UART_SetConfig+0xe8>
 80047de:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <UART_SetConfig+0xb8>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	080047f5 	.word	0x080047f5
 80047e8:	08004805 	.word	0x08004805
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	0800480d 	.word	0x0800480d
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fa:	e116      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80047fc:	2302      	movs	r3, #2
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e112      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004804:	2304      	movs	r3, #4
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480a:	e10e      	b.n	8004a2a <UART_SetConfig+0x2fe>
 800480c:	2308      	movs	r3, #8
 800480e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004812:	e10a      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004814:	2310      	movs	r3, #16
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800481a:	e106      	b.n	8004a2a <UART_SetConfig+0x2fe>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a7c      	ldr	r2, [pc, #496]	; (8004a14 <UART_SetConfig+0x2e8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d138      	bne.n	8004898 <UART_SetConfig+0x16c>
 8004826:	4b7a      	ldr	r3, [pc, #488]	; (8004a10 <UART_SetConfig+0x2e4>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d82d      	bhi.n	8004890 <UART_SetConfig+0x164>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <UART_SetConfig+0x110>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004871 	.word	0x08004871
 8004840:	08004891 	.word	0x08004891
 8004844:	08004891 	.word	0x08004891
 8004848:	08004891 	.word	0x08004891
 800484c:	08004881 	.word	0x08004881
 8004850:	08004891 	.word	0x08004891
 8004854:	08004891 	.word	0x08004891
 8004858:	08004891 	.word	0x08004891
 800485c:	08004879 	.word	0x08004879
 8004860:	08004891 	.word	0x08004891
 8004864:	08004891 	.word	0x08004891
 8004868:	08004891 	.word	0x08004891
 800486c:	08004889 	.word	0x08004889
 8004870:	2300      	movs	r3, #0
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e0d8      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004878:	2302      	movs	r3, #2
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487e:	e0d4      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004880:	2304      	movs	r3, #4
 8004882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004886:	e0d0      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004888:	2308      	movs	r3, #8
 800488a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488e:	e0cc      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004890:	2310      	movs	r3, #16
 8004892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004896:	e0c8      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a5e      	ldr	r2, [pc, #376]	; (8004a18 <UART_SetConfig+0x2ec>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d125      	bne.n	80048ee <UART_SetConfig+0x1c2>
 80048a2:	4b5b      	ldr	r3, [pc, #364]	; (8004a10 <UART_SetConfig+0x2e4>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ac:	2b30      	cmp	r3, #48	; 0x30
 80048ae:	d016      	beq.n	80048de <UART_SetConfig+0x1b2>
 80048b0:	2b30      	cmp	r3, #48	; 0x30
 80048b2:	d818      	bhi.n	80048e6 <UART_SetConfig+0x1ba>
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d00a      	beq.n	80048ce <UART_SetConfig+0x1a2>
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d814      	bhi.n	80048e6 <UART_SetConfig+0x1ba>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <UART_SetConfig+0x19a>
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d008      	beq.n	80048d6 <UART_SetConfig+0x1aa>
 80048c4:	e00f      	b.n	80048e6 <UART_SetConfig+0x1ba>
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048cc:	e0ad      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80048ce:	2302      	movs	r3, #2
 80048d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d4:	e0a9      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80048d6:	2304      	movs	r3, #4
 80048d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048dc:	e0a5      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80048de:	2308      	movs	r3, #8
 80048e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e4:	e0a1      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80048e6:	2310      	movs	r3, #16
 80048e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ec:	e09d      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <UART_SetConfig+0x2f0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d125      	bne.n	8004944 <UART_SetConfig+0x218>
 80048f8:	4b45      	ldr	r3, [pc, #276]	; (8004a10 <UART_SetConfig+0x2e4>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004902:	2bc0      	cmp	r3, #192	; 0xc0
 8004904:	d016      	beq.n	8004934 <UART_SetConfig+0x208>
 8004906:	2bc0      	cmp	r3, #192	; 0xc0
 8004908:	d818      	bhi.n	800493c <UART_SetConfig+0x210>
 800490a:	2b80      	cmp	r3, #128	; 0x80
 800490c:	d00a      	beq.n	8004924 <UART_SetConfig+0x1f8>
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d814      	bhi.n	800493c <UART_SetConfig+0x210>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <UART_SetConfig+0x1f0>
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d008      	beq.n	800492c <UART_SetConfig+0x200>
 800491a:	e00f      	b.n	800493c <UART_SetConfig+0x210>
 800491c:	2300      	movs	r3, #0
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004922:	e082      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004924:	2302      	movs	r3, #2
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492a:	e07e      	b.n	8004a2a <UART_SetConfig+0x2fe>
 800492c:	2304      	movs	r3, #4
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004932:	e07a      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004934:	2308      	movs	r3, #8
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493a:	e076      	b.n	8004a2a <UART_SetConfig+0x2fe>
 800493c:	2310      	movs	r3, #16
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004942:	e072      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a35      	ldr	r2, [pc, #212]	; (8004a20 <UART_SetConfig+0x2f4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d12a      	bne.n	80049a4 <UART_SetConfig+0x278>
 800494e:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <UART_SetConfig+0x2e4>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800495c:	d01a      	beq.n	8004994 <UART_SetConfig+0x268>
 800495e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004962:	d81b      	bhi.n	800499c <UART_SetConfig+0x270>
 8004964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004968:	d00c      	beq.n	8004984 <UART_SetConfig+0x258>
 800496a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496e:	d815      	bhi.n	800499c <UART_SetConfig+0x270>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <UART_SetConfig+0x250>
 8004974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004978:	d008      	beq.n	800498c <UART_SetConfig+0x260>
 800497a:	e00f      	b.n	800499c <UART_SetConfig+0x270>
 800497c:	2300      	movs	r3, #0
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004982:	e052      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004984:	2302      	movs	r3, #2
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498a:	e04e      	b.n	8004a2a <UART_SetConfig+0x2fe>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004992:	e04a      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499a:	e046      	b.n	8004a2a <UART_SetConfig+0x2fe>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e042      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <UART_SetConfig+0x2dc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d13a      	bne.n	8004a24 <UART_SetConfig+0x2f8>
 80049ae:	4b18      	ldr	r3, [pc, #96]	; (8004a10 <UART_SetConfig+0x2e4>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049bc:	d01a      	beq.n	80049f4 <UART_SetConfig+0x2c8>
 80049be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c2:	d81b      	bhi.n	80049fc <UART_SetConfig+0x2d0>
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c8:	d00c      	beq.n	80049e4 <UART_SetConfig+0x2b8>
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ce:	d815      	bhi.n	80049fc <UART_SetConfig+0x2d0>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <UART_SetConfig+0x2b0>
 80049d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d8:	d008      	beq.n	80049ec <UART_SetConfig+0x2c0>
 80049da:	e00f      	b.n	80049fc <UART_SetConfig+0x2d0>
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e2:	e022      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ea:	e01e      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f2:	e01a      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fa:	e016      	b.n	8004a2a <UART_SetConfig+0x2fe>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a02:	e012      	b.n	8004a2a <UART_SetConfig+0x2fe>
 8004a04:	cfff69f3 	.word	0xcfff69f3
 8004a08:	40008000 	.word	0x40008000
 8004a0c:	40013800 	.word	0x40013800
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40004400 	.word	0x40004400
 8004a18:	40004800 	.word	0x40004800
 8004a1c:	40004c00 	.word	0x40004c00
 8004a20:	40005000 	.word	0x40005000
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4aae      	ldr	r2, [pc, #696]	; (8004ce8 <UART_SetConfig+0x5bc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	f040 8097 	bne.w	8004b64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d823      	bhi.n	8004a86 <UART_SetConfig+0x35a>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0x318>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a87 	.word	0x08004a87
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a87 	.word	0x08004a87
 8004a54:	08004a77 	.word	0x08004a77
 8004a58:	08004a87 	.word	0x08004a87
 8004a5c:	08004a87 	.word	0x08004a87
 8004a60:	08004a87 	.word	0x08004a87
 8004a64:	08004a7f 	.word	0x08004a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a68:	f7fd fb68 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8004a6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a6e:	e010      	b.n	8004a92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a70:	4b9e      	ldr	r3, [pc, #632]	; (8004cec <UART_SetConfig+0x5c0>)
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a74:	e00d      	b.n	8004a92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fd faf3 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a7c:	e009      	b.n	8004a92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a84:	e005      	b.n	8004a92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8130 	beq.w	8004cfa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	4a94      	ldr	r2, [pc, #592]	; (8004cf0 <UART_SetConfig+0x5c4>)
 8004aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d305      	bcc.n	8004aca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d903      	bls.n	8004ad2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ad0:	e113      	b.n	8004cfa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	60fa      	str	r2, [r7, #12]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	4a84      	ldr	r2, [pc, #528]	; (8004cf0 <UART_SetConfig+0x5c4>)
 8004ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004af4:	f7fb fbe4 	bl	80002c0 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	020b      	lsls	r3, r1, #8
 8004b0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b0e:	0202      	lsls	r2, r0, #8
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	6849      	ldr	r1, [r1, #4]
 8004b14:	0849      	lsrs	r1, r1, #1
 8004b16:	2000      	movs	r0, #0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	eb12 0804 	adds.w	r8, r2, r4
 8004b20:	eb43 0905 	adc.w	r9, r3, r5
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	469a      	mov	sl, r3
 8004b2c:	4693      	mov	fp, r2
 8004b2e:	4652      	mov	r2, sl
 8004b30:	465b      	mov	r3, fp
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f7fb fbc3 	bl	80002c0 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4613      	mov	r3, r2
 8004b40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b48:	d308      	bcc.n	8004b5c <UART_SetConfig+0x430>
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b50:	d204      	bcs.n	8004b5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6a3a      	ldr	r2, [r7, #32]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	e0ce      	b.n	8004cfa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b62:	e0ca      	b.n	8004cfa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6c:	d166      	bne.n	8004c3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d827      	bhi.n	8004bc6 <UART_SetConfig+0x49a>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0x450>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb7 	.word	0x08004bb7
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fd facc 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8004ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ba6:	e014      	b.n	8004bd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fd fade 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b4e      	ldr	r3, [pc, #312]	; (8004cec <UART_SetConfig+0x5c0>)
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fd fa53 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8004bba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8090 	beq.w	8004cfa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	4a44      	ldr	r2, [pc, #272]	; (8004cf0 <UART_SetConfig+0x5c4>)
 8004be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be4:	461a      	mov	r2, r3
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bec:	005a      	lsls	r2, r3, #1
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	441a      	add	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d916      	bls.n	8004c34 <UART_SetConfig+0x508>
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d212      	bcs.n	8004c34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f023 030f 	bic.w	r3, r3, #15
 8004c16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	8bfb      	ldrh	r3, [r7, #30]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	8bfa      	ldrh	r2, [r7, #30]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e062      	b.n	8004cfa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c3a:	e05e      	b.n	8004cfa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d828      	bhi.n	8004c96 <UART_SetConfig+0x56a>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x520>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c79 	.word	0x08004c79
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	08004c97 	.word	0x08004c97
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004c97 	.word	0x08004c97
 8004c68:	08004c97 	.word	0x08004c97
 8004c6c:	08004c8f 	.word	0x08004c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7fd fa64 	bl	800213c <HAL_RCC_GetPCLK1Freq>
 8004c74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c76:	e014      	b.n	8004ca2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c78:	f7fd fa76 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8004c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c7e:	e010      	b.n	8004ca2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <UART_SetConfig+0x5c0>)
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c84:	e00d      	b.n	8004ca2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c86:	f7fd f9eb 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c8c:	e009      	b.n	8004ca2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c94:	e005      	b.n	8004ca2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d028      	beq.n	8004cfa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <UART_SetConfig+0x5c4>)
 8004cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	441a      	add	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d910      	bls.n	8004cf4 <UART_SetConfig+0x5c8>
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd8:	d20c      	bcs.n	8004cf4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60da      	str	r2, [r3, #12]
 8004ce4:	e009      	b.n	8004cfa <UART_SetConfig+0x5ce>
 8004ce6:	bf00      	nop
 8004ce8:	40008000 	.word	0x40008000
 8004cec:	00f42400 	.word	0x00f42400
 8004cf0:	08005cbc 	.word	0x08005cbc
      }
      else
      {
        ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004d16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3730      	adds	r7, #48	; 0x30
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e22:	d10a      	bne.n	8004e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e78:	f7fc f940 	bl	80010fc <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d10e      	bne.n	8004eaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f82f 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e025      	b.n	8004ef6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d10e      	bne.n	8004ed6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f819 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e00f      	b.n	8004ef6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b09c      	sub	sp, #112	; 0x70
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0e:	e0a9      	b.n	8005064 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f16:	f000 80a5 	beq.w	8005064 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fc f8ef 	bl	80010fc <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d140      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f44:	667b      	str	r3, [r7, #100]	; 0x64
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e6      	bne.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3308      	adds	r3, #8
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e5      	bne.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e069      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d051      	beq.n	8005064 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d149      	bne.n	8005064 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3308      	adds	r3, #8
 8005012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	613b      	str	r3, [r7, #16]
   return(result);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	66bb      	str	r3, [r7, #104]	; 0x68
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3308      	adds	r3, #8
 800502a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800502c:	623a      	str	r2, [r7, #32]
 800502e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	69f9      	ldr	r1, [r7, #28]
 8005032:	6a3a      	ldr	r2, [r7, #32]
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	61bb      	str	r3, [r7, #24]
   return(result);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e5      	bne.n	800500c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e010      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	429a      	cmp	r2, r3
 8005080:	f43f af46 	beq.w	8004f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3770      	adds	r7, #112	; 0x70
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e027      	b.n	80050f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2224      	movs	r2, #36	; 0x24
 80050b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e02d      	b.n	8005174 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2224      	movs	r2, #36	; 0x24
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f84f 	bl	80051f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e02d      	b.n	80051f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f811 	bl	80051f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005204:	2b00      	cmp	r3, #0
 8005206:	d108      	bne.n	800521a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005218:	e031      	b.n	800527e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800521a:	2308      	movs	r3, #8
 800521c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800521e:	2308      	movs	r3, #8
 8005220:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	0e5b      	lsrs	r3, r3, #25
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	0f5b      	lsrs	r3, r3, #29
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	7b3a      	ldrb	r2, [r7, #12]
 8005246:	4911      	ldr	r1, [pc, #68]	; (800528c <UARTEx_SetNbDataToProcess+0x94>)
 8005248:	5c8a      	ldrb	r2, [r1, r2]
 800524a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800524e:	7b3a      	ldrb	r2, [r7, #12]
 8005250:	490f      	ldr	r1, [pc, #60]	; (8005290 <UARTEx_SetNbDataToProcess+0x98>)
 8005252:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005254:	fb93 f3f2 	sdiv	r3, r3, r2
 8005258:	b29a      	uxth	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	7b7a      	ldrb	r2, [r7, #13]
 8005264:	4909      	ldr	r1, [pc, #36]	; (800528c <UARTEx_SetNbDataToProcess+0x94>)
 8005266:	5c8a      	ldrb	r2, [r1, r2]
 8005268:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800526c:	7b7a      	ldrb	r2, [r7, #13]
 800526e:	4908      	ldr	r1, [pc, #32]	; (8005290 <UARTEx_SetNbDataToProcess+0x98>)
 8005270:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005272:	fb93 f3f2 	sdiv	r3, r3, r2
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	08005cd4 	.word	0x08005cd4
 8005290:	08005cdc 	.word	0x08005cdc

08005294 <sniprintf>:
 8005294:	b40c      	push	{r2, r3}
 8005296:	b530      	push	{r4, r5, lr}
 8005298:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <sniprintf+0x64>)
 800529a:	1e0c      	subs	r4, r1, #0
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	b09d      	sub	sp, #116	; 0x74
 80052a0:	da08      	bge.n	80052b4 <sniprintf+0x20>
 80052a2:	238b      	movs	r3, #139	; 0x8b
 80052a4:	602b      	str	r3, [r5, #0]
 80052a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052aa:	b01d      	add	sp, #116	; 0x74
 80052ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052b0:	b002      	add	sp, #8
 80052b2:	4770      	bx	lr
 80052b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80052b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052bc:	bf14      	ite	ne
 80052be:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80052c2:	4623      	moveq	r3, r4
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	9307      	str	r3, [sp, #28]
 80052c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052cc:	9002      	str	r0, [sp, #8]
 80052ce:	9006      	str	r0, [sp, #24]
 80052d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052d6:	ab21      	add	r3, sp, #132	; 0x84
 80052d8:	a902      	add	r1, sp, #8
 80052da:	4628      	mov	r0, r5
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	f000 f9a1 	bl	8005624 <_svfiprintf_r>
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	bfbc      	itt	lt
 80052e6:	238b      	movlt	r3, #139	; 0x8b
 80052e8:	602b      	strlt	r3, [r5, #0]
 80052ea:	2c00      	cmp	r4, #0
 80052ec:	d0dd      	beq.n	80052aa <sniprintf+0x16>
 80052ee:	9b02      	ldr	r3, [sp, #8]
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e7d9      	b.n	80052aa <sniprintf+0x16>
 80052f6:	bf00      	nop
 80052f8:	20000058 	.word	0x20000058

080052fc <memset>:
 80052fc:	4402      	add	r2, r0
 80052fe:	4603      	mov	r3, r0
 8005300:	4293      	cmp	r3, r2
 8005302:	d100      	bne.n	8005306 <memset+0xa>
 8005304:	4770      	bx	lr
 8005306:	f803 1b01 	strb.w	r1, [r3], #1
 800530a:	e7f9      	b.n	8005300 <memset+0x4>

0800530c <__errno>:
 800530c:	4b01      	ldr	r3, [pc, #4]	; (8005314 <__errno+0x8>)
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000058 	.word	0x20000058

08005318 <__libc_init_array>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4d0d      	ldr	r5, [pc, #52]	; (8005350 <__libc_init_array+0x38>)
 800531c:	4c0d      	ldr	r4, [pc, #52]	; (8005354 <__libc_init_array+0x3c>)
 800531e:	1b64      	subs	r4, r4, r5
 8005320:	10a4      	asrs	r4, r4, #2
 8005322:	2600      	movs	r6, #0
 8005324:	42a6      	cmp	r6, r4
 8005326:	d109      	bne.n	800533c <__libc_init_array+0x24>
 8005328:	4d0b      	ldr	r5, [pc, #44]	; (8005358 <__libc_init_array+0x40>)
 800532a:	4c0c      	ldr	r4, [pc, #48]	; (800535c <__libc_init_array+0x44>)
 800532c:	f000 fc6a 	bl	8005c04 <_init>
 8005330:	1b64      	subs	r4, r4, r5
 8005332:	10a4      	asrs	r4, r4, #2
 8005334:	2600      	movs	r6, #0
 8005336:	42a6      	cmp	r6, r4
 8005338:	d105      	bne.n	8005346 <__libc_init_array+0x2e>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005340:	4798      	blx	r3
 8005342:	3601      	adds	r6, #1
 8005344:	e7ee      	b.n	8005324 <__libc_init_array+0xc>
 8005346:	f855 3b04 	ldr.w	r3, [r5], #4
 800534a:	4798      	blx	r3
 800534c:	3601      	adds	r6, #1
 800534e:	e7f2      	b.n	8005336 <__libc_init_array+0x1e>
 8005350:	08005d20 	.word	0x08005d20
 8005354:	08005d20 	.word	0x08005d20
 8005358:	08005d20 	.word	0x08005d20
 800535c:	08005d24 	.word	0x08005d24

08005360 <__retarget_lock_acquire_recursive>:
 8005360:	4770      	bx	lr

08005362 <__retarget_lock_release_recursive>:
 8005362:	4770      	bx	lr

08005364 <memcpy>:
 8005364:	440a      	add	r2, r1
 8005366:	4291      	cmp	r1, r2
 8005368:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800536c:	d100      	bne.n	8005370 <memcpy+0xc>
 800536e:	4770      	bx	lr
 8005370:	b510      	push	{r4, lr}
 8005372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800537a:	4291      	cmp	r1, r2
 800537c:	d1f9      	bne.n	8005372 <memcpy+0xe>
 800537e:	bd10      	pop	{r4, pc}

08005380 <_free_r>:
 8005380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	d044      	beq.n	8005410 <_free_r+0x90>
 8005386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f1a1 0404 	sub.w	r4, r1, #4
 8005392:	bfb8      	it	lt
 8005394:	18e4      	addlt	r4, r4, r3
 8005396:	f000 f8df 	bl	8005558 <__malloc_lock>
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <_free_r+0x94>)
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	b933      	cbnz	r3, 80053b0 <_free_r+0x30>
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ac:	f000 b8da 	b.w	8005564 <__malloc_unlock>
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d908      	bls.n	80053c6 <_free_r+0x46>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf01      	itttt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	1949      	addeq	r1, r1, r5
 80053c2:	6021      	streq	r1, [r4, #0]
 80053c4:	e7ed      	b.n	80053a2 <_free_r+0x22>
 80053c6:	461a      	mov	r2, r3
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b10b      	cbz	r3, 80053d0 <_free_r+0x50>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d9fa      	bls.n	80053c6 <_free_r+0x46>
 80053d0:	6811      	ldr	r1, [r2, #0]
 80053d2:	1855      	adds	r5, r2, r1
 80053d4:	42a5      	cmp	r5, r4
 80053d6:	d10b      	bne.n	80053f0 <_free_r+0x70>
 80053d8:	6824      	ldr	r4, [r4, #0]
 80053da:	4421      	add	r1, r4
 80053dc:	1854      	adds	r4, r2, r1
 80053de:	42a3      	cmp	r3, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	d1e0      	bne.n	80053a6 <_free_r+0x26>
 80053e4:	681c      	ldr	r4, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	6053      	str	r3, [r2, #4]
 80053ea:	440c      	add	r4, r1
 80053ec:	6014      	str	r4, [r2, #0]
 80053ee:	e7da      	b.n	80053a6 <_free_r+0x26>
 80053f0:	d902      	bls.n	80053f8 <_free_r+0x78>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	e7d6      	b.n	80053a6 <_free_r+0x26>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	1961      	adds	r1, r4, r5
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf04      	itt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	bf04      	itt	eq
 8005408:	1949      	addeq	r1, r1, r5
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	6054      	str	r4, [r2, #4]
 800540e:	e7ca      	b.n	80053a6 <_free_r+0x26>
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	20000374 	.word	0x20000374

08005418 <sbrk_aligned>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4e0e      	ldr	r6, [pc, #56]	; (8005454 <sbrk_aligned+0x3c>)
 800541c:	460c      	mov	r4, r1
 800541e:	6831      	ldr	r1, [r6, #0]
 8005420:	4605      	mov	r5, r0
 8005422:	b911      	cbnz	r1, 800542a <sbrk_aligned+0x12>
 8005424:	f000 fba6 	bl	8005b74 <_sbrk_r>
 8005428:	6030      	str	r0, [r6, #0]
 800542a:	4621      	mov	r1, r4
 800542c:	4628      	mov	r0, r5
 800542e:	f000 fba1 	bl	8005b74 <_sbrk_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d00a      	beq.n	800544c <sbrk_aligned+0x34>
 8005436:	1cc4      	adds	r4, r0, #3
 8005438:	f024 0403 	bic.w	r4, r4, #3
 800543c:	42a0      	cmp	r0, r4
 800543e:	d007      	beq.n	8005450 <sbrk_aligned+0x38>
 8005440:	1a21      	subs	r1, r4, r0
 8005442:	4628      	mov	r0, r5
 8005444:	f000 fb96 	bl	8005b74 <_sbrk_r>
 8005448:	3001      	adds	r0, #1
 800544a:	d101      	bne.n	8005450 <sbrk_aligned+0x38>
 800544c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005450:	4620      	mov	r0, r4
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	20000378 	.word	0x20000378

08005458 <_malloc_r>:
 8005458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800545c:	1ccd      	adds	r5, r1, #3
 800545e:	f025 0503 	bic.w	r5, r5, #3
 8005462:	3508      	adds	r5, #8
 8005464:	2d0c      	cmp	r5, #12
 8005466:	bf38      	it	cc
 8005468:	250c      	movcc	r5, #12
 800546a:	2d00      	cmp	r5, #0
 800546c:	4607      	mov	r7, r0
 800546e:	db01      	blt.n	8005474 <_malloc_r+0x1c>
 8005470:	42a9      	cmp	r1, r5
 8005472:	d905      	bls.n	8005480 <_malloc_r+0x28>
 8005474:	230c      	movs	r3, #12
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	2600      	movs	r6, #0
 800547a:	4630      	mov	r0, r6
 800547c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005480:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005554 <_malloc_r+0xfc>
 8005484:	f000 f868 	bl	8005558 <__malloc_lock>
 8005488:	f8d8 3000 	ldr.w	r3, [r8]
 800548c:	461c      	mov	r4, r3
 800548e:	bb5c      	cbnz	r4, 80054e8 <_malloc_r+0x90>
 8005490:	4629      	mov	r1, r5
 8005492:	4638      	mov	r0, r7
 8005494:	f7ff ffc0 	bl	8005418 <sbrk_aligned>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	4604      	mov	r4, r0
 800549c:	d155      	bne.n	800554a <_malloc_r+0xf2>
 800549e:	f8d8 4000 	ldr.w	r4, [r8]
 80054a2:	4626      	mov	r6, r4
 80054a4:	2e00      	cmp	r6, #0
 80054a6:	d145      	bne.n	8005534 <_malloc_r+0xdc>
 80054a8:	2c00      	cmp	r4, #0
 80054aa:	d048      	beq.n	800553e <_malloc_r+0xe6>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	4631      	mov	r1, r6
 80054b0:	4638      	mov	r0, r7
 80054b2:	eb04 0903 	add.w	r9, r4, r3
 80054b6:	f000 fb5d 	bl	8005b74 <_sbrk_r>
 80054ba:	4581      	cmp	r9, r0
 80054bc:	d13f      	bne.n	800553e <_malloc_r+0xe6>
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	1a6d      	subs	r5, r5, r1
 80054c2:	4629      	mov	r1, r5
 80054c4:	4638      	mov	r0, r7
 80054c6:	f7ff ffa7 	bl	8005418 <sbrk_aligned>
 80054ca:	3001      	adds	r0, #1
 80054cc:	d037      	beq.n	800553e <_malloc_r+0xe6>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	442b      	add	r3, r5
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	f8d8 3000 	ldr.w	r3, [r8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d038      	beq.n	800554e <_malloc_r+0xf6>
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	42a2      	cmp	r2, r4
 80054e0:	d12b      	bne.n	800553a <_malloc_r+0xe2>
 80054e2:	2200      	movs	r2, #0
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	e00f      	b.n	8005508 <_malloc_r+0xb0>
 80054e8:	6822      	ldr	r2, [r4, #0]
 80054ea:	1b52      	subs	r2, r2, r5
 80054ec:	d41f      	bmi.n	800552e <_malloc_r+0xd6>
 80054ee:	2a0b      	cmp	r2, #11
 80054f0:	d917      	bls.n	8005522 <_malloc_r+0xca>
 80054f2:	1961      	adds	r1, r4, r5
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	6025      	str	r5, [r4, #0]
 80054f8:	bf18      	it	ne
 80054fa:	6059      	strne	r1, [r3, #4]
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	bf08      	it	eq
 8005500:	f8c8 1000 	streq.w	r1, [r8]
 8005504:	5162      	str	r2, [r4, r5]
 8005506:	604b      	str	r3, [r1, #4]
 8005508:	4638      	mov	r0, r7
 800550a:	f104 060b 	add.w	r6, r4, #11
 800550e:	f000 f829 	bl	8005564 <__malloc_unlock>
 8005512:	f026 0607 	bic.w	r6, r6, #7
 8005516:	1d23      	adds	r3, r4, #4
 8005518:	1af2      	subs	r2, r6, r3
 800551a:	d0ae      	beq.n	800547a <_malloc_r+0x22>
 800551c:	1b9b      	subs	r3, r3, r6
 800551e:	50a3      	str	r3, [r4, r2]
 8005520:	e7ab      	b.n	800547a <_malloc_r+0x22>
 8005522:	42a3      	cmp	r3, r4
 8005524:	6862      	ldr	r2, [r4, #4]
 8005526:	d1dd      	bne.n	80054e4 <_malloc_r+0x8c>
 8005528:	f8c8 2000 	str.w	r2, [r8]
 800552c:	e7ec      	b.n	8005508 <_malloc_r+0xb0>
 800552e:	4623      	mov	r3, r4
 8005530:	6864      	ldr	r4, [r4, #4]
 8005532:	e7ac      	b.n	800548e <_malloc_r+0x36>
 8005534:	4634      	mov	r4, r6
 8005536:	6876      	ldr	r6, [r6, #4]
 8005538:	e7b4      	b.n	80054a4 <_malloc_r+0x4c>
 800553a:	4613      	mov	r3, r2
 800553c:	e7cc      	b.n	80054d8 <_malloc_r+0x80>
 800553e:	230c      	movs	r3, #12
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4638      	mov	r0, r7
 8005544:	f000 f80e 	bl	8005564 <__malloc_unlock>
 8005548:	e797      	b.n	800547a <_malloc_r+0x22>
 800554a:	6025      	str	r5, [r4, #0]
 800554c:	e7dc      	b.n	8005508 <_malloc_r+0xb0>
 800554e:	605b      	str	r3, [r3, #4]
 8005550:	deff      	udf	#255	; 0xff
 8005552:	bf00      	nop
 8005554:	20000374 	.word	0x20000374

08005558 <__malloc_lock>:
 8005558:	4801      	ldr	r0, [pc, #4]	; (8005560 <__malloc_lock+0x8>)
 800555a:	f7ff bf01 	b.w	8005360 <__retarget_lock_acquire_recursive>
 800555e:	bf00      	nop
 8005560:	20000370 	.word	0x20000370

08005564 <__malloc_unlock>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__malloc_unlock+0x8>)
 8005566:	f7ff befc 	b.w	8005362 <__retarget_lock_release_recursive>
 800556a:	bf00      	nop
 800556c:	20000370 	.word	0x20000370

08005570 <__ssputs_r>:
 8005570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005574:	688e      	ldr	r6, [r1, #8]
 8005576:	461f      	mov	r7, r3
 8005578:	42be      	cmp	r6, r7
 800557a:	680b      	ldr	r3, [r1, #0]
 800557c:	4682      	mov	sl, r0
 800557e:	460c      	mov	r4, r1
 8005580:	4690      	mov	r8, r2
 8005582:	d82c      	bhi.n	80055de <__ssputs_r+0x6e>
 8005584:	898a      	ldrh	r2, [r1, #12]
 8005586:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800558a:	d026      	beq.n	80055da <__ssputs_r+0x6a>
 800558c:	6965      	ldr	r5, [r4, #20]
 800558e:	6909      	ldr	r1, [r1, #16]
 8005590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005594:	eba3 0901 	sub.w	r9, r3, r1
 8005598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800559c:	1c7b      	adds	r3, r7, #1
 800559e:	444b      	add	r3, r9
 80055a0:	106d      	asrs	r5, r5, #1
 80055a2:	429d      	cmp	r5, r3
 80055a4:	bf38      	it	cc
 80055a6:	461d      	movcc	r5, r3
 80055a8:	0553      	lsls	r3, r2, #21
 80055aa:	d527      	bpl.n	80055fc <__ssputs_r+0x8c>
 80055ac:	4629      	mov	r1, r5
 80055ae:	f7ff ff53 	bl	8005458 <_malloc_r>
 80055b2:	4606      	mov	r6, r0
 80055b4:	b360      	cbz	r0, 8005610 <__ssputs_r+0xa0>
 80055b6:	6921      	ldr	r1, [r4, #16]
 80055b8:	464a      	mov	r2, r9
 80055ba:	f7ff fed3 	bl	8005364 <memcpy>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	6126      	str	r6, [r4, #16]
 80055cc:	6165      	str	r5, [r4, #20]
 80055ce:	444e      	add	r6, r9
 80055d0:	eba5 0509 	sub.w	r5, r5, r9
 80055d4:	6026      	str	r6, [r4, #0]
 80055d6:	60a5      	str	r5, [r4, #8]
 80055d8:	463e      	mov	r6, r7
 80055da:	42be      	cmp	r6, r7
 80055dc:	d900      	bls.n	80055e0 <__ssputs_r+0x70>
 80055de:	463e      	mov	r6, r7
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	4632      	mov	r2, r6
 80055e4:	4641      	mov	r1, r8
 80055e6:	f000 faab 	bl	8005b40 <memmove>
 80055ea:	68a3      	ldr	r3, [r4, #8]
 80055ec:	1b9b      	subs	r3, r3, r6
 80055ee:	60a3      	str	r3, [r4, #8]
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	4433      	add	r3, r6
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	2000      	movs	r0, #0
 80055f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fc:	462a      	mov	r2, r5
 80055fe:	f000 fac9 	bl	8005b94 <_realloc_r>
 8005602:	4606      	mov	r6, r0
 8005604:	2800      	cmp	r0, #0
 8005606:	d1e0      	bne.n	80055ca <__ssputs_r+0x5a>
 8005608:	6921      	ldr	r1, [r4, #16]
 800560a:	4650      	mov	r0, sl
 800560c:	f7ff feb8 	bl	8005380 <_free_r>
 8005610:	230c      	movs	r3, #12
 8005612:	f8ca 3000 	str.w	r3, [sl]
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005622:	e7e9      	b.n	80055f8 <__ssputs_r+0x88>

08005624 <_svfiprintf_r>:
 8005624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005628:	4698      	mov	r8, r3
 800562a:	898b      	ldrh	r3, [r1, #12]
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	b09d      	sub	sp, #116	; 0x74
 8005630:	4607      	mov	r7, r0
 8005632:	460d      	mov	r5, r1
 8005634:	4614      	mov	r4, r2
 8005636:	d50e      	bpl.n	8005656 <_svfiprintf_r+0x32>
 8005638:	690b      	ldr	r3, [r1, #16]
 800563a:	b963      	cbnz	r3, 8005656 <_svfiprintf_r+0x32>
 800563c:	2140      	movs	r1, #64	; 0x40
 800563e:	f7ff ff0b 	bl	8005458 <_malloc_r>
 8005642:	6028      	str	r0, [r5, #0]
 8005644:	6128      	str	r0, [r5, #16]
 8005646:	b920      	cbnz	r0, 8005652 <_svfiprintf_r+0x2e>
 8005648:	230c      	movs	r3, #12
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005650:	e0d0      	b.n	80057f4 <_svfiprintf_r+0x1d0>
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	616b      	str	r3, [r5, #20]
 8005656:	2300      	movs	r3, #0
 8005658:	9309      	str	r3, [sp, #36]	; 0x24
 800565a:	2320      	movs	r3, #32
 800565c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005660:	f8cd 800c 	str.w	r8, [sp, #12]
 8005664:	2330      	movs	r3, #48	; 0x30
 8005666:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800580c <_svfiprintf_r+0x1e8>
 800566a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800566e:	f04f 0901 	mov.w	r9, #1
 8005672:	4623      	mov	r3, r4
 8005674:	469a      	mov	sl, r3
 8005676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800567a:	b10a      	cbz	r2, 8005680 <_svfiprintf_r+0x5c>
 800567c:	2a25      	cmp	r2, #37	; 0x25
 800567e:	d1f9      	bne.n	8005674 <_svfiprintf_r+0x50>
 8005680:	ebba 0b04 	subs.w	fp, sl, r4
 8005684:	d00b      	beq.n	800569e <_svfiprintf_r+0x7a>
 8005686:	465b      	mov	r3, fp
 8005688:	4622      	mov	r2, r4
 800568a:	4629      	mov	r1, r5
 800568c:	4638      	mov	r0, r7
 800568e:	f7ff ff6f 	bl	8005570 <__ssputs_r>
 8005692:	3001      	adds	r0, #1
 8005694:	f000 80a9 	beq.w	80057ea <_svfiprintf_r+0x1c6>
 8005698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800569a:	445a      	add	r2, fp
 800569c:	9209      	str	r2, [sp, #36]	; 0x24
 800569e:	f89a 3000 	ldrb.w	r3, [sl]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 80a1 	beq.w	80057ea <_svfiprintf_r+0x1c6>
 80056a8:	2300      	movs	r3, #0
 80056aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056b2:	f10a 0a01 	add.w	sl, sl, #1
 80056b6:	9304      	str	r3, [sp, #16]
 80056b8:	9307      	str	r3, [sp, #28]
 80056ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056be:	931a      	str	r3, [sp, #104]	; 0x68
 80056c0:	4654      	mov	r4, sl
 80056c2:	2205      	movs	r2, #5
 80056c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c8:	4850      	ldr	r0, [pc, #320]	; (800580c <_svfiprintf_r+0x1e8>)
 80056ca:	f7fa fda9 	bl	8000220 <memchr>
 80056ce:	9a04      	ldr	r2, [sp, #16]
 80056d0:	b9d8      	cbnz	r0, 800570a <_svfiprintf_r+0xe6>
 80056d2:	06d0      	lsls	r0, r2, #27
 80056d4:	bf44      	itt	mi
 80056d6:	2320      	movmi	r3, #32
 80056d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056dc:	0711      	lsls	r1, r2, #28
 80056de:	bf44      	itt	mi
 80056e0:	232b      	movmi	r3, #43	; 0x2b
 80056e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ea:	2b2a      	cmp	r3, #42	; 0x2a
 80056ec:	d015      	beq.n	800571a <_svfiprintf_r+0xf6>
 80056ee:	9a07      	ldr	r2, [sp, #28]
 80056f0:	4654      	mov	r4, sl
 80056f2:	2000      	movs	r0, #0
 80056f4:	f04f 0c0a 	mov.w	ip, #10
 80056f8:	4621      	mov	r1, r4
 80056fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056fe:	3b30      	subs	r3, #48	; 0x30
 8005700:	2b09      	cmp	r3, #9
 8005702:	d94d      	bls.n	80057a0 <_svfiprintf_r+0x17c>
 8005704:	b1b0      	cbz	r0, 8005734 <_svfiprintf_r+0x110>
 8005706:	9207      	str	r2, [sp, #28]
 8005708:	e014      	b.n	8005734 <_svfiprintf_r+0x110>
 800570a:	eba0 0308 	sub.w	r3, r0, r8
 800570e:	fa09 f303 	lsl.w	r3, r9, r3
 8005712:	4313      	orrs	r3, r2
 8005714:	9304      	str	r3, [sp, #16]
 8005716:	46a2      	mov	sl, r4
 8005718:	e7d2      	b.n	80056c0 <_svfiprintf_r+0x9c>
 800571a:	9b03      	ldr	r3, [sp, #12]
 800571c:	1d19      	adds	r1, r3, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	9103      	str	r1, [sp, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfbb      	ittet	lt
 8005726:	425b      	neglt	r3, r3
 8005728:	f042 0202 	orrlt.w	r2, r2, #2
 800572c:	9307      	strge	r3, [sp, #28]
 800572e:	9307      	strlt	r3, [sp, #28]
 8005730:	bfb8      	it	lt
 8005732:	9204      	strlt	r2, [sp, #16]
 8005734:	7823      	ldrb	r3, [r4, #0]
 8005736:	2b2e      	cmp	r3, #46	; 0x2e
 8005738:	d10c      	bne.n	8005754 <_svfiprintf_r+0x130>
 800573a:	7863      	ldrb	r3, [r4, #1]
 800573c:	2b2a      	cmp	r3, #42	; 0x2a
 800573e:	d134      	bne.n	80057aa <_svfiprintf_r+0x186>
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	1d1a      	adds	r2, r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	9203      	str	r2, [sp, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	bfb8      	it	lt
 800574c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005750:	3402      	adds	r4, #2
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800581c <_svfiprintf_r+0x1f8>
 8005758:	7821      	ldrb	r1, [r4, #0]
 800575a:	2203      	movs	r2, #3
 800575c:	4650      	mov	r0, sl
 800575e:	f7fa fd5f 	bl	8000220 <memchr>
 8005762:	b138      	cbz	r0, 8005774 <_svfiprintf_r+0x150>
 8005764:	9b04      	ldr	r3, [sp, #16]
 8005766:	eba0 000a 	sub.w	r0, r0, sl
 800576a:	2240      	movs	r2, #64	; 0x40
 800576c:	4082      	lsls	r2, r0
 800576e:	4313      	orrs	r3, r2
 8005770:	3401      	adds	r4, #1
 8005772:	9304      	str	r3, [sp, #16]
 8005774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005778:	4825      	ldr	r0, [pc, #148]	; (8005810 <_svfiprintf_r+0x1ec>)
 800577a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800577e:	2206      	movs	r2, #6
 8005780:	f7fa fd4e 	bl	8000220 <memchr>
 8005784:	2800      	cmp	r0, #0
 8005786:	d038      	beq.n	80057fa <_svfiprintf_r+0x1d6>
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <_svfiprintf_r+0x1f0>)
 800578a:	bb1b      	cbnz	r3, 80057d4 <_svfiprintf_r+0x1b0>
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	3307      	adds	r3, #7
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	3308      	adds	r3, #8
 8005796:	9303      	str	r3, [sp, #12]
 8005798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579a:	4433      	add	r3, r6
 800579c:	9309      	str	r3, [sp, #36]	; 0x24
 800579e:	e768      	b.n	8005672 <_svfiprintf_r+0x4e>
 80057a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057a4:	460c      	mov	r4, r1
 80057a6:	2001      	movs	r0, #1
 80057a8:	e7a6      	b.n	80056f8 <_svfiprintf_r+0xd4>
 80057aa:	2300      	movs	r3, #0
 80057ac:	3401      	adds	r4, #1
 80057ae:	9305      	str	r3, [sp, #20]
 80057b0:	4619      	mov	r1, r3
 80057b2:	f04f 0c0a 	mov.w	ip, #10
 80057b6:	4620      	mov	r0, r4
 80057b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057bc:	3a30      	subs	r2, #48	; 0x30
 80057be:	2a09      	cmp	r2, #9
 80057c0:	d903      	bls.n	80057ca <_svfiprintf_r+0x1a6>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0c6      	beq.n	8005754 <_svfiprintf_r+0x130>
 80057c6:	9105      	str	r1, [sp, #20]
 80057c8:	e7c4      	b.n	8005754 <_svfiprintf_r+0x130>
 80057ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ce:	4604      	mov	r4, r0
 80057d0:	2301      	movs	r3, #1
 80057d2:	e7f0      	b.n	80057b6 <_svfiprintf_r+0x192>
 80057d4:	ab03      	add	r3, sp, #12
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	462a      	mov	r2, r5
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <_svfiprintf_r+0x1f4>)
 80057dc:	a904      	add	r1, sp, #16
 80057de:	4638      	mov	r0, r7
 80057e0:	f3af 8000 	nop.w
 80057e4:	1c42      	adds	r2, r0, #1
 80057e6:	4606      	mov	r6, r0
 80057e8:	d1d6      	bne.n	8005798 <_svfiprintf_r+0x174>
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	065b      	lsls	r3, r3, #25
 80057ee:	f53f af2d 	bmi.w	800564c <_svfiprintf_r+0x28>
 80057f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057f4:	b01d      	add	sp, #116	; 0x74
 80057f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fa:	ab03      	add	r3, sp, #12
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	462a      	mov	r2, r5
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <_svfiprintf_r+0x1f4>)
 8005802:	a904      	add	r1, sp, #16
 8005804:	4638      	mov	r0, r7
 8005806:	f000 f879 	bl	80058fc <_printf_i>
 800580a:	e7eb      	b.n	80057e4 <_svfiprintf_r+0x1c0>
 800580c:	08005ce4 	.word	0x08005ce4
 8005810:	08005cee 	.word	0x08005cee
 8005814:	00000000 	.word	0x00000000
 8005818:	08005571 	.word	0x08005571
 800581c:	08005cea 	.word	0x08005cea

08005820 <_printf_common>:
 8005820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	4616      	mov	r6, r2
 8005826:	4699      	mov	r9, r3
 8005828:	688a      	ldr	r2, [r1, #8]
 800582a:	690b      	ldr	r3, [r1, #16]
 800582c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005830:	4293      	cmp	r3, r2
 8005832:	bfb8      	it	lt
 8005834:	4613      	movlt	r3, r2
 8005836:	6033      	str	r3, [r6, #0]
 8005838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800583c:	4607      	mov	r7, r0
 800583e:	460c      	mov	r4, r1
 8005840:	b10a      	cbz	r2, 8005846 <_printf_common+0x26>
 8005842:	3301      	adds	r3, #1
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	0699      	lsls	r1, r3, #26
 800584a:	bf42      	ittt	mi
 800584c:	6833      	ldrmi	r3, [r6, #0]
 800584e:	3302      	addmi	r3, #2
 8005850:	6033      	strmi	r3, [r6, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	f015 0506 	ands.w	r5, r5, #6
 8005858:	d106      	bne.n	8005868 <_printf_common+0x48>
 800585a:	f104 0a19 	add.w	sl, r4, #25
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	42ab      	cmp	r3, r5
 8005866:	dc26      	bgt.n	80058b6 <_printf_common+0x96>
 8005868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800586c:	1e13      	subs	r3, r2, #0
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	bf18      	it	ne
 8005872:	2301      	movne	r3, #1
 8005874:	0692      	lsls	r2, r2, #26
 8005876:	d42b      	bmi.n	80058d0 <_printf_common+0xb0>
 8005878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587c:	4649      	mov	r1, r9
 800587e:	4638      	mov	r0, r7
 8005880:	47c0      	blx	r8
 8005882:	3001      	adds	r0, #1
 8005884:	d01e      	beq.n	80058c4 <_printf_common+0xa4>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	f003 0306 	and.w	r3, r3, #6
 800588e:	2b04      	cmp	r3, #4
 8005890:	bf02      	ittt	eq
 8005892:	68e5      	ldreq	r5, [r4, #12]
 8005894:	6833      	ldreq	r3, [r6, #0]
 8005896:	1aed      	subeq	r5, r5, r3
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	bf0c      	ite	eq
 800589c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a0:	2500      	movne	r5, #0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	bfc4      	itt	gt
 80058a6:	1a9b      	subgt	r3, r3, r2
 80058a8:	18ed      	addgt	r5, r5, r3
 80058aa:	2600      	movs	r6, #0
 80058ac:	341a      	adds	r4, #26
 80058ae:	42b5      	cmp	r5, r6
 80058b0:	d11a      	bne.n	80058e8 <_printf_common+0xc8>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e008      	b.n	80058c8 <_printf_common+0xa8>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4649      	mov	r1, r9
 80058bc:	4638      	mov	r0, r7
 80058be:	47c0      	blx	r8
 80058c0:	3001      	adds	r0, #1
 80058c2:	d103      	bne.n	80058cc <_printf_common+0xac>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058cc:	3501      	adds	r5, #1
 80058ce:	e7c6      	b.n	800585e <_printf_common+0x3e>
 80058d0:	18e1      	adds	r1, r4, r3
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	2030      	movs	r0, #48	; 0x30
 80058d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058da:	4422      	add	r2, r4
 80058dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058e4:	3302      	adds	r3, #2
 80058e6:	e7c7      	b.n	8005878 <_printf_common+0x58>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4622      	mov	r2, r4
 80058ec:	4649      	mov	r1, r9
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c0      	blx	r8
 80058f2:	3001      	adds	r0, #1
 80058f4:	d0e6      	beq.n	80058c4 <_printf_common+0xa4>
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7d9      	b.n	80058ae <_printf_common+0x8e>
	...

080058fc <_printf_i>:
 80058fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	7e0f      	ldrb	r7, [r1, #24]
 8005902:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005904:	2f78      	cmp	r7, #120	; 0x78
 8005906:	4691      	mov	r9, r2
 8005908:	4680      	mov	r8, r0
 800590a:	460c      	mov	r4, r1
 800590c:	469a      	mov	sl, r3
 800590e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005912:	d807      	bhi.n	8005924 <_printf_i+0x28>
 8005914:	2f62      	cmp	r7, #98	; 0x62
 8005916:	d80a      	bhi.n	800592e <_printf_i+0x32>
 8005918:	2f00      	cmp	r7, #0
 800591a:	f000 80d4 	beq.w	8005ac6 <_printf_i+0x1ca>
 800591e:	2f58      	cmp	r7, #88	; 0x58
 8005920:	f000 80c0 	beq.w	8005aa4 <_printf_i+0x1a8>
 8005924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800592c:	e03a      	b.n	80059a4 <_printf_i+0xa8>
 800592e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005932:	2b15      	cmp	r3, #21
 8005934:	d8f6      	bhi.n	8005924 <_printf_i+0x28>
 8005936:	a101      	add	r1, pc, #4	; (adr r1, 800593c <_printf_i+0x40>)
 8005938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800593c:	08005995 	.word	0x08005995
 8005940:	080059a9 	.word	0x080059a9
 8005944:	08005925 	.word	0x08005925
 8005948:	08005925 	.word	0x08005925
 800594c:	08005925 	.word	0x08005925
 8005950:	08005925 	.word	0x08005925
 8005954:	080059a9 	.word	0x080059a9
 8005958:	08005925 	.word	0x08005925
 800595c:	08005925 	.word	0x08005925
 8005960:	08005925 	.word	0x08005925
 8005964:	08005925 	.word	0x08005925
 8005968:	08005aad 	.word	0x08005aad
 800596c:	080059d5 	.word	0x080059d5
 8005970:	08005a67 	.word	0x08005a67
 8005974:	08005925 	.word	0x08005925
 8005978:	08005925 	.word	0x08005925
 800597c:	08005acf 	.word	0x08005acf
 8005980:	08005925 	.word	0x08005925
 8005984:	080059d5 	.word	0x080059d5
 8005988:	08005925 	.word	0x08005925
 800598c:	08005925 	.word	0x08005925
 8005990:	08005a6f 	.word	0x08005a6f
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	602a      	str	r2, [r5, #0]
 800599c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a4:	2301      	movs	r3, #1
 80059a6:	e09f      	b.n	8005ae8 <_printf_i+0x1ec>
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	682b      	ldr	r3, [r5, #0]
 80059ac:	0607      	lsls	r7, r0, #24
 80059ae:	f103 0104 	add.w	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	d501      	bpl.n	80059ba <_printf_i+0xbe>
 80059b6:	681e      	ldr	r6, [r3, #0]
 80059b8:	e003      	b.n	80059c2 <_printf_i+0xc6>
 80059ba:	0646      	lsls	r6, r0, #25
 80059bc:	d5fb      	bpl.n	80059b6 <_printf_i+0xba>
 80059be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059c2:	2e00      	cmp	r6, #0
 80059c4:	da03      	bge.n	80059ce <_printf_i+0xd2>
 80059c6:	232d      	movs	r3, #45	; 0x2d
 80059c8:	4276      	negs	r6, r6
 80059ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ce:	485a      	ldr	r0, [pc, #360]	; (8005b38 <_printf_i+0x23c>)
 80059d0:	230a      	movs	r3, #10
 80059d2:	e012      	b.n	80059fa <_printf_i+0xfe>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	1d19      	adds	r1, r3, #4
 80059da:	6029      	str	r1, [r5, #0]
 80059dc:	0605      	lsls	r5, r0, #24
 80059de:	d501      	bpl.n	80059e4 <_printf_i+0xe8>
 80059e0:	681e      	ldr	r6, [r3, #0]
 80059e2:	e002      	b.n	80059ea <_printf_i+0xee>
 80059e4:	0641      	lsls	r1, r0, #25
 80059e6:	d5fb      	bpl.n	80059e0 <_printf_i+0xe4>
 80059e8:	881e      	ldrh	r6, [r3, #0]
 80059ea:	4853      	ldr	r0, [pc, #332]	; (8005b38 <_printf_i+0x23c>)
 80059ec:	2f6f      	cmp	r7, #111	; 0x6f
 80059ee:	bf0c      	ite	eq
 80059f0:	2308      	moveq	r3, #8
 80059f2:	230a      	movne	r3, #10
 80059f4:	2100      	movs	r1, #0
 80059f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059fa:	6865      	ldr	r5, [r4, #4]
 80059fc:	60a5      	str	r5, [r4, #8]
 80059fe:	2d00      	cmp	r5, #0
 8005a00:	bfa2      	ittt	ge
 8005a02:	6821      	ldrge	r1, [r4, #0]
 8005a04:	f021 0104 	bicge.w	r1, r1, #4
 8005a08:	6021      	strge	r1, [r4, #0]
 8005a0a:	b90e      	cbnz	r6, 8005a10 <_printf_i+0x114>
 8005a0c:	2d00      	cmp	r5, #0
 8005a0e:	d04b      	beq.n	8005aa8 <_printf_i+0x1ac>
 8005a10:	4615      	mov	r5, r2
 8005a12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a16:	fb03 6711 	mls	r7, r3, r1, r6
 8005a1a:	5dc7      	ldrb	r7, [r0, r7]
 8005a1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a20:	4637      	mov	r7, r6
 8005a22:	42bb      	cmp	r3, r7
 8005a24:	460e      	mov	r6, r1
 8005a26:	d9f4      	bls.n	8005a12 <_printf_i+0x116>
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d10b      	bne.n	8005a44 <_printf_i+0x148>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	07de      	lsls	r6, r3, #31
 8005a30:	d508      	bpl.n	8005a44 <_printf_i+0x148>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	6861      	ldr	r1, [r4, #4]
 8005a36:	4299      	cmp	r1, r3
 8005a38:	bfde      	ittt	le
 8005a3a:	2330      	movle	r3, #48	; 0x30
 8005a3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a44:	1b52      	subs	r2, r2, r5
 8005a46:	6122      	str	r2, [r4, #16]
 8005a48:	f8cd a000 	str.w	sl, [sp]
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	aa03      	add	r2, sp, #12
 8005a50:	4621      	mov	r1, r4
 8005a52:	4640      	mov	r0, r8
 8005a54:	f7ff fee4 	bl	8005820 <_printf_common>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d14a      	bne.n	8005af2 <_printf_i+0x1f6>
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a60:	b004      	add	sp, #16
 8005a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f043 0320 	orr.w	r3, r3, #32
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	4833      	ldr	r0, [pc, #204]	; (8005b3c <_printf_i+0x240>)
 8005a70:	2778      	movs	r7, #120	; 0x78
 8005a72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	6829      	ldr	r1, [r5, #0]
 8005a7a:	061f      	lsls	r7, r3, #24
 8005a7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a80:	d402      	bmi.n	8005a88 <_printf_i+0x18c>
 8005a82:	065f      	lsls	r7, r3, #25
 8005a84:	bf48      	it	mi
 8005a86:	b2b6      	uxthmi	r6, r6
 8005a88:	07df      	lsls	r7, r3, #31
 8005a8a:	bf48      	it	mi
 8005a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a90:	6029      	str	r1, [r5, #0]
 8005a92:	bf48      	it	mi
 8005a94:	6023      	strmi	r3, [r4, #0]
 8005a96:	b91e      	cbnz	r6, 8005aa0 <_printf_i+0x1a4>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	e7a7      	b.n	80059f4 <_printf_i+0xf8>
 8005aa4:	4824      	ldr	r0, [pc, #144]	; (8005b38 <_printf_i+0x23c>)
 8005aa6:	e7e4      	b.n	8005a72 <_printf_i+0x176>
 8005aa8:	4615      	mov	r5, r2
 8005aaa:	e7bd      	b.n	8005a28 <_printf_i+0x12c>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	6826      	ldr	r6, [r4, #0]
 8005ab0:	6961      	ldr	r1, [r4, #20]
 8005ab2:	1d18      	adds	r0, r3, #4
 8005ab4:	6028      	str	r0, [r5, #0]
 8005ab6:	0635      	lsls	r5, r6, #24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0x1c4>
 8005abc:	6019      	str	r1, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <_printf_i+0x1ca>
 8005ac0:	0670      	lsls	r0, r6, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0x1c0>
 8005ac4:	8019      	strh	r1, [r3, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	4615      	mov	r5, r2
 8005acc:	e7bc      	b.n	8005a48 <_printf_i+0x14c>
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	1d1a      	adds	r2, r3, #4
 8005ad2:	602a      	str	r2, [r5, #0]
 8005ad4:	681d      	ldr	r5, [r3, #0]
 8005ad6:	6862      	ldr	r2, [r4, #4]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7fa fba0 	bl	8000220 <memchr>
 8005ae0:	b108      	cbz	r0, 8005ae6 <_printf_i+0x1ea>
 8005ae2:	1b40      	subs	r0, r0, r5
 8005ae4:	6060      	str	r0, [r4, #4]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	6123      	str	r3, [r4, #16]
 8005aea:	2300      	movs	r3, #0
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af0:	e7aa      	b.n	8005a48 <_printf_i+0x14c>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	462a      	mov	r2, r5
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	47d0      	blx	sl
 8005afc:	3001      	adds	r0, #1
 8005afe:	d0ad      	beq.n	8005a5c <_printf_i+0x160>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	079b      	lsls	r3, r3, #30
 8005b04:	d413      	bmi.n	8005b2e <_printf_i+0x232>
 8005b06:	68e0      	ldr	r0, [r4, #12]
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	bfb8      	it	lt
 8005b0e:	4618      	movlt	r0, r3
 8005b10:	e7a6      	b.n	8005a60 <_printf_i+0x164>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4632      	mov	r2, r6
 8005b16:	4649      	mov	r1, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	47d0      	blx	sl
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d09d      	beq.n	8005a5c <_printf_i+0x160>
 8005b20:	3501      	adds	r5, #1
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	9903      	ldr	r1, [sp, #12]
 8005b26:	1a5b      	subs	r3, r3, r1
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dcf2      	bgt.n	8005b12 <_printf_i+0x216>
 8005b2c:	e7eb      	b.n	8005b06 <_printf_i+0x20a>
 8005b2e:	2500      	movs	r5, #0
 8005b30:	f104 0619 	add.w	r6, r4, #25
 8005b34:	e7f5      	b.n	8005b22 <_printf_i+0x226>
 8005b36:	bf00      	nop
 8005b38:	08005cf5 	.word	0x08005cf5
 8005b3c:	08005d06 	.word	0x08005d06

08005b40 <memmove>:
 8005b40:	4288      	cmp	r0, r1
 8005b42:	b510      	push	{r4, lr}
 8005b44:	eb01 0402 	add.w	r4, r1, r2
 8005b48:	d902      	bls.n	8005b50 <memmove+0x10>
 8005b4a:	4284      	cmp	r4, r0
 8005b4c:	4623      	mov	r3, r4
 8005b4e:	d807      	bhi.n	8005b60 <memmove+0x20>
 8005b50:	1e43      	subs	r3, r0, #1
 8005b52:	42a1      	cmp	r1, r4
 8005b54:	d008      	beq.n	8005b68 <memmove+0x28>
 8005b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b5e:	e7f8      	b.n	8005b52 <memmove+0x12>
 8005b60:	4402      	add	r2, r0
 8005b62:	4601      	mov	r1, r0
 8005b64:	428a      	cmp	r2, r1
 8005b66:	d100      	bne.n	8005b6a <memmove+0x2a>
 8005b68:	bd10      	pop	{r4, pc}
 8005b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b72:	e7f7      	b.n	8005b64 <memmove+0x24>

08005b74 <_sbrk_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d06      	ldr	r5, [pc, #24]	; (8005b90 <_sbrk_r+0x1c>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	f7fa ffac 	bl	8000adc <_sbrk>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_sbrk_r+0x1a>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_sbrk_r+0x1a>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	2000036c 	.word	0x2000036c

08005b94 <_realloc_r>:
 8005b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b98:	4680      	mov	r8, r0
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	460e      	mov	r6, r1
 8005b9e:	b921      	cbnz	r1, 8005baa <_realloc_r+0x16>
 8005ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	f7ff bc57 	b.w	8005458 <_malloc_r>
 8005baa:	b92a      	cbnz	r2, 8005bb8 <_realloc_r+0x24>
 8005bac:	f7ff fbe8 	bl	8005380 <_free_r>
 8005bb0:	4625      	mov	r5, r4
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb8:	f000 f81b 	bl	8005bf2 <_malloc_usable_size_r>
 8005bbc:	4284      	cmp	r4, r0
 8005bbe:	4607      	mov	r7, r0
 8005bc0:	d802      	bhi.n	8005bc8 <_realloc_r+0x34>
 8005bc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bc6:	d812      	bhi.n	8005bee <_realloc_r+0x5a>
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7ff fc44 	bl	8005458 <_malloc_r>
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d0ed      	beq.n	8005bb2 <_realloc_r+0x1e>
 8005bd6:	42bc      	cmp	r4, r7
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4631      	mov	r1, r6
 8005bdc:	bf28      	it	cs
 8005bde:	463a      	movcs	r2, r7
 8005be0:	f7ff fbc0 	bl	8005364 <memcpy>
 8005be4:	4631      	mov	r1, r6
 8005be6:	4640      	mov	r0, r8
 8005be8:	f7ff fbca 	bl	8005380 <_free_r>
 8005bec:	e7e1      	b.n	8005bb2 <_realloc_r+0x1e>
 8005bee:	4635      	mov	r5, r6
 8005bf0:	e7df      	b.n	8005bb2 <_realloc_r+0x1e>

08005bf2 <_malloc_usable_size_r>:
 8005bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bf6:	1f18      	subs	r0, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bfbc      	itt	lt
 8005bfc:	580b      	ldrlt	r3, [r1, r0]
 8005bfe:	18c0      	addlt	r0, r0, r3
 8005c00:	4770      	bx	lr
	...

08005c04 <_init>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr

08005c10 <_fini>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr
