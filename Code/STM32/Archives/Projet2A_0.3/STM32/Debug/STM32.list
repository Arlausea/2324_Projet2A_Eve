
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000725c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000021c  24000010  08007564  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400022c  08007564  0002022c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000187fd  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002edf  00000000  00000000  0003887e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012b8  00000000  00000000  0003b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e97  00000000  00000000  0003ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00003c21  00000000  00000000  0003d8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ab04  00000000  00000000  000414d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014325b  00000000  00000000  0005bfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004ee4  00000000  00000000  0019f230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  001a4114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080074f0 	.word	0x080074f0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080074f0 	.word	0x080074f0

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b89      	ldr	r3, [pc, #548]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000600:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000604:	4a87      	ldr	r2, [pc, #540]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800060e:	4b85      	ldr	r3, [pc, #532]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000610:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	623b      	str	r3, [r7, #32]
 800061a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061c:	4b81      	ldr	r3, [pc, #516]	; (8000824 <MX_GPIO_Init+0x23c>)
 800061e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000622:	4a80      	ldr	r2, [pc, #512]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000624:	f043 0320 	orr.w	r3, r3, #32
 8000628:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800062c:	4b7d      	ldr	r3, [pc, #500]	; (8000824 <MX_GPIO_Init+0x23c>)
 800062e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	61fb      	str	r3, [r7, #28]
 8000638:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	4b7a      	ldr	r3, [pc, #488]	; (8000824 <MX_GPIO_Init+0x23c>)
 800063c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000640:	4a78      	ldr	r2, [pc, #480]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000646:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800064a:	4b76      	ldr	r3, [pc, #472]	; (8000824 <MX_GPIO_Init+0x23c>)
 800064c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b72      	ldr	r3, [pc, #456]	; (8000824 <MX_GPIO_Init+0x23c>)
 800065a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800065e:	4a71      	ldr	r2, [pc, #452]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000668:	4b6e      	ldr	r3, [pc, #440]	; (8000824 <MX_GPIO_Init+0x23c>)
 800066a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b6b      	ldr	r3, [pc, #428]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000678:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800067c:	4a69      	ldr	r2, [pc, #420]	; (8000824 <MX_GPIO_Init+0x23c>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000686:	4b67      	ldr	r3, [pc, #412]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000688:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000694:	4b63      	ldr	r3, [pc, #396]	; (8000824 <MX_GPIO_Init+0x23c>)
 8000696:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800069a:	4a62      	ldr	r2, [pc, #392]	; (8000824 <MX_GPIO_Init+0x23c>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006a4:	4b5f      	ldr	r3, [pc, #380]	; (8000824 <MX_GPIO_Init+0x23c>)
 80006a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b2:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <MX_GPIO_Init+0x23c>)
 80006b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b8:	4a5a      	ldr	r2, [pc, #360]	; (8000824 <MX_GPIO_Init+0x23c>)
 80006ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <MX_GPIO_Init+0x23c>)
 80006c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b54      	ldr	r3, [pc, #336]	; (8000824 <MX_GPIO_Init+0x23c>)
 80006d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d6:	4a53      	ldr	r2, [pc, #332]	; (8000824 <MX_GPIO_Init+0x23c>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e0:	4b50      	ldr	r3, [pc, #320]	; (8000824 <MX_GPIO_Init+0x23c>)
 80006e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	484c      	ldr	r0, [pc, #304]	; (8000828 <MX_GPIO_Init+0x240>)
 80006f6:	f001 faff 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	484b      	ldr	r0, [pc, #300]	; (800082c <MX_GPIO_Init+0x244>)
 8000700:	f001 fafa 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|Driver_EN_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f244 0141 	movw	r1, #16449	; 0x4041
 800070a:	4849      	ldr	r0, [pc, #292]	; (8000830 <MX_GPIO_Init+0x248>)
 800070c:	f001 faf4 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2102      	movs	r1, #2
 8000714:	4847      	ldr	r0, [pc, #284]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000716:	f001 faef 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072c:	4619      	mov	r1, r3
 800072e:	483f      	ldr	r0, [pc, #252]	; (800082c <MX_GPIO_Init+0x244>)
 8000730:	f001 f932 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4836      	ldr	r0, [pc, #216]	; (8000828 <MX_GPIO_Init+0x240>)
 800074e:	f001 f923 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_Pin;
 8000752:	2320      	movs	r3, #32
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(nCS_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	4619      	mov	r1, r3
 8000768:	4830      	ldr	r0, [pc, #192]	; (800082c <MX_GPIO_Init+0x244>)
 800076a:	f001 f915 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|Driver_EN_Pin;
 800076e:	f244 0341 	movw	r3, #16449	; 0x4041
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	4619      	mov	r1, r3
 8000786:	482a      	ldr	r0, [pc, #168]	; (8000830 <MX_GPIO_Init+0x248>)
 8000788:	f001 f906 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4619      	mov	r1, r3
 80007a0:	4825      	ldr	r0, [pc, #148]	; (8000838 <MX_GPIO_Init+0x250>)
 80007a2:	f001 f8f9 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80007a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4820      	ldr	r0, [pc, #128]	; (800083c <MX_GPIO_Init+0x254>)
 80007bc:	f001 f8ec 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007d2:	230a      	movs	r3, #10
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4817      	ldr	r0, [pc, #92]	; (800083c <MX_GPIO_Init+0x254>)
 80007de:	f001 f8db 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80007e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4810      	ldr	r0, [pc, #64]	; (800083c <MX_GPIO_Init+0x254>)
 80007fc:	f001 f8cc 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000800:	2302      	movs	r3, #2
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	4619      	mov	r1, r3
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_GPIO_Init+0x24c>)
 8000818:	f001 f8be 	bl	8001998 <HAL_GPIO_Init>

}
 800081c:	bf00      	nop
 800081e:	3738      	adds	r7, #56	; 0x38
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58024400 	.word	0x58024400
 8000828:	58021400 	.word	0x58021400
 800082c:	58020800 	.word	0x58020800
 8000830:	58020400 	.word	0x58020400
 8000834:	58021000 	.word	0x58021000
 8000838:	58021800 	.word	0x58021800
 800083c:	58020000 	.word	0x58020000

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fc9b 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f83f 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f7ff fecb 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000852:	f000 fb5d 	bl	8000f10 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000856:	f000 fc61 	bl	800111c <MX_USB_OTG_HS_USB_Init>
  MX_TIM4_Init();
 800085a:	f000 fa49 	bl	8000cf0 <MX_TIM4_Init>
  MX_UART5_Init();
 800085e:	f000 fb0b 	bl	8000e78 <MX_UART5_Init>
  MX_SPI1_Init();
 8000862:	f000 f8bb 	bl	80009dc <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000866:	f000 f8a7 	bl	80009b8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0); //Permet de configurer le TMC2590 à l'état bas donc de le sélectionner pour l'asservir
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	4813      	ldr	r0, [pc, #76]	; (80008bc <main+0x7c>)
 8000870:	f001 fa42 	bl	8001cf8 <HAL_GPIO_WritePin>
	//txData = ordre(60);




	HAL_SPI_Init(&hspi1);
 8000874:	4812      	ldr	r0, [pc, #72]	; (80008c0 <main+0x80>)
 8000876:	f004 f851 	bl	800491c <HAL_SPI_Init>
//	uint8_t data5[] = {0x0E, 0xF0, 0x8F};
//
//	//HAL_SPI_Transmit(&hspi1, data5, 3, HAL_MAX_DELAY);
//	// DRVCONF
//
	HAL_GPIO_WritePin(Driver_EN_GPIO_Port, Driver_EN_Pin, SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <main+0x84>)
 8000880:	f001 fa3a 	bl	8001cf8 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */




		HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2120      	movs	r1, #32
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <main+0x7c>)
 800088a:	f001 fa35 	bl	8001cf8 <HAL_GPIO_WritePin>
		uint8_t data1[] = {0x94,0x2D,0x70};
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <main+0x88>)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	4611      	mov	r1, r2
 8000896:	8019      	strh	r1, [r3, #0]
 8000898:	3302      	adds	r3, #2
 800089a:	0c12      	lsrs	r2, r2, #16
 800089c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, data1, 3, 100);
 800089e:	1d39      	adds	r1, r7, #4
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	2203      	movs	r2, #3
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <main+0x80>)
 80008a6:	f004 f95d 	bl	8004b64 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2120      	movs	r1, #32
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <main+0x7c>)
 80008b0:	f001 fa22 	bl	8001cf8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 fcf5 	bl	80012a4 <HAL_Delay>
	{
 80008ba:	e7e3      	b.n	8000884 <main+0x44>
 80008bc:	58020800 	.word	0x58020800
 80008c0:	2400002c 	.word	0x2400002c
 80008c4:	58020400 	.word	0x58020400
 80008c8:	08007508 	.word	0x08007508

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09c      	sub	sp, #112	; 0x70
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	224c      	movs	r2, #76	; 0x4c
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f006 fddc 	bl	8007498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2220      	movs	r2, #32
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f006 fdd6 	bl	8007498 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <SystemClock_Config+0xe4>)
 80008ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008f6:	2004      	movs	r0, #4
 80008f8:	f001 fa18 	bl	8001d2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008fc:	2300      	movs	r3, #0
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <SystemClock_Config+0xe8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a2b      	ldr	r2, [pc, #172]	; (80009b4 <SystemClock_Config+0xe8>)
 8000906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <SystemClock_Config+0xe8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000918:	bf00      	nop
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <SystemClock_Config+0xe8>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000926:	d1f8      	bne.n	800091a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000928:	2321      	movs	r3, #33	; 0x21
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000932:	2301      	movs	r3, #1
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	2302      	movs	r3, #2
 800093c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000942:	2318      	movs	r3, #24
 8000944:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800094a:	2304      	movs	r3, #4
 800094c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000952:	230c      	movs	r3, #12
 8000954:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000956:	2300      	movs	r3, #0
 8000958:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fa3c 	bl	8001de0 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800096e:	f000 f82f 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	233f      	movs	r3, #63	; 0x3f
 8000974:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2303      	movs	r3, #3
 8000978:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fe54 	bl	8002644 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80009a2:	f000 f815 	bl	80009d0 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3770      	adds	r7, #112	; 0x70
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	58024400 	.word	0x58024400
 80009b4:	58024800 	.word	0x58024800

080009b8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2023      	movs	r0, #35	; 0x23
 80009c2:	f000 fd6e 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009c6:	2023      	movs	r0, #35	; 0x23
 80009c8:	f000 fd85 	bl	80014d6 <HAL_NVIC_EnableIRQ>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_SPI1_Init+0xa4>)
 80009e2:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <MX_SPI1_Init+0xa8>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_SPI1_Init+0xa4>)
 80009e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_SPI1_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_SPI1_Init+0xa4>)
 80009f6:	2207      	movs	r2, #7
 80009f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_SPI1_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_SPI1_Init+0xa4>)
 8000a6e:	f003 ff55 	bl	800491c <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000a78:	f7ff ffaa 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2400002c 	.word	0x2400002c
 8000a84:	40013000 	.word	0x40013000

08000a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0ba      	sub	sp, #232	; 0xe8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	22c0      	movs	r2, #192	; 0xc0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f006 fcf5 	bl	8007498 <memset>
  if(spiHandle->Instance==SPI1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a26      	ldr	r2, [pc, #152]	; (8000b4c <HAL_SPI_MspInit+0xc4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d144      	bne.n	8000b42 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 f945 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000ad8:	f7ff ff7a 	bl	80009d0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_SPI_MspInit+0xc8>)
 8000ade:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000ae2:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_SPI_MspInit+0xc8>)
 8000ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ae8:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_SPI_MspInit+0xc8>)
 8000aee:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_SPI_MspInit+0xc8>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_SPI_MspInit+0xc8>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_SPI_MspInit+0xc8>)
 8000b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b18:	23e0      	movs	r3, #224	; 0xe0
 8000b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b30:	2305      	movs	r3, #5
 8000b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_SPI_MspInit+0xcc>)
 8000b3e:	f000 ff2b 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b42:	bf00      	nop
 8000b44:	37e8      	adds	r7, #232	; 0xe8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40013000 	.word	0x40013000
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58020000 	.word	0x58020000

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_MspInit+0x30>)
 8000b60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x30>)
 8000b66:	f043 0302 	orr.w	r3, r3, #2
 8000b6a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x30>)
 8000b70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	58024400 	.word	0x58024400

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 fb44 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2120      	movs	r1, #32
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <SPI1_IRQHandler+0x18>)
 8000bea:	f001 f885 	bl	8001cf8 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <SPI1_IRQHandler+0x1c>)
 8000bf0:	f004 f9b4 	bl	8004f5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58020800 	.word	0x58020800
 8000bfc:	2400002c 	.word	0x2400002c

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <SystemInit+0xd0>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a31      	ldr	r2, [pc, #196]	; (8000cd0 <SystemInit+0xd0>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <SystemInit+0xd4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d807      	bhi.n	8000c30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <SystemInit+0xd4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f023 030f 	bic.w	r3, r3, #15
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <SystemInit+0xd4>)
 8000c2a:	f043 0303 	orr.w	r3, r3, #3
 8000c2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <SystemInit+0xd8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a28      	ldr	r2, [pc, #160]	; (8000cd8 <SystemInit+0xd8>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <SystemInit+0xd8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <SystemInit+0xd8>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4924      	ldr	r1, [pc, #144]	; (8000cd8 <SystemInit+0xd8>)
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <SystemInit+0xdc>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <SystemInit+0xd4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d007      	beq.n	8000c6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <SystemInit+0xd4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 030f 	bic.w	r3, r3, #15
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <SystemInit+0xd4>)
 8000c64:	f043 0303 	orr.w	r3, r3, #3
 8000c68:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <SystemInit+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <SystemInit+0xd8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <SystemInit+0xd8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <SystemInit+0xd8>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <SystemInit+0xe0>)
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <SystemInit+0xd8>)
 8000c84:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <SystemInit+0xe4>)
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <SystemInit+0xd8>)
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <SystemInit+0xe8>)
 8000c8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <SystemInit+0xd8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <SystemInit+0xd8>)
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <SystemInit+0xe8>)
 8000c98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <SystemInit+0xd8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <SystemInit+0xd8>)
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <SystemInit+0xe8>)
 8000ca4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <SystemInit+0xd8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <SystemInit+0xd8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <SystemInit+0xd8>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <SystemInit+0xd8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <SystemInit+0xec>)
 8000cc0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cc4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	52002000 	.word	0x52002000
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ce0:	02020200 	.word	0x02020200
 8000ce4:	01ff0000 	.word	0x01ff0000
 8000ce8:	01010280 	.word	0x01010280
 8000cec:	52004000 	.word	0x52004000

08000cf0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d16:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <MX_TIM4_Init+0xc8>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d3a:	481e      	ldr	r0, [pc, #120]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d3c:	f004 fc11 	bl	8005562 <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000d46:	f7ff fe43 	bl	80009d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4816      	ldr	r0, [pc, #88]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d5a:	f005 f8dd 	bl	8005f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d64:	f7ff fe34 	bl	80009d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d68:	2360      	movs	r3, #96	; 0x60
 8000d6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d80:	f004 fc46 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d8a:	f7ff fe21 	bl	80009d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	220c      	movs	r2, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000d96:	f004 fc3b 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000da0:	f7ff fe16 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <MX_TIM4_Init+0xc4>)
 8000da6:	f000 f82b 	bl	8000e00 <HAL_TIM_MspPostInit>

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	240000b4 	.word	0x240000b4
 8000db8:	40000800 	.word	0x40000800

08000dbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10e      	bne.n	8000dec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_TIM_PWM_MspInit+0x40>)
 8000dd0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dd4:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HAL_TIM_PWM_MspInit+0x40>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_TIM_PWM_MspInit+0x40>)
 8000de0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40000800 	.word	0x40000800
 8000dfc:	58024400 	.word	0x58024400

08000e00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_TIM_MspPostInit+0x6c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d11f      	bne.n	8000e62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <HAL_TIM_MspPostInit+0x70>)
 8000e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e28:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <HAL_TIM_MspPostInit+0x70>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_TIM_MspPostInit+0x70>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_TIM_MspPostInit+0x74>)
 8000e5e:	f000 fd9b 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40000800 	.word	0x40000800
 8000e70:	58024400 	.word	0x58024400
 8000e74:	58020400 	.word	0x58020400

08000e78 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_UART5_Init+0x90>)
 8000e7e:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <MX_UART5_Init+0x94>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <MX_UART5_Init+0x90>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_UART5_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_UART5_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_UART5_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_UART5_Init+0x90>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_UART5_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_UART5_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_UART5_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_UART5_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_UART5_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8000ec0:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_UART5_Init+0x90>)
 8000ec2:	f005 f907 	bl	80060d4 <HAL_HalfDuplex_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000ecc:	f7ff fd80 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_UART5_Init+0x90>)
 8000ed4:	f006 fa15 	bl	8007302 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000ede:	f7ff fd77 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <MX_UART5_Init+0x90>)
 8000ee6:	f006 fa4a 	bl	800737e <HAL_UARTEx_SetRxFifoThreshold>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000ef0:	f7ff fd6e 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_UART5_Init+0x90>)
 8000ef6:	f006 f9cb 	bl	8007290 <HAL_UARTEx_DisableFifoMode>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000f00:	f7ff fd66 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	24000100 	.word	0x24000100
 8000f0c:	40005000 	.word	0x40005000

08000f10 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f16:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <MX_USART3_UART_Init+0x94>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f58:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f5a:	f005 f86b 	bl	8006034 <HAL_UART_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f64:	f7ff fd34 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f6c:	f006 f9c9 	bl	8007302 <HAL_UARTEx_SetTxFifoThreshold>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f76:	f7ff fd2b 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f7e:	f006 f9fe 	bl	800737e <HAL_UARTEx_SetRxFifoThreshold>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f88:	f7ff fd22 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f8e:	f006 f97f 	bl	8007290 <HAL_UARTEx_DisableFifoMode>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f7ff fd1a 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	24000194 	.word	0x24000194
 8000fa4:	40004800 	.word	0x40004800

08000fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0bc      	sub	sp, #240	; 0xf0
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	22c0      	movs	r2, #192	; 0xc0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 fa65 	bl	8007498 <memset>
  if(uartHandle->Instance==UART5)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_UART_MspInit+0x160>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d147      	bne.n	8001068 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000fd8:	f04f 0202 	mov.w	r2, #2
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 feb4 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ffa:	f7ff fce9 	bl	80009d0 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_UART_MspInit+0x164>)
 8001000:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001004:	4a41      	ldr	r2, [pc, #260]	; (800110c <HAL_UART_MspInit+0x164>)
 8001006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800100a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800100e:	4b3f      	ldr	r3, [pc, #252]	; (800110c <HAL_UART_MspInit+0x164>)
 8001010:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <HAL_UART_MspInit+0x164>)
 800101e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001022:	4a3a      	ldr	r2, [pc, #232]	; (800110c <HAL_UART_MspInit+0x164>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800102c:	4b37      	ldr	r3, [pc, #220]	; (800110c <HAL_UART_MspInit+0x164>)
 800102e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800103a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001054:	230e      	movs	r3, #14
 8001056:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800105e:	4619      	mov	r1, r3
 8001060:	482b      	ldr	r0, [pc, #172]	; (8001110 <HAL_UART_MspInit+0x168>)
 8001062:	f000 fc99 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001066:	e04b      	b.n	8001100 <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART3)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a29      	ldr	r2, [pc, #164]	; (8001114 <HAL_UART_MspInit+0x16c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d146      	bne.n	8001100 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001072:	f04f 0202 	mov.w	r2, #2
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fe67 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001094:	f7ff fc9c 	bl	80009d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_UART_MspInit+0x164>)
 800109a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <HAL_UART_MspInit+0x164>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_UART_MspInit+0x164>)
 80010aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_UART_MspInit+0x164>)
 80010b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <HAL_UART_MspInit+0x164>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_UART_MspInit+0x164>)
 80010c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ee:	2307      	movs	r3, #7
 80010f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010f8:	4619      	mov	r1, r3
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <HAL_UART_MspInit+0x170>)
 80010fc:	f000 fc4c 	bl	8001998 <HAL_GPIO_Init>
}
 8001100:	bf00      	nop
 8001102:	37f0      	adds	r7, #240	; 0xf0
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40005000 	.word	0x40005000
 800110c:	58024400 	.word	0x58024400
 8001110:	58020400 	.word	0x58020400
 8001114:	40004800 	.word	0x40004800
 8001118:	58020c00 	.word	0x58020c00

0800111c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001130:	f7ff fd66 	bl	8000c00 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115a:	f006 f9a5 	bl	80074a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fb6f 	bl	8000840 <main>
  bx  lr
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001168:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800116c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001170:	08007554 	.word	0x08007554
  ldr r2, =_sbss
 8001174:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001178:	2400022c 	.word	0x2400022c

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 f980 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800118c:	f001 fc10 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8001190:	4602      	mov	r2, r0
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_Init+0x68>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	4913      	ldr	r1, [pc, #76]	; (80011ec <HAL_Init+0x6c>)
 800119e:	5ccb      	ldrb	r3, [r1, r3]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_Init+0x6c>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_Init+0x70>)
 80011c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_Init+0x74>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f814 	bl	80011f8 <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e002      	b.n	80011e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fcbd 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	58024400 	.word	0x58024400
 80011ec:	0800750c 	.word	0x0800750c
 80011f0:	24000004 	.word	0x24000004
 80011f4:	24000000 	.word	0x24000000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_InitTick+0x60>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e021      	b.n	8001250 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_InitTick+0x64>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_InitTick+0x60>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f965 	bl	80014f2 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001240:	f000 f92f 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x68>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2400000c 	.word	0x2400000c
 800125c:	24000000 	.word	0x24000000
 8001260:	24000008 	.word	0x24000008

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2400000c 	.word	0x2400000c
 8001288:	24000228 	.word	0x24000228

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	24000228 	.word	0x24000228

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2400000c 	.word	0x2400000c

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <__NVIC_SetPriorityGrouping+0x40>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	4313      	orrs	r3, r2
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x40>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	05fa0000 	.word	0x05fa0000

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff29 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff40 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff90 	bl	80013e0 <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5f 	bl	800138c <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff33 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa4 	bl	8001448 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e237      	b.n	800198e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d004      	beq.n	8001534 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e22c      	b.n	800198e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a5c      	ldr	r2, [pc, #368]	; (80016ac <HAL_DMA_Abort_IT+0x1a0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d04a      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a5b      	ldr	r2, [pc, #364]	; (80016b0 <HAL_DMA_Abort_IT+0x1a4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d045      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a59      	ldr	r2, [pc, #356]	; (80016b4 <HAL_DMA_Abort_IT+0x1a8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d040      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_DMA_Abort_IT+0x1ac>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d03b      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a56      	ldr	r2, [pc, #344]	; (80016bc <HAL_DMA_Abort_IT+0x1b0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d036      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <HAL_DMA_Abort_IT+0x1b4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d031      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a53      	ldr	r2, [pc, #332]	; (80016c4 <HAL_DMA_Abort_IT+0x1b8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d02c      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <HAL_DMA_Abort_IT+0x1bc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d027      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_DMA_Abort_IT+0x1c0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d022      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <HAL_DMA_Abort_IT+0x1c4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d01d      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a4d      	ldr	r2, [pc, #308]	; (80016d4 <HAL_DMA_Abort_IT+0x1c8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d018      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <HAL_DMA_Abort_IT+0x1cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d013      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_DMA_Abort_IT+0x1d0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00e      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_DMA_Abort_IT+0x1d4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d009      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a47      	ldr	r2, [pc, #284]	; (80016e4 <HAL_DMA_Abort_IT+0x1d8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d004      	beq.n	80015d4 <HAL_DMA_Abort_IT+0xc8>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a46      	ldr	r2, [pc, #280]	; (80016e8 <HAL_DMA_Abort_IT+0x1dc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_DMA_Abort_IT+0xcc>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_DMA_Abort_IT+0xce>
 80015d8:	2300      	movs	r3, #0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8086 	beq.w	80016ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2204      	movs	r2, #4
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <HAL_DMA_Abort_IT+0x1a0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d04a      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <HAL_DMA_Abort_IT+0x1a4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d045      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2c      	ldr	r2, [pc, #176]	; (80016b4 <HAL_DMA_Abort_IT+0x1a8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d040      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2b      	ldr	r2, [pc, #172]	; (80016b8 <HAL_DMA_Abort_IT+0x1ac>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d03b      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <HAL_DMA_Abort_IT+0x1b0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d036      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <HAL_DMA_Abort_IT+0x1b4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d031      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <HAL_DMA_Abort_IT+0x1b8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d02c      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_DMA_Abort_IT+0x1bc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d027      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a23      	ldr	r2, [pc, #140]	; (80016cc <HAL_DMA_Abort_IT+0x1c0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d022      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_DMA_Abort_IT+0x1c4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d01d      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <HAL_DMA_Abort_IT+0x1c8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d018      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_DMA_Abort_IT+0x1cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_DMA_Abort_IT+0x1d0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00e      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <HAL_DMA_Abort_IT+0x1d4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d009      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <HAL_DMA_Abort_IT+0x1d8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d004      	beq.n	8001688 <HAL_DMA_Abort_IT+0x17c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_DMA_Abort_IT+0x1dc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d108      	bne.n	800169a <HAL_DMA_Abort_IT+0x18e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e178      	b.n	800198c <HAL_DMA_Abort_IT+0x480>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e16f      	b.n	800198c <HAL_DMA_Abort_IT+0x480>
 80016ac:	40020010 	.word	0x40020010
 80016b0:	40020028 	.word	0x40020028
 80016b4:	40020040 	.word	0x40020040
 80016b8:	40020058 	.word	0x40020058
 80016bc:	40020070 	.word	0x40020070
 80016c0:	40020088 	.word	0x40020088
 80016c4:	400200a0 	.word	0x400200a0
 80016c8:	400200b8 	.word	0x400200b8
 80016cc:	40020410 	.word	0x40020410
 80016d0:	40020428 	.word	0x40020428
 80016d4:	40020440 	.word	0x40020440
 80016d8:	40020458 	.word	0x40020458
 80016dc:	40020470 	.word	0x40020470
 80016e0:	40020488 	.word	0x40020488
 80016e4:	400204a0 	.word	0x400204a0
 80016e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 020e 	bic.w	r2, r2, #14
 80016fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6c      	ldr	r2, [pc, #432]	; (80018b4 <HAL_DMA_Abort_IT+0x3a8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d04a      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6b      	ldr	r2, [pc, #428]	; (80018b8 <HAL_DMA_Abort_IT+0x3ac>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d045      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a69      	ldr	r2, [pc, #420]	; (80018bc <HAL_DMA_Abort_IT+0x3b0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d040      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a68      	ldr	r2, [pc, #416]	; (80018c0 <HAL_DMA_Abort_IT+0x3b4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d03b      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a66      	ldr	r2, [pc, #408]	; (80018c4 <HAL_DMA_Abort_IT+0x3b8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d036      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a65      	ldr	r2, [pc, #404]	; (80018c8 <HAL_DMA_Abort_IT+0x3bc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d031      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a63      	ldr	r2, [pc, #396]	; (80018cc <HAL_DMA_Abort_IT+0x3c0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d02c      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a62      	ldr	r2, [pc, #392]	; (80018d0 <HAL_DMA_Abort_IT+0x3c4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d027      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a60      	ldr	r2, [pc, #384]	; (80018d4 <HAL_DMA_Abort_IT+0x3c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d022      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5f      	ldr	r2, [pc, #380]	; (80018d8 <HAL_DMA_Abort_IT+0x3cc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d01d      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a5d      	ldr	r2, [pc, #372]	; (80018dc <HAL_DMA_Abort_IT+0x3d0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d018      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5c      	ldr	r2, [pc, #368]	; (80018e0 <HAL_DMA_Abort_IT+0x3d4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d013      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a5a      	ldr	r2, [pc, #360]	; (80018e4 <HAL_DMA_Abort_IT+0x3d8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00e      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a59      	ldr	r2, [pc, #356]	; (80018e8 <HAL_DMA_Abort_IT+0x3dc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d009      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a57      	ldr	r2, [pc, #348]	; (80018ec <HAL_DMA_Abort_IT+0x3e0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d004      	beq.n	800179c <HAL_DMA_Abort_IT+0x290>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a56      	ldr	r2, [pc, #344]	; (80018f0 <HAL_DMA_Abort_IT+0x3e4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d108      	bne.n	80017ae <HAL_DMA_Abort_IT+0x2a2>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e007      	b.n	80017be <HAL_DMA_Abort_IT+0x2b2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a3c      	ldr	r2, [pc, #240]	; (80018b4 <HAL_DMA_Abort_IT+0x3a8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d072      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a3a      	ldr	r2, [pc, #232]	; (80018b8 <HAL_DMA_Abort_IT+0x3ac>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d06d      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a39      	ldr	r2, [pc, #228]	; (80018bc <HAL_DMA_Abort_IT+0x3b0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d068      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a37      	ldr	r2, [pc, #220]	; (80018c0 <HAL_DMA_Abort_IT+0x3b4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d063      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a36      	ldr	r2, [pc, #216]	; (80018c4 <HAL_DMA_Abort_IT+0x3b8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d05e      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <HAL_DMA_Abort_IT+0x3bc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d059      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a33      	ldr	r2, [pc, #204]	; (80018cc <HAL_DMA_Abort_IT+0x3c0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d054      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a31      	ldr	r2, [pc, #196]	; (80018d0 <HAL_DMA_Abort_IT+0x3c4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d04f      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a30      	ldr	r2, [pc, #192]	; (80018d4 <HAL_DMA_Abort_IT+0x3c8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d04a      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a2e      	ldr	r2, [pc, #184]	; (80018d8 <HAL_DMA_Abort_IT+0x3cc>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d045      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <HAL_DMA_Abort_IT+0x3d0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d040      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <HAL_DMA_Abort_IT+0x3d4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d03b      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <HAL_DMA_Abort_IT+0x3d8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d036      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <HAL_DMA_Abort_IT+0x3dc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d031      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_DMA_Abort_IT+0x3e0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d02c      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_DMA_Abort_IT+0x3e4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d027      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a24      	ldr	r2, [pc, #144]	; (80018f4 <HAL_DMA_Abort_IT+0x3e8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d022      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_DMA_Abort_IT+0x3ec>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01d      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a21      	ldr	r2, [pc, #132]	; (80018fc <HAL_DMA_Abort_IT+0x3f0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d018      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_DMA_Abort_IT+0x3f4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <HAL_DMA_Abort_IT+0x3f8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00e      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_DMA_Abort_IT+0x3fc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d009      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1b      	ldr	r2, [pc, #108]	; (800190c <HAL_DMA_Abort_IT+0x400>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d004      	beq.n	80018ae <HAL_DMA_Abort_IT+0x3a2>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_DMA_Abort_IT+0x404>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d132      	bne.n	8001914 <HAL_DMA_Abort_IT+0x408>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e031      	b.n	8001916 <HAL_DMA_Abort_IT+0x40a>
 80018b2:	bf00      	nop
 80018b4:	40020010 	.word	0x40020010
 80018b8:	40020028 	.word	0x40020028
 80018bc:	40020040 	.word	0x40020040
 80018c0:	40020058 	.word	0x40020058
 80018c4:	40020070 	.word	0x40020070
 80018c8:	40020088 	.word	0x40020088
 80018cc:	400200a0 	.word	0x400200a0
 80018d0:	400200b8 	.word	0x400200b8
 80018d4:	40020410 	.word	0x40020410
 80018d8:	40020428 	.word	0x40020428
 80018dc:	40020440 	.word	0x40020440
 80018e0:	40020458 	.word	0x40020458
 80018e4:	40020470 	.word	0x40020470
 80018e8:	40020488 	.word	0x40020488
 80018ec:	400204a0 	.word	0x400204a0
 80018f0:	400204b8 	.word	0x400204b8
 80018f4:	58025408 	.word	0x58025408
 80018f8:	5802541c 	.word	0x5802541c
 80018fc:	58025430 	.word	0x58025430
 8001900:	58025444 	.word	0x58025444
 8001904:	58025458 	.word	0x58025458
 8001908:	5802546c 	.word	0x5802546c
 800190c:	58025480 	.word	0x58025480
 8001910:	58025494 	.word	0x58025494
 8001914:	2300      	movs	r3, #0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d028      	beq.n	800196c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001928:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	2201      	movs	r2, #1
 800193a:	409a      	lsls	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001948:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00c      	beq.n	800196c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800195c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001960:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800196a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019a6:	4b89      	ldr	r3, [pc, #548]	; (8001bcc <HAL_GPIO_Init+0x234>)
 80019a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019aa:	e194      	b.n	8001cd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2101      	movs	r1, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8186 	beq.w	8001cd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d005      	beq.n	80019dc <HAL_GPIO_Init+0x44>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d130      	bne.n	8001a3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a12:	2201      	movs	r2, #1
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	f003 0201 	and.w	r2, r3, #1
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d017      	beq.n	8001a7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d123      	bne.n	8001ace <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	08da      	lsrs	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	69b9      	ldr	r1, [r7, #24]
 8001aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0203 	and.w	r2, r3, #3
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80e0 	beq.w	8001cd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_GPIO_Init+0x238>)
 8001b12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001b16:	4a2e      	ldr	r2, [pc, #184]	; (8001bd0 <HAL_GPIO_Init+0x238>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_GPIO_Init+0x238>)
 8001b22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2e:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <HAL_GPIO_Init+0x23c>)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_GPIO_Init+0x240>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d052      	beq.n	8001c00 <HAL_GPIO_Init+0x268>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_GPIO_Init+0x244>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d031      	beq.n	8001bc6 <HAL_GPIO_Init+0x22e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_GPIO_Init+0x248>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d02b      	beq.n	8001bc2 <HAL_GPIO_Init+0x22a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_GPIO_Init+0x24c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d025      	beq.n	8001bbe <HAL_GPIO_Init+0x226>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a1c      	ldr	r2, [pc, #112]	; (8001be8 <HAL_GPIO_Init+0x250>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01f      	beq.n	8001bba <HAL_GPIO_Init+0x222>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <HAL_GPIO_Init+0x254>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x21e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <HAL_GPIO_Init+0x258>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x21a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_GPIO_Init+0x25c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x216>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <HAL_GPIO_Init+0x260>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x212>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_GPIO_Init+0x264>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x20e>
 8001ba2:	2309      	movs	r3, #9
 8001ba4:	e02d      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	e02b      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001baa:	2308      	movs	r3, #8
 8001bac:	e029      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e027      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001bb2:	2306      	movs	r3, #6
 8001bb4:	e025      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	e023      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e021      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e01f      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e01d      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e01b      	b.n	8001c02 <HAL_GPIO_Init+0x26a>
 8001bca:	bf00      	nop
 8001bcc:	58000080 	.word	0x58000080
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	58000400 	.word	0x58000400
 8001bd8:	58020000 	.word	0x58020000
 8001bdc:	58020400 	.word	0x58020400
 8001be0:	58020800 	.word	0x58020800
 8001be4:	58020c00 	.word	0x58020c00
 8001be8:	58021000 	.word	0x58021000
 8001bec:	58021400 	.word	0x58021400
 8001bf0:	58021800 	.word	0x58021800
 8001bf4:	58021c00 	.word	0x58021c00
 8001bf8:	58022000 	.word	0x58022000
 8001bfc:	58022400 	.word	0x58022400
 8001c00:	2300      	movs	r3, #0
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	f002 0203 	and.w	r2, r2, #3
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	4093      	lsls	r3, r2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c12:	4938      	ldr	r1, [pc, #224]	; (8001cf4 <HAL_GPIO_Init+0x35c>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f47f ae63 	bne.w	80019ac <HAL_GPIO_Init+0x14>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3724      	adds	r7, #36	; 0x24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	58000400 	.word	0x58000400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_PWREx_ConfigSupply+0xb0>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	2b06      	cmp	r3, #6
 8001d3e:	d00a      	beq.n	8001d56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_PWREx_ConfigSupply+0xb0>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d001      	beq.n	8001d52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e040      	b.n	8001dd4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e03e      	b.n	8001dd4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_PWREx_ConfigSupply+0xb0>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001d5e:	491f      	ldr	r1, [pc, #124]	; (8001ddc <HAL_PWREx_ConfigSupply+0xb0>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d66:	f7ff fa91 	bl	800128c <HAL_GetTick>
 8001d6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d6c:	e009      	b.n	8001d82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d6e:	f7ff fa8d 	bl	800128c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d7c:	d901      	bls.n	8001d82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e028      	b.n	8001dd4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_PWREx_ConfigSupply+0xb0>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b1e      	cmp	r3, #30
 8001d94:	d008      	beq.n	8001da8 <HAL_PWREx_ConfigSupply+0x7c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b2e      	cmp	r3, #46	; 0x2e
 8001d9a:	d005      	beq.n	8001da8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b1d      	cmp	r3, #29
 8001da0:	d002      	beq.n	8001da8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b2d      	cmp	r3, #45	; 0x2d
 8001da6:	d114      	bne.n	8001dd2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001da8:	f7ff fa70 	bl	800128c <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dae:	e009      	b.n	8001dc4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001db0:	f7ff fa6c 	bl	800128c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dbe:	d901      	bls.n	8001dc4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e007      	b.n	8001dd4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_PWREx_ConfigSupply+0xb0>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d1ee      	bne.n	8001db0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	58024800 	.word	0x58024800

08001de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	f000 bc1f 	b.w	8002632 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80b3 	beq.w	8001f68 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e02:	4b95      	ldr	r3, [pc, #596]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e0c:	4b92      	ldr	r3, [pc, #584]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d007      	beq.n	8001e28 <HAL_RCC_OscConfig+0x48>
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	2b18      	cmp	r3, #24
 8001e1c:	d112      	bne.n	8001e44 <HAL_RCC_OscConfig+0x64>
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	4b8b      	ldr	r3, [pc, #556]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8098 	beq.w	8001f66 <HAL_RCC_OscConfig+0x186>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 8093 	bne.w	8001f66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e3f6      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d106      	bne.n	8001e5c <HAL_RCC_OscConfig+0x7c>
 8001e4e:	4b82      	ldr	r3, [pc, #520]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a81      	ldr	r2, [pc, #516]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e058      	b.n	8001f0e <HAL_RCC_OscConfig+0x12e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d112      	bne.n	8001e8a <HAL_RCC_OscConfig+0xaa>
 8001e64:	4b7c      	ldr	r3, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7b      	ldr	r2, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b79      	ldr	r3, [pc, #484]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a78      	ldr	r2, [pc, #480]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b76      	ldr	r3, [pc, #472]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a75      	ldr	r2, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e041      	b.n	8001f0e <HAL_RCC_OscConfig+0x12e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e92:	d112      	bne.n	8001eba <HAL_RCC_OscConfig+0xda>
 8001e94:	4b70      	ldr	r3, [pc, #448]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a6f      	ldr	r2, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001e9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b6d      	ldr	r3, [pc, #436]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6c      	ldr	r2, [pc, #432]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ea6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a69      	ldr	r2, [pc, #420]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e029      	b.n	8001f0e <HAL_RCC_OscConfig+0x12e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001ec2:	d112      	bne.n	8001eea <HAL_RCC_OscConfig+0x10a>
 8001ec4:	4b64      	ldr	r3, [pc, #400]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a63      	ldr	r2, [pc, #396]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e011      	b.n	8001f0e <HAL_RCC_OscConfig+0x12e>
 8001eea:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5a      	ldr	r2, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b58      	ldr	r3, [pc, #352]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a57      	ldr	r2, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b55      	ldr	r3, [pc, #340]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a54      	ldr	r2, [pc, #336]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001f08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d013      	beq.n	8001f3e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff f9b9 	bl	800128c <HAL_GetTick>
 8001f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1e:	f7ff f9b5 	bl	800128c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e380      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f30:	4b49      	ldr	r3, [pc, #292]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x13e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f9a5 	bl	800128c <HAL_GetTick>
 8001f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f46:	f7ff f9a1 	bl	800128c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e36c      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f58:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x166>
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 808c 	beq.w	800208e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f7e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f80:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_RCC_OscConfig+0x1bc>
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	2b18      	cmp	r3, #24
 8001f90:	d137      	bne.n	8002002 <HAL_RCC_OscConfig+0x222>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d132      	bne.n	8002002 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1d4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e33e      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0219 	bic.w	r2, r3, #25
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4925      	ldr	r1, [pc, #148]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f961 	bl	800128c <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff f95d 	bl	800128c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e328      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	4917      	ldr	r1, [pc, #92]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002000:	e045      	b.n	800208e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d028      	beq.n	800205c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0219 	bic.w	r2, r3, #25
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	4910      	ldr	r1, [pc, #64]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f936 	bl	800128c <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff f932 	bl	800128c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e2fd      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	4901      	ldr	r1, [pc, #4]	; (8002058 <HAL_RCC_OscConfig+0x278>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
 8002056:	e01a      	b.n	800208e <HAL_RCC_OscConfig+0x2ae>
 8002058:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205c:	4b97      	ldr	r3, [pc, #604]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a96      	ldr	r2, [pc, #600]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff f910 	bl	800128c <HAL_GetTick>
 800206c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002070:	f7ff f90c 	bl	800128c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e2d7      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002082:	4b8e      	ldr	r3, [pc, #568]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d06a      	beq.n	8002170 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020a4:	4b85      	ldr	r3, [pc, #532]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d007      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2e0>
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b18      	cmp	r3, #24
 80020b4:	d11b      	bne.n	80020ee <HAL_RCC_OscConfig+0x30e>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d116      	bne.n	80020ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020c0:	4b7e      	ldr	r3, [pc, #504]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2f8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e2ac      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020d8:	4b78      	ldr	r3, [pc, #480]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	061b      	lsls	r3, r3, #24
 80020e6:	4975      	ldr	r1, [pc, #468]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020ec:	e040      	b.n	8002170 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d023      	beq.n	800213e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020f6:	4b71      	ldr	r3, [pc, #452]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a70      	ldr	r2, [pc, #448]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80020fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7ff f8c3 	bl	800128c <HAL_GetTick>
 8002106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800210a:	f7ff f8bf 	bl	800128c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e28a      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800211c:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002128:	4b64      	ldr	r3, [pc, #400]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	4961      	ldr	r1, [pc, #388]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	60cb      	str	r3, [r1, #12]
 800213c:	e018      	b.n	8002170 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5e      	ldr	r2, [pc, #376]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff f89f 	bl	800128c <HAL_GetTick>
 800214e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002152:	f7ff f89b 	bl	800128c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e266      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d036      	beq.n	80021ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002184:	4b4d      	ldr	r3, [pc, #308]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	4a4c      	ldr	r2, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f87c 	bl	800128c <HAL_GetTick>
 8002194:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff f878 	bl	800128c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e243      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021aa:	4b44      	ldr	r3, [pc, #272]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80021ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x3b8>
 80021b6:	e018      	b.n	80021ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80021ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021bc:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7ff f862 	bl	800128c <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff f85e 	bl	800128c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e229      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80021e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d036      	beq.n	8002264 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2e      	ldr	r2, [pc, #184]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002208:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800220a:	f7ff f83f 	bl	800128c <HAL_GetTick>
 800220e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002212:	f7ff f83b 	bl	800128c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e206      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x432>
 8002230:	e018      	b.n	8002264 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a21      	ldr	r2, [pc, #132]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 8002238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800223c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800223e:	f7ff f825 	bl	800128c <HAL_GetTick>
 8002242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002246:	f7ff f821 	bl	800128c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1ec      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80af 	beq.w	80023d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_OscConfig+0x4e0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_RCC_OscConfig+0x4e0>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800227e:	f7ff f805 	bl	800128c <HAL_GetTick>
 8002282:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7ff f801 	bl	800128c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1cc      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x4e0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4e4>
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6713      	str	r3, [r2, #112]	; 0x70
 80022b8:	e05b      	b.n	8002372 <HAL_RCC_OscConfig+0x592>
 80022ba:	bf00      	nop
 80022bc:	58024400 	.word	0x58024400
 80022c0:	58024800 	.word	0x58024800
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d112      	bne.n	80022f2 <HAL_RCC_OscConfig+0x512>
 80022cc:	4b9d      	ldr	r3, [pc, #628]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a9c      	ldr	r2, [pc, #624]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
 80022d8:	4b9a      	ldr	r3, [pc, #616]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a99      	ldr	r2, [pc, #612]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80022de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	4b97      	ldr	r3, [pc, #604]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a96      	ldr	r2, [pc, #600]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	e03f      	b.n	8002372 <HAL_RCC_OscConfig+0x592>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d112      	bne.n	8002320 <HAL_RCC_OscConfig+0x540>
 80022fa:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a91      	ldr	r2, [pc, #580]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b8f      	ldr	r3, [pc, #572]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a8e      	ldr	r2, [pc, #568]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800230c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
 8002312:	4b8c      	ldr	r3, [pc, #560]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a8b      	ldr	r2, [pc, #556]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	e028      	b.n	8002372 <HAL_RCC_OscConfig+0x592>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b85      	cmp	r3, #133	; 0x85
 8002326:	d112      	bne.n	800234e <HAL_RCC_OscConfig+0x56e>
 8002328:	4b86      	ldr	r3, [pc, #536]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a85      	ldr	r2, [pc, #532]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	4b83      	ldr	r3, [pc, #524]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a82      	ldr	r2, [pc, #520]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800233a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	4b80      	ldr	r3, [pc, #512]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a7f      	ldr	r2, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
 800234c:	e011      	b.n	8002372 <HAL_RCC_OscConfig+0x592>
 800234e:	4b7d      	ldr	r3, [pc, #500]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a7c      	ldr	r2, [pc, #496]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	4b7a      	ldr	r3, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	4a79      	ldr	r2, [pc, #484]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6713      	str	r3, [r2, #112]	; 0x70
 8002366:	4b77      	ldr	r3, [pc, #476]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	4a76      	ldr	r2, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800236c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe ff87 	bl	800128c <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe ff83 	bl	800128c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e14c      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ee      	beq.n	8002382 <HAL_RCC_OscConfig+0x5a2>
 80023a4:	e014      	b.n	80023d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe ff71 	bl	800128c <HAL_GetTick>
 80023aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe ff6d 	bl	800128c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e136      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023c4:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ee      	bne.n	80023ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 812b 	beq.w	8002630 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023da:	4b5a      	ldr	r3, [pc, #360]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e2:	2b18      	cmp	r3, #24
 80023e4:	f000 80bb 	beq.w	800255e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	f040 8095 	bne.w	800251c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b54      	ldr	r3, [pc, #336]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a53      	ldr	r2, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80023f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe ff45 	bl	800128c <HAL_GetTick>
 8002402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe ff41 	bl	800128c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e10c      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002424:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002428:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_OscConfig+0x768>)
 800242a:	4013      	ands	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	430a      	orrs	r2, r1
 8002438:	4942      	ldr	r1, [pc, #264]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800243a:	4313      	orrs	r3, r2
 800243c:	628b      	str	r3, [r1, #40]	; 0x28
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	3b01      	subs	r3, #1
 8002444:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	3b01      	subs	r3, #1
 800244e:	025b      	lsls	r3, r3, #9
 8002450:	b29b      	uxth	r3, r3
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	3b01      	subs	r3, #1
 800245a:	041b      	lsls	r3, r3, #16
 800245c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	3b01      	subs	r3, #1
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800246e:	4935      	ldr	r1, [pc, #212]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002470:	4313      	orrs	r3, r2
 8002472:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002474:	4b33      	ldr	r3, [pc, #204]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	4a32      	ldr	r2, [pc, #200]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002480:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCC_OscConfig+0x76c>)
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800248c:	00d2      	lsls	r2, r2, #3
 800248e:	492d      	ldr	r1, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002490:	4313      	orrs	r3, r2
 8002492:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	f023 020c 	bic.w	r2, r3, #12
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	4928      	ldr	r1, [pc, #160]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024a6:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f023 0202 	bic.w	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4924      	ldr	r1, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	4a21      	ldr	r2, [pc, #132]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	4a1e      	ldr	r2, [pc, #120]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	4a18      	ldr	r2, [pc, #96]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a15      	ldr	r2, [pc, #84]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe feca 	bl	800128c <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fec6 	bl	800128c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e091      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x71c>
 800251a:	e089      	b.n	8002630 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <HAL_RCC_OscConfig+0x764>)
 8002522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe feb0 	bl	800128c <HAL_GetTick>
 800252c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800252e:	e00f      	b.n	8002550 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe feac 	bl	800128c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d908      	bls.n	8002550 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e077      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
 8002542:	bf00      	nop
 8002544:	58024400 	.word	0x58024400
 8002548:	fffffc0c 	.word	0xfffffc0c
 800254c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002550:	4b3a      	ldr	r3, [pc, #232]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e9      	bne.n	8002530 <HAL_RCC_OscConfig+0x750>
 800255c:	e068      	b.n	8002630 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b01      	cmp	r3, #1
 8002570:	d031      	beq.n	80025d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d12a      	bne.n	80025d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d122      	bne.n	80025d6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d11a      	bne.n	80025d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	0a5b      	lsrs	r3, r3, #9
 80025a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d111      	bne.n	80025d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d108      	bne.n	80025d6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	0e1b      	lsrs	r3, r3, #24
 80025c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e02b      	b.n	8002632 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025e4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d01f      	beq.n	8002630 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025fc:	f7fe fe46 	bl	800128c <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002602:	bf00      	nop
 8002604:	f7fe fe42 	bl	800128c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	4293      	cmp	r3, r2
 800260e:	d0f9      	beq.n	8002604 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 8002612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_RCC_OscConfig+0x860>)
 8002616:	4013      	ands	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800261c:	00d2      	lsls	r2, r2, #3
 800261e:	4907      	ldr	r1, [pc, #28]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <HAL_RCC_OscConfig+0x85c>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3730      	adds	r7, #48	; 0x30
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	58024400 	.word	0x58024400
 8002640:	ffff0007 	.word	0xffff0007

08002644 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e19c      	b.n	8002992 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b8a      	ldr	r3, [pc, #552]	; (8002884 <HAL_RCC_ClockConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b87      	ldr	r3, [pc, #540]	; (8002884 <HAL_RCC_ClockConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	4985      	ldr	r1, [pc, #532]	; (8002884 <HAL_RCC_ClockConfig+0x240>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b83      	ldr	r3, [pc, #524]	; (8002884 <HAL_RCC_ClockConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e184      	b.n	8002992 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d010      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d908      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026a4:	4b78      	ldr	r3, [pc, #480]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4975      	ldr	r1, [pc, #468]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d908      	bls.n	80026e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	496a      	ldr	r1, [pc, #424]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d010      	beq.n	8002712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d908      	bls.n	8002712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002700:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	495e      	ldr	r1, [pc, #376]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 800270e:	4313      	orrs	r3, r2
 8002710:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d010      	beq.n	8002740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800272a:	429a      	cmp	r2, r3
 800272c:	d908      	bls.n	8002740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800272e:	4b56      	ldr	r3, [pc, #344]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4953      	ldr	r1, [pc, #332]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 800273c:	4313      	orrs	r3, r2
 800273e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d010      	beq.n	800276e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	429a      	cmp	r2, r3
 800275a:	d908      	bls.n	800276e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f023 020f 	bic.w	r2, r3, #15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4947      	ldr	r1, [pc, #284]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 800276a:	4313      	orrs	r3, r2
 800276c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d055      	beq.n	8002826 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4940      	ldr	r1, [pc, #256]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002788:	4313      	orrs	r3, r2
 800278a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002794:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d121      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0f6      	b.n	8002992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d115      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0ea      	b.n	8002992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0de      	b.n	8002992 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0d6      	b.n	8002992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f023 0207 	bic.w	r2, r3, #7
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4925      	ldr	r1, [pc, #148]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f6:	f7fe fd49 	bl	800128c <HAL_GetTick>
 80027fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f7fe fd45 	bl	800128c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0be      	b.n	8002992 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002814:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	429a      	cmp	r2, r3
 8002824:	d1eb      	bne.n	80027fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d010      	beq.n	8002854 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	429a      	cmp	r2, r3
 8002840:	d208      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	490e      	ldr	r1, [pc, #56]	; (8002888 <HAL_RCC_ClockConfig+0x244>)
 8002850:	4313      	orrs	r3, r2
 8002852:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d214      	bcs.n	800288c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_ClockConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 020f 	bic.w	r2, r3, #15
 800286a:	4906      	ldr	r1, [pc, #24]	; (8002884 <HAL_RCC_ClockConfig+0x240>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <HAL_RCC_ClockConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e086      	b.n	8002992 <HAL_RCC_ClockConfig+0x34e>
 8002884:	52002000 	.word	0x52002000
 8002888:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d010      	beq.n	80028ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d208      	bcs.n	80028ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028a8:	4b3c      	ldr	r3, [pc, #240]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	4939      	ldr	r1, [pc, #228]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d010      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d208      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	492e      	ldr	r1, [pc, #184]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002900:	429a      	cmp	r2, r3
 8002902:	d208      	bcs.n	8002916 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4922      	ldr	r1, [pc, #136]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 8002912:	4313      	orrs	r3, r2
 8002914:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d010      	beq.n	8002944 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800292e:	429a      	cmp	r2, r3
 8002930:	d208      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4917      	ldr	r1, [pc, #92]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 8002940:	4313      	orrs	r3, r2
 8002942:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002944:	f000 f834 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	4912      	ldr	r1, [pc, #72]	; (80029a0 <HAL_RCC_ClockConfig+0x35c>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_RCC_ClockConfig+0x358>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <HAL_RCC_ClockConfig+0x35c>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x360>)
 800297a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x364>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x368>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fc36 	bl	80011f8 <HAL_InitTick>
 800298c:	4603      	mov	r3, r0
 800298e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	58024400 	.word	0x58024400
 80029a0:	0800750c 	.word	0x0800750c
 80029a4:	24000004 	.word	0x24000004
 80029a8:	24000000 	.word	0x24000000
 80029ac:	24000008 	.word	0x24000008

080029b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b6:	4bb3      	ldr	r3, [pc, #716]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029be:	2b18      	cmp	r3, #24
 80029c0:	f200 8155 	bhi.w	8002c6e <HAL_RCC_GetSysClockFreq+0x2be>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	08002a31 	.word	0x08002a31
 80029d0:	08002c6f 	.word	0x08002c6f
 80029d4:	08002c6f 	.word	0x08002c6f
 80029d8:	08002c6f 	.word	0x08002c6f
 80029dc:	08002c6f 	.word	0x08002c6f
 80029e0:	08002c6f 	.word	0x08002c6f
 80029e4:	08002c6f 	.word	0x08002c6f
 80029e8:	08002c6f 	.word	0x08002c6f
 80029ec:	08002a57 	.word	0x08002a57
 80029f0:	08002c6f 	.word	0x08002c6f
 80029f4:	08002c6f 	.word	0x08002c6f
 80029f8:	08002c6f 	.word	0x08002c6f
 80029fc:	08002c6f 	.word	0x08002c6f
 8002a00:	08002c6f 	.word	0x08002c6f
 8002a04:	08002c6f 	.word	0x08002c6f
 8002a08:	08002c6f 	.word	0x08002c6f
 8002a0c:	08002a5d 	.word	0x08002a5d
 8002a10:	08002c6f 	.word	0x08002c6f
 8002a14:	08002c6f 	.word	0x08002c6f
 8002a18:	08002c6f 	.word	0x08002c6f
 8002a1c:	08002c6f 	.word	0x08002c6f
 8002a20:	08002c6f 	.word	0x08002c6f
 8002a24:	08002c6f 	.word	0x08002c6f
 8002a28:	08002c6f 	.word	0x08002c6f
 8002a2c:	08002a63 	.word	0x08002a63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a30:	4b94      	ldr	r3, [pc, #592]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a3c:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	4a90      	ldr	r2, [pc, #576]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a4e:	e111      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a50:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a52:	61bb      	str	r3, [r7, #24]
      break;
 8002a54:	e10e      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a56:	4b8d      	ldr	r3, [pc, #564]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a58:	61bb      	str	r3, [r7, #24]
      break;
 8002a5a:	e10b      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a5e:	61bb      	str	r3, [r7, #24]
      break;
 8002a60:	e108      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a62:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a6c:	4b85      	ldr	r3, [pc, #532]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a78:	4b82      	ldr	r3, [pc, #520]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a82:	4b80      	ldr	r3, [pc, #512]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	08db      	lsrs	r3, r3, #3
 8002a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80e1 	beq.w	8002c68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	f000 8083 	beq.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x204>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f200 80a1 	bhi.w	8002bf8 <HAL_RCC_GetSysClockFreq+0x248>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x114>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d056      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ac2:	e099      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02d      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	08db      	lsrs	r3, r3, #3
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	4a6b      	ldr	r2, [pc, #428]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afa:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b2a:	e087      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3e:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b6e:	e065      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b82:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bb2:	e043      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ca0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc6:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bf6:	e021      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	0a5b      	lsrs	r3, r3, #9
 8002c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c46:	3301      	adds	r3, #1
 8002c48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c60:	ee17 3a90 	vmov	r3, s15
 8002c64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
      break;
 8002c6c:	e002      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c6e:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c70:	61bb      	str	r3, [r7, #24]
      break;
 8002c72:	bf00      	nop
  }

  return sysclockfreq;
 8002c74:	69bb      	ldr	r3, [r7, #24]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3724      	adds	r7, #36	; 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	58024400 	.word	0x58024400
 8002c88:	03d09000 	.word	0x03d09000
 8002c8c:	003d0900 	.word	0x003d0900
 8002c90:	007a1200 	.word	0x007a1200
 8002c94:	46000000 	.word	0x46000000
 8002c98:	4c742400 	.word	0x4c742400
 8002c9c:	4a742400 	.word	0x4a742400
 8002ca0:	4af42400 	.word	0x4af42400

08002ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002caa:	f7ff fe81 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490f      	ldr	r1, [pc, #60]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8002ce0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ce2:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	0800750c 	.word	0x0800750c
 8002cfc:	24000004 	.word	0x24000004
 8002d00:	24000000 	.word	0x24000000

08002d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002d08:	f7ff ffcc 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4904      	ldr	r1, [pc, #16]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	0800750c 	.word	0x0800750c

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002d34:	f7ff ffb6 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	58024400 	.word	0x58024400
 8002d58:	0800750c 	.word	0x0800750c

08002d5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d60:	b0c8      	sub	sp, #288	; 0x120
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002d80:	2500      	movs	r5, #0
 8002d82:	ea54 0305 	orrs.w	r3, r4, r5
 8002d86:	d049      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d92:	d02f      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d98:	d828      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d9e:	d01a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002da4:	d822      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dae:	d007      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002db0:	e01c      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db2:	4ba7      	ldr	r3, [pc, #668]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	4aa6      	ldr	r2, [pc, #664]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dbe:	e01a      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 fc43 	bl	8004654 <RCCEx_PLL2_Config>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dd4:	e00f      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dda:	3328      	adds	r3, #40	; 0x28
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 fcea 	bl	80047b8 <RCCEx_PLL3_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dea:	e004      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002dfe:	4b94      	ldr	r3, [pc, #592]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e0c:	4a90      	ldr	r2, [pc, #576]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	6513      	str	r3, [r2, #80]	; 0x50
 8002e12:	e003      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002e28:	f04f 0900 	mov.w	r9, #0
 8002e2c:	ea58 0309 	orrs.w	r3, r8, r9
 8002e30:	d047      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d82a      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e59 	.word	0x08002e59
 8002e48:	08002e67 	.word	0x08002e67
 8002e4c:	08002e7d 	.word	0x08002e7d
 8002e50:	08002e9b 	.word	0x08002e9b
 8002e54:	08002e9b 	.word	0x08002e9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e58:	4b7d      	ldr	r3, [pc, #500]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4a7c      	ldr	r2, [pc, #496]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e64:	e01a      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 fbf0 	bl	8004654 <RCCEx_PLL2_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e7a:	e00f      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e80:	3328      	adds	r3, #40	; 0x28
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fc97 	bl	80047b8 <RCCEx_PLL3_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e90:	e004      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea8:	f023 0107 	bic.w	r1, r3, #7
 8002eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a67      	ldr	r2, [pc, #412]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6513      	str	r3, [r2, #80]	; 0x50
 8002eb8:	e003      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ebe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002ece:	f04f 0b00 	mov.w	fp, #0
 8002ed2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ed6:	d054      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ee2:	d036      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002ee4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ee8:	d82f      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eee:	d032      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef4:	d829      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ef8:	d02f      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002efa:	2bc0      	cmp	r3, #192	; 0xc0
 8002efc:	d825      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d018      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d821      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d007      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002f0e:	e01c      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f10:	4b4f      	ldr	r3, [pc, #316]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	4a4e      	ldr	r2, [pc, #312]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002f1c:	e01e      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f22:	3308      	adds	r3, #8
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 fb94 	bl	8004654 <RCCEx_PLL2_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002f32:	e013      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f38:	3328      	adds	r3, #40	; 0x28
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 fc3b 	bl	80047b8 <RCCEx_PLL3_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002f48:	e008      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f50:	e004      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f68:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	4a37      	ldr	r2, [pc, #220]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6513      	str	r3, [r2, #80]	; 0x50
 8002f78:	e003      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002f8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	d05c      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002fac:	d03b      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002fae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002fb2:	d834      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb8:	d037      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbe:	d82e      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002fc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fc4:	d033      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fc6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fca:	d828      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd0:	d01a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd6:	d822      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe0:	d007      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002fe2:	e01c      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002ff0:	e01e      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f001 fb2a 	bl	8004654 <RCCEx_PLL2_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003006:	e013      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800300c:	3328      	adds	r3, #40	; 0x28
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f001 fbd1 	bl	80047b8 <RCCEx_PLL3_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800301c:	e008      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003024:	e004      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003026:	bf00      	nop
 8003028:	e002      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800302e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003030:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800303a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003046:	4a02      	ldr	r2, [pc, #8]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003048:	430b      	orrs	r3, r1
 800304a:	6513      	str	r3, [r2, #80]	; 0x50
 800304c:	e006      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800304e:	bf00      	nop
 8003050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003058:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800305c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800306c:	2300      	movs	r3, #0
 800306e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003072:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003076:	460b      	mov	r3, r1
 8003078:	4313      	orrs	r3, r2
 800307a:	d03a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800307c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	2b30      	cmp	r3, #48	; 0x30
 8003084:	d01f      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	d819      	bhi.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800308a:	2b20      	cmp	r3, #32
 800308c:	d00c      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800308e:	2b20      	cmp	r3, #32
 8003090:	d815      	bhi.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003096:	2b10      	cmp	r3, #16
 8003098:	d111      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309a:	4bae      	ldr	r3, [pc, #696]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	4aad      	ldr	r2, [pc, #692]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030a6:	e011      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ac:	3308      	adds	r3, #8
 80030ae:	2102      	movs	r1, #2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 facf 	bl	8004654 <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80030ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80030d4:	4b9f      	ldr	r3, [pc, #636]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80030dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	4a9c      	ldr	r2, [pc, #624]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030e4:	430b      	orrs	r3, r1
 80030e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e8:	e003      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80030fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003108:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800310c:	460b      	mov	r3, r1
 800310e:	4313      	orrs	r3, r2
 8003110:	d051      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800311c:	d035      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800311e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003122:	d82e      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003124:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003128:	d031      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800312a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800312e:	d828      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003134:	d01a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313a:	d822      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	d007      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003146:	e01c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003148:	4b82      	ldr	r3, [pc, #520]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4a81      	ldr	r2, [pc, #516]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800314e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003154:	e01c      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315a:	3308      	adds	r3, #8
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f001 fa78 	bl	8004654 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800316a:	e011      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003170:	3328      	adds	r3, #40	; 0x28
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f001 fb1f 	bl	80047b8 <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003180:	e006      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003188:	e002      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800318e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003190:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003198:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80031a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a6:	4a6b      	ldr	r2, [pc, #428]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6513      	str	r3, [r2, #80]	; 0x50
 80031ac:	e003      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80031c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80031d0:	460b      	mov	r3, r1
 80031d2:	4313      	orrs	r3, r2
 80031d4:	d053      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80031d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e0:	d033      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80031e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e6:	d82c      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80031e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031ec:	d02f      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80031ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031f2:	d826      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80031f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031f8:	d02b      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80031fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031fe:	d820      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003204:	d012      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800320a:	d81a      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d022      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d115      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321a:	3308      	adds	r3, #8
 800321c:	2101      	movs	r1, #1
 800321e:	4618      	mov	r0, r3
 8003220:	f001 fa18 	bl	8004654 <RCCEx_PLL2_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800322a:	e015      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800322c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003230:	3328      	adds	r3, #40	; 0x28
 8003232:	2101      	movs	r1, #1
 8003234:	4618      	mov	r0, r3
 8003236:	f001 fabf 	bl	80047b8 <RCCEx_PLL3_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003240:	e00a      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003248:	e006      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800324a:	bf00      	nop
 800324c:	e004      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003258:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003260:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003264:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800326c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800326e:	4a39      	ldr	r2, [pc, #228]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003270:	430b      	orrs	r3, r1
 8003272:	6513      	str	r3, [r2, #80]	; 0x50
 8003274:	e003      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003276:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800327a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800327e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800328a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003294:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003298:	460b      	mov	r3, r1
 800329a:	4313      	orrs	r3, r2
 800329c:	d060      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800329e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80032aa:	d039      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80032ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80032b0:	d832      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b6:	d035      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80032b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032bc:	d82c      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c2:	d031      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d826      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032ce:	d02d      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80032d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032d4:	d820      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032da:	d012      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80032dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e0:	d81a      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d024      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ea:	d115      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f0:	3308      	adds	r3, #8
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 f9ad 	bl	8004654 <RCCEx_PLL2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003300:	e017      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003306:	3328      	adds	r3, #40	; 0x28
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fa54 	bl	80047b8 <RCCEx_PLL3_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003316:	e00c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800331e:	e008      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003320:	bf00      	nop
 8003322:	e006      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003324:	bf00      	nop
 8003326:	e004      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003328:	bf00      	nop
 800332a:	e002      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800332c:	bf00      	nop
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003332:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10e      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800334a:	4a02      	ldr	r2, [pc, #8]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800334c:	430b      	orrs	r3, r1
 800334e:	6593      	str	r3, [r2, #88]	; 0x58
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003352:	bf00      	nop
 8003354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800335c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800337a:	460b      	mov	r3, r1
 800337c:	4313      	orrs	r3, r2
 800337e:	d037      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800338a:	d00e      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800338c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003390:	d816      	bhi.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d018      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800339a:	d111      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800339c:	4bc4      	ldr	r3, [pc, #784]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	4ac3      	ldr	r2, [pc, #780]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033a8:	e00f      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ae:	3308      	adds	r3, #8
 80033b0:	2101      	movs	r1, #1
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 f94e 	bl	8004654 <RCCEx_PLL2_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033be:	e004      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033c6:	e000      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80033c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033d2:	4bb7      	ldr	r3, [pc, #732]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033e0:	4ab3      	ldr	r2, [pc, #716]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6513      	str	r3, [r2, #80]	; 0x50
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80033fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003406:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d039      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	2b03      	cmp	r3, #3
 8003418:	d81c      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	0800345d 	.word	0x0800345d
 8003424:	08003431 	.word	0x08003431
 8003428:	0800343f 	.word	0x0800343f
 800342c:	0800345d 	.word	0x0800345d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003430:	4b9f      	ldr	r3, [pc, #636]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	4a9e      	ldr	r2, [pc, #632]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800343c:	e00f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800343e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003442:	3308      	adds	r3, #8
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f001 f904 	bl	8004654 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003452:	e004      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003466:	4b92      	ldr	r3, [pc, #584]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	f023 0103 	bic.w	r1, r3, #3
 800346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	4a8e      	ldr	r2, [pc, #568]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003476:	430b      	orrs	r3, r1
 8003478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800347a:	e003      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003480:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800349a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800349e:	460b      	mov	r3, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f000 8099 	beq.w	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a6:	4b83      	ldr	r3, [pc, #524]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a82      	ldr	r2, [pc, #520]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034b2:	f7fd feeb 	bl	800128c <HAL_GetTick>
 80034b6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ba:	e00b      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fd fee6 	bl	800128c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d903      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034d2:	e005      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d4:	4b77      	ldr	r3, [pc, #476]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ed      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80034e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d173      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034e8:	4b71      	ldr	r3, [pc, #452]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034f4:	4053      	eors	r3, r2
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d015      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034fe:	4b6c      	ldr	r3, [pc, #432]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003506:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800350a:	4b69      	ldr	r3, [pc, #420]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a68      	ldr	r2, [pc, #416]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003516:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a65      	ldr	r2, [pc, #404]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003522:	4a63      	ldr	r2, [pc, #396]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003536:	d118      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd fea8 	bl	800128c <HAL_GetTick>
 800353c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003540:	e00d      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fd fea3 	bl	800128c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800354c:	1ad2      	subs	r2, r2, r3
 800354e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003552:	429a      	cmp	r2, r3
 8003554:	d903      	bls.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800355c:	e005      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800355e:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0eb      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800356a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800356e:	2b00      	cmp	r3, #0
 8003570:	d129      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003582:	d10e      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003584:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003590:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003594:	091a      	lsrs	r2, r3, #4
 8003596:	4b48      	ldr	r3, [pc, #288]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003598:	4013      	ands	r3, r2
 800359a:	4a45      	ldr	r2, [pc, #276]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800359c:	430b      	orrs	r3, r1
 800359e:	6113      	str	r3, [r2, #16]
 80035a0:	e005      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80035a2:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	4a42      	ldr	r2, [pc, #264]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035ac:	6113      	str	r3, [r2, #16]
 80035ae:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80035b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	e008      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80035ce:	e003      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f002 0301 	and.w	r3, r2, #1
 80035e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f000 8090 	beq.w	800371a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80035fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003602:	2b28      	cmp	r3, #40	; 0x28
 8003604:	d870      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003606:	a201      	add	r2, pc, #4	; (adr r2, 800360c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	080036f1 	.word	0x080036f1
 8003610:	080036e9 	.word	0x080036e9
 8003614:	080036e9 	.word	0x080036e9
 8003618:	080036e9 	.word	0x080036e9
 800361c:	080036e9 	.word	0x080036e9
 8003620:	080036e9 	.word	0x080036e9
 8003624:	080036e9 	.word	0x080036e9
 8003628:	080036e9 	.word	0x080036e9
 800362c:	080036bd 	.word	0x080036bd
 8003630:	080036e9 	.word	0x080036e9
 8003634:	080036e9 	.word	0x080036e9
 8003638:	080036e9 	.word	0x080036e9
 800363c:	080036e9 	.word	0x080036e9
 8003640:	080036e9 	.word	0x080036e9
 8003644:	080036e9 	.word	0x080036e9
 8003648:	080036e9 	.word	0x080036e9
 800364c:	080036d3 	.word	0x080036d3
 8003650:	080036e9 	.word	0x080036e9
 8003654:	080036e9 	.word	0x080036e9
 8003658:	080036e9 	.word	0x080036e9
 800365c:	080036e9 	.word	0x080036e9
 8003660:	080036e9 	.word	0x080036e9
 8003664:	080036e9 	.word	0x080036e9
 8003668:	080036e9 	.word	0x080036e9
 800366c:	080036f1 	.word	0x080036f1
 8003670:	080036e9 	.word	0x080036e9
 8003674:	080036e9 	.word	0x080036e9
 8003678:	080036e9 	.word	0x080036e9
 800367c:	080036e9 	.word	0x080036e9
 8003680:	080036e9 	.word	0x080036e9
 8003684:	080036e9 	.word	0x080036e9
 8003688:	080036e9 	.word	0x080036e9
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080036e9 	.word	0x080036e9
 8003694:	080036e9 	.word	0x080036e9
 8003698:	080036e9 	.word	0x080036e9
 800369c:	080036e9 	.word	0x080036e9
 80036a0:	080036e9 	.word	0x080036e9
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036f1 	.word	0x080036f1
 80036b0:	58024400 	.word	0x58024400
 80036b4:	58024800 	.word	0x58024800
 80036b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c0:	3308      	adds	r3, #8
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 ffc5 	bl	8004654 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036d0:	e00f      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d6:	3328      	adds	r3, #40	; 0x28
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 f86c 	bl	80047b8 <RCCEx_PLL3_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036e6:	e004      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80036f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036fa:	4bc0      	ldr	r3, [pc, #768]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370a:	4abc      	ldr	r2, [pc, #752]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800370c:	430b      	orrs	r3, r1
 800370e:	6553      	str	r3, [r2, #84]	; 0x54
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003716:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800371a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f002 0302 	and.w	r3, r2, #2
 8003726:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003730:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003734:	460b      	mov	r3, r1
 8003736:	4313      	orrs	r3, r2
 8003738:	d043      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800373a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003742:	2b05      	cmp	r3, #5
 8003744:	d824      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	08003799 	.word	0x08003799
 8003750:	08003765 	.word	0x08003765
 8003754:	0800377b 	.word	0x0800377b
 8003758:	08003799 	.word	0x08003799
 800375c:	08003799 	.word	0x08003799
 8003760:	08003799 	.word	0x08003799
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003768:	3308      	adds	r3, #8
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f000 ff71 	bl	8004654 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003778:	e00f      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800377a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377e:	3328      	adds	r3, #40	; 0x28
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f001 f818 	bl	80047b8 <RCCEx_PLL3_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800378e:	e004      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003796:	e000      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037a2:	4b96      	ldr	r3, [pc, #600]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f023 0107 	bic.w	r1, r3, #7
 80037aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b2:	4a92      	ldr	r2, [pc, #584]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6553      	str	r3, [r2, #84]	; 0x54
 80037b8:	e003      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f002 0304 	and.w	r3, r2, #4
 80037ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037d2:	2300      	movs	r3, #0
 80037d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037d8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80037dc:	460b      	mov	r3, r1
 80037de:	4313      	orrs	r3, r2
 80037e0:	d043      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d824      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80037ee:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003841 	.word	0x08003841
 80037f8:	0800380d 	.word	0x0800380d
 80037fc:	08003823 	.word	0x08003823
 8003800:	08003841 	.word	0x08003841
 8003804:	08003841 	.word	0x08003841
 8003808:	08003841 	.word	0x08003841
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800380c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003810:	3308      	adds	r3, #8
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 ff1d 	bl	8004654 <RCCEx_PLL2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003820:	e00f      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003826:	3328      	adds	r3, #40	; 0x28
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f000 ffc4 	bl	80047b8 <RCCEx_PLL3_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003836:	e004      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800383e:	e000      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003842:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384a:	4b6c      	ldr	r3, [pc, #432]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	f023 0107 	bic.w	r1, r3, #7
 8003852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800385a:	4a68      	ldr	r2, [pc, #416]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800385c:	430b      	orrs	r3, r1
 800385e:	6593      	str	r3, [r2, #88]	; 0x58
 8003860:	e003      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003862:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003866:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800386a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f002 0320 	and.w	r3, r2, #32
 8003876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003884:	460b      	mov	r3, r1
 8003886:	4313      	orrs	r3, r2
 8003888:	d055      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800388a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003896:	d033      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800389c:	d82c      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a2:	d02f      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d826      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80038aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ae:	d02b      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80038b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038b4:	d820      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80038b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ba:	d012      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80038bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c0:	d81a      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d022      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80038c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ca:	d115      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d0:	3308      	adds	r3, #8
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 febd 	bl	8004654 <RCCEx_PLL2_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038e0:	e015      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e6:	3328      	adds	r3, #40	; 0x28
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 ff64 	bl	80047b8 <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038f6:	e00a      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038fe:	e006      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003900:	bf00      	nop
 8003902:	e004      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003904:	bf00      	nop
 8003906:	e002      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003908:	bf00      	nop
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800390c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800391e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003922:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003926:	4a35      	ldr	r2, [pc, #212]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003928:	430b      	orrs	r3, r1
 800392a:	6553      	str	r3, [r2, #84]	; 0x54
 800392c:	e003      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003932:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003946:	2300      	movs	r3, #0
 8003948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800394c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003950:	460b      	mov	r3, r1
 8003952:	4313      	orrs	r3, r2
 8003954:	d058      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800395e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003962:	d033      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003964:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003968:	d82c      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	d02f      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003974:	d826      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397a:	d02b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800397c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003980:	d820      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003986:	d012      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398c:	d81a      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d022      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d115      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399c:	3308      	adds	r3, #8
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fe57 	bl	8004654 <RCCEx_PLL2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039ac:	e015      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b2:	3328      	adds	r3, #40	; 0x28
 80039b4:	2102      	movs	r1, #2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fefe 	bl	80047b8 <RCCEx_PLL3_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039c2:	e00a      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039ca:	e006      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80039cc:	bf00      	nop
 80039ce:	e004      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80039d0:	bf00      	nop
 80039d2:	e002      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80039d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80039ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039f2:	4a02      	ldr	r2, [pc, #8]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6593      	str	r3, [r2, #88]	; 0x58
 80039f8:	e006      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80039fa:	bf00      	nop
 80039fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d055      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a34:	d033      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003a36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a3a:	d82c      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a40:	d02f      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a46:	d826      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003a48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a4c:	d02b      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003a4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a52:	d820      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a58:	d012      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5e:	d81a      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d022      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a68:	d115      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6e:	3308      	adds	r3, #8
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fdee 	bl	8004654 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a7e:	e015      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a84:	3328      	adds	r3, #40	; 0x28
 8003a86:	2102      	movs	r1, #2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fe95 	bl	80047b8 <RCCEx_PLL3_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a94:	e00a      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a9c:	e006      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003a9e:	bf00      	nop
 8003aa0:	e004      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ab4:	4ba1      	ldr	r3, [pc, #644]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ac4:	4a9d      	ldr	r2, [pc, #628]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aca:	e003      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ad0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f002 0308 	and.w	r3, r2, #8
 8003ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003aea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003aee:	460b      	mov	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	d01e      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b06:	3328      	adds	r3, #40	; 0x28
 8003b08:	2102      	movs	r1, #2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fe54 	bl	80047b8 <RCCEx_PLL3_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b1c:	4b87      	ldr	r3, [pc, #540]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2c:	4a83      	ldr	r2, [pc, #524]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f002 0310 	and.w	r3, r2, #16
 8003b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d01e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5e:	d10c      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b64:	3328      	adds	r3, #40	; 0x28
 8003b66:	2102      	movs	r1, #2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fe25 	bl	80047b8 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b7a:	4b70      	ldr	r3, [pc, #448]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b8a:	4a6c      	ldr	r2, [pc, #432]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ba6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
 8003bae:	d03e      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bbc:	d022      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc2:	d81b      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d00b      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003bce:	e015      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fd3b 	bl	8004654 <RCCEx_PLL2_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003be4:	e00f      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bea:	3328      	adds	r3, #40	; 0x28
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fde2 	bl	80047b8 <RCCEx_PLL3_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bfa:	e004      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c02:	e000      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c0e:	4b4b      	ldr	r3, [pc, #300]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c1e:	4a47      	ldr	r2, [pc, #284]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6593      	str	r3, [r2, #88]	; 0x58
 8003c24:	e003      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003c3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c44:	460b      	mov	r3, r1
 8003c46:	4313      	orrs	r3, r2
 8003c48:	d03b      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c56:	d01f      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003c58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c5c:	d818      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c62:	d003      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c68:	d007      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003c6a:	e011      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4b33      	ldr	r3, [pc, #204]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a32      	ldr	r2, [pc, #200]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c78:	e00f      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7e:	3328      	adds	r3, #40	; 0x28
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fd98 	bl	80047b8 <RCCEx_PLL3_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c8e:	e004      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6553      	str	r3, [r2, #84]	; 0x54
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003cce:	673b      	str	r3, [r7, #112]	; 0x70
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	677b      	str	r3, [r7, #116]	; 0x74
 8003cd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	d034      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d007      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003cee:	e011      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00e      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d02:	3308      	adds	r3, #8
 8003d04:	2102      	movs	r1, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fca4 	bl	8004654 <RCCEx_PLL2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d12:	e003      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d32:	4a02      	ldr	r2, [pc, #8]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d56:	2300      	movs	r3, #0
 8003d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d00c      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d68:	3328      	adds	r3, #40	; 0x28
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fd23 	bl	80047b8 <RCCEx_PLL3_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d038      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da6:	d018      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dac:	d811      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db2:	d014      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db8:	d80b      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d011      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc2:	d106      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc4:	4bc3      	ldr	r3, [pc, #780]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	4ac2      	ldr	r2, [pc, #776]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dd8:	e004      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10b      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dec:	4bb9      	ldr	r3, [pc, #740]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	4ab5      	ldr	r2, [pc, #724]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6553      	str	r3, [r2, #84]	; 0x54
 8003e02:	e003      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003e18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e28:	4baa      	ldr	r3, [pc, #680]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e36:	4aa7      	ldr	r2, [pc, #668]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e58:	4b9e      	ldr	r3, [pc, #632]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	4a9b      	ldr	r2, [pc, #620]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003e88:	4b92      	ldr	r3, [pc, #584]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	4a8f      	ldr	r2, [pc, #572]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eaa:	2300      	movs	r3, #0
 8003eac:	647b      	str	r3, [r7, #68]	; 0x44
 8003eae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eb8:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	4a85      	ldr	r2, [pc, #532]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ec2:	6113      	str	r3, [r2, #16]
 8003ec4:	4b83      	ldr	r3, [pc, #524]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ec6:	6919      	ldr	r1, [r3, #16]
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ed0:	4a80      	ldr	r2, [pc, #512]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003eec:	460b      	mov	r3, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ef2:	4b78      	ldr	r3, [pc, #480]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	4a74      	ldr	r2, [pc, #464]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f02:	430b      	orrs	r3, r1
 8003f04:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
 8003f14:	2300      	movs	r3, #0
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
 8003f18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f22:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	2100      	movs	r1, #0
 8003f42:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4313      	orrs	r3, r2
 8003f52:	d011      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f58:	3308      	adds	r3, #8
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fb79 	bl	8004654 <RCCEx_PLL2_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	2100      	movs	r1, #0
 8003f82:	6239      	str	r1, [r7, #32]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d011      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f98:	3308      	adds	r3, #8
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fb59 	bl	8004654 <RCCEx_PLL2_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	61b9      	str	r1, [r7, #24]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	d011      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd8:	3308      	adds	r3, #8
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb39 	bl	8004654 <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ff4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	2100      	movs	r1, #0
 8004002:	6139      	str	r1, [r7, #16]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d011      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004018:	3328      	adds	r3, #40	; 0x28
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fbcb 	bl	80047b8 <RCCEx_PLL3_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004028:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004034:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	2100      	movs	r1, #0
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	d011      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004058:	3328      	adds	r3, #40	; 0x28
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fbab 	bl	80047b8 <RCCEx_PLL3_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004074:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	2100      	movs	r1, #0
 8004082:	6039      	str	r1, [r7, #0]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800408e:	460b      	mov	r3, r1
 8004090:	4313      	orrs	r3, r2
 8004092:	d011      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004098:	3328      	adds	r3, #40	; 0x28
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fb8b 	bl	80047b8 <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80040a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80040b8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80040cc:	46bd      	mov	sp, r7
 80040ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d2:	bf00      	nop
 80040d4:	58024400 	.word	0x58024400

080040d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80040dc:	f7fe fde2 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4904      	ldr	r1, [pc, #16]	; (8004100 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	58024400 	.word	0x58024400
 8004100:	0800750c 	.word	0x0800750c

08004104 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800410c:	4ba1      	ldr	r3, [pc, #644]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004116:	4b9f      	ldr	r3, [pc, #636]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	0b1b      	lsrs	r3, r3, #12
 800411c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004120:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004122:	4b9c      	ldr	r3, [pc, #624]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800412e:	4b99      	ldr	r3, [pc, #612]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004146:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8111 	beq.w	8004374 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b02      	cmp	r3, #2
 8004156:	f000 8083 	beq.w	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b02      	cmp	r3, #2
 800415e:	f200 80a1 	bhi.w	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d056      	beq.n	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800416e:	e099      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004170:	4b88      	ldr	r3, [pc, #544]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d02d      	beq.n	80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800417c:	4b85      	ldr	r3, [pc, #532]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	08db      	lsrs	r3, r3, #3
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	4a84      	ldr	r2, [pc, #528]	; (8004398 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
 800418c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	ee07 3a90 	vmov	s15, r3
 8004194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800439c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041d6:	e087      	b.n	80042e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ea:	4b6a      	ldr	r3, [pc, #424]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800439c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421a:	e065      	b.n	80042e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	4b59      	ldr	r3, [pc, #356]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004242:	eddf 5a56 	vldr	s11, [pc, #344]	; 800439c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800425e:	e043      	b.n	80042e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800426e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004272:	4b48      	ldr	r3, [pc, #288]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	ed97 6a03 	vldr	s12, [r7, #12]
 8004286:	eddf 5a45 	vldr	s11, [pc, #276]	; 800439c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800428a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a2:	e021      	b.n	80042e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b6:	4b37      	ldr	r3, [pc, #220]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800439c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	0a5b      	lsrs	r3, r3, #9
 80042ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004302:	edd7 6a07 	vldr	s13, [r7, #28]
 8004306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800430a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430e:	ee17 2a90 	vmov	r2, s15
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004316:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	0c1b      	lsrs	r3, r3, #16
 800431c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800432c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004330:	edd7 6a07 	vldr	s13, [r7, #28]
 8004334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433c:	ee17 2a90 	vmov	r2, s15
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	0e1b      	lsrs	r3, r3, #24
 800434a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800435a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800435e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800436a:	ee17 2a90 	vmov	r2, s15
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004372:	e008      	b.n	8004386 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
}
 8004386:	bf00      	nop
 8004388:	3724      	adds	r7, #36	; 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	58024400 	.word	0x58024400
 8004398:	03d09000 	.word	0x03d09000
 800439c:	46000000 	.word	0x46000000
 80043a0:	4c742400 	.word	0x4c742400
 80043a4:	4a742400 	.word	0x4a742400
 80043a8:	4af42400 	.word	0x4af42400

080043ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b089      	sub	sp, #36	; 0x24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043b4:	4ba1      	ldr	r3, [pc, #644]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043be:	4b9f      	ldr	r3, [pc, #636]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	0d1b      	lsrs	r3, r3, #20
 80043c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043ca:	4b9c      	ldr	r3, [pc, #624]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043d6:	4b99      	ldr	r3, [pc, #612]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	08db      	lsrs	r3, r3, #3
 80043dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8111 	beq.w	800461c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	f000 8083 	beq.w	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b02      	cmp	r3, #2
 8004406:	f200 80a1 	bhi.w	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d056      	beq.n	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004416:	e099      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004418:	4b88      	ldr	r3, [pc, #544]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02d      	beq.n	8004480 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004424:	4b85      	ldr	r3, [pc, #532]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	08db      	lsrs	r3, r3, #3
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	4a84      	ldr	r2, [pc, #528]	; (8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b7b      	ldr	r3, [pc, #492]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004462:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800447e:	e087      	b.n	8004590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b6a      	ldr	r3, [pc, #424]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c2:	e065      	b.n	8004590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800464c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b59      	ldr	r3, [pc, #356]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004506:	e043      	b.n	8004590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b48      	ldr	r3, [pc, #288]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454a:	e021      	b.n	8004590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800464c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800455a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455e:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004572:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004590:	4b2a      	ldr	r3, [pc, #168]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	0a5b      	lsrs	r3, r3, #9
 8004596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b6:	ee17 2a90 	vmov	r2, s15
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80045be:	4b1f      	ldr	r3, [pc, #124]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e4:	ee17 2a90 	vmov	r2, s15
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004606:	edd7 6a07 	vldr	s13, [r7, #28]
 800460a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004612:	ee17 2a90 	vmov	r2, s15
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800461a:	e008      	b.n	800462e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	609a      	str	r2, [r3, #8]
}
 800462e:	bf00      	nop
 8004630:	3724      	adds	r7, #36	; 0x24
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	58024400 	.word	0x58024400
 8004640:	03d09000 	.word	0x03d09000
 8004644:	46000000 	.word	0x46000000
 8004648:	4c742400 	.word	0x4c742400
 800464c:	4a742400 	.word	0x4a742400
 8004650:	4af42400 	.word	0x4af42400

08004654 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004662:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b03      	cmp	r3, #3
 800466c:	d101      	bne.n	8004672 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e099      	b.n	80047a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004672:	4b4f      	ldr	r3, [pc, #316]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a4e      	ldr	r2, [pc, #312]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004678:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800467c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467e:	f7fc fe05 	bl	800128c <HAL_GetTick>
 8004682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004684:	e008      	b.n	8004698 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004686:	f7fc fe01 	bl	800128c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e086      	b.n	80047a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004698:	4b45      	ldr	r3, [pc, #276]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	031b      	lsls	r3, r3, #12
 80046b2:	493f      	ldr	r1, [pc, #252]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	628b      	str	r3, [r1, #40]	; 0x28
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	3b01      	subs	r3, #1
 80046be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	025b      	lsls	r3, r3, #9
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	041b      	lsls	r3, r3, #16
 80046d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046e8:	4931      	ldr	r1, [pc, #196]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046ee:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	492d      	ldr	r1, [pc, #180]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	f023 0220 	bic.w	r2, r3, #32
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	4928      	ldr	r1, [pc, #160]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004712:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004718:	f023 0310 	bic.w	r3, r3, #16
 800471c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <RCCEx_PLL2_Config+0x160>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	69d2      	ldr	r2, [r2, #28]
 800472a:	00d2      	lsls	r2, r2, #3
 800472c:	4920      	ldr	r1, [pc, #128]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004732:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004738:	f043 0310 	orr.w	r3, r3, #16
 800473c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004744:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800474a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800474e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004750:	e00f      	b.n	8004772 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004764:	e005      	b.n	8004772 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800476c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0e      	ldr	r2, [pc, #56]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 8004778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800477c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477e:	f7fc fd85 	bl	800128c <HAL_GetTick>
 8004782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004784:	e008      	b.n	8004798 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004786:	f7fc fd81 	bl	800128c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e006      	b.n	80047a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <RCCEx_PLL2_Config+0x15c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	58024400 	.word	0x58024400
 80047b4:	ffff0007 	.word	0xffff0007

080047b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047c6:	4b53      	ldr	r3, [pc, #332]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d101      	bne.n	80047d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e099      	b.n	800490a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047d6:	4b4f      	ldr	r3, [pc, #316]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a4e      	ldr	r2, [pc, #312]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e2:	f7fc fd53 	bl	800128c <HAL_GetTick>
 80047e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047e8:	e008      	b.n	80047fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047ea:	f7fc fd4f 	bl	800128c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e086      	b.n	800490a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047fc:	4b45      	ldr	r3, [pc, #276]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f0      	bne.n	80047ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004808:	4b42      	ldr	r3, [pc, #264]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	051b      	lsls	r3, r3, #20
 8004816:	493f      	ldr	r1, [pc, #252]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004818:	4313      	orrs	r3, r2
 800481a:	628b      	str	r3, [r1, #40]	; 0x28
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	3b01      	subs	r3, #1
 800482c:	025b      	lsls	r3, r3, #9
 800482e:	b29b      	uxth	r3, r3
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	3b01      	subs	r3, #1
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	3b01      	subs	r3, #1
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800484c:	4931      	ldr	r1, [pc, #196]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004852:	4b30      	ldr	r3, [pc, #192]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	492d      	ldr	r1, [pc, #180]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004864:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	4928      	ldr	r1, [pc, #160]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004876:	4b27      	ldr	r3, [pc, #156]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	4a26      	ldr	r2, [pc, #152]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 800487c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <RCCEx_PLL3_Config+0x160>)
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	69d2      	ldr	r2, [r2, #28]
 800488e:	00d2      	lsls	r2, r2, #3
 8004890:	4920      	ldr	r1, [pc, #128]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004892:	4313      	orrs	r3, r2
 8004894:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004896:	4b1f      	ldr	r3, [pc, #124]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	4a1e      	ldr	r2, [pc, #120]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 800489c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048b4:	e00f      	b.n	80048d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d106      	bne.n	80048ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048bc:	4b15      	ldr	r3, [pc, #84]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048c8:	e005      	b.n	80048d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	4a11      	ldr	r2, [pc, #68]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048d6:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e2:	f7fc fcd3 	bl	800128c <HAL_GetTick>
 80048e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048e8:	e008      	b.n	80048fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048ea:	f7fc fccf 	bl	800128c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e006      	b.n	800490a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <RCCEx_PLL3_Config+0x15c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	58024400 	.word	0x58024400
 8004918:	ffff0007 	.word	0xffff0007

0800491c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e10f      	b.n	8004b4e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a87      	ldr	r2, [pc, #540]	; (8004b58 <HAL_SPI_Init+0x23c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00f      	beq.n	800495e <HAL_SPI_Init+0x42>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a86      	ldr	r2, [pc, #536]	; (8004b5c <HAL_SPI_Init+0x240>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00a      	beq.n	800495e <HAL_SPI_Init+0x42>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a84      	ldr	r2, [pc, #528]	; (8004b60 <HAL_SPI_Init+0x244>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d005      	beq.n	800495e <HAL_SPI_Init+0x42>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d901      	bls.n	800495e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0f7      	b.n	8004b4e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fde4 	bl	800552c <SPI_GetPacketSize>
 8004964:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7b      	ldr	r2, [pc, #492]	; (8004b58 <HAL_SPI_Init+0x23c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00c      	beq.n	800498a <HAL_SPI_Init+0x6e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a79      	ldr	r2, [pc, #484]	; (8004b5c <HAL_SPI_Init+0x240>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <HAL_SPI_Init+0x6e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a78      	ldr	r2, [pc, #480]	; (8004b60 <HAL_SPI_Init+0x244>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d002      	beq.n	800498a <HAL_SPI_Init+0x6e>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d811      	bhi.n	80049ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800498e:	4a72      	ldr	r2, [pc, #456]	; (8004b58 <HAL_SPI_Init+0x23c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a70      	ldr	r2, [pc, #448]	; (8004b5c <HAL_SPI_Init+0x240>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_SPI_Init+0x8c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6f      	ldr	r2, [pc, #444]	; (8004b60 <HAL_SPI_Init+0x244>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d104      	bne.n	80049b2 <HAL_SPI_Init+0x96>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d901      	bls.n	80049b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0cd      	b.n	8004b4e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc f85e 	bl	8000a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80049ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f8:	d119      	bne.n	8004a2e <HAL_SPI_Init+0x112>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a02:	d103      	bne.n	8004a0c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10c      	bne.n	8004a2e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a1c:	d107      	bne.n	8004a2e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00f      	beq.n	8004a5a <HAL_SPI_Init+0x13e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d90b      	bls.n	8004a5a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e007      	b.n	8004a6a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	431a      	orrs	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	ea42 0103 	orr.w	r1, r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aca:	ea42 0103 	orr.w	r1, r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d113      	bne.n	8004b0a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b08:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40013000 	.word	0x40013000
 8004b5c:	40003800 	.word	0x40003800
 8004b60:	40003c00 	.word	0x40003c00

08004b64 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3320      	adds	r3, #32
 8004b7a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_SPI_Transmit+0x2a>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e1e1      	b.n	8004f52 <HAL_SPI_Transmit+0x3ee>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b96:	f7fc fb79 	bl	800128c <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d007      	beq.n	8004bb8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004bb4:	7efb      	ldrb	r3, [r7, #27]
 8004bb6:	e1cc      	b.n	8004f52 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_SPI_Transmit+0x60>
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d107      	bne.n	8004bd4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004bd0:	7efb      	ldrb	r3, [r7, #27]
 8004bd2:	e1be      	b.n	8004f52 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88fa      	ldrh	r2, [r7, #6]
 8004bee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	88fa      	ldrh	r2, [r7, #6]
 8004bf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004c24:	d108      	bne.n	8004c38 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e009      	b.n	8004c4c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004c4a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b96      	ldr	r3, [pc, #600]	; (8004eac <HAL_SPI_Transmit+0x348>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	88f9      	ldrh	r1, [r7, #6]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c78:	d107      	bne.n	8004c8a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	d947      	bls.n	8004d22 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004c92:	e03f      	b.n	8004d14 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d114      	bne.n	8004ccc <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	1d1a      	adds	r2, r3, #4
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004cca:	e023      	b.n	8004d14 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ccc:	f7fc fade 	bl	800128c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d803      	bhi.n	8004ce4 <HAL_SPI_Transmit+0x180>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce2:	d102      	bne.n	8004cea <HAL_SPI_Transmit+0x186>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d114      	bne.n	8004d14 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fb50 	bl	8005390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e11e      	b.n	8004f52 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1b9      	bne.n	8004c94 <HAL_SPI_Transmit+0x130>
 8004d20:	e0f1      	b.n	8004f06 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b07      	cmp	r3, #7
 8004d28:	f240 80e6 	bls.w	8004ef8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004d2c:	e05d      	b.n	8004dea <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d132      	bne.n	8004da2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d918      	bls.n	8004d7a <HAL_SPI_Transmit+0x216>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d014      	beq.n	8004d7a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b02      	subs	r3, #2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004d78:	e037      	b.n	8004dea <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	881a      	ldrh	r2, [r3, #0]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004da0:	e023      	b.n	8004dea <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da2:	f7fc fa73 	bl	800128c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d803      	bhi.n	8004dba <HAL_SPI_Transmit+0x256>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db8:	d102      	bne.n	8004dc0 <HAL_SPI_Transmit+0x25c>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d114      	bne.n	8004dea <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fae5 	bl	8005390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e0b3      	b.n	8004f52 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d19b      	bne.n	8004d2e <HAL_SPI_Transmit+0x1ca>
 8004df6:	e086      	b.n	8004f06 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d154      	bne.n	8004eb0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d918      	bls.n	8004e44 <HAL_SPI_Transmit+0x2e0>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d914      	bls.n	8004e44 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b04      	subs	r3, #4
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004e42:	e059      	b.n	8004ef8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d917      	bls.n	8004e80 <HAL_SPI_Transmit+0x31c>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	881a      	ldrh	r2, [r3, #0]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	1c9a      	adds	r2, r3, #2
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b02      	subs	r3, #2
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004e7e:	e03b      	b.n	8004ef8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3320      	adds	r3, #32
 8004e8a:	7812      	ldrb	r2, [r2, #0]
 8004e8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004eaa:	e025      	b.n	8004ef8 <HAL_SPI_Transmit+0x394>
 8004eac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb0:	f7fc f9ec 	bl	800128c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d803      	bhi.n	8004ec8 <HAL_SPI_Transmit+0x364>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec6:	d102      	bne.n	8004ece <HAL_SPI_Transmit+0x36a>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d114      	bne.n	8004ef8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fa5e 	bl	8005390 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e02c      	b.n	8004f52 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f47f af79 	bne.w	8004df8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2108      	movs	r1, #8
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fadd 	bl	80054d0 <SPI_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa2f 	bl	8005390 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8004f50:	7efb      	ldrb	r3, [r7, #27]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop

08004f5c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	; 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8004f74:	6a3a      	ldr	r2, [r7, #32]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f8e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3330      	adds	r3, #48	; 0x30
 8004f96:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d010      	beq.n	8004fc4 <HAL_SPI_IRQHandler+0x68>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00b      	beq.n	8004fc4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fba:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f9c3 	bl	8005348 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8004fc2:	e192      	b.n	80052ea <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d113      	bne.n	8004ff6 <HAL_SPI_IRQHandler+0x9a>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10e      	bne.n	8004ff6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
    handled = 1UL;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10f      	bne.n	8005020 <HAL_SPI_IRQHandler+0xc4>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005010:	2b00      	cmp	r3, #0
 8005012:	d105      	bne.n	8005020 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
    handled = 1UL;
 800501c:	2301      	movs	r3, #1
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10f      	bne.n	800504a <HAL_SPI_IRQHandler+0xee>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
    handled = 1UL;
 8005046:	2301      	movs	r3, #1
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8147 	bne.w	80052e0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 808b 	beq.w	8005174 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0208 	orr.w	r2, r2, #8
 800506c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0210 	orr.w	r2, r2, #16
 800507c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699a      	ldr	r2, [r3, #24]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0208 	bic.w	r2, r2, #8
 800509c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d13d      	bne.n	8005128 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80050ac:	e036      	b.n	800511c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b0f      	cmp	r3, #15
 80050b4:	d90b      	bls.n	80050ce <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050c0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c6:	1d1a      	adds	r2, r3, #4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	665a      	str	r2, [r3, #100]	; 0x64
 80050cc:	e01d      	b.n	800510a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b07      	cmp	r3, #7
 80050d4:	d90b      	bls.n	80050ee <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	8812      	ldrh	r2, [r2, #0]
 80050de:	b292      	uxth	r2, r2
 80050e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e6:	1c9a      	adds	r2, r3, #2
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	665a      	str	r2, [r3, #100]	; 0x64
 80050ec:	e00d      	b.n	800510a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1c2      	bne.n	80050ae <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f931 	bl	8005390 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f8f7 	bl	8005334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005146:	e0d0      	b.n	80052ea <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	2b05      	cmp	r3, #5
 800514c:	d103      	bne.n	8005156 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8e6 	bl	8005320 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005154:	e0c6      	b.n	80052e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005156:	7cfb      	ldrb	r3, [r7, #19]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d103      	bne.n	8005164 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8d5 	bl	800530c <HAL_SPI_RxCpltCallback>
    return;
 8005162:	e0bf      	b.n	80052e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	2b03      	cmp	r3, #3
 8005168:	f040 80bc 	bne.w	80052e4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8c3 	bl	80052f8 <HAL_SPI_TxCpltCallback>
    return;
 8005172:	e0b7      	b.n	80052e4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 80b5 	beq.w	80052ea <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00f      	beq.n	80051aa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005190:	f043 0204 	orr.w	r2, r3, #4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00f      	beq.n	80051d4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00f      	beq.n	80051fe <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e4:	f043 0208 	orr.w	r2, r3, #8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699a      	ldr	r2, [r3, #24]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00f      	beq.n	8005228 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0220 	orr.w	r2, r2, #32
 8005226:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522e:	2b00      	cmp	r3, #0
 8005230:	d05a      	beq.n	80052e8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6919      	ldr	r1, [r3, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <HAL_SPI_IRQHandler+0x394>)
 800524e:	400b      	ands	r3, r1
 8005250:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005258:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800525c:	d138      	bne.n	80052d0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800526c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d013      	beq.n	800529e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_SPI_IRQHandler+0x398>)
 800527c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005282:	4618      	mov	r0, r3
 8005284:	f7fc f942 	bl	800150c <HAL_DMA_Abort_IT>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005294:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d020      	beq.n	80052e8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052aa:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <HAL_SPI_IRQHandler+0x398>)
 80052ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fc f92a 	bl	800150c <HAL_DMA_Abort_IT>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d014      	beq.n	80052e8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052ce:	e00b      	b.n	80052e8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f82b 	bl	8005334 <HAL_SPI_ErrorCallback>
    return;
 80052de:	e003      	b.n	80052e8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80052e0:	bf00      	nop
 80052e2:	e002      	b.n	80052ea <HAL_SPI_IRQHandler+0x38e>
    return;
 80052e4:	bf00      	nop
 80052e6:	e000      	b.n	80052ea <HAL_SPI_IRQHandler+0x38e>
    return;
 80052e8:	bf00      	nop
  }
}
 80052ea:	3728      	adds	r7, #40	; 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	fffffc94 	.word	0xfffffc94
 80052f4:	0800535d 	.word	0x0800535d

080052f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff ffd6 	bl	8005334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0210 	orr.w	r2, r2, #16
 80053be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6919      	ldr	r1, [r3, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b3c      	ldr	r3, [pc, #240]	; (80054cc <SPI_CloseTransfer+0x13c>)
 80053dc:	400b      	ands	r3, r1
 80053de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80053ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d014      	beq.n	8005426 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00f      	beq.n	8005426 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800540c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0220 	orr.w	r2, r2, #32
 8005424:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b03      	cmp	r3, #3
 8005430:	d014      	beq.n	800545c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00f      	beq.n	800545c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005442:	f043 0204 	orr.w	r2, r3, #4
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699a      	ldr	r2, [r3, #24]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00f      	beq.n	8005486 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546c:	f043 0201 	orr.w	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00f      	beq.n	80054b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005496:	f043 0208 	orr.w	r2, r3, #8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	fffffc90 	.word	0xfffffc90

080054d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80054e0:	e010      	b.n	8005504 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e2:	f7fb fed3 	bl	800128c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d803      	bhi.n	80054fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054f8:	d102      	bne.n	8005500 <SPI_WaitOnFlagUntilTimeout+0x30>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e00f      	b.n	8005524 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	429a      	cmp	r2, r3
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	429a      	cmp	r2, r3
 8005520:	d0df      	beq.n	80054e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	3301      	adds	r3, #1
 8005544:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3307      	adds	r3, #7
 800554a:	08db      	lsrs	r3, r3, #3
 800554c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	fb02 f303 	mul.w	r3, r2, r3
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e049      	b.n	8005608 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fb fc17 	bl	8000dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3304      	adds	r3, #4
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f000 f949 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800562a:	2302      	movs	r3, #2
 800562c:	e0ff      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b14      	cmp	r3, #20
 800563a:	f200 80f0 	bhi.w	800581e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005699 	.word	0x08005699
 8005648:	0800581f 	.word	0x0800581f
 800564c:	0800581f 	.word	0x0800581f
 8005650:	0800581f 	.word	0x0800581f
 8005654:	080056d9 	.word	0x080056d9
 8005658:	0800581f 	.word	0x0800581f
 800565c:	0800581f 	.word	0x0800581f
 8005660:	0800581f 	.word	0x0800581f
 8005664:	0800571b 	.word	0x0800571b
 8005668:	0800581f 	.word	0x0800581f
 800566c:	0800581f 	.word	0x0800581f
 8005670:	0800581f 	.word	0x0800581f
 8005674:	0800575b 	.word	0x0800575b
 8005678:	0800581f 	.word	0x0800581f
 800567c:	0800581f 	.word	0x0800581f
 8005680:	0800581f 	.word	0x0800581f
 8005684:	0800579d 	.word	0x0800579d
 8005688:	0800581f 	.word	0x0800581f
 800568c:	0800581f 	.word	0x0800581f
 8005690:	0800581f 	.word	0x0800581f
 8005694:	080057dd 	.word	0x080057dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f964 	bl	800596c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0208 	orr.w	r2, r2, #8
 80056b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0204 	bic.w	r2, r2, #4
 80056c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6999      	ldr	r1, [r3, #24]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	619a      	str	r2, [r3, #24]
      break;
 80056d6:	e0a5      	b.n	8005824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f9d4 	bl	8005a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6999      	ldr	r1, [r3, #24]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	021a      	lsls	r2, r3, #8
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	619a      	str	r2, [r3, #24]
      break;
 8005718:	e084      	b.n	8005824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fa3d 	bl	8005ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0208 	orr.w	r2, r2, #8
 8005734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0204 	bic.w	r2, r2, #4
 8005744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69d9      	ldr	r1, [r3, #28]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	61da      	str	r2, [r3, #28]
      break;
 8005758:	e064      	b.n	8005824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 faa5 	bl	8005cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69d9      	ldr	r1, [r3, #28]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	021a      	lsls	r2, r3, #8
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	61da      	str	r2, [r3, #28]
      break;
 800579a:	e043      	b.n	8005824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 faee 	bl	8005d84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0208 	orr.w	r2, r2, #8
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0204 	bic.w	r2, r2, #4
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057da:	e023      	b.n	8005824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fb32 	bl	8005e4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	021a      	lsls	r2, r3, #8
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800581c:	e002      	b.n	8005824 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
      break;
 8005822:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800582c:	7dfb      	ldrb	r3, [r7, #23]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop

08005838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a40      	ldr	r2, [pc, #256]	; (800594c <TIM_Base_SetConfig+0x114>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3d      	ldr	r2, [pc, #244]	; (8005950 <TIM_Base_SetConfig+0x118>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3c      	ldr	r2, [pc, #240]	; (8005954 <TIM_Base_SetConfig+0x11c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3b      	ldr	r2, [pc, #236]	; (8005958 <TIM_Base_SetConfig+0x120>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3a      	ldr	r2, [pc, #232]	; (800595c <TIM_Base_SetConfig+0x124>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2f      	ldr	r2, [pc, #188]	; (800594c <TIM_Base_SetConfig+0x114>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01f      	beq.n	80058d2 <TIM_Base_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d01b      	beq.n	80058d2 <TIM_Base_SetConfig+0x9a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2c      	ldr	r2, [pc, #176]	; (8005950 <TIM_Base_SetConfig+0x118>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0x9a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <TIM_Base_SetConfig+0x11c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0x9a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <TIM_Base_SetConfig+0x120>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0x9a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a29      	ldr	r2, [pc, #164]	; (800595c <TIM_Base_SetConfig+0x124>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0x9a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a28      	ldr	r2, [pc, #160]	; (8005960 <TIM_Base_SetConfig+0x128>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0x9a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a27      	ldr	r2, [pc, #156]	; (8005964 <TIM_Base_SetConfig+0x12c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0x9a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a26      	ldr	r2, [pc, #152]	; (8005968 <TIM_Base_SetConfig+0x130>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a10      	ldr	r2, [pc, #64]	; (800594c <TIM_Base_SetConfig+0x114>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00f      	beq.n	8005930 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a12      	ldr	r2, [pc, #72]	; (800595c <TIM_Base_SetConfig+0x124>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00b      	beq.n	8005930 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a11      	ldr	r2, [pc, #68]	; (8005960 <TIM_Base_SetConfig+0x128>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d007      	beq.n	8005930 <TIM_Base_SetConfig+0xf8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a10      	ldr	r2, [pc, #64]	; (8005964 <TIM_Base_SetConfig+0x12c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_Base_SetConfig+0xf8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a0f      	ldr	r2, [pc, #60]	; (8005968 <TIM_Base_SetConfig+0x130>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d103      	bne.n	8005938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	615a      	str	r2, [r3, #20]
}
 800593e:	bf00      	nop
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40010400 	.word	0x40010400
 8005960:	40014000 	.word	0x40014000
 8005964:	40014400 	.word	0x40014400
 8005968:	40014800 	.word	0x40014800

0800596c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f023 0201 	bic.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4b37      	ldr	r3, [pc, #220]	; (8005a74 <TIM_OC1_SetConfig+0x108>)
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 0302 	bic.w	r3, r3, #2
 80059b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a2d      	ldr	r2, [pc, #180]	; (8005a78 <TIM_OC1_SetConfig+0x10c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00f      	beq.n	80059e8 <TIM_OC1_SetConfig+0x7c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <TIM_OC1_SetConfig+0x110>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <TIM_OC1_SetConfig+0x7c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a2b      	ldr	r2, [pc, #172]	; (8005a80 <TIM_OC1_SetConfig+0x114>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <TIM_OC1_SetConfig+0x7c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <TIM_OC1_SetConfig+0x118>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC1_SetConfig+0x7c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <TIM_OC1_SetConfig+0x11c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d10c      	bne.n	8005a02 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0308 	bic.w	r3, r3, #8
 80059ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 0304 	bic.w	r3, r3, #4
 8005a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a1c      	ldr	r2, [pc, #112]	; (8005a78 <TIM_OC1_SetConfig+0x10c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_OC1_SetConfig+0xbe>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <TIM_OC1_SetConfig+0x110>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_OC1_SetConfig+0xbe>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1a      	ldr	r2, [pc, #104]	; (8005a80 <TIM_OC1_SetConfig+0x114>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_OC1_SetConfig+0xbe>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <TIM_OC1_SetConfig+0x118>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_OC1_SetConfig+0xbe>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <TIM_OC1_SetConfig+0x11c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d111      	bne.n	8005a4e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	621a      	str	r2, [r3, #32]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	fffeff8f 	.word	0xfffeff8f
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40010400 	.word	0x40010400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800

08005a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0210 	bic.w	r2, r3, #16
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4b34      	ldr	r3, [pc, #208]	; (8005b88 <TIM_OC2_SetConfig+0xfc>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0320 	bic.w	r3, r3, #32
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a29      	ldr	r2, [pc, #164]	; (8005b8c <TIM_OC2_SetConfig+0x100>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC2_SetConfig+0x68>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a28      	ldr	r2, [pc, #160]	; (8005b90 <TIM_OC2_SetConfig+0x104>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10d      	bne.n	8005b10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1e      	ldr	r2, [pc, #120]	; (8005b8c <TIM_OC2_SetConfig+0x100>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00f      	beq.n	8005b38 <TIM_OC2_SetConfig+0xac>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a1d      	ldr	r2, [pc, #116]	; (8005b90 <TIM_OC2_SetConfig+0x104>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_OC2_SetConfig+0xac>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <TIM_OC2_SetConfig+0x108>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_OC2_SetConfig+0xac>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <TIM_OC2_SetConfig+0x10c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_OC2_SetConfig+0xac>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <TIM_OC2_SetConfig+0x110>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d113      	bne.n	8005b60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	feff8fff 	.word	0xfeff8fff
 8005b8c:	40010000 	.word	0x40010000
 8005b90:	40010400 	.word	0x40010400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800

08005ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4b33      	ldr	r3, [pc, #204]	; (8005c98 <TIM_OC3_SetConfig+0xf8>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a28      	ldr	r2, [pc, #160]	; (8005c9c <TIM_OC3_SetConfig+0xfc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC3_SetConfig+0x66>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <TIM_OC3_SetConfig+0x100>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10d      	bne.n	8005c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <TIM_OC3_SetConfig+0xfc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00f      	beq.n	8005c4a <TIM_OC3_SetConfig+0xaa>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <TIM_OC3_SetConfig+0x100>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00b      	beq.n	8005c4a <TIM_OC3_SetConfig+0xaa>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <TIM_OC3_SetConfig+0x104>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d007      	beq.n	8005c4a <TIM_OC3_SetConfig+0xaa>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <TIM_OC3_SetConfig+0x108>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_OC3_SetConfig+0xaa>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <TIM_OC3_SetConfig+0x10c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d113      	bne.n	8005c72 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	fffeff8f 	.word	0xfffeff8f
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40010400 	.word	0x40010400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40014400 	.word	0x40014400
 8005cac:	40014800 	.word	0x40014800

08005cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <TIM_OC4_SetConfig+0xbc>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	031b      	lsls	r3, r3, #12
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a19      	ldr	r2, [pc, #100]	; (8005d70 <TIM_OC4_SetConfig+0xc0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00f      	beq.n	8005d30 <TIM_OC4_SetConfig+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <TIM_OC4_SetConfig+0xc4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00b      	beq.n	8005d30 <TIM_OC4_SetConfig+0x80>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <TIM_OC4_SetConfig+0xc8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d007      	beq.n	8005d30 <TIM_OC4_SetConfig+0x80>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <TIM_OC4_SetConfig+0xcc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_OC4_SetConfig+0x80>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <TIM_OC4_SetConfig+0xd0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d109      	bne.n	8005d44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	019b      	lsls	r3, r3, #6
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	feff8fff 	.word	0xfeff8fff
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40010400 	.word	0x40010400
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40014400 	.word	0x40014400
 8005d80:	40014800 	.word	0x40014800

08005d84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <TIM_OC5_SetConfig+0xb0>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <TIM_OC5_SetConfig+0xb4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00f      	beq.n	8005dfa <TIM_OC5_SetConfig+0x76>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <TIM_OC5_SetConfig+0xb8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <TIM_OC5_SetConfig+0x76>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC5_SetConfig+0xbc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_OC5_SetConfig+0x76>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <TIM_OC5_SetConfig+0xc0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_OC5_SetConfig+0x76>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <TIM_OC5_SetConfig+0xc4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d109      	bne.n	8005e0e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	fffeff8f 	.word	0xfffeff8f
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40010400 	.word	0x40010400
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800

08005e4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4b22      	ldr	r3, [pc, #136]	; (8005f00 <TIM_OC6_SetConfig+0xb4>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	051b      	lsls	r3, r3, #20
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <TIM_OC6_SetConfig+0xb8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_OC6_SetConfig+0x78>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <TIM_OC6_SetConfig+0xbc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_OC6_SetConfig+0x78>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a17      	ldr	r2, [pc, #92]	; (8005f0c <TIM_OC6_SetConfig+0xc0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_OC6_SetConfig+0x78>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a16      	ldr	r2, [pc, #88]	; (8005f10 <TIM_OC6_SetConfig+0xc4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC6_SetConfig+0x78>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <TIM_OC6_SetConfig+0xc8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d109      	bne.n	8005ed8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	029b      	lsls	r3, r3, #10
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	feff8fff 	.word	0xfeff8fff
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40010400 	.word	0x40010400
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	40014400 	.word	0x40014400
 8005f14:	40014800 	.word	0x40014800

08005f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e06d      	b.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a30      	ldr	r2, [pc, #192]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2f      	ldr	r2, [pc, #188]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d108      	bne.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a20      	ldr	r2, [pc, #128]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d022      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1c      	ldr	r2, [pc, #112]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1a      	ldr	r2, [pc, #104]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a15      	ldr	r2, [pc, #84]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a16      	ldr	r2, [pc, #88]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a15      	ldr	r2, [pc, #84]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10c      	bne.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	40001800 	.word	0x40001800
 8006030:	40014000 	.word	0x40014000

08006034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e042      	b.n	80060cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fa ffa5 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2224      	movs	r2, #36	; 0x24
 8006062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f884 	bl	8006184 <UART_SetConfig>
 800607c:	4603      	mov	r3, r0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e022      	b.n	80060cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fee4 	bl	8006e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 ff6b 	bl	8006fa0 <UART_CheckIdleState>
 80060ca:	4603      	mov	r3, r0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e04a      	b.n	800617c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fa ff55 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2224      	movs	r2, #36	; 0x24
 8006102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f834 	bl	8006184 <UART_SetConfig>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e02a      	b.n	800617c <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fe94 	bl	8006e5c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006152:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0208 	orr.w	r2, r2, #8
 8006162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 ff13 	bl	8006fa0 <UART_CheckIdleState>
 800617a:	4603      	mov	r3, r0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006188:	b092      	sub	sp, #72	; 0x48
 800618a:	af00      	add	r7, sp, #0
 800618c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	431a      	orrs	r2, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4bbe      	ldr	r3, [pc, #760]	; (80064ac <UART_SetConfig+0x328>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061bc:	430b      	orrs	r3, r1
 80061be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4ab3      	ldr	r2, [pc, #716]	; (80064b0 <UART_SetConfig+0x32c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ec:	4313      	orrs	r3, r2
 80061ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	4baf      	ldr	r3, [pc, #700]	; (80064b4 <UART_SetConfig+0x330>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006200:	430b      	orrs	r3, r1
 8006202:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f023 010f 	bic.w	r1, r3, #15
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4aa6      	ldr	r2, [pc, #664]	; (80064b8 <UART_SetConfig+0x334>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d177      	bne.n	8006314 <UART_SetConfig+0x190>
 8006224:	4ba5      	ldr	r3, [pc, #660]	; (80064bc <UART_SetConfig+0x338>)
 8006226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800622c:	2b28      	cmp	r3, #40	; 0x28
 800622e:	d86d      	bhi.n	800630c <UART_SetConfig+0x188>
 8006230:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <UART_SetConfig+0xb4>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	080062dd 	.word	0x080062dd
 800623c:	0800630d 	.word	0x0800630d
 8006240:	0800630d 	.word	0x0800630d
 8006244:	0800630d 	.word	0x0800630d
 8006248:	0800630d 	.word	0x0800630d
 800624c:	0800630d 	.word	0x0800630d
 8006250:	0800630d 	.word	0x0800630d
 8006254:	0800630d 	.word	0x0800630d
 8006258:	080062e5 	.word	0x080062e5
 800625c:	0800630d 	.word	0x0800630d
 8006260:	0800630d 	.word	0x0800630d
 8006264:	0800630d 	.word	0x0800630d
 8006268:	0800630d 	.word	0x0800630d
 800626c:	0800630d 	.word	0x0800630d
 8006270:	0800630d 	.word	0x0800630d
 8006274:	0800630d 	.word	0x0800630d
 8006278:	080062ed 	.word	0x080062ed
 800627c:	0800630d 	.word	0x0800630d
 8006280:	0800630d 	.word	0x0800630d
 8006284:	0800630d 	.word	0x0800630d
 8006288:	0800630d 	.word	0x0800630d
 800628c:	0800630d 	.word	0x0800630d
 8006290:	0800630d 	.word	0x0800630d
 8006294:	0800630d 	.word	0x0800630d
 8006298:	080062f5 	.word	0x080062f5
 800629c:	0800630d 	.word	0x0800630d
 80062a0:	0800630d 	.word	0x0800630d
 80062a4:	0800630d 	.word	0x0800630d
 80062a8:	0800630d 	.word	0x0800630d
 80062ac:	0800630d 	.word	0x0800630d
 80062b0:	0800630d 	.word	0x0800630d
 80062b4:	0800630d 	.word	0x0800630d
 80062b8:	080062fd 	.word	0x080062fd
 80062bc:	0800630d 	.word	0x0800630d
 80062c0:	0800630d 	.word	0x0800630d
 80062c4:	0800630d 	.word	0x0800630d
 80062c8:	0800630d 	.word	0x0800630d
 80062cc:	0800630d 	.word	0x0800630d
 80062d0:	0800630d 	.word	0x0800630d
 80062d4:	0800630d 	.word	0x0800630d
 80062d8:	08006305 	.word	0x08006305
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e326      	b.n	8006932 <UART_SetConfig+0x7ae>
 80062e4:	2304      	movs	r3, #4
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e322      	b.n	8006932 <UART_SetConfig+0x7ae>
 80062ec:	2308      	movs	r3, #8
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e31e      	b.n	8006932 <UART_SetConfig+0x7ae>
 80062f4:	2310      	movs	r3, #16
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e31a      	b.n	8006932 <UART_SetConfig+0x7ae>
 80062fc:	2320      	movs	r3, #32
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e316      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006304:	2340      	movs	r3, #64	; 0x40
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e312      	b.n	8006932 <UART_SetConfig+0x7ae>
 800630c:	2380      	movs	r3, #128	; 0x80
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e30e      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a69      	ldr	r2, [pc, #420]	; (80064c0 <UART_SetConfig+0x33c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d130      	bne.n	8006380 <UART_SetConfig+0x1fc>
 800631e:	4b67      	ldr	r3, [pc, #412]	; (80064bc <UART_SetConfig+0x338>)
 8006320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	2b05      	cmp	r3, #5
 8006328:	d826      	bhi.n	8006378 <UART_SetConfig+0x1f4>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <UART_SetConfig+0x1ac>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006349 	.word	0x08006349
 8006334:	08006351 	.word	0x08006351
 8006338:	08006359 	.word	0x08006359
 800633c:	08006361 	.word	0x08006361
 8006340:	08006369 	.word	0x08006369
 8006344:	08006371 	.word	0x08006371
 8006348:	2300      	movs	r3, #0
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e2f0      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006350:	2304      	movs	r3, #4
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e2ec      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006358:	2308      	movs	r3, #8
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e2e8      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006360:	2310      	movs	r3, #16
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006366:	e2e4      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006368:	2320      	movs	r3, #32
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e2e0      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006370:	2340      	movs	r3, #64	; 0x40
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006376:	e2dc      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006378:	2380      	movs	r3, #128	; 0x80
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637e:	e2d8      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a4f      	ldr	r2, [pc, #316]	; (80064c4 <UART_SetConfig+0x340>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d130      	bne.n	80063ec <UART_SetConfig+0x268>
 800638a:	4b4c      	ldr	r3, [pc, #304]	; (80064bc <UART_SetConfig+0x338>)
 800638c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	2b05      	cmp	r3, #5
 8006394:	d826      	bhi.n	80063e4 <UART_SetConfig+0x260>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0x218>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063b5 	.word	0x080063b5
 80063a0:	080063bd 	.word	0x080063bd
 80063a4:	080063c5 	.word	0x080063c5
 80063a8:	080063cd 	.word	0x080063cd
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	080063dd 	.word	0x080063dd
 80063b4:	2300      	movs	r3, #0
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ba:	e2ba      	b.n	8006932 <UART_SetConfig+0x7ae>
 80063bc:	2304      	movs	r3, #4
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c2:	e2b6      	b.n	8006932 <UART_SetConfig+0x7ae>
 80063c4:	2308      	movs	r3, #8
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ca:	e2b2      	b.n	8006932 <UART_SetConfig+0x7ae>
 80063cc:	2310      	movs	r3, #16
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d2:	e2ae      	b.n	8006932 <UART_SetConfig+0x7ae>
 80063d4:	2320      	movs	r3, #32
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063da:	e2aa      	b.n	8006932 <UART_SetConfig+0x7ae>
 80063dc:	2340      	movs	r3, #64	; 0x40
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e2:	e2a6      	b.n	8006932 <UART_SetConfig+0x7ae>
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ea:	e2a2      	b.n	8006932 <UART_SetConfig+0x7ae>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a35      	ldr	r2, [pc, #212]	; (80064c8 <UART_SetConfig+0x344>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d130      	bne.n	8006458 <UART_SetConfig+0x2d4>
 80063f6:	4b31      	ldr	r3, [pc, #196]	; (80064bc <UART_SetConfig+0x338>)
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d826      	bhi.n	8006450 <UART_SetConfig+0x2cc>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <UART_SetConfig+0x284>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006421 	.word	0x08006421
 800640c:	08006429 	.word	0x08006429
 8006410:	08006431 	.word	0x08006431
 8006414:	08006439 	.word	0x08006439
 8006418:	08006441 	.word	0x08006441
 800641c:	08006449 	.word	0x08006449
 8006420:	2300      	movs	r3, #0
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006426:	e284      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006428:	2304      	movs	r3, #4
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642e:	e280      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006430:	2308      	movs	r3, #8
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006436:	e27c      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006438:	2310      	movs	r3, #16
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643e:	e278      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006440:	2320      	movs	r3, #32
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006446:	e274      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006448:	2340      	movs	r3, #64	; 0x40
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644e:	e270      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006450:	2380      	movs	r3, #128	; 0x80
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006456:	e26c      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1b      	ldr	r2, [pc, #108]	; (80064cc <UART_SetConfig+0x348>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d142      	bne.n	80064e8 <UART_SetConfig+0x364>
 8006462:	4b16      	ldr	r3, [pc, #88]	; (80064bc <UART_SetConfig+0x338>)
 8006464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	2b05      	cmp	r3, #5
 800646c:	d838      	bhi.n	80064e0 <UART_SetConfig+0x35c>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0x2f0>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	0800648d 	.word	0x0800648d
 8006478:	08006495 	.word	0x08006495
 800647c:	0800649d 	.word	0x0800649d
 8006480:	080064a5 	.word	0x080064a5
 8006484:	080064d1 	.word	0x080064d1
 8006488:	080064d9 	.word	0x080064d9
 800648c:	2300      	movs	r3, #0
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006492:	e24e      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006494:	2304      	movs	r3, #4
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649a:	e24a      	b.n	8006932 <UART_SetConfig+0x7ae>
 800649c:	2308      	movs	r3, #8
 800649e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a2:	e246      	b.n	8006932 <UART_SetConfig+0x7ae>
 80064a4:	2310      	movs	r3, #16
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064aa:	e242      	b.n	8006932 <UART_SetConfig+0x7ae>
 80064ac:	cfff69f3 	.word	0xcfff69f3
 80064b0:	58000c00 	.word	0x58000c00
 80064b4:	11fff4ff 	.word	0x11fff4ff
 80064b8:	40011000 	.word	0x40011000
 80064bc:	58024400 	.word	0x58024400
 80064c0:	40004400 	.word	0x40004400
 80064c4:	40004800 	.word	0x40004800
 80064c8:	40004c00 	.word	0x40004c00
 80064cc:	40005000 	.word	0x40005000
 80064d0:	2320      	movs	r3, #32
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e22c      	b.n	8006932 <UART_SetConfig+0x7ae>
 80064d8:	2340      	movs	r3, #64	; 0x40
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e228      	b.n	8006932 <UART_SetConfig+0x7ae>
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e224      	b.n	8006932 <UART_SetConfig+0x7ae>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4ab1      	ldr	r2, [pc, #708]	; (80067b4 <UART_SetConfig+0x630>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d176      	bne.n	80065e0 <UART_SetConfig+0x45c>
 80064f2:	4bb1      	ldr	r3, [pc, #708]	; (80067b8 <UART_SetConfig+0x634>)
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064fa:	2b28      	cmp	r3, #40	; 0x28
 80064fc:	d86c      	bhi.n	80065d8 <UART_SetConfig+0x454>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0x380>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	080065a9 	.word	0x080065a9
 8006508:	080065d9 	.word	0x080065d9
 800650c:	080065d9 	.word	0x080065d9
 8006510:	080065d9 	.word	0x080065d9
 8006514:	080065d9 	.word	0x080065d9
 8006518:	080065d9 	.word	0x080065d9
 800651c:	080065d9 	.word	0x080065d9
 8006520:	080065d9 	.word	0x080065d9
 8006524:	080065b1 	.word	0x080065b1
 8006528:	080065d9 	.word	0x080065d9
 800652c:	080065d9 	.word	0x080065d9
 8006530:	080065d9 	.word	0x080065d9
 8006534:	080065d9 	.word	0x080065d9
 8006538:	080065d9 	.word	0x080065d9
 800653c:	080065d9 	.word	0x080065d9
 8006540:	080065d9 	.word	0x080065d9
 8006544:	080065b9 	.word	0x080065b9
 8006548:	080065d9 	.word	0x080065d9
 800654c:	080065d9 	.word	0x080065d9
 8006550:	080065d9 	.word	0x080065d9
 8006554:	080065d9 	.word	0x080065d9
 8006558:	080065d9 	.word	0x080065d9
 800655c:	080065d9 	.word	0x080065d9
 8006560:	080065d9 	.word	0x080065d9
 8006564:	080065c1 	.word	0x080065c1
 8006568:	080065d9 	.word	0x080065d9
 800656c:	080065d9 	.word	0x080065d9
 8006570:	080065d9 	.word	0x080065d9
 8006574:	080065d9 	.word	0x080065d9
 8006578:	080065d9 	.word	0x080065d9
 800657c:	080065d9 	.word	0x080065d9
 8006580:	080065d9 	.word	0x080065d9
 8006584:	080065c9 	.word	0x080065c9
 8006588:	080065d9 	.word	0x080065d9
 800658c:	080065d9 	.word	0x080065d9
 8006590:	080065d9 	.word	0x080065d9
 8006594:	080065d9 	.word	0x080065d9
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065d9 	.word	0x080065d9
 80065a0:	080065d9 	.word	0x080065d9
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e1c0      	b.n	8006932 <UART_SetConfig+0x7ae>
 80065b0:	2304      	movs	r3, #4
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b6:	e1bc      	b.n	8006932 <UART_SetConfig+0x7ae>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065be:	e1b8      	b.n	8006932 <UART_SetConfig+0x7ae>
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c6:	e1b4      	b.n	8006932 <UART_SetConfig+0x7ae>
 80065c8:	2320      	movs	r3, #32
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e1b0      	b.n	8006932 <UART_SetConfig+0x7ae>
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d6:	e1ac      	b.n	8006932 <UART_SetConfig+0x7ae>
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065de:	e1a8      	b.n	8006932 <UART_SetConfig+0x7ae>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a75      	ldr	r2, [pc, #468]	; (80067bc <UART_SetConfig+0x638>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d130      	bne.n	800664c <UART_SetConfig+0x4c8>
 80065ea:	4b73      	ldr	r3, [pc, #460]	; (80067b8 <UART_SetConfig+0x634>)
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	2b05      	cmp	r3, #5
 80065f4:	d826      	bhi.n	8006644 <UART_SetConfig+0x4c0>
 80065f6:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <UART_SetConfig+0x478>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006615 	.word	0x08006615
 8006600:	0800661d 	.word	0x0800661d
 8006604:	08006625 	.word	0x08006625
 8006608:	0800662d 	.word	0x0800662d
 800660c:	08006635 	.word	0x08006635
 8006610:	0800663d 	.word	0x0800663d
 8006614:	2300      	movs	r3, #0
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e18a      	b.n	8006932 <UART_SetConfig+0x7ae>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e186      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662a:	e182      	b.n	8006932 <UART_SetConfig+0x7ae>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006632:	e17e      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006634:	2320      	movs	r3, #32
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e17a      	b.n	8006932 <UART_SetConfig+0x7ae>
 800663c:	2340      	movs	r3, #64	; 0x40
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006642:	e176      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e172      	b.n	8006932 <UART_SetConfig+0x7ae>
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a5b      	ldr	r2, [pc, #364]	; (80067c0 <UART_SetConfig+0x63c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d130      	bne.n	80066b8 <UART_SetConfig+0x534>
 8006656:	4b58      	ldr	r3, [pc, #352]	; (80067b8 <UART_SetConfig+0x634>)
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	2b05      	cmp	r3, #5
 8006660:	d826      	bhi.n	80066b0 <UART_SetConfig+0x52c>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <UART_SetConfig+0x4e4>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	08006681 	.word	0x08006681
 800666c:	08006689 	.word	0x08006689
 8006670:	08006691 	.word	0x08006691
 8006674:	08006699 	.word	0x08006699
 8006678:	080066a1 	.word	0x080066a1
 800667c:	080066a9 	.word	0x080066a9
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e154      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006688:	2304      	movs	r3, #4
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e150      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006690:	2308      	movs	r3, #8
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006696:	e14c      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006698:	2310      	movs	r3, #16
 800669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669e:	e148      	b.n	8006932 <UART_SetConfig+0x7ae>
 80066a0:	2320      	movs	r3, #32
 80066a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a6:	e144      	b.n	8006932 <UART_SetConfig+0x7ae>
 80066a8:	2340      	movs	r3, #64	; 0x40
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e140      	b.n	8006932 <UART_SetConfig+0x7ae>
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e13c      	b.n	8006932 <UART_SetConfig+0x7ae>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a41      	ldr	r2, [pc, #260]	; (80067c4 <UART_SetConfig+0x640>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	f040 8082 	bne.w	80067c8 <UART_SetConfig+0x644>
 80066c4:	4b3c      	ldr	r3, [pc, #240]	; (80067b8 <UART_SetConfig+0x634>)
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066cc:	2b28      	cmp	r3, #40	; 0x28
 80066ce:	d86d      	bhi.n	80067ac <UART_SetConfig+0x628>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <UART_SetConfig+0x554>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	0800677d 	.word	0x0800677d
 80066dc:	080067ad 	.word	0x080067ad
 80066e0:	080067ad 	.word	0x080067ad
 80066e4:	080067ad 	.word	0x080067ad
 80066e8:	080067ad 	.word	0x080067ad
 80066ec:	080067ad 	.word	0x080067ad
 80066f0:	080067ad 	.word	0x080067ad
 80066f4:	080067ad 	.word	0x080067ad
 80066f8:	08006785 	.word	0x08006785
 80066fc:	080067ad 	.word	0x080067ad
 8006700:	080067ad 	.word	0x080067ad
 8006704:	080067ad 	.word	0x080067ad
 8006708:	080067ad 	.word	0x080067ad
 800670c:	080067ad 	.word	0x080067ad
 8006710:	080067ad 	.word	0x080067ad
 8006714:	080067ad 	.word	0x080067ad
 8006718:	0800678d 	.word	0x0800678d
 800671c:	080067ad 	.word	0x080067ad
 8006720:	080067ad 	.word	0x080067ad
 8006724:	080067ad 	.word	0x080067ad
 8006728:	080067ad 	.word	0x080067ad
 800672c:	080067ad 	.word	0x080067ad
 8006730:	080067ad 	.word	0x080067ad
 8006734:	080067ad 	.word	0x080067ad
 8006738:	08006795 	.word	0x08006795
 800673c:	080067ad 	.word	0x080067ad
 8006740:	080067ad 	.word	0x080067ad
 8006744:	080067ad 	.word	0x080067ad
 8006748:	080067ad 	.word	0x080067ad
 800674c:	080067ad 	.word	0x080067ad
 8006750:	080067ad 	.word	0x080067ad
 8006754:	080067ad 	.word	0x080067ad
 8006758:	0800679d 	.word	0x0800679d
 800675c:	080067ad 	.word	0x080067ad
 8006760:	080067ad 	.word	0x080067ad
 8006764:	080067ad 	.word	0x080067ad
 8006768:	080067ad 	.word	0x080067ad
 800676c:	080067ad 	.word	0x080067ad
 8006770:	080067ad 	.word	0x080067ad
 8006774:	080067ad 	.word	0x080067ad
 8006778:	080067a5 	.word	0x080067a5
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e0d6      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006784:	2304      	movs	r3, #4
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e0d2      	b.n	8006932 <UART_SetConfig+0x7ae>
 800678c:	2308      	movs	r3, #8
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e0ce      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006794:	2310      	movs	r3, #16
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e0ca      	b.n	8006932 <UART_SetConfig+0x7ae>
 800679c:	2320      	movs	r3, #32
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e0c6      	b.n	8006932 <UART_SetConfig+0x7ae>
 80067a4:	2340      	movs	r3, #64	; 0x40
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e0c2      	b.n	8006932 <UART_SetConfig+0x7ae>
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e0be      	b.n	8006932 <UART_SetConfig+0x7ae>
 80067b4:	40011400 	.word	0x40011400
 80067b8:	58024400 	.word	0x58024400
 80067bc:	40007800 	.word	0x40007800
 80067c0:	40007c00 	.word	0x40007c00
 80067c4:	40011800 	.word	0x40011800
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4aad      	ldr	r2, [pc, #692]	; (8006a84 <UART_SetConfig+0x900>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d176      	bne.n	80068c0 <UART_SetConfig+0x73c>
 80067d2:	4bad      	ldr	r3, [pc, #692]	; (8006a88 <UART_SetConfig+0x904>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067da:	2b28      	cmp	r3, #40	; 0x28
 80067dc:	d86c      	bhi.n	80068b8 <UART_SetConfig+0x734>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <UART_SetConfig+0x660>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006889 	.word	0x08006889
 80067e8:	080068b9 	.word	0x080068b9
 80067ec:	080068b9 	.word	0x080068b9
 80067f0:	080068b9 	.word	0x080068b9
 80067f4:	080068b9 	.word	0x080068b9
 80067f8:	080068b9 	.word	0x080068b9
 80067fc:	080068b9 	.word	0x080068b9
 8006800:	080068b9 	.word	0x080068b9
 8006804:	08006891 	.word	0x08006891
 8006808:	080068b9 	.word	0x080068b9
 800680c:	080068b9 	.word	0x080068b9
 8006810:	080068b9 	.word	0x080068b9
 8006814:	080068b9 	.word	0x080068b9
 8006818:	080068b9 	.word	0x080068b9
 800681c:	080068b9 	.word	0x080068b9
 8006820:	080068b9 	.word	0x080068b9
 8006824:	08006899 	.word	0x08006899
 8006828:	080068b9 	.word	0x080068b9
 800682c:	080068b9 	.word	0x080068b9
 8006830:	080068b9 	.word	0x080068b9
 8006834:	080068b9 	.word	0x080068b9
 8006838:	080068b9 	.word	0x080068b9
 800683c:	080068b9 	.word	0x080068b9
 8006840:	080068b9 	.word	0x080068b9
 8006844:	080068a1 	.word	0x080068a1
 8006848:	080068b9 	.word	0x080068b9
 800684c:	080068b9 	.word	0x080068b9
 8006850:	080068b9 	.word	0x080068b9
 8006854:	080068b9 	.word	0x080068b9
 8006858:	080068b9 	.word	0x080068b9
 800685c:	080068b9 	.word	0x080068b9
 8006860:	080068b9 	.word	0x080068b9
 8006864:	080068a9 	.word	0x080068a9
 8006868:	080068b9 	.word	0x080068b9
 800686c:	080068b9 	.word	0x080068b9
 8006870:	080068b9 	.word	0x080068b9
 8006874:	080068b9 	.word	0x080068b9
 8006878:	080068b9 	.word	0x080068b9
 800687c:	080068b9 	.word	0x080068b9
 8006880:	080068b9 	.word	0x080068b9
 8006884:	080068b1 	.word	0x080068b1
 8006888:	2301      	movs	r3, #1
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688e:	e050      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006890:	2304      	movs	r3, #4
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006896:	e04c      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006898:	2308      	movs	r3, #8
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689e:	e048      	b.n	8006932 <UART_SetConfig+0x7ae>
 80068a0:	2310      	movs	r3, #16
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a6:	e044      	b.n	8006932 <UART_SetConfig+0x7ae>
 80068a8:	2320      	movs	r3, #32
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ae:	e040      	b.n	8006932 <UART_SetConfig+0x7ae>
 80068b0:	2340      	movs	r3, #64	; 0x40
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b6:	e03c      	b.n	8006932 <UART_SetConfig+0x7ae>
 80068b8:	2380      	movs	r3, #128	; 0x80
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068be:	e038      	b.n	8006932 <UART_SetConfig+0x7ae>
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a71      	ldr	r2, [pc, #452]	; (8006a8c <UART_SetConfig+0x908>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d130      	bne.n	800692c <UART_SetConfig+0x7a8>
 80068ca:	4b6f      	ldr	r3, [pc, #444]	; (8006a88 <UART_SetConfig+0x904>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	d826      	bhi.n	8006924 <UART_SetConfig+0x7a0>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <UART_SetConfig+0x758>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	080068f5 	.word	0x080068f5
 80068e0:	080068fd 	.word	0x080068fd
 80068e4:	08006905 	.word	0x08006905
 80068e8:	0800690d 	.word	0x0800690d
 80068ec:	08006915 	.word	0x08006915
 80068f0:	0800691d 	.word	0x0800691d
 80068f4:	2302      	movs	r3, #2
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fa:	e01a      	b.n	8006932 <UART_SetConfig+0x7ae>
 80068fc:	2304      	movs	r3, #4
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006902:	e016      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006904:	2308      	movs	r3, #8
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690a:	e012      	b.n	8006932 <UART_SetConfig+0x7ae>
 800690c:	2310      	movs	r3, #16
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006912:	e00e      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006914:	2320      	movs	r3, #32
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691a:	e00a      	b.n	8006932 <UART_SetConfig+0x7ae>
 800691c:	2340      	movs	r3, #64	; 0x40
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006922:	e006      	b.n	8006932 <UART_SetConfig+0x7ae>
 8006924:	2380      	movs	r3, #128	; 0x80
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692a:	e002      	b.n	8006932 <UART_SetConfig+0x7ae>
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a55      	ldr	r2, [pc, #340]	; (8006a8c <UART_SetConfig+0x908>)
 8006938:	4293      	cmp	r3, r2
 800693a:	f040 80f8 	bne.w	8006b2e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800693e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006942:	2b20      	cmp	r3, #32
 8006944:	dc46      	bgt.n	80069d4 <UART_SetConfig+0x850>
 8006946:	2b02      	cmp	r3, #2
 8006948:	db75      	blt.n	8006a36 <UART_SetConfig+0x8b2>
 800694a:	3b02      	subs	r3, #2
 800694c:	2b1e      	cmp	r3, #30
 800694e:	d872      	bhi.n	8006a36 <UART_SetConfig+0x8b2>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x7d4>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	080069db 	.word	0x080069db
 800695c:	08006a37 	.word	0x08006a37
 8006960:	080069e3 	.word	0x080069e3
 8006964:	08006a37 	.word	0x08006a37
 8006968:	08006a37 	.word	0x08006a37
 800696c:	08006a37 	.word	0x08006a37
 8006970:	080069f3 	.word	0x080069f3
 8006974:	08006a37 	.word	0x08006a37
 8006978:	08006a37 	.word	0x08006a37
 800697c:	08006a37 	.word	0x08006a37
 8006980:	08006a37 	.word	0x08006a37
 8006984:	08006a37 	.word	0x08006a37
 8006988:	08006a37 	.word	0x08006a37
 800698c:	08006a37 	.word	0x08006a37
 8006990:	08006a03 	.word	0x08006a03
 8006994:	08006a37 	.word	0x08006a37
 8006998:	08006a37 	.word	0x08006a37
 800699c:	08006a37 	.word	0x08006a37
 80069a0:	08006a37 	.word	0x08006a37
 80069a4:	08006a37 	.word	0x08006a37
 80069a8:	08006a37 	.word	0x08006a37
 80069ac:	08006a37 	.word	0x08006a37
 80069b0:	08006a37 	.word	0x08006a37
 80069b4:	08006a37 	.word	0x08006a37
 80069b8:	08006a37 	.word	0x08006a37
 80069bc:	08006a37 	.word	0x08006a37
 80069c0:	08006a37 	.word	0x08006a37
 80069c4:	08006a37 	.word	0x08006a37
 80069c8:	08006a37 	.word	0x08006a37
 80069cc:	08006a37 	.word	0x08006a37
 80069d0:	08006a29 	.word	0x08006a29
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d02a      	beq.n	8006a2e <UART_SetConfig+0x8aa>
 80069d8:	e02d      	b.n	8006a36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069da:	f7fd fb7d 	bl	80040d8 <HAL_RCCEx_GetD3PCLK1Freq>
 80069de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069e0:	e02f      	b.n	8006a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fd fb8c 	bl	8004104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f0:	e027      	b.n	8006a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069f2:	f107 0318 	add.w	r3, r7, #24
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fd fcd8 	bl	80043ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a00:	e01f      	b.n	8006a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a02:	4b21      	ldr	r3, [pc, #132]	; (8006a88 <UART_SetConfig+0x904>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a0e:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <UART_SetConfig+0x904>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	08db      	lsrs	r3, r3, #3
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <UART_SetConfig+0x90c>)
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a20:	e00f      	b.n	8006a42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006a22:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <UART_SetConfig+0x90c>)
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a26:	e00c      	b.n	8006a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a28:	4b1a      	ldr	r3, [pc, #104]	; (8006a94 <UART_SetConfig+0x910>)
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a2c:	e009      	b.n	8006a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a34:	e005      	b.n	8006a42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 81ee 	beq.w	8006e26 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	4a12      	ldr	r2, [pc, #72]	; (8006a98 <UART_SetConfig+0x914>)
 8006a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a5c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	4613      	mov	r3, r2
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4413      	add	r3, r2
 8006a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d305      	bcc.n	8006a7a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d910      	bls.n	8006a9c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a80:	e1d1      	b.n	8006e26 <UART_SetConfig+0xca2>
 8006a82:	bf00      	nop
 8006a84:	40011c00 	.word	0x40011c00
 8006a88:	58024400 	.word	0x58024400
 8006a8c:	58000c00 	.word	0x58000c00
 8006a90:	03d09000 	.word	0x03d09000
 8006a94:	003d0900 	.word	0x003d0900
 8006a98:	0800751c 	.word	0x0800751c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	60fa      	str	r2, [r7, #12]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	4ac0      	ldr	r2, [pc, #768]	; (8006dac <UART_SetConfig+0xc28>)
 8006aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006abe:	f7f9 fc15 	bl	80002ec <__aeabi_uldivmod>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	020b      	lsls	r3, r1, #8
 8006ad4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ad8:	0202      	lsls	r2, r0, #8
 8006ada:	6979      	ldr	r1, [r7, #20]
 8006adc:	6849      	ldr	r1, [r1, #4]
 8006ade:	0849      	lsrs	r1, r1, #1
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	eb12 0804 	adds.w	r8, r2, r4
 8006aea:	eb43 0905 	adc.w	r9, r3, r5
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	469a      	mov	sl, r3
 8006af6:	4693      	mov	fp, r2
 8006af8:	4652      	mov	r2, sl
 8006afa:	465b      	mov	r3, fp
 8006afc:	4640      	mov	r0, r8
 8006afe:	4649      	mov	r1, r9
 8006b00:	f7f9 fbf4 	bl	80002ec <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4613      	mov	r3, r2
 8006b0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b12:	d308      	bcc.n	8006b26 <UART_SetConfig+0x9a2>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b1a:	d204      	bcs.n	8006b26 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	e17f      	b.n	8006e26 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b2c:	e17b      	b.n	8006e26 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b36:	f040 80bd 	bne.w	8006cb4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	dc48      	bgt.n	8006bd4 <UART_SetConfig+0xa50>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	db7b      	blt.n	8006c3e <UART_SetConfig+0xaba>
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d879      	bhi.n	8006c3e <UART_SetConfig+0xaba>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0x9cc>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006bdb 	.word	0x08006bdb
 8006b54:	08006be3 	.word	0x08006be3
 8006b58:	08006c3f 	.word	0x08006c3f
 8006b5c:	08006c3f 	.word	0x08006c3f
 8006b60:	08006beb 	.word	0x08006beb
 8006b64:	08006c3f 	.word	0x08006c3f
 8006b68:	08006c3f 	.word	0x08006c3f
 8006b6c:	08006c3f 	.word	0x08006c3f
 8006b70:	08006bfb 	.word	0x08006bfb
 8006b74:	08006c3f 	.word	0x08006c3f
 8006b78:	08006c3f 	.word	0x08006c3f
 8006b7c:	08006c3f 	.word	0x08006c3f
 8006b80:	08006c3f 	.word	0x08006c3f
 8006b84:	08006c3f 	.word	0x08006c3f
 8006b88:	08006c3f 	.word	0x08006c3f
 8006b8c:	08006c3f 	.word	0x08006c3f
 8006b90:	08006c0b 	.word	0x08006c0b
 8006b94:	08006c3f 	.word	0x08006c3f
 8006b98:	08006c3f 	.word	0x08006c3f
 8006b9c:	08006c3f 	.word	0x08006c3f
 8006ba0:	08006c3f 	.word	0x08006c3f
 8006ba4:	08006c3f 	.word	0x08006c3f
 8006ba8:	08006c3f 	.word	0x08006c3f
 8006bac:	08006c3f 	.word	0x08006c3f
 8006bb0:	08006c3f 	.word	0x08006c3f
 8006bb4:	08006c3f 	.word	0x08006c3f
 8006bb8:	08006c3f 	.word	0x08006c3f
 8006bbc:	08006c3f 	.word	0x08006c3f
 8006bc0:	08006c3f 	.word	0x08006c3f
 8006bc4:	08006c3f 	.word	0x08006c3f
 8006bc8:	08006c3f 	.word	0x08006c3f
 8006bcc:	08006c3f 	.word	0x08006c3f
 8006bd0:	08006c31 	.word	0x08006c31
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d02e      	beq.n	8006c36 <UART_SetConfig+0xab2>
 8006bd8:	e031      	b.n	8006c3e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bda:	f7fc f893 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8006bde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006be0:	e033      	b.n	8006c4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be2:	f7fc f8a5 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8006be6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006be8:	e02f      	b.n	8006c4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fd fa88 	bl	8004104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf8:	e027      	b.n	8006c4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bfa:	f107 0318 	add.w	r3, r7, #24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fd fbd4 	bl	80043ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c08:	e01f      	b.n	8006c4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c0a:	4b69      	ldr	r3, [pc, #420]	; (8006db0 <UART_SetConfig+0xc2c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c16:	4b66      	ldr	r3, [pc, #408]	; (8006db0 <UART_SetConfig+0xc2c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	4a64      	ldr	r2, [pc, #400]	; (8006db4 <UART_SetConfig+0xc30>)
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c28:	e00f      	b.n	8006c4a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006c2a:	4b62      	ldr	r3, [pc, #392]	; (8006db4 <UART_SetConfig+0xc30>)
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c2e:	e00c      	b.n	8006c4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c30:	4b61      	ldr	r3, [pc, #388]	; (8006db8 <UART_SetConfig+0xc34>)
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c34:	e009      	b.n	8006c4a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3c:	e005      	b.n	8006c4a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80ea 	beq.w	8006e26 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	4a55      	ldr	r2, [pc, #340]	; (8006dac <UART_SetConfig+0xc28>)
 8006c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c64:	005a      	lsls	r2, r3, #1
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	441a      	add	r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d916      	bls.n	8006cac <UART_SetConfig+0xb28>
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d212      	bcs.n	8006cac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f023 030f 	bic.w	r3, r3, #15
 8006c8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	e0bc      	b.n	8006e26 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006cb2:	e0b8      	b.n	8006e26 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	dc4b      	bgt.n	8006d54 <UART_SetConfig+0xbd0>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f2c0 8087 	blt.w	8006dd0 <UART_SetConfig+0xc4c>
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	f200 8084 	bhi.w	8006dd0 <UART_SetConfig+0xc4c>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <UART_SetConfig+0xb4c>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d5b 	.word	0x08006d5b
 8006cd4:	08006d63 	.word	0x08006d63
 8006cd8:	08006dd1 	.word	0x08006dd1
 8006cdc:	08006dd1 	.word	0x08006dd1
 8006ce0:	08006d6b 	.word	0x08006d6b
 8006ce4:	08006dd1 	.word	0x08006dd1
 8006ce8:	08006dd1 	.word	0x08006dd1
 8006cec:	08006dd1 	.word	0x08006dd1
 8006cf0:	08006d7b 	.word	0x08006d7b
 8006cf4:	08006dd1 	.word	0x08006dd1
 8006cf8:	08006dd1 	.word	0x08006dd1
 8006cfc:	08006dd1 	.word	0x08006dd1
 8006d00:	08006dd1 	.word	0x08006dd1
 8006d04:	08006dd1 	.word	0x08006dd1
 8006d08:	08006dd1 	.word	0x08006dd1
 8006d0c:	08006dd1 	.word	0x08006dd1
 8006d10:	08006d8b 	.word	0x08006d8b
 8006d14:	08006dd1 	.word	0x08006dd1
 8006d18:	08006dd1 	.word	0x08006dd1
 8006d1c:	08006dd1 	.word	0x08006dd1
 8006d20:	08006dd1 	.word	0x08006dd1
 8006d24:	08006dd1 	.word	0x08006dd1
 8006d28:	08006dd1 	.word	0x08006dd1
 8006d2c:	08006dd1 	.word	0x08006dd1
 8006d30:	08006dd1 	.word	0x08006dd1
 8006d34:	08006dd1 	.word	0x08006dd1
 8006d38:	08006dd1 	.word	0x08006dd1
 8006d3c:	08006dd1 	.word	0x08006dd1
 8006d40:	08006dd1 	.word	0x08006dd1
 8006d44:	08006dd1 	.word	0x08006dd1
 8006d48:	08006dd1 	.word	0x08006dd1
 8006d4c:	08006dd1 	.word	0x08006dd1
 8006d50:	08006dc3 	.word	0x08006dc3
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d037      	beq.n	8006dc8 <UART_SetConfig+0xc44>
 8006d58:	e03a      	b.n	8006dd0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d5a:	f7fb ffd3 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8006d5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d60:	e03c      	b.n	8006ddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d62:	f7fb ffe5 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8006d66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d68:	e038      	b.n	8006ddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fd f9c8 	bl	8004104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d78:	e030      	b.n	8006ddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d7a:	f107 0318 	add.w	r3, r7, #24
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd fb14 	bl	80043ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d88:	e028      	b.n	8006ddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <UART_SetConfig+0xc2c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d012      	beq.n	8006dbc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <UART_SetConfig+0xc2c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	08db      	lsrs	r3, r3, #3
 8006d9c:	f003 0303 	and.w	r3, r3, #3
 8006da0:	4a04      	ldr	r2, [pc, #16]	; (8006db4 <UART_SetConfig+0xc30>)
 8006da2:	fa22 f303 	lsr.w	r3, r2, r3
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006da8:	e018      	b.n	8006ddc <UART_SetConfig+0xc58>
 8006daa:	bf00      	nop
 8006dac:	0800751c 	.word	0x0800751c
 8006db0:	58024400 	.word	0x58024400
 8006db4:	03d09000 	.word	0x03d09000
 8006db8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006dbc:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <UART_SetConfig+0xccc>)
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc0:	e00c      	b.n	8006ddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006dc2:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <UART_SetConfig+0xcd0>)
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc6:	e009      	b.n	8006ddc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dce:	e005      	b.n	8006ddc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006dda:	bf00      	nop
    }

    if (pclk != 0U)
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d021      	beq.n	8006e26 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	4a1c      	ldr	r2, [pc, #112]	; (8006e58 <UART_SetConfig+0xcd4>)
 8006de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	441a      	add	r2, r3
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e04:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	2b0f      	cmp	r3, #15
 8006e0a:	d909      	bls.n	8006e20 <UART_SetConfig+0xc9c>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e12:	d205      	bcs.n	8006e20 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	e002      	b.n	8006e26 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006e42:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3748      	adds	r7, #72	; 0x48
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e50:	03d09000 	.word	0x03d09000
 8006e54:	003d0900 	.word	0x003d0900
 8006e58:	0800751c 	.word	0x0800751c

08006e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5a:	d10a      	bne.n	8006f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b098      	sub	sp, #96	; 0x60
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fb0:	f7fa f96c 	bl	800128c <HAL_GetTick>
 8006fb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d12f      	bne.n	8007024 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f88e 	bl	80070f4 <UART_WaitOnFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d022      	beq.n	8007024 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e6      	bne.n	8006fde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e063      	b.n	80070ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b04      	cmp	r3, #4
 8007030:	d149      	bne.n	80070c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007032:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800703a:	2200      	movs	r2, #0
 800703c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f857 	bl	80070f4 <UART_WaitOnFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d03c      	beq.n	80070c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	623b      	str	r3, [r7, #32]
   return(result);
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706a:	633b      	str	r3, [r7, #48]	; 0x30
 800706c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e6      	bne.n	800704c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	60fb      	str	r3, [r7, #12]
   return(result);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f023 0301 	bic.w	r3, r3, #1
 8007094:	64bb      	str	r3, [r7, #72]	; 0x48
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800709e:	61fa      	str	r2, [r7, #28]
 80070a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	69b9      	ldr	r1, [r7, #24]
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	617b      	str	r3, [r7, #20]
   return(result);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e012      	b.n	80070ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3758      	adds	r7, #88	; 0x58
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007104:	e049      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800710c:	d045      	beq.n	800719a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710e:	f7fa f8bd 	bl	800128c <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	429a      	cmp	r2, r3
 800711c:	d302      	bcc.n	8007124 <UART_WaitOnFlagUntilTimeout+0x30>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e048      	b.n	80071ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0304 	and.w	r3, r3, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	d031      	beq.n	800719a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b08      	cmp	r3, #8
 8007142:	d110      	bne.n	8007166 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2208      	movs	r2, #8
 800714a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f839 	bl	80071c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2208      	movs	r2, #8
 8007156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e029      	b.n	80071ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007174:	d111      	bne.n	800719a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800717e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f81f 	bl	80071c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e00f      	b.n	80071ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4013      	ands	r3, r2
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	bf0c      	ite	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	2300      	movne	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d0a6      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b095      	sub	sp, #84	; 0x54
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ea:	643b      	str	r3, [r7, #64]	; 0x40
 80071ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e6      	bne.n	80071cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	61fb      	str	r3, [r7, #28]
   return(result);
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	4b1e      	ldr	r3, [pc, #120]	; (800728c <UART_EndRxTransfer+0xc8>)
 8007212:	4013      	ands	r3, r2
 8007214:	64bb      	str	r3, [r7, #72]	; 0x48
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3308      	adds	r3, #8
 800721c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800721e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e5      	bne.n	80071fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d118      	bne.n	800726c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	60bb      	str	r3, [r7, #8]
   return(result);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f023 0310 	bic.w	r3, r3, #16
 800724e:	647b      	str	r3, [r7, #68]	; 0x44
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6979      	ldr	r1, [r7, #20]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	613b      	str	r3, [r7, #16]
   return(result);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e6      	bne.n	800723a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007280:	bf00      	nop
 8007282:	3754      	adds	r7, #84	; 0x54
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	effffffe 	.word	0xeffffffe

08007290 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e027      	b.n	80072f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2224      	movs	r2, #36	; 0x24
 80072b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007316:	2302      	movs	r3, #2
 8007318:	e02d      	b.n	8007376 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2224      	movs	r2, #36	; 0x24
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f850 	bl	80073fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007392:	2302      	movs	r3, #2
 8007394:	e02d      	b.n	80073f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2224      	movs	r2, #36	; 0x24
 80073a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f812 	bl	80073fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007408:	2b00      	cmp	r3, #0
 800740a:	d108      	bne.n	800741e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800741c:	e031      	b.n	8007482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800741e:	2310      	movs	r3, #16
 8007420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007422:	2310      	movs	r3, #16
 8007424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	0e5b      	lsrs	r3, r3, #25
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	0f5b      	lsrs	r3, r3, #29
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	7b3a      	ldrb	r2, [r7, #12]
 800744a:	4911      	ldr	r1, [pc, #68]	; (8007490 <UARTEx_SetNbDataToProcess+0x94>)
 800744c:	5c8a      	ldrb	r2, [r1, r2]
 800744e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007452:	7b3a      	ldrb	r2, [r7, #12]
 8007454:	490f      	ldr	r1, [pc, #60]	; (8007494 <UARTEx_SetNbDataToProcess+0x98>)
 8007456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007458:	fb93 f3f2 	sdiv	r3, r3, r2
 800745c:	b29a      	uxth	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	7b7a      	ldrb	r2, [r7, #13]
 8007468:	4909      	ldr	r1, [pc, #36]	; (8007490 <UARTEx_SetNbDataToProcess+0x94>)
 800746a:	5c8a      	ldrb	r2, [r1, r2]
 800746c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007470:	7b7a      	ldrb	r2, [r7, #13]
 8007472:	4908      	ldr	r1, [pc, #32]	; (8007494 <UARTEx_SetNbDataToProcess+0x98>)
 8007474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007476:	fb93 f3f2 	sdiv	r3, r3, r2
 800747a:	b29a      	uxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	08007534 	.word	0x08007534
 8007494:	0800753c 	.word	0x0800753c

08007498 <memset>:
 8007498:	4402      	add	r2, r0
 800749a:	4603      	mov	r3, r0
 800749c:	4293      	cmp	r3, r2
 800749e:	d100      	bne.n	80074a2 <memset+0xa>
 80074a0:	4770      	bx	lr
 80074a2:	f803 1b01 	strb.w	r1, [r3], #1
 80074a6:	e7f9      	b.n	800749c <memset+0x4>

080074a8 <__libc_init_array>:
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	4d0d      	ldr	r5, [pc, #52]	; (80074e0 <__libc_init_array+0x38>)
 80074ac:	4c0d      	ldr	r4, [pc, #52]	; (80074e4 <__libc_init_array+0x3c>)
 80074ae:	1b64      	subs	r4, r4, r5
 80074b0:	10a4      	asrs	r4, r4, #2
 80074b2:	2600      	movs	r6, #0
 80074b4:	42a6      	cmp	r6, r4
 80074b6:	d109      	bne.n	80074cc <__libc_init_array+0x24>
 80074b8:	4d0b      	ldr	r5, [pc, #44]	; (80074e8 <__libc_init_array+0x40>)
 80074ba:	4c0c      	ldr	r4, [pc, #48]	; (80074ec <__libc_init_array+0x44>)
 80074bc:	f000 f818 	bl	80074f0 <_init>
 80074c0:	1b64      	subs	r4, r4, r5
 80074c2:	10a4      	asrs	r4, r4, #2
 80074c4:	2600      	movs	r6, #0
 80074c6:	42a6      	cmp	r6, r4
 80074c8:	d105      	bne.n	80074d6 <__libc_init_array+0x2e>
 80074ca:	bd70      	pop	{r4, r5, r6, pc}
 80074cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d0:	4798      	blx	r3
 80074d2:	3601      	adds	r6, #1
 80074d4:	e7ee      	b.n	80074b4 <__libc_init_array+0xc>
 80074d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074da:	4798      	blx	r3
 80074dc:	3601      	adds	r6, #1
 80074de:	e7f2      	b.n	80074c6 <__libc_init_array+0x1e>
 80074e0:	0800754c 	.word	0x0800754c
 80074e4:	0800754c 	.word	0x0800754c
 80074e8:	0800754c 	.word	0x0800754c
 80074ec:	08007550 	.word	0x08007550

080074f0 <_init>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr

080074fc <_fini>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	bf00      	nop
 8007500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007502:	bc08      	pop	{r3}
 8007504:	469e      	mov	lr, r3
 8007506:	4770      	bx	lr
