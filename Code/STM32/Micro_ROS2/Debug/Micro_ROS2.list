
Micro_ROS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016820  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08016ad0  08016ad0  00026ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080176dc  080176dc  000276dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080176e4  080176e4  000276e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080176ec  080176ec  000276ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000114  24000000  080176f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010bec  24000118  08017804  00030118  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24010d04  08017804  00030d04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 10 .comment      00000076  00000000  00000000  00030142  2**0
                  CONTENTS, READONLY
 11 .debug_info   000256cc  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004ce1  00000000  00000000  00055884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001af0  00000000  00000000  0005a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014c2  00000000  00000000  0005c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036e92  00000000  00000000  0005d51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000256e9  00000000  00000000  000943ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00154d77  00000000  00000000  000b9a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007d9c  00000000  00000000  0020e80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  002165a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000118 	.word	0x24000118
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08016ab8 	.word	0x08016ab8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400011c 	.word	0x2400011c
 80002ec:	08016ab8 	.word	0x08016ab8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_ldivmod>:
 80003c0:	b97b      	cbnz	r3, 80003e2 <__aeabi_ldivmod+0x22>
 80003c2:	b972      	cbnz	r2, 80003e2 <__aeabi_ldivmod+0x22>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bfbe      	ittt	lt
 80003c8:	2000      	movlt	r0, #0
 80003ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003ce:	e006      	blt.n	80003de <__aeabi_ldivmod+0x1e>
 80003d0:	bf08      	it	eq
 80003d2:	2800      	cmpeq	r0, #0
 80003d4:	bf1c      	itt	ne
 80003d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003da:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003de:	f000 b9bb 	b.w	8000758 <__aeabi_idiv0>
 80003e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ea:	2900      	cmp	r1, #0
 80003ec:	db09      	blt.n	8000402 <__aeabi_ldivmod+0x42>
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	db1a      	blt.n	8000428 <__aeabi_ldivmod+0x68>
 80003f2:	f000 f84d 	bl	8000490 <__udivmoddi4>
 80003f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fe:	b004      	add	sp, #16
 8000400:	4770      	bx	lr
 8000402:	4240      	negs	r0, r0
 8000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	db1b      	blt.n	8000444 <__aeabi_ldivmod+0x84>
 800040c:	f000 f840 	bl	8000490 <__udivmoddi4>
 8000410:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000418:	b004      	add	sp, #16
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	4252      	negs	r2, r2
 8000422:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000426:	4770      	bx	lr
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	f000 f82f 	bl	8000490 <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	4770      	bx	lr
 8000444:	4252      	negs	r2, r2
 8000446:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044a:	f000 f821 	bl	8000490 <__udivmoddi4>
 800044e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000456:	b004      	add	sp, #16
 8000458:	4252      	negs	r2, r2
 800045a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800045e:	4770      	bx	lr

08000460 <__aeabi_uldivmod>:
 8000460:	b953      	cbnz	r3, 8000478 <__aeabi_uldivmod+0x18>
 8000462:	b94a      	cbnz	r2, 8000478 <__aeabi_uldivmod+0x18>
 8000464:	2900      	cmp	r1, #0
 8000466:	bf08      	it	eq
 8000468:	2800      	cmpeq	r0, #0
 800046a:	bf1c      	itt	ne
 800046c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000470:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000474:	f000 b970 	b.w	8000758 <__aeabi_idiv0>
 8000478:	f1ad 0c08 	sub.w	ip, sp, #8
 800047c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000480:	f000 f806 	bl	8000490 <__udivmoddi4>
 8000484:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800048c:	b004      	add	sp, #16
 800048e:	4770      	bx	lr

08000490 <__udivmoddi4>:
 8000490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000494:	9e08      	ldr	r6, [sp, #32]
 8000496:	460d      	mov	r5, r1
 8000498:	4604      	mov	r4, r0
 800049a:	460f      	mov	r7, r1
 800049c:	2b00      	cmp	r3, #0
 800049e:	d14a      	bne.n	8000536 <__udivmoddi4+0xa6>
 80004a0:	428a      	cmp	r2, r1
 80004a2:	4694      	mov	ip, r2
 80004a4:	d965      	bls.n	8000572 <__udivmoddi4+0xe2>
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	b143      	cbz	r3, 80004be <__udivmoddi4+0x2e>
 80004ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b0:	f1c3 0220 	rsb	r2, r3, #32
 80004b4:	409f      	lsls	r7, r3
 80004b6:	fa20 f202 	lsr.w	r2, r0, r2
 80004ba:	4317      	orrs	r7, r2
 80004bc:	409c      	lsls	r4, r3
 80004be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004c2:	fa1f f58c 	uxth.w	r5, ip
 80004c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80004ca:	0c22      	lsrs	r2, r4, #16
 80004cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80004d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80004d4:	fb01 f005 	mul.w	r0, r1, r5
 80004d8:	4290      	cmp	r0, r2
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x62>
 80004dc:	eb1c 0202 	adds.w	r2, ip, r2
 80004e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80004e4:	f080 811c 	bcs.w	8000720 <__udivmoddi4+0x290>
 80004e8:	4290      	cmp	r0, r2
 80004ea:	f240 8119 	bls.w	8000720 <__udivmoddi4+0x290>
 80004ee:	3902      	subs	r1, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a12      	subs	r2, r2, r0
 80004f4:	b2a4      	uxth	r4, r4
 80004f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80004fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000502:	fb00 f505 	mul.w	r5, r0, r5
 8000506:	42a5      	cmp	r5, r4
 8000508:	d90a      	bls.n	8000520 <__udivmoddi4+0x90>
 800050a:	eb1c 0404 	adds.w	r4, ip, r4
 800050e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000512:	f080 8107 	bcs.w	8000724 <__udivmoddi4+0x294>
 8000516:	42a5      	cmp	r5, r4
 8000518:	f240 8104 	bls.w	8000724 <__udivmoddi4+0x294>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	2100      	movs	r1, #0
 8000528:	b11e      	cbz	r6, 8000532 <__udivmoddi4+0xa2>
 800052a:	40dc      	lsrs	r4, r3
 800052c:	2300      	movs	r3, #0
 800052e:	e9c6 4300 	strd	r4, r3, [r6]
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	428b      	cmp	r3, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0xbc>
 800053a:	2e00      	cmp	r6, #0
 800053c:	f000 80ed 	beq.w	800071a <__udivmoddi4+0x28a>
 8000540:	2100      	movs	r1, #0
 8000542:	e9c6 0500 	strd	r0, r5, [r6]
 8000546:	4608      	mov	r0, r1
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	fab3 f183 	clz	r1, r3
 8000550:	2900      	cmp	r1, #0
 8000552:	d149      	bne.n	80005e8 <__udivmoddi4+0x158>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d302      	bcc.n	800055e <__udivmoddi4+0xce>
 8000558:	4282      	cmp	r2, r0
 800055a:	f200 80f8 	bhi.w	800074e <__udivmoddi4+0x2be>
 800055e:	1a84      	subs	r4, r0, r2
 8000560:	eb65 0203 	sbc.w	r2, r5, r3
 8000564:	2001      	movs	r0, #1
 8000566:	4617      	mov	r7, r2
 8000568:	2e00      	cmp	r6, #0
 800056a:	d0e2      	beq.n	8000532 <__udivmoddi4+0xa2>
 800056c:	e9c6 4700 	strd	r4, r7, [r6]
 8000570:	e7df      	b.n	8000532 <__udivmoddi4+0xa2>
 8000572:	b902      	cbnz	r2, 8000576 <__udivmoddi4+0xe6>
 8000574:	deff      	udf	#255	; 0xff
 8000576:	fab2 f382 	clz	r3, r2
 800057a:	2b00      	cmp	r3, #0
 800057c:	f040 8090 	bne.w	80006a0 <__udivmoddi4+0x210>
 8000580:	1a8a      	subs	r2, r1, r2
 8000582:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000586:	fa1f fe8c 	uxth.w	lr, ip
 800058a:	2101      	movs	r1, #1
 800058c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000590:	fb07 2015 	mls	r0, r7, r5, r2
 8000594:	0c22      	lsrs	r2, r4, #16
 8000596:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800059a:	fb0e f005 	mul.w	r0, lr, r5
 800059e:	4290      	cmp	r0, r2
 80005a0:	d908      	bls.n	80005b4 <__udivmoddi4+0x124>
 80005a2:	eb1c 0202 	adds.w	r2, ip, r2
 80005a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x122>
 80005ac:	4290      	cmp	r0, r2
 80005ae:	f200 80cb 	bhi.w	8000748 <__udivmoddi4+0x2b8>
 80005b2:	4645      	mov	r5, r8
 80005b4:	1a12      	subs	r2, r2, r0
 80005b6:	b2a4      	uxth	r4, r4
 80005b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80005bc:	fb07 2210 	mls	r2, r7, r0, r2
 80005c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005c4:	fb0e fe00 	mul.w	lr, lr, r0
 80005c8:	45a6      	cmp	lr, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x14e>
 80005cc:	eb1c 0404 	adds.w	r4, ip, r4
 80005d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80005d4:	d202      	bcs.n	80005dc <__udivmoddi4+0x14c>
 80005d6:	45a6      	cmp	lr, r4
 80005d8:	f200 80bb 	bhi.w	8000752 <__udivmoddi4+0x2c2>
 80005dc:	4610      	mov	r0, r2
 80005de:	eba4 040e 	sub.w	r4, r4, lr
 80005e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x98>
 80005e8:	f1c1 0720 	rsb	r7, r1, #32
 80005ec:	408b      	lsls	r3, r1
 80005ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80005f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005f6:	fa05 f401 	lsl.w	r4, r5, r1
 80005fa:	fa20 f307 	lsr.w	r3, r0, r7
 80005fe:	40fd      	lsrs	r5, r7
 8000600:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000604:	4323      	orrs	r3, r4
 8000606:	fbb5 f8f9 	udiv	r8, r5, r9
 800060a:	fa1f fe8c 	uxth.w	lr, ip
 800060e:	fb09 5518 	mls	r5, r9, r8, r5
 8000612:	0c1c      	lsrs	r4, r3, #16
 8000614:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000618:	fb08 f50e 	mul.w	r5, r8, lr
 800061c:	42a5      	cmp	r5, r4
 800061e:	fa02 f201 	lsl.w	r2, r2, r1
 8000622:	fa00 f001 	lsl.w	r0, r0, r1
 8000626:	d90b      	bls.n	8000640 <__udivmoddi4+0x1b0>
 8000628:	eb1c 0404 	adds.w	r4, ip, r4
 800062c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000630:	f080 8088 	bcs.w	8000744 <__udivmoddi4+0x2b4>
 8000634:	42a5      	cmp	r5, r4
 8000636:	f240 8085 	bls.w	8000744 <__udivmoddi4+0x2b4>
 800063a:	f1a8 0802 	sub.w	r8, r8, #2
 800063e:	4464      	add	r4, ip
 8000640:	1b64      	subs	r4, r4, r5
 8000642:	b29d      	uxth	r5, r3
 8000644:	fbb4 f3f9 	udiv	r3, r4, r9
 8000648:	fb09 4413 	mls	r4, r9, r3, r4
 800064c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000650:	fb03 fe0e 	mul.w	lr, r3, lr
 8000654:	45a6      	cmp	lr, r4
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x1da>
 8000658:	eb1c 0404 	adds.w	r4, ip, r4
 800065c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000660:	d26c      	bcs.n	800073c <__udivmoddi4+0x2ac>
 8000662:	45a6      	cmp	lr, r4
 8000664:	d96a      	bls.n	800073c <__udivmoddi4+0x2ac>
 8000666:	3b02      	subs	r3, #2
 8000668:	4464      	add	r4, ip
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fba3 9502 	umull	r9, r5, r3, r2
 8000672:	eba4 040e 	sub.w	r4, r4, lr
 8000676:	42ac      	cmp	r4, r5
 8000678:	46c8      	mov	r8, r9
 800067a:	46ae      	mov	lr, r5
 800067c:	d356      	bcc.n	800072c <__udivmoddi4+0x29c>
 800067e:	d053      	beq.n	8000728 <__udivmoddi4+0x298>
 8000680:	b156      	cbz	r6, 8000698 <__udivmoddi4+0x208>
 8000682:	ebb0 0208 	subs.w	r2, r0, r8
 8000686:	eb64 040e 	sbc.w	r4, r4, lr
 800068a:	fa04 f707 	lsl.w	r7, r4, r7
 800068e:	40ca      	lsrs	r2, r1
 8000690:	40cc      	lsrs	r4, r1
 8000692:	4317      	orrs	r7, r2
 8000694:	e9c6 7400 	strd	r7, r4, [r6]
 8000698:	4618      	mov	r0, r3
 800069a:	2100      	movs	r1, #0
 800069c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a0:	f1c3 0120 	rsb	r1, r3, #32
 80006a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a8:	fa20 f201 	lsr.w	r2, r0, r1
 80006ac:	fa25 f101 	lsr.w	r1, r5, r1
 80006b0:	409d      	lsls	r5, r3
 80006b2:	432a      	orrs	r2, r5
 80006b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b8:	fa1f fe8c 	uxth.w	lr, ip
 80006bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80006c0:	fb07 1510 	mls	r5, r7, r0, r1
 80006c4:	0c11      	lsrs	r1, r2, #16
 80006c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80006ca:	fb00 f50e 	mul.w	r5, r0, lr
 80006ce:	428d      	cmp	r5, r1
 80006d0:	fa04 f403 	lsl.w	r4, r4, r3
 80006d4:	d908      	bls.n	80006e8 <__udivmoddi4+0x258>
 80006d6:	eb1c 0101 	adds.w	r1, ip, r1
 80006da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006de:	d22f      	bcs.n	8000740 <__udivmoddi4+0x2b0>
 80006e0:	428d      	cmp	r5, r1
 80006e2:	d92d      	bls.n	8000740 <__udivmoddi4+0x2b0>
 80006e4:	3802      	subs	r0, #2
 80006e6:	4461      	add	r1, ip
 80006e8:	1b49      	subs	r1, r1, r5
 80006ea:	b292      	uxth	r2, r2
 80006ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80006f0:	fb07 1115 	mls	r1, r7, r5, r1
 80006f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006f8:	fb05 f10e 	mul.w	r1, r5, lr
 80006fc:	4291      	cmp	r1, r2
 80006fe:	d908      	bls.n	8000712 <__udivmoddi4+0x282>
 8000700:	eb1c 0202 	adds.w	r2, ip, r2
 8000704:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000708:	d216      	bcs.n	8000738 <__udivmoddi4+0x2a8>
 800070a:	4291      	cmp	r1, r2
 800070c:	d914      	bls.n	8000738 <__udivmoddi4+0x2a8>
 800070e:	3d02      	subs	r5, #2
 8000710:	4462      	add	r2, ip
 8000712:	1a52      	subs	r2, r2, r1
 8000714:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000718:	e738      	b.n	800058c <__udivmoddi4+0xfc>
 800071a:	4631      	mov	r1, r6
 800071c:	4630      	mov	r0, r6
 800071e:	e708      	b.n	8000532 <__udivmoddi4+0xa2>
 8000720:	4639      	mov	r1, r7
 8000722:	e6e6      	b.n	80004f2 <__udivmoddi4+0x62>
 8000724:	4610      	mov	r0, r2
 8000726:	e6fb      	b.n	8000520 <__udivmoddi4+0x90>
 8000728:	4548      	cmp	r0, r9
 800072a:	d2a9      	bcs.n	8000680 <__udivmoddi4+0x1f0>
 800072c:	ebb9 0802 	subs.w	r8, r9, r2
 8000730:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000734:	3b01      	subs	r3, #1
 8000736:	e7a3      	b.n	8000680 <__udivmoddi4+0x1f0>
 8000738:	4645      	mov	r5, r8
 800073a:	e7ea      	b.n	8000712 <__udivmoddi4+0x282>
 800073c:	462b      	mov	r3, r5
 800073e:	e794      	b.n	800066a <__udivmoddi4+0x1da>
 8000740:	4640      	mov	r0, r8
 8000742:	e7d1      	b.n	80006e8 <__udivmoddi4+0x258>
 8000744:	46d0      	mov	r8, sl
 8000746:	e77b      	b.n	8000640 <__udivmoddi4+0x1b0>
 8000748:	3d02      	subs	r5, #2
 800074a:	4462      	add	r2, ip
 800074c:	e732      	b.n	80005b4 <__udivmoddi4+0x124>
 800074e:	4608      	mov	r0, r1
 8000750:	e70a      	b.n	8000568 <__udivmoddi4+0xd8>
 8000752:	4464      	add	r4, ip
 8000754:	3802      	subs	r0, #2
 8000756:	e742      	b.n	80005de <__udivmoddi4+0x14e>

08000758 <__aeabi_idiv0>:
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000768:	f00a fa86 	bl	800ac78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800076c:	4b58      	ldr	r3, [pc, #352]	; (80008d0 <pvPortMallocMicroROS+0x174>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d101      	bne.n	8000778 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000774:	f000 f980 	bl	8000a78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000778:	4b56      	ldr	r3, [pc, #344]	; (80008d4 <pvPortMallocMicroROS+0x178>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4013      	ands	r3, r2
 8000780:	2b00      	cmp	r3, #0
 8000782:	f040 808e 	bne.w	80008a2 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d01d      	beq.n	80007c8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800078c:	2208      	movs	r2, #8
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	2b00      	cmp	r3, #0
 800079c:	d014      	beq.n	80007c8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f023 0307 	bic.w	r3, r3, #7
 80007a4:	3308      	adds	r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00a      	beq.n	80007c8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b6:	f383 8811 	msr	BASEPRI, r3
 80007ba:	f3bf 8f6f 	isb	sy
 80007be:	f3bf 8f4f 	dsb	sy
 80007c2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007c4:	bf00      	nop
 80007c6:	e7fe      	b.n	80007c6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d069      	beq.n	80008a2 <pvPortMallocMicroROS+0x146>
 80007ce:	4b42      	ldr	r3, [pc, #264]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d864      	bhi.n	80008a2 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <pvPortMallocMicroROS+0x180>)
 80007da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007dc:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <pvPortMallocMicroROS+0x180>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e2:	e004      	b.n	80007ee <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d903      	bls.n	8000800 <pvPortMallocMicroROS+0xa4>
 80007f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f1      	bne.n	80007e4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000800:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <pvPortMallocMicroROS+0x174>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000806:	429a      	cmp	r2, r3
 8000808:	d04b      	beq.n	80008a2 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2208      	movs	r2, #8
 8000810:	4413      	add	r3, r2
 8000812:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	1ad2      	subs	r2, r2, r3
 8000824:	2308      	movs	r3, #8
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	429a      	cmp	r2, r3
 800082a:	d91f      	bls.n	800086c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00a      	beq.n	8000854 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800083e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000842:	f383 8811 	msr	BASEPRI, r3
 8000846:	f3bf 8f6f 	isb	sy
 800084a:	f3bf 8f4f 	dsb	sy
 800084e:	613b      	str	r3, [r7, #16]
}
 8000850:	bf00      	nop
 8000852:	e7fe      	b.n	8000852 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f968 	bl	8000b3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <pvPortMallocMicroROS+0x184>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <pvPortMallocMicroROS+0x17c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <pvPortMallocMicroROS+0x184>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <pvPortMallocMicroROS+0x178>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f00a f9f7 	bl	800ac94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00a      	beq.n	80008c6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	60fb      	str	r3, [r7, #12]
}
 80008c2:	bf00      	nop
 80008c4:	e7fe      	b.n	80008c4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80008c6:	69fb      	ldr	r3, [r7, #28]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24003d3c 	.word	0x24003d3c
 80008d4:	24003d48 	.word	0x24003d48
 80008d8:	24003d40 	.word	0x24003d40
 80008dc:	24003d34 	.word	0x24003d34
 80008e0:	24003d44 	.word	0x24003d44

080008e4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d048      	beq.n	8000988 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008f6:	2308      	movs	r3, #8
 80008f8:	425b      	negs	r3, r3
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4413      	add	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <vPortFreeMicroROS+0xac>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4013      	ands	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10a      	bne.n	8000928 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000916:	f383 8811 	msr	BASEPRI, r3
 800091a:	f3bf 8f6f 	isb	sy
 800091e:	f3bf 8f4f 	dsb	sy
 8000922:	60fb      	str	r3, [r7, #12]
}
 8000924:	bf00      	nop
 8000926:	e7fe      	b.n	8000926 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00a      	beq.n	8000946 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	60bb      	str	r3, [r7, #8]
}
 8000942:	bf00      	nop
 8000944:	e7fe      	b.n	8000944 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <vPortFreeMicroROS+0xac>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4013      	ands	r3, r2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d019      	beq.n	8000988 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d115      	bne.n	8000988 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <vPortFreeMicroROS+0xac>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	43db      	mvns	r3, r3
 8000966:	401a      	ands	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800096c:	f00a f984 	bl	800ac78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <vPortFreeMicroROS+0xb0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4413      	add	r3, r2
 800097a:	4a06      	ldr	r2, [pc, #24]	; (8000994 <vPortFreeMicroROS+0xb0>)
 800097c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800097e:	6938      	ldr	r0, [r7, #16]
 8000980:	f000 f8dc 	bl	8000b3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000984:	f00a f986 	bl	800ac94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24003d48 	.word	0x24003d48
 8000994:	24003d40 	.word	0x24003d40

08000998 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80009a4:	2308      	movs	r3, #8
 80009a6:	425b      	negs	r3, r3
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	4413      	add	r3, r2
 80009ac:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <getBlockSize+0x38>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	43db      	mvns	r3, r3
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]

	return count;
 80009c0:	68fb      	ldr	r3, [r7, #12]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	24003d48 	.word	0x24003d48

080009d4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009de:	f00a f94b 	bl	800ac78 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009e2:	6838      	ldr	r0, [r7, #0]
 80009e4:	f7ff feba 	bl	800075c <pvPortMallocMicroROS>
 80009e8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d017      	beq.n	8000a20 <pvPortReallocMicroROS+0x4c>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d014      	beq.n	8000a20 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffce 	bl	8000998 <getBlockSize>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2208      	movs	r2, #8
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d201      	bcs.n	8000a10 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	68b8      	ldr	r0, [r7, #8]
 8000a16:	f015 f956 	bl	8015cc6 <memcpy>

		vPortFreeMicroROS(pv);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ff62 	bl	80008e4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a20:	f00a f938 	bl	800ac94 <xTaskResumeAll>

	return newmem;
 8000a24:	68bb      	ldr	r3, [r7, #8]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a38:	f00a f91e 	bl	800ac78 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a46:	6978      	ldr	r0, [r7, #20]
 8000a48:	f7ff fe88 	bl	800075c <pvPortMallocMicroROS>
 8000a4c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a52:	e004      	b.n	8000a5e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	613a      	str	r2, [r7, #16]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	617a      	str	r2, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f5      	bne.n	8000a54 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a68:	f00a f914 	bl	800ac94 <xTaskResumeAll>
  	return mem;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a7e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <prvHeapInit+0xac>)
 8000a86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00c      	beq.n	8000aac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3307      	adds	r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f023 0307 	bic.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <prvHeapInit+0xac>)
 8000aa8:	4413      	add	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <prvHeapInit+0xb0>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <prvHeapInit+0xb0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f023 0307 	bic.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <prvHeapInit+0xb4>)
 8000ad8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <prvHeapInit+0xb4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <prvHeapInit+0xb4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <prvHeapInit+0xb4>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <prvHeapInit+0xb8>)
 8000b06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <prvHeapInit+0xbc>)
 8000b0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <prvHeapInit+0xc0>)
 8000b12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	24000134 	.word	0x24000134
 8000b28:	24003d34 	.word	0x24003d34
 8000b2c:	24003d3c 	.word	0x24003d3c
 8000b30:	24003d44 	.word	0x24003d44
 8000b34:	24003d40 	.word	0x24003d40
 8000b38:	24003d48 	.word	0x24003d48

08000b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <prvInsertBlockIntoFreeList+0xac>)
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e002      	b.n	8000b50 <prvInsertBlockIntoFreeList+0x14>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d8f7      	bhi.n	8000b4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d108      	bne.n	8000b7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	441a      	add	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	441a      	add	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d118      	bne.n	8000bc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <prvInsertBlockIntoFreeList+0xb0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d00d      	beq.n	8000bba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	441a      	add	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e008      	b.n	8000bcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <prvInsertBlockIntoFreeList+0xb0>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e003      	b.n	8000bcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d002      	beq.n	8000bda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	24003d34 	.word	0x24003d34
 8000bec:	24003d3c 	.word	0x24003d3c

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000bf8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000c08:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2105      	movs	r1, #5
 8000c18:	200b      	movs	r0, #11
 8000c1a:	f001 f969 	bl	8001ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f001 f980 	bl	8001f24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2105      	movs	r1, #5
 8000c28:	200c      	movs	r0, #12
 8000c2a:	f001 f961 	bl	8001ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f001 f978 	bl	8001f24 <HAL_NVIC_EnableIRQ>

}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58024400 	.word	0x58024400

08000c40 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c4e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <cubemx_transport_open+0x28>)
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f007 f9c4 	bl	8007fe4 <HAL_UART_Receive_DMA>
    return true;
 8000c5c:	2301      	movs	r3, #1
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	24003d4c 	.word	0x24003d4c

08000c6c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c7a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f007 f9fd 	bl	800807c <HAL_UART_DMAStop>
    return true;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000ca0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca8:	2b20      	cmp	r3, #32
 8000caa:	d11b      	bne.n	8000ce4 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	6978      	ldr	r0, [r7, #20]
 8000cb6:	f007 f915 	bl	8007ee4 <HAL_UART_Transmit_DMA>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cbe:	e002      	b.n	8000cc6 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f008 ff8d 	bl	8009be0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cc6:	7cfb      	ldrb	r3, [r7, #19]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d104      	bne.n	8000cd6 <cubemx_transport_write+0x4a>
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	2b20      	cmp	r3, #32
 8000cd4:	d1f4      	bne.n	8000cc0 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000cd6:	7cfb      	ldrb	r3, [r7, #19]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <cubemx_transport_write+0x54>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	e002      	b.n	8000ce6 <cubemx_transport_write+0x5a>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e000      	b.n	8000ce6 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000ce4:	2300      	movs	r3, #0
    }
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000d04:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0a:	b672      	cpsid	i
}
 8000d0c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a5a      	ldr	r2, [pc, #360]	; (8000e80 <cubemx_transport_read+0x190>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d068      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a57      	ldr	r2, [pc, #348]	; (8000e84 <cubemx_transport_read+0x194>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d061      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a55      	ldr	r2, [pc, #340]	; (8000e88 <cubemx_transport_read+0x198>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d05a      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <cubemx_transport_read+0x19c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d053      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a50      	ldr	r2, [pc, #320]	; (8000e90 <cubemx_transport_read+0x1a0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d04c      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a4d      	ldr	r2, [pc, #308]	; (8000e94 <cubemx_transport_read+0x1a4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d045      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a4b      	ldr	r2, [pc, #300]	; (8000e98 <cubemx_transport_read+0x1a8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d03e      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a48      	ldr	r2, [pc, #288]	; (8000e9c <cubemx_transport_read+0x1ac>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d037      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a46      	ldr	r2, [pc, #280]	; (8000ea0 <cubemx_transport_read+0x1b0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d030      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a43      	ldr	r2, [pc, #268]	; (8000ea4 <cubemx_transport_read+0x1b4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d029      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <cubemx_transport_read+0x1b8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d022      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <cubemx_transport_read+0x1bc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d01b      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a3c      	ldr	r2, [pc, #240]	; (8000eb0 <cubemx_transport_read+0x1c0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d014      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a39      	ldr	r2, [pc, #228]	; (8000eb4 <cubemx_transport_read+0x1c4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a37      	ldr	r2, [pc, #220]	; (8000eb8 <cubemx_transport_read+0x1c8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d006      	beq.n	8000dee <cubemx_transport_read+0xfe>
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a34      	ldr	r2, [pc, #208]	; (8000ebc <cubemx_transport_read+0x1cc>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d107      	bne.n	8000dfe <cubemx_transport_read+0x10e>
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000dfc:	e006      	b.n	8000e0c <cubemx_transport_read+0x11c>
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000e0c:	4a2c      	ldr	r2, [pc, #176]	; (8000ec0 <cubemx_transport_read+0x1d0>)
 8000e0e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e10:	b662      	cpsie	i
}
 8000e12:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	3301      	adds	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f008 fee0 	bl	8009be0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <cubemx_transport_read+0x1d4>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <cubemx_transport_read+0x1d0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d104      	bne.n	8000e36 <cubemx_transport_read+0x146>
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f6ff af6a 	blt.w	8000d0a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e3a:	e011      	b.n	8000e60 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <cubemx_transport_read+0x1d4>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	440b      	add	r3, r1
 8000e46:	4920      	ldr	r1, [pc, #128]	; (8000ec8 <cubemx_transport_read+0x1d8>)
 8000e48:	5c8a      	ldrb	r2, [r1, r2]
 8000e4a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <cubemx_transport_read+0x1d4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e56:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <cubemx_transport_read+0x1d4>)
 8000e58:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <cubemx_transport_read+0x1d4>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <cubemx_transport_read+0x1d0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d003      	beq.n	8000e74 <cubemx_transport_read+0x184>
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3e3      	bcc.n	8000e3c <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000e74:	69bb      	ldr	r3, [r7, #24]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020010 	.word	0x40020010
 8000e84:	40020028 	.word	0x40020028
 8000e88:	40020040 	.word	0x40020040
 8000e8c:	40020058 	.word	0x40020058
 8000e90:	40020070 	.word	0x40020070
 8000e94:	40020088 	.word	0x40020088
 8000e98:	400200a0 	.word	0x400200a0
 8000e9c:	400200b8 	.word	0x400200b8
 8000ea0:	40020410 	.word	0x40020410
 8000ea4:	40020428 	.word	0x40020428
 8000ea8:	40020440 	.word	0x40020440
 8000eac:	40020458 	.word	0x40020458
 8000eb0:	40020470 	.word	0x40020470
 8000eb4:	40020488 	.word	0x40020488
 8000eb8:	400204a0 	.word	0x400204a0
 8000ebc:	400204b8 	.word	0x400204b8
 8000ec0:	24004550 	.word	0x24004550
 8000ec4:	2400454c 	.word	0x2400454c
 8000ec8:	24003d4c 	.word	0x24003d4c

08000ecc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <MX_FREERTOS_Init+0x18>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_FREERTOS_Init+0x1c>)
 8000ed6:	f008 fdf1 	bl	8009abc <osThreadNew>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <MX_FREERTOS_Init+0x20>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	08016b68 	.word	0x08016b68
 8000ee8:	08000ef1 	.word	0x08000ef1
 8000eec:	24004554 	.word	0x24004554

08000ef0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b0a6      	sub	sp, #152	; 0x98
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartDefaultTask */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <StartDefaultTask+0xd8>)
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <StartDefaultTask+0xdc>)
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <StartDefaultTask+0xe0>)
 8000f02:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <StartDefaultTask+0xe4>)
 8000f04:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <StartDefaultTask+0xe8>)
 8000f06:	2001      	movs	r0, #1
 8000f08:	f00b fd6e 	bl	800c9e8 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000f0c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00b fceb 	bl	800c8ec <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <StartDefaultTask+0xec>)
 8000f18:	67bb      	str	r3, [r7, #120]	; 0x78
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000f1a:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <StartDefaultTask+0xf0>)
 8000f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000f1e:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <StartDefaultTask+0xf4>)
 8000f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000f24:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <StartDefaultTask+0xf8>)
 8000f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000f2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f00b fcea 	bl	800c908 <rcutils_set_default_allocator>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f083 0301 	eor.w	r3, r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <StartDefaultTask+0x58>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8000f40:	21a0      	movs	r1, #160	; 0xa0
 8000f42:	482a      	ldr	r0, [pc, #168]	; (8000fec <StartDefaultTask+0xfc>)
 8000f44:	f014 fcde 	bl	8015904 <iprintf>
  std_msgs__msg__Int32 msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00b fcfa 	bl	800c944 <rcutils_get_default_allocator>
 8000f50:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000f54:	463d      	mov	r5, r7
 8000f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5a:	682b      	ldr	r3, [r5, #0]
 8000f5c:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8000f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f62:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	f00b fbf1 	bl	800c750 <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000f6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f72:	f107 0020 	add.w	r0, r7, #32
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <StartDefaultTask+0x100>)
 8000f78:	491e      	ldr	r1, [pc, #120]	; (8000ff4 <StartDefaultTask+0x104>)
 8000f7a:	f00b fc33 	bl	800c7e4 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 8000f7e:	f00c f9c9 	bl	800d314 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f107 0120 	add.w	r1, r7, #32
 8000f88:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <StartDefaultTask+0x108>)
 8000f8e:	f00b fc6b 	bl	800c868 <rclc_publisher_init_default>
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "cubemx_publisher");

  msg.data = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	673b      	str	r3, [r7, #112]	; 0x70

  for(;;)
  {
    rcl_ret_t ret;

    ret = rcl_publish(&publisher, &msg, NULL);
 8000f96:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000f9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00b fbb1 	bl	800c708 <rcl_publish>
 8000fa6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (ret != RCL_RET_OK)
 8000faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <StartDefaultTask+0xca>
    {
      printf("Error publishing (line %d)\n", __LINE__);
 8000fb2:	21c3      	movs	r1, #195	; 0xc3
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <StartDefaultTask+0x10c>)
 8000fb6:	f014 fca5 	bl	8015904 <iprintf>
    }

    msg.data++;
 8000fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	673b      	str	r3, [r7, #112]	; 0x70
    osDelay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f008 fe0d 	bl	8009be0 <osDelay>
  {
 8000fc6:	e7e6      	b.n	8000f96 <StartDefaultTask+0xa6>
 8000fc8:	08000cf1 	.word	0x08000cf1
 8000fcc:	08000c8d 	.word	0x08000c8d
 8000fd0:	08000c6d 	.word	0x08000c6d
 8000fd4:	08000c41 	.word	0x08000c41
 8000fd8:	2400753c 	.word	0x2400753c
 8000fdc:	0800137d 	.word	0x0800137d
 8000fe0:	080013c1 	.word	0x080013c1
 8000fe4:	080013f9 	.word	0x080013f9
 8000fe8:	08001465 	.word	0x08001465
 8000fec:	08016adc 	.word	0x08016adc
 8000ff0:	08016b04 	.word	0x08016b04
 8000ff4:	08016b08 	.word	0x08016b08
 8000ff8:	08016b14 	.word	0x08016b14
 8000ffc:	08016b28 	.word	0x08016b28

08001000 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <MX_GPIO_Init+0x218>)
 8001018:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800101c:	4a7e      	ldr	r2, [pc, #504]	; (8001218 <MX_GPIO_Init+0x218>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001026:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <MX_GPIO_Init+0x218>)
 8001028:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	623b      	str	r3, [r7, #32]
 8001032:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001034:	4b78      	ldr	r3, [pc, #480]	; (8001218 <MX_GPIO_Init+0x218>)
 8001036:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103a:	4a77      	ldr	r2, [pc, #476]	; (8001218 <MX_GPIO_Init+0x218>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001044:	4b74      	ldr	r3, [pc, #464]	; (8001218 <MX_GPIO_Init+0x218>)
 8001046:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104a:	f003 0320 	and.w	r3, r3, #32
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	4b71      	ldr	r3, [pc, #452]	; (8001218 <MX_GPIO_Init+0x218>)
 8001054:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001058:	4a6f      	ldr	r2, [pc, #444]	; (8001218 <MX_GPIO_Init+0x218>)
 800105a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001062:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <MX_GPIO_Init+0x218>)
 8001064:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b69      	ldr	r3, [pc, #420]	; (8001218 <MX_GPIO_Init+0x218>)
 8001072:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001076:	4a68      	ldr	r2, [pc, #416]	; (8001218 <MX_GPIO_Init+0x218>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <MX_GPIO_Init+0x218>)
 8001082:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b62      	ldr	r3, [pc, #392]	; (8001218 <MX_GPIO_Init+0x218>)
 8001090:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <MX_GPIO_Init+0x218>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <MX_GPIO_Init+0x218>)
 80010a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ac:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <MX_GPIO_Init+0x218>)
 80010ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b2:	4a59      	ldr	r2, [pc, #356]	; (8001218 <MX_GPIO_Init+0x218>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010bc:	4b56      	ldr	r3, [pc, #344]	; (8001218 <MX_GPIO_Init+0x218>)
 80010be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b53      	ldr	r3, [pc, #332]	; (8001218 <MX_GPIO_Init+0x218>)
 80010cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <MX_GPIO_Init+0x218>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <MX_GPIO_Init+0x218>)
 80010dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e8:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <MX_GPIO_Init+0x218>)
 80010ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ee:	4a4a      	ldr	r2, [pc, #296]	; (8001218 <MX_GPIO_Init+0x218>)
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010f8:	4b47      	ldr	r3, [pc, #284]	; (8001218 <MX_GPIO_Init+0x218>)
 80010fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110c:	4843      	ldr	r0, [pc, #268]	; (800121c <MX_GPIO_Init+0x21c>)
 800110e:	f003 fd6b 	bl	8004be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f244 0101 	movw	r1, #16385	; 0x4001
 8001118:	4841      	ldr	r0, [pc, #260]	; (8001220 <MX_GPIO_Init+0x220>)
 800111a:	f003 fd65 	bl	8004be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2102      	movs	r1, #2
 8001122:	4840      	ldr	r0, [pc, #256]	; (8001224 <MX_GPIO_Init+0x224>)
 8001124:	f003 fd60 	bl	8004be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	483a      	ldr	r0, [pc, #232]	; (8001228 <MX_GPIO_Init+0x228>)
 800113e:	f003 fba3 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4830      	ldr	r0, [pc, #192]	; (800121c <MX_GPIO_Init+0x21c>)
 800115c:	f003 fb94 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001160:	f244 0301 	movw	r3, #16385	; 0x4001
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	4829      	ldr	r0, [pc, #164]	; (8001220 <MX_GPIO_Init+0x220>)
 800117a:	f003 fb85 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	4826      	ldr	r0, [pc, #152]	; (800122c <MX_GPIO_Init+0x22c>)
 8001194:	f003 fb78 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4820      	ldr	r0, [pc, #128]	; (8001230 <MX_GPIO_Init+0x230>)
 80011ae:	f003 fb6b 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80011c4:	230a      	movs	r3, #10
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_GPIO_Init+0x230>)
 80011d0:	f003 fb5a 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80011d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <MX_GPIO_Init+0x230>)
 80011ee:	f003 fb4b 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f2:	2302      	movs	r3, #2
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_GPIO_Init+0x224>)
 800120a:	f003 fb3d 	bl	8004888 <HAL_GPIO_Init>

}
 800120e:	bf00      	nop
 8001210:	3738      	adds	r7, #56	; 0x38
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58024400 	.word	0x58024400
 800121c:	58021400 	.word	0x58021400
 8001220:	58020400 	.word	0x58020400
 8001224:	58021000 	.word	0x58021000
 8001228:	58020800 	.word	0x58020800
 800122c:	58021800 	.word	0x58021800
 8001230:	58020000 	.word	0x58020000

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f000 fd46 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f810 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f7ff fede 	bl	8001000 <MX_GPIO_Init>
  MX_DMA_Init();
 8001244:	f7ff fcd4 	bl	8000bf0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001248:	f000 fbf0 	bl	8001a2c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800124c:	f000 fd0a 	bl	8001c64 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001250:	f008 fbea 	bl	8009a28 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001254:	f7ff fe3a 	bl	8000ecc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001258:	f008 fc0a 	bl	8009a70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800125c:	e7fe      	b.n	800125c <main+0x28>
	...

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b09c      	sub	sp, #112	; 0x70
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	224c      	movs	r2, #76	; 0x4c
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f014 fc0a 	bl	8015a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2220      	movs	r2, #32
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f014 fc04 	bl	8015a88 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <SystemClock_Config+0xe4>)
 8001282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800128a:	2004      	movs	r0, #4
 800128c:	f003 fcc6 	bl	8004c1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001290:	2300      	movs	r3, #0
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <SystemClock_Config+0xe8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <SystemClock_Config+0xe8>)
 800129a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <SystemClock_Config+0xe8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012ac:	bf00      	nop
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <SystemClock_Config+0xe8>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ba:	d1f8      	bne.n	80012ae <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80012bc:	2321      	movs	r3, #33	; 0x21
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012c6:	2301      	movs	r3, #1
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ce:	2302      	movs	r3, #2
 80012d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80012d6:	2346      	movs	r3, #70	; 0x46
 80012d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012da:	2302      	movs	r3, #2
 80012dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012de:	2304      	movs	r3, #4
 80012e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012e6:	230c      	movs	r3, #12
 80012e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fcea 	bl	8004cd0 <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001302:	f000 f835 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	233f      	movs	r3, #63	; 0x3f
 8001308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2303      	movs	r3, #3
 800130c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001316:	2340      	movs	r3, #64	; 0x40
 8001318:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800131a:	2340      	movs	r3, #64	; 0x40
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800131e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001322:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2106      	movs	r1, #6
 800132c:	4618      	mov	r0, r3
 800132e:	f004 f901 	bl	8005534 <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001338:	f000 f81a 	bl	8001370 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3770      	adds	r7, #112	; 0x70
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	58024400 	.word	0x58024400
 8001348:	58024800 	.word	0x58024800

0800134c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135e:	f000 fcef 	bl	8001d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40010000 	.word	0x40010000

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <microros_allocate+0x3c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	461a      	mov	r2, r3
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <microros_allocate+0x3c>)
 8001394:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <microros_allocate+0x40>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <microros_allocate+0x40>)
 80013a4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff f9d8 	bl	800075c <pvPortMallocMicroROS>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	240074e0 	.word	0x240074e0
 80013bc:	240074e4 	.word	0x240074e4

080013c0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00c      	beq.n	80013ea <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fae1 	bl	8000998 <getBlockSize>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <microros_deallocate+0x34>)
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <microros_deallocate+0x34>)
 80013e2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fa7d 	bl	80008e4 <vPortFreeMicroROS>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	240074e4 	.word	0x240074e4

080013f8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <microros_reallocate+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	4413      	add	r3, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <microros_reallocate+0x64>)
 8001412:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <microros_reallocate+0x68>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4413      	add	r3, r2
 800141e:	461a      	mov	r2, r3
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <microros_reallocate+0x68>)
 8001422:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d104      	bne.n	8001434 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f7ff f996 	bl	800075c <pvPortMallocMicroROS>
 8001430:	4603      	mov	r3, r0
 8001432:	e00e      	b.n	8001452 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff faaf 	bl	8000998 <getBlockSize>
 800143a:	4603      	mov	r3, r0
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <microros_reallocate+0x68>)
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	461a      	mov	r2, r3
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <microros_reallocate+0x68>)
 8001446:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fac2 	bl	80009d4 <pvPortReallocMicroROS>
 8001450:	4603      	mov	r3, r0
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	240074e0 	.word	0x240074e0
 8001460:	240074e4 	.word	0x240074e4

08001464 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <microros_zero_allocate+0x48>)
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	4413      	add	r3, r2
 800147e:	461a      	mov	r2, r3
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <microros_zero_allocate+0x48>)
 8001482:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <microros_zero_allocate+0x4c>)
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	4413      	add	r3, r2
 8001492:	461a      	mov	r2, r3
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <microros_zero_allocate+0x4c>)
 8001496:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff fac7 	bl	8000a2e <pvPortCallocMicroROS>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	240074e0 	.word	0x240074e0
 80014b0:	240074e4 	.word	0x240074e4
 80014b4:	00000000 	.word	0x00000000

080014b8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80014b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80014ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014ce:	a320      	add	r3, pc, #128	; (adr r3, 8001550 <UTILS_NanosecondsToTimespec+0x98>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7fe ff74 	bl	80003c0 <__aeabi_ldivmod>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80014e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014e6:	a31a      	add	r3, pc, #104	; (adr r3, 8001550 <UTILS_NanosecondsToTimespec+0x98>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7fe ff68 	bl	80003c0 <__aeabi_ldivmod>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da20      	bge.n	800153e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <UTILS_NanosecondsToTimespec+0x90>)
 8001502:	fb82 1203 	smull	r1, r2, r2, r3
 8001506:	1712      	asrs	r2, r2, #28
 8001508:	17db      	asrs	r3, r3, #31
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	6979      	ldr	r1, [r7, #20]
 8001518:	17c8      	asrs	r0, r1, #31
 800151a:	460c      	mov	r4, r1
 800151c:	4605      	mov	r5, r0
 800151e:	ebb2 0804 	subs.w	r8, r2, r4
 8001522:	eb63 0905 	sbc.w	r9, r3, r5
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	4906      	ldr	r1, [pc, #24]	; (800154c <UTILS_NanosecondsToTimespec+0x94>)
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	441a      	add	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	609a      	str	r2, [r3, #8]
    }
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001548:	44b82fa1 	.word	0x44b82fa1
 800154c:	3b9aca00 	.word	0x3b9aca00
 8001550:	3b9aca00 	.word	0x3b9aca00
 8001554:	00000000 	.word	0x00000000

08001558 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	b08e      	sub	sp, #56	; 0x38
 800155e:	af00      	add	r7, sp, #0
 8001560:	6278      	str	r0, [r7, #36]	; 0x24
 8001562:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001564:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001568:	2300      	movs	r3, #0
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	4618      	mov	r0, r3
 8001580:	f009 fe08 	bl	800b194 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001586:	17da      	asrs	r2, r3, #31
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	61fa      	str	r2, [r7, #28]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	69b9      	ldr	r1, [r7, #24]
 8001596:	000b      	movs	r3, r1
 8001598:	2200      	movs	r2, #0
 800159a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	2200      	movs	r2, #0
 80015a2:	461c      	mov	r4, r3
 80015a4:	4615      	mov	r5, r2
 80015a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015aa:	1911      	adds	r1, r2, r4
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	416b      	adcs	r3, r5
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80015ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	f04f 0400 	mov.w	r4, #0
 80015c6:	f04f 0500 	mov.w	r5, #0
 80015ca:	015d      	lsls	r5, r3, #5
 80015cc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80015d0:	0154      	lsls	r4, r2, #5
 80015d2:	4622      	mov	r2, r4
 80015d4:	462b      	mov	r3, r5
 80015d6:	ebb2 0800 	subs.w	r8, r2, r0
 80015da:	eb63 0901 	sbc.w	r9, r3, r1
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80015ea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80015ee:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80015f2:	4690      	mov	r8, r2
 80015f4:	4699      	mov	r9, r3
 80015f6:	eb18 0a00 	adds.w	sl, r8, r0
 80015fa:	eb49 0b01 	adc.w	fp, r9, r1
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800160a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800160e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001612:	ebb2 040a 	subs.w	r4, r2, sl
 8001616:	603c      	str	r4, [r7, #0]
 8001618:	eb63 030b 	sbc.w	r3, r3, fp
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001622:	4623      	mov	r3, r4
 8001624:	181b      	adds	r3, r3, r0
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	462b      	mov	r3, r5
 800162a:	eb41 0303 	adc.w	r3, r1, r3
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	6a3a      	ldr	r2, [r7, #32]
 8001632:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001636:	f7ff ff3f 	bl	80014b8 <UTILS_NanosecondsToTimespec>

    return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3738      	adds	r7, #56	; 0x38
 8001640:	46bd      	mov	sp, r7
 8001642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_MspInit+0x38>)
 8001650:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_MspInit+0x38>)
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_MspInit+0x38>)
 8001660:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	210f      	movs	r1, #15
 8001670:	f06f 0001 	mvn.w	r0, #1
 8001674:	f000 fc3c 	bl	8001ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024400 	.word	0x58024400

08001684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08e      	sub	sp, #56	; 0x38
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	d844      	bhi.n	800171c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001692:	2200      	movs	r2, #0
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	2019      	movs	r0, #25
 8001698:	f000 fc2a 	bl	8001ef0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800169c:	2019      	movs	r0, #25
 800169e:	f000 fc41 	bl	8001f24 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80016a2:	4a24      	ldr	r2, [pc, #144]	; (8001734 <HAL_InitTick+0xb0>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_InitTick+0xb4>)
 80016aa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80016ae:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_InitTick+0xb4>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_InitTick+0xb4>)
 80016ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c6:	f107 020c 	add.w	r2, r7, #12
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fabb 	bl	8005c4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016d6:	f004 faa3 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 80016da:	4603      	mov	r3, r0
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <HAL_InitTick+0xb8>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0c9b      	lsrs	r3, r3, #18
 80016ea:	3b01      	subs	r3, #1
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_InitTick+0xbc>)
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_InitTick+0xc0>)
 80016f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0xbc>)
 80016f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016fa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016fc:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_InitTick+0xbc>)
 80016fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001700:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_InitTick+0xbc>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_InitTick+0xbc>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <HAL_InitTick+0xbc>)
 8001710:	f006 f8be 	bl	8007890 <HAL_TIM_Base_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d107      	bne.n	800172a <HAL_InitTick+0xa6>
 800171a:	e001      	b.n	8001720 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e005      	b.n	800172c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <HAL_InitTick+0xbc>)
 8001722:	f006 f917 	bl	8007954 <HAL_TIM_Base_Start_IT>
 8001726:	4603      	mov	r3, r0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2400000c 	.word	0x2400000c
 8001738:	58024400 	.word	0x58024400
 800173c:	431bde83 	.word	0x431bde83
 8001740:	240074e8 	.word	0x240074e8
 8001744:	40010000 	.word	0x40010000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Stream0_IRQHandler+0x10>)
 800177a:	f001 fcf7 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	240075d0 	.word	0x240075d0

08001788 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA1_Stream1_IRQHandler+0x10>)
 800178e:	f001 fced 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24007648 	.word	0x24007648

0800179c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <TIM1_UP_IRQHandler+0x10>)
 80017a2:	f006 f94f 	bl	8007a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	240074e8 	.word	0x240074e8

080017b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return 1;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_kill>:

int _kill(int pid, int sig)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ca:	f014 fa47 	bl	8015c5c <__errno>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2216      	movs	r2, #22
 80017d2:	601a      	str	r2, [r3, #0]
  return -1;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_exit>:

void _exit (int status)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe7 	bl	80017c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f2:	e7fe      	b.n	80017f2 <_exit+0x12>

080017f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e00a      	b.n	800181c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001806:	f3af 8000 	nop.w
 800180a:	4601      	mov	r1, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	b2ca      	uxtb	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf0      	blt.n	8001806 <_read+0x12>
  }

  return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e009      	b.n	8001854 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf1      	blt.n	8001840 <_write+0x12>
  }
  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_close>:

int _close(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188e:	605a      	str	r2, [r3, #4]
  return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_isatty>:

int _isatty(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f014 f9ac 	bl	8015c5c <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	24100000 	.word	0x24100000
 8001930:	00000400 	.word	0x00000400
 8001934:	24007538 	.word	0x24007538
 8001938:	24010d08 	.word	0x24010d08

0800193c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <SystemInit+0xd0>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <SystemInit+0xd0>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001950:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <SystemInit+0xd4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	2b02      	cmp	r3, #2
 800195a:	d807      	bhi.n	800196c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800195c:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <SystemInit+0xd4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 030f 	bic.w	r3, r3, #15
 8001964:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <SystemInit+0xd4>)
 8001966:	f043 0303 	orr.w	r3, r3, #3
 800196a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <SystemInit+0xd8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <SystemInit+0xd8>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <SystemInit+0xd8>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800197e:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <SystemInit+0xd8>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4924      	ldr	r1, [pc, #144]	; (8001a14 <SystemInit+0xd8>)
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <SystemInit+0xdc>)
 8001986:	4013      	ands	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <SystemInit+0xd4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <SystemInit+0xd4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 030f 	bic.w	r3, r3, #15
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <SystemInit+0xd4>)
 80019a0:	f043 0303 	orr.w	r3, r3, #3
 80019a4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <SystemInit+0xd8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <SystemInit+0xd8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <SystemInit+0xd8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <SystemInit+0xd8>)
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <SystemInit+0xe0>)
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <SystemInit+0xd8>)
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <SystemInit+0xe4>)
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <SystemInit+0xd8>)
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <SystemInit+0xe8>)
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <SystemInit+0xd8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <SystemInit+0xd8>)
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <SystemInit+0xe8>)
 80019d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <SystemInit+0xd8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <SystemInit+0xd8>)
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <SystemInit+0xe8>)
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <SystemInit+0xd8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <SystemInit+0xd8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <SystemInit+0xd8>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <SystemInit+0xd8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <SystemInit+0xec>)
 80019fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	52002000 	.word	0x52002000
 8001a14:	58024400 	.word	0x58024400
 8001a18:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a1c:	02020200 	.word	0x02020200
 8001a20:	01ff0000 	.word	0x01ff0000
 8001a24:	01010280 	.word	0x01010280
 8001a28:	52004000 	.word	0x52004000

08001a2c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <MX_USART3_UART_Init+0x94>)
 8001a34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a76:	f006 f9e5 	bl	8007e44 <HAL_UART_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a80:	f7ff fc76 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a88:	f007 febf 	bl	800980a <HAL_UARTEx_SetTxFifoThreshold>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a92:	f7ff fc6d 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001a9a:	f007 fef4 	bl	8009886 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa4:	f7ff fc64 	bl	8001370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_USART3_UART_Init+0x90>)
 8001aaa:	f007 fe75 	bl	8009798 <HAL_UARTEx_DisableFifoMode>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f7ff fc5c 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2400753c 	.word	0x2400753c
 8001ac0:	40004800 	.word	0x40004800

08001ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0ba      	sub	sp, #232	; 0xe8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	22c0      	movs	r2, #192	; 0xc0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f013 ffcf 	bl	8015a88 <memset>
  if(uartHandle->Instance==USART3)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a56      	ldr	r2, [pc, #344]	; (8001c48 <HAL_UART_MspInit+0x184>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	f040 80a5 	bne.w	8001c40 <HAL_UART_MspInit+0x17c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001af6:	f04f 0202 	mov.w	r2, #2
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 f8df 	bl	8005cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001b18:	f7ff fc2a 	bl	8001370 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_UART_MspInit+0x188>)
 8001b1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b22:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <HAL_UART_MspInit+0x188>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_UART_MspInit+0x188>)
 8001b2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_UART_MspInit+0x188>)
 8001b3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b40:	4a42      	ldr	r2, [pc, #264]	; (8001c4c <HAL_UART_MspInit+0x188>)
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <HAL_UART_MspInit+0x188>)
 8001b4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b72:	2307      	movs	r3, #7
 8001b74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4834      	ldr	r0, [pc, #208]	; (8001c50 <HAL_UART_MspInit+0x18c>)
 8001b80:	f002 fe82 	bl	8004888 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001b86:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <HAL_UART_MspInit+0x194>)
 8001b88:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001b8c:	222d      	movs	r2, #45	; 0x2d
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001bba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bbe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001bc6:	4823      	ldr	r0, [pc, #140]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001bc8:	f000 f9ba 	bl	8001f40 <HAL_DMA_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001bd2:	f7ff fbcd 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_UART_MspInit+0x190>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_UART_MspInit+0x19c>)
 8001be8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001bec:	222e      	movs	r2, #46	; 0x2e
 8001bee:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c02:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001c18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c1c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001c26:	f000 f98b 	bl	8001f40 <HAL_DMA_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8001c30:	f7ff fb9e 	bl	8001370 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001c38:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_UART_MspInit+0x198>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c40:	bf00      	nop
 8001c42:	37e8      	adds	r7, #232	; 0xe8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40004800 	.word	0x40004800
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	58020c00 	.word	0x58020c00
 8001c54:	240075d0 	.word	0x240075d0
 8001c58:	40020010 	.word	0x40020010
 8001c5c:	24007648 	.word	0x24007648
 8001c60:	40020028 	.word	0x40020028

08001c64 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c78:	f7ff fe60 	bl	800193c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	; (8001cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f013 ffe1 	bl	8015c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca6:	f7ff fac5 	bl	8001234 <main>
  bx  lr
 8001caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cac:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001cb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cb4:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 8001cb8:	080176f0 	.word	0x080176f0
  ldr r2, =_sbss
 8001cbc:	24000118 	.word	0x24000118
  ldr r4, =_ebss
 8001cc0:	24010d04 	.word	0x24010d04

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cce:	2003      	movs	r0, #3
 8001cd0:	f000 f903 	bl	8001eda <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001cd4:	f003 fde4 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_Init+0x68>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	4913      	ldr	r1, [pc, #76]	; (8001d34 <HAL_Init+0x6c>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_Init+0x68>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_Init+0x6c>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <HAL_Init+0x70>)
 8001d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d0c:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <HAL_Init+0x74>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d12:	200f      	movs	r0, #15
 8001d14:	f7ff fcb6 	bl	8001684 <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e002      	b.n	8001d28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d22:	f7ff fc91 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	58024400 	.word	0x58024400
 8001d34:	08016b8c 	.word	0x08016b8c
 8001d38:	24000008 	.word	0x24000008
 8001d3c:	24000004 	.word	0x24000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	24000010 	.word	0x24000010
 8001d64:	240076c0 	.word	0x240076c0

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	240076c0 	.word	0x240076c0

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00
 8001dc4:	05fa0000 	.word	0x05fa0000

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4907      	ldr	r1, [pc, #28]	; (8001e1c <__NVIC_EnableIRQ+0x38>)
 8001dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ff4c 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001efe:	f7ff ff63 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	6978      	ldr	r0, [r7, #20]
 8001f0a:	f7ff ffb3 	bl	8001e74 <NVIC_EncodePriority>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff82 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff56 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ff0e 	bl	8001d68 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e37d      	b.n	8002654 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_DMA_Init+0x1b8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d04a      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_DMA_Init+0x1bc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d045      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_DMA_Init+0x1c0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d040      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a62      	ldr	r2, [pc, #392]	; (8002104 <HAL_DMA_Init+0x1c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d03b      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a60      	ldr	r2, [pc, #384]	; (8002108 <HAL_DMA_Init+0x1c8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d036      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a5f      	ldr	r2, [pc, #380]	; (800210c <HAL_DMA_Init+0x1cc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d031      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a5d      	ldr	r2, [pc, #372]	; (8002110 <HAL_DMA_Init+0x1d0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d02c      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_DMA_Init+0x1d4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d027      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a5a      	ldr	r2, [pc, #360]	; (8002118 <HAL_DMA_Init+0x1d8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d022      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a59      	ldr	r2, [pc, #356]	; (800211c <HAL_DMA_Init+0x1dc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d01d      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a57      	ldr	r2, [pc, #348]	; (8002120 <HAL_DMA_Init+0x1e0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d018      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_DMA_Init+0x1e4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a54      	ldr	r2, [pc, #336]	; (8002128 <HAL_DMA_Init+0x1e8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a53      	ldr	r2, [pc, #332]	; (800212c <HAL_DMA_Init+0x1ec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a51      	ldr	r2, [pc, #324]	; (8002130 <HAL_DMA_Init+0x1f0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d004      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a50      	ldr	r2, [pc, #320]	; (8002134 <HAL_DMA_Init+0x1f4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_DMA_Init+0xbc>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_DMA_Init+0xbe>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 813c 	beq.w	800227c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_DMA_Init+0x1b8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d04a      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a36      	ldr	r2, [pc, #216]	; (80020fc <HAL_DMA_Init+0x1bc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d045      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_DMA_Init+0x1c0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d040      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a33      	ldr	r2, [pc, #204]	; (8002104 <HAL_DMA_Init+0x1c4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d03b      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_DMA_Init+0x1c8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d036      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_DMA_Init+0x1cc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d031      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <HAL_DMA_Init+0x1d0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02c      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <HAL_DMA_Init+0x1d4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d027      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <HAL_DMA_Init+0x1d8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d022      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_DMA_Init+0x1dc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d01d      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_DMA_Init+0x1e0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d018      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_DMA_Init+0x1e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <HAL_DMA_Init+0x1e8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a24      	ldr	r2, [pc, #144]	; (800212c <HAL_DMA_Init+0x1ec>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_DMA_Init+0x1f0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <HAL_DMA_Init+0x1f4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d108      	bne.n	80020c6 <HAL_DMA_Init+0x186>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e007      	b.n	80020d6 <HAL_DMA_Init+0x196>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020d6:	e02f      	b.n	8002138 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d8:	f7ff fe46 	bl	8001d68 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d928      	bls.n	8002138 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2203      	movs	r2, #3
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e2ad      	b.n	8002654 <HAL_DMA_Init+0x714>
 80020f8:	40020010 	.word	0x40020010
 80020fc:	40020028 	.word	0x40020028
 8002100:	40020040 	.word	0x40020040
 8002104:	40020058 	.word	0x40020058
 8002108:	40020070 	.word	0x40020070
 800210c:	40020088 	.word	0x40020088
 8002110:	400200a0 	.word	0x400200a0
 8002114:	400200b8 	.word	0x400200b8
 8002118:	40020410 	.word	0x40020410
 800211c:	40020428 	.word	0x40020428
 8002120:	40020440 	.word	0x40020440
 8002124:	40020458 	.word	0x40020458
 8002128:	40020470 	.word	0x40020470
 800212c:	40020488 	.word	0x40020488
 8002130:	400204a0 	.word	0x400204a0
 8002134:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1c8      	bne.n	80020d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_DMA_Init+0x3e0>)
 8002152:	4013      	ands	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800215e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002176:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2b04      	cmp	r3, #4
 800218a:	d107      	bne.n	800219c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4313      	orrs	r3, r2
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b28      	cmp	r3, #40	; 0x28
 80021a2:	d903      	bls.n	80021ac <HAL_DMA_Init+0x26c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b2e      	cmp	r3, #46	; 0x2e
 80021aa:	d91f      	bls.n	80021ec <HAL_DMA_Init+0x2ac>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b3e      	cmp	r3, #62	; 0x3e
 80021b2:	d903      	bls.n	80021bc <HAL_DMA_Init+0x27c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b42      	cmp	r3, #66	; 0x42
 80021ba:	d917      	bls.n	80021ec <HAL_DMA_Init+0x2ac>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b46      	cmp	r3, #70	; 0x46
 80021c2:	d903      	bls.n	80021cc <HAL_DMA_Init+0x28c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b48      	cmp	r3, #72	; 0x48
 80021ca:	d90f      	bls.n	80021ec <HAL_DMA_Init+0x2ac>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b4e      	cmp	r3, #78	; 0x4e
 80021d2:	d903      	bls.n	80021dc <HAL_DMA_Init+0x29c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b52      	cmp	r3, #82	; 0x52
 80021da:	d907      	bls.n	80021ec <HAL_DMA_Init+0x2ac>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b73      	cmp	r3, #115	; 0x73
 80021e2:	d905      	bls.n	80021f0 <HAL_DMA_Init+0x2b0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b77      	cmp	r3, #119	; 0x77
 80021ea:	d801      	bhi.n	80021f0 <HAL_DMA_Init+0x2b0>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_DMA_Init+0x2b2>
 80021f0:	2300      	movs	r3, #0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f023 0307 	bic.w	r3, r3, #7
 8002214:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2b04      	cmp	r3, #4
 8002226:	d117      	bne.n	8002258 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00e      	beq.n	8002258 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f002 f99a 	bl	8004574 <DMA_CheckFifoParam>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2240      	movs	r2, #64	; 0x40
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e1fd      	b.n	8002654 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f002 f8d5 	bl	8004410 <DMA_CalcBaseAndBitshift>
 8002266:	4603      	mov	r3, r0
 8002268:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	223f      	movs	r2, #63	; 0x3f
 8002274:	409a      	lsls	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	e0fd      	b.n	8002478 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a28      	ldr	r2, [pc, #160]	; (8002324 <HAL_DMA_Init+0x3e4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04a      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a27      	ldr	r2, [pc, #156]	; (8002328 <HAL_DMA_Init+0x3e8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d045      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <HAL_DMA_Init+0x3ec>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d040      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a24      	ldr	r2, [pc, #144]	; (8002330 <HAL_DMA_Init+0x3f0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d03b      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_DMA_Init+0x3f4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d036      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_DMA_Init+0x3f8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d031      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <HAL_DMA_Init+0x3fc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02c      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <HAL_DMA_Init+0x400>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d027      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_DMA_Init+0x404>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d022      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_DMA_Init+0x408>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d01d      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_DMA_Init+0x40c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d018      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_DMA_Init+0x410>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a16      	ldr	r2, [pc, #88]	; (8002354 <HAL_DMA_Init+0x414>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00e      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_DMA_Init+0x418>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a13      	ldr	r2, [pc, #76]	; (800235c <HAL_DMA_Init+0x41c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_DMA_Init+0x3dc>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_DMA_Init+0x420>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d123      	bne.n	8002364 <HAL_DMA_Init+0x424>
 800231c:	2301      	movs	r3, #1
 800231e:	e022      	b.n	8002366 <HAL_DMA_Init+0x426>
 8002320:	fe10803f 	.word	0xfe10803f
 8002324:	48022c08 	.word	0x48022c08
 8002328:	48022c1c 	.word	0x48022c1c
 800232c:	48022c30 	.word	0x48022c30
 8002330:	48022c44 	.word	0x48022c44
 8002334:	48022c58 	.word	0x48022c58
 8002338:	48022c6c 	.word	0x48022c6c
 800233c:	48022c80 	.word	0x48022c80
 8002340:	48022c94 	.word	0x48022c94
 8002344:	58025408 	.word	0x58025408
 8002348:	5802541c 	.word	0x5802541c
 800234c:	58025430 	.word	0x58025430
 8002350:	58025444 	.word	0x58025444
 8002354:	58025458 	.word	0x58025458
 8002358:	5802546c 	.word	0x5802546c
 800235c:	58025480 	.word	0x58025480
 8002360:	58025494 	.word	0x58025494
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d07d      	beq.n	8002466 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7f      	ldr	r2, [pc, #508]	; (800256c <HAL_DMA_Init+0x62c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d021      	beq.n	80023b8 <HAL_DMA_Init+0x478>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7d      	ldr	r2, [pc, #500]	; (8002570 <HAL_DMA_Init+0x630>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01c      	beq.n	80023b8 <HAL_DMA_Init+0x478>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a7c      	ldr	r2, [pc, #496]	; (8002574 <HAL_DMA_Init+0x634>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d017      	beq.n	80023b8 <HAL_DMA_Init+0x478>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7a      	ldr	r2, [pc, #488]	; (8002578 <HAL_DMA_Init+0x638>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d012      	beq.n	80023b8 <HAL_DMA_Init+0x478>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a79      	ldr	r2, [pc, #484]	; (800257c <HAL_DMA_Init+0x63c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00d      	beq.n	80023b8 <HAL_DMA_Init+0x478>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a77      	ldr	r2, [pc, #476]	; (8002580 <HAL_DMA_Init+0x640>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d008      	beq.n	80023b8 <HAL_DMA_Init+0x478>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a76      	ldr	r2, [pc, #472]	; (8002584 <HAL_DMA_Init+0x644>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d003      	beq.n	80023b8 <HAL_DMA_Init+0x478>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a74      	ldr	r2, [pc, #464]	; (8002588 <HAL_DMA_Init+0x648>)
 80023b6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4b6e      	ldr	r3, [pc, #440]	; (800258c <HAL_DMA_Init+0x64c>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Init+0x4b2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d102      	bne.n	80023ee <HAL_DMA_Init+0x4ae>
 80023e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ec:	e002      	b.n	80023f4 <HAL_DMA_Init+0x4b4>
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_DMA_Init+0x4b4>
 80023f2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68d2      	ldr	r2, [r2, #12]
 80023f8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023fa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002402:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800240a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002412:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800241a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002422:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	4b55      	ldr	r3, [pc, #340]	; (8002590 <HAL_DMA_Init+0x650>)
 800243a:	4413      	add	r3, r2
 800243c:	4a55      	ldr	r2, [pc, #340]	; (8002594 <HAL_DMA_Init+0x654>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	009a      	lsls	r2, r3, #2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f001 ffe0 	bl	8004410 <DMA_CalcBaseAndBitshift>
 8002450:	4603      	mov	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2201      	movs	r2, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	e008      	b.n	8002478 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2203      	movs	r2, #3
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0ed      	b.n	8002654 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a46      	ldr	r2, [pc, #280]	; (8002598 <HAL_DMA_Init+0x658>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d072      	beq.n	8002568 <HAL_DMA_Init+0x628>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a45      	ldr	r2, [pc, #276]	; (800259c <HAL_DMA_Init+0x65c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d06d      	beq.n	8002568 <HAL_DMA_Init+0x628>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <HAL_DMA_Init+0x660>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d068      	beq.n	8002568 <HAL_DMA_Init+0x628>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a42      	ldr	r2, [pc, #264]	; (80025a4 <HAL_DMA_Init+0x664>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d063      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a40      	ldr	r2, [pc, #256]	; (80025a8 <HAL_DMA_Init+0x668>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d05e      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a3f      	ldr	r2, [pc, #252]	; (80025ac <HAL_DMA_Init+0x66c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d059      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <HAL_DMA_Init+0x670>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d054      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <HAL_DMA_Init+0x674>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d04f      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a3a      	ldr	r2, [pc, #232]	; (80025b8 <HAL_DMA_Init+0x678>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04a      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a39      	ldr	r2, [pc, #228]	; (80025bc <HAL_DMA_Init+0x67c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d045      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a37      	ldr	r2, [pc, #220]	; (80025c0 <HAL_DMA_Init+0x680>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d040      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a36      	ldr	r2, [pc, #216]	; (80025c4 <HAL_DMA_Init+0x684>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d03b      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a34      	ldr	r2, [pc, #208]	; (80025c8 <HAL_DMA_Init+0x688>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_DMA_Init+0x628>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a33      	ldr	r2, [pc, #204]	; (80025cc <HAL_DMA_Init+0x68c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d031      	beq.n	8002568 <HAL_DMA_Init+0x628>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a31      	ldr	r2, [pc, #196]	; (80025d0 <HAL_DMA_Init+0x690>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02c      	beq.n	8002568 <HAL_DMA_Init+0x628>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a30      	ldr	r2, [pc, #192]	; (80025d4 <HAL_DMA_Init+0x694>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d027      	beq.n	8002568 <HAL_DMA_Init+0x628>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <HAL_DMA_Init+0x62c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d022      	beq.n	8002568 <HAL_DMA_Init+0x628>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <HAL_DMA_Init+0x630>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d01d      	beq.n	8002568 <HAL_DMA_Init+0x628>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a10      	ldr	r2, [pc, #64]	; (8002574 <HAL_DMA_Init+0x634>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_DMA_Init+0x628>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a0f      	ldr	r2, [pc, #60]	; (8002578 <HAL_DMA_Init+0x638>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_DMA_Init+0x628>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_DMA_Init+0x63c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_DMA_Init+0x628>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <HAL_DMA_Init+0x640>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_DMA_Init+0x628>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_DMA_Init+0x644>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_DMA_Init+0x628>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_DMA_Init+0x648>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d137      	bne.n	80025d8 <HAL_DMA_Init+0x698>
 8002568:	2301      	movs	r3, #1
 800256a:	e036      	b.n	80025da <HAL_DMA_Init+0x69a>
 800256c:	58025408 	.word	0x58025408
 8002570:	5802541c 	.word	0x5802541c
 8002574:	58025430 	.word	0x58025430
 8002578:	58025444 	.word	0x58025444
 800257c:	58025458 	.word	0x58025458
 8002580:	5802546c 	.word	0x5802546c
 8002584:	58025480 	.word	0x58025480
 8002588:	58025494 	.word	0x58025494
 800258c:	fffe000f 	.word	0xfffe000f
 8002590:	a7fdabf8 	.word	0xa7fdabf8
 8002594:	cccccccd 	.word	0xcccccccd
 8002598:	40020010 	.word	0x40020010
 800259c:	40020028 	.word	0x40020028
 80025a0:	40020040 	.word	0x40020040
 80025a4:	40020058 	.word	0x40020058
 80025a8:	40020070 	.word	0x40020070
 80025ac:	40020088 	.word	0x40020088
 80025b0:	400200a0 	.word	0x400200a0
 80025b4:	400200b8 	.word	0x400200b8
 80025b8:	40020410 	.word	0x40020410
 80025bc:	40020428 	.word	0x40020428
 80025c0:	40020440 	.word	0x40020440
 80025c4:	40020458 	.word	0x40020458
 80025c8:	40020470 	.word	0x40020470
 80025cc:	40020488 	.word	0x40020488
 80025d0:	400204a0 	.word	0x400204a0
 80025d4:	400204b8 	.word	0x400204b8
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d032      	beq.n	8002644 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f002 f844 	bl	800466c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	d102      	bne.n	80025f2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002606:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d010      	beq.n	8002632 <HAL_DMA_Init+0x6f2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d80c      	bhi.n	8002632 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f002 f8c1 	bl	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	e008      	b.n	8002644 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e226      	b.n	8002ac6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_DMA_Start_IT+0x2a>
 8002682:	2302      	movs	r3, #2
 8002684:	e21f      	b.n	8002ac6 <HAL_DMA_Start_IT+0x46a>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	f040 820a 	bne.w	8002ab0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a68      	ldr	r2, [pc, #416]	; (8002850 <HAL_DMA_Start_IT+0x1f4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04a      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a66      	ldr	r2, [pc, #408]	; (8002854 <HAL_DMA_Start_IT+0x1f8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d045      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_DMA_Start_IT+0x1fc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d040      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a63      	ldr	r2, [pc, #396]	; (800285c <HAL_DMA_Start_IT+0x200>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d03b      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a62      	ldr	r2, [pc, #392]	; (8002860 <HAL_DMA_Start_IT+0x204>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d036      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a60      	ldr	r2, [pc, #384]	; (8002864 <HAL_DMA_Start_IT+0x208>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d031      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5f      	ldr	r2, [pc, #380]	; (8002868 <HAL_DMA_Start_IT+0x20c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d02c      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5d      	ldr	r2, [pc, #372]	; (800286c <HAL_DMA_Start_IT+0x210>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d027      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5c      	ldr	r2, [pc, #368]	; (8002870 <HAL_DMA_Start_IT+0x214>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d022      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5a      	ldr	r2, [pc, #360]	; (8002874 <HAL_DMA_Start_IT+0x218>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01d      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a59      	ldr	r2, [pc, #356]	; (8002878 <HAL_DMA_Start_IT+0x21c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d018      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a57      	ldr	r2, [pc, #348]	; (800287c <HAL_DMA_Start_IT+0x220>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_DMA_Start_IT+0x224>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00e      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a54      	ldr	r2, [pc, #336]	; (8002884 <HAL_DMA_Start_IT+0x228>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a53      	ldr	r2, [pc, #332]	; (8002888 <HAL_DMA_Start_IT+0x22c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_DMA_Start_IT+0xee>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <HAL_DMA_Start_IT+0x230>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d108      	bne.n	800275c <HAL_DMA_Start_IT+0x100>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e007      	b.n	800276c <HAL_DMA_Start_IT+0x110>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f001 fc68 	bl	8004048 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_DMA_Start_IT+0x1f4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d04a      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a33      	ldr	r2, [pc, #204]	; (8002854 <HAL_DMA_Start_IT+0x1f8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d045      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a31      	ldr	r2, [pc, #196]	; (8002858 <HAL_DMA_Start_IT+0x1fc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d040      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a30      	ldr	r2, [pc, #192]	; (800285c <HAL_DMA_Start_IT+0x200>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d03b      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <HAL_DMA_Start_IT+0x204>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d036      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <HAL_DMA_Start_IT+0x208>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d031      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <HAL_DMA_Start_IT+0x20c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02c      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2a      	ldr	r2, [pc, #168]	; (800286c <HAL_DMA_Start_IT+0x210>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d027      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a28      	ldr	r2, [pc, #160]	; (8002870 <HAL_DMA_Start_IT+0x214>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d022      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_DMA_Start_IT+0x218>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d01d      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a25      	ldr	r2, [pc, #148]	; (8002878 <HAL_DMA_Start_IT+0x21c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d018      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a24      	ldr	r2, [pc, #144]	; (800287c <HAL_DMA_Start_IT+0x220>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d013      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_DMA_Start_IT+0x224>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00e      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a21      	ldr	r2, [pc, #132]	; (8002884 <HAL_DMA_Start_IT+0x228>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_DMA_Start_IT+0x22c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_DMA_Start_IT+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_DMA_Start_IT+0x230>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d101      	bne.n	800281c <HAL_DMA_Start_IT+0x1c0>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_DMA_Start_IT+0x1c2>
 800281c:	2300      	movs	r3, #0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d036      	beq.n	8002890 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 021e 	bic.w	r2, r3, #30
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0216 	orr.w	r2, r2, #22
 8002834:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d03e      	beq.n	80028bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0208 	orr.w	r2, r2, #8
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e035      	b.n	80028bc <HAL_DMA_Start_IT+0x260>
 8002850:	40020010 	.word	0x40020010
 8002854:	40020028 	.word	0x40020028
 8002858:	40020040 	.word	0x40020040
 800285c:	40020058 	.word	0x40020058
 8002860:	40020070 	.word	0x40020070
 8002864:	40020088 	.word	0x40020088
 8002868:	400200a0 	.word	0x400200a0
 800286c:	400200b8 	.word	0x400200b8
 8002870:	40020410 	.word	0x40020410
 8002874:	40020428 	.word	0x40020428
 8002878:	40020440 	.word	0x40020440
 800287c:	40020458 	.word	0x40020458
 8002880:	40020470 	.word	0x40020470
 8002884:	40020488 	.word	0x40020488
 8002888:	400204a0 	.word	0x400204a0
 800288c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 020e 	bic.w	r2, r3, #14
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 020a 	orr.w	r2, r2, #10
 80028a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0204 	orr.w	r2, r2, #4
 80028ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a83      	ldr	r2, [pc, #524]	; (8002ad0 <HAL_DMA_Start_IT+0x474>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d072      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a82      	ldr	r2, [pc, #520]	; (8002ad4 <HAL_DMA_Start_IT+0x478>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d06d      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a80      	ldr	r2, [pc, #512]	; (8002ad8 <HAL_DMA_Start_IT+0x47c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d068      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7f      	ldr	r2, [pc, #508]	; (8002adc <HAL_DMA_Start_IT+0x480>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d063      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a7d      	ldr	r2, [pc, #500]	; (8002ae0 <HAL_DMA_Start_IT+0x484>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d05e      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a7c      	ldr	r2, [pc, #496]	; (8002ae4 <HAL_DMA_Start_IT+0x488>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d059      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a7a      	ldr	r2, [pc, #488]	; (8002ae8 <HAL_DMA_Start_IT+0x48c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d054      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a79      	ldr	r2, [pc, #484]	; (8002aec <HAL_DMA_Start_IT+0x490>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d04f      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a77      	ldr	r2, [pc, #476]	; (8002af0 <HAL_DMA_Start_IT+0x494>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d04a      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a76      	ldr	r2, [pc, #472]	; (8002af4 <HAL_DMA_Start_IT+0x498>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d045      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a74      	ldr	r2, [pc, #464]	; (8002af8 <HAL_DMA_Start_IT+0x49c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d040      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a73      	ldr	r2, [pc, #460]	; (8002afc <HAL_DMA_Start_IT+0x4a0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d03b      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a71      	ldr	r2, [pc, #452]	; (8002b00 <HAL_DMA_Start_IT+0x4a4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d036      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a70      	ldr	r2, [pc, #448]	; (8002b04 <HAL_DMA_Start_IT+0x4a8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d031      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_DMA_Start_IT+0x4ac>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d02c      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6d      	ldr	r2, [pc, #436]	; (8002b0c <HAL_DMA_Start_IT+0x4b0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d027      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6b      	ldr	r2, [pc, #428]	; (8002b10 <HAL_DMA_Start_IT+0x4b4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d022      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6a      	ldr	r2, [pc, #424]	; (8002b14 <HAL_DMA_Start_IT+0x4b8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d01d      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a68      	ldr	r2, [pc, #416]	; (8002b18 <HAL_DMA_Start_IT+0x4bc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d018      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a67      	ldr	r2, [pc, #412]	; (8002b1c <HAL_DMA_Start_IT+0x4c0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d013      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_DMA_Start_IT+0x4c4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00e      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a64      	ldr	r2, [pc, #400]	; (8002b24 <HAL_DMA_Start_IT+0x4c8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a62      	ldr	r2, [pc, #392]	; (8002b28 <HAL_DMA_Start_IT+0x4cc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_Start_IT+0x350>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a61      	ldr	r2, [pc, #388]	; (8002b2c <HAL_DMA_Start_IT+0x4d0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_DMA_Start_IT+0x354>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_DMA_Start_IT+0x356>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01a      	beq.n	80029ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a37      	ldr	r2, [pc, #220]	; (8002ad0 <HAL_DMA_Start_IT+0x474>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d04a      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a36      	ldr	r2, [pc, #216]	; (8002ad4 <HAL_DMA_Start_IT+0x478>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d045      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <HAL_DMA_Start_IT+0x47c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d040      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a33      	ldr	r2, [pc, #204]	; (8002adc <HAL_DMA_Start_IT+0x480>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d03b      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a31      	ldr	r2, [pc, #196]	; (8002ae0 <HAL_DMA_Start_IT+0x484>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d036      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a30      	ldr	r2, [pc, #192]	; (8002ae4 <HAL_DMA_Start_IT+0x488>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d031      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ae8 <HAL_DMA_Start_IT+0x48c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d02c      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2d      	ldr	r2, [pc, #180]	; (8002aec <HAL_DMA_Start_IT+0x490>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d027      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <HAL_DMA_Start_IT+0x494>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d022      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <HAL_DMA_Start_IT+0x498>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d01d      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a28      	ldr	r2, [pc, #160]	; (8002af8 <HAL_DMA_Start_IT+0x49c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d018      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a27      	ldr	r2, [pc, #156]	; (8002afc <HAL_DMA_Start_IT+0x4a0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d013      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <HAL_DMA_Start_IT+0x4a4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00e      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_DMA_Start_IT+0x4a8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d009      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_DMA_Start_IT+0x4ac>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d004      	beq.n	8002a8c <HAL_DMA_Start_IT+0x430>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <HAL_DMA_Start_IT+0x4b0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d108      	bne.n	8002a9e <HAL_DMA_Start_IT+0x442>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e012      	b.n	8002ac4 <HAL_DMA_Start_IT+0x468>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e009      	b.n	8002ac4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40020010 	.word	0x40020010
 8002ad4:	40020028 	.word	0x40020028
 8002ad8:	40020040 	.word	0x40020040
 8002adc:	40020058 	.word	0x40020058
 8002ae0:	40020070 	.word	0x40020070
 8002ae4:	40020088 	.word	0x40020088
 8002ae8:	400200a0 	.word	0x400200a0
 8002aec:	400200b8 	.word	0x400200b8
 8002af0:	40020410 	.word	0x40020410
 8002af4:	40020428 	.word	0x40020428
 8002af8:	40020440 	.word	0x40020440
 8002afc:	40020458 	.word	0x40020458
 8002b00:	40020470 	.word	0x40020470
 8002b04:	40020488 	.word	0x40020488
 8002b08:	400204a0 	.word	0x400204a0
 8002b0c:	400204b8 	.word	0x400204b8
 8002b10:	58025408 	.word	0x58025408
 8002b14:	5802541c 	.word	0x5802541c
 8002b18:	58025430 	.word	0x58025430
 8002b1c:	58025444 	.word	0x58025444
 8002b20:	58025458 	.word	0x58025458
 8002b24:	5802546c 	.word	0x5802546c
 8002b28:	58025480 	.word	0x58025480
 8002b2c:	58025494 	.word	0x58025494

08002b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff f916 	bl	8001d68 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e2dc      	b.n	8003102 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d008      	beq.n	8002b66 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e2cd      	b.n	8003102 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a76      	ldr	r2, [pc, #472]	; (8002d44 <HAL_DMA_Abort+0x214>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d04a      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a74      	ldr	r2, [pc, #464]	; (8002d48 <HAL_DMA_Abort+0x218>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d045      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a73      	ldr	r2, [pc, #460]	; (8002d4c <HAL_DMA_Abort+0x21c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d040      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a71      	ldr	r2, [pc, #452]	; (8002d50 <HAL_DMA_Abort+0x220>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d03b      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a70      	ldr	r2, [pc, #448]	; (8002d54 <HAL_DMA_Abort+0x224>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d036      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_DMA_Abort+0x228>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d031      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6d      	ldr	r2, [pc, #436]	; (8002d5c <HAL_DMA_Abort+0x22c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d02c      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a6b      	ldr	r2, [pc, #428]	; (8002d60 <HAL_DMA_Abort+0x230>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d027      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6a      	ldr	r2, [pc, #424]	; (8002d64 <HAL_DMA_Abort+0x234>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a68      	ldr	r2, [pc, #416]	; (8002d68 <HAL_DMA_Abort+0x238>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01d      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a67      	ldr	r2, [pc, #412]	; (8002d6c <HAL_DMA_Abort+0x23c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d018      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a65      	ldr	r2, [pc, #404]	; (8002d70 <HAL_DMA_Abort+0x240>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a64      	ldr	r2, [pc, #400]	; (8002d74 <HAL_DMA_Abort+0x244>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a62      	ldr	r2, [pc, #392]	; (8002d78 <HAL_DMA_Abort+0x248>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d009      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a61      	ldr	r2, [pc, #388]	; (8002d7c <HAL_DMA_Abort+0x24c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_DMA_Abort+0xd6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a5f      	ldr	r2, [pc, #380]	; (8002d80 <HAL_DMA_Abort+0x250>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_DMA_Abort+0xda>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_DMA_Abort+0xdc>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 021e 	bic.w	r2, r2, #30
 8002c1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e00a      	b.n	8002c4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 020e 	bic.w	r2, r2, #14
 8002c46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a3c      	ldr	r2, [pc, #240]	; (8002d44 <HAL_DMA_Abort+0x214>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d072      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a3a      	ldr	r2, [pc, #232]	; (8002d48 <HAL_DMA_Abort+0x218>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d06d      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a39      	ldr	r2, [pc, #228]	; (8002d4c <HAL_DMA_Abort+0x21c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d068      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a37      	ldr	r2, [pc, #220]	; (8002d50 <HAL_DMA_Abort+0x220>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d063      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a36      	ldr	r2, [pc, #216]	; (8002d54 <HAL_DMA_Abort+0x224>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d05e      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <HAL_DMA_Abort+0x228>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d059      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a33      	ldr	r2, [pc, #204]	; (8002d5c <HAL_DMA_Abort+0x22c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d054      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a31      	ldr	r2, [pc, #196]	; (8002d60 <HAL_DMA_Abort+0x230>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d04f      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a30      	ldr	r2, [pc, #192]	; (8002d64 <HAL_DMA_Abort+0x234>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d04a      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2e      	ldr	r2, [pc, #184]	; (8002d68 <HAL_DMA_Abort+0x238>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d045      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_DMA_Abort+0x23c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d040      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_DMA_Abort+0x240>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d03b      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <HAL_DMA_Abort+0x244>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d036      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_DMA_Abort+0x248>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d031      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a27      	ldr	r2, [pc, #156]	; (8002d7c <HAL_DMA_Abort+0x24c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d02c      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a25      	ldr	r2, [pc, #148]	; (8002d80 <HAL_DMA_Abort+0x250>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d027      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <HAL_DMA_Abort+0x254>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d022      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_DMA_Abort+0x258>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01d      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a21      	ldr	r2, [pc, #132]	; (8002d8c <HAL_DMA_Abort+0x25c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d018      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_DMA_Abort+0x260>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_DMA_Abort+0x264>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_DMA_Abort+0x268>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d009      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_DMA_Abort+0x26c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_DMA_Abort+0x20e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_DMA_Abort+0x270>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d132      	bne.n	8002da4 <HAL_DMA_Abort+0x274>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e031      	b.n	8002da6 <HAL_DMA_Abort+0x276>
 8002d42:	bf00      	nop
 8002d44:	40020010 	.word	0x40020010
 8002d48:	40020028 	.word	0x40020028
 8002d4c:	40020040 	.word	0x40020040
 8002d50:	40020058 	.word	0x40020058
 8002d54:	40020070 	.word	0x40020070
 8002d58:	40020088 	.word	0x40020088
 8002d5c:	400200a0 	.word	0x400200a0
 8002d60:	400200b8 	.word	0x400200b8
 8002d64:	40020410 	.word	0x40020410
 8002d68:	40020428 	.word	0x40020428
 8002d6c:	40020440 	.word	0x40020440
 8002d70:	40020458 	.word	0x40020458
 8002d74:	40020470 	.word	0x40020470
 8002d78:	40020488 	.word	0x40020488
 8002d7c:	400204a0 	.word	0x400204a0
 8002d80:	400204b8 	.word	0x400204b8
 8002d84:	58025408 	.word	0x58025408
 8002d88:	5802541c 	.word	0x5802541c
 8002d8c:	58025430 	.word	0x58025430
 8002d90:	58025444 	.word	0x58025444
 8002d94:	58025458 	.word	0x58025458
 8002d98:	5802546c 	.word	0x5802546c
 8002d9c:	58025480 	.word	0x58025480
 8002da0:	58025494 	.word	0x58025494
 8002da4:	2300      	movs	r3, #0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6d      	ldr	r2, [pc, #436]	; (8002f74 <HAL_DMA_Abort+0x444>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d04a      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6b      	ldr	r2, [pc, #428]	; (8002f78 <HAL_DMA_Abort+0x448>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d045      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <HAL_DMA_Abort+0x44c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d040      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a68      	ldr	r2, [pc, #416]	; (8002f80 <HAL_DMA_Abort+0x450>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d03b      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_DMA_Abort+0x454>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d036      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a65      	ldr	r2, [pc, #404]	; (8002f88 <HAL_DMA_Abort+0x458>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d031      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a64      	ldr	r2, [pc, #400]	; (8002f8c <HAL_DMA_Abort+0x45c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d02c      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a62      	ldr	r2, [pc, #392]	; (8002f90 <HAL_DMA_Abort+0x460>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d027      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a61      	ldr	r2, [pc, #388]	; (8002f94 <HAL_DMA_Abort+0x464>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d022      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5f      	ldr	r2, [pc, #380]	; (8002f98 <HAL_DMA_Abort+0x468>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01d      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <HAL_DMA_Abort+0x46c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d018      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5c      	ldr	r2, [pc, #368]	; (8002fa0 <HAL_DMA_Abort+0x470>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5b      	ldr	r2, [pc, #364]	; (8002fa4 <HAL_DMA_Abort+0x474>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00e      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a59      	ldr	r2, [pc, #356]	; (8002fa8 <HAL_DMA_Abort+0x478>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_DMA_Abort+0x47c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <HAL_DMA_Abort+0x32a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a56      	ldr	r2, [pc, #344]	; (8002fb0 <HAL_DMA_Abort+0x480>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <HAL_DMA_Abort+0x33c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e007      	b.n	8002e7c <HAL_DMA_Abort+0x34c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e7c:	e013      	b.n	8002ea6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e7e:	f7fe ff73 	bl	8001d68 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d90c      	bls.n	8002ea6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e12d      	b.n	8003102 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e5      	bne.n	8002e7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_DMA_Abort+0x444>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d04a      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <HAL_DMA_Abort+0x448>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d045      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <HAL_DMA_Abort+0x44c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d040      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2a      	ldr	r2, [pc, #168]	; (8002f80 <HAL_DMA_Abort+0x450>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d03b      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_DMA_Abort+0x454>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d036      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <HAL_DMA_Abort+0x458>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d031      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <HAL_DMA_Abort+0x45c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d02c      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_DMA_Abort+0x460>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d027      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <HAL_DMA_Abort+0x464>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a21      	ldr	r2, [pc, #132]	; (8002f98 <HAL_DMA_Abort+0x468>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01d      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <HAL_DMA_Abort+0x46c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_DMA_Abort+0x470>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_DMA_Abort+0x474>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <HAL_DMA_Abort+0x478>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1a      	ldr	r2, [pc, #104]	; (8002fac <HAL_DMA_Abort+0x47c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_DMA_Abort+0x422>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_DMA_Abort+0x480>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_DMA_Abort+0x426>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_DMA_Abort+0x428>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02b      	beq.n	8002fb4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	223f      	movs	r2, #63	; 0x3f
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	e02a      	b.n	8002fca <HAL_DMA_Abort+0x49a>
 8002f74:	40020010 	.word	0x40020010
 8002f78:	40020028 	.word	0x40020028
 8002f7c:	40020040 	.word	0x40020040
 8002f80:	40020058 	.word	0x40020058
 8002f84:	40020070 	.word	0x40020070
 8002f88:	40020088 	.word	0x40020088
 8002f8c:	400200a0 	.word	0x400200a0
 8002f90:	400200b8 	.word	0x400200b8
 8002f94:	40020410 	.word	0x40020410
 8002f98:	40020428 	.word	0x40020428
 8002f9c:	40020440 	.word	0x40020440
 8002fa0:	40020458 	.word	0x40020458
 8002fa4:	40020470 	.word	0x40020470
 8002fa8:	40020488 	.word	0x40020488
 8002fac:	400204a0 	.word	0x400204a0
 8002fb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a4f      	ldr	r2, [pc, #316]	; (800310c <HAL_DMA_Abort+0x5dc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d072      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4d      	ldr	r2, [pc, #308]	; (8003110 <HAL_DMA_Abort+0x5e0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d06d      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4c      	ldr	r2, [pc, #304]	; (8003114 <HAL_DMA_Abort+0x5e4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d068      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a4a      	ldr	r2, [pc, #296]	; (8003118 <HAL_DMA_Abort+0x5e8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d063      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a49      	ldr	r2, [pc, #292]	; (800311c <HAL_DMA_Abort+0x5ec>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d05e      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a47      	ldr	r2, [pc, #284]	; (8003120 <HAL_DMA_Abort+0x5f0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d059      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a46      	ldr	r2, [pc, #280]	; (8003124 <HAL_DMA_Abort+0x5f4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d054      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a44      	ldr	r2, [pc, #272]	; (8003128 <HAL_DMA_Abort+0x5f8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d04f      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a43      	ldr	r2, [pc, #268]	; (800312c <HAL_DMA_Abort+0x5fc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d04a      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a41      	ldr	r2, [pc, #260]	; (8003130 <HAL_DMA_Abort+0x600>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d045      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a40      	ldr	r2, [pc, #256]	; (8003134 <HAL_DMA_Abort+0x604>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d040      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3e      	ldr	r2, [pc, #248]	; (8003138 <HAL_DMA_Abort+0x608>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d03b      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3d      	ldr	r2, [pc, #244]	; (800313c <HAL_DMA_Abort+0x60c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d036      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3b      	ldr	r2, [pc, #236]	; (8003140 <HAL_DMA_Abort+0x610>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d031      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3a      	ldr	r2, [pc, #232]	; (8003144 <HAL_DMA_Abort+0x614>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d02c      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a38      	ldr	r2, [pc, #224]	; (8003148 <HAL_DMA_Abort+0x618>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d027      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a37      	ldr	r2, [pc, #220]	; (800314c <HAL_DMA_Abort+0x61c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a35      	ldr	r2, [pc, #212]	; (8003150 <HAL_DMA_Abort+0x620>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01d      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a34      	ldr	r2, [pc, #208]	; (8003154 <HAL_DMA_Abort+0x624>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d018      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a32      	ldr	r2, [pc, #200]	; (8003158 <HAL_DMA_Abort+0x628>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a31      	ldr	r2, [pc, #196]	; (800315c <HAL_DMA_Abort+0x62c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00e      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <HAL_DMA_Abort+0x630>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d009      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2e      	ldr	r2, [pc, #184]	; (8003164 <HAL_DMA_Abort+0x634>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_DMA_Abort+0x58a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <HAL_DMA_Abort+0x638>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d101      	bne.n	80030be <HAL_DMA_Abort+0x58e>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_DMA_Abort+0x590>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40020010 	.word	0x40020010
 8003110:	40020028 	.word	0x40020028
 8003114:	40020040 	.word	0x40020040
 8003118:	40020058 	.word	0x40020058
 800311c:	40020070 	.word	0x40020070
 8003120:	40020088 	.word	0x40020088
 8003124:	400200a0 	.word	0x400200a0
 8003128:	400200b8 	.word	0x400200b8
 800312c:	40020410 	.word	0x40020410
 8003130:	40020428 	.word	0x40020428
 8003134:	40020440 	.word	0x40020440
 8003138:	40020458 	.word	0x40020458
 800313c:	40020470 	.word	0x40020470
 8003140:	40020488 	.word	0x40020488
 8003144:	400204a0 	.word	0x400204a0
 8003148:	400204b8 	.word	0x400204b8
 800314c:	58025408 	.word	0x58025408
 8003150:	5802541c 	.word	0x5802541c
 8003154:	58025430 	.word	0x58025430
 8003158:	58025444 	.word	0x58025444
 800315c:	58025458 	.word	0x58025458
 8003160:	5802546c 	.word	0x5802546c
 8003164:	58025480 	.word	0x58025480
 8003168:	58025494 	.word	0x58025494

0800316c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003178:	4b67      	ldr	r3, [pc, #412]	; (8003318 <HAL_DMA_IRQHandler+0x1ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a67      	ldr	r2, [pc, #412]	; (800331c <HAL_DMA_IRQHandler+0x1b0>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5f      	ldr	r2, [pc, #380]	; (8003320 <HAL_DMA_IRQHandler+0x1b4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a5d      	ldr	r2, [pc, #372]	; (8003324 <HAL_DMA_IRQHandler+0x1b8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a5c      	ldr	r2, [pc, #368]	; (8003328 <HAL_DMA_IRQHandler+0x1bc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a5a      	ldr	r2, [pc, #360]	; (800332c <HAL_DMA_IRQHandler+0x1c0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a59      	ldr	r2, [pc, #356]	; (8003330 <HAL_DMA_IRQHandler+0x1c4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_DMA_IRQHandler+0x1c8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a56      	ldr	r2, [pc, #344]	; (8003338 <HAL_DMA_IRQHandler+0x1cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a54      	ldr	r2, [pc, #336]	; (800333c <HAL_DMA_IRQHandler+0x1d0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a53      	ldr	r2, [pc, #332]	; (8003340 <HAL_DMA_IRQHandler+0x1d4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a51      	ldr	r2, [pc, #324]	; (8003344 <HAL_DMA_IRQHandler+0x1d8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a50      	ldr	r2, [pc, #320]	; (8003348 <HAL_DMA_IRQHandler+0x1dc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a4e      	ldr	r2, [pc, #312]	; (800334c <HAL_DMA_IRQHandler+0x1e0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <HAL_DMA_IRQHandler+0x1e4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a4b      	ldr	r2, [pc, #300]	; (8003354 <HAL_DMA_IRQHandler+0x1e8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a4a      	ldr	r2, [pc, #296]	; (8003358 <HAL_DMA_IRQHandler+0x1ec>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_IRQHandler+0xd2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a48      	ldr	r2, [pc, #288]	; (800335c <HAL_DMA_IRQHandler+0x1f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_DMA_IRQHandler+0xd6>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_DMA_IRQHandler+0xd8>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 842b 	beq.w	8003aa0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2208      	movs	r2, #8
 8003254:	409a      	lsls	r2, r3
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a2 	beq.w	80033a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <HAL_DMA_IRQHandler+0x1b4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d04a      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <HAL_DMA_IRQHandler+0x1b8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d045      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <HAL_DMA_IRQHandler+0x1bc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d040      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2a      	ldr	r2, [pc, #168]	; (800332c <HAL_DMA_IRQHandler+0x1c0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d03b      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <HAL_DMA_IRQHandler+0x1c4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d036      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a27      	ldr	r2, [pc, #156]	; (8003334 <HAL_DMA_IRQHandler+0x1c8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d031      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a25      	ldr	r2, [pc, #148]	; (8003338 <HAL_DMA_IRQHandler+0x1cc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02c      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a24      	ldr	r2, [pc, #144]	; (800333c <HAL_DMA_IRQHandler+0x1d0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d027      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a22      	ldr	r2, [pc, #136]	; (8003340 <HAL_DMA_IRQHandler+0x1d4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d022      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <HAL_DMA_IRQHandler+0x1d8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d01d      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <HAL_DMA_IRQHandler+0x1dc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d018      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <HAL_DMA_IRQHandler+0x1e0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <HAL_DMA_IRQHandler+0x1e4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00e      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_DMA_IRQHandler+0x1e8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d009      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a19      	ldr	r2, [pc, #100]	; (8003358 <HAL_DMA_IRQHandler+0x1ec>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_DMA_IRQHandler+0x194>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a18      	ldr	r2, [pc, #96]	; (800335c <HAL_DMA_IRQHandler+0x1f0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d12f      	bne.n	8003360 <HAL_DMA_IRQHandler+0x1f4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf14      	ite	ne
 800330e:	2301      	movne	r3, #1
 8003310:	2300      	moveq	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e02e      	b.n	8003374 <HAL_DMA_IRQHandler+0x208>
 8003316:	bf00      	nop
 8003318:	24000004 	.word	0x24000004
 800331c:	1b4e81b5 	.word	0x1b4e81b5
 8003320:	40020010 	.word	0x40020010
 8003324:	40020028 	.word	0x40020028
 8003328:	40020040 	.word	0x40020040
 800332c:	40020058 	.word	0x40020058
 8003330:	40020070 	.word	0x40020070
 8003334:	40020088 	.word	0x40020088
 8003338:	400200a0 	.word	0x400200a0
 800333c:	400200b8 	.word	0x400200b8
 8003340:	40020410 	.word	0x40020410
 8003344:	40020428 	.word	0x40020428
 8003348:	40020440 	.word	0x40020440
 800334c:	40020458 	.word	0x40020458
 8003350:	40020470 	.word	0x40020470
 8003354:	40020488 	.word	0x40020488
 8003358:	400204a0 	.word	0x400204a0
 800335c:	400204b8 	.word	0x400204b8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d015      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2208      	movs	r2, #8
 8003392:	409a      	lsls	r2, r3
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d06e      	beq.n	8003498 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a69      	ldr	r2, [pc, #420]	; (8003564 <HAL_DMA_IRQHandler+0x3f8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d04a      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a67      	ldr	r2, [pc, #412]	; (8003568 <HAL_DMA_IRQHandler+0x3fc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d045      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a66      	ldr	r2, [pc, #408]	; (800356c <HAL_DMA_IRQHandler+0x400>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d040      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a64      	ldr	r2, [pc, #400]	; (8003570 <HAL_DMA_IRQHandler+0x404>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d03b      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a63      	ldr	r2, [pc, #396]	; (8003574 <HAL_DMA_IRQHandler+0x408>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d036      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a61      	ldr	r2, [pc, #388]	; (8003578 <HAL_DMA_IRQHandler+0x40c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d031      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a60      	ldr	r2, [pc, #384]	; (800357c <HAL_DMA_IRQHandler+0x410>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d02c      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5e      	ldr	r2, [pc, #376]	; (8003580 <HAL_DMA_IRQHandler+0x414>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d027      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5d      	ldr	r2, [pc, #372]	; (8003584 <HAL_DMA_IRQHandler+0x418>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d022      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5b      	ldr	r2, [pc, #364]	; (8003588 <HAL_DMA_IRQHandler+0x41c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01d      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a5a      	ldr	r2, [pc, #360]	; (800358c <HAL_DMA_IRQHandler+0x420>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d018      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a58      	ldr	r2, [pc, #352]	; (8003590 <HAL_DMA_IRQHandler+0x424>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a57      	ldr	r2, [pc, #348]	; (8003594 <HAL_DMA_IRQHandler+0x428>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a55      	ldr	r2, [pc, #340]	; (8003598 <HAL_DMA_IRQHandler+0x42c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a54      	ldr	r2, [pc, #336]	; (800359c <HAL_DMA_IRQHandler+0x430>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_DMA_IRQHandler+0x2ee>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a52      	ldr	r2, [pc, #328]	; (80035a0 <HAL_DMA_IRQHandler+0x434>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10a      	bne.n	8003470 <HAL_DMA_IRQHandler+0x304>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e003      	b.n	8003478 <HAL_DMA_IRQHandler+0x30c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f043 0202 	orr.w	r2, r3, #2
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2204      	movs	r2, #4
 80034a2:	409a      	lsls	r2, r3
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808f 	beq.w	80035cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2c      	ldr	r2, [pc, #176]	; (8003564 <HAL_DMA_IRQHandler+0x3f8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <HAL_DMA_IRQHandler+0x3fc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a29      	ldr	r2, [pc, #164]	; (800356c <HAL_DMA_IRQHandler+0x400>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_DMA_IRQHandler+0x404>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a26      	ldr	r2, [pc, #152]	; (8003574 <HAL_DMA_IRQHandler+0x408>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a24      	ldr	r2, [pc, #144]	; (8003578 <HAL_DMA_IRQHandler+0x40c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a23      	ldr	r2, [pc, #140]	; (800357c <HAL_DMA_IRQHandler+0x410>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <HAL_DMA_IRQHandler+0x414>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a20      	ldr	r2, [pc, #128]	; (8003584 <HAL_DMA_IRQHandler+0x418>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_DMA_IRQHandler+0x41c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_DMA_IRQHandler+0x420>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <HAL_DMA_IRQHandler+0x424>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <HAL_DMA_IRQHandler+0x428>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_DMA_IRQHandler+0x42c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_DMA_IRQHandler+0x430>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_IRQHandler+0x3e2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <HAL_DMA_IRQHandler+0x434>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d12a      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x438>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e023      	b.n	80035ac <HAL_DMA_IRQHandler+0x440>
 8003564:	40020010 	.word	0x40020010
 8003568:	40020028 	.word	0x40020028
 800356c:	40020040 	.word	0x40020040
 8003570:	40020058 	.word	0x40020058
 8003574:	40020070 	.word	0x40020070
 8003578:	40020088 	.word	0x40020088
 800357c:	400200a0 	.word	0x400200a0
 8003580:	400200b8 	.word	0x400200b8
 8003584:	40020410 	.word	0x40020410
 8003588:	40020428 	.word	0x40020428
 800358c:	40020440 	.word	0x40020440
 8003590:	40020458 	.word	0x40020458
 8003594:	40020470 	.word	0x40020470
 8003598:	40020488 	.word	0x40020488
 800359c:	400204a0 	.word	0x400204a0
 80035a0:	400204b8 	.word	0x400204b8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2204      	movs	r2, #4
 80035ba:	409a      	lsls	r2, r3
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f043 0204 	orr.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2210      	movs	r2, #16
 80035d6:	409a      	lsls	r2, r3
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a6 	beq.w	800372e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a85      	ldr	r2, [pc, #532]	; (80037fc <HAL_DMA_IRQHandler+0x690>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d04a      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a83      	ldr	r2, [pc, #524]	; (8003800 <HAL_DMA_IRQHandler+0x694>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d045      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a82      	ldr	r2, [pc, #520]	; (8003804 <HAL_DMA_IRQHandler+0x698>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d040      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a80      	ldr	r2, [pc, #512]	; (8003808 <HAL_DMA_IRQHandler+0x69c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d03b      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7f      	ldr	r2, [pc, #508]	; (800380c <HAL_DMA_IRQHandler+0x6a0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d036      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7d      	ldr	r2, [pc, #500]	; (8003810 <HAL_DMA_IRQHandler+0x6a4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d031      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a7c      	ldr	r2, [pc, #496]	; (8003814 <HAL_DMA_IRQHandler+0x6a8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d02c      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a7a      	ldr	r2, [pc, #488]	; (8003818 <HAL_DMA_IRQHandler+0x6ac>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d027      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a79      	ldr	r2, [pc, #484]	; (800381c <HAL_DMA_IRQHandler+0x6b0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d022      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a77      	ldr	r2, [pc, #476]	; (8003820 <HAL_DMA_IRQHandler+0x6b4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01d      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a76      	ldr	r2, [pc, #472]	; (8003824 <HAL_DMA_IRQHandler+0x6b8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d018      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a74      	ldr	r2, [pc, #464]	; (8003828 <HAL_DMA_IRQHandler+0x6bc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a73      	ldr	r2, [pc, #460]	; (800382c <HAL_DMA_IRQHandler+0x6c0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00e      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a71      	ldr	r2, [pc, #452]	; (8003830 <HAL_DMA_IRQHandler+0x6c4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a70      	ldr	r2, [pc, #448]	; (8003834 <HAL_DMA_IRQHandler+0x6c8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_DMA_IRQHandler+0x516>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a6e      	ldr	r2, [pc, #440]	; (8003838 <HAL_DMA_IRQHandler+0x6cc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10a      	bne.n	8003698 <HAL_DMA_IRQHandler+0x52c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e009      	b.n	80036ac <HAL_DMA_IRQHandler+0x540>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bf14      	ite	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	2300      	moveq	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03e      	beq.n	800372e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2210      	movs	r2, #16
 80036ba:	409a      	lsls	r2, r3
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d018      	beq.n	8003700 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d108      	bne.n	80036ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d024      	beq.n	800372e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	e01f      	b.n	800372e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01b      	beq.n	800372e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	e016      	b.n	800372e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d107      	bne.n	800371e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0208 	bic.w	r2, r2, #8
 800371c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2220      	movs	r2, #32
 8003738:	409a      	lsls	r2, r3
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8110 	beq.w	8003964 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2c      	ldr	r2, [pc, #176]	; (80037fc <HAL_DMA_IRQHandler+0x690>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d04a      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <HAL_DMA_IRQHandler+0x694>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d045      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a29      	ldr	r2, [pc, #164]	; (8003804 <HAL_DMA_IRQHandler+0x698>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d040      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a28      	ldr	r2, [pc, #160]	; (8003808 <HAL_DMA_IRQHandler+0x69c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d03b      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a26      	ldr	r2, [pc, #152]	; (800380c <HAL_DMA_IRQHandler+0x6a0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d036      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a25      	ldr	r2, [pc, #148]	; (8003810 <HAL_DMA_IRQHandler+0x6a4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d031      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a23      	ldr	r2, [pc, #140]	; (8003814 <HAL_DMA_IRQHandler+0x6a8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02c      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_DMA_IRQHandler+0x6ac>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d027      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a20      	ldr	r2, [pc, #128]	; (800381c <HAL_DMA_IRQHandler+0x6b0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d022      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <HAL_DMA_IRQHandler+0x6b4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d01d      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_DMA_IRQHandler+0x6b8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d018      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <HAL_DMA_IRQHandler+0x6bc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_DMA_IRQHandler+0x6c0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a19      	ldr	r2, [pc, #100]	; (8003830 <HAL_DMA_IRQHandler+0x6c4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_DMA_IRQHandler+0x6c8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x678>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <HAL_DMA_IRQHandler+0x6cc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d12b      	bne.n	800383c <HAL_DMA_IRQHandler+0x6d0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf14      	ite	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	2300      	moveq	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	e02a      	b.n	8003850 <HAL_DMA_IRQHandler+0x6e4>
 80037fa:	bf00      	nop
 80037fc:	40020010 	.word	0x40020010
 8003800:	40020028 	.word	0x40020028
 8003804:	40020040 	.word	0x40020040
 8003808:	40020058 	.word	0x40020058
 800380c:	40020070 	.word	0x40020070
 8003810:	40020088 	.word	0x40020088
 8003814:	400200a0 	.word	0x400200a0
 8003818:	400200b8 	.word	0x400200b8
 800381c:	40020410 	.word	0x40020410
 8003820:	40020428 	.word	0x40020428
 8003824:	40020440 	.word	0x40020440
 8003828:	40020458 	.word	0x40020458
 800382c:	40020470 	.word	0x40020470
 8003830:	40020488 	.word	0x40020488
 8003834:	400204a0 	.word	0x400204a0
 8003838:	400204b8 	.word	0x400204b8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8087 	beq.w	8003964 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2220      	movs	r2, #32
 8003860:	409a      	lsls	r2, r3
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b04      	cmp	r3, #4
 8003870:	d139      	bne.n	80038e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0216 	bic.w	r2, r2, #22
 8003880:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003890:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d103      	bne.n	80038a2 <HAL_DMA_IRQHandler+0x736>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0208 	bic.w	r2, r2, #8
 80038b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	223f      	movs	r2, #63	; 0x3f
 80038bc:	409a      	lsls	r2, r3
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8382 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
          }
          return;
 80038e4:	e37c      	b.n	8003fe0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d018      	beq.n	8003926 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d108      	bne.n	8003914 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	2b00      	cmp	r3, #0
 8003908:	d02c      	beq.n	8003964 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
 8003912:	e027      	b.n	8003964 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
 8003924:	e01e      	b.n	8003964 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10f      	bne.n	8003954 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0210 	bic.w	r2, r2, #16
 8003942:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 833e 	beq.w	8003fea <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8088 	beq.w	8003a8c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a89      	ldr	r2, [pc, #548]	; (8003bb0 <HAL_DMA_IRQHandler+0xa44>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d04a      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a88      	ldr	r2, [pc, #544]	; (8003bb4 <HAL_DMA_IRQHandler+0xa48>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d045      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a86      	ldr	r2, [pc, #536]	; (8003bb8 <HAL_DMA_IRQHandler+0xa4c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d040      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a85      	ldr	r2, [pc, #532]	; (8003bbc <HAL_DMA_IRQHandler+0xa50>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d03b      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a83      	ldr	r2, [pc, #524]	; (8003bc0 <HAL_DMA_IRQHandler+0xa54>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d036      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a82      	ldr	r2, [pc, #520]	; (8003bc4 <HAL_DMA_IRQHandler+0xa58>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d031      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a80      	ldr	r2, [pc, #512]	; (8003bc8 <HAL_DMA_IRQHandler+0xa5c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d02c      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7f      	ldr	r2, [pc, #508]	; (8003bcc <HAL_DMA_IRQHandler+0xa60>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d027      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a7d      	ldr	r2, [pc, #500]	; (8003bd0 <HAL_DMA_IRQHandler+0xa64>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d022      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a7c      	ldr	r2, [pc, #496]	; (8003bd4 <HAL_DMA_IRQHandler+0xa68>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d01d      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a7a      	ldr	r2, [pc, #488]	; (8003bd8 <HAL_DMA_IRQHandler+0xa6c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d018      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a79      	ldr	r2, [pc, #484]	; (8003bdc <HAL_DMA_IRQHandler+0xa70>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a77      	ldr	r2, [pc, #476]	; (8003be0 <HAL_DMA_IRQHandler+0xa74>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00e      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a76      	ldr	r2, [pc, #472]	; (8003be4 <HAL_DMA_IRQHandler+0xa78>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a74      	ldr	r2, [pc, #464]	; (8003be8 <HAL_DMA_IRQHandler+0xa7c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x8b8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a73      	ldr	r2, [pc, #460]	; (8003bec <HAL_DMA_IRQHandler+0xa80>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d108      	bne.n	8003a36 <HAL_DMA_IRQHandler+0x8ca>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e007      	b.n	8003a46 <HAL_DMA_IRQHandler+0x8da>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d307      	bcc.n	8003a62 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f2      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x8da>
 8003a60:	e000      	b.n	8003a64 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a62:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2203      	movs	r2, #3
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a7a:	e003      	b.n	8003a84 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 82aa 	beq.w	8003fea <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
 8003a9e:	e2a4      	b.n	8003fea <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_DMA_IRQHandler+0xa84>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04a      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a51      	ldr	r2, [pc, #324]	; (8003bf4 <HAL_DMA_IRQHandler+0xa88>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d045      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4f      	ldr	r2, [pc, #316]	; (8003bf8 <HAL_DMA_IRQHandler+0xa8c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d040      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4e      	ldr	r2, [pc, #312]	; (8003bfc <HAL_DMA_IRQHandler+0xa90>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d03b      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a4c      	ldr	r2, [pc, #304]	; (8003c00 <HAL_DMA_IRQHandler+0xa94>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d036      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4b      	ldr	r2, [pc, #300]	; (8003c04 <HAL_DMA_IRQHandler+0xa98>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d031      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a49      	ldr	r2, [pc, #292]	; (8003c08 <HAL_DMA_IRQHandler+0xa9c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02c      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a48      	ldr	r2, [pc, #288]	; (8003c0c <HAL_DMA_IRQHandler+0xaa0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d027      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a46      	ldr	r2, [pc, #280]	; (8003c10 <HAL_DMA_IRQHandler+0xaa4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d022      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a45      	ldr	r2, [pc, #276]	; (8003c14 <HAL_DMA_IRQHandler+0xaa8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01d      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a43      	ldr	r2, [pc, #268]	; (8003c18 <HAL_DMA_IRQHandler+0xaac>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a42      	ldr	r2, [pc, #264]	; (8003c1c <HAL_DMA_IRQHandler+0xab0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a40      	ldr	r2, [pc, #256]	; (8003c20 <HAL_DMA_IRQHandler+0xab4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00e      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <HAL_DMA_IRQHandler+0xab8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a3d      	ldr	r2, [pc, #244]	; (8003c28 <HAL_DMA_IRQHandler+0xabc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x9d4>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a3c      	ldr	r2, [pc, #240]	; (8003c2c <HAL_DMA_IRQHandler+0xac0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x9d8>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_DMA_IRQHandler+0x9da>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 824f 	beq.w	8003fea <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80dd 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xbb8>
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80d7 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	2204      	movs	r2, #4
 8003b80:	409a      	lsls	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d059      	beq.n	8003c44 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d14a      	bne.n	8003c30 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8220 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bac:	e21a      	b.n	8003fe4 <HAL_DMA_IRQHandler+0xe78>
 8003bae:	bf00      	nop
 8003bb0:	40020010 	.word	0x40020010
 8003bb4:	40020028 	.word	0x40020028
 8003bb8:	40020040 	.word	0x40020040
 8003bbc:	40020058 	.word	0x40020058
 8003bc0:	40020070 	.word	0x40020070
 8003bc4:	40020088 	.word	0x40020088
 8003bc8:	400200a0 	.word	0x400200a0
 8003bcc:	400200b8 	.word	0x400200b8
 8003bd0:	40020410 	.word	0x40020410
 8003bd4:	40020428 	.word	0x40020428
 8003bd8:	40020440 	.word	0x40020440
 8003bdc:	40020458 	.word	0x40020458
 8003be0:	40020470 	.word	0x40020470
 8003be4:	40020488 	.word	0x40020488
 8003be8:	400204a0 	.word	0x400204a0
 8003bec:	400204b8 	.word	0x400204b8
 8003bf0:	48022c08 	.word	0x48022c08
 8003bf4:	48022c1c 	.word	0x48022c1c
 8003bf8:	48022c30 	.word	0x48022c30
 8003bfc:	48022c44 	.word	0x48022c44
 8003c00:	48022c58 	.word	0x48022c58
 8003c04:	48022c6c 	.word	0x48022c6c
 8003c08:	48022c80 	.word	0x48022c80
 8003c0c:	48022c94 	.word	0x48022c94
 8003c10:	58025408 	.word	0x58025408
 8003c14:	5802541c 	.word	0x5802541c
 8003c18:	58025430 	.word	0x58025430
 8003c1c:	58025444 	.word	0x58025444
 8003c20:	58025458 	.word	0x58025458
 8003c24:	5802546c 	.word	0x5802546c
 8003c28:	58025480 	.word	0x58025480
 8003c2c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 81d5 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c42:	e1cf      	b.n	8003fe4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d160      	bne.n	8003d10 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7f      	ldr	r2, [pc, #508]	; (8003e50 <HAL_DMA_IRQHandler+0xce4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d04a      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7d      	ldr	r2, [pc, #500]	; (8003e54 <HAL_DMA_IRQHandler+0xce8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d045      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7c      	ldr	r2, [pc, #496]	; (8003e58 <HAL_DMA_IRQHandler+0xcec>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d040      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7a      	ldr	r2, [pc, #488]	; (8003e5c <HAL_DMA_IRQHandler+0xcf0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d03b      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a79      	ldr	r2, [pc, #484]	; (8003e60 <HAL_DMA_IRQHandler+0xcf4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d036      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a77      	ldr	r2, [pc, #476]	; (8003e64 <HAL_DMA_IRQHandler+0xcf8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d031      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a76      	ldr	r2, [pc, #472]	; (8003e68 <HAL_DMA_IRQHandler+0xcfc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d02c      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a74      	ldr	r2, [pc, #464]	; (8003e6c <HAL_DMA_IRQHandler+0xd00>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d027      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a73      	ldr	r2, [pc, #460]	; (8003e70 <HAL_DMA_IRQHandler+0xd04>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d022      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a71      	ldr	r2, [pc, #452]	; (8003e74 <HAL_DMA_IRQHandler+0xd08>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01d      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a70      	ldr	r2, [pc, #448]	; (8003e78 <HAL_DMA_IRQHandler+0xd0c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_DMA_IRQHandler+0xd10>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6d      	ldr	r2, [pc, #436]	; (8003e80 <HAL_DMA_IRQHandler+0xd14>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6b      	ldr	r2, [pc, #428]	; (8003e84 <HAL_DMA_IRQHandler+0xd18>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <HAL_DMA_IRQHandler+0xd1c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_DMA_IRQHandler+0xb82>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a68      	ldr	r2, [pc, #416]	; (8003e8c <HAL_DMA_IRQHandler+0xd20>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <HAL_DMA_IRQHandler+0xb94>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0208 	bic.w	r2, r2, #8
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e007      	b.n	8003d10 <HAL_DMA_IRQHandler+0xba4>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0204 	bic.w	r2, r2, #4
 8003d0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8165 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d22:	e15f      	b.n	8003fe4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80c5 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xd58>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80bf 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2202      	movs	r2, #2
 8003d50:	409a      	lsls	r2, r3
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d018      	beq.n	8003d92 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 813a 	beq.w	8003fe8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d7c:	e134      	b.n	8003fe8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8130 	beq.w	8003fe8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d90:	e12a      	b.n	8003fe8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 8089 	bne.w	8003eb0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <HAL_DMA_IRQHandler+0xce4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d04a      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <HAL_DMA_IRQHandler+0xce8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d045      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <HAL_DMA_IRQHandler+0xcec>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d040      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <HAL_DMA_IRQHandler+0xcf0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d03b      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <HAL_DMA_IRQHandler+0xcf4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d036      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <HAL_DMA_IRQHandler+0xcf8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d031      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <HAL_DMA_IRQHandler+0xcfc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d02c      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <HAL_DMA_IRQHandler+0xd00>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d027      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <HAL_DMA_IRQHandler+0xd04>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <HAL_DMA_IRQHandler+0xd08>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01d      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_DMA_IRQHandler+0xd0c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <HAL_DMA_IRQHandler+0xd10>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_DMA_IRQHandler+0xd14>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_DMA_IRQHandler+0xd18>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <HAL_DMA_IRQHandler+0xd1c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xcd2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <HAL_DMA_IRQHandler+0xd20>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d128      	bne.n	8003e90 <HAL_DMA_IRQHandler+0xd24>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0214 	bic.w	r2, r2, #20
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e027      	b.n	8003ea0 <HAL_DMA_IRQHandler+0xd34>
 8003e50:	40020010 	.word	0x40020010
 8003e54:	40020028 	.word	0x40020028
 8003e58:	40020040 	.word	0x40020040
 8003e5c:	40020058 	.word	0x40020058
 8003e60:	40020070 	.word	0x40020070
 8003e64:	40020088 	.word	0x40020088
 8003e68:	400200a0 	.word	0x400200a0
 8003e6c:	400200b8 	.word	0x400200b8
 8003e70:	40020410 	.word	0x40020410
 8003e74:	40020428 	.word	0x40020428
 8003e78:	40020440 	.word	0x40020440
 8003e7c:	40020458 	.word	0x40020458
 8003e80:	40020470 	.word	0x40020470
 8003e84:	40020488 	.word	0x40020488
 8003e88:	400204a0 	.word	0x400204a0
 8003e8c:	400204b8 	.word	0x400204b8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 020a 	bic.w	r2, r2, #10
 8003e9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8097 	beq.w	8003fe8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec2:	e091      	b.n	8003fe8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2208      	movs	r2, #8
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8088 	beq.w	8003fea <HAL_DMA_IRQHandler+0xe7e>
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8082 	beq.w	8003fea <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a41      	ldr	r2, [pc, #260]	; (8003ff0 <HAL_DMA_IRQHandler+0xe84>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d04a      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a3f      	ldr	r2, [pc, #252]	; (8003ff4 <HAL_DMA_IRQHandler+0xe88>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d045      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a3e      	ldr	r2, [pc, #248]	; (8003ff8 <HAL_DMA_IRQHandler+0xe8c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d040      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <HAL_DMA_IRQHandler+0xe90>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d03b      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a3b      	ldr	r2, [pc, #236]	; (8004000 <HAL_DMA_IRQHandler+0xe94>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d036      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a39      	ldr	r2, [pc, #228]	; (8004004 <HAL_DMA_IRQHandler+0xe98>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d031      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a38      	ldr	r2, [pc, #224]	; (8004008 <HAL_DMA_IRQHandler+0xe9c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d02c      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a36      	ldr	r2, [pc, #216]	; (800400c <HAL_DMA_IRQHandler+0xea0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d027      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a35      	ldr	r2, [pc, #212]	; (8004010 <HAL_DMA_IRQHandler+0xea4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d022      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a33      	ldr	r2, [pc, #204]	; (8004014 <HAL_DMA_IRQHandler+0xea8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01d      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a32      	ldr	r2, [pc, #200]	; (8004018 <HAL_DMA_IRQHandler+0xeac>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d018      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a30      	ldr	r2, [pc, #192]	; (800401c <HAL_DMA_IRQHandler+0xeb0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2f      	ldr	r2, [pc, #188]	; (8004020 <HAL_DMA_IRQHandler+0xeb4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <HAL_DMA_IRQHandler+0xeb8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <HAL_DMA_IRQHandler+0xebc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xe1a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2a      	ldr	r2, [pc, #168]	; (800402c <HAL_DMA_IRQHandler+0xec0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d108      	bne.n	8003f98 <HAL_DMA_IRQHandler+0xe2c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 021c 	bic.w	r2, r2, #28
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	e007      	b.n	8003fa8 <HAL_DMA_IRQHandler+0xe3c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 020e 	bic.w	r2, r2, #14
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
 8003fde:	e004      	b.n	8003fea <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003fe0:	bf00      	nop
 8003fe2:	e002      	b.n	8003fea <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fe4:	bf00      	nop
 8003fe6:	e000      	b.n	8003fea <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fe8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fea:	3728      	adds	r7, #40	; 0x28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40020010 	.word	0x40020010
 8003ff4:	40020028 	.word	0x40020028
 8003ff8:	40020040 	.word	0x40020040
 8003ffc:	40020058 	.word	0x40020058
 8004000:	40020070 	.word	0x40020070
 8004004:	40020088 	.word	0x40020088
 8004008:	400200a0 	.word	0x400200a0
 800400c:	400200b8 	.word	0x400200b8
 8004010:	40020410 	.word	0x40020410
 8004014:	40020428 	.word	0x40020428
 8004018:	40020440 	.word	0x40020440
 800401c:	40020458 	.word	0x40020458
 8004020:	40020470 	.word	0x40020470
 8004024:	40020488 	.word	0x40020488
 8004028:	400204a0 	.word	0x400204a0
 800402c:	400204b8 	.word	0x400204b8

08004030 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7f      	ldr	r2, [pc, #508]	; (8004264 <DMA_SetConfig+0x21c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d072      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a7d      	ldr	r2, [pc, #500]	; (8004268 <DMA_SetConfig+0x220>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d06d      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7c      	ldr	r2, [pc, #496]	; (800426c <DMA_SetConfig+0x224>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d068      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a7a      	ldr	r2, [pc, #488]	; (8004270 <DMA_SetConfig+0x228>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d063      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a79      	ldr	r2, [pc, #484]	; (8004274 <DMA_SetConfig+0x22c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d05e      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a77      	ldr	r2, [pc, #476]	; (8004278 <DMA_SetConfig+0x230>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d059      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a76      	ldr	r2, [pc, #472]	; (800427c <DMA_SetConfig+0x234>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d054      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a74      	ldr	r2, [pc, #464]	; (8004280 <DMA_SetConfig+0x238>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04f      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a73      	ldr	r2, [pc, #460]	; (8004284 <DMA_SetConfig+0x23c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d04a      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a71      	ldr	r2, [pc, #452]	; (8004288 <DMA_SetConfig+0x240>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d045      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a70      	ldr	r2, [pc, #448]	; (800428c <DMA_SetConfig+0x244>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d040      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6e      	ldr	r2, [pc, #440]	; (8004290 <DMA_SetConfig+0x248>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d03b      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6d      	ldr	r2, [pc, #436]	; (8004294 <DMA_SetConfig+0x24c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d036      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6b      	ldr	r2, [pc, #428]	; (8004298 <DMA_SetConfig+0x250>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d031      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6a      	ldr	r2, [pc, #424]	; (800429c <DMA_SetConfig+0x254>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02c      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a68      	ldr	r2, [pc, #416]	; (80042a0 <DMA_SetConfig+0x258>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d027      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <DMA_SetConfig+0x25c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <DMA_SetConfig+0x260>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01d      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a64      	ldr	r2, [pc, #400]	; (80042ac <DMA_SetConfig+0x264>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d018      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a62      	ldr	r2, [pc, #392]	; (80042b0 <DMA_SetConfig+0x268>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a61      	ldr	r2, [pc, #388]	; (80042b4 <DMA_SetConfig+0x26c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a5f      	ldr	r2, [pc, #380]	; (80042b8 <DMA_SetConfig+0x270>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a5e      	ldr	r2, [pc, #376]	; (80042bc <DMA_SetConfig+0x274>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5c      	ldr	r2, [pc, #368]	; (80042c0 <DMA_SetConfig+0x278>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <DMA_SetConfig+0x10e>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <DMA_SetConfig+0x110>
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004164:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d004      	beq.n	8004178 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004176:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <DMA_SetConfig+0x21c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <DMA_SetConfig+0x220>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a36      	ldr	r2, [pc, #216]	; (800426c <DMA_SetConfig+0x224>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a35      	ldr	r2, [pc, #212]	; (8004270 <DMA_SetConfig+0x228>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a33      	ldr	r2, [pc, #204]	; (8004274 <DMA_SetConfig+0x22c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	; (8004278 <DMA_SetConfig+0x230>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a30      	ldr	r2, [pc, #192]	; (800427c <DMA_SetConfig+0x234>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <DMA_SetConfig+0x238>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <DMA_SetConfig+0x23c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2c      	ldr	r2, [pc, #176]	; (8004288 <DMA_SetConfig+0x240>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	; (800428c <DMA_SetConfig+0x244>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a29      	ldr	r2, [pc, #164]	; (8004290 <DMA_SetConfig+0x248>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <DMA_SetConfig+0x24c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a26      	ldr	r2, [pc, #152]	; (8004298 <DMA_SetConfig+0x250>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a24      	ldr	r2, [pc, #144]	; (800429c <DMA_SetConfig+0x254>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <DMA_SetConfig+0x258>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <DMA_SetConfig+0x1d4>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <DMA_SetConfig+0x1d6>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d059      	beq.n	80042d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	223f      	movs	r2, #63	; 0x3f
 800422c:	409a      	lsls	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004240:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d138      	bne.n	80042c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004262:	e0ae      	b.n	80043c2 <DMA_SetConfig+0x37a>
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	58025408 	.word	0x58025408
 80042a8:	5802541c 	.word	0x5802541c
 80042ac:	58025430 	.word	0x58025430
 80042b0:	58025444 	.word	0x58025444
 80042b4:	58025458 	.word	0x58025458
 80042b8:	5802546c 	.word	0x5802546c
 80042bc:	58025480 	.word	0x58025480
 80042c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]
}
 80042d4:	e075      	b.n	80043c2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3d      	ldr	r2, [pc, #244]	; (80043d0 <DMA_SetConfig+0x388>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d04a      	beq.n	8004376 <DMA_SetConfig+0x32e>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a3b      	ldr	r2, [pc, #236]	; (80043d4 <DMA_SetConfig+0x38c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d045      	beq.n	8004376 <DMA_SetConfig+0x32e>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <DMA_SetConfig+0x390>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d040      	beq.n	8004376 <DMA_SetConfig+0x32e>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a38      	ldr	r2, [pc, #224]	; (80043dc <DMA_SetConfig+0x394>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d03b      	beq.n	8004376 <DMA_SetConfig+0x32e>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a37      	ldr	r2, [pc, #220]	; (80043e0 <DMA_SetConfig+0x398>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d036      	beq.n	8004376 <DMA_SetConfig+0x32e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a35      	ldr	r2, [pc, #212]	; (80043e4 <DMA_SetConfig+0x39c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d031      	beq.n	8004376 <DMA_SetConfig+0x32e>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a34      	ldr	r2, [pc, #208]	; (80043e8 <DMA_SetConfig+0x3a0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d02c      	beq.n	8004376 <DMA_SetConfig+0x32e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a32      	ldr	r2, [pc, #200]	; (80043ec <DMA_SetConfig+0x3a4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d027      	beq.n	8004376 <DMA_SetConfig+0x32e>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a31      	ldr	r2, [pc, #196]	; (80043f0 <DMA_SetConfig+0x3a8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d022      	beq.n	8004376 <DMA_SetConfig+0x32e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <DMA_SetConfig+0x3ac>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01d      	beq.n	8004376 <DMA_SetConfig+0x32e>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2e      	ldr	r2, [pc, #184]	; (80043f8 <DMA_SetConfig+0x3b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d018      	beq.n	8004376 <DMA_SetConfig+0x32e>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <DMA_SetConfig+0x3b4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <DMA_SetConfig+0x32e>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <DMA_SetConfig+0x3b8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00e      	beq.n	8004376 <DMA_SetConfig+0x32e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <DMA_SetConfig+0x3bc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d009      	beq.n	8004376 <DMA_SetConfig+0x32e>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a28      	ldr	r2, [pc, #160]	; (8004408 <DMA_SetConfig+0x3c0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <DMA_SetConfig+0x32e>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <DMA_SetConfig+0x3c4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <DMA_SetConfig+0x332>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <DMA_SetConfig+0x334>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d020      	beq.n	80043c2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	2201      	movs	r2, #1
 800438a:	409a      	lsls	r2, r3
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d108      	bne.n	80043b2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	60da      	str	r2, [r3, #12]
}
 80043b0:	e007      	b.n	80043c2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	60da      	str	r2, [r3, #12]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	48022c08 	.word	0x48022c08
 80043d4:	48022c1c 	.word	0x48022c1c
 80043d8:	48022c30 	.word	0x48022c30
 80043dc:	48022c44 	.word	0x48022c44
 80043e0:	48022c58 	.word	0x48022c58
 80043e4:	48022c6c 	.word	0x48022c6c
 80043e8:	48022c80 	.word	0x48022c80
 80043ec:	48022c94 	.word	0x48022c94
 80043f0:	58025408 	.word	0x58025408
 80043f4:	5802541c 	.word	0x5802541c
 80043f8:	58025430 	.word	0x58025430
 80043fc:	58025444 	.word	0x58025444
 8004400:	58025458 	.word	0x58025458
 8004404:	5802546c 	.word	0x5802546c
 8004408:	58025480 	.word	0x58025480
 800440c:	58025494 	.word	0x58025494

08004410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a42      	ldr	r2, [pc, #264]	; (8004528 <DMA_CalcBaseAndBitshift+0x118>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d04a      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a41      	ldr	r2, [pc, #260]	; (800452c <DMA_CalcBaseAndBitshift+0x11c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d045      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <DMA_CalcBaseAndBitshift+0x120>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d040      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3e      	ldr	r2, [pc, #248]	; (8004534 <DMA_CalcBaseAndBitshift+0x124>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d03b      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <DMA_CalcBaseAndBitshift+0x128>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d036      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3b      	ldr	r2, [pc, #236]	; (800453c <DMA_CalcBaseAndBitshift+0x12c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d031      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a39      	ldr	r2, [pc, #228]	; (8004540 <DMA_CalcBaseAndBitshift+0x130>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02c      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a38      	ldr	r2, [pc, #224]	; (8004544 <DMA_CalcBaseAndBitshift+0x134>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d027      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a36      	ldr	r2, [pc, #216]	; (8004548 <DMA_CalcBaseAndBitshift+0x138>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a35      	ldr	r2, [pc, #212]	; (800454c <DMA_CalcBaseAndBitshift+0x13c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d01d      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <DMA_CalcBaseAndBitshift+0x140>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d018      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <DMA_CalcBaseAndBitshift+0x144>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a30      	ldr	r2, [pc, #192]	; (8004558 <DMA_CalcBaseAndBitshift+0x148>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <DMA_CalcBaseAndBitshift+0x14c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d009      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <DMA_CalcBaseAndBitshift+0x150>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <DMA_CalcBaseAndBitshift+0x154>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <DMA_CalcBaseAndBitshift+0xac>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <DMA_CalcBaseAndBitshift+0xae>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d024      	beq.n	800450c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	3b10      	subs	r3, #16
 80044ca:	4a27      	ldr	r2, [pc, #156]	; (8004568 <DMA_CalcBaseAndBitshift+0x158>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	4a24      	ldr	r2, [pc, #144]	; (800456c <DMA_CalcBaseAndBitshift+0x15c>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d908      	bls.n	80044fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <DMA_CalcBaseAndBitshift+0x160>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	1d1a      	adds	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	659a      	str	r2, [r3, #88]	; 0x58
 80044fa:	e00d      	b.n	8004518 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <DMA_CalcBaseAndBitshift+0x160>)
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6593      	str	r3, [r2, #88]	; 0x58
 800450a:	e005      	b.n	8004518 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40020010 	.word	0x40020010
 800452c:	40020028 	.word	0x40020028
 8004530:	40020040 	.word	0x40020040
 8004534:	40020058 	.word	0x40020058
 8004538:	40020070 	.word	0x40020070
 800453c:	40020088 	.word	0x40020088
 8004540:	400200a0 	.word	0x400200a0
 8004544:	400200b8 	.word	0x400200b8
 8004548:	40020410 	.word	0x40020410
 800454c:	40020428 	.word	0x40020428
 8004550:	40020440 	.word	0x40020440
 8004554:	40020458 	.word	0x40020458
 8004558:	40020470 	.word	0x40020470
 800455c:	40020488 	.word	0x40020488
 8004560:	400204a0 	.word	0x400204a0
 8004564:	400204b8 	.word	0x400204b8
 8004568:	aaaaaaab 	.word	0xaaaaaaab
 800456c:	08016b9c 	.word	0x08016b9c
 8004570:	fffffc00 	.word	0xfffffc00

08004574 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d120      	bne.n	80045ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	2b03      	cmp	r3, #3
 800458e:	d858      	bhi.n	8004642 <DMA_CheckFifoParam+0xce>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <DMA_CheckFifoParam+0x24>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045bb 	.word	0x080045bb
 80045a0:	080045a9 	.word	0x080045a9
 80045a4:	08004643 	.word	0x08004643
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d048      	beq.n	8004646 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045b8:	e045      	b.n	8004646 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045c2:	d142      	bne.n	800464a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045c8:	e03f      	b.n	800464a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d2:	d123      	bne.n	800461c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d838      	bhi.n	800464e <DMA_CheckFifoParam+0xda>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <DMA_CheckFifoParam+0x70>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	080045fb 	.word	0x080045fb
 80045ec:	080045f5 	.word	0x080045f5
 80045f0:	0800460d 	.word	0x0800460d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
        break;
 80045f8:	e030      	b.n	800465c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d025      	beq.n	8004652 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800460a:	e022      	b.n	8004652 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004614:	d11f      	bne.n	8004656 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800461a:	e01c      	b.n	8004656 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b02      	cmp	r3, #2
 8004622:	d902      	bls.n	800462a <DMA_CheckFifoParam+0xb6>
 8004624:	2b03      	cmp	r3, #3
 8004626:	d003      	beq.n	8004630 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004628:	e018      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
        break;
 800462e:	e015      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
    break;
 8004640:	e00b      	b.n	800465a <DMA_CheckFifoParam+0xe6>
        break;
 8004642:	bf00      	nop
 8004644:	e00a      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004646:	bf00      	nop
 8004648:	e008      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 800464a:	bf00      	nop
 800464c:	e006      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <DMA_CheckFifoParam+0xe8>
    break;
 800465a:	bf00      	nop
    }
  }

  return status;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop

0800466c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a38      	ldr	r2, [pc, #224]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a36      	ldr	r2, [pc, #216]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01d      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a35      	ldr	r2, [pc, #212]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a33      	ldr	r2, [pc, #204]	; (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a32      	ldr	r2, [pc, #200]	; (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a30      	ldr	r2, [pc, #192]	; (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a2f      	ldr	r2, [pc, #188]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2d      	ldr	r2, [pc, #180]	; (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046ce:	2300      	movs	r3, #0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01a      	beq.n	800470a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3b08      	subs	r3, #8
 80046dc:	4a28      	ldr	r2, [pc, #160]	; (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4b26      	ldr	r3, [pc, #152]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a24      	ldr	r2, [pc, #144]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2201      	movs	r2, #1
 8004702:	409a      	lsls	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004708:	e024      	b.n	8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3b10      	subs	r3, #16
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d806      	bhi.n	8004732 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d902      	bls.n	8004732 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3308      	adds	r3, #8
 8004730:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a16      	ldr	r2, [pc, #88]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004744:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2201      	movs	r2, #1
 800474e:	409a      	lsls	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	58025408 	.word	0x58025408
 8004764:	5802541c 	.word	0x5802541c
 8004768:	58025430 	.word	0x58025430
 800476c:	58025444 	.word	0x58025444
 8004770:	58025458 	.word	0x58025458
 8004774:	5802546c 	.word	0x5802546c
 8004778:	58025480 	.word	0x58025480
 800477c:	58025494 	.word	0x58025494
 8004780:	cccccccd 	.word	0xcccccccd
 8004784:	16009600 	.word	0x16009600
 8004788:	58025880 	.word	0x58025880
 800478c:	aaaaaaab 	.word	0xaaaaaaab
 8004790:	400204b8 	.word	0x400204b8
 8004794:	4002040f 	.word	0x4002040f
 8004798:	10008200 	.word	0x10008200
 800479c:	40020880 	.word	0x40020880

080047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d04a      	beq.n	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d847      	bhi.n	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a25      	ldr	r2, [pc, #148]	; (8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a24      	ldr	r2, [pc, #144]	; (800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004828:	671a      	str	r2, [r3, #112]	; 0x70
 800482a:	e009      	b.n	8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	461a      	mov	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a11      	ldr	r2, [pc, #68]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800483e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3b01      	subs	r3, #1
 8004844:	2201      	movs	r2, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	58025408 	.word	0x58025408
 800485c:	5802541c 	.word	0x5802541c
 8004860:	58025430 	.word	0x58025430
 8004864:	58025444 	.word	0x58025444
 8004868:	58025458 	.word	0x58025458
 800486c:	5802546c 	.word	0x5802546c
 8004870:	58025480 	.word	0x58025480
 8004874:	58025494 	.word	0x58025494
 8004878:	1600963f 	.word	0x1600963f
 800487c:	58025940 	.word	0x58025940
 8004880:	1000823f 	.word	0x1000823f
 8004884:	40020940 	.word	0x40020940

08004888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004896:	4b89      	ldr	r3, [pc, #548]	; (8004abc <HAL_GPIO_Init+0x234>)
 8004898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800489a:	e194      	b.n	8004bc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	2101      	movs	r1, #1
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8186 	beq.w	8004bc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d005      	beq.n	80048cc <HAL_GPIO_Init+0x44>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d130      	bne.n	800492e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	2203      	movs	r2, #3
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004902:	2201      	movs	r2, #1
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f003 0201 	and.w	r2, r3, #1
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b03      	cmp	r3, #3
 8004938:	d017      	beq.n	800496a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d123      	bne.n	80049be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	08da      	lsrs	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3208      	adds	r2, #8
 800497e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	220f      	movs	r2, #15
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	08da      	lsrs	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3208      	adds	r2, #8
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	2203      	movs	r2, #3
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 0203 	and.w	r2, r3, #3
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80e0 	beq.w	8004bc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a00:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <HAL_GPIO_Init+0x238>)
 8004a02:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004a06:	4a2e      	ldr	r2, [pc, #184]	; (8004ac0 <HAL_GPIO_Init+0x238>)
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_GPIO_Init+0x238>)
 8004a12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a1e:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <HAL_GPIO_Init+0x23c>)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	3302      	adds	r3, #2
 8004a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	220f      	movs	r2, #15
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a20      	ldr	r2, [pc, #128]	; (8004ac8 <HAL_GPIO_Init+0x240>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d052      	beq.n	8004af0 <HAL_GPIO_Init+0x268>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1f      	ldr	r2, [pc, #124]	; (8004acc <HAL_GPIO_Init+0x244>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d031      	beq.n	8004ab6 <HAL_GPIO_Init+0x22e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <HAL_GPIO_Init+0x248>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d02b      	beq.n	8004ab2 <HAL_GPIO_Init+0x22a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <HAL_GPIO_Init+0x24c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d025      	beq.n	8004aae <HAL_GPIO_Init+0x226>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_GPIO_Init+0x250>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01f      	beq.n	8004aaa <HAL_GPIO_Init+0x222>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_GPIO_Init+0x254>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d019      	beq.n	8004aa6 <HAL_GPIO_Init+0x21e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <HAL_GPIO_Init+0x258>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_GPIO_Init+0x21a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <HAL_GPIO_Init+0x25c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00d      	beq.n	8004a9e <HAL_GPIO_Init+0x216>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_GPIO_Init+0x260>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <HAL_GPIO_Init+0x212>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a17      	ldr	r2, [pc, #92]	; (8004aec <HAL_GPIO_Init+0x264>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_GPIO_Init+0x20e>
 8004a92:	2309      	movs	r3, #9
 8004a94:	e02d      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004a96:	230a      	movs	r3, #10
 8004a98:	e02b      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	e029      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004a9e:	2307      	movs	r3, #7
 8004aa0:	e027      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aa2:	2306      	movs	r3, #6
 8004aa4:	e025      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aa6:	2305      	movs	r3, #5
 8004aa8:	e023      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	e021      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e01f      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e01d      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e01b      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aba:	bf00      	nop
 8004abc:	58000080 	.word	0x58000080
 8004ac0:	58024400 	.word	0x58024400
 8004ac4:	58000400 	.word	0x58000400
 8004ac8:	58020000 	.word	0x58020000
 8004acc:	58020400 	.word	0x58020400
 8004ad0:	58020800 	.word	0x58020800
 8004ad4:	58020c00 	.word	0x58020c00
 8004ad8:	58021000 	.word	0x58021000
 8004adc:	58021400 	.word	0x58021400
 8004ae0:	58021800 	.word	0x58021800
 8004ae4:	58021c00 	.word	0x58021c00
 8004ae8:	58022000 	.word	0x58022000
 8004aec:	58022400 	.word	0x58022400
 8004af0:	2300      	movs	r3, #0
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	f002 0203 	and.w	r2, r2, #3
 8004af8:	0092      	lsls	r2, r2, #2
 8004afa:	4093      	lsls	r3, r2
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b02:	4938      	ldr	r1, [pc, #224]	; (8004be4 <HAL_GPIO_Init+0x35c>)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	089b      	lsrs	r3, r3, #2
 8004b08:	3302      	adds	r3, #2
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f47f ae63 	bne.w	800489c <HAL_GPIO_Init+0x14>
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	3724      	adds	r7, #36	; 0x24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	58000400 	.word	0x58000400

08004be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bf8:	787b      	ldrb	r3, [r7, #1]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bfe:	887a      	ldrh	r2, [r7, #2]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c04:	e003      	b.n	8004c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	041a      	lsls	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	619a      	str	r2, [r3, #24]
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004c24:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	2b06      	cmp	r3, #6
 8004c2e:	d00a      	beq.n	8004c46 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d001      	beq.n	8004c42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e040      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e03e      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c46:	4b21      	ldr	r3, [pc, #132]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004c4e:	491f      	ldr	r1, [pc, #124]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c56:	f7fd f887 	bl	8001d68 <HAL_GetTick>
 8004c5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c5c:	e009      	b.n	8004c72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c5e:	f7fd f883 	bl	8001d68 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c6c:	d901      	bls.n	8004c72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e028      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c72:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7e:	d1ee      	bne.n	8004c5e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b1e      	cmp	r3, #30
 8004c84:	d008      	beq.n	8004c98 <HAL_PWREx_ConfigSupply+0x7c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b2e      	cmp	r3, #46	; 0x2e
 8004c8a:	d005      	beq.n	8004c98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b1d      	cmp	r3, #29
 8004c90:	d002      	beq.n	8004c98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b2d      	cmp	r3, #45	; 0x2d
 8004c96:	d114      	bne.n	8004cc2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c98:	f7fd f866 	bl	8001d68 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c9e:	e009      	b.n	8004cb4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ca0:	f7fd f862 	bl	8001d68 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cae:	d901      	bls.n	8004cb4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e007      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d1ee      	bne.n	8004ca0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	58024800 	.word	0x58024800

08004cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f000 bc1f 	b.w	8005522 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80b3 	beq.w	8004e58 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf2:	4b95      	ldr	r3, [pc, #596]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cfc:	4b92      	ldr	r3, [pc, #584]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d007      	beq.n	8004d18 <HAL_RCC_OscConfig+0x48>
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	2b18      	cmp	r3, #24
 8004d0c:	d112      	bne.n	8004d34 <HAL_RCC_OscConfig+0x64>
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d10d      	bne.n	8004d34 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d18:	4b8b      	ldr	r3, [pc, #556]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8098 	beq.w	8004e56 <HAL_RCC_OscConfig+0x186>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 8093 	bne.w	8004e56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e3f6      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d106      	bne.n	8004d4c <HAL_RCC_OscConfig+0x7c>
 8004d3e:	4b82      	ldr	r3, [pc, #520]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a81      	ldr	r2, [pc, #516]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e058      	b.n	8004dfe <HAL_RCC_OscConfig+0x12e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d112      	bne.n	8004d7a <HAL_RCC_OscConfig+0xaa>
 8004d54:	4b7c      	ldr	r3, [pc, #496]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7b      	ldr	r2, [pc, #492]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b79      	ldr	r3, [pc, #484]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a78      	ldr	r2, [pc, #480]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a75      	ldr	r2, [pc, #468]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e041      	b.n	8004dfe <HAL_RCC_OscConfig+0x12e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d82:	d112      	bne.n	8004daa <HAL_RCC_OscConfig+0xda>
 8004d84:	4b70      	ldr	r3, [pc, #448]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a6f      	ldr	r2, [pc, #444]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	4b6d      	ldr	r3, [pc, #436]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a6c      	ldr	r2, [pc, #432]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a69      	ldr	r2, [pc, #420]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e029      	b.n	8004dfe <HAL_RCC_OscConfig+0x12e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004db2:	d112      	bne.n	8004dda <HAL_RCC_OscConfig+0x10a>
 8004db4:	4b64      	ldr	r3, [pc, #400]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a63      	ldr	r2, [pc, #396]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	4b61      	ldr	r3, [pc, #388]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a60      	ldr	r2, [pc, #384]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4b5e      	ldr	r3, [pc, #376]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a5d      	ldr	r2, [pc, #372]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	e011      	b.n	8004dfe <HAL_RCC_OscConfig+0x12e>
 8004dda:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5a      	ldr	r2, [pc, #360]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b58      	ldr	r3, [pc, #352]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a57      	ldr	r2, [pc, #348]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b55      	ldr	r3, [pc, #340]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a54      	ldr	r2, [pc, #336]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004df8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004dfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d013      	beq.n	8004e2e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e06:	f7fc ffaf 	bl	8001d68 <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0e:	f7fc ffab 	bl	8001d68 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b64      	cmp	r3, #100	; 0x64
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e380      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e20:	4b49      	ldr	r3, [pc, #292]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x13e>
 8004e2c:	e014      	b.n	8004e58 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7fc ff9b 	bl	8001d68 <HAL_GetTick>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e36:	f7fc ff97 	bl	8001d68 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b64      	cmp	r3, #100	; 0x64
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e36c      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e48:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f0      	bne.n	8004e36 <HAL_RCC_OscConfig+0x166>
 8004e54:	e000      	b.n	8004e58 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 808c 	beq.w	8004f7e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e6e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e70:	4b35      	ldr	r3, [pc, #212]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <HAL_RCC_OscConfig+0x1bc>
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b18      	cmp	r3, #24
 8004e80:	d137      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x222>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d132      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8c:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x1d4>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e33e      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ea4:	4b28      	ldr	r3, [pc, #160]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f023 0219 	bic.w	r2, r3, #25
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4925      	ldr	r1, [pc, #148]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fc ff57 	bl	8001d68 <HAL_GetTick>
 8004eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fc ff53 	bl	8001d68 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e328      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	4917      	ldr	r1, [pc, #92]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ef0:	e045      	b.n	8004f7e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d028      	beq.n	8004f4c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 0219 	bic.w	r2, r3, #25
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	4910      	ldr	r1, [pc, #64]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fc ff2c 	bl	8001d68 <HAL_GetTick>
 8004f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f14:	f7fc ff28 	bl	8001d68 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e2fd      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	4901      	ldr	r1, [pc, #4]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]
 8004f46:	e01a      	b.n	8004f7e <HAL_RCC_OscConfig+0x2ae>
 8004f48:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4c:	4b97      	ldr	r3, [pc, #604]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a96      	ldr	r2, [pc, #600]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fc ff06 	bl	8001d68 <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f60:	f7fc ff02 	bl	8001d68 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e2d7      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f72:	4b8e      	ldr	r3, [pc, #568]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d06a      	beq.n	8005060 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8a:	4b88      	ldr	r3, [pc, #544]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f94:	4b85      	ldr	r3, [pc, #532]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d007      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x2e0>
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b18      	cmp	r3, #24
 8004fa4:	d11b      	bne.n	8004fde <HAL_RCC_OscConfig+0x30e>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d116      	bne.n	8004fde <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb0:	4b7e      	ldr	r3, [pc, #504]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x2f8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e2ac      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fc8:	4b78      	ldr	r3, [pc, #480]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	061b      	lsls	r3, r3, #24
 8004fd6:	4975      	ldr	r1, [pc, #468]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fdc:	e040      	b.n	8005060 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d023      	beq.n	800502e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fe6:	4b71      	ldr	r3, [pc, #452]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a70      	ldr	r2, [pc, #448]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fc feb9 	bl	8001d68 <HAL_GetTick>
 8004ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ffa:	f7fc feb5 	bl	8001d68 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e28a      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800500c:	4b67      	ldr	r3, [pc, #412]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005018:	4b64      	ldr	r3, [pc, #400]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	4961      	ldr	r1, [pc, #388]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	60cb      	str	r3, [r1, #12]
 800502c:	e018      	b.n	8005060 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800502e:	4b5f      	ldr	r3, [pc, #380]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a5e      	ldr	r2, [pc, #376]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fc fe95 	bl	8001d68 <HAL_GetTick>
 800503e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005042:	f7fc fe91 	bl	8001d68 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e266      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005054:	4b55      	ldr	r3, [pc, #340]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d036      	beq.n	80050da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d019      	beq.n	80050a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005074:	4b4d      	ldr	r3, [pc, #308]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005078:	4a4c      	ldr	r2, [pc, #304]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fc fe72 	bl	8001d68 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005088:	f7fc fe6e 	bl	8001d68 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e243      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800509a:	4b44      	ldr	r3, [pc, #272]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800509c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x3b8>
 80050a6:	e018      	b.n	80050da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a8:	4b40      	ldr	r3, [pc, #256]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ac:	4a3f      	ldr	r2, [pc, #252]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fc fe58 	bl	8001d68 <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050bc:	f7fc fe54 	bl	8001d68 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e229      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d036      	beq.n	8005154 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d019      	beq.n	8005122 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050ee:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2e      	ldr	r2, [pc, #184]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050fa:	f7fc fe35 	bl	8001d68 <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005102:	f7fc fe31 	bl	8001d68 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e206      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x432>
 8005120:	e018      	b.n	8005154 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a21      	ldr	r2, [pc, #132]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800512c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800512e:	f7fc fe1b 	bl	8001d68 <HAL_GetTick>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005136:	f7fc fe17 	bl	8001d68 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e1ec      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005148:	4b18      	ldr	r3, [pc, #96]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80af 	beq.w	80052c0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <HAL_RCC_OscConfig+0x4e0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <HAL_RCC_OscConfig+0x4e0>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800516e:	f7fc fdfb 	bl	8001d68 <HAL_GetTick>
 8005172:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005176:	f7fc fdf7 	bl	8001d68 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b64      	cmp	r3, #100	; 0x64
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e1cc      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCC_OscConfig+0x4e0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10b      	bne.n	80051b4 <HAL_RCC_OscConfig+0x4e4>
 800519c:	4b03      	ldr	r3, [pc, #12]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a02      	ldr	r2, [pc, #8]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	e05b      	b.n	8005262 <HAL_RCC_OscConfig+0x592>
 80051aa:	bf00      	nop
 80051ac:	58024400 	.word	0x58024400
 80051b0:	58024800 	.word	0x58024800
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d112      	bne.n	80051e2 <HAL_RCC_OscConfig+0x512>
 80051bc:	4b9d      	ldr	r3, [pc, #628]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	4a9c      	ldr	r2, [pc, #624]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	6713      	str	r3, [r2, #112]	; 0x70
 80051c8:	4b9a      	ldr	r3, [pc, #616]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	4a99      	ldr	r2, [pc, #612]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d2:	6713      	str	r3, [r2, #112]	; 0x70
 80051d4:	4b97      	ldr	r3, [pc, #604]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d8:	4a96      	ldr	r2, [pc, #600]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051da:	f023 0304 	bic.w	r3, r3, #4
 80051de:	6713      	str	r3, [r2, #112]	; 0x70
 80051e0:	e03f      	b.n	8005262 <HAL_RCC_OscConfig+0x592>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d112      	bne.n	8005210 <HAL_RCC_OscConfig+0x540>
 80051ea:	4b92      	ldr	r3, [pc, #584]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4a91      	ldr	r2, [pc, #580]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051f0:	f043 0304 	orr.w	r3, r3, #4
 80051f4:	6713      	str	r3, [r2, #112]	; 0x70
 80051f6:	4b8f      	ldr	r3, [pc, #572]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	4a8e      	ldr	r2, [pc, #568]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005200:	6713      	str	r3, [r2, #112]	; 0x70
 8005202:	4b8c      	ldr	r3, [pc, #560]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	4a8b      	ldr	r2, [pc, #556]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	6713      	str	r3, [r2, #112]	; 0x70
 800520e:	e028      	b.n	8005262 <HAL_RCC_OscConfig+0x592>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b85      	cmp	r3, #133	; 0x85
 8005216:	d112      	bne.n	800523e <HAL_RCC_OscConfig+0x56e>
 8005218:	4b86      	ldr	r3, [pc, #536]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	4a85      	ldr	r2, [pc, #532]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800521e:	f043 0304 	orr.w	r3, r3, #4
 8005222:	6713      	str	r3, [r2, #112]	; 0x70
 8005224:	4b83      	ldr	r3, [pc, #524]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	4a82      	ldr	r2, [pc, #520]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	6713      	str	r3, [r2, #112]	; 0x70
 8005230:	4b80      	ldr	r3, [pc, #512]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	4a7f      	ldr	r2, [pc, #508]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6713      	str	r3, [r2, #112]	; 0x70
 800523c:	e011      	b.n	8005262 <HAL_RCC_OscConfig+0x592>
 800523e:	4b7d      	ldr	r3, [pc, #500]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	4a7c      	ldr	r2, [pc, #496]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6713      	str	r3, [r2, #112]	; 0x70
 800524a:	4b7a      	ldr	r3, [pc, #488]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	4a79      	ldr	r2, [pc, #484]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	6713      	str	r3, [r2, #112]	; 0x70
 8005256:	4b77      	ldr	r3, [pc, #476]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	4a76      	ldr	r2, [pc, #472]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800525c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d015      	beq.n	8005296 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526a:	f7fc fd7d 	bl	8001d68 <HAL_GetTick>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005270:	e00a      	b.n	8005288 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005272:	f7fc fd79 	bl	8001d68 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005280:	4293      	cmp	r3, r2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e14c      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005288:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ee      	beq.n	8005272 <HAL_RCC_OscConfig+0x5a2>
 8005294:	e014      	b.n	80052c0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005296:	f7fc fd67 	bl	8001d68 <HAL_GetTick>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fc fd63 	bl	8001d68 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e136      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052b4:	4b5f      	ldr	r3, [pc, #380]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ee      	bne.n	800529e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 812b 	beq.w	8005520 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052ca:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d2:	2b18      	cmp	r3, #24
 80052d4:	f000 80bb 	beq.w	800544e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f040 8095 	bne.w	800540c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b54      	ldr	r3, [pc, #336]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a53      	ldr	r2, [pc, #332]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80052e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ee:	f7fc fd3b 	bl	8001d68 <HAL_GetTick>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fc fd37 	bl	8001d68 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e10c      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005308:	4b4a      	ldr	r3, [pc, #296]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005314:	4b47      	ldr	r3, [pc, #284]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005318:	4b47      	ldr	r3, [pc, #284]	; (8005438 <HAL_RCC_OscConfig+0x768>)
 800531a:	4013      	ands	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	430a      	orrs	r2, r1
 8005328:	4942      	ldr	r1, [pc, #264]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800532a:	4313      	orrs	r3, r2
 800532c:	628b      	str	r3, [r1, #40]	; 0x28
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	3b01      	subs	r3, #1
 8005334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	3b01      	subs	r3, #1
 800533e:	025b      	lsls	r3, r3, #9
 8005340:	b29b      	uxth	r3, r3
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	3b01      	subs	r3, #1
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	3b01      	subs	r3, #1
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800535e:	4935      	ldr	r1, [pc, #212]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005360:	4313      	orrs	r3, r2
 8005362:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005364:	4b33      	ldr	r3, [pc, #204]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4a32      	ldr	r2, [pc, #200]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005370:	4b30      	ldr	r3, [pc, #192]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005374:	4b31      	ldr	r3, [pc, #196]	; (800543c <HAL_RCC_OscConfig+0x76c>)
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800537c:	00d2      	lsls	r2, r2, #3
 800537e:	492d      	ldr	r1, [pc, #180]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005380:	4313      	orrs	r3, r2
 8005382:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f023 020c 	bic.w	r2, r3, #12
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	4928      	ldr	r1, [pc, #160]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005392:	4313      	orrs	r3, r2
 8005394:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005396:	4b27      	ldr	r3, [pc, #156]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f023 0202 	bic.w	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	4924      	ldr	r1, [pc, #144]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053a8:	4b22      	ldr	r3, [pc, #136]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	4a21      	ldr	r2, [pc, #132]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b4:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053c0:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053cc:	4b19      	ldr	r3, [pc, #100]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d8:	4b16      	ldr	r3, [pc, #88]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a15      	ldr	r2, [pc, #84]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fc fcc0 	bl	8001d68 <HAL_GetTick>
 80053e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fc fcbc 	bl	8001d68 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e091      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0x71c>
 800540a:	e089      	b.n	8005520 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fc fca6 	bl	8001d68 <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800541e:	e00f      	b.n	8005440 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fc fca2 	bl	8001d68 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d908      	bls.n	8005440 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e077      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
 8005438:	fffffc0c 	.word	0xfffffc0c
 800543c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005440:	4b3a      	ldr	r3, [pc, #232]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e9      	bne.n	8005420 <HAL_RCC_OscConfig+0x750>
 800544c:	e068      	b.n	8005520 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005454:	4b35      	ldr	r3, [pc, #212]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b01      	cmp	r3, #1
 8005460:	d031      	beq.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f003 0203 	and.w	r2, r3, #3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d12a      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d122      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d11a      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	0a5b      	lsrs	r3, r3, #9
 8005494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d111      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d108      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	0e1b      	lsrs	r3, r3, #24
 80054b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e02b      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054ca:	4b18      	ldr	r3, [pc, #96]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 80054cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d01f      	beq.n	8005520 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	4a11      	ldr	r2, [pc, #68]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054ec:	f7fc fc3c 	bl	8001d68 <HAL_GetTick>
 80054f0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054f2:	bf00      	nop
 80054f4:	f7fc fc38 	bl	8001d68 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d0f9      	beq.n	80054f4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005504:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <HAL_RCC_OscConfig+0x860>)
 8005506:	4013      	ands	r3, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800550c:	00d2      	lsls	r2, r2, #3
 800550e:	4907      	ldr	r1, [pc, #28]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a04      	ldr	r2, [pc, #16]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3730      	adds	r7, #48	; 0x30
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
 8005530:	ffff0007 	.word	0xffff0007

08005534 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e19c      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b8a      	ldr	r3, [pc, #552]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b87      	ldr	r3, [pc, #540]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 020f 	bic.w	r2, r3, #15
 800555e:	4985      	ldr	r1, [pc, #532]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b83      	ldr	r3, [pc, #524]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e184      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d010      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	4b7b      	ldr	r3, [pc, #492]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005590:	429a      	cmp	r2, r3
 8005592:	d908      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005594:	4b78      	ldr	r3, [pc, #480]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	4975      	ldr	r1, [pc, #468]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	4b70      	ldr	r3, [pc, #448]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055be:	429a      	cmp	r2, r3
 80055c0:	d908      	bls.n	80055d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055c2:	4b6d      	ldr	r3, [pc, #436]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	496a      	ldr	r1, [pc, #424]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	4b64      	ldr	r3, [pc, #400]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d908      	bls.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055f0:	4b61      	ldr	r3, [pc, #388]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	495e      	ldr	r1, [pc, #376]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69da      	ldr	r2, [r3, #28]
 8005612:	4b59      	ldr	r3, [pc, #356]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800561a:	429a      	cmp	r2, r3
 800561c:	d908      	bls.n	8005630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800561e:	4b56      	ldr	r3, [pc, #344]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	4953      	ldr	r1, [pc, #332]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800562c:	4313      	orrs	r3, r2
 800562e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	4b4d      	ldr	r3, [pc, #308]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	429a      	cmp	r2, r3
 800564a:	d908      	bls.n	800565e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800564c:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f023 020f 	bic.w	r2, r3, #15
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4947      	ldr	r1, [pc, #284]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800565a:	4313      	orrs	r3, r2
 800565c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d055      	beq.n	8005716 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800566a:	4b43      	ldr	r3, [pc, #268]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4940      	ldr	r1, [pc, #256]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005678:	4313      	orrs	r3, r2
 800567a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d107      	bne.n	8005694 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005684:	4b3c      	ldr	r3, [pc, #240]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d121      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0f6      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d107      	bne.n	80056ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d115      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0ea      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d107      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0de      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0d6      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d4:	4b28      	ldr	r3, [pc, #160]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f023 0207 	bic.w	r2, r3, #7
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4925      	ldr	r1, [pc, #148]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e6:	f7fc fb3f 	bl	8001d68 <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ee:	f7fc fb3b 	bl	8001d68 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e0be      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005704:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	429a      	cmp	r2, r3
 8005714:	d1eb      	bne.n	80056ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	429a      	cmp	r2, r3
 8005730:	d208      	bcs.n	8005744 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f023 020f 	bic.w	r2, r3, #15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	490e      	ldr	r1, [pc, #56]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005740:	4313      	orrs	r3, r2
 8005742:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d214      	bcs.n	800577c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 020f 	bic.w	r2, r3, #15
 800575a:	4906      	ldr	r1, [pc, #24]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	4313      	orrs	r3, r2
 8005760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005762:	4b04      	ldr	r3, [pc, #16]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d005      	beq.n	800577c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e086      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
 8005774:	52002000 	.word	0x52002000
 8005778:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005794:	429a      	cmp	r2, r3
 8005796:	d208      	bcs.n	80057aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005798:	4b3c      	ldr	r3, [pc, #240]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4939      	ldr	r1, [pc, #228]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d010      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	4b34      	ldr	r3, [pc, #208]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d208      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	492e      	ldr	r1, [pc, #184]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	4b28      	ldr	r3, [pc, #160]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d208      	bcs.n	8005806 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	4922      	ldr	r1, [pc, #136]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005802:	4313      	orrs	r3, r2
 8005804:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d010      	beq.n	8005834 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69da      	ldr	r2, [r3, #28]
 8005816:	4b1d      	ldr	r3, [pc, #116]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800581e:	429a      	cmp	r2, r3
 8005820:	d208      	bcs.n	8005834 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005822:	4b1a      	ldr	r3, [pc, #104]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4917      	ldr	r1, [pc, #92]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005830:	4313      	orrs	r3, r2
 8005832:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005834:	f000 f834 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	4912      	ldr	r1, [pc, #72]	; (8005890 <HAL_RCC_ClockConfig+0x35c>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005852:	4b0e      	ldr	r3, [pc, #56]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <HAL_RCC_ClockConfig+0x35c>)
 800585c:	5cd3      	ldrb	r3, [r2, r3]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
 8005868:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x360>)
 800586a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800586c:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <HAL_RCC_ClockConfig+0x364>)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <HAL_RCC_ClockConfig+0x368>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fb ff04 	bl	8001684 <HAL_InitTick>
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	58024400 	.word	0x58024400
 8005890:	08016b8c 	.word	0x08016b8c
 8005894:	24000008 	.word	0x24000008
 8005898:	24000004 	.word	0x24000004
 800589c:	2400000c 	.word	0x2400000c

080058a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b089      	sub	sp, #36	; 0x24
 80058a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058a6:	4bb3      	ldr	r3, [pc, #716]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ae:	2b18      	cmp	r3, #24
 80058b0:	f200 8155 	bhi.w	8005b5e <HAL_RCC_GetSysClockFreq+0x2be>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	08005921 	.word	0x08005921
 80058c0:	08005b5f 	.word	0x08005b5f
 80058c4:	08005b5f 	.word	0x08005b5f
 80058c8:	08005b5f 	.word	0x08005b5f
 80058cc:	08005b5f 	.word	0x08005b5f
 80058d0:	08005b5f 	.word	0x08005b5f
 80058d4:	08005b5f 	.word	0x08005b5f
 80058d8:	08005b5f 	.word	0x08005b5f
 80058dc:	08005947 	.word	0x08005947
 80058e0:	08005b5f 	.word	0x08005b5f
 80058e4:	08005b5f 	.word	0x08005b5f
 80058e8:	08005b5f 	.word	0x08005b5f
 80058ec:	08005b5f 	.word	0x08005b5f
 80058f0:	08005b5f 	.word	0x08005b5f
 80058f4:	08005b5f 	.word	0x08005b5f
 80058f8:	08005b5f 	.word	0x08005b5f
 80058fc:	0800594d 	.word	0x0800594d
 8005900:	08005b5f 	.word	0x08005b5f
 8005904:	08005b5f 	.word	0x08005b5f
 8005908:	08005b5f 	.word	0x08005b5f
 800590c:	08005b5f 	.word	0x08005b5f
 8005910:	08005b5f 	.word	0x08005b5f
 8005914:	08005b5f 	.word	0x08005b5f
 8005918:	08005b5f 	.word	0x08005b5f
 800591c:	08005953 	.word	0x08005953
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005920:	4b94      	ldr	r3, [pc, #592]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800592c:	4b91      	ldr	r3, [pc, #580]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	08db      	lsrs	r3, r3, #3
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	4a90      	ldr	r2, [pc, #576]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
 800593c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800593e:	e111      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005940:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005942:	61bb      	str	r3, [r7, #24]
      break;
 8005944:	e10e      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005946:	4b8d      	ldr	r3, [pc, #564]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005948:	61bb      	str	r3, [r7, #24]
      break;
 800594a:	e10b      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800594c:	4b8c      	ldr	r3, [pc, #560]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800594e:	61bb      	str	r3, [r7, #24]
      break;
 8005950:	e108      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005952:	4b88      	ldr	r3, [pc, #544]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800595c:	4b85      	ldr	r3, [pc, #532]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005966:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005968:	4b82      	ldr	r3, [pc, #520]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005972:	4b80      	ldr	r3, [pc, #512]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	08db      	lsrs	r3, r3, #3
 8005978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80e1 	beq.w	8005b58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b02      	cmp	r3, #2
 800599a:	f000 8083 	beq.w	8005aa4 <HAL_RCC_GetSysClockFreq+0x204>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	f200 80a1 	bhi.w	8005ae8 <HAL_RCC_GetSysClockFreq+0x248>
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x114>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d056      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x1c0>
 80059b2:	e099      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b4:	4b6f      	ldr	r3, [pc, #444]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02d      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059c0:	4b6c      	ldr	r3, [pc, #432]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	4a6b      	ldr	r2, [pc, #428]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
 80059d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	4b62      	ldr	r3, [pc, #392]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a1a:	e087      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2e:	4b51      	ldr	r3, [pc, #324]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a5e:	e065      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b40      	ldr	r3, [pc, #256]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aa2:	e043      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ae6:	e021      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afa:	4b1e      	ldr	r3, [pc, #120]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b2c:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	0a5b      	lsrs	r3, r3, #9
 8005b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b36:	3301      	adds	r3, #1
 8005b38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	ee07 3a90 	vmov	s15, r3
 8005b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b50:	ee17 3a90 	vmov	r3, s15
 8005b54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b56:	e005      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
      break;
 8005b5c:	e002      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b60:	61bb      	str	r3, [r7, #24]
      break;
 8005b62:	bf00      	nop
  }

  return sysclockfreq;
 8005b64:	69bb      	ldr	r3, [r7, #24]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3724      	adds	r7, #36	; 0x24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	58024400 	.word	0x58024400
 8005b78:	03d09000 	.word	0x03d09000
 8005b7c:	003d0900 	.word	0x003d0900
 8005b80:	007a1200 	.word	0x007a1200
 8005b84:	46000000 	.word	0x46000000
 8005b88:	4c742400 	.word	0x4c742400
 8005b8c:	4a742400 	.word	0x4a742400
 8005b90:	4af42400 	.word	0x4af42400

08005b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005b9a:	f7ff fe81 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	0a1b      	lsrs	r3, r3, #8
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	490f      	ldr	r1, [pc, #60]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bac:	5ccb      	ldrb	r3, [r1, r3]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bc2:	5cd3      	ldrb	r3, [r2, r3]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	4a07      	ldr	r2, [pc, #28]	; (8005bec <HAL_RCC_GetHCLKFreq+0x58>)
 8005bd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bd2:	4a07      	ldr	r2, [pc, #28]	; (8005bf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bd8:	4b04      	ldr	r3, [pc, #16]	; (8005bec <HAL_RCC_GetHCLKFreq+0x58>)
 8005bda:	681b      	ldr	r3, [r3, #0]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	58024400 	.word	0x58024400
 8005be8:	08016b8c 	.word	0x08016b8c
 8005bec:	24000008 	.word	0x24000008
 8005bf0:	24000004 	.word	0x24000004

08005bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005bf8:	f7ff ffcc 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	08016b8c 	.word	0x08016b8c

08005c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005c24:	f7ff ffb6 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	58024400 	.word	0x58024400
 8005c48:	08016b8c 	.word	0x08016b8c

08005c4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	223f      	movs	r2, #63	; 0x3f
 8005c5a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0207 	and.w	r2, r3, #7
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8005c68:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8005c74:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8005c80:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_GetClockConfig+0x7c>)
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8005ca4:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_RCC_GetClockConfig+0x7c>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <HAL_RCC_GetClockConfig+0x80>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	601a      	str	r2, [r3, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	58024400 	.word	0x58024400
 8005ccc:	52002000 	.word	0x52002000

08005cd0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd4:	b0c8      	sub	sp, #288	; 0x120
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	ea54 0305 	orrs.w	r3, r4, r5
 8005cfa:	d049      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d06:	d02f      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d0c:	d828      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d12:	d01a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d18:	d822      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d22:	d007      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d24:	e01c      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d26:	4ba7      	ldr	r3, [pc, #668]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	4aa6      	ldr	r2, [pc, #664]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d32:	e01a      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d38:	3308      	adds	r3, #8
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 fc43 	bl	80075c8 <RCCEx_PLL2_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d48:	e00f      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4e:	3328      	adds	r3, #40	; 0x28
 8005d50:	2102      	movs	r1, #2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 fcea 	bl	800772c <RCCEx_PLL3_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d5e:	e004      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d66:	e000      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d72:	4b94      	ldr	r3, [pc, #592]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d80:	4a90      	ldr	r2, [pc, #576]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d82:	430b      	orrs	r3, r1
 8005d84:	6513      	str	r3, [r2, #80]	; 0x50
 8005d86:	e003      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005d9c:	f04f 0900 	mov.w	r9, #0
 8005da0:	ea58 0309 	orrs.w	r3, r8, r9
 8005da4:	d047      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d82a      	bhi.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005dcd 	.word	0x08005dcd
 8005dbc:	08005ddb 	.word	0x08005ddb
 8005dc0:	08005df1 	.word	0x08005df1
 8005dc4:	08005e0f 	.word	0x08005e0f
 8005dc8:	08005e0f 	.word	0x08005e0f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dcc:	4b7d      	ldr	r3, [pc, #500]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	4a7c      	ldr	r2, [pc, #496]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dd8:	e01a      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dde:	3308      	adds	r3, #8
 8005de0:	2100      	movs	r1, #0
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 fbf0 	bl	80075c8 <RCCEx_PLL2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dee:	e00f      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df4:	3328      	adds	r3, #40	; 0x28
 8005df6:	2100      	movs	r1, #0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fc97 	bl	800772c <RCCEx_PLL3_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e04:	e004      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e18:	4b6a      	ldr	r3, [pc, #424]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	f023 0107 	bic.w	r1, r3, #7
 8005e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e26:	4a67      	ldr	r2, [pc, #412]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6513      	str	r3, [r2, #80]	; 0x50
 8005e2c:	e003      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005e42:	f04f 0b00 	mov.w	fp, #0
 8005e46:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e4a:	d054      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005e56:	d036      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005e58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005e5c:	d82f      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e62:	d032      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e68:	d829      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e6c:	d02f      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e70:	d825      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e72:	2b80      	cmp	r3, #128	; 0x80
 8005e74:	d018      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d821      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d007      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005e82:	e01c      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e84:	4b4f      	ldr	r3, [pc, #316]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4a4e      	ldr	r2, [pc, #312]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005e90:	e01e      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	3308      	adds	r3, #8
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fb94 	bl	80075c8 <RCCEx_PLL2_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005ea6:	e013      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eac:	3328      	adds	r3, #40	; 0x28
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 fc3b 	bl	800772c <RCCEx_PLL3_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ec4:	e004      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005ec6:	bf00      	nop
 8005ec8:	e002      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005ed8:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005edc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee6:	4a37      	ldr	r2, [pc, #220]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	6513      	str	r3, [r2, #80]	; 0x50
 8005eec:	e003      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ef2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005f02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f06:	2300      	movs	r3, #0
 8005f08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005f10:	460b      	mov	r3, r1
 8005f12:	4313      	orrs	r3, r2
 8005f14:	d05c      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f20:	d03b      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005f22:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f26:	d834      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2c:	d037      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f32:	d82e      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005f34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f38:	d033      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f3a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f3e:	d828      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f44:	d01a      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4a:	d822      	bhi.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f54:	d007      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005f56:	e01c      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f58:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4a19      	ldr	r2, [pc, #100]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005f64:	e01e      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fb2a 	bl	80075c8 <RCCEx_PLL2_Config>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005f7a:	e013      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f80:	3328      	adds	r3, #40	; 0x28
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 fbd1 	bl	800772c <RCCEx_PLL3_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005f90:	e008      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f98:	e004      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10d      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fba:	4a02      	ldr	r2, [pc, #8]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6513      	str	r3, [r2, #80]	; 0x50
 8005fc0:	e006      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005fc2:	bf00      	nop
 8005fc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fe6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005fea:	460b      	mov	r3, r1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	d03a      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff6:	2b30      	cmp	r3, #48	; 0x30
 8005ff8:	d01f      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005ffa:	2b30      	cmp	r3, #48	; 0x30
 8005ffc:	d819      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d00c      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006002:	2b20      	cmp	r3, #32
 8006004:	d815      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d019      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800600a:	2b10      	cmp	r3, #16
 800600c:	d111      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600e:	4bae      	ldr	r3, [pc, #696]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4aad      	ldr	r2, [pc, #692]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800601a:	e011      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800601c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006020:	3308      	adds	r3, #8
 8006022:	2102      	movs	r1, #2
 8006024:	4618      	mov	r0, r3
 8006026:	f001 facf 	bl	80075c8 <RCCEx_PLL2_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006030:	e006      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006038:	e002      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800603e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006040:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006048:	4b9f      	ldr	r3, [pc, #636]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800604a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	4a9c      	ldr	r2, [pc, #624]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006058:	430b      	orrs	r3, r1
 800605a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800605c:	e003      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006062:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006072:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006076:	2300      	movs	r3, #0
 8006078:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800607c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006080:	460b      	mov	r3, r1
 8006082:	4313      	orrs	r3, r2
 8006084:	d051      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800608a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006090:	d035      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006096:	d82e      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006098:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800609c:	d031      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800609e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060a2:	d828      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80060a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a8:	d01a      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80060aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ae:	d822      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	d007      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80060ba:	e01c      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060bc:	4b82      	ldr	r3, [pc, #520]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	4a81      	ldr	r2, [pc, #516]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060c8:	e01c      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ce:	3308      	adds	r3, #8
 80060d0:	2100      	movs	r1, #0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fa78 	bl	80075c8 <RCCEx_PLL2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060de:	e011      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e4:	3328      	adds	r3, #40	; 0x28
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 fb1f 	bl	800772c <RCCEx_PLL3_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060f4:	e006      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80060fc:	e002      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80060fe:	bf00      	nop
 8006100:	e000      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006104:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800610c:	4b6e      	ldr	r3, [pc, #440]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800610e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006110:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	4a6b      	ldr	r2, [pc, #428]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800611c:	430b      	orrs	r3, r1
 800611e:	6513      	str	r3, [r2, #80]	; 0x50
 8006120:	e003      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006122:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006126:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800612a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006136:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800613a:	2300      	movs	r3, #0
 800613c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006140:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006144:	460b      	mov	r3, r1
 8006146:	4313      	orrs	r3, r2
 8006148:	d053      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800614a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800614e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006154:	d033      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800615a:	d82c      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800615c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006160:	d02f      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006162:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006166:	d826      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006168:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800616c:	d02b      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800616e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006172:	d820      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006178:	d012      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800617a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800617e:	d81a      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d022      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006188:	d115      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800618a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618e:	3308      	adds	r3, #8
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fa18 	bl	80075c8 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800619e:	e015      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a4:	3328      	adds	r3, #40	; 0x28
 80061a6:	2101      	movs	r1, #1
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 fabf 	bl	800772c <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061b4:	e00a      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061bc:	e006      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80061be:	bf00      	nop
 80061c0:	e004      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80061c2:	bf00      	nop
 80061c4:	e002      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80061ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061d4:	4b3c      	ldr	r3, [pc, #240]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80061dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061e2:	4a39      	ldr	r2, [pc, #228]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6513      	str	r3, [r2, #80]	; 0x50
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80061fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006202:	2300      	movs	r3, #0
 8006204:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006208:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800620c:	460b      	mov	r3, r1
 800620e:	4313      	orrs	r3, r2
 8006210:	d060      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006216:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800621a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800621e:	d039      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006220:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006224:	d832      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800622a:	d035      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800622c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006230:	d82c      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006236:	d031      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623c:	d826      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800623e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006242:	d02d      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006248:	d820      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800624a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800624e:	d012      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006254:	d81a      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d024      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800625a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800625e:	d115      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006264:	3308      	adds	r3, #8
 8006266:	2101      	movs	r1, #1
 8006268:	4618      	mov	r0, r3
 800626a:	f001 f9ad 	bl	80075c8 <RCCEx_PLL2_Config>
 800626e:	4603      	mov	r3, r0
 8006270:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006274:	e017      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627a:	3328      	adds	r3, #40	; 0x28
 800627c:	2101      	movs	r1, #1
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fa54 	bl	800772c <RCCEx_PLL3_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800628a:	e00c      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006292:	e008      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006294:	bf00      	nop
 8006296:	e006      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006298:	bf00      	nop
 800629a:	e004      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800629c:	bf00      	nop
 800629e:	e002      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80062a0:	bf00      	nop
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80062a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10e      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062ae:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80062b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062be:	4a02      	ldr	r2, [pc, #8]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6593      	str	r3, [r2, #88]	; 0x58
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80062e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062e4:	2300      	movs	r3, #0
 80062e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062ee:	460b      	mov	r3, r1
 80062f0:	4313      	orrs	r3, r2
 80062f2:	d037      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062fe:	d00e      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006304:	d816      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800630a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800630e:	d111      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4bc4      	ldr	r3, [pc, #784]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	4ac3      	ldr	r2, [pc, #780]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800631c:	e00f      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800631e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006322:	3308      	adds	r3, #8
 8006324:	2101      	movs	r1, #1
 8006326:	4618      	mov	r0, r3
 8006328:	f001 f94e 	bl	80075c8 <RCCEx_PLL2_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006332:	e004      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800633c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006346:	4bb7      	ldr	r3, [pc, #732]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800634e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006354:	4ab3      	ldr	r2, [pc, #716]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006356:	430b      	orrs	r3, r1
 8006358:	6513      	str	r3, [r2, #80]	; 0x50
 800635a:	e003      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006360:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006374:	2300      	movs	r3, #0
 8006376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800637a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800637e:	460b      	mov	r3, r1
 8006380:	4313      	orrs	r3, r2
 8006382:	d039      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800638a:	2b03      	cmp	r3, #3
 800638c:	d81c      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063d1 	.word	0x080063d1
 8006398:	080063a5 	.word	0x080063a5
 800639c:	080063b3 	.word	0x080063b3
 80063a0:	080063d1 	.word	0x080063d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a4:	4b9f      	ldr	r3, [pc, #636]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	4a9e      	ldr	r2, [pc, #632]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063b0:	e00f      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b6:	3308      	adds	r3, #8
 80063b8:	2102      	movs	r1, #2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 f904 	bl	80075c8 <RCCEx_PLL2_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063c6:	e004      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063ce:	e000      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80063d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063da:	4b92      	ldr	r3, [pc, #584]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063de:	f023 0103 	bic.w	r1, r3, #3
 80063e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e8:	4a8e      	ldr	r2, [pc, #568]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ea:	430b      	orrs	r3, r1
 80063ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063ee:	e003      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006408:	2300      	movs	r3, #0
 800640a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800640e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006412:	460b      	mov	r3, r1
 8006414:	4313      	orrs	r3, r2
 8006416:	f000 8099 	beq.w	800654c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800641a:	4b83      	ldr	r3, [pc, #524]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a82      	ldr	r2, [pc, #520]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006426:	f7fb fc9f 	bl	8001d68 <HAL_GetTick>
 800642a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800642e:	e00b      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006430:	f7fb fc9a 	bl	8001d68 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b64      	cmp	r3, #100	; 0x64
 800643e:	d903      	bls.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006446:	e005      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006448:	4b77      	ldr	r3, [pc, #476]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0ed      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006454:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006458:	2b00      	cmp	r3, #0
 800645a:	d173      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800645c:	4b71      	ldr	r3, [pc, #452]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800645e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006468:	4053      	eors	r3, r2
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d015      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006472:	4b6c      	ldr	r3, [pc, #432]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800647e:	4b69      	ldr	r3, [pc, #420]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	4a68      	ldr	r2, [pc, #416]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006488:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800648a:	4b66      	ldr	r3, [pc, #408]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	4a65      	ldr	r2, [pc, #404]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006494:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006496:	4a63      	ldr	r2, [pc, #396]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800649e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064aa:	d118      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fb fc5c 	bl	8001d68 <HAL_GetTick>
 80064b0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064b4:	e00d      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b6:	f7fb fc57 	bl	8001d68 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80064c0:	1ad2      	subs	r2, r2, r3
 80064c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d903      	bls.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80064d0:	e005      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064d2:	4b54      	ldr	r3, [pc, #336]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0eb      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80064de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d129      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f6:	d10e      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80064f8:	4b4a      	ldr	r3, [pc, #296]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006508:	091a      	lsrs	r2, r3, #4
 800650a:	4b48      	ldr	r3, [pc, #288]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800650c:	4013      	ands	r3, r2
 800650e:	4a45      	ldr	r2, [pc, #276]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006510:	430b      	orrs	r3, r1
 8006512:	6113      	str	r3, [r2, #16]
 8006514:	e005      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006516:	4b43      	ldr	r3, [pc, #268]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	4a42      	ldr	r2, [pc, #264]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800651c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006520:	6113      	str	r3, [r2, #16]
 8006522:	4b40      	ldr	r3, [pc, #256]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006524:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800652a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800652e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006532:	4a3c      	ldr	r2, [pc, #240]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006534:	430b      	orrs	r3, r1
 8006536:	6713      	str	r3, [r2, #112]	; 0x70
 8006538:	e008      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800653a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800653e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006548:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800654c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f002 0301 	and.w	r3, r2, #1
 8006558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006562:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	f000 8090 	beq.w	800668e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800656e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006576:	2b28      	cmp	r3, #40	; 0x28
 8006578:	d870      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	08006665 	.word	0x08006665
 8006584:	0800665d 	.word	0x0800665d
 8006588:	0800665d 	.word	0x0800665d
 800658c:	0800665d 	.word	0x0800665d
 8006590:	0800665d 	.word	0x0800665d
 8006594:	0800665d 	.word	0x0800665d
 8006598:	0800665d 	.word	0x0800665d
 800659c:	0800665d 	.word	0x0800665d
 80065a0:	08006631 	.word	0x08006631
 80065a4:	0800665d 	.word	0x0800665d
 80065a8:	0800665d 	.word	0x0800665d
 80065ac:	0800665d 	.word	0x0800665d
 80065b0:	0800665d 	.word	0x0800665d
 80065b4:	0800665d 	.word	0x0800665d
 80065b8:	0800665d 	.word	0x0800665d
 80065bc:	0800665d 	.word	0x0800665d
 80065c0:	08006647 	.word	0x08006647
 80065c4:	0800665d 	.word	0x0800665d
 80065c8:	0800665d 	.word	0x0800665d
 80065cc:	0800665d 	.word	0x0800665d
 80065d0:	0800665d 	.word	0x0800665d
 80065d4:	0800665d 	.word	0x0800665d
 80065d8:	0800665d 	.word	0x0800665d
 80065dc:	0800665d 	.word	0x0800665d
 80065e0:	08006665 	.word	0x08006665
 80065e4:	0800665d 	.word	0x0800665d
 80065e8:	0800665d 	.word	0x0800665d
 80065ec:	0800665d 	.word	0x0800665d
 80065f0:	0800665d 	.word	0x0800665d
 80065f4:	0800665d 	.word	0x0800665d
 80065f8:	0800665d 	.word	0x0800665d
 80065fc:	0800665d 	.word	0x0800665d
 8006600:	08006665 	.word	0x08006665
 8006604:	0800665d 	.word	0x0800665d
 8006608:	0800665d 	.word	0x0800665d
 800660c:	0800665d 	.word	0x0800665d
 8006610:	0800665d 	.word	0x0800665d
 8006614:	0800665d 	.word	0x0800665d
 8006618:	0800665d 	.word	0x0800665d
 800661c:	0800665d 	.word	0x0800665d
 8006620:	08006665 	.word	0x08006665
 8006624:	58024400 	.word	0x58024400
 8006628:	58024800 	.word	0x58024800
 800662c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006634:	3308      	adds	r3, #8
 8006636:	2101      	movs	r1, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f000 ffc5 	bl	80075c8 <RCCEx_PLL2_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006644:	e00f      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664a:	3328      	adds	r3, #40	; 0x28
 800664c:	2101      	movs	r1, #1
 800664e:	4618      	mov	r0, r3
 8006650:	f001 f86c 	bl	800772c <RCCEx_PLL3_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800665a:	e004      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006662:	e000      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006666:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800666e:	4bc0      	ldr	r3, [pc, #768]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800667a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667e:	4abc      	ldr	r2, [pc, #752]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006680:	430b      	orrs	r3, r1
 8006682:	6553      	str	r3, [r2, #84]	; 0x54
 8006684:	e003      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006686:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800668a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800668e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f002 0302 	and.w	r3, r2, #2
 800669a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800669e:	2300      	movs	r3, #0
 80066a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066a4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80066a8:	460b      	mov	r3, r1
 80066aa:	4313      	orrs	r3, r2
 80066ac:	d043      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80066ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b6:	2b05      	cmp	r3, #5
 80066b8:	d824      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	0800670d 	.word	0x0800670d
 80066c4:	080066d9 	.word	0x080066d9
 80066c8:	080066ef 	.word	0x080066ef
 80066cc:	0800670d 	.word	0x0800670d
 80066d0:	0800670d 	.word	0x0800670d
 80066d4:	0800670d 	.word	0x0800670d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066dc:	3308      	adds	r3, #8
 80066de:	2101      	movs	r1, #1
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 ff71 	bl	80075c8 <RCCEx_PLL2_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066ec:	e00f      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f2:	3328      	adds	r3, #40	; 0x28
 80066f4:	2101      	movs	r1, #1
 80066f6:	4618      	mov	r0, r3
 80066f8:	f001 f818 	bl	800772c <RCCEx_PLL3_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006702:	e004      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800670a:	e000      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800670c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006716:	4b96      	ldr	r3, [pc, #600]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f023 0107 	bic.w	r1, r3, #7
 800671e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006726:	4a92      	ldr	r2, [pc, #584]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006728:	430b      	orrs	r3, r1
 800672a:	6553      	str	r3, [r2, #84]	; 0x54
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006732:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f002 0304 	and.w	r3, r2, #4
 8006742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006746:	2300      	movs	r3, #0
 8006748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800674c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d043      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800675a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800675e:	2b05      	cmp	r3, #5
 8006760:	d824      	bhi.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	080067b5 	.word	0x080067b5
 800676c:	08006781 	.word	0x08006781
 8006770:	08006797 	.word	0x08006797
 8006774:	080067b5 	.word	0x080067b5
 8006778:	080067b5 	.word	0x080067b5
 800677c:	080067b5 	.word	0x080067b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006784:	3308      	adds	r3, #8
 8006786:	2101      	movs	r1, #1
 8006788:	4618      	mov	r0, r3
 800678a:	f000 ff1d 	bl	80075c8 <RCCEx_PLL2_Config>
 800678e:	4603      	mov	r3, r0
 8006790:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006794:	e00f      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679a:	3328      	adds	r3, #40	; 0x28
 800679c:	2101      	movs	r1, #1
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 ffc4 	bl	800772c <RCCEx_PLL3_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067aa:	e004      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80067b2:	e000      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80067b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067be:	4b6c      	ldr	r3, [pc, #432]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c2:	f023 0107 	bic.w	r1, r3, #7
 80067c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067ce:	4a68      	ldr	r2, [pc, #416]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6593      	str	r3, [r2, #88]	; 0x58
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f002 0320 	and.w	r3, r2, #32
 80067ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d055      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800680a:	d033      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800680c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006810:	d82c      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006816:	d02f      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681c:	d826      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800681e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006822:	d02b      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006824:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006828:	d820      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800682a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682e:	d012      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006834:	d81a      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d022      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800683a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800683e:	d115      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006844:	3308      	adds	r3, #8
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f000 febd 	bl	80075c8 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006854:	e015      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685a:	3328      	adds	r3, #40	; 0x28
 800685c:	2102      	movs	r1, #2
 800685e:	4618      	mov	r0, r3
 8006860:	f000 ff64 	bl	800772c <RCCEx_PLL3_Config>
 8006864:	4603      	mov	r3, r0
 8006866:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800686a:	e00a      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006872:	e006      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006874:	bf00      	nop
 8006876:	e004      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006878:	bf00      	nop
 800687a:	e002      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800687c:	bf00      	nop
 800687e:	e000      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006882:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800688a:	4b39      	ldr	r3, [pc, #228]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800689a:	4a35      	ldr	r2, [pc, #212]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6553      	str	r3, [r2, #84]	; 0x54
 80068a0:	e003      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80068aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80068b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068ba:	2300      	movs	r3, #0
 80068bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d058      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068d6:	d033      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80068d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068dc:	d82c      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d02f      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e8:	d826      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80068ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ee:	d02b      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80068f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068f4:	d820      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80068f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068fa:	d012      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80068fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006900:	d81a      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d022      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d115      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800690c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006910:	3308      	adds	r3, #8
 8006912:	2100      	movs	r1, #0
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fe57 	bl	80075c8 <RCCEx_PLL2_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006920:	e015      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006926:	3328      	adds	r3, #40	; 0x28
 8006928:	2102      	movs	r1, #2
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fefe 	bl	800772c <RCCEx_PLL3_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006936:	e00a      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800693e:	e006      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006940:	bf00      	nop
 8006942:	e004      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006944:	bf00      	nop
 8006946:	e002      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800694c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10e      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800695e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006966:	4a02      	ldr	r2, [pc, #8]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006968:	430b      	orrs	r3, r1
 800696a:	6593      	str	r3, [r2, #88]	; 0x58
 800696c:	e006      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800696e:	bf00      	nop
 8006970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006974:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006978:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800697c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006992:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006996:	460b      	mov	r3, r1
 8006998:	4313      	orrs	r3, r2
 800699a:	d055      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800699c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069a8:	d033      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80069aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069ae:	d82c      	bhi.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80069b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b4:	d02f      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80069b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ba:	d826      	bhi.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80069bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069c0:	d02b      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80069c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069c6:	d820      	bhi.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80069c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069cc:	d012      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80069ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d2:	d81a      	bhi.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d022      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80069d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069dc:	d115      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e2:	3308      	adds	r3, #8
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fdee 	bl	80075c8 <RCCEx_PLL2_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069f2:	e015      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f8:	3328      	adds	r3, #40	; 0x28
 80069fa:	2102      	movs	r1, #2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fe95 	bl	800772c <RCCEx_PLL3_Config>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a08:	e00a      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006a10:	e006      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006a12:	bf00      	nop
 8006a14:	e004      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006a16:	bf00      	nop
 8006a18:	e002      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006a1a:	bf00      	nop
 8006a1c:	e000      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10b      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a28:	4ba1      	ldr	r3, [pc, #644]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a38:	4a9d      	ldr	r2, [pc, #628]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a3e:	e003      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f002 0308 	and.w	r3, r2, #8
 8006a54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006a62:	460b      	mov	r3, r1
 8006a64:	4313      	orrs	r3, r2
 8006a66:	d01e      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a74:	d10c      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a7a:	3328      	adds	r3, #40	; 0x28
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fe54 	bl	800772c <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a90:	4b87      	ldr	r3, [pc, #540]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa0:	4a83      	ldr	r2, [pc, #524]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f002 0310 	and.w	r3, r2, #16
 8006ab2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006abc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d01e      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad2:	d10c      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad8:	3328      	adds	r3, #40	; 0x28
 8006ada:	2102      	movs	r1, #2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fe25 	bl	800772c <RCCEx_PLL3_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006aee:	4b70      	ldr	r3, [pc, #448]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006afa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006afe:	4a6c      	ldr	r2, [pc, #432]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b00:	430b      	orrs	r3, r1
 8006b02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b14:	2300      	movs	r3, #0
 8006b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4313      	orrs	r3, r2
 8006b22:	d03e      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b30:	d022      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b36:	d81b      	bhi.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b40:	d00b      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006b42:	e015      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b48:	3308      	adds	r3, #8
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fd3b 	bl	80075c8 <RCCEx_PLL2_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b58:	e00f      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b5e:	3328      	adds	r3, #40	; 0x28
 8006b60:	2102      	movs	r1, #2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fde2 	bl	800772c <RCCEx_PLL3_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b6e:	e004      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b76:	e000      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10b      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b82:	4b4b      	ldr	r3, [pc, #300]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b92:	4a47      	ldr	r2, [pc, #284]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b94:	430b      	orrs	r3, r1
 8006b96:	6593      	str	r3, [r2, #88]	; 0x58
 8006b98:	e003      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006bae:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bb4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	d03b      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bca:	d01f      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006bcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bd0:	d818      	bhi.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd6:	d003      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bdc:	d007      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006bde:	e011      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be0:	4b33      	ldr	r3, [pc, #204]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	4a32      	ldr	r2, [pc, #200]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bec:	e00f      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf2:	3328      	adds	r3, #40	; 0x28
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fd98 	bl	800772c <RCCEx_PLL3_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c02:	e004      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c0a:	e000      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	4a22      	ldr	r2, [pc, #136]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	6553      	str	r3, [r2, #84]	; 0x54
 8006c2c:	e003      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006c42:	673b      	str	r3, [r7, #112]	; 0x70
 8006c44:	2300      	movs	r3, #0
 8006c46:	677b      	str	r3, [r7, #116]	; 0x74
 8006c48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d034      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d007      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006c62:	e011      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4a11      	ldr	r2, [pc, #68]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c70:	e00e      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c76:	3308      	adds	r3, #8
 8006c78:	2102      	movs	r1, #2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fca4 	bl	80075c8 <RCCEx_PLL2_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10d      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca6:	4a02      	ldr	r2, [pc, #8]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cac:	e006      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006cae:	bf00      	nop
 8006cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006cc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cca:	2300      	movs	r3, #0
 8006ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d00c      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cdc:	3328      	adds	r3, #40	; 0x28
 8006cde:	2102      	movs	r1, #2
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fd23 	bl	800772c <RCCEx_PLL3_Config>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8006d00:	2300      	movs	r3, #0
 8006d02:	667b      	str	r3, [r7, #100]	; 0x64
 8006d04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	d038      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d1a:	d018      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d20:	d811      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d26:	d014      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d2c:	d80b      	bhi.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d011      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d36:	d106      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d38:	4bc3      	ldr	r3, [pc, #780]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	4ac2      	ldr	r2, [pc, #776]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d44:	e008      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d4c:	e004      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006d4e:	bf00      	nop
 8006d50:	e002      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006d52:	bf00      	nop
 8006d54:	e000      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10b      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d60:	4bb9      	ldr	r3, [pc, #740]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d70:	4ab5      	ldr	r2, [pc, #724]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d72:	430b      	orrs	r3, r1
 8006d74:	6553      	str	r3, [r2, #84]	; 0x54
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006d8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d8e:	2300      	movs	r3, #0
 8006d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006d96:	460b      	mov	r3, r1
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d9c:	4baa      	ldr	r3, [pc, #680]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006daa:	4aa7      	ldr	r2, [pc, #668]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006dac:	430b      	orrs	r3, r1
 8006dae:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8006dc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006dcc:	4b9e      	ldr	r3, [pc, #632]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	4a9b      	ldr	r2, [pc, #620]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006dec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dee:	2300      	movs	r3, #0
 8006df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006df6:	460b      	mov	r3, r1
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006dfc:	4b92      	ldr	r3, [pc, #584]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e00:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0a:	4a8f      	ldr	r2, [pc, #572]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e1e:	2300      	movs	r3, #0
 8006e20:	647b      	str	r3, [r7, #68]	; 0x44
 8006e22:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006e26:	460b      	mov	r3, r1
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	d00e      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e2c:	4b86      	ldr	r3, [pc, #536]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	4a85      	ldr	r2, [pc, #532]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e36:	6113      	str	r3, [r2, #16]
 8006e38:	4b83      	ldr	r3, [pc, #524]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e3a:	6919      	ldr	r1, [r3, #16]
 8006e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e44:	4a80      	ldr	r2, [pc, #512]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e46:	430b      	orrs	r3, r1
 8006e48:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e58:	2300      	movs	r3, #0
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006e60:	460b      	mov	r3, r1
 8006e62:	4313      	orrs	r3, r2
 8006e64:	d009      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e66:	4b78      	ldr	r3, [pc, #480]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e74:	4a74      	ldr	r2, [pc, #464]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e76:	430b      	orrs	r3, r1
 8006e78:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30
 8006e88:	2300      	movs	r3, #0
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006e90:	460b      	mov	r3, r1
 8006e92:	4313      	orrs	r3, r2
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e96:	4b6c      	ldr	r3, [pc, #432]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea6:	4a68      	ldr	r2, [pc, #416]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ebe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	d011      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ecc:	3308      	adds	r3, #8
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fb79 	bl	80075c8 <RCCEx_PLL2_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006edc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ee8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	6239      	str	r1, [r7, #32]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
 8006efe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	d011      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	2101      	movs	r1, #1
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fb59 	bl	80075c8 <RCCEx_PLL2_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	2100      	movs	r1, #0
 8006f36:	61b9      	str	r1, [r7, #24]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	61fb      	str	r3, [r7, #28]
 8006f3e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f42:	460b      	mov	r3, r1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	d011      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	2102      	movs	r1, #2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fb39 	bl	80075c8 <RCCEx_PLL2_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	2100      	movs	r1, #0
 8006f76:	6139      	str	r1, [r7, #16]
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f82:	460b      	mov	r3, r1
 8006f84:	4313      	orrs	r3, r2
 8006f86:	d011      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f8c:	3328      	adds	r3, #40	; 0x28
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fbcb 	bl	800772c <RCCEx_PLL3_Config>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fa8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	f003 0310 	and.w	r3, r3, #16
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	d011      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fcc:	3328      	adds	r3, #40	; 0x28
 8006fce:	2101      	movs	r1, #1
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fbab 	bl	800772c <RCCEx_PLL3_Config>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fe8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	6039      	str	r1, [r7, #0]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007002:	460b      	mov	r3, r1
 8007004:	4313      	orrs	r3, r2
 8007006:	d011      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800700c:	3328      	adds	r3, #40	; 0x28
 800700e:	2102      	movs	r1, #2
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fb8b 	bl	800772c <RCCEx_PLL3_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800701c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007024:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007028:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800702c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e000      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
}
 800703a:	4618      	mov	r0, r3
 800703c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007040:	46bd      	mov	sp, r7
 8007042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007046:	bf00      	nop
 8007048:	58024400 	.word	0x58024400

0800704c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007050:	f7fe fda0 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8007054:	4602      	mov	r2, r0
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	091b      	lsrs	r3, r3, #4
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	4904      	ldr	r1, [pc, #16]	; (8007074 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007062:	5ccb      	ldrb	r3, [r1, r3]
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800706c:	4618      	mov	r0, r3
 800706e:	bd80      	pop	{r7, pc}
 8007070:	58024400 	.word	0x58024400
 8007074:	08016b8c 	.word	0x08016b8c

08007078 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007078:	b480      	push	{r7}
 800707a:	b089      	sub	sp, #36	; 0x24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007080:	4ba1      	ldr	r3, [pc, #644]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800708a:	4b9f      	ldr	r3, [pc, #636]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	0b1b      	lsrs	r3, r3, #12
 8007090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007094:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007096:	4b9c      	ldr	r3, [pc, #624]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80070a2:	4b99      	ldr	r3, [pc, #612]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	08db      	lsrs	r3, r3, #3
 80070a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8111 	beq.w	80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	f000 8083 	beq.w	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	f200 80a1 	bhi.w	8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d056      	beq.n	8007190 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070e2:	e099      	b.n	8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e4:	4b88      	ldr	r3, [pc, #544]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d02d      	beq.n	800714c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070f0:	4b85      	ldr	r3, [pc, #532]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	08db      	lsrs	r3, r3, #3
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	4a84      	ldr	r2, [pc, #528]	; (800730c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	ee07 3a90 	vmov	s15, r3
 8007108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711a:	4b7b      	ldr	r3, [pc, #492]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712a:	ed97 6a03 	vldr	s12, [r7, #12]
 800712e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007146:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800714a:	e087      	b.n	800725c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007156:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800715a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715e:	4b6a      	ldr	r3, [pc, #424]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007172:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800718e:	e065      	b.n	800725c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b59      	ldr	r3, [pc, #356]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d2:	e043      	b.n	800725c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800731c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b48      	ldr	r3, [pc, #288]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007216:	e021      	b.n	800725c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b37      	ldr	r3, [pc, #220]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800725c:	4b2a      	ldr	r3, [pc, #168]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	0a5b      	lsrs	r3, r3, #9
 8007262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007276:	edd7 6a07 	vldr	s13, [r7, #28]
 800727a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800727e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007282:	ee17 2a90 	vmov	r2, s15
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800728a:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	0c1b      	lsrs	r3, r3, #16
 8007290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007294:	ee07 3a90 	vmov	s15, r3
 8007298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b0:	ee17 2a90 	vmov	r2, s15
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072b8:	4b13      	ldr	r3, [pc, #76]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	0e1b      	lsrs	r3, r3, #24
 80072be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072de:	ee17 2a90 	vmov	r2, s15
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072e6:	e008      	b.n	80072fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	609a      	str	r2, [r3, #8]
}
 80072fa:	bf00      	nop
 80072fc:	3724      	adds	r7, #36	; 0x24
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	58024400 	.word	0x58024400
 800730c:	03d09000 	.word	0x03d09000
 8007310:	46000000 	.word	0x46000000
 8007314:	4c742400 	.word	0x4c742400
 8007318:	4a742400 	.word	0x4a742400
 800731c:	4af42400 	.word	0x4af42400

08007320 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	; 0x24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007328:	4ba1      	ldr	r3, [pc, #644]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007332:	4b9f      	ldr	r3, [pc, #636]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	0d1b      	lsrs	r3, r3, #20
 8007338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800733c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800733e:	4b9c      	ldr	r3, [pc, #624]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800734a:	4b99      	ldr	r3, [pc, #612]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	08db      	lsrs	r3, r3, #3
 8007350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8111 	beq.w	8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b02      	cmp	r3, #2
 8007372:	f000 8083 	beq.w	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b02      	cmp	r3, #2
 800737a:	f200 80a1 	bhi.w	80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d056      	beq.n	8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800738a:	e099      	b.n	80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800738c:	4b88      	ldr	r3, [pc, #544]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d02d      	beq.n	80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007398:	4b85      	ldr	r3, [pc, #532]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	08db      	lsrs	r3, r3, #3
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	4a84      	ldr	r2, [pc, #528]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
 80073a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	ee07 3a90 	vmov	s15, r3
 80073b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c2:	4b7b      	ldr	r3, [pc, #492]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073f2:	e087      	b.n	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007406:	4b6a      	ldr	r3, [pc, #424]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	ed97 6a03 	vldr	s12, [r7, #12]
 800741a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800741e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007436:	e065      	b.n	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744a:	4b59      	ldr	r3, [pc, #356]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745a:	ed97 6a03 	vldr	s12, [r7, #12]
 800745e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800747a:	e043      	b.n	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b48      	ldr	r3, [pc, #288]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074be:	e021      	b.n	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b37      	ldr	r3, [pc, #220]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007502:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007504:	4b2a      	ldr	r3, [pc, #168]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	0a5b      	lsrs	r3, r3, #9
 800750a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800751a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752a:	ee17 2a90 	vmov	r2, s15
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007532:	4b1f      	ldr	r3, [pc, #124]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753c:	ee07 3a90 	vmov	s15, r3
 8007540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800754c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007558:	ee17 2a90 	vmov	r2, s15
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007560:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	0e1b      	lsrs	r3, r3, #24
 8007566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800757a:	edd7 6a07 	vldr	s13, [r7, #28]
 800757e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007586:	ee17 2a90 	vmov	r2, s15
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800758e:	e008      	b.n	80075a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	609a      	str	r2, [r3, #8]
}
 80075a2:	bf00      	nop
 80075a4:	3724      	adds	r7, #36	; 0x24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	58024400 	.word	0x58024400
 80075b4:	03d09000 	.word	0x03d09000
 80075b8:	46000000 	.word	0x46000000
 80075bc:	4c742400 	.word	0x4c742400
 80075c0:	4a742400 	.word	0x4a742400
 80075c4:	4af42400 	.word	0x4af42400

080075c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075d6:	4b53      	ldr	r3, [pc, #332]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d101      	bne.n	80075e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e099      	b.n	800771a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075e6:	4b4f      	ldr	r3, [pc, #316]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a4e      	ldr	r2, [pc, #312]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80075ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f2:	f7fa fbb9 	bl	8001d68 <HAL_GetTick>
 80075f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075f8:	e008      	b.n	800760c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075fa:	f7fa fbb5 	bl	8001d68 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d901      	bls.n	800760c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e086      	b.n	800771a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800760c:	4b45      	ldr	r3, [pc, #276]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1f0      	bne.n	80075fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007618:	4b42      	ldr	r3, [pc, #264]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	031b      	lsls	r3, r3, #12
 8007626:	493f      	ldr	r1, [pc, #252]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	628b      	str	r3, [r1, #40]	; 0x28
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	3b01      	subs	r3, #1
 800763c:	025b      	lsls	r3, r3, #9
 800763e:	b29b      	uxth	r3, r3
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	3b01      	subs	r3, #1
 8007648:	041b      	lsls	r3, r3, #16
 800764a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	3b01      	subs	r3, #1
 8007656:	061b      	lsls	r3, r3, #24
 8007658:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800765c:	4931      	ldr	r1, [pc, #196]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 800765e:	4313      	orrs	r3, r2
 8007660:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007662:	4b30      	ldr	r3, [pc, #192]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	492d      	ldr	r1, [pc, #180]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007674:	4b2b      	ldr	r3, [pc, #172]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	f023 0220 	bic.w	r2, r3, #32
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	4928      	ldr	r1, [pc, #160]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 8007682:	4313      	orrs	r3, r2
 8007684:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007686:	4b27      	ldr	r3, [pc, #156]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	4a26      	ldr	r2, [pc, #152]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 800768c:	f023 0310 	bic.w	r3, r3, #16
 8007690:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007692:	4b24      	ldr	r3, [pc, #144]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 8007694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007696:	4b24      	ldr	r3, [pc, #144]	; (8007728 <RCCEx_PLL2_Config+0x160>)
 8007698:	4013      	ands	r3, r2
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	69d2      	ldr	r2, [r2, #28]
 800769e:	00d2      	lsls	r2, r2, #3
 80076a0:	4920      	ldr	r1, [pc, #128]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076a6:	4b1f      	ldr	r3, [pc, #124]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	4a1e      	ldr	r2, [pc, #120]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076ac:	f043 0310 	orr.w	r3, r3, #16
 80076b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076b8:	4b1a      	ldr	r3, [pc, #104]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	4a19      	ldr	r2, [pc, #100]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076c4:	e00f      	b.n	80076e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d106      	bne.n	80076da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076cc:	4b15      	ldr	r3, [pc, #84]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	4a14      	ldr	r2, [pc, #80]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076d8:	e005      	b.n	80076e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076da:	4b12      	ldr	r3, [pc, #72]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	4a11      	ldr	r2, [pc, #68]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a0e      	ldr	r2, [pc, #56]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 80076ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f2:	f7fa fb39 	bl	8001d68 <HAL_GetTick>
 80076f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076f8:	e008      	b.n	800770c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076fa:	f7fa fb35 	bl	8001d68 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e006      	b.n	800771a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <RCCEx_PLL2_Config+0x15c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0f0      	beq.n	80076fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	58024400 	.word	0x58024400
 8007728:	ffff0007 	.word	0xffff0007

0800772c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800773a:	4b53      	ldr	r3, [pc, #332]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d101      	bne.n	800774a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e099      	b.n	800787e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800774a:	4b4f      	ldr	r3, [pc, #316]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a4e      	ldr	r2, [pc, #312]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007756:	f7fa fb07 	bl	8001d68 <HAL_GetTick>
 800775a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800775c:	e008      	b.n	8007770 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800775e:	f7fa fb03 	bl	8001d68 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d901      	bls.n	8007770 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e086      	b.n	800787e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007770:	4b45      	ldr	r3, [pc, #276]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f0      	bne.n	800775e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800777c:	4b42      	ldr	r3, [pc, #264]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	051b      	lsls	r3, r3, #20
 800778a:	493f      	ldr	r1, [pc, #252]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 800778c:	4313      	orrs	r3, r2
 800778e:	628b      	str	r3, [r1, #40]	; 0x28
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	3b01      	subs	r3, #1
 8007796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	3b01      	subs	r3, #1
 80077a0:	025b      	lsls	r3, r3, #9
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	041b      	lsls	r3, r3, #16
 80077ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	061b      	lsls	r3, r3, #24
 80077bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077c0:	4931      	ldr	r1, [pc, #196]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077c6:	4b30      	ldr	r3, [pc, #192]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	492d      	ldr	r1, [pc, #180]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077d8:	4b2b      	ldr	r3, [pc, #172]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	4928      	ldr	r1, [pc, #160]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077ea:	4b27      	ldr	r3, [pc, #156]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	4a26      	ldr	r2, [pc, #152]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077f6:	4b24      	ldr	r3, [pc, #144]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 80077f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <RCCEx_PLL3_Config+0x160>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	69d2      	ldr	r2, [r2, #28]
 8007802:	00d2      	lsls	r2, r2, #3
 8007804:	4920      	ldr	r1, [pc, #128]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007806:	4313      	orrs	r3, r2
 8007808:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800780a:	4b1f      	ldr	r3, [pc, #124]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d106      	bne.n	800782a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800781c:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	4a19      	ldr	r2, [pc, #100]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007828:	e00f      	b.n	800784a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d106      	bne.n	800783e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007830:	4b15      	ldr	r3, [pc, #84]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	4a14      	ldr	r2, [pc, #80]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007836:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800783a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800783c:	e005      	b.n	800784a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	4a11      	ldr	r2, [pc, #68]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007848:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a0e      	ldr	r2, [pc, #56]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007856:	f7fa fa87 	bl	8001d68 <HAL_GetTick>
 800785a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800785c:	e008      	b.n	8007870 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800785e:	f7fa fa83 	bl	8001d68 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d901      	bls.n	8007870 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e006      	b.n	800787e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <RCCEx_PLL3_Config+0x15c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0f0      	beq.n	800785e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	58024400 	.word	0x58024400
 800788c:	ffff0007 	.word	0xffff0007

08007890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e049      	b.n	8007936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f841 	bl	800793e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f000 fa00 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
	...

08007954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b01      	cmp	r3, #1
 8007966:	d001      	beq.n	800796c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e054      	b.n	8007a16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a26      	ldr	r2, [pc, #152]	; (8007a24 <HAL_TIM_Base_Start_IT+0xd0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d022      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007996:	d01d      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <HAL_TIM_Base_Start_IT+0xd4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d018      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a21      	ldr	r2, [pc, #132]	; (8007a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d013      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00e      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <HAL_TIM_Base_Start_IT+0xe0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d009      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <HAL_TIM_Base_Start_IT+0xe4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x80>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1b      	ldr	r2, [pc, #108]	; (8007a3c <HAL_TIM_Base_Start_IT+0xe8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d115      	bne.n	8007a00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	4b19      	ldr	r3, [pc, #100]	; (8007a40 <HAL_TIM_Base_Start_IT+0xec>)
 80079dc:	4013      	ands	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b06      	cmp	r3, #6
 80079e4:	d015      	beq.n	8007a12 <HAL_TIM_Base_Start_IT+0xbe>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ec:	d011      	beq.n	8007a12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0201 	orr.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fe:	e008      	b.n	8007a12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	e000      	b.n	8007a14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40010000 	.word	0x40010000
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40010400 	.word	0x40010400
 8007a38:	40001800 	.word	0x40001800
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	00010007 	.word	0x00010007

08007a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d122      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0202 	mvn.w	r2, #2
 8007a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f905 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f8f7 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f908 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d122      	bne.n	8007af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d11b      	bne.n	8007af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0204 	mvn.w	r2, #4
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f8db 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f8cd 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f8de 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d122      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d11b      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0208 	mvn.w	r2, #8
 8007b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8b1 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 8007b34:	e005      	b.n	8007b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f8a3 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f8b4 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d122      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0310 	and.w	r3, r3, #16
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	d11b      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0210 	mvn.w	r2, #16
 8007b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2208      	movs	r2, #8
 8007b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f887 	bl	8007c96 <HAL_TIM_IC_CaptureCallback>
 8007b88:	e005      	b.n	8007b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f879 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f88a 	bl	8007caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d10e      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d107      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0201 	mvn.w	r2, #1
 8007bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7f9 fbc2 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd2:	2b80      	cmp	r3, #128	; 0x80
 8007bd4:	d10e      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be0:	2b80      	cmp	r3, #128	; 0x80
 8007be2:	d107      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f914 	bl	8007e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c02:	d10e      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b80      	cmp	r3, #128	; 0x80
 8007c10:	d107      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f907 	bl	8007e30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2c:	2b40      	cmp	r3, #64	; 0x40
 8007c2e:	d10e      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d107      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f838 	bl	8007cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d10e      	bne.n	8007c7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d107      	bne.n	8007c7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f06f 0220 	mvn.w	r2, #32
 8007c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f8c7 	bl	8007e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c7a:	bf00      	nop
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a40      	ldr	r2, [pc, #256]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf2:	d00f      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a3d      	ldr	r2, [pc, #244]	; (8007dec <TIM_Base_SetConfig+0x118>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00b      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a3c      	ldr	r2, [pc, #240]	; (8007df0 <TIM_Base_SetConfig+0x11c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a3b      	ldr	r2, [pc, #236]	; (8007df4 <TIM_Base_SetConfig+0x120>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a3a      	ldr	r2, [pc, #232]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d108      	bne.n	8007d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a2f      	ldr	r2, [pc, #188]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d01f      	beq.n	8007d6e <TIM_Base_SetConfig+0x9a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d34:	d01b      	beq.n	8007d6e <TIM_Base_SetConfig+0x9a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a2c      	ldr	r2, [pc, #176]	; (8007dec <TIM_Base_SetConfig+0x118>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d017      	beq.n	8007d6e <TIM_Base_SetConfig+0x9a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a2b      	ldr	r2, [pc, #172]	; (8007df0 <TIM_Base_SetConfig+0x11c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d013      	beq.n	8007d6e <TIM_Base_SetConfig+0x9a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <TIM_Base_SetConfig+0x120>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00f      	beq.n	8007d6e <TIM_Base_SetConfig+0x9a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a29      	ldr	r2, [pc, #164]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00b      	beq.n	8007d6e <TIM_Base_SetConfig+0x9a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a28      	ldr	r2, [pc, #160]	; (8007dfc <TIM_Base_SetConfig+0x128>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d007      	beq.n	8007d6e <TIM_Base_SetConfig+0x9a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a27      	ldr	r2, [pc, #156]	; (8007e00 <TIM_Base_SetConfig+0x12c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d003      	beq.n	8007d6e <TIM_Base_SetConfig+0x9a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a26      	ldr	r2, [pc, #152]	; (8007e04 <TIM_Base_SetConfig+0x130>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d108      	bne.n	8007d80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00f      	beq.n	8007dcc <TIM_Base_SetConfig+0xf8>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a12      	ldr	r2, [pc, #72]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00b      	beq.n	8007dcc <TIM_Base_SetConfig+0xf8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <TIM_Base_SetConfig+0x128>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d007      	beq.n	8007dcc <TIM_Base_SetConfig+0xf8>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a10      	ldr	r2, [pc, #64]	; (8007e00 <TIM_Base_SetConfig+0x12c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_Base_SetConfig+0xf8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a0f      	ldr	r2, [pc, #60]	; (8007e04 <TIM_Base_SetConfig+0x130>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d103      	bne.n	8007dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	615a      	str	r2, [r3, #20]
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40000400 	.word	0x40000400
 8007df0:	40000800 	.word	0x40000800
 8007df4:	40000c00 	.word	0x40000c00
 8007df8:	40010400 	.word	0x40010400
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40014400 	.word	0x40014400
 8007e04:	40014800 	.word	0x40014800

08007e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e042      	b.n	8007edc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7f9 fe2b 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2224      	movs	r2, #36	; 0x24
 8007e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0201 	bic.w	r2, r2, #1
 8007e84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f9cc 	bl	8008224 <UART_SetConfig>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e022      	b.n	8007edc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f82c 	bl	8008efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f8b3 	bl	8009040 <UART_CheckIdleState>
 8007eda:	4603      	mov	r3, r0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	d167      	bne.n	8007fcc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_UART_Transmit_DMA+0x24>
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e060      	b.n	8007fce <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	88fa      	ldrh	r2, [r7, #6]
 8007f16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	88fa      	ldrh	r2, [r7, #6]
 8007f1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2221      	movs	r2, #33	; 0x21
 8007f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d028      	beq.n	8007f8c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f3e:	4a26      	ldr	r2, [pc, #152]	; (8007fd8 <HAL_UART_Transmit_DMA+0xf4>)
 8007f40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f46:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <HAL_UART_Transmit_DMA+0xf8>)
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f4e:	4a24      	ldr	r2, [pc, #144]	; (8007fe0 <HAL_UART_Transmit_DMA+0xfc>)
 8007f50:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f56:	2200      	movs	r2, #0
 8007f58:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f62:	4619      	mov	r1, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3328      	adds	r3, #40	; 0x28
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	f7fa fb75 	bl	800265c <HAL_DMA_Start_IT>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d009      	beq.n	8007f8c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e020      	b.n	8007fce <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2240      	movs	r2, #64	; 0x40
 8007f92:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb4:	623a      	str	r2, [r7, #32]
 8007fb6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	69f9      	ldr	r1, [r7, #28]
 8007fba:	6a3a      	ldr	r2, [r7, #32]
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e5      	bne.n	8007f94 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e000      	b.n	8007fce <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007fcc:	2302      	movs	r3, #2
  }
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3728      	adds	r7, #40	; 0x28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	08009501 	.word	0x08009501
 8007fdc:	08009597 	.word	0x08009597
 8007fe0:	08009719 	.word	0x08009719

08007fe4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	; 0x28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d137      	bne.n	800806c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <HAL_UART_Receive_DMA+0x24>
 8008002:	88fb      	ldrh	r3, [r7, #6]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e030      	b.n	800806e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <HAL_UART_Receive_DMA+0x94>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d01f      	beq.n	800805c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d018      	beq.n	800805c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	623b      	str	r3, [r7, #32]
 800804a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	69f9      	ldr	r1, [r7, #28]
 800804e:	6a3a      	ldr	r2, [r7, #32]
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	61bb      	str	r3, [r7, #24]
   return(result);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e6      	bne.n	800802a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800805c:	88fb      	ldrh	r3, [r7, #6]
 800805e:	461a      	mov	r2, r3
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f001 f8fe 	bl	8009264 <UART_Start_Receive_DMA>
 8008068:	4603      	mov	r3, r0
 800806a:	e000      	b.n	800806e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800806c:	2302      	movs	r3, #2
  }
}
 800806e:	4618      	mov	r0, r3
 8008070:	3728      	adds	r7, #40	; 0x28
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	58000c00 	.word	0x58000c00

0800807c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b090      	sub	sp, #64	; 0x40
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008092:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809e:	2b80      	cmp	r3, #128	; 0x80
 80080a0:	d139      	bne.n	8008116 <HAL_UART_DMAStop+0x9a>
 80080a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a4:	2b21      	cmp	r3, #33	; 0x21
 80080a6:	d136      	bne.n	8008116 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080be:	637b      	str	r3, [r7, #52]	; 0x34
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3308      	adds	r3, #8
 80080c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e5      	bne.n	80080a8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d015      	beq.n	8008110 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fa fd21 	bl	8002b30 <HAL_DMA_Abort>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00d      	beq.n	8008110 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fb ff99 	bl	8004030 <HAL_DMA_GetError>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b20      	cmp	r3, #32
 8008102:	d105      	bne.n	8008110 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2210      	movs	r2, #16
 8008108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e047      	b.n	80081a0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f001 f94d 	bl	80093b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d13c      	bne.n	800819e <HAL_UART_DMAStop+0x122>
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	2b22      	cmp	r3, #34	; 0x22
 8008128:	d139      	bne.n	800819e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3308      	adds	r3, #8
 8008130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	60bb      	str	r3, [r7, #8]
   return(result);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008140:	633b      	str	r3, [r7, #48]	; 0x30
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3308      	adds	r3, #8
 8008148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814a:	61ba      	str	r2, [r7, #24]
 800814c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	6979      	ldr	r1, [r7, #20]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	613b      	str	r3, [r7, #16]
   return(result);
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e5      	bne.n	800812a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008164:	2b00      	cmp	r3, #0
 8008166:	d017      	beq.n	8008198 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800816e:	4618      	mov	r0, r3
 8008170:	f7fa fcde 	bl	8002b30 <HAL_DMA_Abort>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00e      	beq.n	8008198 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008180:	4618      	mov	r0, r3
 8008182:	f7fb ff55 	bl	8004030 <HAL_DMA_GetError>
 8008186:	4603      	mov	r3, r0
 8008188:	2b20      	cmp	r3, #32
 800818a:	d105      	bne.n	8008198 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2210      	movs	r2, #16
 8008190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e003      	b.n	80081a0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f94b 	bl	8009434 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3740      	adds	r7, #64	; 0x40
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008228:	b092      	sub	sp, #72	; 0x48
 800822a:	af00      	add	r7, sp, #0
 800822c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	431a      	orrs	r2, r3
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	431a      	orrs	r2, r3
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	4313      	orrs	r3, r2
 800824a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4bbe      	ldr	r3, [pc, #760]	; (800854c <UART_SetConfig+0x328>)
 8008254:	4013      	ands	r3, r2
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800825c:	430b      	orrs	r3, r1
 800825e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4ab3      	ldr	r2, [pc, #716]	; (8008550 <UART_SetConfig+0x32c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800828c:	4313      	orrs	r3, r2
 800828e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	4baf      	ldr	r3, [pc, #700]	; (8008554 <UART_SetConfig+0x330>)
 8008298:	4013      	ands	r3, r2
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	f023 010f 	bic.w	r1, r3, #15
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4aa6      	ldr	r2, [pc, #664]	; (8008558 <UART_SetConfig+0x334>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d177      	bne.n	80083b4 <UART_SetConfig+0x190>
 80082c4:	4ba5      	ldr	r3, [pc, #660]	; (800855c <UART_SetConfig+0x338>)
 80082c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082cc:	2b28      	cmp	r3, #40	; 0x28
 80082ce:	d86d      	bhi.n	80083ac <UART_SetConfig+0x188>
 80082d0:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <UART_SetConfig+0xb4>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	0800837d 	.word	0x0800837d
 80082dc:	080083ad 	.word	0x080083ad
 80082e0:	080083ad 	.word	0x080083ad
 80082e4:	080083ad 	.word	0x080083ad
 80082e8:	080083ad 	.word	0x080083ad
 80082ec:	080083ad 	.word	0x080083ad
 80082f0:	080083ad 	.word	0x080083ad
 80082f4:	080083ad 	.word	0x080083ad
 80082f8:	08008385 	.word	0x08008385
 80082fc:	080083ad 	.word	0x080083ad
 8008300:	080083ad 	.word	0x080083ad
 8008304:	080083ad 	.word	0x080083ad
 8008308:	080083ad 	.word	0x080083ad
 800830c:	080083ad 	.word	0x080083ad
 8008310:	080083ad 	.word	0x080083ad
 8008314:	080083ad 	.word	0x080083ad
 8008318:	0800838d 	.word	0x0800838d
 800831c:	080083ad 	.word	0x080083ad
 8008320:	080083ad 	.word	0x080083ad
 8008324:	080083ad 	.word	0x080083ad
 8008328:	080083ad 	.word	0x080083ad
 800832c:	080083ad 	.word	0x080083ad
 8008330:	080083ad 	.word	0x080083ad
 8008334:	080083ad 	.word	0x080083ad
 8008338:	08008395 	.word	0x08008395
 800833c:	080083ad 	.word	0x080083ad
 8008340:	080083ad 	.word	0x080083ad
 8008344:	080083ad 	.word	0x080083ad
 8008348:	080083ad 	.word	0x080083ad
 800834c:	080083ad 	.word	0x080083ad
 8008350:	080083ad 	.word	0x080083ad
 8008354:	080083ad 	.word	0x080083ad
 8008358:	0800839d 	.word	0x0800839d
 800835c:	080083ad 	.word	0x080083ad
 8008360:	080083ad 	.word	0x080083ad
 8008364:	080083ad 	.word	0x080083ad
 8008368:	080083ad 	.word	0x080083ad
 800836c:	080083ad 	.word	0x080083ad
 8008370:	080083ad 	.word	0x080083ad
 8008374:	080083ad 	.word	0x080083ad
 8008378:	080083a5 	.word	0x080083a5
 800837c:	2301      	movs	r3, #1
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e326      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008384:	2304      	movs	r3, #4
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e322      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800838c:	2308      	movs	r3, #8
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008392:	e31e      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008394:	2310      	movs	r3, #16
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e31a      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800839c:	2320      	movs	r3, #32
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e316      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e312      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e30e      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a69      	ldr	r2, [pc, #420]	; (8008560 <UART_SetConfig+0x33c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d130      	bne.n	8008420 <UART_SetConfig+0x1fc>
 80083be:	4b67      	ldr	r3, [pc, #412]	; (800855c <UART_SetConfig+0x338>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	2b05      	cmp	r3, #5
 80083c8:	d826      	bhi.n	8008418 <UART_SetConfig+0x1f4>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <UART_SetConfig+0x1ac>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083e9 	.word	0x080083e9
 80083d4:	080083f1 	.word	0x080083f1
 80083d8:	080083f9 	.word	0x080083f9
 80083dc:	08008401 	.word	0x08008401
 80083e0:	08008409 	.word	0x08008409
 80083e4:	08008411 	.word	0x08008411
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ee:	e2f0      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80083f0:	2304      	movs	r3, #4
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f6:	e2ec      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80083f8:	2308      	movs	r3, #8
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fe:	e2e8      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008400:	2310      	movs	r3, #16
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008406:	e2e4      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008408:	2320      	movs	r3, #32
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840e:	e2e0      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008410:	2340      	movs	r3, #64	; 0x40
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e2dc      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008418:	2380      	movs	r3, #128	; 0x80
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e2d8      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a4f      	ldr	r2, [pc, #316]	; (8008564 <UART_SetConfig+0x340>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d130      	bne.n	800848c <UART_SetConfig+0x268>
 800842a:	4b4c      	ldr	r3, [pc, #304]	; (800855c <UART_SetConfig+0x338>)
 800842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	2b05      	cmp	r3, #5
 8008434:	d826      	bhi.n	8008484 <UART_SetConfig+0x260>
 8008436:	a201      	add	r2, pc, #4	; (adr r2, 800843c <UART_SetConfig+0x218>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	08008455 	.word	0x08008455
 8008440:	0800845d 	.word	0x0800845d
 8008444:	08008465 	.word	0x08008465
 8008448:	0800846d 	.word	0x0800846d
 800844c:	08008475 	.word	0x08008475
 8008450:	0800847d 	.word	0x0800847d
 8008454:	2300      	movs	r3, #0
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845a:	e2ba      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800845c:	2304      	movs	r3, #4
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008462:	e2b6      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008464:	2308      	movs	r3, #8
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846a:	e2b2      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800846c:	2310      	movs	r3, #16
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008472:	e2ae      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008474:	2320      	movs	r3, #32
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e2aa      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800847c:	2340      	movs	r3, #64	; 0x40
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e2a6      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008484:	2380      	movs	r3, #128	; 0x80
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e2a2      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a35      	ldr	r2, [pc, #212]	; (8008568 <UART_SetConfig+0x344>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d130      	bne.n	80084f8 <UART_SetConfig+0x2d4>
 8008496:	4b31      	ldr	r3, [pc, #196]	; (800855c <UART_SetConfig+0x338>)
 8008498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	2b05      	cmp	r3, #5
 80084a0:	d826      	bhi.n	80084f0 <UART_SetConfig+0x2cc>
 80084a2:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <UART_SetConfig+0x284>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084c9 	.word	0x080084c9
 80084b0:	080084d1 	.word	0x080084d1
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	080084e1 	.word	0x080084e1
 80084bc:	080084e9 	.word	0x080084e9
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c6:	e284      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80084c8:	2304      	movs	r3, #4
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ce:	e280      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80084d0:	2308      	movs	r3, #8
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d6:	e27c      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80084d8:	2310      	movs	r3, #16
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084de:	e278      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80084e0:	2320      	movs	r3, #32
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e6:	e274      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80084e8:	2340      	movs	r3, #64	; 0x40
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ee:	e270      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80084f0:	2380      	movs	r3, #128	; 0x80
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e26c      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1b      	ldr	r2, [pc, #108]	; (800856c <UART_SetConfig+0x348>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d142      	bne.n	8008588 <UART_SetConfig+0x364>
 8008502:	4b16      	ldr	r3, [pc, #88]	; (800855c <UART_SetConfig+0x338>)
 8008504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b05      	cmp	r3, #5
 800850c:	d838      	bhi.n	8008580 <UART_SetConfig+0x35c>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <UART_SetConfig+0x2f0>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	0800852d 	.word	0x0800852d
 8008518:	08008535 	.word	0x08008535
 800851c:	0800853d 	.word	0x0800853d
 8008520:	08008545 	.word	0x08008545
 8008524:	08008571 	.word	0x08008571
 8008528:	08008579 	.word	0x08008579
 800852c:	2300      	movs	r3, #0
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008532:	e24e      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008534:	2304      	movs	r3, #4
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853a:	e24a      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800853c:	2308      	movs	r3, #8
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008542:	e246      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008544:	2310      	movs	r3, #16
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854a:	e242      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800854c:	cfff69f3 	.word	0xcfff69f3
 8008550:	58000c00 	.word	0x58000c00
 8008554:	11fff4ff 	.word	0x11fff4ff
 8008558:	40011000 	.word	0x40011000
 800855c:	58024400 	.word	0x58024400
 8008560:	40004400 	.word	0x40004400
 8008564:	40004800 	.word	0x40004800
 8008568:	40004c00 	.word	0x40004c00
 800856c:	40005000 	.word	0x40005000
 8008570:	2320      	movs	r3, #32
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008576:	e22c      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008578:	2340      	movs	r3, #64	; 0x40
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857e:	e228      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008580:	2380      	movs	r3, #128	; 0x80
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008586:	e224      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4ab1      	ldr	r2, [pc, #708]	; (8008854 <UART_SetConfig+0x630>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d176      	bne.n	8008680 <UART_SetConfig+0x45c>
 8008592:	4bb1      	ldr	r3, [pc, #708]	; (8008858 <UART_SetConfig+0x634>)
 8008594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800859a:	2b28      	cmp	r3, #40	; 0x28
 800859c:	d86c      	bhi.n	8008678 <UART_SetConfig+0x454>
 800859e:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <UART_SetConfig+0x380>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	08008649 	.word	0x08008649
 80085a8:	08008679 	.word	0x08008679
 80085ac:	08008679 	.word	0x08008679
 80085b0:	08008679 	.word	0x08008679
 80085b4:	08008679 	.word	0x08008679
 80085b8:	08008679 	.word	0x08008679
 80085bc:	08008679 	.word	0x08008679
 80085c0:	08008679 	.word	0x08008679
 80085c4:	08008651 	.word	0x08008651
 80085c8:	08008679 	.word	0x08008679
 80085cc:	08008679 	.word	0x08008679
 80085d0:	08008679 	.word	0x08008679
 80085d4:	08008679 	.word	0x08008679
 80085d8:	08008679 	.word	0x08008679
 80085dc:	08008679 	.word	0x08008679
 80085e0:	08008679 	.word	0x08008679
 80085e4:	08008659 	.word	0x08008659
 80085e8:	08008679 	.word	0x08008679
 80085ec:	08008679 	.word	0x08008679
 80085f0:	08008679 	.word	0x08008679
 80085f4:	08008679 	.word	0x08008679
 80085f8:	08008679 	.word	0x08008679
 80085fc:	08008679 	.word	0x08008679
 8008600:	08008679 	.word	0x08008679
 8008604:	08008661 	.word	0x08008661
 8008608:	08008679 	.word	0x08008679
 800860c:	08008679 	.word	0x08008679
 8008610:	08008679 	.word	0x08008679
 8008614:	08008679 	.word	0x08008679
 8008618:	08008679 	.word	0x08008679
 800861c:	08008679 	.word	0x08008679
 8008620:	08008679 	.word	0x08008679
 8008624:	08008669 	.word	0x08008669
 8008628:	08008679 	.word	0x08008679
 800862c:	08008679 	.word	0x08008679
 8008630:	08008679 	.word	0x08008679
 8008634:	08008679 	.word	0x08008679
 8008638:	08008679 	.word	0x08008679
 800863c:	08008679 	.word	0x08008679
 8008640:	08008679 	.word	0x08008679
 8008644:	08008671 	.word	0x08008671
 8008648:	2301      	movs	r3, #1
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e1c0      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008650:	2304      	movs	r3, #4
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e1bc      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008658:	2308      	movs	r3, #8
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e1b8      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008660:	2310      	movs	r3, #16
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e1b4      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008668:	2320      	movs	r3, #32
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866e:	e1b0      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008670:	2340      	movs	r3, #64	; 0x40
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e1ac      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008678:	2380      	movs	r3, #128	; 0x80
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e1a8      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a75      	ldr	r2, [pc, #468]	; (800885c <UART_SetConfig+0x638>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d130      	bne.n	80086ec <UART_SetConfig+0x4c8>
 800868a:	4b73      	ldr	r3, [pc, #460]	; (8008858 <UART_SetConfig+0x634>)
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b05      	cmp	r3, #5
 8008694:	d826      	bhi.n	80086e4 <UART_SetConfig+0x4c0>
 8008696:	a201      	add	r2, pc, #4	; (adr r2, 800869c <UART_SetConfig+0x478>)
 8008698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869c:	080086b5 	.word	0x080086b5
 80086a0:	080086bd 	.word	0x080086bd
 80086a4:	080086c5 	.word	0x080086c5
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086d5 	.word	0x080086d5
 80086b0:	080086dd 	.word	0x080086dd
 80086b4:	2300      	movs	r3, #0
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e18a      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80086bc:	2304      	movs	r3, #4
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c2:	e186      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80086c4:	2308      	movs	r3, #8
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ca:	e182      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80086cc:	2310      	movs	r3, #16
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d2:	e17e      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80086d4:	2320      	movs	r3, #32
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086da:	e17a      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e176      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80086e4:	2380      	movs	r3, #128	; 0x80
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e172      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a5b      	ldr	r2, [pc, #364]	; (8008860 <UART_SetConfig+0x63c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d130      	bne.n	8008758 <UART_SetConfig+0x534>
 80086f6:	4b58      	ldr	r3, [pc, #352]	; (8008858 <UART_SetConfig+0x634>)
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	f003 0307 	and.w	r3, r3, #7
 80086fe:	2b05      	cmp	r3, #5
 8008700:	d826      	bhi.n	8008750 <UART_SetConfig+0x52c>
 8008702:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <UART_SetConfig+0x4e4>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008721 	.word	0x08008721
 800870c:	08008729 	.word	0x08008729
 8008710:	08008731 	.word	0x08008731
 8008714:	08008739 	.word	0x08008739
 8008718:	08008741 	.word	0x08008741
 800871c:	08008749 	.word	0x08008749
 8008720:	2300      	movs	r3, #0
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e154      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008728:	2304      	movs	r3, #4
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e150      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008730:	2308      	movs	r3, #8
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e14c      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008738:	2310      	movs	r3, #16
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e148      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008740:	2320      	movs	r3, #32
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e144      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008748:	2340      	movs	r3, #64	; 0x40
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e140      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e13c      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a41      	ldr	r2, [pc, #260]	; (8008864 <UART_SetConfig+0x640>)
 800875e:	4293      	cmp	r3, r2
 8008760:	f040 8082 	bne.w	8008868 <UART_SetConfig+0x644>
 8008764:	4b3c      	ldr	r3, [pc, #240]	; (8008858 <UART_SetConfig+0x634>)
 8008766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800876c:	2b28      	cmp	r3, #40	; 0x28
 800876e:	d86d      	bhi.n	800884c <UART_SetConfig+0x628>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <UART_SetConfig+0x554>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	0800881d 	.word	0x0800881d
 800877c:	0800884d 	.word	0x0800884d
 8008780:	0800884d 	.word	0x0800884d
 8008784:	0800884d 	.word	0x0800884d
 8008788:	0800884d 	.word	0x0800884d
 800878c:	0800884d 	.word	0x0800884d
 8008790:	0800884d 	.word	0x0800884d
 8008794:	0800884d 	.word	0x0800884d
 8008798:	08008825 	.word	0x08008825
 800879c:	0800884d 	.word	0x0800884d
 80087a0:	0800884d 	.word	0x0800884d
 80087a4:	0800884d 	.word	0x0800884d
 80087a8:	0800884d 	.word	0x0800884d
 80087ac:	0800884d 	.word	0x0800884d
 80087b0:	0800884d 	.word	0x0800884d
 80087b4:	0800884d 	.word	0x0800884d
 80087b8:	0800882d 	.word	0x0800882d
 80087bc:	0800884d 	.word	0x0800884d
 80087c0:	0800884d 	.word	0x0800884d
 80087c4:	0800884d 	.word	0x0800884d
 80087c8:	0800884d 	.word	0x0800884d
 80087cc:	0800884d 	.word	0x0800884d
 80087d0:	0800884d 	.word	0x0800884d
 80087d4:	0800884d 	.word	0x0800884d
 80087d8:	08008835 	.word	0x08008835
 80087dc:	0800884d 	.word	0x0800884d
 80087e0:	0800884d 	.word	0x0800884d
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	0800884d 	.word	0x0800884d
 80087ec:	0800884d 	.word	0x0800884d
 80087f0:	0800884d 	.word	0x0800884d
 80087f4:	0800884d 	.word	0x0800884d
 80087f8:	0800883d 	.word	0x0800883d
 80087fc:	0800884d 	.word	0x0800884d
 8008800:	0800884d 	.word	0x0800884d
 8008804:	0800884d 	.word	0x0800884d
 8008808:	0800884d 	.word	0x0800884d
 800880c:	0800884d 	.word	0x0800884d
 8008810:	0800884d 	.word	0x0800884d
 8008814:	0800884d 	.word	0x0800884d
 8008818:	08008845 	.word	0x08008845
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e0d6      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008824:	2304      	movs	r3, #4
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e0d2      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800882c:	2308      	movs	r3, #8
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008832:	e0ce      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008834:	2310      	movs	r3, #16
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883a:	e0ca      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800883c:	2320      	movs	r3, #32
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e0c6      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008844:	2340      	movs	r3, #64	; 0x40
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e0c2      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e0be      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008854:	40011400 	.word	0x40011400
 8008858:	58024400 	.word	0x58024400
 800885c:	40007800 	.word	0x40007800
 8008860:	40007c00 	.word	0x40007c00
 8008864:	40011800 	.word	0x40011800
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4aad      	ldr	r2, [pc, #692]	; (8008b24 <UART_SetConfig+0x900>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d176      	bne.n	8008960 <UART_SetConfig+0x73c>
 8008872:	4bad      	ldr	r3, [pc, #692]	; (8008b28 <UART_SetConfig+0x904>)
 8008874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887a:	2b28      	cmp	r3, #40	; 0x28
 800887c:	d86c      	bhi.n	8008958 <UART_SetConfig+0x734>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <UART_SetConfig+0x660>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	08008929 	.word	0x08008929
 8008888:	08008959 	.word	0x08008959
 800888c:	08008959 	.word	0x08008959
 8008890:	08008959 	.word	0x08008959
 8008894:	08008959 	.word	0x08008959
 8008898:	08008959 	.word	0x08008959
 800889c:	08008959 	.word	0x08008959
 80088a0:	08008959 	.word	0x08008959
 80088a4:	08008931 	.word	0x08008931
 80088a8:	08008959 	.word	0x08008959
 80088ac:	08008959 	.word	0x08008959
 80088b0:	08008959 	.word	0x08008959
 80088b4:	08008959 	.word	0x08008959
 80088b8:	08008959 	.word	0x08008959
 80088bc:	08008959 	.word	0x08008959
 80088c0:	08008959 	.word	0x08008959
 80088c4:	08008939 	.word	0x08008939
 80088c8:	08008959 	.word	0x08008959
 80088cc:	08008959 	.word	0x08008959
 80088d0:	08008959 	.word	0x08008959
 80088d4:	08008959 	.word	0x08008959
 80088d8:	08008959 	.word	0x08008959
 80088dc:	08008959 	.word	0x08008959
 80088e0:	08008959 	.word	0x08008959
 80088e4:	08008941 	.word	0x08008941
 80088e8:	08008959 	.word	0x08008959
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008959 	.word	0x08008959
 80088f4:	08008959 	.word	0x08008959
 80088f8:	08008959 	.word	0x08008959
 80088fc:	08008959 	.word	0x08008959
 8008900:	08008959 	.word	0x08008959
 8008904:	08008949 	.word	0x08008949
 8008908:	08008959 	.word	0x08008959
 800890c:	08008959 	.word	0x08008959
 8008910:	08008959 	.word	0x08008959
 8008914:	08008959 	.word	0x08008959
 8008918:	08008959 	.word	0x08008959
 800891c:	08008959 	.word	0x08008959
 8008920:	08008959 	.word	0x08008959
 8008924:	08008951 	.word	0x08008951
 8008928:	2301      	movs	r3, #1
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892e:	e050      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008930:	2304      	movs	r3, #4
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008936:	e04c      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008938:	2308      	movs	r3, #8
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893e:	e048      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008940:	2310      	movs	r3, #16
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008946:	e044      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008948:	2320      	movs	r3, #32
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894e:	e040      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008950:	2340      	movs	r3, #64	; 0x40
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008956:	e03c      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008958:	2380      	movs	r3, #128	; 0x80
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895e:	e038      	b.n	80089d2 <UART_SetConfig+0x7ae>
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a71      	ldr	r2, [pc, #452]	; (8008b2c <UART_SetConfig+0x908>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d130      	bne.n	80089cc <UART_SetConfig+0x7a8>
 800896a:	4b6f      	ldr	r3, [pc, #444]	; (8008b28 <UART_SetConfig+0x904>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896e:	f003 0307 	and.w	r3, r3, #7
 8008972:	2b05      	cmp	r3, #5
 8008974:	d826      	bhi.n	80089c4 <UART_SetConfig+0x7a0>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <UART_SetConfig+0x758>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	08008995 	.word	0x08008995
 8008980:	0800899d 	.word	0x0800899d
 8008984:	080089a5 	.word	0x080089a5
 8008988:	080089ad 	.word	0x080089ad
 800898c:	080089b5 	.word	0x080089b5
 8008990:	080089bd 	.word	0x080089bd
 8008994:	2302      	movs	r3, #2
 8008996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899a:	e01a      	b.n	80089d2 <UART_SetConfig+0x7ae>
 800899c:	2304      	movs	r3, #4
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a2:	e016      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80089a4:	2308      	movs	r3, #8
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089aa:	e012      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80089ac:	2310      	movs	r3, #16
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089b2:	e00e      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80089b4:	2320      	movs	r3, #32
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ba:	e00a      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80089bc:	2340      	movs	r3, #64	; 0x40
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c2:	e006      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80089c4:	2380      	movs	r3, #128	; 0x80
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ca:	e002      	b.n	80089d2 <UART_SetConfig+0x7ae>
 80089cc:	2380      	movs	r3, #128	; 0x80
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a55      	ldr	r2, [pc, #340]	; (8008b2c <UART_SetConfig+0x908>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	f040 80f8 	bne.w	8008bce <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	dc46      	bgt.n	8008a74 <UART_SetConfig+0x850>
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	db75      	blt.n	8008ad6 <UART_SetConfig+0x8b2>
 80089ea:	3b02      	subs	r3, #2
 80089ec:	2b1e      	cmp	r3, #30
 80089ee:	d872      	bhi.n	8008ad6 <UART_SetConfig+0x8b2>
 80089f0:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0x7d4>)
 80089f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f6:	bf00      	nop
 80089f8:	08008a7b 	.word	0x08008a7b
 80089fc:	08008ad7 	.word	0x08008ad7
 8008a00:	08008a83 	.word	0x08008a83
 8008a04:	08008ad7 	.word	0x08008ad7
 8008a08:	08008ad7 	.word	0x08008ad7
 8008a0c:	08008ad7 	.word	0x08008ad7
 8008a10:	08008a93 	.word	0x08008a93
 8008a14:	08008ad7 	.word	0x08008ad7
 8008a18:	08008ad7 	.word	0x08008ad7
 8008a1c:	08008ad7 	.word	0x08008ad7
 8008a20:	08008ad7 	.word	0x08008ad7
 8008a24:	08008ad7 	.word	0x08008ad7
 8008a28:	08008ad7 	.word	0x08008ad7
 8008a2c:	08008ad7 	.word	0x08008ad7
 8008a30:	08008aa3 	.word	0x08008aa3
 8008a34:	08008ad7 	.word	0x08008ad7
 8008a38:	08008ad7 	.word	0x08008ad7
 8008a3c:	08008ad7 	.word	0x08008ad7
 8008a40:	08008ad7 	.word	0x08008ad7
 8008a44:	08008ad7 	.word	0x08008ad7
 8008a48:	08008ad7 	.word	0x08008ad7
 8008a4c:	08008ad7 	.word	0x08008ad7
 8008a50:	08008ad7 	.word	0x08008ad7
 8008a54:	08008ad7 	.word	0x08008ad7
 8008a58:	08008ad7 	.word	0x08008ad7
 8008a5c:	08008ad7 	.word	0x08008ad7
 8008a60:	08008ad7 	.word	0x08008ad7
 8008a64:	08008ad7 	.word	0x08008ad7
 8008a68:	08008ad7 	.word	0x08008ad7
 8008a6c:	08008ad7 	.word	0x08008ad7
 8008a70:	08008ac9 	.word	0x08008ac9
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d02a      	beq.n	8008ace <UART_SetConfig+0x8aa>
 8008a78:	e02d      	b.n	8008ad6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a7a:	f7fe fae7 	bl	800704c <HAL_RCCEx_GetD3PCLK1Freq>
 8008a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a80:	e02f      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe faf6 	bl	8007078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a90:	e027      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a92:	f107 0318 	add.w	r3, r7, #24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fc42 	bl	8007320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa0:	e01f      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa2:	4b21      	ldr	r3, [pc, #132]	; (8008b28 <UART_SetConfig+0x904>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008aae:	4b1e      	ldr	r3, [pc, #120]	; (8008b28 <UART_SetConfig+0x904>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	08db      	lsrs	r3, r3, #3
 8008ab4:	f003 0303 	and.w	r3, r3, #3
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	; (8008b30 <UART_SetConfig+0x90c>)
 8008aba:	fa22 f303 	lsr.w	r3, r2, r3
 8008abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ac0:	e00f      	b.n	8008ae2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <UART_SetConfig+0x90c>)
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ac6:	e00c      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ac8:	4b1a      	ldr	r3, [pc, #104]	; (8008b34 <UART_SetConfig+0x910>)
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008acc:	e009      	b.n	8008ae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad4:	e005      	b.n	8008ae2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 81ee 	beq.w	8008ec6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <UART_SetConfig+0x914>)
 8008af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af4:	461a      	mov	r2, r3
 8008af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	4413      	add	r3, r2
 8008b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d305      	bcc.n	8008b1a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d910      	bls.n	8008b3c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008b20:	e1d1      	b.n	8008ec6 <UART_SetConfig+0xca2>
 8008b22:	bf00      	nop
 8008b24:	40011c00 	.word	0x40011c00
 8008b28:	58024400 	.word	0x58024400
 8008b2c:	58000c00 	.word	0x58000c00
 8008b30:	03d09000 	.word	0x03d09000
 8008b34:	003d0900 	.word	0x003d0900
 8008b38:	08016ba4 	.word	0x08016ba4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3e:	2200      	movs	r2, #0
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	60fa      	str	r2, [r7, #12]
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	4ac0      	ldr	r2, [pc, #768]	; (8008e4c <UART_SetConfig+0xc28>)
 8008b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	2200      	movs	r2, #0
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b5e:	f7f7 fc7f 	bl	8000460 <__aeabi_uldivmod>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4610      	mov	r0, r2
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f04f 0200 	mov.w	r2, #0
 8008b6e:	f04f 0300 	mov.w	r3, #0
 8008b72:	020b      	lsls	r3, r1, #8
 8008b74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b78:	0202      	lsls	r2, r0, #8
 8008b7a:	6979      	ldr	r1, [r7, #20]
 8008b7c:	6849      	ldr	r1, [r1, #4]
 8008b7e:	0849      	lsrs	r1, r1, #1
 8008b80:	2000      	movs	r0, #0
 8008b82:	460c      	mov	r4, r1
 8008b84:	4605      	mov	r5, r0
 8008b86:	eb12 0804 	adds.w	r8, r2, r4
 8008b8a:	eb43 0905 	adc.w	r9, r3, r5
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	469a      	mov	sl, r3
 8008b96:	4693      	mov	fp, r2
 8008b98:	4652      	mov	r2, sl
 8008b9a:	465b      	mov	r3, fp
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	f7f7 fc5e 	bl	8000460 <__aeabi_uldivmod>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4613      	mov	r3, r2
 8008baa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb2:	d308      	bcc.n	8008bc6 <UART_SetConfig+0x9a2>
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bba:	d204      	bcs.n	8008bc6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bc2:	60da      	str	r2, [r3, #12]
 8008bc4:	e17f      	b.n	8008ec6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008bcc:	e17b      	b.n	8008ec6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd6:	f040 80bd 	bne.w	8008d54 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008bda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	dc48      	bgt.n	8008c74 <UART_SetConfig+0xa50>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	db7b      	blt.n	8008cde <UART_SetConfig+0xaba>
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d879      	bhi.n	8008cde <UART_SetConfig+0xaba>
 8008bea:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <UART_SetConfig+0x9cc>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c7b 	.word	0x08008c7b
 8008bf4:	08008c83 	.word	0x08008c83
 8008bf8:	08008cdf 	.word	0x08008cdf
 8008bfc:	08008cdf 	.word	0x08008cdf
 8008c00:	08008c8b 	.word	0x08008c8b
 8008c04:	08008cdf 	.word	0x08008cdf
 8008c08:	08008cdf 	.word	0x08008cdf
 8008c0c:	08008cdf 	.word	0x08008cdf
 8008c10:	08008c9b 	.word	0x08008c9b
 8008c14:	08008cdf 	.word	0x08008cdf
 8008c18:	08008cdf 	.word	0x08008cdf
 8008c1c:	08008cdf 	.word	0x08008cdf
 8008c20:	08008cdf 	.word	0x08008cdf
 8008c24:	08008cdf 	.word	0x08008cdf
 8008c28:	08008cdf 	.word	0x08008cdf
 8008c2c:	08008cdf 	.word	0x08008cdf
 8008c30:	08008cab 	.word	0x08008cab
 8008c34:	08008cdf 	.word	0x08008cdf
 8008c38:	08008cdf 	.word	0x08008cdf
 8008c3c:	08008cdf 	.word	0x08008cdf
 8008c40:	08008cdf 	.word	0x08008cdf
 8008c44:	08008cdf 	.word	0x08008cdf
 8008c48:	08008cdf 	.word	0x08008cdf
 8008c4c:	08008cdf 	.word	0x08008cdf
 8008c50:	08008cdf 	.word	0x08008cdf
 8008c54:	08008cdf 	.word	0x08008cdf
 8008c58:	08008cdf 	.word	0x08008cdf
 8008c5c:	08008cdf 	.word	0x08008cdf
 8008c60:	08008cdf 	.word	0x08008cdf
 8008c64:	08008cdf 	.word	0x08008cdf
 8008c68:	08008cdf 	.word	0x08008cdf
 8008c6c:	08008cdf 	.word	0x08008cdf
 8008c70:	08008cd1 	.word	0x08008cd1
 8008c74:	2b40      	cmp	r3, #64	; 0x40
 8008c76:	d02e      	beq.n	8008cd6 <UART_SetConfig+0xab2>
 8008c78:	e031      	b.n	8008cde <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c7a:	f7fc ffbb 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8008c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c80:	e033      	b.n	8008cea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c82:	f7fc ffcd 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8008c86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c88:	e02f      	b.n	8008cea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe f9f2 	bl	8007078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c98:	e027      	b.n	8008cea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9a:	f107 0318 	add.w	r3, r7, #24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fb3e 	bl	8007320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca8:	e01f      	b.n	8008cea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008caa:	4b69      	ldr	r3, [pc, #420]	; (8008e50 <UART_SetConfig+0xc2c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0320 	and.w	r3, r3, #32
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cb6:	4b66      	ldr	r3, [pc, #408]	; (8008e50 <UART_SetConfig+0xc2c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	08db      	lsrs	r3, r3, #3
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	4a64      	ldr	r2, [pc, #400]	; (8008e54 <UART_SetConfig+0xc30>)
 8008cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cc8:	e00f      	b.n	8008cea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008cca:	4b62      	ldr	r3, [pc, #392]	; (8008e54 <UART_SetConfig+0xc30>)
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cce:	e00c      	b.n	8008cea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cd0:	4b61      	ldr	r3, [pc, #388]	; (8008e58 <UART_SetConfig+0xc34>)
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd4:	e009      	b.n	8008cea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cdc:	e005      	b.n	8008cea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 80ea 	beq.w	8008ec6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	4a55      	ldr	r2, [pc, #340]	; (8008e4c <UART_SetConfig+0xc28>)
 8008cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d04:	005a      	lsls	r2, r3, #1
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	085b      	lsrs	r3, r3, #1
 8008d0c:	441a      	add	r2, r3
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	2b0f      	cmp	r3, #15
 8008d1c:	d916      	bls.n	8008d4c <UART_SetConfig+0xb28>
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d24:	d212      	bcs.n	8008d4c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f023 030f 	bic.w	r3, r3, #15
 8008d2e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	085b      	lsrs	r3, r3, #1
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008d48:	60da      	str	r2, [r3, #12]
 8008d4a:	e0bc      	b.n	8008ec6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d52:	e0b8      	b.n	8008ec6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	dc4b      	bgt.n	8008df4 <UART_SetConfig+0xbd0>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f2c0 8087 	blt.w	8008e70 <UART_SetConfig+0xc4c>
 8008d62:	2b20      	cmp	r3, #32
 8008d64:	f200 8084 	bhi.w	8008e70 <UART_SetConfig+0xc4c>
 8008d68:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <UART_SetConfig+0xb4c>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008dfb 	.word	0x08008dfb
 8008d74:	08008e03 	.word	0x08008e03
 8008d78:	08008e71 	.word	0x08008e71
 8008d7c:	08008e71 	.word	0x08008e71
 8008d80:	08008e0b 	.word	0x08008e0b
 8008d84:	08008e71 	.word	0x08008e71
 8008d88:	08008e71 	.word	0x08008e71
 8008d8c:	08008e71 	.word	0x08008e71
 8008d90:	08008e1b 	.word	0x08008e1b
 8008d94:	08008e71 	.word	0x08008e71
 8008d98:	08008e71 	.word	0x08008e71
 8008d9c:	08008e71 	.word	0x08008e71
 8008da0:	08008e71 	.word	0x08008e71
 8008da4:	08008e71 	.word	0x08008e71
 8008da8:	08008e71 	.word	0x08008e71
 8008dac:	08008e71 	.word	0x08008e71
 8008db0:	08008e2b 	.word	0x08008e2b
 8008db4:	08008e71 	.word	0x08008e71
 8008db8:	08008e71 	.word	0x08008e71
 8008dbc:	08008e71 	.word	0x08008e71
 8008dc0:	08008e71 	.word	0x08008e71
 8008dc4:	08008e71 	.word	0x08008e71
 8008dc8:	08008e71 	.word	0x08008e71
 8008dcc:	08008e71 	.word	0x08008e71
 8008dd0:	08008e71 	.word	0x08008e71
 8008dd4:	08008e71 	.word	0x08008e71
 8008dd8:	08008e71 	.word	0x08008e71
 8008ddc:	08008e71 	.word	0x08008e71
 8008de0:	08008e71 	.word	0x08008e71
 8008de4:	08008e71 	.word	0x08008e71
 8008de8:	08008e71 	.word	0x08008e71
 8008dec:	08008e71 	.word	0x08008e71
 8008df0:	08008e63 	.word	0x08008e63
 8008df4:	2b40      	cmp	r3, #64	; 0x40
 8008df6:	d037      	beq.n	8008e68 <UART_SetConfig+0xc44>
 8008df8:	e03a      	b.n	8008e70 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dfa:	f7fc fefb 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8008dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e00:	e03c      	b.n	8008e7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e02:	f7fc ff0d 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8008e06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e08:	e038      	b.n	8008e7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe f932 	bl	8007078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e18:	e030      	b.n	8008e7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e1a:	f107 0318 	add.w	r3, r7, #24
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fa7e 	bl	8007320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e28:	e028      	b.n	8008e7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e2a:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <UART_SetConfig+0xc2c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0320 	and.w	r3, r3, #32
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d012      	beq.n	8008e5c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e36:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <UART_SetConfig+0xc2c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	08db      	lsrs	r3, r3, #3
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	4a04      	ldr	r2, [pc, #16]	; (8008e54 <UART_SetConfig+0xc30>)
 8008e42:	fa22 f303 	lsr.w	r3, r2, r3
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e48:	e018      	b.n	8008e7c <UART_SetConfig+0xc58>
 8008e4a:	bf00      	nop
 8008e4c:	08016ba4 	.word	0x08016ba4
 8008e50:	58024400 	.word	0x58024400
 8008e54:	03d09000 	.word	0x03d09000
 8008e58:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008e5c:	4b24      	ldr	r3, [pc, #144]	; (8008ef0 <UART_SetConfig+0xccc>)
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e60:	e00c      	b.n	8008e7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e62:	4b24      	ldr	r3, [pc, #144]	; (8008ef4 <UART_SetConfig+0xcd0>)
 8008e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e66:	e009      	b.n	8008e7c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e6e:	e005      	b.n	8008e7c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8008e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d021      	beq.n	8008ec6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	4a1c      	ldr	r2, [pc, #112]	; (8008ef8 <UART_SetConfig+0xcd4>)
 8008e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e90:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	441a      	add	r2, r3
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	2b0f      	cmp	r3, #15
 8008eaa:	d909      	bls.n	8008ec0 <UART_SetConfig+0xc9c>
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb2:	d205      	bcs.n	8008ec0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	e002      	b.n	8008ec6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008ee2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3748      	adds	r7, #72	; 0x48
 8008eea:	46bd      	mov	sp, r7
 8008eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ef0:	03d09000 	.word	0x03d09000
 8008ef4:	003d0900 	.word	0x003d0900
 8008ef8:	08016ba4 	.word	0x08016ba4

08008efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6e:	f003 0308 	and.w	r3, r3, #8
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f90:	f003 0310 	and.w	r3, r3, #16
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	f003 0320 	and.w	r3, r3, #32
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01a      	beq.n	8009012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ffa:	d10a      	bne.n	8009012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	605a      	str	r2, [r3, #4]
  }
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b098      	sub	sp, #96	; 0x60
 8009044:	af02      	add	r7, sp, #8
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009050:	f7f8 fe8a 	bl	8001d68 <HAL_GetTick>
 8009054:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0308 	and.w	r3, r3, #8
 8009060:	2b08      	cmp	r3, #8
 8009062:	d12f      	bne.n	80090c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800906c:	2200      	movs	r2, #0
 800906e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f88e 	bl	8009194 <UART_WaitOnFlagUntilTimeout>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d022      	beq.n	80090c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800908c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009092:	653b      	str	r3, [r7, #80]	; 0x50
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800909c:	647b      	str	r3, [r7, #68]	; 0x44
 800909e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e6      	bne.n	800907e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e063      	b.n	800918c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0304 	and.w	r3, r3, #4
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d149      	bne.n	8009166 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090da:	2200      	movs	r2, #0
 80090dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f857 	bl	8009194 <UART_WaitOnFlagUntilTimeout>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d03c      	beq.n	8009166 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	623b      	str	r3, [r7, #32]
   return(result);
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009100:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910a:	633b      	str	r3, [r7, #48]	; 0x30
 800910c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009112:	e841 2300 	strex	r3, r2, [r1]
 8009116:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1e6      	bne.n	80090ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	60fb      	str	r3, [r7, #12]
   return(result);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f023 0301 	bic.w	r3, r3, #1
 8009134:	64bb      	str	r3, [r7, #72]	; 0x48
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3308      	adds	r3, #8
 800913c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800913e:	61fa      	str	r2, [r7, #28]
 8009140:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	69b9      	ldr	r1, [r7, #24]
 8009144:	69fa      	ldr	r2, [r7, #28]
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	617b      	str	r3, [r7, #20]
   return(result);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e5      	bne.n	800911e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2220      	movs	r2, #32
 8009156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e012      	b.n	800918c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3758      	adds	r7, #88	; 0x58
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	4613      	mov	r3, r2
 80091a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a4:	e049      	b.n	800923a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ac:	d045      	beq.n	800923a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ae:	f7f8 fddb 	bl	8001d68 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d302      	bcc.n	80091c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e048      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d031      	beq.n	800923a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d110      	bne.n	8009206 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2208      	movs	r2, #8
 80091ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f921 	bl	8009434 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2208      	movs	r2, #8
 80091f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e029      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009214:	d111      	bne.n	800923a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800921e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f907 	bl	8009434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2220      	movs	r2, #32
 800922a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e00f      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69da      	ldr	r2, [r3, #28]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4013      	ands	r3, r2
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	429a      	cmp	r2, r3
 8009248:	bf0c      	ite	eq
 800924a:	2301      	moveq	r3, #1
 800924c:	2300      	movne	r3, #0
 800924e:	b2db      	uxtb	r3, r3
 8009250:	461a      	mov	r2, r3
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	429a      	cmp	r2, r3
 8009256:	d0a6      	beq.n	80091a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b096      	sub	sp, #88	; 0x58
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	4613      	mov	r3, r2
 8009270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	88fa      	ldrh	r2, [r7, #6]
 800927c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2222      	movs	r2, #34	; 0x22
 800928c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009296:	2b00      	cmp	r3, #0
 8009298:	d02d      	beq.n	80092f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092a0:	4a40      	ldr	r2, [pc, #256]	; (80093a4 <UART_Start_Receive_DMA+0x140>)
 80092a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092aa:	4a3f      	ldr	r2, [pc, #252]	; (80093a8 <UART_Start_Receive_DMA+0x144>)
 80092ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b4:	4a3d      	ldr	r2, [pc, #244]	; (80093ac <UART_Start_Receive_DMA+0x148>)
 80092b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092be:	2200      	movs	r2, #0
 80092c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3324      	adds	r3, #36	; 0x24
 80092ce:	4619      	mov	r1, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d4:	461a      	mov	r2, r3
 80092d6:	88fb      	ldrh	r3, [r7, #6]
 80092d8:	f7f9 f9c0 	bl	800265c <HAL_DMA_Start_IT>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2210      	movs	r2, #16
 80092e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2220      	movs	r2, #32
 80092ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e051      	b.n	800939a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d018      	beq.n	8009330 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009312:	657b      	str	r3, [r7, #84]	; 0x54
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	461a      	mov	r2, r3
 800931a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800931c:	64bb      	str	r3, [r7, #72]	; 0x48
 800931e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800932a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e6      	bne.n	80092fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3308      	adds	r3, #8
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	653b      	str	r3, [r7, #80]	; 0x50
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3308      	adds	r3, #8
 800934e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009350:	637a      	str	r2, [r7, #52]	; 0x34
 8009352:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	613b      	str	r3, [r7, #16]
   return(result);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009384:	623a      	str	r2, [r7, #32]
 8009386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	69f9      	ldr	r1, [r7, #28]
 800938a:	6a3a      	ldr	r2, [r7, #32]
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	61bb      	str	r3, [r7, #24]
   return(result);
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3758      	adds	r7, #88	; 0x58
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	080095b3 	.word	0x080095b3
 80093a8:	080096db 	.word	0x080096db
 80093ac:	08009719 	.word	0x08009719

080093b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b08f      	sub	sp, #60	; 0x3c
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093d8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e6      	bne.n	80093b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009400:	633b      	str	r3, [r7, #48]	; 0x30
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940a:	61ba      	str	r2, [r7, #24]
 800940c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6979      	ldr	r1, [r7, #20]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	613b      	str	r3, [r7, #16]
   return(result);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e5      	bne.n	80093ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009426:	bf00      	nop
 8009428:	373c      	adds	r7, #60	; 0x3c
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b095      	sub	sp, #84	; 0x54
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800945a:	643b      	str	r3, [r7, #64]	; 0x40
 800945c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e6      	bne.n	800943c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3308      	adds	r3, #8
 8009474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	61fb      	str	r3, [r7, #28]
   return(result);
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	4b1e      	ldr	r3, [pc, #120]	; (80094fc <UART_EndRxTransfer+0xc8>)
 8009482:	4013      	ands	r3, r2
 8009484:	64bb      	str	r3, [r7, #72]	; 0x48
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3308      	adds	r3, #8
 800948c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800948e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e5      	bne.n	800946e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d118      	bne.n	80094dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	e853 3f00 	ldrex	r3, [r3]
 80094b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f023 0310 	bic.w	r3, r3, #16
 80094be:	647b      	str	r3, [r7, #68]	; 0x44
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094cc:	6979      	ldr	r1, [r7, #20]
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	e841 2300 	strex	r3, r2, [r1]
 80094d4:	613b      	str	r3, [r7, #16]
   return(result);
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e6      	bne.n	80094aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2220      	movs	r2, #32
 80094e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	675a      	str	r2, [r3, #116]	; 0x74
}
 80094f0:	bf00      	nop
 80094f2:	3754      	adds	r7, #84	; 0x54
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	effffffe 	.word	0xeffffffe

08009500 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b090      	sub	sp, #64	; 0x40
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009516:	d037      	beq.n	8009588 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951a:	2200      	movs	r2, #0
 800951c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3308      	adds	r3, #8
 8009526:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	623b      	str	r3, [r7, #32]
   return(result);
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009536:	63bb      	str	r3, [r7, #56]	; 0x38
 8009538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3308      	adds	r3, #8
 800953e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009540:	633a      	str	r2, [r7, #48]	; 0x30
 8009542:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009548:	e841 2300 	strex	r3, r2, [r1]
 800954c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1e5      	bne.n	8009520 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	60fb      	str	r3, [r7, #12]
   return(result);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009568:	637b      	str	r3, [r7, #52]	; 0x34
 800956a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009572:	61fb      	str	r3, [r7, #28]
 8009574:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	69b9      	ldr	r1, [r7, #24]
 8009578:	69fa      	ldr	r2, [r7, #28]
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	617b      	str	r3, [r7, #20]
   return(result);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e6      	bne.n	8009554 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009586:	e002      	b.n	800958e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009588:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800958a:	f7fe fe0d 	bl	80081a8 <HAL_UART_TxCpltCallback>
}
 800958e:	bf00      	nop
 8009590:	3740      	adds	r7, #64	; 0x40
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7fe fe09 	bl	80081bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b09c      	sub	sp, #112	; 0x70
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c8:	d071      	beq.n	80096ae <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80095ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80095f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e6      	bne.n	80095d2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3308      	adds	r3, #8
 800960a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009616:	f023 0301 	bic.w	r3, r3, #1
 800961a:	667b      	str	r3, [r7, #100]	; 0x64
 800961c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3308      	adds	r3, #8
 8009622:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009624:	647a      	str	r2, [r7, #68]	; 0x44
 8009626:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800962a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e5      	bne.n	8009604 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3308      	adds	r3, #8
 800963e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	e853 3f00 	ldrex	r3, [r3]
 8009646:	623b      	str	r3, [r7, #32]
   return(result);
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964e:	663b      	str	r3, [r7, #96]	; 0x60
 8009650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3308      	adds	r3, #8
 8009656:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009658:	633a      	str	r2, [r7, #48]	; 0x30
 800965a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800965e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e5      	bne.n	8009638 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800966c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800966e:	2220      	movs	r2, #32
 8009670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009678:	2b01      	cmp	r3, #1
 800967a:	d118      	bne.n	80096ae <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	60fb      	str	r3, [r7, #12]
   return(result);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f023 0310 	bic.w	r3, r3, #16
 8009690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800969a:	61fb      	str	r3, [r7, #28]
 800969c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	69b9      	ldr	r1, [r7, #24]
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	617b      	str	r3, [r7, #20]
   return(result);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e6      	bne.n	800967c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b0:	2200      	movs	r2, #0
 80096b2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d107      	bne.n	80096cc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096c2:	4619      	mov	r1, r3
 80096c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80096c6:	f7fe fda1 	bl	800820c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096ca:	e002      	b.n	80096d2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80096cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80096ce:	f7fe fd7f 	bl	80081d0 <HAL_UART_RxCpltCallback>
}
 80096d2:	bf00      	nop
 80096d4:	3770      	adds	r7, #112	; 0x70
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2201      	movs	r2, #1
 80096ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d109      	bne.n	800970a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096fc:	085b      	lsrs	r3, r3, #1
 80096fe:	b29b      	uxth	r3, r3
 8009700:	4619      	mov	r1, r3
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7fe fd82 	bl	800820c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009708:	e002      	b.n	8009710 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7fe fd6a 	bl	80081e4 <HAL_UART_RxHalfCpltCallback>
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009734:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009740:	2b80      	cmp	r3, #128	; 0x80
 8009742:	d109      	bne.n	8009758 <UART_DMAError+0x40>
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	2b21      	cmp	r3, #33	; 0x21
 8009748:	d106      	bne.n	8009758 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	2200      	movs	r2, #0
 800974e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009752:	6978      	ldr	r0, [r7, #20]
 8009754:	f7ff fe2c 	bl	80093b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009762:	2b40      	cmp	r3, #64	; 0x40
 8009764:	d109      	bne.n	800977a <UART_DMAError+0x62>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b22      	cmp	r3, #34	; 0x22
 800976a:	d106      	bne.n	800977a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2200      	movs	r2, #0
 8009770:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009774:	6978      	ldr	r0, [r7, #20]
 8009776:	f7ff fe5d 	bl	8009434 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009780:	f043 0210 	orr.w	r2, r3, #16
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800978a:	6978      	ldr	r0, [r7, #20]
 800978c:	f7fe fd34 	bl	80081f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009790:	bf00      	nop
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_UARTEx_DisableFifoMode+0x16>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e027      	b.n	80097fe <HAL_UARTEx_DisableFifoMode+0x66>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2224      	movs	r2, #36	; 0x24
 80097ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2220      	movs	r2, #32
 80097f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800981e:	2302      	movs	r3, #2
 8009820:	e02d      	b.n	800987e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2224      	movs	r2, #36	; 0x24
 800982e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f022 0201 	bic.w	r2, r2, #1
 8009848:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f850 	bl	8009904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2220      	movs	r2, #32
 8009870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b084      	sub	sp, #16
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009896:	2b01      	cmp	r3, #1
 8009898:	d101      	bne.n	800989e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800989a:	2302      	movs	r3, #2
 800989c:	e02d      	b.n	80098fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2224      	movs	r2, #36	; 0x24
 80098aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f812 	bl	8009904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2220      	movs	r2, #32
 80098ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009910:	2b00      	cmp	r3, #0
 8009912:	d108      	bne.n	8009926 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009924:	e031      	b.n	800998a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009926:	2310      	movs	r3, #16
 8009928:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800992a:	2310      	movs	r3, #16
 800992c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	0e5b      	lsrs	r3, r3, #25
 8009936:	b2db      	uxtb	r3, r3
 8009938:	f003 0307 	and.w	r3, r3, #7
 800993c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	0f5b      	lsrs	r3, r3, #29
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	7b3a      	ldrb	r2, [r7, #12]
 8009952:	4911      	ldr	r1, [pc, #68]	; (8009998 <UARTEx_SetNbDataToProcess+0x94>)
 8009954:	5c8a      	ldrb	r2, [r1, r2]
 8009956:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800995a:	7b3a      	ldrb	r2, [r7, #12]
 800995c:	490f      	ldr	r1, [pc, #60]	; (800999c <UARTEx_SetNbDataToProcess+0x98>)
 800995e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009960:	fb93 f3f2 	sdiv	r3, r3, r2
 8009964:	b29a      	uxth	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	7b7a      	ldrb	r2, [r7, #13]
 8009970:	4909      	ldr	r1, [pc, #36]	; (8009998 <UARTEx_SetNbDataToProcess+0x94>)
 8009972:	5c8a      	ldrb	r2, [r1, r2]
 8009974:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009978:	7b7a      	ldrb	r2, [r7, #13]
 800997a:	4908      	ldr	r1, [pc, #32]	; (800999c <UARTEx_SetNbDataToProcess+0x98>)
 800997c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800997e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009982:	b29a      	uxth	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800998a:	bf00      	nop
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	08016bbc 	.word	0x08016bbc
 800999c:	08016bc4 	.word	0x08016bc4

080099a0 <__NVIC_SetPriority>:
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80099ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	db0a      	blt.n	80099ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	490c      	ldr	r1, [pc, #48]	; (80099ec <__NVIC_SetPriority+0x4c>)
 80099ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099be:	0112      	lsls	r2, r2, #4
 80099c0:	b2d2      	uxtb	r2, r2
 80099c2:	440b      	add	r3, r1
 80099c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099c8:	e00a      	b.n	80099e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	4908      	ldr	r1, [pc, #32]	; (80099f0 <__NVIC_SetPriority+0x50>)
 80099d0:	88fb      	ldrh	r3, [r7, #6]
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	3b04      	subs	r3, #4
 80099d8:	0112      	lsls	r2, r2, #4
 80099da:	b2d2      	uxtb	r2, r2
 80099dc:	440b      	add	r3, r1
 80099de:	761a      	strb	r2, [r3, #24]
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	e000e100 	.word	0xe000e100
 80099f0:	e000ed00 	.word	0xe000ed00

080099f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <SysTick_Handler+0x1c>)
 80099fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80099fc:	f001 fd4e 	bl	800b49c <xTaskGetSchedulerState>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d001      	beq.n	8009a0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a06:	f002 fb37 	bl	800c078 <xPortSysTickHandler>
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	e000e010 	.word	0xe000e010

08009a14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a18:	2100      	movs	r1, #0
 8009a1a:	f06f 0004 	mvn.w	r0, #4
 8009a1e:	f7ff ffbf 	bl	80099a0 <__NVIC_SetPriority>
#endif
}
 8009a22:	bf00      	nop
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a2e:	f3ef 8305 	mrs	r3, IPSR
 8009a32:	603b      	str	r3, [r7, #0]
  return(result);
 8009a34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a3a:	f06f 0305 	mvn.w	r3, #5
 8009a3e:	607b      	str	r3, [r7, #4]
 8009a40:	e00c      	b.n	8009a5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a42:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <osKernelInitialize+0x44>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a4a:	4b08      	ldr	r3, [pc, #32]	; (8009a6c <osKernelInitialize+0x44>)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	607b      	str	r3, [r7, #4]
 8009a54:	e002      	b.n	8009a5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a5c:	687b      	ldr	r3, [r7, #4]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	240076c4 	.word	0x240076c4

08009a70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a76:	f3ef 8305 	mrs	r3, IPSR
 8009a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8009a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009a82:	f06f 0305 	mvn.w	r3, #5
 8009a86:	607b      	str	r3, [r7, #4]
 8009a88:	e010      	b.n	8009aac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <osKernelStart+0x48>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d109      	bne.n	8009aa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009a92:	f7ff ffbf 	bl	8009a14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009a96:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <osKernelStart+0x48>)
 8009a98:	2202      	movs	r2, #2
 8009a9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009a9c:	f001 f87c 	bl	800ab98 <vTaskStartScheduler>
      stat = osOK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	607b      	str	r3, [r7, #4]
 8009aa4:	e002      	b.n	8009aac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009aac:	687b      	ldr	r3, [r7, #4]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	240076c4 	.word	0x240076c4

08009abc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08e      	sub	sp, #56	; 0x38
 8009ac0:	af04      	add	r7, sp, #16
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009acc:	f3ef 8305 	mrs	r3, IPSR
 8009ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ad2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d17e      	bne.n	8009bd6 <osThreadNew+0x11a>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d07b      	beq.n	8009bd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ade:	2380      	movs	r3, #128	; 0x80
 8009ae0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009ae2:	2318      	movs	r3, #24
 8009ae4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d045      	beq.n	8009b82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <osThreadNew+0x48>
        name = attr->name;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	699b      	ldr	r3, [r3, #24]
 8009b10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d008      	beq.n	8009b2a <osThreadNew+0x6e>
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	2b38      	cmp	r3, #56	; 0x38
 8009b1c:	d805      	bhi.n	8009b2a <osThreadNew+0x6e>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <osThreadNew+0x72>
        return (NULL);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e054      	b.n	8009bd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	089b      	lsrs	r3, r3, #2
 8009b3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00e      	beq.n	8009b64 <osThreadNew+0xa8>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	2ba7      	cmp	r3, #167	; 0xa7
 8009b4c:	d90a      	bls.n	8009b64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d006      	beq.n	8009b64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d002      	beq.n	8009b64 <osThreadNew+0xa8>
        mem = 1;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	e010      	b.n	8009b86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10c      	bne.n	8009b86 <osThreadNew+0xca>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d108      	bne.n	8009b86 <osThreadNew+0xca>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d104      	bne.n	8009b86 <osThreadNew+0xca>
          mem = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	61bb      	str	r3, [r7, #24]
 8009b80:	e001      	b.n	8009b86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d110      	bne.n	8009bae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b94:	9202      	str	r2, [sp, #8]
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6a3a      	ldr	r2, [r7, #32]
 8009ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fe0c 	bl	800a7c0 <xTaskCreateStatic>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	613b      	str	r3, [r7, #16]
 8009bac:	e013      	b.n	8009bd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d110      	bne.n	8009bd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	f107 0310 	add.w	r3, r7, #16
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 fe57 	bl	800a87a <xTaskCreate>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d001      	beq.n	8009bd6 <osThreadNew+0x11a>
            hTask = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009bd6:	693b      	ldr	r3, [r7, #16]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3728      	adds	r7, #40	; 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009be8:	f3ef 8305 	mrs	r3, IPSR
 8009bec:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <osDelay+0x1c>
    stat = osErrorISR;
 8009bf4:	f06f 0305 	mvn.w	r3, #5
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e007      	b.n	8009c0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 ff92 	bl	800ab30 <vTaskDelay>
    }
  }

  return (stat);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4a07      	ldr	r2, [pc, #28]	; (8009c44 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	4a06      	ldr	r2, [pc, #24]	; (8009c48 <vApplicationGetIdleTaskMemory+0x30>)
 8009c2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2280      	movs	r2, #128	; 0x80
 8009c34:	601a      	str	r2, [r3, #0]
}
 8009c36:	bf00      	nop
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	240076c8 	.word	0x240076c8
 8009c48:	24007770 	.word	0x24007770

08009c4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4a07      	ldr	r2, [pc, #28]	; (8009c78 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	4a06      	ldr	r2, [pc, #24]	; (8009c7c <vApplicationGetTimerTaskMemory+0x30>)
 8009c62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c6a:	601a      	str	r2, [r3, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	24007970 	.word	0x24007970
 8009c7c:	24007a18 	.word	0x24007a18

08009c80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f103 0208 	add.w	r2, r3, #8
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f103 0208 	add.w	r2, r3, #8
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f103 0208 	add.w	r2, r3, #8
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cce:	bf00      	nop
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b085      	sub	sp, #20
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	601a      	str	r2, [r3, #0]
}
 8009d16:	bf00      	nop
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d22:	b480      	push	{r7}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d38:	d103      	bne.n	8009d42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	e00c      	b.n	8009d5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	3308      	adds	r3, #8
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	e002      	b.n	8009d50 <vListInsert+0x2e>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d2f6      	bcs.n	8009d4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	601a      	str	r2, [r3, #0]
}
 8009d88:	bf00      	nop
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	6892      	ldr	r2, [r2, #8]
 8009daa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6852      	ldr	r2, [r2, #4]
 8009db4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d103      	bne.n	8009dc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689a      	ldr	r2, [r3, #8]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	1e5a      	subs	r2, r3, #1
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <xQueueGenericReset+0x2a>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60bb      	str	r3, [r7, #8]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e12:	f002 f89f 	bl	800bf54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1e:	68f9      	ldr	r1, [r7, #12]
 8009e20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e22:	fb01 f303 	mul.w	r3, r1, r3
 8009e26:	441a      	add	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e42:	3b01      	subs	r3, #1
 8009e44:	68f9      	ldr	r1, [r7, #12]
 8009e46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e48:	fb01 f303 	mul.w	r3, r1, r3
 8009e4c:	441a      	add	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	22ff      	movs	r2, #255	; 0xff
 8009e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	22ff      	movs	r2, #255	; 0xff
 8009e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d114      	bne.n	8009e92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d01a      	beq.n	8009ea6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3310      	adds	r3, #16
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 f929 	bl	800b0cc <xTaskRemoveFromEventList>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d012      	beq.n	8009ea6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e80:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <xQueueGenericReset+0xcc>)
 8009e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	e009      	b.n	8009ea6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	3310      	adds	r3, #16
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff fef2 	bl	8009c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3324      	adds	r3, #36	; 0x24
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff feed 	bl	8009c80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ea6:	f002 f885 	bl	800bfb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009eaa:	2301      	movs	r3, #1
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	e000ed04 	.word	0xe000ed04

08009eb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08e      	sub	sp, #56	; 0x38
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10a      	bne.n	8009ee2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ede:	bf00      	nop
 8009ee0:	e7fe      	b.n	8009ee0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <xQueueGenericCreateStatic+0x52>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <xQueueGenericCreateStatic+0x56>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e000      	b.n	8009f10 <xQueueGenericCreateStatic+0x58>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	623b      	str	r3, [r7, #32]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d102      	bne.n	8009f36 <xQueueGenericCreateStatic+0x7e>
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <xQueueGenericCreateStatic+0x82>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e000      	b.n	8009f3c <xQueueGenericCreateStatic+0x84>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	61fb      	str	r3, [r7, #28]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f56:	2350      	movs	r3, #80	; 0x50
 8009f58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b50      	cmp	r3, #80	; 0x50
 8009f5e:	d00a      	beq.n	8009f76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	61bb      	str	r3, [r7, #24]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00d      	beq.n	8009f9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4613      	mov	r3, r2
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	68b9      	ldr	r1, [r7, #8]
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 f805 	bl	8009fa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3730      	adds	r7, #48	; 0x30
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d103      	bne.n	8009fc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	e002      	b.n	8009fca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	69b8      	ldr	r0, [r7, #24]
 8009fda:	f7ff ff05 	bl	8009de8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	; 0x38
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ffe:	2300      	movs	r3, #0
 800a000:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <xQueueGenericSend+0x32>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <xQueueGenericSend+0x40>
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <xQueueGenericSend+0x44>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <xQueueGenericSend+0x46>
 800a034:	2300      	movs	r3, #0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <xQueueGenericSend+0x60>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d103      	bne.n	800a05e <xQueueGenericSend+0x6e>
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <xQueueGenericSend+0x72>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <xQueueGenericSend+0x74>
 800a062:	2300      	movs	r3, #0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueGenericSend+0x8e>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	623b      	str	r3, [r7, #32]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a07e:	f001 fa0d 	bl	800b49c <xTaskGetSchedulerState>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <xQueueGenericSend+0x9e>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <xQueueGenericSend+0xa2>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <xQueueGenericSend+0xa4>
 800a092:	2300      	movs	r3, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueGenericSend+0xbe>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	61fb      	str	r3, [r7, #28]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0ae:	f001 ff51 	bl	800bf54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <xQueueGenericSend+0xd4>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d129      	bne.n	800a118 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ca:	f000 fa0b 	bl	800a4e4 <prvCopyDataToQueue>
 800a0ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d010      	beq.n	800a0fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 fff5 	bl	800b0cc <xTaskRemoveFromEventList>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d013      	beq.n	800a110 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0e8:	4b3f      	ldr	r3, [pc, #252]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	e00a      	b.n	800a110 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d007      	beq.n	800a110 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a100:	4b39      	ldr	r3, [pc, #228]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a110:	f001 ff50 	bl	800bfb4 <vPortExitCritical>
				return pdPASS;
 800a114:	2301      	movs	r3, #1
 800a116:	e063      	b.n	800a1e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d103      	bne.n	800a126 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a11e:	f001 ff49 	bl	800bfb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a122:	2300      	movs	r3, #0
 800a124:	e05c      	b.n	800a1e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a12c:	f107 0314 	add.w	r3, r7, #20
 800a130:	4618      	mov	r0, r3
 800a132:	f001 f855 	bl	800b1e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a136:	2301      	movs	r3, #1
 800a138:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a13a:	f001 ff3b 	bl	800bfb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a13e:	f000 fd9b 	bl	800ac78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a142:	f001 ff07 	bl	800bf54 <vPortEnterCritical>
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a14c:	b25b      	sxtb	r3, r3
 800a14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a152:	d103      	bne.n	800a15c <xQueueGenericSend+0x16c>
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a162:	b25b      	sxtb	r3, r3
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a168:	d103      	bne.n	800a172 <xQueueGenericSend+0x182>
 800a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a172:	f001 ff1f 	bl	800bfb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a176:	1d3a      	adds	r2, r7, #4
 800a178:	f107 0314 	add.w	r3, r7, #20
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f001 f844 	bl	800b20c <xTaskCheckForTimeOut>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d124      	bne.n	800a1d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a18a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18c:	f000 faa2 	bl	800a6d4 <prvIsQueueFull>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d018      	beq.n	800a1c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	3310      	adds	r3, #16
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	4611      	mov	r1, r2
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 ff44 	bl	800b02c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a6:	f000 fa2d 	bl	800a604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1aa:	f000 fd73 	bl	800ac94 <xTaskResumeAll>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f47f af7c 	bne.w	800a0ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <xQueueGenericSend+0x1f8>)
 800a1b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	e772      	b.n	800a0ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ca:	f000 fa1b 	bl	800a604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1ce:	f000 fd61 	bl	800ac94 <xTaskResumeAll>
 800a1d2:	e76c      	b.n	800a0ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d6:	f000 fa15 	bl	800a604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1da:	f000 fd5b 	bl	800ac94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3738      	adds	r7, #56	; 0x38
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	e000ed04 	.word	0xe000ed04

0800a1ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b090      	sub	sp, #64	; 0x40
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a216:	bf00      	nop
 800a218:	e7fe      	b.n	800a218 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d103      	bne.n	800a228 <xQueueGenericSendFromISR+0x3c>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <xQueueGenericSendFromISR+0x40>
 800a228:	2301      	movs	r3, #1
 800a22a:	e000      	b.n	800a22e <xQueueGenericSendFromISR+0x42>
 800a22c:	2300      	movs	r3, #0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d103      	bne.n	800a256 <xQueueGenericSendFromISR+0x6a>
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a252:	2b01      	cmp	r3, #1
 800a254:	d101      	bne.n	800a25a <xQueueGenericSendFromISR+0x6e>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <xQueueGenericSendFromISR+0x70>
 800a25a:	2300      	movs	r3, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	623b      	str	r3, [r7, #32]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a276:	f001 ff4f 	bl	800c118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a27a:	f3ef 8211 	mrs	r2, BASEPRI
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	61fa      	str	r2, [r7, #28]
 800a290:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a292:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a294:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d302      	bcc.n	800a2a8 <xQueueGenericSendFromISR+0xbc>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d12f      	bne.n	800a308 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2be:	f000 f911 	bl	800a4e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2ca:	d112      	bne.n	800a2f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d016      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d6:	3324      	adds	r3, #36	; 0x24
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 fef7 	bl	800b0cc <xTaskRemoveFromEventList>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00e      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	e007      	b.n	800a302 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	b25a      	sxtb	r2, r3
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a302:	2301      	movs	r3, #1
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a306:	e001      	b.n	800a30c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a308:	2300      	movs	r3, #0
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a316:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3740      	adds	r7, #64	; 0x40
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08c      	sub	sp, #48	; 0x30
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a330:	2300      	movs	r3, #0
 800a332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10a      	bne.n	800a354 <xQueueReceive+0x30>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	623b      	str	r3, [r7, #32]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <xQueueReceive+0x3e>
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <xQueueReceive+0x42>
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <xQueueReceive+0x44>
 800a366:	2300      	movs	r3, #0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <xQueueReceive+0x5e>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	61fb      	str	r3, [r7, #28]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a382:	f001 f88b 	bl	800b49c <xTaskGetSchedulerState>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d102      	bne.n	800a392 <xQueueReceive+0x6e>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <xQueueReceive+0x72>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <xQueueReceive+0x74>
 800a396:	2300      	movs	r3, #0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10a      	bne.n	800a3b2 <xQueueReceive+0x8e>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	61bb      	str	r3, [r7, #24]
}
 800a3ae:	bf00      	nop
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3b2:	f001 fdcf 	bl	800bf54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01f      	beq.n	800a402 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3c2:	68b9      	ldr	r1, [r7, #8]
 800a3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3c6:	f000 f8f7 	bl	800a5b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	1e5a      	subs	r2, r3, #1
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00f      	beq.n	800a3fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	3310      	adds	r3, #16
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 fe74 	bl	800b0cc <xTaskRemoveFromEventList>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d007      	beq.n	800a3fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3ea:	4b3d      	ldr	r3, [pc, #244]	; (800a4e0 <xQueueReceive+0x1bc>)
 800a3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3fa:	f001 fddb 	bl	800bfb4 <vPortExitCritical>
				return pdPASS;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e069      	b.n	800a4d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d103      	bne.n	800a410 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a408:	f001 fdd4 	bl	800bfb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a40c:	2300      	movs	r3, #0
 800a40e:	e062      	b.n	800a4d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a416:	f107 0310 	add.w	r3, r7, #16
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fee0 	bl	800b1e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a420:	2301      	movs	r3, #1
 800a422:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a424:	f001 fdc6 	bl	800bfb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a428:	f000 fc26 	bl	800ac78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a42c:	f001 fd92 	bl	800bf54 <vPortEnterCritical>
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a436:	b25b      	sxtb	r3, r3
 800a438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a43c:	d103      	bne.n	800a446 <xQueueReceive+0x122>
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a44c:	b25b      	sxtb	r3, r3
 800a44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a452:	d103      	bne.n	800a45c <xQueueReceive+0x138>
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	2200      	movs	r2, #0
 800a458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a45c:	f001 fdaa 	bl	800bfb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a460:	1d3a      	adds	r2, r7, #4
 800a462:	f107 0310 	add.w	r3, r7, #16
 800a466:	4611      	mov	r1, r2
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 fecf 	bl	800b20c <xTaskCheckForTimeOut>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d123      	bne.n	800a4bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a476:	f000 f917 	bl	800a6a8 <prvIsQueueEmpty>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d017      	beq.n	800a4b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	3324      	adds	r3, #36	; 0x24
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fdcf 	bl	800b02c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a490:	f000 f8b8 	bl	800a604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a494:	f000 fbfe 	bl	800ac94 <xTaskResumeAll>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d189      	bne.n	800a3b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a49e:	4b10      	ldr	r3, [pc, #64]	; (800a4e0 <xQueueReceive+0x1bc>)
 800a4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	e780      	b.n	800a3b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b2:	f000 f8a7 	bl	800a604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4b6:	f000 fbed 	bl	800ac94 <xTaskResumeAll>
 800a4ba:	e77a      	b.n	800a3b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4be:	f000 f8a1 	bl	800a604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c2:	f000 fbe7 	bl	800ac94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c8:	f000 f8ee 	bl	800a6a8 <prvIsQueueEmpty>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f43f af6f 	beq.w	800a3b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3730      	adds	r7, #48	; 0x30
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	e000ed04 	.word	0xe000ed04

0800a4e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10d      	bne.n	800a51e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d14d      	bne.n	800a5a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 ffe2 	bl	800b4d8 <xTaskPriorityDisinherit>
 800a514:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	609a      	str	r2, [r3, #8]
 800a51c:	e043      	b.n	800a5a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d119      	bne.n	800a558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6858      	ldr	r0, [r3, #4]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52c:	461a      	mov	r2, r3
 800a52e:	68b9      	ldr	r1, [r7, #8]
 800a530:	f00b fbc9 	bl	8015cc6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53c:	441a      	add	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d32b      	bcc.n	800a5a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	605a      	str	r2, [r3, #4]
 800a556:	e026      	b.n	800a5a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68d8      	ldr	r0, [r3, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	461a      	mov	r2, r3
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	f00b fbaf 	bl	8015cc6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	68da      	ldr	r2, [r3, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a570:	425b      	negs	r3, r3
 800a572:	441a      	add	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d207      	bcs.n	800a594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58c:	425b      	negs	r3, r3
 800a58e:	441a      	add	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d105      	bne.n	800a5a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a5ae:	697b      	ldr	r3, [r7, #20]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d018      	beq.n	800a5fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d2:	441a      	add	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d303      	bcc.n	800a5ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68d9      	ldr	r1, [r3, #12]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	6838      	ldr	r0, [r7, #0]
 800a5f8:	f00b fb65 	bl	8015cc6 <memcpy>
	}
}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a60c:	f001 fca2 	bl	800bf54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a618:	e011      	b.n	800a63e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d012      	beq.n	800a648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3324      	adds	r3, #36	; 0x24
 800a626:	4618      	mov	r0, r3
 800a628:	f000 fd50 	bl	800b0cc <xTaskRemoveFromEventList>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a632:	f000 fe4d 	bl	800b2d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	3b01      	subs	r3, #1
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a63e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a642:	2b00      	cmp	r3, #0
 800a644:	dce9      	bgt.n	800a61a <prvUnlockQueue+0x16>
 800a646:	e000      	b.n	800a64a <prvUnlockQueue+0x46>
					break;
 800a648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	22ff      	movs	r2, #255	; 0xff
 800a64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a652:	f001 fcaf 	bl	800bfb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a656:	f001 fc7d 	bl	800bf54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a662:	e011      	b.n	800a688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d012      	beq.n	800a692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3310      	adds	r3, #16
 800a670:	4618      	mov	r0, r3
 800a672:	f000 fd2b 	bl	800b0cc <xTaskRemoveFromEventList>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a67c:	f000 fe28 	bl	800b2d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a680:	7bbb      	ldrb	r3, [r7, #14]
 800a682:	3b01      	subs	r3, #1
 800a684:	b2db      	uxtb	r3, r3
 800a686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dce9      	bgt.n	800a664 <prvUnlockQueue+0x60>
 800a690:	e000      	b.n	800a694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	22ff      	movs	r2, #255	; 0xff
 800a698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a69c:	f001 fc8a 	bl	800bfb4 <vPortExitCritical>
}
 800a6a0:	bf00      	nop
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6b0:	f001 fc50 	bl	800bf54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	e001      	b.n	800a6c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6c6:	f001 fc75 	bl	800bfb4 <vPortExitCritical>

	return xReturn;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6dc:	f001 fc3a 	bl	800bf54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d102      	bne.n	800a6f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	e001      	b.n	800a6f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6f6:	f001 fc5d 	bl	800bfb4 <vPortExitCritical>

	return xReturn;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a70e:	2300      	movs	r3, #0
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	e014      	b.n	800a73e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a714:	4a0f      	ldr	r2, [pc, #60]	; (800a754 <vQueueAddToRegistry+0x50>)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10b      	bne.n	800a738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a720:	490c      	ldr	r1, [pc, #48]	; (800a754 <vQueueAddToRegistry+0x50>)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a72a:	4a0a      	ldr	r2, [pc, #40]	; (800a754 <vQueueAddToRegistry+0x50>)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	4413      	add	r3, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a736:	e006      	b.n	800a746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	3301      	adds	r3, #1
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b07      	cmp	r3, #7
 800a742:	d9e7      	bls.n	800a714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	24007e18 	.word	0x24007e18

0800a758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a768:	f001 fbf4 	bl	800bf54 <vPortEnterCritical>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a772:	b25b      	sxtb	r3, r3
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a778:	d103      	bne.n	800a782 <vQueueWaitForMessageRestricted+0x2a>
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a788:	b25b      	sxtb	r3, r3
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a78e:	d103      	bne.n	800a798 <vQueueWaitForMessageRestricted+0x40>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a798:	f001 fc0c 	bl	800bfb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d106      	bne.n	800a7b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	3324      	adds	r3, #36	; 0x24
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fc61 	bl	800b074 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a7b2:	6978      	ldr	r0, [r7, #20]
 800a7b4:	f7ff ff26 	bl	800a604 <prvUnlockQueue>
	}
 800a7b8:	bf00      	nop
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b08e      	sub	sp, #56	; 0x38
 800a7c4:	af04      	add	r7, sp, #16
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10a      	bne.n	800a7ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800a7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	623b      	str	r3, [r7, #32]
}
 800a7e6:	bf00      	nop
 800a7e8:	e7fe      	b.n	800a7e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10a      	bne.n	800a806 <xTaskCreateStatic+0x46>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	61fb      	str	r3, [r7, #28]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a806:	23a8      	movs	r3, #168	; 0xa8
 800a808:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2ba8      	cmp	r3, #168	; 0xa8
 800a80e:	d00a      	beq.n	800a826 <xTaskCreateStatic+0x66>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	61bb      	str	r3, [r7, #24]
}
 800a822:	bf00      	nop
 800a824:	e7fe      	b.n	800a824 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a826:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d01e      	beq.n	800a86c <xTaskCreateStatic+0xac>
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	2b00      	cmp	r3, #0
 800a832:	d01b      	beq.n	800a86c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a83c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	2202      	movs	r2, #2
 800a842:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a846:	2300      	movs	r3, #0
 800a848:	9303      	str	r3, [sp, #12]
 800a84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84c:	9302      	str	r3, [sp, #8]
 800a84e:	f107 0314 	add.w	r3, r7, #20
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	68b9      	ldr	r1, [r7, #8]
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f000 f850 	bl	800a904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a866:	f000 f8f3 	bl	800aa50 <prvAddNewTaskToReadyList>
 800a86a:	e001      	b.n	800a870 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a870:	697b      	ldr	r3, [r7, #20]
	}
 800a872:	4618      	mov	r0, r3
 800a874:	3728      	adds	r7, #40	; 0x28
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b08c      	sub	sp, #48	; 0x30
 800a87e:	af04      	add	r7, sp, #16
 800a880:	60f8      	str	r0, [r7, #12]
 800a882:	60b9      	str	r1, [r7, #8]
 800a884:	603b      	str	r3, [r7, #0]
 800a886:	4613      	mov	r3, r2
 800a888:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a88a:	88fb      	ldrh	r3, [r7, #6]
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4618      	mov	r0, r3
 800a890:	f001 fc82 	bl	800c198 <pvPortMalloc>
 800a894:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00e      	beq.n	800a8ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a89c:	20a8      	movs	r0, #168	; 0xa8
 800a89e:	f001 fc7b 	bl	800c198 <pvPortMalloc>
 800a8a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	631a      	str	r2, [r3, #48]	; 0x30
 800a8b0:	e005      	b.n	800a8be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a8b2:	6978      	ldr	r0, [r7, #20]
 800a8b4:	f001 fd3c 	bl	800c330 <vPortFree>
 800a8b8:	e001      	b.n	800a8be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d017      	beq.n	800a8f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8cc:	88fa      	ldrh	r2, [r7, #6]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	9302      	str	r3, [sp, #8]
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	68b9      	ldr	r1, [r7, #8]
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f80e 	bl	800a904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8e8:	69f8      	ldr	r0, [r7, #28]
 800a8ea:	f000 f8b1 	bl	800aa50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	61bb      	str	r3, [r7, #24]
 800a8f2:	e002      	b.n	800a8fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a8fa:	69bb      	ldr	r3, [r7, #24]
	}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3720      	adds	r7, #32
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	461a      	mov	r2, r3
 800a91c:	21a5      	movs	r1, #165	; 0xa5
 800a91e:	f00b f8b3 	bl	8015a88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a92c:	440b      	add	r3, r1
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	4413      	add	r3, r2
 800a932:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	f023 0307 	bic.w	r3, r3, #7
 800a93a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	f003 0307 	and.w	r3, r3, #7
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	617b      	str	r3, [r7, #20]
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01f      	beq.n	800a9a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a962:	2300      	movs	r3, #0
 800a964:	61fb      	str	r3, [r7, #28]
 800a966:	e012      	b.n	800a98e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	4413      	add	r3, r2
 800a96e:	7819      	ldrb	r1, [r3, #0]
 800a970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	4413      	add	r3, r2
 800a976:	3334      	adds	r3, #52	; 0x34
 800a978:	460a      	mov	r2, r1
 800a97a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	4413      	add	r3, r2
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d006      	beq.n	800a996 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	3301      	adds	r3, #1
 800a98c:	61fb      	str	r3, [r7, #28]
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	2b0f      	cmp	r3, #15
 800a992:	d9e9      	bls.n	800a968 <prvInitialiseNewTask+0x64>
 800a994:	e000      	b.n	800a998 <prvInitialiseNewTask+0x94>
			{
				break;
 800a996:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9a0:	e003      	b.n	800a9aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	2b37      	cmp	r3, #55	; 0x37
 800a9ae:	d901      	bls.n	800a9b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a9b0:	2337      	movs	r3, #55	; 0x37
 800a9b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff f978 	bl	8009cc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d2:	3318      	adds	r3, #24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff f973 	bl	8009cc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	3354      	adds	r3, #84	; 0x54
 800aa04:	224c      	movs	r2, #76	; 0x4c
 800aa06:	2100      	movs	r1, #0
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f00b f83d 	bl	8015a88 <memset>
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	4a0c      	ldr	r2, [pc, #48]	; (800aa44 <prvInitialiseNewTask+0x140>)
 800aa12:	659a      	str	r2, [r3, #88]	; 0x58
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	4a0c      	ldr	r2, [pc, #48]	; (800aa48 <prvInitialiseNewTask+0x144>)
 800aa18:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	4a0b      	ldr	r2, [pc, #44]	; (800aa4c <prvInitialiseNewTask+0x148>)
 800aa1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	68f9      	ldr	r1, [r7, #12]
 800aa24:	69b8      	ldr	r0, [r7, #24]
 800aa26:	f001 f967 	bl	800bcf8 <pxPortInitialiseStack>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d002      	beq.n	800aa3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa3c:	bf00      	nop
 800aa3e:	3720      	adds	r7, #32
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	24010bc0 	.word	0x24010bc0
 800aa48:	24010c28 	.word	0x24010c28
 800aa4c:	24010c90 	.word	0x24010c90

0800aa50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa58:	f001 fa7c 	bl	800bf54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa5c:	4b2d      	ldr	r3, [pc, #180]	; (800ab14 <prvAddNewTaskToReadyList+0xc4>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	4a2c      	ldr	r2, [pc, #176]	; (800ab14 <prvAddNewTaskToReadyList+0xc4>)
 800aa64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa66:	4b2c      	ldr	r3, [pc, #176]	; (800ab18 <prvAddNewTaskToReadyList+0xc8>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d109      	bne.n	800aa82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aa6e:	4a2a      	ldr	r2, [pc, #168]	; (800ab18 <prvAddNewTaskToReadyList+0xc8>)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa74:	4b27      	ldr	r3, [pc, #156]	; (800ab14 <prvAddNewTaskToReadyList+0xc4>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d110      	bne.n	800aa9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa7c:	f000 fc4c 	bl	800b318 <prvInitialiseTaskLists>
 800aa80:	e00d      	b.n	800aa9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa82:	4b26      	ldr	r3, [pc, #152]	; (800ab1c <prvAddNewTaskToReadyList+0xcc>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d109      	bne.n	800aa9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa8a:	4b23      	ldr	r3, [pc, #140]	; (800ab18 <prvAddNewTaskToReadyList+0xc8>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d802      	bhi.n	800aa9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa98:	4a1f      	ldr	r2, [pc, #124]	; (800ab18 <prvAddNewTaskToReadyList+0xc8>)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa9e:	4b20      	ldr	r3, [pc, #128]	; (800ab20 <prvAddNewTaskToReadyList+0xd0>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	4a1e      	ldr	r2, [pc, #120]	; (800ab20 <prvAddNewTaskToReadyList+0xd0>)
 800aaa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aaa8:	4b1d      	ldr	r3, [pc, #116]	; (800ab20 <prvAddNewTaskToReadyList+0xd0>)
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab4:	4b1b      	ldr	r3, [pc, #108]	; (800ab24 <prvAddNewTaskToReadyList+0xd4>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d903      	bls.n	800aac4 <prvAddNewTaskToReadyList+0x74>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	4a18      	ldr	r2, [pc, #96]	; (800ab24 <prvAddNewTaskToReadyList+0xd4>)
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4a15      	ldr	r2, [pc, #84]	; (800ab28 <prvAddNewTaskToReadyList+0xd8>)
 800aad2:	441a      	add	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3304      	adds	r3, #4
 800aad8:	4619      	mov	r1, r3
 800aada:	4610      	mov	r0, r2
 800aadc:	f7ff f8fd 	bl	8009cda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aae0:	f001 fa68 	bl	800bfb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aae4:	4b0d      	ldr	r3, [pc, #52]	; (800ab1c <prvAddNewTaskToReadyList+0xcc>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00e      	beq.n	800ab0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aaec:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <prvAddNewTaskToReadyList+0xc8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d207      	bcs.n	800ab0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aafa:	4b0c      	ldr	r3, [pc, #48]	; (800ab2c <prvAddNewTaskToReadyList+0xdc>)
 800aafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab0a:	bf00      	nop
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	2400832c 	.word	0x2400832c
 800ab18:	24007e58 	.word	0x24007e58
 800ab1c:	24008338 	.word	0x24008338
 800ab20:	24008348 	.word	0x24008348
 800ab24:	24008334 	.word	0x24008334
 800ab28:	24007e5c 	.word	0x24007e5c
 800ab2c:	e000ed04 	.word	0xe000ed04

0800ab30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d017      	beq.n	800ab72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab42:	4b13      	ldr	r3, [pc, #76]	; (800ab90 <vTaskDelay+0x60>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <vTaskDelay+0x30>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	60bb      	str	r3, [r7, #8]
}
 800ab5c:	bf00      	nop
 800ab5e:	e7fe      	b.n	800ab5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ab60:	f000 f88a 	bl	800ac78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab64:	2100      	movs	r1, #0
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fd24 	bl	800b5b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab6c:	f000 f892 	bl	800ac94 <xTaskResumeAll>
 800ab70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d107      	bne.n	800ab88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ab78:	4b06      	ldr	r3, [pc, #24]	; (800ab94 <vTaskDelay+0x64>)
 800ab7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab88:	bf00      	nop
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	24008354 	.word	0x24008354
 800ab94:	e000ed04 	.word	0xe000ed04

0800ab98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08a      	sub	sp, #40	; 0x28
 800ab9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aba6:	463a      	mov	r2, r7
 800aba8:	1d39      	adds	r1, r7, #4
 800abaa:	f107 0308 	add.w	r3, r7, #8
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff f832 	bl	8009c18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	9202      	str	r2, [sp, #8]
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	2300      	movs	r3, #0
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	2300      	movs	r3, #0
 800abc4:	460a      	mov	r2, r1
 800abc6:	4924      	ldr	r1, [pc, #144]	; (800ac58 <vTaskStartScheduler+0xc0>)
 800abc8:	4824      	ldr	r0, [pc, #144]	; (800ac5c <vTaskStartScheduler+0xc4>)
 800abca:	f7ff fdf9 	bl	800a7c0 <xTaskCreateStatic>
 800abce:	4603      	mov	r3, r0
 800abd0:	4a23      	ldr	r2, [pc, #140]	; (800ac60 <vTaskStartScheduler+0xc8>)
 800abd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800abd4:	4b22      	ldr	r3, [pc, #136]	; (800ac60 <vTaskStartScheduler+0xc8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800abdc:	2301      	movs	r3, #1
 800abde:	617b      	str	r3, [r7, #20]
 800abe0:	e001      	b.n	800abe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d102      	bne.n	800abf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800abec:	f000 fd36 	bl	800b65c <xTimerCreateTimerTask>
 800abf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d11b      	bne.n	800ac30 <vTaskStartScheduler+0x98>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	613b      	str	r3, [r7, #16]
}
 800ac0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac0c:	4b15      	ldr	r3, [pc, #84]	; (800ac64 <vTaskStartScheduler+0xcc>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3354      	adds	r3, #84	; 0x54
 800ac12:	4a15      	ldr	r2, [pc, #84]	; (800ac68 <vTaskStartScheduler+0xd0>)
 800ac14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac16:	4b15      	ldr	r3, [pc, #84]	; (800ac6c <vTaskStartScheduler+0xd4>)
 800ac18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac1e:	4b14      	ldr	r3, [pc, #80]	; (800ac70 <vTaskStartScheduler+0xd8>)
 800ac20:	2201      	movs	r2, #1
 800ac22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac24:	4b13      	ldr	r3, [pc, #76]	; (800ac74 <vTaskStartScheduler+0xdc>)
 800ac26:	2200      	movs	r2, #0
 800ac28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac2a:	f001 f8f1 	bl	800be10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac2e:	e00e      	b.n	800ac4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac36:	d10a      	bne.n	800ac4e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	60fb      	str	r3, [r7, #12]
}
 800ac4a:	bf00      	nop
 800ac4c:	e7fe      	b.n	800ac4c <vTaskStartScheduler+0xb4>
}
 800ac4e:	bf00      	nop
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	08016b44 	.word	0x08016b44
 800ac5c:	0800b2e9 	.word	0x0800b2e9
 800ac60:	24008350 	.word	0x24008350
 800ac64:	24007e58 	.word	0x24007e58
 800ac68:	24000110 	.word	0x24000110
 800ac6c:	2400834c 	.word	0x2400834c
 800ac70:	24008338 	.word	0x24008338
 800ac74:	24008330 	.word	0x24008330

0800ac78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac78:	b480      	push	{r7}
 800ac7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <vTaskSuspendAll+0x18>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3301      	adds	r3, #1
 800ac82:	4a03      	ldr	r2, [pc, #12]	; (800ac90 <vTaskSuspendAll+0x18>)
 800ac84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ac86:	bf00      	nop
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	24008354 	.word	0x24008354

0800ac94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aca2:	4b42      	ldr	r3, [pc, #264]	; (800adac <xTaskResumeAll+0x118>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10a      	bne.n	800acc0 <xTaskResumeAll+0x2c>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	603b      	str	r3, [r7, #0]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800acc0:	f001 f948 	bl	800bf54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800acc4:	4b39      	ldr	r3, [pc, #228]	; (800adac <xTaskResumeAll+0x118>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	3b01      	subs	r3, #1
 800acca:	4a38      	ldr	r2, [pc, #224]	; (800adac <xTaskResumeAll+0x118>)
 800accc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acce:	4b37      	ldr	r3, [pc, #220]	; (800adac <xTaskResumeAll+0x118>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d162      	bne.n	800ad9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800acd6:	4b36      	ldr	r3, [pc, #216]	; (800adb0 <xTaskResumeAll+0x11c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d05e      	beq.n	800ad9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acde:	e02f      	b.n	800ad40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ace0:	4b34      	ldr	r3, [pc, #208]	; (800adb4 <xTaskResumeAll+0x120>)
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3318      	adds	r3, #24
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff f851 	bl	8009d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3304      	adds	r3, #4
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff f84c 	bl	8009d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad00:	4b2d      	ldr	r3, [pc, #180]	; (800adb8 <xTaskResumeAll+0x124>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d903      	bls.n	800ad10 <xTaskResumeAll+0x7c>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0c:	4a2a      	ldr	r2, [pc, #168]	; (800adb8 <xTaskResumeAll+0x124>)
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4a27      	ldr	r2, [pc, #156]	; (800adbc <xTaskResumeAll+0x128>)
 800ad1e:	441a      	add	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3304      	adds	r3, #4
 800ad24:	4619      	mov	r1, r3
 800ad26:	4610      	mov	r0, r2
 800ad28:	f7fe ffd7 	bl	8009cda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad30:	4b23      	ldr	r3, [pc, #140]	; (800adc0 <xTaskResumeAll+0x12c>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d302      	bcc.n	800ad40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ad3a:	4b22      	ldr	r3, [pc, #136]	; (800adc4 <xTaskResumeAll+0x130>)
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad40:	4b1c      	ldr	r3, [pc, #112]	; (800adb4 <xTaskResumeAll+0x120>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1cb      	bne.n	800ace0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad4e:	f000 fb85 	bl	800b45c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad52:	4b1d      	ldr	r3, [pc, #116]	; (800adc8 <xTaskResumeAll+0x134>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d010      	beq.n	800ad80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad5e:	f000 f847 	bl	800adf0 <xTaskIncrementTick>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d002      	beq.n	800ad6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ad68:	4b16      	ldr	r3, [pc, #88]	; (800adc4 <xTaskResumeAll+0x130>)
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1f1      	bne.n	800ad5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ad7a:	4b13      	ldr	r3, [pc, #76]	; (800adc8 <xTaskResumeAll+0x134>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad80:	4b10      	ldr	r3, [pc, #64]	; (800adc4 <xTaskResumeAll+0x130>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d009      	beq.n	800ad9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad8c:	4b0f      	ldr	r3, [pc, #60]	; (800adcc <xTaskResumeAll+0x138>)
 800ad8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad9c:	f001 f90a 	bl	800bfb4 <vPortExitCritical>

	return xAlreadyYielded;
 800ada0:	68bb      	ldr	r3, [r7, #8]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	24008354 	.word	0x24008354
 800adb0:	2400832c 	.word	0x2400832c
 800adb4:	240082ec 	.word	0x240082ec
 800adb8:	24008334 	.word	0x24008334
 800adbc:	24007e5c 	.word	0x24007e5c
 800adc0:	24007e58 	.word	0x24007e58
 800adc4:	24008340 	.word	0x24008340
 800adc8:	2400833c 	.word	0x2400833c
 800adcc:	e000ed04 	.word	0xe000ed04

0800add0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <xTaskGetTickCount+0x1c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800addc:	687b      	ldr	r3, [r7, #4]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	24008330 	.word	0x24008330

0800adf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adf6:	2300      	movs	r3, #0
 800adf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adfa:	4b4f      	ldr	r3, [pc, #316]	; (800af38 <xTaskIncrementTick+0x148>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f040 808f 	bne.w	800af22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae04:	4b4d      	ldr	r3, [pc, #308]	; (800af3c <xTaskIncrementTick+0x14c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae0c:	4a4b      	ldr	r2, [pc, #300]	; (800af3c <xTaskIncrementTick+0x14c>)
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d120      	bne.n	800ae5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae18:	4b49      	ldr	r3, [pc, #292]	; (800af40 <xTaskIncrementTick+0x150>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00a      	beq.n	800ae38 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	603b      	str	r3, [r7, #0]
}
 800ae34:	bf00      	nop
 800ae36:	e7fe      	b.n	800ae36 <xTaskIncrementTick+0x46>
 800ae38:	4b41      	ldr	r3, [pc, #260]	; (800af40 <xTaskIncrementTick+0x150>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60fb      	str	r3, [r7, #12]
 800ae3e:	4b41      	ldr	r3, [pc, #260]	; (800af44 <xTaskIncrementTick+0x154>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a3f      	ldr	r2, [pc, #252]	; (800af40 <xTaskIncrementTick+0x150>)
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	4a3f      	ldr	r2, [pc, #252]	; (800af44 <xTaskIncrementTick+0x154>)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6013      	str	r3, [r2, #0]
 800ae4c:	4b3e      	ldr	r3, [pc, #248]	; (800af48 <xTaskIncrementTick+0x158>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3301      	adds	r3, #1
 800ae52:	4a3d      	ldr	r2, [pc, #244]	; (800af48 <xTaskIncrementTick+0x158>)
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	f000 fb01 	bl	800b45c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae5a:	4b3c      	ldr	r3, [pc, #240]	; (800af4c <xTaskIncrementTick+0x15c>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d349      	bcc.n	800aef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae64:	4b36      	ldr	r3, [pc, #216]	; (800af40 <xTaskIncrementTick+0x150>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d104      	bne.n	800ae78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6e:	4b37      	ldr	r3, [pc, #220]	; (800af4c <xTaskIncrementTick+0x15c>)
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae74:	601a      	str	r2, [r3, #0]
					break;
 800ae76:	e03f      	b.n	800aef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae78:	4b31      	ldr	r3, [pc, #196]	; (800af40 <xTaskIncrementTick+0x150>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d203      	bcs.n	800ae98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae90:	4a2e      	ldr	r2, [pc, #184]	; (800af4c <xTaskIncrementTick+0x15c>)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae96:	e02f      	b.n	800aef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fe ff79 	bl	8009d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d004      	beq.n	800aeb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	3318      	adds	r3, #24
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe ff70 	bl	8009d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb8:	4b25      	ldr	r3, [pc, #148]	; (800af50 <xTaskIncrementTick+0x160>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d903      	bls.n	800aec8 <xTaskIncrementTick+0xd8>
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec4:	4a22      	ldr	r2, [pc, #136]	; (800af50 <xTaskIncrementTick+0x160>)
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4a1f      	ldr	r2, [pc, #124]	; (800af54 <xTaskIncrementTick+0x164>)
 800aed6:	441a      	add	r2, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	3304      	adds	r3, #4
 800aedc:	4619      	mov	r1, r3
 800aede:	4610      	mov	r0, r2
 800aee0:	f7fe fefb 	bl	8009cda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <xTaskIncrementTick+0x168>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d3b8      	bcc.n	800ae64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aef2:	2301      	movs	r3, #1
 800aef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aef6:	e7b5      	b.n	800ae64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aef8:	4b17      	ldr	r3, [pc, #92]	; (800af58 <xTaskIncrementTick+0x168>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefe:	4915      	ldr	r1, [pc, #84]	; (800af54 <xTaskIncrementTick+0x164>)
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	440b      	add	r3, r1
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d901      	bls.n	800af14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af14:	4b11      	ldr	r3, [pc, #68]	; (800af5c <xTaskIncrementTick+0x16c>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af1c:	2301      	movs	r3, #1
 800af1e:	617b      	str	r3, [r7, #20]
 800af20:	e004      	b.n	800af2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af22:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <xTaskIncrementTick+0x170>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3301      	adds	r3, #1
 800af28:	4a0d      	ldr	r2, [pc, #52]	; (800af60 <xTaskIncrementTick+0x170>)
 800af2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af2c:	697b      	ldr	r3, [r7, #20]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	24008354 	.word	0x24008354
 800af3c:	24008330 	.word	0x24008330
 800af40:	240082e4 	.word	0x240082e4
 800af44:	240082e8 	.word	0x240082e8
 800af48:	24008344 	.word	0x24008344
 800af4c:	2400834c 	.word	0x2400834c
 800af50:	24008334 	.word	0x24008334
 800af54:	24007e5c 	.word	0x24007e5c
 800af58:	24007e58 	.word	0x24007e58
 800af5c:	24008340 	.word	0x24008340
 800af60:	2400833c 	.word	0x2400833c

0800af64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af6a:	4b2a      	ldr	r3, [pc, #168]	; (800b014 <vTaskSwitchContext+0xb0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af72:	4b29      	ldr	r3, [pc, #164]	; (800b018 <vTaskSwitchContext+0xb4>)
 800af74:	2201      	movs	r2, #1
 800af76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af78:	e046      	b.n	800b008 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800af7a:	4b27      	ldr	r3, [pc, #156]	; (800b018 <vTaskSwitchContext+0xb4>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af80:	4b26      	ldr	r3, [pc, #152]	; (800b01c <vTaskSwitchContext+0xb8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	e010      	b.n	800afaa <vTaskSwitchContext+0x46>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10a      	bne.n	800afa4 <vTaskSwitchContext+0x40>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	607b      	str	r3, [r7, #4]
}
 800afa0:	bf00      	nop
 800afa2:	e7fe      	b.n	800afa2 <vTaskSwitchContext+0x3e>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	60fb      	str	r3, [r7, #12]
 800afaa:	491d      	ldr	r1, [pc, #116]	; (800b020 <vTaskSwitchContext+0xbc>)
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0e4      	beq.n	800af88 <vTaskSwitchContext+0x24>
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	4613      	mov	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4413      	add	r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4a15      	ldr	r2, [pc, #84]	; (800b020 <vTaskSwitchContext+0xbc>)
 800afca:	4413      	add	r3, r2
 800afcc:	60bb      	str	r3, [r7, #8]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	685a      	ldr	r2, [r3, #4]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	605a      	str	r2, [r3, #4]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	3308      	adds	r3, #8
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d104      	bne.n	800afee <vTaskSwitchContext+0x8a>
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	605a      	str	r2, [r3, #4]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	4a0b      	ldr	r2, [pc, #44]	; (800b024 <vTaskSwitchContext+0xc0>)
 800aff6:	6013      	str	r3, [r2, #0]
 800aff8:	4a08      	ldr	r2, [pc, #32]	; (800b01c <vTaskSwitchContext+0xb8>)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800affe:	4b09      	ldr	r3, [pc, #36]	; (800b024 <vTaskSwitchContext+0xc0>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3354      	adds	r3, #84	; 0x54
 800b004:	4a08      	ldr	r2, [pc, #32]	; (800b028 <vTaskSwitchContext+0xc4>)
 800b006:	6013      	str	r3, [r2, #0]
}
 800b008:	bf00      	nop
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	24008354 	.word	0x24008354
 800b018:	24008340 	.word	0x24008340
 800b01c:	24008334 	.word	0x24008334
 800b020:	24007e5c 	.word	0x24007e5c
 800b024:	24007e58 	.word	0x24007e58
 800b028:	24000110 	.word	0x24000110

0800b02c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10a      	bne.n	800b052 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	60fb      	str	r3, [r7, #12]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b052:	4b07      	ldr	r3, [pc, #28]	; (800b070 <vTaskPlaceOnEventList+0x44>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3318      	adds	r3, #24
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7fe fe61 	bl	8009d22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b060:	2101      	movs	r1, #1
 800b062:	6838      	ldr	r0, [r7, #0]
 800b064:	f000 faa6 	bl	800b5b4 <prvAddCurrentTaskToDelayedList>
}
 800b068:	bf00      	nop
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	24007e58 	.word	0x24007e58

0800b074 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10a      	bne.n	800b09c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	617b      	str	r3, [r7, #20]
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b09c:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3318      	adds	r3, #24
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7fe fe18 	bl	8009cda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	68b8      	ldr	r0, [r7, #8]
 800b0ba:	f000 fa7b 	bl	800b5b4 <prvAddCurrentTaskToDelayedList>
	}
 800b0be:	bf00      	nop
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	24007e58 	.word	0x24007e58

0800b0cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10a      	bne.n	800b0f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	60fb      	str	r3, [r7, #12]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	3318      	adds	r3, #24
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fe fe49 	bl	8009d94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b102:	4b1e      	ldr	r3, [pc, #120]	; (800b17c <xTaskRemoveFromEventList+0xb0>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d11d      	bne.n	800b146 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	3304      	adds	r3, #4
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe fe40 	bl	8009d94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b118:	4b19      	ldr	r3, [pc, #100]	; (800b180 <xTaskRemoveFromEventList+0xb4>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d903      	bls.n	800b128 <xTaskRemoveFromEventList+0x5c>
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	4a16      	ldr	r2, [pc, #88]	; (800b180 <xTaskRemoveFromEventList+0xb4>)
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12c:	4613      	mov	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4a13      	ldr	r2, [pc, #76]	; (800b184 <xTaskRemoveFromEventList+0xb8>)
 800b136:	441a      	add	r2, r3
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	3304      	adds	r3, #4
 800b13c:	4619      	mov	r1, r3
 800b13e:	4610      	mov	r0, r2
 800b140:	f7fe fdcb 	bl	8009cda <vListInsertEnd>
 800b144:	e005      	b.n	800b152 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	3318      	adds	r3, #24
 800b14a:	4619      	mov	r1, r3
 800b14c:	480e      	ldr	r0, [pc, #56]	; (800b188 <xTaskRemoveFromEventList+0xbc>)
 800b14e:	f7fe fdc4 	bl	8009cda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b156:	4b0d      	ldr	r3, [pc, #52]	; (800b18c <xTaskRemoveFromEventList+0xc0>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d905      	bls.n	800b16c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b160:	2301      	movs	r3, #1
 800b162:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b164:	4b0a      	ldr	r3, [pc, #40]	; (800b190 <xTaskRemoveFromEventList+0xc4>)
 800b166:	2201      	movs	r2, #1
 800b168:	601a      	str	r2, [r3, #0]
 800b16a:	e001      	b.n	800b170 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b16c:	2300      	movs	r3, #0
 800b16e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b170:	697b      	ldr	r3, [r7, #20]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	24008354 	.word	0x24008354
 800b180:	24008334 	.word	0x24008334
 800b184:	24007e5c 	.word	0x24007e5c
 800b188:	240082ec 	.word	0x240082ec
 800b18c:	24007e58 	.word	0x24007e58
 800b190:	24008340 	.word	0x24008340

0800b194 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	60fb      	str	r3, [r7, #12]
}
 800b1b4:	bf00      	nop
 800b1b6:	e7fe      	b.n	800b1b6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b1b8:	f000 fecc 	bl	800bf54 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <vTaskSetTimeOutState+0x44>)
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b1c4:	4b05      	ldr	r3, [pc, #20]	; (800b1dc <vTaskSetTimeOutState+0x48>)
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b1cc:	f000 fef2 	bl	800bfb4 <vPortExitCritical>
}
 800b1d0:	bf00      	nop
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	24008344 	.word	0x24008344
 800b1dc:	24008330 	.word	0x24008330

0800b1e0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b1e8:	4b06      	ldr	r3, [pc, #24]	; (800b204 <vTaskInternalSetTimeOutState+0x24>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b1f0:	4b05      	ldr	r3, [pc, #20]	; (800b208 <vTaskInternalSetTimeOutState+0x28>)
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	605a      	str	r2, [r3, #4]
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	24008344 	.word	0x24008344
 800b208:	24008330 	.word	0x24008330

0800b20c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b088      	sub	sp, #32
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	613b      	str	r3, [r7, #16]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10a      	bne.n	800b24e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23c:	f383 8811 	msr	BASEPRI, r3
 800b240:	f3bf 8f6f 	isb	sy
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	60fb      	str	r3, [r7, #12]
}
 800b24a:	bf00      	nop
 800b24c:	e7fe      	b.n	800b24c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b24e:	f000 fe81 	bl	800bf54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b252:	4b1d      	ldr	r3, [pc, #116]	; (800b2c8 <xTaskCheckForTimeOut+0xbc>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	69ba      	ldr	r2, [r7, #24]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b26a:	d102      	bne.n	800b272 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b26c:	2300      	movs	r3, #0
 800b26e:	61fb      	str	r3, [r7, #28]
 800b270:	e023      	b.n	800b2ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	4b15      	ldr	r3, [pc, #84]	; (800b2cc <xTaskCheckForTimeOut+0xc0>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d007      	beq.n	800b28e <xTaskCheckForTimeOut+0x82>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	429a      	cmp	r2, r3
 800b286:	d302      	bcc.n	800b28e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b288:	2301      	movs	r3, #1
 800b28a:	61fb      	str	r3, [r7, #28]
 800b28c:	e015      	b.n	800b2ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	429a      	cmp	r2, r3
 800b296:	d20b      	bcs.n	800b2b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	1ad2      	subs	r2, r2, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7ff ff9b 	bl	800b1e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	e004      	b.n	800b2ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2ba:	f000 fe7b 	bl	800bfb4 <vPortExitCritical>

	return xReturn;
 800b2be:	69fb      	ldr	r3, [r7, #28]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3720      	adds	r7, #32
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	24008330 	.word	0x24008330
 800b2cc:	24008344 	.word	0x24008344

0800b2d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b2d4:	4b03      	ldr	r3, [pc, #12]	; (800b2e4 <vTaskMissedYield+0x14>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]
}
 800b2da:	bf00      	nop
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	24008340 	.word	0x24008340

0800b2e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b2f0:	f000 f852 	bl	800b398 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b2f4:	4b06      	ldr	r3, [pc, #24]	; (800b310 <prvIdleTask+0x28>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d9f9      	bls.n	800b2f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b2fc:	4b05      	ldr	r3, [pc, #20]	; (800b314 <prvIdleTask+0x2c>)
 800b2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b30c:	e7f0      	b.n	800b2f0 <prvIdleTask+0x8>
 800b30e:	bf00      	nop
 800b310:	24007e5c 	.word	0x24007e5c
 800b314:	e000ed04 	.word	0xe000ed04

0800b318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b31e:	2300      	movs	r3, #0
 800b320:	607b      	str	r3, [r7, #4]
 800b322:	e00c      	b.n	800b33e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	4a12      	ldr	r2, [pc, #72]	; (800b378 <prvInitialiseTaskLists+0x60>)
 800b330:	4413      	add	r3, r2
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe fca4 	bl	8009c80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	3301      	adds	r3, #1
 800b33c:	607b      	str	r3, [r7, #4]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b37      	cmp	r3, #55	; 0x37
 800b342:	d9ef      	bls.n	800b324 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b344:	480d      	ldr	r0, [pc, #52]	; (800b37c <prvInitialiseTaskLists+0x64>)
 800b346:	f7fe fc9b 	bl	8009c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b34a:	480d      	ldr	r0, [pc, #52]	; (800b380 <prvInitialiseTaskLists+0x68>)
 800b34c:	f7fe fc98 	bl	8009c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b350:	480c      	ldr	r0, [pc, #48]	; (800b384 <prvInitialiseTaskLists+0x6c>)
 800b352:	f7fe fc95 	bl	8009c80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b356:	480c      	ldr	r0, [pc, #48]	; (800b388 <prvInitialiseTaskLists+0x70>)
 800b358:	f7fe fc92 	bl	8009c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b35c:	480b      	ldr	r0, [pc, #44]	; (800b38c <prvInitialiseTaskLists+0x74>)
 800b35e:	f7fe fc8f 	bl	8009c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b362:	4b0b      	ldr	r3, [pc, #44]	; (800b390 <prvInitialiseTaskLists+0x78>)
 800b364:	4a05      	ldr	r2, [pc, #20]	; (800b37c <prvInitialiseTaskLists+0x64>)
 800b366:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b368:	4b0a      	ldr	r3, [pc, #40]	; (800b394 <prvInitialiseTaskLists+0x7c>)
 800b36a:	4a05      	ldr	r2, [pc, #20]	; (800b380 <prvInitialiseTaskLists+0x68>)
 800b36c:	601a      	str	r2, [r3, #0]
}
 800b36e:	bf00      	nop
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	24007e5c 	.word	0x24007e5c
 800b37c:	240082bc 	.word	0x240082bc
 800b380:	240082d0 	.word	0x240082d0
 800b384:	240082ec 	.word	0x240082ec
 800b388:	24008300 	.word	0x24008300
 800b38c:	24008318 	.word	0x24008318
 800b390:	240082e4 	.word	0x240082e4
 800b394:	240082e8 	.word	0x240082e8

0800b398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b39e:	e019      	b.n	800b3d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3a0:	f000 fdd8 	bl	800bf54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3a4:	4b10      	ldr	r3, [pc, #64]	; (800b3e8 <prvCheckTasksWaitingTermination+0x50>)
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe fcef 	bl	8009d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	; (800b3ec <prvCheckTasksWaitingTermination+0x54>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	4a0b      	ldr	r2, [pc, #44]	; (800b3ec <prvCheckTasksWaitingTermination+0x54>)
 800b3be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <prvCheckTasksWaitingTermination+0x58>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	4a0a      	ldr	r2, [pc, #40]	; (800b3f0 <prvCheckTasksWaitingTermination+0x58>)
 800b3c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3ca:	f000 fdf3 	bl	800bfb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 f810 	bl	800b3f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3d4:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <prvCheckTasksWaitingTermination+0x58>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1e1      	bne.n	800b3a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b3dc:	bf00      	nop
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	24008300 	.word	0x24008300
 800b3ec:	2400832c 	.word	0x2400832c
 800b3f0:	24008314 	.word	0x24008314

0800b3f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3354      	adds	r3, #84	; 0x54
 800b400:	4618      	mov	r0, r3
 800b402:	f00a fb8f 	bl	8015b24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d108      	bne.n	800b422 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b414:	4618      	mov	r0, r3
 800b416:	f000 ff8b 	bl	800c330 <vPortFree>
				vPortFree( pxTCB );
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 ff88 	bl	800c330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b420:	e018      	b.n	800b454 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d103      	bne.n	800b434 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 ff7f 	bl	800c330 <vPortFree>
	}
 800b432:	e00f      	b.n	800b454 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d00a      	beq.n	800b454 <prvDeleteTCB+0x60>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	60fb      	str	r3, [r7, #12]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <prvDeleteTCB+0x5e>
	}
 800b454:	bf00      	nop
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b462:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <prvResetNextTaskUnblockTime+0x38>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b46c:	4b0a      	ldr	r3, [pc, #40]	; (800b498 <prvResetNextTaskUnblockTime+0x3c>)
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b474:	e008      	b.n	800b488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b476:	4b07      	ldr	r3, [pc, #28]	; (800b494 <prvResetNextTaskUnblockTime+0x38>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	4a04      	ldr	r2, [pc, #16]	; (800b498 <prvResetNextTaskUnblockTime+0x3c>)
 800b486:	6013      	str	r3, [r2, #0]
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	240082e4 	.word	0x240082e4
 800b498:	2400834c 	.word	0x2400834c

0800b49c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4a2:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <xTaskGetSchedulerState+0x34>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	607b      	str	r3, [r7, #4]
 800b4ae:	e008      	b.n	800b4c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4b0:	4b08      	ldr	r3, [pc, #32]	; (800b4d4 <xTaskGetSchedulerState+0x38>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d102      	bne.n	800b4be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	607b      	str	r3, [r7, #4]
 800b4bc:	e001      	b.n	800b4c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4c2:	687b      	ldr	r3, [r7, #4]
	}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	24008338 	.word	0x24008338
 800b4d4:	24008354 	.word	0x24008354

0800b4d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d056      	beq.n	800b59c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b4ee:	4b2e      	ldr	r3, [pc, #184]	; (800b5a8 <xTaskPriorityDisinherit+0xd0>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d00a      	beq.n	800b50e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	60fb      	str	r3, [r7, #12]
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10a      	bne.n	800b52c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	60bb      	str	r3, [r7, #8]
}
 800b528:	bf00      	nop
 800b52a:	e7fe      	b.n	800b52a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b530:	1e5a      	subs	r2, r3, #1
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b53e:	429a      	cmp	r2, r3
 800b540:	d02c      	beq.n	800b59c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b546:	2b00      	cmp	r3, #0
 800b548:	d128      	bne.n	800b59c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fc20 	bl	8009d94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b560:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56c:	4b0f      	ldr	r3, [pc, #60]	; (800b5ac <xTaskPriorityDisinherit+0xd4>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d903      	bls.n	800b57c <xTaskPriorityDisinherit+0xa4>
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	4a0c      	ldr	r2, [pc, #48]	; (800b5ac <xTaskPriorityDisinherit+0xd4>)
 800b57a:	6013      	str	r3, [r2, #0]
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b580:	4613      	mov	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4a09      	ldr	r2, [pc, #36]	; (800b5b0 <xTaskPriorityDisinherit+0xd8>)
 800b58a:	441a      	add	r2, r3
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	3304      	adds	r3, #4
 800b590:	4619      	mov	r1, r3
 800b592:	4610      	mov	r0, r2
 800b594:	f7fe fba1 	bl	8009cda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b598:	2301      	movs	r3, #1
 800b59a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b59c:	697b      	ldr	r3, [r7, #20]
	}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3718      	adds	r7, #24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	24007e58 	.word	0x24007e58
 800b5ac:	24008334 	.word	0x24008334
 800b5b0:	24007e5c 	.word	0x24007e5c

0800b5b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b5be:	4b21      	ldr	r3, [pc, #132]	; (800b644 <prvAddCurrentTaskToDelayedList+0x90>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5c4:	4b20      	ldr	r3, [pc, #128]	; (800b648 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe fbe2 	bl	8009d94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5d6:	d10a      	bne.n	800b5ee <prvAddCurrentTaskToDelayedList+0x3a>
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d007      	beq.n	800b5ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5de:	4b1a      	ldr	r3, [pc, #104]	; (800b648 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4819      	ldr	r0, [pc, #100]	; (800b64c <prvAddCurrentTaskToDelayedList+0x98>)
 800b5e8:	f7fe fb77 	bl	8009cda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b5ec:	e026      	b.n	800b63c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <prvAddCurrentTaskToDelayedList+0x94>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	429a      	cmp	r2, r3
 800b604:	d209      	bcs.n	800b61a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b606:	4b12      	ldr	r3, [pc, #72]	; (800b650 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4b0f      	ldr	r3, [pc, #60]	; (800b648 <prvAddCurrentTaskToDelayedList+0x94>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3304      	adds	r3, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4610      	mov	r0, r2
 800b614:	f7fe fb85 	bl	8009d22 <vListInsert>
}
 800b618:	e010      	b.n	800b63c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b61a:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <prvAddCurrentTaskToDelayedList+0x94>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	4610      	mov	r0, r2
 800b628:	f7fe fb7b 	bl	8009d22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	429a      	cmp	r2, r3
 800b634:	d202      	bcs.n	800b63c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b636:	4a08      	ldr	r2, [pc, #32]	; (800b658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	6013      	str	r3, [r2, #0]
}
 800b63c:	bf00      	nop
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	24008330 	.word	0x24008330
 800b648:	24007e58 	.word	0x24007e58
 800b64c:	24008318 	.word	0x24008318
 800b650:	240082e8 	.word	0x240082e8
 800b654:	240082e4 	.word	0x240082e4
 800b658:	2400834c 	.word	0x2400834c

0800b65c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08a      	sub	sp, #40	; 0x28
 800b660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b662:	2300      	movs	r3, #0
 800b664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b666:	f000 fb07 	bl	800bc78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b66a:	4b1c      	ldr	r3, [pc, #112]	; (800b6dc <xTimerCreateTimerTask+0x80>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d021      	beq.n	800b6b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b672:	2300      	movs	r3, #0
 800b674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b67a:	1d3a      	adds	r2, r7, #4
 800b67c:	f107 0108 	add.w	r1, r7, #8
 800b680:	f107 030c 	add.w	r3, r7, #12
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe fae1 	bl	8009c4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b68a:	6879      	ldr	r1, [r7, #4]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	9202      	str	r2, [sp, #8]
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	2302      	movs	r3, #2
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	2300      	movs	r3, #0
 800b69a:	460a      	mov	r2, r1
 800b69c:	4910      	ldr	r1, [pc, #64]	; (800b6e0 <xTimerCreateTimerTask+0x84>)
 800b69e:	4811      	ldr	r0, [pc, #68]	; (800b6e4 <xTimerCreateTimerTask+0x88>)
 800b6a0:	f7ff f88e 	bl	800a7c0 <xTaskCreateStatic>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	4a10      	ldr	r2, [pc, #64]	; (800b6e8 <xTimerCreateTimerTask+0x8c>)
 800b6a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b6aa:	4b0f      	ldr	r3, [pc, #60]	; (800b6e8 <xTimerCreateTimerTask+0x8c>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	613b      	str	r3, [r7, #16]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b6d2:	697b      	ldr	r3, [r7, #20]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	24008388 	.word	0x24008388
 800b6e0:	08016b4c 	.word	0x08016b4c
 800b6e4:	0800b821 	.word	0x0800b821
 800b6e8:	2400838c 	.word	0x2400838c

0800b6ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08a      	sub	sp, #40	; 0x28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d10a      	bne.n	800b71a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	623b      	str	r3, [r7, #32]
}
 800b716:	bf00      	nop
 800b718:	e7fe      	b.n	800b718 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b71a:	4b1a      	ldr	r3, [pc, #104]	; (800b784 <xTimerGenericCommand+0x98>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d02a      	beq.n	800b778 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b05      	cmp	r3, #5
 800b732:	dc18      	bgt.n	800b766 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b734:	f7ff feb2 	bl	800b49c <xTaskGetSchedulerState>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d109      	bne.n	800b752 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b73e:	4b11      	ldr	r3, [pc, #68]	; (800b784 <xTimerGenericCommand+0x98>)
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	f107 0110 	add.w	r1, r7, #16
 800b746:	2300      	movs	r3, #0
 800b748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b74a:	f7fe fc51 	bl	8009ff0 <xQueueGenericSend>
 800b74e:	6278      	str	r0, [r7, #36]	; 0x24
 800b750:	e012      	b.n	800b778 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b752:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <xTimerGenericCommand+0x98>)
 800b754:	6818      	ldr	r0, [r3, #0]
 800b756:	f107 0110 	add.w	r1, r7, #16
 800b75a:	2300      	movs	r3, #0
 800b75c:	2200      	movs	r2, #0
 800b75e:	f7fe fc47 	bl	8009ff0 <xQueueGenericSend>
 800b762:	6278      	str	r0, [r7, #36]	; 0x24
 800b764:	e008      	b.n	800b778 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b766:	4b07      	ldr	r3, [pc, #28]	; (800b784 <xTimerGenericCommand+0x98>)
 800b768:	6818      	ldr	r0, [r3, #0]
 800b76a:	f107 0110 	add.w	r1, r7, #16
 800b76e:	2300      	movs	r3, #0
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	f7fe fd3b 	bl	800a1ec <xQueueGenericSendFromISR>
 800b776:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3728      	adds	r7, #40	; 0x28
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	24008388 	.word	0x24008388

0800b788 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b792:	4b22      	ldr	r3, [pc, #136]	; (800b81c <prvProcessExpiredTimer+0x94>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	3304      	adds	r3, #4
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fe faf7 	bl	8009d94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7ac:	f003 0304 	and.w	r3, r3, #4
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d022      	beq.n	800b7fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	699a      	ldr	r2, [r3, #24]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	18d1      	adds	r1, r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	6978      	ldr	r0, [r7, #20]
 800b7c2:	f000 f8d1 	bl	800b968 <prvInsertTimerInActiveList>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01f      	beq.n	800b80c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	6978      	ldr	r0, [r7, #20]
 800b7d8:	f7ff ff88 	bl	800b6ec <xTimerGenericCommand>
 800b7dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d113      	bne.n	800b80c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	60fb      	str	r3, [r7, #12]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b800:	f023 0301 	bic.w	r3, r3, #1
 800b804:	b2da      	uxtb	r2, r3
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	6a1b      	ldr	r3, [r3, #32]
 800b810:	6978      	ldr	r0, [r7, #20]
 800b812:	4798      	blx	r3
}
 800b814:	bf00      	nop
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	24008380 	.word	0x24008380

0800b820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b828:	f107 0308 	add.w	r3, r7, #8
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 f857 	bl	800b8e0 <prvGetNextExpireTime>
 800b832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	4619      	mov	r1, r3
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 f803 	bl	800b844 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b83e:	f000 f8d5 	bl	800b9ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b842:	e7f1      	b.n	800b828 <prvTimerTask+0x8>

0800b844 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b84e:	f7ff fa13 	bl	800ac78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b852:	f107 0308 	add.w	r3, r7, #8
 800b856:	4618      	mov	r0, r3
 800b858:	f000 f866 	bl	800b928 <prvSampleTimeNow>
 800b85c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d130      	bne.n	800b8c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10a      	bne.n	800b880 <prvProcessTimerOrBlockTask+0x3c>
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d806      	bhi.n	800b880 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b872:	f7ff fa0f 	bl	800ac94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff ff85 	bl	800b788 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b87e:	e024      	b.n	800b8ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d008      	beq.n	800b898 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b886:	4b13      	ldr	r3, [pc, #76]	; (800b8d4 <prvProcessTimerOrBlockTask+0x90>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <prvProcessTimerOrBlockTask+0x50>
 800b890:	2301      	movs	r3, #1
 800b892:	e000      	b.n	800b896 <prvProcessTimerOrBlockTask+0x52>
 800b894:	2300      	movs	r3, #0
 800b896:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b898:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <prvProcessTimerOrBlockTask+0x94>)
 800b89a:	6818      	ldr	r0, [r3, #0]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f7fe ff57 	bl	800a758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b8aa:	f7ff f9f3 	bl	800ac94 <xTaskResumeAll>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10a      	bne.n	800b8ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b8b4:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <prvProcessTimerOrBlockTask+0x98>)
 800b8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	f3bf 8f6f 	isb	sy
}
 800b8c4:	e001      	b.n	800b8ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b8c6:	f7ff f9e5 	bl	800ac94 <xTaskResumeAll>
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	24008384 	.word	0x24008384
 800b8d8:	24008388 	.word	0x24008388
 800b8dc:	e000ed04 	.word	0xe000ed04

0800b8e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b8e8:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <prvGetNextExpireTime+0x44>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <prvGetNextExpireTime+0x16>
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	e000      	b.n	800b8f8 <prvGetNextExpireTime+0x18>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d105      	bne.n	800b910 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b904:	4b07      	ldr	r3, [pc, #28]	; (800b924 <prvGetNextExpireTime+0x44>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	e001      	b.n	800b914 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b914:	68fb      	ldr	r3, [r7, #12]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	24008380 	.word	0x24008380

0800b928 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b930:	f7ff fa4e 	bl	800add0 <xTaskGetTickCount>
 800b934:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b936:	4b0b      	ldr	r3, [pc, #44]	; (800b964 <prvSampleTimeNow+0x3c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d205      	bcs.n	800b94c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b940:	f000 f936 	bl	800bbb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	e002      	b.n	800b952 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b952:	4a04      	ldr	r2, [pc, #16]	; (800b964 <prvSampleTimeNow+0x3c>)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b958:	68fb      	ldr	r3, [r7, #12]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	24008390 	.word	0x24008390

0800b968 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
 800b974:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d812      	bhi.n	800b9b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	1ad2      	subs	r2, r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d302      	bcc.n	800b9a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b99c:	2301      	movs	r3, #1
 800b99e:	617b      	str	r3, [r7, #20]
 800b9a0:	e01b      	b.n	800b9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9a2:	4b10      	ldr	r3, [pc, #64]	; (800b9e4 <prvInsertTimerInActiveList+0x7c>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	f7fe f9b8 	bl	8009d22 <vListInsert>
 800b9b2:	e012      	b.n	800b9da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d206      	bcs.n	800b9ca <prvInsertTimerInActiveList+0x62>
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d302      	bcc.n	800b9ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e007      	b.n	800b9da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9ca:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <prvInsertTimerInActiveList+0x80>)
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	f7fe f9a4 	bl	8009d22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b9da:	697b      	ldr	r3, [r7, #20]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	24008384 	.word	0x24008384
 800b9e8:	24008380 	.word	0x24008380

0800b9ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08e      	sub	sp, #56	; 0x38
 800b9f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9f2:	e0ca      	b.n	800bb8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	da18      	bge.n	800ba2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b9fa:	1d3b      	adds	r3, r7, #4
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	61fb      	str	r3, [r7, #28]
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba22:	6850      	ldr	r0, [r2, #4]
 800ba24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba26:	6892      	ldr	r2, [r2, #8]
 800ba28:	4611      	mov	r1, r2
 800ba2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f2c0 80ab 	blt.w	800bb8a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d004      	beq.n	800ba4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	3304      	adds	r3, #4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fe f9a5 	bl	8009d94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba4a:	463b      	mov	r3, r7
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7ff ff6b 	bl	800b928 <prvSampleTimeNow>
 800ba52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b09      	cmp	r3, #9
 800ba58:	f200 8096 	bhi.w	800bb88 <prvProcessReceivedCommands+0x19c>
 800ba5c:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <prvProcessReceivedCommands+0x78>)
 800ba5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba62:	bf00      	nop
 800ba64:	0800ba8d 	.word	0x0800ba8d
 800ba68:	0800ba8d 	.word	0x0800ba8d
 800ba6c:	0800ba8d 	.word	0x0800ba8d
 800ba70:	0800bb01 	.word	0x0800bb01
 800ba74:	0800bb15 	.word	0x0800bb15
 800ba78:	0800bb5f 	.word	0x0800bb5f
 800ba7c:	0800ba8d 	.word	0x0800ba8d
 800ba80:	0800ba8d 	.word	0x0800ba8d
 800ba84:	0800bb01 	.word	0x0800bb01
 800ba88:	0800bb15 	.word	0x0800bb15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba92:	f043 0301 	orr.w	r3, r3, #1
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	18d1      	adds	r1, r2, r3
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baac:	f7ff ff5c 	bl	800b968 <prvInsertTimerInActiveList>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d069      	beq.n	800bb8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800babc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bac4:	f003 0304 	and.w	r3, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d05e      	beq.n	800bb8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	441a      	add	r2, r3
 800bad4:	2300      	movs	r3, #0
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	2300      	movs	r3, #0
 800bada:	2100      	movs	r1, #0
 800badc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bade:	f7ff fe05 	bl	800b6ec <xTimerGenericCommand>
 800bae2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d14f      	bne.n	800bb8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	61bb      	str	r3, [r7, #24]
}
 800bafc:	bf00      	nop
 800bafe:	e7fe      	b.n	800bafe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb06:	f023 0301 	bic.w	r3, r3, #1
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bb12:	e03a      	b.n	800bb8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb1a:	f043 0301 	orr.w	r3, r3, #1
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10a      	bne.n	800bb4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	617b      	str	r3, [r7, #20]
}
 800bb46:	bf00      	nop
 800bb48:	e7fe      	b.n	800bb48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	699a      	ldr	r2, [r3, #24]
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	18d1      	adds	r1, r2, r3
 800bb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb58:	f7ff ff06 	bl	800b968 <prvInsertTimerInActiveList>
					break;
 800bb5c:	e015      	b.n	800bb8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb64:	f003 0302 	and.w	r3, r3, #2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d103      	bne.n	800bb74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bb6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb6e:	f000 fbdf 	bl	800c330 <vPortFree>
 800bb72:	e00a      	b.n	800bb8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb7a:	f023 0301 	bic.w	r3, r3, #1
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb86:	e000      	b.n	800bb8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bb88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb8a:	4b08      	ldr	r3, [pc, #32]	; (800bbac <prvProcessReceivedCommands+0x1c0>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	1d39      	adds	r1, r7, #4
 800bb90:	2200      	movs	r2, #0
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fe fbc6 	bl	800a324 <xQueueReceive>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f47f af2a 	bne.w	800b9f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bba0:	bf00      	nop
 800bba2:	bf00      	nop
 800bba4:	3730      	adds	r7, #48	; 0x30
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	24008388 	.word	0x24008388

0800bbb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b088      	sub	sp, #32
 800bbb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbb6:	e048      	b.n	800bc4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbb8:	4b2d      	ldr	r3, [pc, #180]	; (800bc70 <prvSwitchTimerLists+0xc0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbc2:	4b2b      	ldr	r3, [pc, #172]	; (800bc70 <prvSwitchTimerLists+0xc0>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fe f8df 	bl	8009d94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d02e      	beq.n	800bc4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d90e      	bls.n	800bc1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc0a:	4b19      	ldr	r3, [pc, #100]	; (800bc70 <prvSwitchTimerLists+0xc0>)
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3304      	adds	r3, #4
 800bc12:	4619      	mov	r1, r3
 800bc14:	4610      	mov	r0, r2
 800bc16:	f7fe f884 	bl	8009d22 <vListInsert>
 800bc1a:	e016      	b.n	800bc4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	2300      	movs	r3, #0
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	2100      	movs	r1, #0
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff fd60 	bl	800b6ec <xTimerGenericCommand>
 800bc2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10a      	bne.n	800bc4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	603b      	str	r3, [r7, #0]
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc4a:	4b09      	ldr	r3, [pc, #36]	; (800bc70 <prvSwitchTimerLists+0xc0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1b1      	bne.n	800bbb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc54:	4b06      	ldr	r3, [pc, #24]	; (800bc70 <prvSwitchTimerLists+0xc0>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc5a:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <prvSwitchTimerLists+0xc4>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a04      	ldr	r2, [pc, #16]	; (800bc70 <prvSwitchTimerLists+0xc0>)
 800bc60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc62:	4a04      	ldr	r2, [pc, #16]	; (800bc74 <prvSwitchTimerLists+0xc4>)
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	6013      	str	r3, [r2, #0]
}
 800bc68:	bf00      	nop
 800bc6a:	3718      	adds	r7, #24
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	24008380 	.word	0x24008380
 800bc74:	24008384 	.word	0x24008384

0800bc78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc7e:	f000 f969 	bl	800bf54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc82:	4b15      	ldr	r3, [pc, #84]	; (800bcd8 <prvCheckForValidListAndQueue+0x60>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d120      	bne.n	800bccc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc8a:	4814      	ldr	r0, [pc, #80]	; (800bcdc <prvCheckForValidListAndQueue+0x64>)
 800bc8c:	f7fd fff8 	bl	8009c80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc90:	4813      	ldr	r0, [pc, #76]	; (800bce0 <prvCheckForValidListAndQueue+0x68>)
 800bc92:	f7fd fff5 	bl	8009c80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc96:	4b13      	ldr	r3, [pc, #76]	; (800bce4 <prvCheckForValidListAndQueue+0x6c>)
 800bc98:	4a10      	ldr	r2, [pc, #64]	; (800bcdc <prvCheckForValidListAndQueue+0x64>)
 800bc9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc9c:	4b12      	ldr	r3, [pc, #72]	; (800bce8 <prvCheckForValidListAndQueue+0x70>)
 800bc9e:	4a10      	ldr	r2, [pc, #64]	; (800bce0 <prvCheckForValidListAndQueue+0x68>)
 800bca0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bca2:	2300      	movs	r3, #0
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	4b11      	ldr	r3, [pc, #68]	; (800bcec <prvCheckForValidListAndQueue+0x74>)
 800bca8:	4a11      	ldr	r2, [pc, #68]	; (800bcf0 <prvCheckForValidListAndQueue+0x78>)
 800bcaa:	2110      	movs	r1, #16
 800bcac:	200a      	movs	r0, #10
 800bcae:	f7fe f903 	bl	8009eb8 <xQueueGenericCreateStatic>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	4a08      	ldr	r2, [pc, #32]	; (800bcd8 <prvCheckForValidListAndQueue+0x60>)
 800bcb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bcb8:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <prvCheckForValidListAndQueue+0x60>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d005      	beq.n	800bccc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bcc0:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <prvCheckForValidListAndQueue+0x60>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	490b      	ldr	r1, [pc, #44]	; (800bcf4 <prvCheckForValidListAndQueue+0x7c>)
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fd1c 	bl	800a704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bccc:	f000 f972 	bl	800bfb4 <vPortExitCritical>
}
 800bcd0:	bf00      	nop
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	24008388 	.word	0x24008388
 800bcdc:	24008358 	.word	0x24008358
 800bce0:	2400836c 	.word	0x2400836c
 800bce4:	24008380 	.word	0x24008380
 800bce8:	24008384 	.word	0x24008384
 800bcec:	24008434 	.word	0x24008434
 800bcf0:	24008394 	.word	0x24008394
 800bcf4:	08016b54 	.word	0x08016b54

0800bcf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3b04      	subs	r3, #4
 800bd08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3b04      	subs	r3, #4
 800bd16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	f023 0201 	bic.w	r2, r3, #1
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	3b04      	subs	r3, #4
 800bd26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd28:	4a0c      	ldr	r2, [pc, #48]	; (800bd5c <pxPortInitialiseStack+0x64>)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3b14      	subs	r3, #20
 800bd32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3b04      	subs	r3, #4
 800bd3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f06f 0202 	mvn.w	r2, #2
 800bd46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3b20      	subs	r3, #32
 800bd4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	0800bd61 	.word	0x0800bd61

0800bd60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd6a:	4b12      	ldr	r3, [pc, #72]	; (800bdb4 <prvTaskExitError+0x54>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd72:	d00a      	beq.n	800bd8a <prvTaskExitError+0x2a>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	60fb      	str	r3, [r7, #12]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <prvTaskExitError+0x28>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	60bb      	str	r3, [r7, #8]
}
 800bd9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd9e:	bf00      	nop
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d0fc      	beq.n	800bda0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bda6:	bf00      	nop
 800bda8:	bf00      	nop
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	24000014 	.word	0x24000014
	...

0800bdc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bdc0:	4b07      	ldr	r3, [pc, #28]	; (800bde0 <pxCurrentTCBConst2>)
 800bdc2:	6819      	ldr	r1, [r3, #0]
 800bdc4:	6808      	ldr	r0, [r1, #0]
 800bdc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdca:	f380 8809 	msr	PSP, r0
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f04f 0000 	mov.w	r0, #0
 800bdd6:	f380 8811 	msr	BASEPRI, r0
 800bdda:	4770      	bx	lr
 800bddc:	f3af 8000 	nop.w

0800bde0 <pxCurrentTCBConst2>:
 800bde0:	24007e58 	.word	0x24007e58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bde4:	bf00      	nop
 800bde6:	bf00      	nop

0800bde8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bde8:	4808      	ldr	r0, [pc, #32]	; (800be0c <prvPortStartFirstTask+0x24>)
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	6800      	ldr	r0, [r0, #0]
 800bdee:	f380 8808 	msr	MSP, r0
 800bdf2:	f04f 0000 	mov.w	r0, #0
 800bdf6:	f380 8814 	msr	CONTROL, r0
 800bdfa:	b662      	cpsie	i
 800bdfc:	b661      	cpsie	f
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	df00      	svc	0
 800be08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be0a:	bf00      	nop
 800be0c:	e000ed08 	.word	0xe000ed08

0800be10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be16:	4b46      	ldr	r3, [pc, #280]	; (800bf30 <xPortStartScheduler+0x120>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a46      	ldr	r2, [pc, #280]	; (800bf34 <xPortStartScheduler+0x124>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d10a      	bne.n	800be36 <xPortStartScheduler+0x26>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	613b      	str	r3, [r7, #16]
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be36:	4b3e      	ldr	r3, [pc, #248]	; (800bf30 <xPortStartScheduler+0x120>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a3f      	ldr	r2, [pc, #252]	; (800bf38 <xPortStartScheduler+0x128>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d10a      	bne.n	800be56 <xPortStartScheduler+0x46>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	60fb      	str	r3, [r7, #12]
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be56:	4b39      	ldr	r3, [pc, #228]	; (800bf3c <xPortStartScheduler+0x12c>)
 800be58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	22ff      	movs	r2, #255	; 0xff
 800be66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be70:	78fb      	ldrb	r3, [r7, #3]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	4b31      	ldr	r3, [pc, #196]	; (800bf40 <xPortStartScheduler+0x130>)
 800be7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be7e:	4b31      	ldr	r3, [pc, #196]	; (800bf44 <xPortStartScheduler+0x134>)
 800be80:	2207      	movs	r2, #7
 800be82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be84:	e009      	b.n	800be9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800be86:	4b2f      	ldr	r3, [pc, #188]	; (800bf44 <xPortStartScheduler+0x134>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	4a2d      	ldr	r2, [pc, #180]	; (800bf44 <xPortStartScheduler+0x134>)
 800be8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	b2db      	uxtb	r3, r3
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	b2db      	uxtb	r3, r3
 800be98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be9a:	78fb      	ldrb	r3, [r7, #3]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea2:	2b80      	cmp	r3, #128	; 0x80
 800bea4:	d0ef      	beq.n	800be86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bea6:	4b27      	ldr	r3, [pc, #156]	; (800bf44 <xPortStartScheduler+0x134>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f1c3 0307 	rsb	r3, r3, #7
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d00a      	beq.n	800bec8 <xPortStartScheduler+0xb8>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	60bb      	str	r3, [r7, #8]
}
 800bec4:	bf00      	nop
 800bec6:	e7fe      	b.n	800bec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bec8:	4b1e      	ldr	r3, [pc, #120]	; (800bf44 <xPortStartScheduler+0x134>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	021b      	lsls	r3, r3, #8
 800bece:	4a1d      	ldr	r2, [pc, #116]	; (800bf44 <xPortStartScheduler+0x134>)
 800bed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bed2:	4b1c      	ldr	r3, [pc, #112]	; (800bf44 <xPortStartScheduler+0x134>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beda:	4a1a      	ldr	r2, [pc, #104]	; (800bf44 <xPortStartScheduler+0x134>)
 800bedc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bee6:	4b18      	ldr	r3, [pc, #96]	; (800bf48 <xPortStartScheduler+0x138>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <xPortStartScheduler+0x138>)
 800beec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bef2:	4b15      	ldr	r3, [pc, #84]	; (800bf48 <xPortStartScheduler+0x138>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a14      	ldr	r2, [pc, #80]	; (800bf48 <xPortStartScheduler+0x138>)
 800bef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800befc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800befe:	f000 f8dd 	bl	800c0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf02:	4b12      	ldr	r3, [pc, #72]	; (800bf4c <xPortStartScheduler+0x13c>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf08:	f000 f8fc 	bl	800c104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf0c:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <xPortStartScheduler+0x140>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a0f      	ldr	r2, [pc, #60]	; (800bf50 <xPortStartScheduler+0x140>)
 800bf12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf18:	f7ff ff66 	bl	800bde8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf1c:	f7ff f822 	bl	800af64 <vTaskSwitchContext>
	prvTaskExitError();
 800bf20:	f7ff ff1e 	bl	800bd60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	e000ed00 	.word	0xe000ed00
 800bf34:	410fc271 	.word	0x410fc271
 800bf38:	410fc270 	.word	0x410fc270
 800bf3c:	e000e400 	.word	0xe000e400
 800bf40:	24008484 	.word	0x24008484
 800bf44:	24008488 	.word	0x24008488
 800bf48:	e000ed20 	.word	0xe000ed20
 800bf4c:	24000014 	.word	0x24000014
 800bf50:	e000ef34 	.word	0xe000ef34

0800bf54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
	__asm volatile
 800bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5e:	f383 8811 	msr	BASEPRI, r3
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	607b      	str	r3, [r7, #4]
}
 800bf6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf6e:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <vPortEnterCritical+0x58>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3301      	adds	r3, #1
 800bf74:	4a0d      	ldr	r2, [pc, #52]	; (800bfac <vPortEnterCritical+0x58>)
 800bf76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <vPortEnterCritical+0x58>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d10f      	bne.n	800bfa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <vPortEnterCritical+0x5c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	603b      	str	r3, [r7, #0]
}
 800bf9c:	bf00      	nop
 800bf9e:	e7fe      	b.n	800bf9e <vPortEnterCritical+0x4a>
	}
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	24000014 	.word	0x24000014
 800bfb0:	e000ed04 	.word	0xe000ed04

0800bfb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfba:	4b12      	ldr	r3, [pc, #72]	; (800c004 <vPortExitCritical+0x50>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10a      	bne.n	800bfd8 <vPortExitCritical+0x24>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	607b      	str	r3, [r7, #4]
}
 800bfd4:	bf00      	nop
 800bfd6:	e7fe      	b.n	800bfd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bfd8:	4b0a      	ldr	r3, [pc, #40]	; (800c004 <vPortExitCritical+0x50>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	4a09      	ldr	r2, [pc, #36]	; (800c004 <vPortExitCritical+0x50>)
 800bfe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfe2:	4b08      	ldr	r3, [pc, #32]	; (800c004 <vPortExitCritical+0x50>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d105      	bne.n	800bff6 <vPortExitCritical+0x42>
 800bfea:	2300      	movs	r3, #0
 800bfec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	f383 8811 	msr	BASEPRI, r3
}
 800bff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bff6:	bf00      	nop
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	24000014 	.word	0x24000014
	...

0800c010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c010:	f3ef 8009 	mrs	r0, PSP
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	4b15      	ldr	r3, [pc, #84]	; (800c070 <pxCurrentTCBConst>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	f01e 0f10 	tst.w	lr, #16
 800c020:	bf08      	it	eq
 800c022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02a:	6010      	str	r0, [r2, #0]
 800c02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c034:	f380 8811 	msr	BASEPRI, r0
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f7fe ff90 	bl	800af64 <vTaskSwitchContext>
 800c044:	f04f 0000 	mov.w	r0, #0
 800c048:	f380 8811 	msr	BASEPRI, r0
 800c04c:	bc09      	pop	{r0, r3}
 800c04e:	6819      	ldr	r1, [r3, #0]
 800c050:	6808      	ldr	r0, [r1, #0]
 800c052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c056:	f01e 0f10 	tst.w	lr, #16
 800c05a:	bf08      	it	eq
 800c05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c060:	f380 8809 	msr	PSP, r0
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	f3af 8000 	nop.w

0800c070 <pxCurrentTCBConst>:
 800c070:	24007e58 	.word	0x24007e58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop

0800c078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	607b      	str	r3, [r7, #4]
}
 800c090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c092:	f7fe fead 	bl	800adf0 <xTaskIncrementTick>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d003      	beq.n	800c0a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c09c:	4b06      	ldr	r3, [pc, #24]	; (800c0b8 <xPortSysTickHandler+0x40>)
 800c09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	f383 8811 	msr	BASEPRI, r3
}
 800c0ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0b0:	bf00      	nop
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0c0:	4b0b      	ldr	r3, [pc, #44]	; (800c0f0 <vPortSetupTimerInterrupt+0x34>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0c6:	4b0b      	ldr	r3, [pc, #44]	; (800c0f4 <vPortSetupTimerInterrupt+0x38>)
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0cc:	4b0a      	ldr	r3, [pc, #40]	; (800c0f8 <vPortSetupTimerInterrupt+0x3c>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a0a      	ldr	r2, [pc, #40]	; (800c0fc <vPortSetupTimerInterrupt+0x40>)
 800c0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d6:	099b      	lsrs	r3, r3, #6
 800c0d8:	4a09      	ldr	r2, [pc, #36]	; (800c100 <vPortSetupTimerInterrupt+0x44>)
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0de:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <vPortSetupTimerInterrupt+0x34>)
 800c0e0:	2207      	movs	r2, #7
 800c0e2:	601a      	str	r2, [r3, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	e000e010 	.word	0xe000e010
 800c0f4:	e000e018 	.word	0xe000e018
 800c0f8:	24000004 	.word	0x24000004
 800c0fc:	10624dd3 	.word	0x10624dd3
 800c100:	e000e014 	.word	0xe000e014

0800c104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c114 <vPortEnableVFP+0x10>
 800c108:	6801      	ldr	r1, [r0, #0]
 800c10a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c10e:	6001      	str	r1, [r0, #0]
 800c110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c112:	bf00      	nop
 800c114:	e000ed88 	.word	0xe000ed88

0800c118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c11e:	f3ef 8305 	mrs	r3, IPSR
 800c122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b0f      	cmp	r3, #15
 800c128:	d914      	bls.n	800c154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c12a:	4a17      	ldr	r2, [pc, #92]	; (800c188 <vPortValidateInterruptPriority+0x70>)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	4413      	add	r3, r2
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c134:	4b15      	ldr	r3, [pc, #84]	; (800c18c <vPortValidateInterruptPriority+0x74>)
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	7afa      	ldrb	r2, [r7, #11]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d20a      	bcs.n	800c154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	607b      	str	r3, [r7, #4]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c154:	4b0e      	ldr	r3, [pc, #56]	; (800c190 <vPortValidateInterruptPriority+0x78>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c15c:	4b0d      	ldr	r3, [pc, #52]	; (800c194 <vPortValidateInterruptPriority+0x7c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	429a      	cmp	r2, r3
 800c162:	d90a      	bls.n	800c17a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	603b      	str	r3, [r7, #0]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <vPortValidateInterruptPriority+0x60>
	}
 800c17a:	bf00      	nop
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	e000e3f0 	.word	0xe000e3f0
 800c18c:	24008484 	.word	0x24008484
 800c190:	e000ed0c 	.word	0xe000ed0c
 800c194:	24008488 	.word	0x24008488

0800c198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b08a      	sub	sp, #40	; 0x28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1a4:	f7fe fd68 	bl	800ac78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1a8:	4b5b      	ldr	r3, [pc, #364]	; (800c318 <pvPortMalloc+0x180>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d101      	bne.n	800c1b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1b0:	f000 f920 	bl	800c3f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1b4:	4b59      	ldr	r3, [pc, #356]	; (800c31c <pvPortMalloc+0x184>)
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f040 8093 	bne.w	800c2e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d01d      	beq.n	800c204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c1c8:	2208      	movs	r2, #8
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f003 0307 	and.w	r3, r3, #7
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d014      	beq.n	800c204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f023 0307 	bic.w	r3, r3, #7
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f003 0307 	and.w	r3, r3, #7
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00a      	beq.n	800c204 <pvPortMalloc+0x6c>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	617b      	str	r3, [r7, #20]
}
 800c200:	bf00      	nop
 800c202:	e7fe      	b.n	800c202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d06e      	beq.n	800c2e8 <pvPortMalloc+0x150>
 800c20a:	4b45      	ldr	r3, [pc, #276]	; (800c320 <pvPortMalloc+0x188>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	429a      	cmp	r2, r3
 800c212:	d869      	bhi.n	800c2e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c214:	4b43      	ldr	r3, [pc, #268]	; (800c324 <pvPortMalloc+0x18c>)
 800c216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c218:	4b42      	ldr	r3, [pc, #264]	; (800c324 <pvPortMalloc+0x18c>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c21e:	e004      	b.n	800c22a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d903      	bls.n	800c23c <pvPortMalloc+0xa4>
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1f1      	bne.n	800c220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c23c:	4b36      	ldr	r3, [pc, #216]	; (800c318 <pvPortMalloc+0x180>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c242:	429a      	cmp	r2, r3
 800c244:	d050      	beq.n	800c2e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2208      	movs	r2, #8
 800c24c:	4413      	add	r3, r2
 800c24e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	1ad2      	subs	r2, r2, r3
 800c260:	2308      	movs	r3, #8
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	429a      	cmp	r2, r3
 800c266:	d91f      	bls.n	800c2a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4413      	add	r3, r2
 800c26e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	f003 0307 	and.w	r3, r3, #7
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <pvPortMalloc+0xf8>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	613b      	str	r3, [r7, #16]
}
 800c28c:	bf00      	nop
 800c28e:	e7fe      	b.n	800c28e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	1ad2      	subs	r2, r2, r3
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2a2:	69b8      	ldr	r0, [r7, #24]
 800c2a4:	f000 f908 	bl	800c4b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2a8:	4b1d      	ldr	r3, [pc, #116]	; (800c320 <pvPortMalloc+0x188>)
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	4a1b      	ldr	r2, [pc, #108]	; (800c320 <pvPortMalloc+0x188>)
 800c2b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2b6:	4b1a      	ldr	r3, [pc, #104]	; (800c320 <pvPortMalloc+0x188>)
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	4b1b      	ldr	r3, [pc, #108]	; (800c328 <pvPortMalloc+0x190>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d203      	bcs.n	800c2ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2c2:	4b17      	ldr	r3, [pc, #92]	; (800c320 <pvPortMalloc+0x188>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a18      	ldr	r2, [pc, #96]	; (800c328 <pvPortMalloc+0x190>)
 800c2c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	4b13      	ldr	r3, [pc, #76]	; (800c31c <pvPortMalloc+0x184>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	2200      	movs	r2, #0
 800c2dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2de:	4b13      	ldr	r3, [pc, #76]	; (800c32c <pvPortMalloc+0x194>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	4a11      	ldr	r2, [pc, #68]	; (800c32c <pvPortMalloc+0x194>)
 800c2e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2e8:	f7fe fcd4 	bl	800ac94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	f003 0307 	and.w	r3, r3, #7
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00a      	beq.n	800c30c <pvPortMalloc+0x174>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	60fb      	str	r3, [r7, #12]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <pvPortMalloc+0x172>
	return pvReturn;
 800c30c:	69fb      	ldr	r3, [r7, #28]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3728      	adds	r7, #40	; 0x28
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2400c094 	.word	0x2400c094
 800c31c:	2400c0a8 	.word	0x2400c0a8
 800c320:	2400c098 	.word	0x2400c098
 800c324:	2400c08c 	.word	0x2400c08c
 800c328:	2400c09c 	.word	0x2400c09c
 800c32c:	2400c0a0 	.word	0x2400c0a0

0800c330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d04d      	beq.n	800c3de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c342:	2308      	movs	r3, #8
 800c344:	425b      	negs	r3, r3
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	4413      	add	r3, r2
 800c34a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	4b24      	ldr	r3, [pc, #144]	; (800c3e8 <vPortFree+0xb8>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4013      	ands	r3, r2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10a      	bne.n	800c374 <vPortFree+0x44>
	__asm volatile
 800c35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	60fb      	str	r3, [r7, #12]
}
 800c370:	bf00      	nop
 800c372:	e7fe      	b.n	800c372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00a      	beq.n	800c392 <vPortFree+0x62>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	60bb      	str	r3, [r7, #8]
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	685a      	ldr	r2, [r3, #4]
 800c396:	4b14      	ldr	r3, [pc, #80]	; (800c3e8 <vPortFree+0xb8>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4013      	ands	r3, r2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d01e      	beq.n	800c3de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d11a      	bne.n	800c3de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	4b0e      	ldr	r3, [pc, #56]	; (800c3e8 <vPortFree+0xb8>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	43db      	mvns	r3, r3
 800c3b2:	401a      	ands	r2, r3
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3b8:	f7fe fc5e 	bl	800ac78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	685a      	ldr	r2, [r3, #4]
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	; (800c3ec <vPortFree+0xbc>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	4a09      	ldr	r2, [pc, #36]	; (800c3ec <vPortFree+0xbc>)
 800c3c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3ca:	6938      	ldr	r0, [r7, #16]
 800c3cc:	f000 f874 	bl	800c4b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3d0:	4b07      	ldr	r3, [pc, #28]	; (800c3f0 <vPortFree+0xc0>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	4a06      	ldr	r2, [pc, #24]	; (800c3f0 <vPortFree+0xc0>)
 800c3d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3da:	f7fe fc5b 	bl	800ac94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3de:	bf00      	nop
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	2400c0a8 	.word	0x2400c0a8
 800c3ec:	2400c098 	.word	0x2400c098
 800c3f0:	2400c0a4 	.word	0x2400c0a4

0800c3f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c3fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c400:	4b27      	ldr	r3, [pc, #156]	; (800c4a0 <prvHeapInit+0xac>)
 800c402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00c      	beq.n	800c428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3307      	adds	r3, #7
 800c412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f023 0307 	bic.w	r3, r3, #7
 800c41a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	4a1f      	ldr	r2, [pc, #124]	; (800c4a0 <prvHeapInit+0xac>)
 800c424:	4413      	add	r3, r2
 800c426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c42c:	4a1d      	ldr	r2, [pc, #116]	; (800c4a4 <prvHeapInit+0xb0>)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c432:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <prvHeapInit+0xb0>)
 800c434:	2200      	movs	r2, #0
 800c436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	4413      	add	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c440:	2208      	movs	r2, #8
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	1a9b      	subs	r3, r3, r2
 800c446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f023 0307 	bic.w	r3, r3, #7
 800c44e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4a15      	ldr	r2, [pc, #84]	; (800c4a8 <prvHeapInit+0xb4>)
 800c454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c456:	4b14      	ldr	r3, [pc, #80]	; (800c4a8 <prvHeapInit+0xb4>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2200      	movs	r2, #0
 800c45c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c45e:	4b12      	ldr	r3, [pc, #72]	; (800c4a8 <prvHeapInit+0xb4>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2200      	movs	r2, #0
 800c464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c474:	4b0c      	ldr	r3, [pc, #48]	; (800c4a8 <prvHeapInit+0xb4>)
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	4a0a      	ldr	r2, [pc, #40]	; (800c4ac <prvHeapInit+0xb8>)
 800c482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	4a09      	ldr	r2, [pc, #36]	; (800c4b0 <prvHeapInit+0xbc>)
 800c48a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c48c:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <prvHeapInit+0xc0>)
 800c48e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c492:	601a      	str	r2, [r3, #0]
}
 800c494:	bf00      	nop
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr
 800c4a0:	2400848c 	.word	0x2400848c
 800c4a4:	2400c08c 	.word	0x2400c08c
 800c4a8:	2400c094 	.word	0x2400c094
 800c4ac:	2400c09c 	.word	0x2400c09c
 800c4b0:	2400c098 	.word	0x2400c098
 800c4b4:	2400c0a8 	.word	0x2400c0a8

0800c4b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4c0:	4b28      	ldr	r3, [pc, #160]	; (800c564 <prvInsertBlockIntoFreeList+0xac>)
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	e002      	b.n	800c4cc <prvInsertBlockIntoFreeList+0x14>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d8f7      	bhi.n	800c4c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d108      	bne.n	800c4fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	441a      	add	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	441a      	add	r2, r3
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d118      	bne.n	800c540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4b15      	ldr	r3, [pc, #84]	; (800c568 <prvInsertBlockIntoFreeList+0xb0>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d00d      	beq.n	800c536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	441a      	add	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	601a      	str	r2, [r3, #0]
 800c534:	e008      	b.n	800c548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c536:	4b0c      	ldr	r3, [pc, #48]	; (800c568 <prvInsertBlockIntoFreeList+0xb0>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	e003      	b.n	800c548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d002      	beq.n	800c556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c556:	bf00      	nop
 800c558:	3714      	adds	r7, #20
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	2400c08c 	.word	0x2400c08c
 800c568:	2400c094 	.word	0x2400c094

0800c56c <rcl_get_zero_initialized_publisher>:
 800c56c:	4b01      	ldr	r3, [pc, #4]	; (800c574 <rcl_get_zero_initialized_publisher+0x8>)
 800c56e:	6818      	ldr	r0, [r3, #0]
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	08016bcc 	.word	0x08016bcc

0800c578 <rcl_publisher_init>:
 800c578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c57c:	b088      	sub	sp, #32
 800c57e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c580:	2e00      	cmp	r6, #0
 800c582:	d06b      	beq.n	800c65c <rcl_publisher_init+0xe4>
 800c584:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800c588:	4605      	mov	r5, r0
 800c58a:	460f      	mov	r7, r1
 800c58c:	4690      	mov	r8, r2
 800c58e:	4650      	mov	r0, sl
 800c590:	4699      	mov	r9, r3
 800c592:	f000 f9e5 	bl	800c960 <rcutils_allocator_is_valid>
 800c596:	f080 0401 	eor.w	r4, r0, #1
 800c59a:	b2e4      	uxtb	r4, r4
 800c59c:	2c00      	cmp	r4, #0
 800c59e:	d15d      	bne.n	800c65c <rcl_publisher_init+0xe4>
 800c5a0:	2d00      	cmp	r5, #0
 800c5a2:	d05b      	beq.n	800c65c <rcl_publisher_init+0xe4>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b123      	cbz	r3, 800c5b2 <rcl_publisher_init+0x3a>
 800c5a8:	2464      	movs	r4, #100	; 0x64
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	b008      	add	sp, #32
 800c5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	f004 fff0 	bl	8011598 <rcl_node_is_valid>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d054      	beq.n	800c666 <rcl_publisher_init+0xee>
 800c5bc:	f1b8 0f00 	cmp.w	r8, #0
 800c5c0:	d04c      	beq.n	800c65c <rcl_publisher_init+0xe4>
 800c5c2:	fab9 f389 	clz	r3, r9
 800c5c6:	095b      	lsrs	r3, r3, #5
 800c5c8:	f1b9 0f00 	cmp.w	r9, #0
 800c5cc:	d046      	beq.n	800c65c <rcl_publisher_init+0xe4>
 800c5ce:	aa07      	add	r2, sp, #28
 800c5d0:	9307      	str	r3, [sp, #28]
 800c5d2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c5d6:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800c5da:	9205      	str	r2, [sp, #20]
 800c5dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c5e4:	4649      	mov	r1, r9
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800c5ec:	f005 f82c 	bl	8011648 <rcl_node_resolve_name>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d14f      	bne.n	800c694 <rcl_publisher_init+0x11c>
 800c5f4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c5f6:	20c8      	movs	r0, #200	; 0xc8
 800c5f8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800c5fa:	4798      	blx	r3
 800c5fc:	6028      	str	r0, [r5, #0]
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d050      	beq.n	800c6a4 <rcl_publisher_init+0x12c>
 800c602:	4638      	mov	r0, r7
 800c604:	f004 ffea 	bl	80115dc <rcl_node_get_rmw_handle>
 800c608:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800c60c:	4641      	mov	r1, r8
 800c60e:	9a07      	ldr	r2, [sp, #28]
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	4633      	mov	r3, r6
 800c614:	682c      	ldr	r4, [r5, #0]
 800c616:	f000 fa61 	bl	800cadc <rmw_create_publisher>
 800c61a:	682b      	ldr	r3, [r5, #0]
 800c61c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800c620:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800c624:	b370      	cbz	r0, 800c684 <rcl_publisher_init+0x10c>
 800c626:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800c62a:	f000 fb3b 	bl	800cca4 <rmw_publisher_get_actual_qos>
 800c62e:	682b      	ldr	r3, [r5, #0]
 800c630:	4604      	mov	r4, r0
 800c632:	b9d0      	cbnz	r0, 800c66a <rcl_publisher_init+0xf2>
 800c634:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800c638:	4631      	mov	r1, r6
 800c63a:	4618      	mov	r0, r3
 800c63c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800c640:	2270      	movs	r2, #112	; 0x70
 800c642:	f009 fb40 	bl	8015cc6 <memcpy>
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800c64c:	9807      	ldr	r0, [sp, #28]
 800c64e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800c650:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800c652:	4798      	blx	r3
 800c654:	4620      	mov	r0, r4
 800c656:	b008      	add	sp, #32
 800c658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65c:	240b      	movs	r4, #11
 800c65e:	4620      	mov	r0, r4
 800c660:	b008      	add	sp, #32
 800c662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c666:	24c8      	movs	r4, #200	; 0xc8
 800c668:	e79f      	b.n	800c5aa <rcl_publisher_init+0x32>
 800c66a:	b1cb      	cbz	r3, 800c6a0 <rcl_publisher_init+0x128>
 800c66c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c670:	b142      	cbz	r2, 800c684 <rcl_publisher_init+0x10c>
 800c672:	4638      	mov	r0, r7
 800c674:	f004 ffb2 	bl	80115dc <rcl_node_get_rmw_handle>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c67e:	f000 fb25 	bl	800cccc <rmw_destroy_publisher>
 800c682:	682b      	ldr	r3, [r5, #0]
 800c684:	4618      	mov	r0, r3
 800c686:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800c688:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800c68a:	2401      	movs	r4, #1
 800c68c:	4790      	blx	r2
 800c68e:	2300      	movs	r3, #0
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	e7db      	b.n	800c64c <rcl_publisher_init+0xd4>
 800c694:	2867      	cmp	r0, #103	; 0x67
 800c696:	d007      	beq.n	800c6a8 <rcl_publisher_init+0x130>
 800c698:	2869      	cmp	r0, #105	; 0x69
 800c69a:	d005      	beq.n	800c6a8 <rcl_publisher_init+0x130>
 800c69c:	280a      	cmp	r0, #10
 800c69e:	d001      	beq.n	800c6a4 <rcl_publisher_init+0x12c>
 800c6a0:	2401      	movs	r4, #1
 800c6a2:	e7d3      	b.n	800c64c <rcl_publisher_init+0xd4>
 800c6a4:	240a      	movs	r4, #10
 800c6a6:	e7d1      	b.n	800c64c <rcl_publisher_init+0xd4>
 800c6a8:	2467      	movs	r4, #103	; 0x67
 800c6aa:	e7cf      	b.n	800c64c <rcl_publisher_init+0xd4>

0800c6ac <rcl_publisher_get_default_options>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	4d14      	ldr	r5, [pc, #80]	; (800c700 <rcl_publisher_get_default_options+0x54>)
 800c6b0:	b088      	sub	sp, #32
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	2250      	movs	r2, #80	; 0x50
 800c6b6:	4913      	ldr	r1, [pc, #76]	; (800c704 <rcl_publisher_get_default_options+0x58>)
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	f009 fb04 	bl	8015cc6 <memcpy>
 800c6be:	a802      	add	r0, sp, #8
 800c6c0:	f000 f940 	bl	800c944 <rcutils_get_default_allocator>
 800c6c4:	f10d 0c08 	add.w	ip, sp, #8
 800c6c8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800c6cc:	466e      	mov	r6, sp
 800c6ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f8ce 3000 	str.w	r3, [lr]
 800c6e0:	f000 f97e 	bl	800c9e0 <rmw_get_default_publisher_options>
 800c6e4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800c6e8:	2270      	movs	r2, #112	; 0x70
 800c6ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c6ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f009 fae6 	bl	8015cc6 <memcpy>
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	b008      	add	sp, #32
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	2400c0b0 	.word	0x2400c0b0
 800c704:	08016bd0 	.word	0x08016bd0

0800c708 <rcl_publish>:
 800c708:	b1f8      	cbz	r0, 800c74a <rcl_publish+0x42>
 800c70a:	6803      	ldr	r3, [r0, #0]
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	4604      	mov	r4, r0
 800c710:	b1b3      	cbz	r3, 800c740 <rcl_publish+0x38>
 800c712:	4616      	mov	r6, r2
 800c714:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c718:	b192      	cbz	r2, 800c740 <rcl_publish+0x38>
 800c71a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800c71e:	460d      	mov	r5, r1
 800c720:	f004 fb5a 	bl	8010dd8 <rcl_context_is_valid>
 800c724:	b160      	cbz	r0, 800c740 <rcl_publish+0x38>
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800c72c:	b140      	cbz	r0, 800c740 <rcl_publish+0x38>
 800c72e:	b155      	cbz	r5, 800c746 <rcl_publish+0x3e>
 800c730:	4632      	mov	r2, r6
 800c732:	4629      	mov	r1, r5
 800c734:	f000 f972 	bl	800ca1c <rmw_publish>
 800c738:	3800      	subs	r0, #0
 800c73a:	bf18      	it	ne
 800c73c:	2001      	movne	r0, #1
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c744:	bd70      	pop	{r4, r5, r6, pc}
 800c746:	200b      	movs	r0, #11
 800c748:	bd70      	pop	{r4, r5, r6, pc}
 800c74a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c74e:	4770      	bx	lr

0800c750 <rclc_support_init>:
 800c750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c754:	b086      	sub	sp, #24
 800c756:	b3bb      	cbz	r3, 800c7c8 <rclc_support_init+0x78>
 800c758:	4606      	mov	r6, r0
 800c75a:	b3a8      	cbz	r0, 800c7c8 <rclc_support_init+0x78>
 800c75c:	461c      	mov	r4, r3
 800c75e:	460f      	mov	r7, r1
 800c760:	4690      	mov	r8, r2
 800c762:	f004 fca5 	bl	80110b0 <rcl_get_zero_initialized_init_options>
 800c766:	f104 050c 	add.w	r5, r4, #12
 800c76a:	9005      	str	r0, [sp, #20]
 800c76c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c770:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c774:	a805      	add	r0, sp, #20
 800c776:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c77a:	f004 fc9b 	bl	80110b4 <rcl_init_options_init>
 800c77e:	4605      	mov	r5, r0
 800c780:	b9e0      	cbnz	r0, 800c7bc <rclc_support_init+0x6c>
 800c782:	ad02      	add	r5, sp, #8
 800c784:	4628      	mov	r0, r5
 800c786:	f004 fb1d 	bl	8010dc4 <rcl_get_zero_initialized_context>
 800c78a:	4633      	mov	r3, r6
 800c78c:	aa05      	add	r2, sp, #20
 800c78e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c792:	e886 0003 	stmia.w	r6, {r0, r1}
 800c796:	4641      	mov	r1, r8
 800c798:	4638      	mov	r0, r7
 800c79a:	f004 fb83 	bl	8010ea4 <rcl_init>
 800c79e:	4605      	mov	r5, r0
 800c7a0:	b9b8      	cbnz	r0, 800c7d2 <rclc_support_init+0x82>
 800c7a2:	4622      	mov	r2, r4
 800c7a4:	f106 010c 	add.w	r1, r6, #12
 800c7a8:	2003      	movs	r0, #3
 800c7aa:	60b4      	str	r4, [r6, #8]
 800c7ac:	f005 f93a 	bl	8011a24 <rcl_clock_init>
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	b970      	cbnz	r0, 800c7d2 <rclc_support_init+0x82>
 800c7b4:	a805      	add	r0, sp, #20
 800c7b6:	f004 fce3 	bl	8011180 <rcl_init_options_fini>
 800c7ba:	b108      	cbz	r0, 800c7c0 <rclc_support_init+0x70>
 800c7bc:	f000 f8f4 	bl	800c9a8 <rcutils_reset_error>
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	b006      	add	sp, #24
 800c7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c8:	250b      	movs	r5, #11
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	b006      	add	sp, #24
 800c7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d2:	f000 f8e9 	bl	800c9a8 <rcutils_reset_error>
 800c7d6:	a805      	add	r0, sp, #20
 800c7d8:	f004 fcd2 	bl	8011180 <rcl_init_options_fini>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d0ef      	beq.n	800c7c0 <rclc_support_init+0x70>
 800c7e0:	e7ec      	b.n	800c7bc <rclc_support_init+0x6c>
 800c7e2:	bf00      	nop

0800c7e4 <rclc_node_init_default>:
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	bf18      	it	ne
 800c7e8:	2a00      	cmpne	r2, #0
 800c7ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7ee:	4616      	mov	r6, r2
 800c7f0:	bf0c      	ite	eq
 800c7f2:	2201      	moveq	r2, #1
 800c7f4:	2200      	movne	r2, #0
 800c7f6:	b0a1      	sub	sp, #132	; 0x84
 800c7f8:	2900      	cmp	r1, #0
 800c7fa:	bf08      	it	eq
 800c7fc:	f042 0201 	orreq.w	r2, r2, #1
 800c800:	bb22      	cbnz	r2, 800c84c <rclc_node_init_default+0x68>
 800c802:	4604      	mov	r4, r0
 800c804:	b310      	cbz	r0, 800c84c <rclc_node_init_default+0x68>
 800c806:	f10d 0810 	add.w	r8, sp, #16
 800c80a:	461f      	mov	r7, r3
 800c80c:	460d      	mov	r5, r1
 800c80e:	f10d 0918 	add.w	r9, sp, #24
 800c812:	4640      	mov	r0, r8
 800c814:	f004 fd6e 	bl	80112f4 <rcl_get_zero_initialized_node>
 800c818:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c81c:	e884 0003 	stmia.w	r4, {r0, r1}
 800c820:	4648      	mov	r0, r9
 800c822:	f004 fee1 	bl	80115e8 <rcl_node_get_default_options>
 800c826:	4640      	mov	r0, r8
 800c828:	f004 fd64 	bl	80112f4 <rcl_get_zero_initialized_node>
 800c82c:	f8cd 9000 	str.w	r9, [sp]
 800c830:	463b      	mov	r3, r7
 800c832:	4632      	mov	r2, r6
 800c834:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c838:	e884 0003 	stmia.w	r4, {r0, r1}
 800c83c:	4629      	mov	r1, r5
 800c83e:	4620      	mov	r0, r4
 800c840:	f004 fd62 	bl	8011308 <rcl_node_init>
 800c844:	b930      	cbnz	r0, 800c854 <rclc_node_init_default+0x70>
 800c846:	b021      	add	sp, #132	; 0x84
 800c848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c84c:	200b      	movs	r0, #11
 800c84e:	b021      	add	sp, #132	; 0x84
 800c850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c854:	9003      	str	r0, [sp, #12]
 800c856:	f000 f8a7 	bl	800c9a8 <rcutils_reset_error>
 800c85a:	f000 f8a5 	bl	800c9a8 <rcutils_reset_error>
 800c85e:	9803      	ldr	r0, [sp, #12]
 800c860:	b021      	add	sp, #132	; 0x84
 800c862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c866:	bf00      	nop

0800c868 <rclc_publisher_init_default>:
 800c868:	2b00      	cmp	r3, #0
 800c86a:	bf18      	it	ne
 800c86c:	2a00      	cmpne	r2, #0
 800c86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c872:	4616      	mov	r6, r2
 800c874:	bf0c      	ite	eq
 800c876:	2201      	moveq	r2, #1
 800c878:	2200      	movne	r2, #0
 800c87a:	b0a0      	sub	sp, #128	; 0x80
 800c87c:	2900      	cmp	r1, #0
 800c87e:	bf08      	it	eq
 800c880:	f042 0201 	orreq.w	r2, r2, #1
 800c884:	bb1a      	cbnz	r2, 800c8ce <rclc_publisher_init_default+0x66>
 800c886:	4604      	mov	r4, r0
 800c888:	b308      	cbz	r0, 800c8ce <rclc_publisher_init_default+0x66>
 800c88a:	f10d 0810 	add.w	r8, sp, #16
 800c88e:	461f      	mov	r7, r3
 800c890:	460d      	mov	r5, r1
 800c892:	f7ff fe6b 	bl	800c56c <rcl_get_zero_initialized_publisher>
 800c896:	6020      	str	r0, [r4, #0]
 800c898:	4640      	mov	r0, r8
 800c89a:	f7ff ff07 	bl	800c6ac <rcl_publisher_get_default_options>
 800c89e:	2250      	movs	r2, #80	; 0x50
 800c8a0:	490d      	ldr	r1, [pc, #52]	; (800c8d8 <rclc_publisher_init_default+0x70>)
 800c8a2:	4640      	mov	r0, r8
 800c8a4:	f009 fa0f 	bl	8015cc6 <memcpy>
 800c8a8:	463b      	mov	r3, r7
 800c8aa:	4632      	mov	r2, r6
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f8cd 8000 	str.w	r8, [sp]
 800c8b4:	f7ff fe60 	bl	800c578 <rcl_publisher_init>
 800c8b8:	b910      	cbnz	r0, 800c8c0 <rclc_publisher_init_default+0x58>
 800c8ba:	b020      	add	sp, #128	; 0x80
 800c8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c0:	9003      	str	r0, [sp, #12]
 800c8c2:	f000 f871 	bl	800c9a8 <rcutils_reset_error>
 800c8c6:	9803      	ldr	r0, [sp, #12]
 800c8c8:	b020      	add	sp, #128	; 0x80
 800c8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ce:	200b      	movs	r0, #11
 800c8d0:	b020      	add	sp, #128	; 0x80
 800c8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d6:	bf00      	nop
 800c8d8:	08016c20 	.word	0x08016c20

0800c8dc <__default_zero_allocate>:
 800c8dc:	f008 bd0e 	b.w	80152fc <calloc>

0800c8e0 <__default_reallocate>:
 800c8e0:	f008 be9a 	b.w	8015618 <realloc>

0800c8e4 <__default_deallocate>:
 800c8e4:	f008 bd78 	b.w	80153d8 <free>

0800c8e8 <__default_allocate>:
 800c8e8:	f008 bd6e 	b.w	80153c8 <malloc>

0800c8ec <rcutils_get_zero_initialized_allocator>:
 800c8ec:	b510      	push	{r4, lr}
 800c8ee:	4c05      	ldr	r4, [pc, #20]	; (800c904 <rcutils_get_zero_initialized_allocator+0x18>)
 800c8f0:	4686      	mov	lr, r0
 800c8f2:	4684      	mov	ip, r0
 800c8f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	4670      	mov	r0, lr
 800c8fe:	f8cc 3000 	str.w	r3, [ip]
 800c902:	bd10      	pop	{r4, pc}
 800c904:	08016c70 	.word	0x08016c70

0800c908 <rcutils_set_default_allocator>:
 800c908:	b1a8      	cbz	r0, 800c936 <rcutils_set_default_allocator+0x2e>
 800c90a:	6802      	ldr	r2, [r0, #0]
 800c90c:	b1a2      	cbz	r2, 800c938 <rcutils_set_default_allocator+0x30>
 800c90e:	6841      	ldr	r1, [r0, #4]
 800c910:	b1a1      	cbz	r1, 800c93c <rcutils_set_default_allocator+0x34>
 800c912:	b410      	push	{r4}
 800c914:	68c4      	ldr	r4, [r0, #12]
 800c916:	b164      	cbz	r4, 800c932 <rcutils_set_default_allocator+0x2a>
 800c918:	6880      	ldr	r0, [r0, #8]
 800c91a:	b138      	cbz	r0, 800c92c <rcutils_set_default_allocator+0x24>
 800c91c:	4b08      	ldr	r3, [pc, #32]	; (800c940 <rcutils_set_default_allocator+0x38>)
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	2200      	movs	r2, #0
 800c922:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c926:	2001      	movs	r0, #1
 800c928:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	4620      	mov	r0, r4
 800c934:	e7fa      	b.n	800c92c <rcutils_set_default_allocator+0x24>
 800c936:	4770      	bx	lr
 800c938:	4610      	mov	r0, r2
 800c93a:	4770      	bx	lr
 800c93c:	4608      	mov	r0, r1
 800c93e:	4770      	bx	lr
 800c940:	24000018 	.word	0x24000018

0800c944 <rcutils_get_default_allocator>:
 800c944:	b510      	push	{r4, lr}
 800c946:	4c05      	ldr	r4, [pc, #20]	; (800c95c <rcutils_get_default_allocator+0x18>)
 800c948:	4686      	mov	lr, r0
 800c94a:	4684      	mov	ip, r0
 800c94c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c94e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	4670      	mov	r0, lr
 800c956:	f8cc 3000 	str.w	r3, [ip]
 800c95a:	bd10      	pop	{r4, pc}
 800c95c:	24000018 	.word	0x24000018

0800c960 <rcutils_allocator_is_valid>:
 800c960:	b158      	cbz	r0, 800c97a <rcutils_allocator_is_valid+0x1a>
 800c962:	6803      	ldr	r3, [r0, #0]
 800c964:	b143      	cbz	r3, 800c978 <rcutils_allocator_is_valid+0x18>
 800c966:	6843      	ldr	r3, [r0, #4]
 800c968:	b133      	cbz	r3, 800c978 <rcutils_allocator_is_valid+0x18>
 800c96a:	68c3      	ldr	r3, [r0, #12]
 800c96c:	b123      	cbz	r3, 800c978 <rcutils_allocator_is_valid+0x18>
 800c96e:	6880      	ldr	r0, [r0, #8]
 800c970:	3800      	subs	r0, #0
 800c972:	bf18      	it	ne
 800c974:	2001      	movne	r0, #1
 800c976:	4770      	bx	lr
 800c978:	4618      	mov	r0, r3
 800c97a:	4770      	bx	lr

0800c97c <rcutils_get_error_string>:
 800c97c:	4b06      	ldr	r3, [pc, #24]	; (800c998 <rcutils_get_error_string+0x1c>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	b13b      	cbz	r3, 800c992 <rcutils_get_error_string+0x16>
 800c982:	4b06      	ldr	r3, [pc, #24]	; (800c99c <rcutils_get_error_string+0x20>)
 800c984:	781a      	ldrb	r2, [r3, #0]
 800c986:	b90a      	cbnz	r2, 800c98c <rcutils_get_error_string+0x10>
 800c988:	2201      	movs	r2, #1
 800c98a:	701a      	strb	r2, [r3, #0]
 800c98c:	4b04      	ldr	r3, [pc, #16]	; (800c9a0 <rcutils_get_error_string+0x24>)
 800c98e:	7818      	ldrb	r0, [r3, #0]
 800c990:	4770      	bx	lr
 800c992:	4b04      	ldr	r3, [pc, #16]	; (800c9a4 <rcutils_get_error_string+0x28>)
 800c994:	7818      	ldrb	r0, [r3, #0]
 800c996:	4770      	bx	lr
 800c998:	2400c120 	.word	0x2400c120
 800c99c:	2400c139 	.word	0x2400c139
 800c9a0:	2400c138 	.word	0x2400c138
 800c9a4:	08016c84 	.word	0x08016c84

0800c9a8 <rcutils_reset_error>:
 800c9a8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800c9c8 <rcutils_reset_error+0x20>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4a08      	ldr	r2, [pc, #32]	; (800c9d0 <rcutils_reset_error+0x28>)
 800c9b0:	4808      	ldr	r0, [pc, #32]	; (800c9d4 <rcutils_reset_error+0x2c>)
 800c9b2:	8013      	strh	r3, [r2, #0]
 800c9b4:	4908      	ldr	r1, [pc, #32]	; (800c9d8 <rcutils_reset_error+0x30>)
 800c9b6:	7003      	strb	r3, [r0, #0]
 800c9b8:	700b      	strb	r3, [r1, #0]
 800c9ba:	ed82 7b02 	vstr	d7, [r2, #8]
 800c9be:	4a07      	ldr	r2, [pc, #28]	; (800c9dc <rcutils_reset_error+0x34>)
 800c9c0:	7013      	strb	r3, [r2, #0]
 800c9c2:	4770      	bx	lr
 800c9c4:	f3af 8000 	nop.w
	...
 800c9d0:	2400c128 	.word	0x2400c128
 800c9d4:	2400c139 	.word	0x2400c139
 800c9d8:	2400c138 	.word	0x2400c138
 800c9dc:	2400c120 	.word	0x2400c120

0800c9e0 <rmw_get_default_publisher_options>:
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	6002      	str	r2, [r0, #0]
 800c9e4:	7102      	strb	r2, [r0, #4]
 800c9e6:	4770      	bx	lr

0800c9e8 <rmw_uros_set_custom_transport>:
 800c9e8:	b470      	push	{r4, r5, r6}
 800c9ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c9ee:	b162      	cbz	r2, 800ca0a <rmw_uros_set_custom_transport+0x22>
 800c9f0:	b15b      	cbz	r3, 800ca0a <rmw_uros_set_custom_transport+0x22>
 800c9f2:	b155      	cbz	r5, 800ca0a <rmw_uros_set_custom_transport+0x22>
 800c9f4:	b14e      	cbz	r6, 800ca0a <rmw_uros_set_custom_transport+0x22>
 800c9f6:	4c06      	ldr	r4, [pc, #24]	; (800ca10 <rmw_uros_set_custom_transport+0x28>)
 800c9f8:	7020      	strb	r0, [r4, #0]
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	6166      	str	r6, [r4, #20]
 800c9fe:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ca02:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ca06:	bc70      	pop	{r4, r5, r6}
 800ca08:	4770      	bx	lr
 800ca0a:	200b      	movs	r0, #11
 800ca0c:	bc70      	pop	{r4, r5, r6}
 800ca0e:	4770      	bx	lr
 800ca10:	2400c13c 	.word	0x2400c13c

0800ca14 <flush_session>:
 800ca14:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800ca16:	f002 bb4d 	b.w	800f0b4 <uxr_run_session_until_confirm_delivery>
 800ca1a:	bf00      	nop

0800ca1c <rmw_publish>:
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d053      	beq.n	800cac8 <rmw_publish+0xac>
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	460d      	mov	r5, r1
 800ca24:	b08e      	sub	sp, #56	; 0x38
 800ca26:	2900      	cmp	r1, #0
 800ca28:	d04b      	beq.n	800cac2 <rmw_publish+0xa6>
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	6800      	ldr	r0, [r0, #0]
 800ca2e:	f000 fc57 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d045      	beq.n	800cac2 <rmw_publish+0xa6>
 800ca36:	6866      	ldr	r6, [r4, #4]
 800ca38:	2e00      	cmp	r6, #0
 800ca3a:	d042      	beq.n	800cac2 <rmw_publish+0xa6>
 800ca3c:	69b4      	ldr	r4, [r6, #24]
 800ca3e:	4628      	mov	r0, r5
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	4798      	blx	r3
 800ca44:	69f3      	ldr	r3, [r6, #28]
 800ca46:	9005      	str	r0, [sp, #20]
 800ca48:	b113      	cbz	r3, 800ca50 <rmw_publish+0x34>
 800ca4a:	a805      	add	r0, sp, #20
 800ca4c:	4798      	blx	r3
 800ca4e:	9805      	ldr	r0, [sp, #20]
 800ca50:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	9000      	str	r0, [sp, #0]
 800ca58:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ca5c:	6972      	ldr	r2, [r6, #20]
 800ca5e:	ab06      	add	r3, sp, #24
 800ca60:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ca62:	f003 f925 	bl	800fcb0 <uxr_prepare_output_stream>
 800ca66:	b1d8      	cbz	r0, 800caa0 <rmw_publish+0x84>
 800ca68:	68a3      	ldr	r3, [r4, #8]
 800ca6a:	a906      	add	r1, sp, #24
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	4798      	blx	r3
 800ca70:	6a33      	ldr	r3, [r6, #32]
 800ca72:	4604      	mov	r4, r0
 800ca74:	b10b      	cbz	r3, 800ca7a <rmw_publish+0x5e>
 800ca76:	a806      	add	r0, sp, #24
 800ca78:	4798      	blx	r3
 800ca7a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ca84:	d022      	beq.n	800cacc <rmw_publish+0xb0>
 800ca86:	6918      	ldr	r0, [r3, #16]
 800ca88:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ca8a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ca8e:	f002 fb11 	bl	800f0b4 <uxr_run_session_until_confirm_delivery>
 800ca92:	4020      	ands	r0, r4
 800ca94:	b2c4      	uxtb	r4, r0
 800ca96:	f084 0001 	eor.w	r0, r4, #1
 800ca9a:	b2c0      	uxtb	r0, r0
 800ca9c:	b00e      	add	sp, #56	; 0x38
 800ca9e:	bd70      	pop	{r4, r5, r6, pc}
 800caa0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800caa4:	6918      	ldr	r0, [r3, #16]
 800caa6:	9b05      	ldr	r3, [sp, #20]
 800caa8:	9602      	str	r6, [sp, #8]
 800caaa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	4b09      	ldr	r3, [pc, #36]	; (800cad8 <rmw_publish+0xbc>)
 800cab2:	9301      	str	r3, [sp, #4]
 800cab4:	ab06      	add	r3, sp, #24
 800cab6:	6972      	ldr	r2, [r6, #20]
 800cab8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800caba:	f003 f929 	bl	800fd10 <uxr_prepare_output_stream_fragmented>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d1d2      	bne.n	800ca68 <rmw_publish+0x4c>
 800cac2:	2001      	movs	r0, #1
 800cac4:	b00e      	add	sp, #56	; 0x38
 800cac6:	bd70      	pop	{r4, r5, r6, pc}
 800cac8:	2001      	movs	r0, #1
 800caca:	4770      	bx	lr
 800cacc:	6918      	ldr	r0, [r3, #16]
 800cace:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cad2:	f001 ff6f 	bl	800e9b4 <uxr_flash_output_streams>
 800cad6:	e7de      	b.n	800ca96 <rmw_publish+0x7a>
 800cad8:	0800ca15 	.word	0x0800ca15

0800cadc <rmw_create_publisher>:
 800cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	b087      	sub	sp, #28
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f000 80d2 	beq.w	800cc8c <rmw_create_publisher+0x1b0>
 800cae8:	460e      	mov	r6, r1
 800caea:	2900      	cmp	r1, #0
 800caec:	f000 80ce 	beq.w	800cc8c <rmw_create_publisher+0x1b0>
 800caf0:	4604      	mov	r4, r0
 800caf2:	6800      	ldr	r0, [r0, #0]
 800caf4:	4615      	mov	r5, r2
 800caf6:	461f      	mov	r7, r3
 800caf8:	f000 fbf2 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 800cafc:	f080 0001 	eor.w	r0, r0, #1
 800cb00:	b2c0      	uxtb	r0, r0
 800cb02:	2800      	cmp	r0, #0
 800cb04:	f040 80c2 	bne.w	800cc8c <rmw_create_publisher+0x1b0>
 800cb08:	2d00      	cmp	r5, #0
 800cb0a:	f000 80bf 	beq.w	800cc8c <rmw_create_publisher+0x1b0>
 800cb0e:	782b      	ldrb	r3, [r5, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 80bb 	beq.w	800cc8c <rmw_create_publisher+0x1b0>
 800cb16:	2f00      	cmp	r7, #0
 800cb18:	f000 80b8 	beq.w	800cc8c <rmw_create_publisher+0x1b0>
 800cb1c:	485e      	ldr	r0, [pc, #376]	; (800cc98 <rmw_create_publisher+0x1bc>)
 800cb1e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cb22:	f005 fd3b 	bl	801259c <get_memory>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	f000 80b0 	beq.w	800cc8c <rmw_create_publisher+0x1b0>
 800cb2c:	6884      	ldr	r4, [r0, #8]
 800cb2e:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800cb32:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800cb36:	f005 fd55 	bl	80125e4 <rmw_get_implementation_identifier>
 800cb3a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800cb3e:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800cb42:	4628      	mov	r0, r5
 800cb44:	f7f3 fbde 	bl	8000304 <strlen>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800cb4e:	283c      	cmp	r0, #60	; 0x3c
 800cb50:	f200 808f 	bhi.w	800cc72 <rmw_create_publisher+0x196>
 800cb54:	462b      	mov	r3, r5
 800cb56:	4a51      	ldr	r2, [pc, #324]	; (800cc9c <rmw_create_publisher+0x1c0>)
 800cb58:	213c      	movs	r1, #60	; 0x3c
 800cb5a:	4650      	mov	r0, sl
 800cb5c:	f008 fee4 	bl	8015928 <sniprintf>
 800cb60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb64:	4639      	mov	r1, r7
 800cb66:	2250      	movs	r2, #80	; 0x50
 800cb68:	67e3      	str	r3, [r4, #124]	; 0x7c
 800cb6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cb6e:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800cb72:	f009 f8a8 	bl	8015cc6 <memcpy>
 800cb76:	7a3b      	ldrb	r3, [r7, #8]
 800cb78:	4630      	mov	r0, r6
 800cb7a:	4949      	ldr	r1, [pc, #292]	; (800cca0 <rmw_create_publisher+0x1c4>)
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb82:	bf0c      	ite	eq
 800cb84:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800cb88:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800cb8c:	67a3      	str	r3, [r4, #120]	; 0x78
 800cb8e:	2300      	movs	r3, #0
 800cb90:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cb94:	f000 fbb2 	bl	800d2fc <get_message_typesupport_handle>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d06a      	beq.n	800cc72 <rmw_create_publisher+0x196>
 800cb9c:	6842      	ldr	r2, [r0, #4]
 800cb9e:	61a2      	str	r2, [r4, #24]
 800cba0:	2a00      	cmp	r2, #0
 800cba2:	d066      	beq.n	800cc72 <rmw_create_publisher+0x196>
 800cba4:	4629      	mov	r1, r5
 800cba6:	463b      	mov	r3, r7
 800cba8:	4648      	mov	r0, r9
 800cbaa:	f005 ff87 	bl	8012abc <create_topic>
 800cbae:	6260      	str	r0, [r4, #36]	; 0x24
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d062      	beq.n	800cc7a <rmw_create_publisher+0x19e>
 800cbb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbb8:	2103      	movs	r1, #3
 800cbba:	2506      	movs	r5, #6
 800cbbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbc0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800cbc4:	1c42      	adds	r2, r0, #1
 800cbc6:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800cbca:	f001 fda3 	bl	800e714 <uxr_object_id>
 800cbce:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800cbd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbd6:	6120      	str	r0, [r4, #16]
 800cbd8:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800cbdc:	6910      	ldr	r0, [r2, #16]
 800cbde:	9500      	str	r5, [sp, #0]
 800cbe0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cbe4:	6819      	ldr	r1, [r3, #0]
 800cbe6:	6922      	ldr	r2, [r4, #16]
 800cbe8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800cbec:	f001 fcec 	bl	800e5c8 <uxr_buffer_create_publisher_bin>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cbf6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800cbfa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800cbfe:	f000 faf5 	bl	800d1ec <run_xrce_session>
 800cc02:	b3b0      	cbz	r0, 800cc72 <rmw_create_publisher+0x196>
 800cc04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc08:	2105      	movs	r1, #5
 800cc0a:	f10d 0a10 	add.w	sl, sp, #16
 800cc0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc12:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800cc16:	1c42      	adds	r2, r0, #1
 800cc18:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800cc1c:	f001 fd7a 	bl	800e714 <uxr_object_id>
 800cc20:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800cc24:	4639      	mov	r1, r7
 800cc26:	6160      	str	r0, [r4, #20]
 800cc28:	691e      	ldr	r6, [r3, #16]
 800cc2a:	4650      	mov	r0, sl
 800cc2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc30:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800cc34:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800cc38:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800cc3c:	f000 faf2 	bl	800d224 <convert_qos_profile>
 800cc40:	9503      	str	r5, [sp, #12]
 800cc42:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800cc46:	9001      	str	r0, [sp, #4]
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800cc4e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800cc5a:	f001 fce5 	bl	800e628 <uxr_buffer_create_datawriter_bin>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cc64:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800cc68:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800cc6c:	f000 fabe 	bl	800d1ec <run_xrce_session>
 800cc70:	b970      	cbnz	r0, 800cc90 <rmw_create_publisher+0x1b4>
 800cc72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cc74:	b108      	cbz	r0, 800cc7a <rmw_create_publisher+0x19e>
 800cc76:	f000 fa53 	bl	800d120 <rmw_uxrce_fini_topic_memory>
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	f04f 0800 	mov.w	r8, #0
 800cc80:	f000 f9f6 	bl	800d070 <rmw_uxrce_fini_publisher_memory>
 800cc84:	4640      	mov	r0, r8
 800cc86:	b007      	add	sp, #28
 800cc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8c:	f04f 0800 	mov.w	r8, #0
 800cc90:	4640      	mov	r0, r8
 800cc92:	b007      	add	sp, #28
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc98:	24010a34 	.word	0x24010a34
 800cc9c:	08016cbc 	.word	0x08016cbc
 800cca0:	08016c88 	.word	0x08016c88

0800cca4 <rmw_publisher_get_actual_qos>:
 800cca4:	b178      	cbz	r0, 800ccc6 <rmw_publisher_get_actual_qos+0x22>
 800cca6:	b510      	push	{r4, lr}
 800cca8:	fab1 f481 	clz	r4, r1
 800ccac:	0964      	lsrs	r4, r4, #5
 800ccae:	b141      	cbz	r1, 800ccc2 <rmw_publisher_get_actual_qos+0x1e>
 800ccb0:	6843      	ldr	r3, [r0, #4]
 800ccb2:	2250      	movs	r2, #80	; 0x50
 800ccb4:	4608      	mov	r0, r1
 800ccb6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ccba:	f009 f804 	bl	8015cc6 <memcpy>
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	bd10      	pop	{r4, pc}
 800ccc2:	200b      	movs	r0, #11
 800ccc4:	bd10      	pop	{r4, pc}
 800ccc6:	200b      	movs	r0, #11
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop

0800cccc <rmw_destroy_publisher>:
 800cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd0:	b128      	cbz	r0, 800ccde <rmw_destroy_publisher+0x12>
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	6800      	ldr	r0, [r0, #0]
 800ccd6:	460d      	mov	r5, r1
 800ccd8:	f000 fb02 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 800ccdc:	b918      	cbnz	r0, 800cce6 <rmw_destroy_publisher+0x1a>
 800ccde:	2401      	movs	r4, #1
 800cce0:	4620      	mov	r0, r4
 800cce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0f8      	beq.n	800ccde <rmw_destroy_publisher+0x12>
 800ccec:	fab5 f485 	clz	r4, r5
 800ccf0:	0964      	lsrs	r4, r4, #5
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	d0f3      	beq.n	800ccde <rmw_destroy_publisher+0x12>
 800ccf6:	6828      	ldr	r0, [r5, #0]
 800ccf8:	f000 faf2 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d0ee      	beq.n	800ccde <rmw_destroy_publisher+0x12>
 800cd00:	686e      	ldr	r6, [r5, #4]
 800cd02:	2e00      	cmp	r6, #0
 800cd04:	d0eb      	beq.n	800ccde <rmw_destroy_publisher+0x12>
 800cd06:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800cd08:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800cd0c:	f005 ff26 	bl	8012b5c <destroy_topic>
 800cd10:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800cd14:	6972      	ldr	r2, [r6, #20]
 800cd16:	6918      	ldr	r0, [r3, #16]
 800cd18:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800cd1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cd20:	6819      	ldr	r1, [r3, #0]
 800cd22:	f001 fb9d 	bl	800e460 <uxr_buffer_delete_entity>
 800cd26:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800cd2a:	4680      	mov	r8, r0
 800cd2c:	6932      	ldr	r2, [r6, #16]
 800cd2e:	6918      	ldr	r0, [r3, #16]
 800cd30:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800cd34:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cd38:	6819      	ldr	r1, [r3, #0]
 800cd3a:	f001 fb91 	bl	800e460 <uxr_buffer_delete_entity>
 800cd3e:	4606      	mov	r6, r0
 800cd40:	6938      	ldr	r0, [r7, #16]
 800cd42:	4642      	mov	r2, r8
 800cd44:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800cd48:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800cd4c:	f000 fa4e 	bl	800d1ec <run_xrce_session>
 800cd50:	693f      	ldr	r7, [r7, #16]
 800cd52:	4632      	mov	r2, r6
 800cd54:	4606      	mov	r6, r0
 800cd56:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800cd60:	f000 fa44 	bl	800d1ec <run_xrce_session>
 800cd64:	b126      	cbz	r6, 800cd70 <rmw_destroy_publisher+0xa4>
 800cd66:	b118      	cbz	r0, 800cd70 <rmw_destroy_publisher+0xa4>
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f000 f981 	bl	800d070 <rmw_uxrce_fini_publisher_memory>
 800cd6e:	e7b7      	b.n	800cce0 <rmw_destroy_publisher+0x14>
 800cd70:	2402      	movs	r4, #2
 800cd72:	e7f9      	b.n	800cd68 <rmw_destroy_publisher+0x9c>

0800cd74 <rmw_uxrce_init_service_memory>:
 800cd74:	b1e2      	cbz	r2, 800cdb0 <rmw_uxrce_init_service_memory+0x3c>
 800cd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7a:	7b05      	ldrb	r5, [r0, #12]
 800cd7c:	4606      	mov	r6, r0
 800cd7e:	b9ad      	cbnz	r5, 800cdac <rmw_uxrce_init_service_memory+0x38>
 800cd80:	23c8      	movs	r3, #200	; 0xc8
 800cd82:	4617      	mov	r7, r2
 800cd84:	460c      	mov	r4, r1
 800cd86:	46a8      	mov	r8, r5
 800cd88:	6083      	str	r3, [r0, #8]
 800cd8a:	f240 1301 	movw	r3, #257	; 0x101
 800cd8e:	e9c0 5500 	strd	r5, r5, [r0]
 800cd92:	8183      	strh	r3, [r0, #12]
 800cd94:	3501      	adds	r5, #1
 800cd96:	4621      	mov	r1, r4
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f005 fc0f 	bl	80125bc <put_memory>
 800cd9e:	42af      	cmp	r7, r5
 800cda0:	60a4      	str	r4, [r4, #8]
 800cda2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800cda6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800cdaa:	d1f3      	bne.n	800cd94 <rmw_uxrce_init_service_memory+0x20>
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <rmw_uxrce_init_client_memory>:
 800cdb4:	b1e2      	cbz	r2, 800cdf0 <rmw_uxrce_init_client_memory+0x3c>
 800cdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdba:	7b05      	ldrb	r5, [r0, #12]
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	b9ad      	cbnz	r5, 800cdec <rmw_uxrce_init_client_memory+0x38>
 800cdc0:	23c8      	movs	r3, #200	; 0xc8
 800cdc2:	4617      	mov	r7, r2
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	46a8      	mov	r8, r5
 800cdc8:	6083      	str	r3, [r0, #8]
 800cdca:	f240 1301 	movw	r3, #257	; 0x101
 800cdce:	e9c0 5500 	strd	r5, r5, [r0]
 800cdd2:	8183      	strh	r3, [r0, #12]
 800cdd4:	3501      	adds	r5, #1
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f005 fbef 	bl	80125bc <put_memory>
 800cdde:	42af      	cmp	r7, r5
 800cde0:	60a4      	str	r4, [r4, #8]
 800cde2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800cde6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800cdea:	d1f3      	bne.n	800cdd4 <rmw_uxrce_init_client_memory+0x20>
 800cdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop

0800cdf4 <rmw_uxrce_init_publisher_memory>:
 800cdf4:	b1e2      	cbz	r2, 800ce30 <rmw_uxrce_init_publisher_memory+0x3c>
 800cdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfa:	7b05      	ldrb	r5, [r0, #12]
 800cdfc:	4606      	mov	r6, r0
 800cdfe:	b9ad      	cbnz	r5, 800ce2c <rmw_uxrce_init_publisher_memory+0x38>
 800ce00:	23d8      	movs	r3, #216	; 0xd8
 800ce02:	4617      	mov	r7, r2
 800ce04:	460c      	mov	r4, r1
 800ce06:	46a8      	mov	r8, r5
 800ce08:	6083      	str	r3, [r0, #8]
 800ce0a:	f240 1301 	movw	r3, #257	; 0x101
 800ce0e:	e9c0 5500 	strd	r5, r5, [r0]
 800ce12:	8183      	strh	r3, [r0, #12]
 800ce14:	3501      	adds	r5, #1
 800ce16:	4621      	mov	r1, r4
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f005 fbcf 	bl	80125bc <put_memory>
 800ce1e:	42af      	cmp	r7, r5
 800ce20:	60a4      	str	r4, [r4, #8]
 800ce22:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ce26:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ce2a:	d1f3      	bne.n	800ce14 <rmw_uxrce_init_publisher_memory+0x20>
 800ce2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop

0800ce34 <rmw_uxrce_init_subscription_memory>:
 800ce34:	b1e2      	cbz	r2, 800ce70 <rmw_uxrce_init_subscription_memory+0x3c>
 800ce36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	7b05      	ldrb	r5, [r0, #12]
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	b9ad      	cbnz	r5, 800ce6c <rmw_uxrce_init_subscription_memory+0x38>
 800ce40:	23d8      	movs	r3, #216	; 0xd8
 800ce42:	4617      	mov	r7, r2
 800ce44:	460c      	mov	r4, r1
 800ce46:	46a8      	mov	r8, r5
 800ce48:	6083      	str	r3, [r0, #8]
 800ce4a:	f240 1301 	movw	r3, #257	; 0x101
 800ce4e:	e9c0 5500 	strd	r5, r5, [r0]
 800ce52:	8183      	strh	r3, [r0, #12]
 800ce54:	3501      	adds	r5, #1
 800ce56:	4621      	mov	r1, r4
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f005 fbaf 	bl	80125bc <put_memory>
 800ce5e:	42af      	cmp	r7, r5
 800ce60:	60a4      	str	r4, [r4, #8]
 800ce62:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800ce66:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ce6a:	d1f3      	bne.n	800ce54 <rmw_uxrce_init_subscription_memory+0x20>
 800ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop

0800ce74 <rmw_uxrce_init_node_memory>:
 800ce74:	b1e2      	cbz	r2, 800ceb0 <rmw_uxrce_init_node_memory+0x3c>
 800ce76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	7b05      	ldrb	r5, [r0, #12]
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	b9ad      	cbnz	r5, 800ceac <rmw_uxrce_init_node_memory+0x38>
 800ce80:	23a4      	movs	r3, #164	; 0xa4
 800ce82:	4617      	mov	r7, r2
 800ce84:	460c      	mov	r4, r1
 800ce86:	46a8      	mov	r8, r5
 800ce88:	6083      	str	r3, [r0, #8]
 800ce8a:	f240 1301 	movw	r3, #257	; 0x101
 800ce8e:	e9c0 5500 	strd	r5, r5, [r0]
 800ce92:	8183      	strh	r3, [r0, #12]
 800ce94:	3501      	adds	r5, #1
 800ce96:	4621      	mov	r1, r4
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f005 fb8f 	bl	80125bc <put_memory>
 800ce9e:	42af      	cmp	r7, r5
 800cea0:	60a4      	str	r4, [r4, #8]
 800cea2:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800cea6:	f804 8c98 	strb.w	r8, [r4, #-152]
 800ceaa:	d1f3      	bne.n	800ce94 <rmw_uxrce_init_node_memory+0x20>
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop

0800ceb4 <rmw_uxrce_init_session_memory>:
 800ceb4:	b1ea      	cbz	r2, 800cef2 <rmw_uxrce_init_session_memory+0x3e>
 800ceb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceba:	7b05      	ldrb	r5, [r0, #12]
 800cebc:	4606      	mov	r6, r0
 800cebe:	b9b5      	cbnz	r5, 800ceee <rmw_uxrce_init_session_memory+0x3a>
 800cec0:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800cec4:	f240 1301 	movw	r3, #257	; 0x101
 800cec8:	4617      	mov	r7, r2
 800ceca:	460c      	mov	r4, r1
 800cecc:	46a9      	mov	r9, r5
 800cece:	f8c0 8008 	str.w	r8, [r0, #8]
 800ced2:	8183      	strh	r3, [r0, #12]
 800ced4:	e9c0 5500 	strd	r5, r5, [r0]
 800ced8:	3501      	adds	r5, #1
 800ceda:	4621      	mov	r1, r4
 800cedc:	4630      	mov	r0, r6
 800cede:	f005 fb6d 	bl	80125bc <put_memory>
 800cee2:	42af      	cmp	r7, r5
 800cee4:	60a4      	str	r4, [r4, #8]
 800cee6:	f884 900c 	strb.w	r9, [r4, #12]
 800ceea:	4444      	add	r4, r8
 800ceec:	d1f4      	bne.n	800ced8 <rmw_uxrce_init_session_memory+0x24>
 800ceee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef2:	4770      	bx	lr

0800cef4 <rmw_uxrce_init_topic_memory>:
 800cef4:	b1e2      	cbz	r2, 800cf30 <rmw_uxrce_init_topic_memory+0x3c>
 800cef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefa:	7b05      	ldrb	r5, [r0, #12]
 800cefc:	4606      	mov	r6, r0
 800cefe:	b9ad      	cbnz	r5, 800cf2c <rmw_uxrce_init_topic_memory+0x38>
 800cf00:	231c      	movs	r3, #28
 800cf02:	4617      	mov	r7, r2
 800cf04:	460c      	mov	r4, r1
 800cf06:	46a8      	mov	r8, r5
 800cf08:	6083      	str	r3, [r0, #8]
 800cf0a:	f240 1301 	movw	r3, #257	; 0x101
 800cf0e:	e9c0 5500 	strd	r5, r5, [r0]
 800cf12:	8183      	strh	r3, [r0, #12]
 800cf14:	3501      	adds	r5, #1
 800cf16:	4621      	mov	r1, r4
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f005 fb4f 	bl	80125bc <put_memory>
 800cf1e:	42af      	cmp	r7, r5
 800cf20:	60a4      	str	r4, [r4, #8]
 800cf22:	f104 041c 	add.w	r4, r4, #28
 800cf26:	f804 8c10 	strb.w	r8, [r4, #-16]
 800cf2a:	d1f3      	bne.n	800cf14 <rmw_uxrce_init_topic_memory+0x20>
 800cf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop

0800cf34 <rmw_uxrce_init_static_input_buffer_memory>:
 800cf34:	b1ea      	cbz	r2, 800cf72 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800cf36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf3a:	7b05      	ldrb	r5, [r0, #12]
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	b9b5      	cbnz	r5, 800cf6e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800cf40:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800cf44:	4617      	mov	r7, r2
 800cf46:	460c      	mov	r4, r1
 800cf48:	46a8      	mov	r8, r5
 800cf4a:	6083      	str	r3, [r0, #8]
 800cf4c:	f240 1301 	movw	r3, #257	; 0x101
 800cf50:	e9c0 5500 	strd	r5, r5, [r0]
 800cf54:	8183      	strh	r3, [r0, #12]
 800cf56:	3501      	adds	r5, #1
 800cf58:	4621      	mov	r1, r4
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f005 fb2e 	bl	80125bc <put_memory>
 800cf60:	42af      	cmp	r7, r5
 800cf62:	60a4      	str	r4, [r4, #8]
 800cf64:	f884 800c 	strb.w	r8, [r4, #12]
 800cf68:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800cf6c:	d1f3      	bne.n	800cf56 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800cf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf72:	4770      	bx	lr

0800cf74 <rmw_uxrce_init_init_options_impl_memory>:
 800cf74:	b1e2      	cbz	r2, 800cfb0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800cf76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7a:	7b05      	ldrb	r5, [r0, #12]
 800cf7c:	4606      	mov	r6, r0
 800cf7e:	b9ad      	cbnz	r5, 800cfac <rmw_uxrce_init_init_options_impl_memory+0x38>
 800cf80:	232c      	movs	r3, #44	; 0x2c
 800cf82:	4617      	mov	r7, r2
 800cf84:	460c      	mov	r4, r1
 800cf86:	46a8      	mov	r8, r5
 800cf88:	6083      	str	r3, [r0, #8]
 800cf8a:	f240 1301 	movw	r3, #257	; 0x101
 800cf8e:	e9c0 5500 	strd	r5, r5, [r0]
 800cf92:	8183      	strh	r3, [r0, #12]
 800cf94:	3501      	adds	r5, #1
 800cf96:	4621      	mov	r1, r4
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f005 fb0f 	bl	80125bc <put_memory>
 800cf9e:	42af      	cmp	r7, r5
 800cfa0:	60a4      	str	r4, [r4, #8]
 800cfa2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800cfa6:	f804 8c20 	strb.w	r8, [r4, #-32]
 800cfaa:	d1f3      	bne.n	800cf94 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop

0800cfb4 <rmw_uxrce_init_wait_set_memory>:
 800cfb4:	b1e2      	cbz	r2, 800cff0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800cfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfba:	7b05      	ldrb	r5, [r0, #12]
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	b9ad      	cbnz	r5, 800cfec <rmw_uxrce_init_wait_set_memory+0x38>
 800cfc0:	231c      	movs	r3, #28
 800cfc2:	4617      	mov	r7, r2
 800cfc4:	460c      	mov	r4, r1
 800cfc6:	46a8      	mov	r8, r5
 800cfc8:	6083      	str	r3, [r0, #8]
 800cfca:	f240 1301 	movw	r3, #257	; 0x101
 800cfce:	e9c0 5500 	strd	r5, r5, [r0]
 800cfd2:	8183      	strh	r3, [r0, #12]
 800cfd4:	3501      	adds	r5, #1
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f005 faef 	bl	80125bc <put_memory>
 800cfde:	42af      	cmp	r7, r5
 800cfe0:	60a4      	str	r4, [r4, #8]
 800cfe2:	f104 041c 	add.w	r4, r4, #28
 800cfe6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800cfea:	d1f3      	bne.n	800cfd4 <rmw_uxrce_init_wait_set_memory+0x20>
 800cfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <rmw_uxrce_init_guard_condition_memory>:
 800cff4:	b1e2      	cbz	r2, 800d030 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800cff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffa:	7b05      	ldrb	r5, [r0, #12]
 800cffc:	4606      	mov	r6, r0
 800cffe:	b9ad      	cbnz	r5, 800d02c <rmw_uxrce_init_guard_condition_memory+0x38>
 800d000:	2320      	movs	r3, #32
 800d002:	4617      	mov	r7, r2
 800d004:	460c      	mov	r4, r1
 800d006:	46a8      	mov	r8, r5
 800d008:	6083      	str	r3, [r0, #8]
 800d00a:	f240 1301 	movw	r3, #257	; 0x101
 800d00e:	e9c0 5500 	strd	r5, r5, [r0]
 800d012:	8183      	strh	r3, [r0, #12]
 800d014:	3501      	adds	r5, #1
 800d016:	4621      	mov	r1, r4
 800d018:	4630      	mov	r0, r6
 800d01a:	f005 facf 	bl	80125bc <put_memory>
 800d01e:	42af      	cmp	r7, r5
 800d020:	60a4      	str	r4, [r4, #8]
 800d022:	f104 0420 	add.w	r4, r4, #32
 800d026:	f804 8c14 	strb.w	r8, [r4, #-20]
 800d02a:	d1f3      	bne.n	800d014 <rmw_uxrce_init_guard_condition_memory+0x20>
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop

0800d034 <rmw_uxrce_fini_session_memory>:
 800d034:	4601      	mov	r1, r0
 800d036:	4801      	ldr	r0, [pc, #4]	; (800d03c <rmw_uxrce_fini_session_memory+0x8>)
 800d038:	f005 bac0 	b.w	80125bc <put_memory>
 800d03c:	24010a54 	.word	0x24010a54

0800d040 <rmw_uxrce_fini_node_memory>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	4604      	mov	r4, r0
 800d044:	6800      	ldr	r0, [r0, #0]
 800d046:	b128      	cbz	r0, 800d054 <rmw_uxrce_fini_node_memory+0x14>
 800d048:	4b07      	ldr	r3, [pc, #28]	; (800d068 <rmw_uxrce_fini_node_memory+0x28>)
 800d04a:	6819      	ldr	r1, [r3, #0]
 800d04c:	f7f3 f950 	bl	80002f0 <strcmp>
 800d050:	b940      	cbnz	r0, 800d064 <rmw_uxrce_fini_node_memory+0x24>
 800d052:	6020      	str	r0, [r4, #0]
 800d054:	6861      	ldr	r1, [r4, #4]
 800d056:	b129      	cbz	r1, 800d064 <rmw_uxrce_fini_node_memory+0x24>
 800d058:	2500      	movs	r5, #0
 800d05a:	4804      	ldr	r0, [pc, #16]	; (800d06c <rmw_uxrce_fini_node_memory+0x2c>)
 800d05c:	610d      	str	r5, [r1, #16]
 800d05e:	f005 faad 	bl	80125bc <put_memory>
 800d062:	6065      	str	r5, [r4, #4]
 800d064:	bd38      	pop	{r3, r4, r5, pc}
 800d066:	bf00      	nop
 800d068:	080172a4 	.word	0x080172a4
 800d06c:	24010a24 	.word	0x24010a24

0800d070 <rmw_uxrce_fini_publisher_memory>:
 800d070:	b510      	push	{r4, lr}
 800d072:	4604      	mov	r4, r0
 800d074:	6800      	ldr	r0, [r0, #0]
 800d076:	b128      	cbz	r0, 800d084 <rmw_uxrce_fini_publisher_memory+0x14>
 800d078:	4b06      	ldr	r3, [pc, #24]	; (800d094 <rmw_uxrce_fini_publisher_memory+0x24>)
 800d07a:	6819      	ldr	r1, [r3, #0]
 800d07c:	f7f3 f938 	bl	80002f0 <strcmp>
 800d080:	b938      	cbnz	r0, 800d092 <rmw_uxrce_fini_publisher_memory+0x22>
 800d082:	6020      	str	r0, [r4, #0]
 800d084:	6861      	ldr	r1, [r4, #4]
 800d086:	b121      	cbz	r1, 800d092 <rmw_uxrce_fini_publisher_memory+0x22>
 800d088:	4803      	ldr	r0, [pc, #12]	; (800d098 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d08a:	f005 fa97 	bl	80125bc <put_memory>
 800d08e:	2300      	movs	r3, #0
 800d090:	6063      	str	r3, [r4, #4]
 800d092:	bd10      	pop	{r4, pc}
 800d094:	080172a4 	.word	0x080172a4
 800d098:	24010a34 	.word	0x24010a34

0800d09c <rmw_uxrce_fini_subscription_memory>:
 800d09c:	b510      	push	{r4, lr}
 800d09e:	4604      	mov	r4, r0
 800d0a0:	6800      	ldr	r0, [r0, #0]
 800d0a2:	b128      	cbz	r0, 800d0b0 <rmw_uxrce_fini_subscription_memory+0x14>
 800d0a4:	4b06      	ldr	r3, [pc, #24]	; (800d0c0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d0a6:	6819      	ldr	r1, [r3, #0]
 800d0a8:	f7f3 f922 	bl	80002f0 <strcmp>
 800d0ac:	b938      	cbnz	r0, 800d0be <rmw_uxrce_fini_subscription_memory+0x22>
 800d0ae:	6020      	str	r0, [r4, #0]
 800d0b0:	6861      	ldr	r1, [r4, #4]
 800d0b2:	b121      	cbz	r1, 800d0be <rmw_uxrce_fini_subscription_memory+0x22>
 800d0b4:	4803      	ldr	r0, [pc, #12]	; (800d0c4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800d0b6:	f005 fa81 	bl	80125bc <put_memory>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6063      	str	r3, [r4, #4]
 800d0be:	bd10      	pop	{r4, pc}
 800d0c0:	080172a4 	.word	0x080172a4
 800d0c4:	24010a74 	.word	0x24010a74

0800d0c8 <rmw_uxrce_fini_service_memory>:
 800d0c8:	b510      	push	{r4, lr}
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	6800      	ldr	r0, [r0, #0]
 800d0ce:	b128      	cbz	r0, 800d0dc <rmw_uxrce_fini_service_memory+0x14>
 800d0d0:	4b06      	ldr	r3, [pc, #24]	; (800d0ec <rmw_uxrce_fini_service_memory+0x24>)
 800d0d2:	6819      	ldr	r1, [r3, #0]
 800d0d4:	f7f3 f90c 	bl	80002f0 <strcmp>
 800d0d8:	b938      	cbnz	r0, 800d0ea <rmw_uxrce_fini_service_memory+0x22>
 800d0da:	6020      	str	r0, [r4, #0]
 800d0dc:	6861      	ldr	r1, [r4, #4]
 800d0de:	b121      	cbz	r1, 800d0ea <rmw_uxrce_fini_service_memory+0x22>
 800d0e0:	4803      	ldr	r0, [pc, #12]	; (800d0f0 <rmw_uxrce_fini_service_memory+0x28>)
 800d0e2:	f005 fa6b 	bl	80125bc <put_memory>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	6063      	str	r3, [r4, #4]
 800d0ea:	bd10      	pop	{r4, pc}
 800d0ec:	080172a4 	.word	0x080172a4
 800d0f0:	24010a44 	.word	0x24010a44

0800d0f4 <rmw_uxrce_fini_client_memory>:
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	6800      	ldr	r0, [r0, #0]
 800d0fa:	b128      	cbz	r0, 800d108 <rmw_uxrce_fini_client_memory+0x14>
 800d0fc:	4b06      	ldr	r3, [pc, #24]	; (800d118 <rmw_uxrce_fini_client_memory+0x24>)
 800d0fe:	6819      	ldr	r1, [r3, #0]
 800d100:	f7f3 f8f6 	bl	80002f0 <strcmp>
 800d104:	b938      	cbnz	r0, 800d116 <rmw_uxrce_fini_client_memory+0x22>
 800d106:	6020      	str	r0, [r4, #0]
 800d108:	6861      	ldr	r1, [r4, #4]
 800d10a:	b121      	cbz	r1, 800d116 <rmw_uxrce_fini_client_memory+0x22>
 800d10c:	4803      	ldr	r0, [pc, #12]	; (800d11c <rmw_uxrce_fini_client_memory+0x28>)
 800d10e:	f005 fa55 	bl	80125bc <put_memory>
 800d112:	2300      	movs	r3, #0
 800d114:	6063      	str	r3, [r4, #4]
 800d116:	bd10      	pop	{r4, pc}
 800d118:	080172a4 	.word	0x080172a4
 800d11c:	2400c158 	.word	0x2400c158

0800d120 <rmw_uxrce_fini_topic_memory>:
 800d120:	b510      	push	{r4, lr}
 800d122:	4604      	mov	r4, r0
 800d124:	4803      	ldr	r0, [pc, #12]	; (800d134 <rmw_uxrce_fini_topic_memory+0x14>)
 800d126:	4621      	mov	r1, r4
 800d128:	f005 fa48 	bl	80125bc <put_memory>
 800d12c:	2300      	movs	r3, #0
 800d12e:	61a3      	str	r3, [r4, #24]
 800d130:	bd10      	pop	{r4, pc}
 800d132:	bf00      	nop
 800d134:	24010a84 	.word	0x24010a84

0800d138 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d138:	b082      	sub	sp, #8
 800d13a:	492b      	ldr	r1, [pc, #172]	; (800d1e8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800d13c:	b530      	push	{r4, r5, lr}
 800d13e:	680d      	ldr	r5, [r1, #0]
 800d140:	ac03      	add	r4, sp, #12
 800d142:	e884 000c 	stmia.w	r4, {r2, r3}
 800d146:	461c      	mov	r4, r3
 800d148:	2d00      	cmp	r5, #0
 800d14a:	d04b      	beq.n	800d1e4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800d14c:	462b      	mov	r3, r5
 800d14e:	2100      	movs	r1, #0
 800d150:	689a      	ldr	r2, [r3, #8]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800d158:	4290      	cmp	r0, r2
 800d15a:	bf08      	it	eq
 800d15c:	3101      	addeq	r1, #1
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1f6      	bne.n	800d150 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d162:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d166:	2b02      	cmp	r3, #2
 800d168:	d029      	beq.n	800d1be <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d16a:	d820      	bhi.n	800d1ae <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800d16c:	428c      	cmp	r4, r1
 800d16e:	d828      	bhi.n	800d1c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800d170:	fab4 f284 	clz	r2, r4
 800d174:	0952      	lsrs	r2, r2, #5
 800d176:	b324      	cbz	r4, 800d1c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800d178:	b1dd      	cbz	r5, 800d1b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800d17a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d17e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800d182:	e001      	b.n	800d188 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800d184:	686d      	ldr	r5, [r5, #4]
 800d186:	b1ad      	cbz	r5, 800d1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800d188:	68ab      	ldr	r3, [r5, #8]
 800d18a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800d18e:	4288      	cmp	r0, r1
 800d190:	d1f8      	bne.n	800d184 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800d192:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800d196:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800d19a:	4561      	cmp	r1, ip
 800d19c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d1a0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d1a4:	daee      	bge.n	800d184 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800d1a6:	468c      	mov	ip, r1
 800d1a8:	461c      	mov	r4, r3
 800d1aa:	462a      	mov	r2, r5
 800d1ac:	e7ea      	b.n	800d184 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	d0dc      	beq.n	800d16c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	4610      	mov	r0, r2
 800d1b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1ba:	b002      	add	sp, #8
 800d1bc:	4770      	bx	lr
 800d1be:	428c      	cmp	r4, r1
 800d1c0:	d905      	bls.n	800d1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800d1c2:	4809      	ldr	r0, [pc, #36]	; (800d1e8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800d1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1c8:	b002      	add	sp, #8
 800d1ca:	f005 b9e7 	b.w	801259c <get_memory>
 800d1ce:	fab4 f284 	clz	r2, r4
 800d1d2:	0952      	lsrs	r2, r2, #5
 800d1d4:	2c00      	cmp	r4, #0
 800d1d6:	d1ed      	bne.n	800d1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800d1d8:	4803      	ldr	r0, [pc, #12]	; (800d1e8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800d1da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1de:	b002      	add	sp, #8
 800d1e0:	f005 b9dc 	b.w	801259c <get_memory>
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	e7bc      	b.n	800d162 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d1e8:	24010a64 	.word	0x24010a64

0800d1ec <run_xrce_session>:
 800d1ec:	b510      	push	{r4, lr}
 800d1ee:	788c      	ldrb	r4, [r1, #2]
 800d1f0:	b086      	sub	sp, #24
 800d1f2:	2c01      	cmp	r4, #1
 800d1f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d1f8:	d00c      	beq.n	800d214 <run_xrce_session+0x28>
 800d1fa:	2401      	movs	r4, #1
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	f10d 020e 	add.w	r2, sp, #14
 800d202:	f10d 0317 	add.w	r3, sp, #23
 800d206:	9400      	str	r4, [sp, #0]
 800d208:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d20c:	f001 ff76 	bl	800f0fc <uxr_run_session_until_all_status>
 800d210:	b006      	add	sp, #24
 800d212:	bd10      	pop	{r4, pc}
 800d214:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800d218:	f001 fbcc 	bl	800e9b4 <uxr_flash_output_streams>
 800d21c:	4620      	mov	r0, r4
 800d21e:	b006      	add	sp, #24
 800d220:	bd10      	pop	{r4, pc}
 800d222:	bf00      	nop

0800d224 <convert_qos_profile>:
 800d224:	7a4a      	ldrb	r2, [r1, #9]
 800d226:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d22a:	2a02      	cmp	r2, #2
 800d22c:	bf18      	it	ne
 800d22e:	2200      	movne	r2, #0
 800d230:	7002      	strb	r2, [r0, #0]
 800d232:	f1ac 0202 	sub.w	r2, ip, #2
 800d236:	fab2 f282 	clz	r2, r2
 800d23a:	0952      	lsrs	r2, r2, #5
 800d23c:	7042      	strb	r2, [r0, #1]
 800d23e:	780a      	ldrb	r2, [r1, #0]
 800d240:	8889      	ldrh	r1, [r1, #4]
 800d242:	f1a2 0202 	sub.w	r2, r2, #2
 800d246:	8081      	strh	r1, [r0, #4]
 800d248:	fab2 f282 	clz	r2, r2
 800d24c:	0952      	lsrs	r2, r2, #5
 800d24e:	7082      	strb	r2, [r0, #2]
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop

0800d254 <generate_type_name>:
 800d254:	2300      	movs	r3, #0
 800d256:	b530      	push	{r4, r5, lr}
 800d258:	700b      	strb	r3, [r1, #0]
 800d25a:	b087      	sub	sp, #28
 800d25c:	6803      	ldr	r3, [r0, #0]
 800d25e:	4614      	mov	r4, r2
 800d260:	b1bb      	cbz	r3, 800d292 <generate_type_name+0x3e>
 800d262:	4a0e      	ldr	r2, [pc, #56]	; (800d29c <generate_type_name+0x48>)
 800d264:	4615      	mov	r5, r2
 800d266:	9500      	str	r5, [sp, #0]
 800d268:	9203      	str	r2, [sp, #12]
 800d26a:	4d0d      	ldr	r5, [pc, #52]	; (800d2a0 <generate_type_name+0x4c>)
 800d26c:	6842      	ldr	r2, [r0, #4]
 800d26e:	4608      	mov	r0, r1
 800d270:	490c      	ldr	r1, [pc, #48]	; (800d2a4 <generate_type_name+0x50>)
 800d272:	9204      	str	r2, [sp, #16]
 800d274:	9105      	str	r1, [sp, #20]
 800d276:	9102      	str	r1, [sp, #8]
 800d278:	4621      	mov	r1, r4
 800d27a:	4a0b      	ldr	r2, [pc, #44]	; (800d2a8 <generate_type_name+0x54>)
 800d27c:	9501      	str	r5, [sp, #4]
 800d27e:	f008 fb53 	bl	8015928 <sniprintf>
 800d282:	2800      	cmp	r0, #0
 800d284:	bfa8      	it	ge
 800d286:	4284      	cmpge	r4, r0
 800d288:	bfcc      	ite	gt
 800d28a:	2001      	movgt	r0, #1
 800d28c:	2000      	movle	r0, #0
 800d28e:	b007      	add	sp, #28
 800d290:	bd30      	pop	{r4, r5, pc}
 800d292:	4b06      	ldr	r3, [pc, #24]	; (800d2ac <generate_type_name+0x58>)
 800d294:	4a01      	ldr	r2, [pc, #4]	; (800d29c <generate_type_name+0x48>)
 800d296:	461d      	mov	r5, r3
 800d298:	e7e5      	b.n	800d266 <generate_type_name+0x12>
 800d29a:	bf00      	nop
 800d29c:	08016cac 	.word	0x08016cac
 800d2a0:	08016cc4 	.word	0x08016cc4
 800d2a4:	08016cc0 	.word	0x08016cc0
 800d2a8:	08016cb0 	.word	0x08016cb0
 800d2ac:	0801707c 	.word	0x0801707c

0800d2b0 <generate_topic_name>:
 800d2b0:	b530      	push	{r4, r5, lr}
 800d2b2:	4614      	mov	r4, r2
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	4b07      	ldr	r3, [pc, #28]	; (800d2d8 <generate_topic_name+0x28>)
 800d2ba:	4a08      	ldr	r2, [pc, #32]	; (800d2dc <generate_topic_name+0x2c>)
 800d2bc:	4608      	mov	r0, r1
 800d2be:	9500      	str	r5, [sp, #0]
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	f008 fb31 	bl	8015928 <sniprintf>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	bfa8      	it	ge
 800d2ca:	4284      	cmpge	r4, r0
 800d2cc:	bfcc      	ite	gt
 800d2ce:	2001      	movgt	r0, #1
 800d2d0:	2000      	movle	r0, #0
 800d2d2:	b003      	add	sp, #12
 800d2d4:	bd30      	pop	{r4, r5, pc}
 800d2d6:	bf00      	nop
 800d2d8:	08016cd0 	.word	0x08016cd0
 800d2dc:	08016cc8 	.word	0x08016cc8

0800d2e0 <is_uxrce_rmw_identifier_valid>:
 800d2e0:	b510      	push	{r4, lr}
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	b140      	cbz	r0, 800d2f8 <is_uxrce_rmw_identifier_valid+0x18>
 800d2e6:	f005 f97d 	bl	80125e4 <rmw_get_implementation_identifier>
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f7f2 ffff 	bl	80002f0 <strcmp>
 800d2f2:	fab0 f080 	clz	r0, r0
 800d2f6:	0940      	lsrs	r0, r0, #5
 800d2f8:	bd10      	pop	{r4, pc}
 800d2fa:	bf00      	nop

0800d2fc <get_message_typesupport_handle>:
 800d2fc:	6883      	ldr	r3, [r0, #8]
 800d2fe:	4718      	bx	r3

0800d300 <get_message_typesupport_handle_function>:
 800d300:	b510      	push	{r4, lr}
 800d302:	4604      	mov	r4, r0
 800d304:	6800      	ldr	r0, [r0, #0]
 800d306:	f7f2 fff3 	bl	80002f0 <strcmp>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	bf0c      	ite	eq
 800d30e:	4620      	moveq	r0, r4
 800d310:	2000      	movne	r0, #0
 800d312:	bd10      	pop	{r4, pc}

0800d314 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d314:	4b04      	ldr	r3, [pc, #16]	; (800d328 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	b10a      	cbz	r2, 800d31e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800d31a:	4803      	ldr	r0, [pc, #12]	; (800d328 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d31c:	4770      	bx	lr
 800d31e:	4a03      	ldr	r2, [pc, #12]	; (800d32c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800d320:	4801      	ldr	r0, [pc, #4]	; (800d328 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d322:	6812      	ldr	r2, [r2, #0]
 800d324:	601a      	str	r2, [r3, #0]
 800d326:	4770      	bx	lr
 800d328:	24000034 	.word	0x24000034
 800d32c:	240000b0 	.word	0x240000b0

0800d330 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d330:	4a02      	ldr	r2, [pc, #8]	; (800d33c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800d332:	4b03      	ldr	r3, [pc, #12]	; (800d340 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800d334:	6812      	ldr	r2, [r2, #0]
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	240000b0 	.word	0x240000b0
 800d340:	24000034 	.word	0x24000034

0800d344 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800d344:	f005 be3c 	b.w	8012fc0 <std_msgs__msg__Int32__init>

0800d348 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800d348:	f005 be3e 	b.w	8012fc8 <std_msgs__msg__Int32__fini>

0800d34c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d34c:	4b04      	ldr	r3, [pc, #16]	; (800d360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	b10a      	cbz	r2, 800d356 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800d352:	4803      	ldr	r0, [pc, #12]	; (800d360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d354:	4770      	bx	lr
 800d356:	4a03      	ldr	r2, [pc, #12]	; (800d364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800d358:	4801      	ldr	r0, [pc, #4]	; (800d360 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d35a:	6812      	ldr	r2, [r2, #0]
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	4770      	bx	lr
 800d360:	2400007c 	.word	0x2400007c
 800d364:	240000b4 	.word	0x240000b4

0800d368 <_Int32__max_serialized_size>:
 800d368:	2104      	movs	r1, #4
 800d36a:	2000      	movs	r0, #0
 800d36c:	b508      	push	{r3, lr}
 800d36e:	f001 f807 	bl	800e380 <ucdr_alignment>
 800d372:	3004      	adds	r0, #4
 800d374:	bd08      	pop	{r3, pc}
 800d376:	bf00      	nop

0800d378 <_Int32__cdr_deserialize>:
 800d378:	b109      	cbz	r1, 800d37e <_Int32__cdr_deserialize+0x6>
 800d37a:	f000 bf19 	b.w	800e1b0 <ucdr_deserialize_int32_t>
 800d37e:	4608      	mov	r0, r1
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop

0800d384 <get_serialized_size_std_msgs__msg__Int32>:
 800d384:	b138      	cbz	r0, 800d396 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800d386:	b508      	push	{r3, lr}
 800d388:	460b      	mov	r3, r1
 800d38a:	2104      	movs	r1, #4
 800d38c:	4618      	mov	r0, r3
 800d38e:	f000 fff7 	bl	800e380 <ucdr_alignment>
 800d392:	3004      	adds	r0, #4
 800d394:	bd08      	pop	{r3, pc}
 800d396:	4770      	bx	lr

0800d398 <_Int32__cdr_serialize>:
 800d398:	460a      	mov	r2, r1
 800d39a:	b118      	cbz	r0, 800d3a4 <_Int32__cdr_serialize+0xc>
 800d39c:	6801      	ldr	r1, [r0, #0]
 800d39e:	4610      	mov	r0, r2
 800d3a0:	f000 be6e 	b.w	800e080 <ucdr_serialize_int32_t>
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop

0800d3a8 <_Int32__get_serialized_size>:
 800d3a8:	b130      	cbz	r0, 800d3b8 <_Int32__get_serialized_size+0x10>
 800d3aa:	2104      	movs	r1, #4
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	b508      	push	{r3, lr}
 800d3b0:	f000 ffe6 	bl	800e380 <ucdr_alignment>
 800d3b4:	3004      	adds	r0, #4
 800d3b6:	bd08      	pop	{r3, pc}
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop

0800d3bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d3bc:	4800      	ldr	r0, [pc, #0]	; (800d3c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800d3be:	4770      	bx	lr
 800d3c0:	24000088 	.word	0x24000088

0800d3c4 <ucdr_serialize_bool>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	f000 ff8c 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d3d0:	b148      	cbz	r0, 800d3e6 <ucdr_serialize_bool+0x22>
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	2101      	movs	r1, #1
 800d3d6:	701d      	strb	r5, [r3, #0]
 800d3d8:	68a2      	ldr	r2, [r4, #8]
 800d3da:	6923      	ldr	r3, [r4, #16]
 800d3dc:	440a      	add	r2, r1
 800d3de:	7561      	strb	r1, [r4, #21]
 800d3e0:	440b      	add	r3, r1
 800d3e2:	60a2      	str	r2, [r4, #8]
 800d3e4:	6123      	str	r3, [r4, #16]
 800d3e6:	7da0      	ldrb	r0, [r4, #22]
 800d3e8:	f080 0001 	eor.w	r0, r0, #1
 800d3ec:	bd38      	pop	{r3, r4, r5, pc}
 800d3ee:	bf00      	nop

0800d3f0 <ucdr_deserialize_bool>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	460d      	mov	r5, r1
 800d3f4:	2101      	movs	r1, #1
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	f000 ff76 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d3fc:	b160      	cbz	r0, 800d418 <ucdr_deserialize_bool+0x28>
 800d3fe:	68a2      	ldr	r2, [r4, #8]
 800d400:	2101      	movs	r1, #1
 800d402:	6923      	ldr	r3, [r4, #16]
 800d404:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d408:	440b      	add	r3, r1
 800d40a:	3800      	subs	r0, #0
 800d40c:	bf18      	it	ne
 800d40e:	2001      	movne	r0, #1
 800d410:	7028      	strb	r0, [r5, #0]
 800d412:	60a2      	str	r2, [r4, #8]
 800d414:	6123      	str	r3, [r4, #16]
 800d416:	7561      	strb	r1, [r4, #21]
 800d418:	7da0      	ldrb	r0, [r4, #22]
 800d41a:	f080 0001 	eor.w	r0, r0, #1
 800d41e:	bd38      	pop	{r3, r4, r5, pc}

0800d420 <ucdr_serialize_uint8_t>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	460d      	mov	r5, r1
 800d424:	2101      	movs	r1, #1
 800d426:	4604      	mov	r4, r0
 800d428:	f000 ff5e 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d42c:	b148      	cbz	r0, 800d442 <ucdr_serialize_uint8_t+0x22>
 800d42e:	68a3      	ldr	r3, [r4, #8]
 800d430:	2101      	movs	r1, #1
 800d432:	701d      	strb	r5, [r3, #0]
 800d434:	68a2      	ldr	r2, [r4, #8]
 800d436:	6923      	ldr	r3, [r4, #16]
 800d438:	440a      	add	r2, r1
 800d43a:	7561      	strb	r1, [r4, #21]
 800d43c:	440b      	add	r3, r1
 800d43e:	60a2      	str	r2, [r4, #8]
 800d440:	6123      	str	r3, [r4, #16]
 800d442:	7da0      	ldrb	r0, [r4, #22]
 800d444:	f080 0001 	eor.w	r0, r0, #1
 800d448:	bd38      	pop	{r3, r4, r5, pc}
 800d44a:	bf00      	nop

0800d44c <ucdr_deserialize_uint8_t>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	460d      	mov	r5, r1
 800d450:	2101      	movs	r1, #1
 800d452:	4604      	mov	r4, r0
 800d454:	f000 ff48 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d458:	b150      	cbz	r0, 800d470 <ucdr_deserialize_uint8_t+0x24>
 800d45a:	68a3      	ldr	r3, [r4, #8]
 800d45c:	2101      	movs	r1, #1
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	702b      	strb	r3, [r5, #0]
 800d462:	68a2      	ldr	r2, [r4, #8]
 800d464:	6923      	ldr	r3, [r4, #16]
 800d466:	440a      	add	r2, r1
 800d468:	7561      	strb	r1, [r4, #21]
 800d46a:	440b      	add	r3, r1
 800d46c:	60a2      	str	r2, [r4, #8]
 800d46e:	6123      	str	r3, [r4, #16]
 800d470:	7da0      	ldrb	r0, [r4, #22]
 800d472:	f080 0001 	eor.w	r0, r0, #1
 800d476:	bd38      	pop	{r3, r4, r5, pc}

0800d478 <ucdr_serialize_uint16_t>:
 800d478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d47c:	460b      	mov	r3, r1
 800d47e:	b082      	sub	sp, #8
 800d480:	4604      	mov	r4, r0
 800d482:	2102      	movs	r1, #2
 800d484:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d488:	f000 ff82 	bl	800e390 <ucdr_buffer_alignment>
 800d48c:	4601      	mov	r1, r0
 800d48e:	4620      	mov	r0, r4
 800d490:	7d67      	ldrb	r7, [r4, #21]
 800d492:	f000 ffc5 	bl	800e420 <ucdr_advance_buffer>
 800d496:	2102      	movs	r1, #2
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 ff19 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800d49e:	bb78      	cbnz	r0, 800d500 <ucdr_serialize_uint16_t+0x88>
 800d4a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d4a4:	42ab      	cmp	r3, r5
 800d4a6:	d926      	bls.n	800d4f6 <ucdr_serialize_uint16_t+0x7e>
 800d4a8:	1b5e      	subs	r6, r3, r5
 800d4aa:	60a3      	str	r3, [r4, #8]
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f1c6 0802 	rsb	r8, r6, #2
 800d4b4:	4433      	add	r3, r6
 800d4b6:	4641      	mov	r1, r8
 800d4b8:	6123      	str	r3, [r4, #16]
 800d4ba:	f000 ff15 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d03b      	beq.n	800d53a <ucdr_serialize_uint16_t+0xc2>
 800d4c2:	7d23      	ldrb	r3, [r4, #20]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d04a      	beq.n	800d55e <ucdr_serialize_uint16_t+0xe6>
 800d4c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4cc:	702b      	strb	r3, [r5, #0]
 800d4ce:	2e00      	cmp	r6, #0
 800d4d0:	d040      	beq.n	800d554 <ucdr_serialize_uint16_t+0xdc>
 800d4d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d4d6:	706b      	strb	r3, [r5, #1]
 800d4d8:	6923      	ldr	r3, [r4, #16]
 800d4da:	2102      	movs	r1, #2
 800d4dc:	68a2      	ldr	r2, [r4, #8]
 800d4de:	3302      	adds	r3, #2
 800d4e0:	7da0      	ldrb	r0, [r4, #22]
 800d4e2:	4442      	add	r2, r8
 800d4e4:	7561      	strb	r1, [r4, #21]
 800d4e6:	1b9e      	subs	r6, r3, r6
 800d4e8:	f080 0001 	eor.w	r0, r0, #1
 800d4ec:	60a2      	str	r2, [r4, #8]
 800d4ee:	6126      	str	r6, [r4, #16]
 800d4f0:	b002      	add	sp, #8
 800d4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f6:	2102      	movs	r1, #2
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 fef5 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d4fe:	b190      	cbz	r0, 800d526 <ucdr_serialize_uint16_t+0xae>
 800d500:	7d23      	ldrb	r3, [r4, #20]
 800d502:	2b01      	cmp	r3, #1
 800d504:	68a3      	ldr	r3, [r4, #8]
 800d506:	d014      	beq.n	800d532 <ucdr_serialize_uint16_t+0xba>
 800d508:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d50c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d510:	7019      	strb	r1, [r3, #0]
 800d512:	68a3      	ldr	r3, [r4, #8]
 800d514:	705a      	strb	r2, [r3, #1]
 800d516:	2102      	movs	r1, #2
 800d518:	68a2      	ldr	r2, [r4, #8]
 800d51a:	6923      	ldr	r3, [r4, #16]
 800d51c:	440a      	add	r2, r1
 800d51e:	7561      	strb	r1, [r4, #21]
 800d520:	440b      	add	r3, r1
 800d522:	60a2      	str	r2, [r4, #8]
 800d524:	6123      	str	r3, [r4, #16]
 800d526:	7da0      	ldrb	r0, [r4, #22]
 800d528:	f080 0001 	eor.w	r0, r0, #1
 800d52c:	b002      	add	sp, #8
 800d52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d532:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d536:	801a      	strh	r2, [r3, #0]
 800d538:	e7ed      	b.n	800d516 <ucdr_serialize_uint16_t+0x9e>
 800d53a:	68a2      	ldr	r2, [r4, #8]
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	7da0      	ldrb	r0, [r4, #22]
 800d540:	1b92      	subs	r2, r2, r6
 800d542:	1b9b      	subs	r3, r3, r6
 800d544:	7567      	strb	r7, [r4, #21]
 800d546:	f080 0001 	eor.w	r0, r0, #1
 800d54a:	60a2      	str	r2, [r4, #8]
 800d54c:	6123      	str	r3, [r4, #16]
 800d54e:	b002      	add	sp, #8
 800d550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d554:	68a3      	ldr	r3, [r4, #8]
 800d556:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d55a:	701a      	strb	r2, [r3, #0]
 800d55c:	e7bc      	b.n	800d4d8 <ucdr_serialize_uint16_t+0x60>
 800d55e:	4628      	mov	r0, r5
 800d560:	f10d 0506 	add.w	r5, sp, #6
 800d564:	4632      	mov	r2, r6
 800d566:	4629      	mov	r1, r5
 800d568:	f008 fbad 	bl	8015cc6 <memcpy>
 800d56c:	4642      	mov	r2, r8
 800d56e:	19a9      	adds	r1, r5, r6
 800d570:	68a0      	ldr	r0, [r4, #8]
 800d572:	f008 fba8 	bl	8015cc6 <memcpy>
 800d576:	e7af      	b.n	800d4d8 <ucdr_serialize_uint16_t+0x60>

0800d578 <ucdr_serialize_endian_uint16_t>:
 800d578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d57c:	4604      	mov	r4, r0
 800d57e:	b083      	sub	sp, #12
 800d580:	460d      	mov	r5, r1
 800d582:	2102      	movs	r1, #2
 800d584:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d588:	f000 ff02 	bl	800e390 <ucdr_buffer_alignment>
 800d58c:	4601      	mov	r1, r0
 800d58e:	4620      	mov	r0, r4
 800d590:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d594:	f000 ff44 	bl	800e420 <ucdr_advance_buffer>
 800d598:	2102      	movs	r1, #2
 800d59a:	4620      	mov	r0, r4
 800d59c:	f000 fe98 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800d5a0:	bb70      	cbnz	r0, 800d600 <ucdr_serialize_endian_uint16_t+0x88>
 800d5a2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d5a6:	42be      	cmp	r6, r7
 800d5a8:	d925      	bls.n	800d5f6 <ucdr_serialize_endian_uint16_t+0x7e>
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	60a6      	str	r6, [r4, #8]
 800d5b0:	1bf6      	subs	r6, r6, r7
 800d5b2:	4433      	add	r3, r6
 800d5b4:	f1c6 0902 	rsb	r9, r6, #2
 800d5b8:	6123      	str	r3, [r4, #16]
 800d5ba:	4649      	mov	r1, r9
 800d5bc:	f000 fe94 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d039      	beq.n	800d638 <ucdr_serialize_endian_uint16_t+0xc0>
 800d5c4:	2d01      	cmp	r5, #1
 800d5c6:	d04a      	beq.n	800d65e <ucdr_serialize_endian_uint16_t+0xe6>
 800d5c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5cc:	703b      	strb	r3, [r7, #0]
 800d5ce:	2e00      	cmp	r6, #0
 800d5d0:	d040      	beq.n	800d654 <ucdr_serialize_endian_uint16_t+0xdc>
 800d5d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d5d6:	707b      	strb	r3, [r7, #1]
 800d5d8:	6923      	ldr	r3, [r4, #16]
 800d5da:	2102      	movs	r1, #2
 800d5dc:	68a2      	ldr	r2, [r4, #8]
 800d5de:	7da0      	ldrb	r0, [r4, #22]
 800d5e0:	3302      	adds	r3, #2
 800d5e2:	444a      	add	r2, r9
 800d5e4:	7561      	strb	r1, [r4, #21]
 800d5e6:	1b9b      	subs	r3, r3, r6
 800d5e8:	f080 0001 	eor.w	r0, r0, #1
 800d5ec:	60a2      	str	r2, [r4, #8]
 800d5ee:	6123      	str	r3, [r4, #16]
 800d5f0:	b003      	add	sp, #12
 800d5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5f6:	2102      	movs	r1, #2
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 fe75 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d5fe:	b188      	cbz	r0, 800d624 <ucdr_serialize_endian_uint16_t+0xac>
 800d600:	2d01      	cmp	r5, #1
 800d602:	68a3      	ldr	r3, [r4, #8]
 800d604:	d014      	beq.n	800d630 <ucdr_serialize_endian_uint16_t+0xb8>
 800d606:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d60a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d60e:	7019      	strb	r1, [r3, #0]
 800d610:	68a3      	ldr	r3, [r4, #8]
 800d612:	705a      	strb	r2, [r3, #1]
 800d614:	2102      	movs	r1, #2
 800d616:	68a2      	ldr	r2, [r4, #8]
 800d618:	6923      	ldr	r3, [r4, #16]
 800d61a:	440a      	add	r2, r1
 800d61c:	7561      	strb	r1, [r4, #21]
 800d61e:	440b      	add	r3, r1
 800d620:	60a2      	str	r2, [r4, #8]
 800d622:	6123      	str	r3, [r4, #16]
 800d624:	7da0      	ldrb	r0, [r4, #22]
 800d626:	f080 0001 	eor.w	r0, r0, #1
 800d62a:	b003      	add	sp, #12
 800d62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d630:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d634:	801a      	strh	r2, [r3, #0]
 800d636:	e7ed      	b.n	800d614 <ucdr_serialize_endian_uint16_t+0x9c>
 800d638:	68a2      	ldr	r2, [r4, #8]
 800d63a:	6923      	ldr	r3, [r4, #16]
 800d63c:	7da0      	ldrb	r0, [r4, #22]
 800d63e:	1b92      	subs	r2, r2, r6
 800d640:	1b9b      	subs	r3, r3, r6
 800d642:	f884 8015 	strb.w	r8, [r4, #21]
 800d646:	f080 0001 	eor.w	r0, r0, #1
 800d64a:	60a2      	str	r2, [r4, #8]
 800d64c:	6123      	str	r3, [r4, #16]
 800d64e:	b003      	add	sp, #12
 800d650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d654:	68a3      	ldr	r3, [r4, #8]
 800d656:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d65a:	701a      	strb	r2, [r3, #0]
 800d65c:	e7bc      	b.n	800d5d8 <ucdr_serialize_endian_uint16_t+0x60>
 800d65e:	f10d 0506 	add.w	r5, sp, #6
 800d662:	4632      	mov	r2, r6
 800d664:	4638      	mov	r0, r7
 800d666:	4629      	mov	r1, r5
 800d668:	f008 fb2d 	bl	8015cc6 <memcpy>
 800d66c:	464a      	mov	r2, r9
 800d66e:	19a9      	adds	r1, r5, r6
 800d670:	68a0      	ldr	r0, [r4, #8]
 800d672:	f008 fb28 	bl	8015cc6 <memcpy>
 800d676:	e7af      	b.n	800d5d8 <ucdr_serialize_endian_uint16_t+0x60>

0800d678 <ucdr_deserialize_uint16_t>:
 800d678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d67c:	4604      	mov	r4, r0
 800d67e:	460d      	mov	r5, r1
 800d680:	2102      	movs	r1, #2
 800d682:	f000 fe85 	bl	800e390 <ucdr_buffer_alignment>
 800d686:	4601      	mov	r1, r0
 800d688:	4620      	mov	r0, r4
 800d68a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d68e:	f000 fec7 	bl	800e420 <ucdr_advance_buffer>
 800d692:	2102      	movs	r1, #2
 800d694:	4620      	mov	r0, r4
 800d696:	f000 fe1b 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800d69a:	bb60      	cbnz	r0, 800d6f6 <ucdr_deserialize_uint16_t+0x7e>
 800d69c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d6a0:	42be      	cmp	r6, r7
 800d6a2:	d923      	bls.n	800d6ec <ucdr_deserialize_uint16_t+0x74>
 800d6a4:	6923      	ldr	r3, [r4, #16]
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	60a6      	str	r6, [r4, #8]
 800d6aa:	1bf6      	subs	r6, r6, r7
 800d6ac:	4433      	add	r3, r6
 800d6ae:	f1c6 0902 	rsb	r9, r6, #2
 800d6b2:	6123      	str	r3, [r4, #16]
 800d6b4:	4649      	mov	r1, r9
 800d6b6:	f000 fe17 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d034      	beq.n	800d728 <ucdr_deserialize_uint16_t+0xb0>
 800d6be:	7d23      	ldrb	r3, [r4, #20]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d042      	beq.n	800d74a <ucdr_deserialize_uint16_t+0xd2>
 800d6c4:	787b      	ldrb	r3, [r7, #1]
 800d6c6:	702b      	strb	r3, [r5, #0]
 800d6c8:	2e00      	cmp	r6, #0
 800d6ca:	d03a      	beq.n	800d742 <ucdr_deserialize_uint16_t+0xca>
 800d6cc:	783b      	ldrb	r3, [r7, #0]
 800d6ce:	706b      	strb	r3, [r5, #1]
 800d6d0:	6923      	ldr	r3, [r4, #16]
 800d6d2:	2102      	movs	r1, #2
 800d6d4:	68a2      	ldr	r2, [r4, #8]
 800d6d6:	3302      	adds	r3, #2
 800d6d8:	7da0      	ldrb	r0, [r4, #22]
 800d6da:	444a      	add	r2, r9
 800d6dc:	7561      	strb	r1, [r4, #21]
 800d6de:	1b9b      	subs	r3, r3, r6
 800d6e0:	f080 0001 	eor.w	r0, r0, #1
 800d6e4:	60a2      	str	r2, [r4, #8]
 800d6e6:	6123      	str	r3, [r4, #16]
 800d6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ec:	2102      	movs	r1, #2
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 fdfa 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d6f4:	b180      	cbz	r0, 800d718 <ucdr_deserialize_uint16_t+0xa0>
 800d6f6:	7d23      	ldrb	r3, [r4, #20]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	68a3      	ldr	r3, [r4, #8]
 800d6fc:	d011      	beq.n	800d722 <ucdr_deserialize_uint16_t+0xaa>
 800d6fe:	785b      	ldrb	r3, [r3, #1]
 800d700:	702b      	strb	r3, [r5, #0]
 800d702:	68a3      	ldr	r3, [r4, #8]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	706b      	strb	r3, [r5, #1]
 800d708:	2102      	movs	r1, #2
 800d70a:	68a2      	ldr	r2, [r4, #8]
 800d70c:	6923      	ldr	r3, [r4, #16]
 800d70e:	440a      	add	r2, r1
 800d710:	7561      	strb	r1, [r4, #21]
 800d712:	440b      	add	r3, r1
 800d714:	60a2      	str	r2, [r4, #8]
 800d716:	6123      	str	r3, [r4, #16]
 800d718:	7da0      	ldrb	r0, [r4, #22]
 800d71a:	f080 0001 	eor.w	r0, r0, #1
 800d71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	802b      	strh	r3, [r5, #0]
 800d726:	e7ef      	b.n	800d708 <ucdr_deserialize_uint16_t+0x90>
 800d728:	68a2      	ldr	r2, [r4, #8]
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	1b92      	subs	r2, r2, r6
 800d72e:	7da0      	ldrb	r0, [r4, #22]
 800d730:	1b9b      	subs	r3, r3, r6
 800d732:	f884 8015 	strb.w	r8, [r4, #21]
 800d736:	f080 0001 	eor.w	r0, r0, #1
 800d73a:	60a2      	str	r2, [r4, #8]
 800d73c:	6123      	str	r3, [r4, #16]
 800d73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d742:	68a3      	ldr	r3, [r4, #8]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	706b      	strb	r3, [r5, #1]
 800d748:	e7c2      	b.n	800d6d0 <ucdr_deserialize_uint16_t+0x58>
 800d74a:	4639      	mov	r1, r7
 800d74c:	4632      	mov	r2, r6
 800d74e:	4628      	mov	r0, r5
 800d750:	f008 fab9 	bl	8015cc6 <memcpy>
 800d754:	464a      	mov	r2, r9
 800d756:	19a8      	adds	r0, r5, r6
 800d758:	68a1      	ldr	r1, [r4, #8]
 800d75a:	f008 fab4 	bl	8015cc6 <memcpy>
 800d75e:	e7b7      	b.n	800d6d0 <ucdr_deserialize_uint16_t+0x58>

0800d760 <ucdr_deserialize_endian_uint16_t>:
 800d760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d764:	4604      	mov	r4, r0
 800d766:	460e      	mov	r6, r1
 800d768:	2102      	movs	r1, #2
 800d76a:	4615      	mov	r5, r2
 800d76c:	f000 fe10 	bl	800e390 <ucdr_buffer_alignment>
 800d770:	4601      	mov	r1, r0
 800d772:	4620      	mov	r0, r4
 800d774:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d778:	f000 fe52 	bl	800e420 <ucdr_advance_buffer>
 800d77c:	2102      	movs	r1, #2
 800d77e:	4620      	mov	r0, r4
 800d780:	f000 fda6 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800d784:	bb70      	cbnz	r0, 800d7e4 <ucdr_deserialize_endian_uint16_t+0x84>
 800d786:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800d78a:	454f      	cmp	r7, r9
 800d78c:	d925      	bls.n	800d7da <ucdr_deserialize_endian_uint16_t+0x7a>
 800d78e:	6923      	ldr	r3, [r4, #16]
 800d790:	4620      	mov	r0, r4
 800d792:	60a7      	str	r7, [r4, #8]
 800d794:	eba7 0709 	sub.w	r7, r7, r9
 800d798:	443b      	add	r3, r7
 800d79a:	f1c7 0a02 	rsb	sl, r7, #2
 800d79e:	6123      	str	r3, [r4, #16]
 800d7a0:	4651      	mov	r1, sl
 800d7a2:	f000 fda1 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d034      	beq.n	800d814 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d7aa:	2e01      	cmp	r6, #1
 800d7ac:	d043      	beq.n	800d836 <ucdr_deserialize_endian_uint16_t+0xd6>
 800d7ae:	f899 3001 	ldrb.w	r3, [r9, #1]
 800d7b2:	702b      	strb	r3, [r5, #0]
 800d7b4:	2f00      	cmp	r7, #0
 800d7b6:	d03a      	beq.n	800d82e <ucdr_deserialize_endian_uint16_t+0xce>
 800d7b8:	f899 3000 	ldrb.w	r3, [r9]
 800d7bc:	706b      	strb	r3, [r5, #1]
 800d7be:	6923      	ldr	r3, [r4, #16]
 800d7c0:	2102      	movs	r1, #2
 800d7c2:	68a2      	ldr	r2, [r4, #8]
 800d7c4:	3302      	adds	r3, #2
 800d7c6:	7da0      	ldrb	r0, [r4, #22]
 800d7c8:	4452      	add	r2, sl
 800d7ca:	7561      	strb	r1, [r4, #21]
 800d7cc:	1bdb      	subs	r3, r3, r7
 800d7ce:	f080 0001 	eor.w	r0, r0, #1
 800d7d2:	60a2      	str	r2, [r4, #8]
 800d7d4:	6123      	str	r3, [r4, #16]
 800d7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7da:	2102      	movs	r1, #2
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f000 fd83 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d7e2:	b178      	cbz	r0, 800d804 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d7e4:	2e01      	cmp	r6, #1
 800d7e6:	68a3      	ldr	r3, [r4, #8]
 800d7e8:	d011      	beq.n	800d80e <ucdr_deserialize_endian_uint16_t+0xae>
 800d7ea:	785b      	ldrb	r3, [r3, #1]
 800d7ec:	702b      	strb	r3, [r5, #0]
 800d7ee:	68a3      	ldr	r3, [r4, #8]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	706b      	strb	r3, [r5, #1]
 800d7f4:	2102      	movs	r1, #2
 800d7f6:	68a2      	ldr	r2, [r4, #8]
 800d7f8:	6923      	ldr	r3, [r4, #16]
 800d7fa:	440a      	add	r2, r1
 800d7fc:	7561      	strb	r1, [r4, #21]
 800d7fe:	440b      	add	r3, r1
 800d800:	60a2      	str	r2, [r4, #8]
 800d802:	6123      	str	r3, [r4, #16]
 800d804:	7da0      	ldrb	r0, [r4, #22]
 800d806:	f080 0001 	eor.w	r0, r0, #1
 800d80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80e:	881b      	ldrh	r3, [r3, #0]
 800d810:	802b      	strh	r3, [r5, #0]
 800d812:	e7ef      	b.n	800d7f4 <ucdr_deserialize_endian_uint16_t+0x94>
 800d814:	68a2      	ldr	r2, [r4, #8]
 800d816:	6923      	ldr	r3, [r4, #16]
 800d818:	1bd2      	subs	r2, r2, r7
 800d81a:	7da0      	ldrb	r0, [r4, #22]
 800d81c:	1bdb      	subs	r3, r3, r7
 800d81e:	f884 8015 	strb.w	r8, [r4, #21]
 800d822:	f080 0001 	eor.w	r0, r0, #1
 800d826:	60a2      	str	r2, [r4, #8]
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82e:	68a3      	ldr	r3, [r4, #8]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	706b      	strb	r3, [r5, #1]
 800d834:	e7c3      	b.n	800d7be <ucdr_deserialize_endian_uint16_t+0x5e>
 800d836:	4649      	mov	r1, r9
 800d838:	463a      	mov	r2, r7
 800d83a:	4628      	mov	r0, r5
 800d83c:	f008 fa43 	bl	8015cc6 <memcpy>
 800d840:	4652      	mov	r2, sl
 800d842:	19e8      	adds	r0, r5, r7
 800d844:	68a1      	ldr	r1, [r4, #8]
 800d846:	f008 fa3e 	bl	8015cc6 <memcpy>
 800d84a:	e7b8      	b.n	800d7be <ucdr_deserialize_endian_uint16_t+0x5e>

0800d84c <ucdr_serialize_uint32_t>:
 800d84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d850:	b082      	sub	sp, #8
 800d852:	4604      	mov	r4, r0
 800d854:	9101      	str	r1, [sp, #4]
 800d856:	2104      	movs	r1, #4
 800d858:	f000 fd9a 	bl	800e390 <ucdr_buffer_alignment>
 800d85c:	4601      	mov	r1, r0
 800d85e:	4620      	mov	r0, r4
 800d860:	7d67      	ldrb	r7, [r4, #21]
 800d862:	f000 fddd 	bl	800e420 <ucdr_advance_buffer>
 800d866:	2104      	movs	r1, #4
 800d868:	4620      	mov	r0, r4
 800d86a:	f000 fd31 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800d86e:	2800      	cmp	r0, #0
 800d870:	d139      	bne.n	800d8e6 <ucdr_serialize_uint32_t+0x9a>
 800d872:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d876:	42ab      	cmp	r3, r5
 800d878:	d930      	bls.n	800d8dc <ucdr_serialize_uint32_t+0x90>
 800d87a:	1b5e      	subs	r6, r3, r5
 800d87c:	60a3      	str	r3, [r4, #8]
 800d87e:	6923      	ldr	r3, [r4, #16]
 800d880:	4620      	mov	r0, r4
 800d882:	f1c6 0804 	rsb	r8, r6, #4
 800d886:	4433      	add	r3, r6
 800d888:	4641      	mov	r1, r8
 800d88a:	6123      	str	r3, [r4, #16]
 800d88c:	f000 fd2c 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d890:	2800      	cmp	r0, #0
 800d892:	d04c      	beq.n	800d92e <ucdr_serialize_uint32_t+0xe2>
 800d894:	7d23      	ldrb	r3, [r4, #20]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d063      	beq.n	800d962 <ucdr_serialize_uint32_t+0x116>
 800d89a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d89e:	702b      	strb	r3, [r5, #0]
 800d8a0:	2e00      	cmp	r6, #0
 800d8a2:	d051      	beq.n	800d948 <ucdr_serialize_uint32_t+0xfc>
 800d8a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8a8:	2e01      	cmp	r6, #1
 800d8aa:	706b      	strb	r3, [r5, #1]
 800d8ac:	d050      	beq.n	800d950 <ucdr_serialize_uint32_t+0x104>
 800d8ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8b2:	2e02      	cmp	r6, #2
 800d8b4:	70ab      	strb	r3, [r5, #2]
 800d8b6:	d04f      	beq.n	800d958 <ucdr_serialize_uint32_t+0x10c>
 800d8b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8bc:	70eb      	strb	r3, [r5, #3]
 800d8be:	6923      	ldr	r3, [r4, #16]
 800d8c0:	2104      	movs	r1, #4
 800d8c2:	68a2      	ldr	r2, [r4, #8]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	7da0      	ldrb	r0, [r4, #22]
 800d8c8:	4442      	add	r2, r8
 800d8ca:	7561      	strb	r1, [r4, #21]
 800d8cc:	1b9e      	subs	r6, r3, r6
 800d8ce:	f080 0001 	eor.w	r0, r0, #1
 800d8d2:	60a2      	str	r2, [r4, #8]
 800d8d4:	6126      	str	r6, [r4, #16]
 800d8d6:	b002      	add	sp, #8
 800d8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8dc:	2104      	movs	r1, #4
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f000 fd02 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d8e4:	b1d0      	cbz	r0, 800d91c <ucdr_serialize_uint32_t+0xd0>
 800d8e6:	7d23      	ldrb	r3, [r4, #20]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	68a3      	ldr	r3, [r4, #8]
 800d8ec:	d01c      	beq.n	800d928 <ucdr_serialize_uint32_t+0xdc>
 800d8ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d8f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8f6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d8fa:	7018      	strb	r0, [r3, #0]
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	705a      	strb	r2, [r3, #1]
 800d900:	68a3      	ldr	r3, [r4, #8]
 800d902:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d906:	7099      	strb	r1, [r3, #2]
 800d908:	68a3      	ldr	r3, [r4, #8]
 800d90a:	70da      	strb	r2, [r3, #3]
 800d90c:	2104      	movs	r1, #4
 800d90e:	68a2      	ldr	r2, [r4, #8]
 800d910:	6923      	ldr	r3, [r4, #16]
 800d912:	440a      	add	r2, r1
 800d914:	7561      	strb	r1, [r4, #21]
 800d916:	440b      	add	r3, r1
 800d918:	60a2      	str	r2, [r4, #8]
 800d91a:	6123      	str	r3, [r4, #16]
 800d91c:	7da0      	ldrb	r0, [r4, #22]
 800d91e:	f080 0001 	eor.w	r0, r0, #1
 800d922:	b002      	add	sp, #8
 800d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d928:	9a01      	ldr	r2, [sp, #4]
 800d92a:	601a      	str	r2, [r3, #0]
 800d92c:	e7ee      	b.n	800d90c <ucdr_serialize_uint32_t+0xc0>
 800d92e:	68a2      	ldr	r2, [r4, #8]
 800d930:	6923      	ldr	r3, [r4, #16]
 800d932:	7da0      	ldrb	r0, [r4, #22]
 800d934:	1b92      	subs	r2, r2, r6
 800d936:	1b9b      	subs	r3, r3, r6
 800d938:	7567      	strb	r7, [r4, #21]
 800d93a:	f080 0001 	eor.w	r0, r0, #1
 800d93e:	60a2      	str	r2, [r4, #8]
 800d940:	6123      	str	r3, [r4, #16]
 800d942:	b002      	add	sp, #8
 800d944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d948:	68a3      	ldr	r3, [r4, #8]
 800d94a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d94e:	701a      	strb	r2, [r3, #0]
 800d950:	68a3      	ldr	r3, [r4, #8]
 800d952:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d956:	701a      	strb	r2, [r3, #0]
 800d958:	68a3      	ldr	r3, [r4, #8]
 800d95a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d95e:	701a      	strb	r2, [r3, #0]
 800d960:	e7ad      	b.n	800d8be <ucdr_serialize_uint32_t+0x72>
 800d962:	4628      	mov	r0, r5
 800d964:	ad01      	add	r5, sp, #4
 800d966:	4632      	mov	r2, r6
 800d968:	4629      	mov	r1, r5
 800d96a:	f008 f9ac 	bl	8015cc6 <memcpy>
 800d96e:	4642      	mov	r2, r8
 800d970:	19a9      	adds	r1, r5, r6
 800d972:	68a0      	ldr	r0, [r4, #8]
 800d974:	f008 f9a7 	bl	8015cc6 <memcpy>
 800d978:	e7a1      	b.n	800d8be <ucdr_serialize_uint32_t+0x72>
 800d97a:	bf00      	nop

0800d97c <ucdr_serialize_endian_uint32_t>:
 800d97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d980:	4604      	mov	r4, r0
 800d982:	b083      	sub	sp, #12
 800d984:	460d      	mov	r5, r1
 800d986:	2104      	movs	r1, #4
 800d988:	9201      	str	r2, [sp, #4]
 800d98a:	f000 fd01 	bl	800e390 <ucdr_buffer_alignment>
 800d98e:	4601      	mov	r1, r0
 800d990:	4620      	mov	r0, r4
 800d992:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d996:	f000 fd43 	bl	800e420 <ucdr_advance_buffer>
 800d99a:	2104      	movs	r1, #4
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 fc97 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d138      	bne.n	800da18 <ucdr_serialize_endian_uint32_t+0x9c>
 800d9a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d9aa:	42b7      	cmp	r7, r6
 800d9ac:	d92f      	bls.n	800da0e <ucdr_serialize_endian_uint32_t+0x92>
 800d9ae:	6923      	ldr	r3, [r4, #16]
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	60a7      	str	r7, [r4, #8]
 800d9b4:	1bbf      	subs	r7, r7, r6
 800d9b6:	443b      	add	r3, r7
 800d9b8:	f1c7 0904 	rsb	r9, r7, #4
 800d9bc:	6123      	str	r3, [r4, #16]
 800d9be:	4649      	mov	r1, r9
 800d9c0:	f000 fc92 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d04a      	beq.n	800da5e <ucdr_serialize_endian_uint32_t+0xe2>
 800d9c8:	2d01      	cmp	r5, #1
 800d9ca:	d063      	beq.n	800da94 <ucdr_serialize_endian_uint32_t+0x118>
 800d9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9d0:	7033      	strb	r3, [r6, #0]
 800d9d2:	2f00      	cmp	r7, #0
 800d9d4:	d051      	beq.n	800da7a <ucdr_serialize_endian_uint32_t+0xfe>
 800d9d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9da:	2f01      	cmp	r7, #1
 800d9dc:	7073      	strb	r3, [r6, #1]
 800d9de:	d050      	beq.n	800da82 <ucdr_serialize_endian_uint32_t+0x106>
 800d9e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9e4:	2f02      	cmp	r7, #2
 800d9e6:	70b3      	strb	r3, [r6, #2]
 800d9e8:	d04f      	beq.n	800da8a <ucdr_serialize_endian_uint32_t+0x10e>
 800d9ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d9ee:	70f3      	strb	r3, [r6, #3]
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	2104      	movs	r1, #4
 800d9f4:	68a2      	ldr	r2, [r4, #8]
 800d9f6:	7da0      	ldrb	r0, [r4, #22]
 800d9f8:	3304      	adds	r3, #4
 800d9fa:	444a      	add	r2, r9
 800d9fc:	7561      	strb	r1, [r4, #21]
 800d9fe:	1bdb      	subs	r3, r3, r7
 800da00:	f080 0001 	eor.w	r0, r0, #1
 800da04:	60a2      	str	r2, [r4, #8]
 800da06:	6123      	str	r3, [r4, #16]
 800da08:	b003      	add	sp, #12
 800da0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da0e:	2104      	movs	r1, #4
 800da10:	4620      	mov	r0, r4
 800da12:	f000 fc69 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800da16:	b1c8      	cbz	r0, 800da4c <ucdr_serialize_endian_uint32_t+0xd0>
 800da18:	2d01      	cmp	r5, #1
 800da1a:	68a3      	ldr	r3, [r4, #8]
 800da1c:	d01c      	beq.n	800da58 <ucdr_serialize_endian_uint32_t+0xdc>
 800da1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800da22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da26:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800da2a:	7018      	strb	r0, [r3, #0]
 800da2c:	68a3      	ldr	r3, [r4, #8]
 800da2e:	705a      	strb	r2, [r3, #1]
 800da30:	68a3      	ldr	r3, [r4, #8]
 800da32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da36:	7099      	strb	r1, [r3, #2]
 800da38:	68a3      	ldr	r3, [r4, #8]
 800da3a:	70da      	strb	r2, [r3, #3]
 800da3c:	2104      	movs	r1, #4
 800da3e:	68a2      	ldr	r2, [r4, #8]
 800da40:	6923      	ldr	r3, [r4, #16]
 800da42:	440a      	add	r2, r1
 800da44:	7561      	strb	r1, [r4, #21]
 800da46:	440b      	add	r3, r1
 800da48:	60a2      	str	r2, [r4, #8]
 800da4a:	6123      	str	r3, [r4, #16]
 800da4c:	7da0      	ldrb	r0, [r4, #22]
 800da4e:	f080 0001 	eor.w	r0, r0, #1
 800da52:	b003      	add	sp, #12
 800da54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da58:	9a01      	ldr	r2, [sp, #4]
 800da5a:	601a      	str	r2, [r3, #0]
 800da5c:	e7ee      	b.n	800da3c <ucdr_serialize_endian_uint32_t+0xc0>
 800da5e:	68a2      	ldr	r2, [r4, #8]
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	7da0      	ldrb	r0, [r4, #22]
 800da64:	1bd2      	subs	r2, r2, r7
 800da66:	1bdb      	subs	r3, r3, r7
 800da68:	f884 8015 	strb.w	r8, [r4, #21]
 800da6c:	f080 0001 	eor.w	r0, r0, #1
 800da70:	60a2      	str	r2, [r4, #8]
 800da72:	6123      	str	r3, [r4, #16]
 800da74:	b003      	add	sp, #12
 800da76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	68a3      	ldr	r3, [r4, #8]
 800da84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da88:	701a      	strb	r2, [r3, #0]
 800da8a:	68a3      	ldr	r3, [r4, #8]
 800da8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da90:	701a      	strb	r2, [r3, #0]
 800da92:	e7ad      	b.n	800d9f0 <ucdr_serialize_endian_uint32_t+0x74>
 800da94:	ad01      	add	r5, sp, #4
 800da96:	463a      	mov	r2, r7
 800da98:	4630      	mov	r0, r6
 800da9a:	4629      	mov	r1, r5
 800da9c:	f008 f913 	bl	8015cc6 <memcpy>
 800daa0:	464a      	mov	r2, r9
 800daa2:	19e9      	adds	r1, r5, r7
 800daa4:	68a0      	ldr	r0, [r4, #8]
 800daa6:	f008 f90e 	bl	8015cc6 <memcpy>
 800daaa:	e7a1      	b.n	800d9f0 <ucdr_serialize_endian_uint32_t+0x74>

0800daac <ucdr_deserialize_uint32_t>:
 800daac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab0:	4604      	mov	r4, r0
 800dab2:	460d      	mov	r5, r1
 800dab4:	2104      	movs	r1, #4
 800dab6:	f000 fc6b 	bl	800e390 <ucdr_buffer_alignment>
 800daba:	4601      	mov	r1, r0
 800dabc:	4620      	mov	r0, r4
 800dabe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dac2:	f000 fcad 	bl	800e420 <ucdr_advance_buffer>
 800dac6:	2104      	movs	r1, #4
 800dac8:	4620      	mov	r0, r4
 800daca:	f000 fc01 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800dace:	2800      	cmp	r0, #0
 800dad0:	d138      	bne.n	800db44 <ucdr_deserialize_uint32_t+0x98>
 800dad2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dad6:	42b7      	cmp	r7, r6
 800dad8:	d92f      	bls.n	800db3a <ucdr_deserialize_uint32_t+0x8e>
 800dada:	6923      	ldr	r3, [r4, #16]
 800dadc:	4620      	mov	r0, r4
 800dade:	60a7      	str	r7, [r4, #8]
 800dae0:	1bbf      	subs	r7, r7, r6
 800dae2:	443b      	add	r3, r7
 800dae4:	f1c7 0904 	rsb	r9, r7, #4
 800dae8:	6123      	str	r3, [r4, #16]
 800daea:	4649      	mov	r1, r9
 800daec:	f000 fbfc 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d046      	beq.n	800db82 <ucdr_deserialize_uint32_t+0xd6>
 800daf4:	7d23      	ldrb	r3, [r4, #20]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d05c      	beq.n	800dbb4 <ucdr_deserialize_uint32_t+0x108>
 800dafa:	78f3      	ldrb	r3, [r6, #3]
 800dafc:	702b      	strb	r3, [r5, #0]
 800dafe:	2f00      	cmp	r7, #0
 800db00:	d04c      	beq.n	800db9c <ucdr_deserialize_uint32_t+0xf0>
 800db02:	78b3      	ldrb	r3, [r6, #2]
 800db04:	2f01      	cmp	r7, #1
 800db06:	706b      	strb	r3, [r5, #1]
 800db08:	f105 0302 	add.w	r3, r5, #2
 800db0c:	d04a      	beq.n	800dba4 <ucdr_deserialize_uint32_t+0xf8>
 800db0e:	7873      	ldrb	r3, [r6, #1]
 800db10:	2f02      	cmp	r7, #2
 800db12:	70ab      	strb	r3, [r5, #2]
 800db14:	f105 0303 	add.w	r3, r5, #3
 800db18:	d048      	beq.n	800dbac <ucdr_deserialize_uint32_t+0x100>
 800db1a:	7833      	ldrb	r3, [r6, #0]
 800db1c:	70eb      	strb	r3, [r5, #3]
 800db1e:	6923      	ldr	r3, [r4, #16]
 800db20:	2104      	movs	r1, #4
 800db22:	68a2      	ldr	r2, [r4, #8]
 800db24:	3304      	adds	r3, #4
 800db26:	7da0      	ldrb	r0, [r4, #22]
 800db28:	444a      	add	r2, r9
 800db2a:	7561      	strb	r1, [r4, #21]
 800db2c:	1bdb      	subs	r3, r3, r7
 800db2e:	f080 0001 	eor.w	r0, r0, #1
 800db32:	60a2      	str	r2, [r4, #8]
 800db34:	6123      	str	r3, [r4, #16]
 800db36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db3a:	2104      	movs	r1, #4
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 fbd3 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800db42:	b1b0      	cbz	r0, 800db72 <ucdr_deserialize_uint32_t+0xc6>
 800db44:	7d23      	ldrb	r3, [r4, #20]
 800db46:	2b01      	cmp	r3, #1
 800db48:	68a3      	ldr	r3, [r4, #8]
 800db4a:	d017      	beq.n	800db7c <ucdr_deserialize_uint32_t+0xd0>
 800db4c:	78db      	ldrb	r3, [r3, #3]
 800db4e:	702b      	strb	r3, [r5, #0]
 800db50:	68a3      	ldr	r3, [r4, #8]
 800db52:	789b      	ldrb	r3, [r3, #2]
 800db54:	706b      	strb	r3, [r5, #1]
 800db56:	68a3      	ldr	r3, [r4, #8]
 800db58:	785b      	ldrb	r3, [r3, #1]
 800db5a:	70ab      	strb	r3, [r5, #2]
 800db5c:	68a3      	ldr	r3, [r4, #8]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	70eb      	strb	r3, [r5, #3]
 800db62:	2104      	movs	r1, #4
 800db64:	68a2      	ldr	r2, [r4, #8]
 800db66:	6923      	ldr	r3, [r4, #16]
 800db68:	440a      	add	r2, r1
 800db6a:	7561      	strb	r1, [r4, #21]
 800db6c:	440b      	add	r3, r1
 800db6e:	60a2      	str	r2, [r4, #8]
 800db70:	6123      	str	r3, [r4, #16]
 800db72:	7da0      	ldrb	r0, [r4, #22]
 800db74:	f080 0001 	eor.w	r0, r0, #1
 800db78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	602b      	str	r3, [r5, #0]
 800db80:	e7ef      	b.n	800db62 <ucdr_deserialize_uint32_t+0xb6>
 800db82:	68a2      	ldr	r2, [r4, #8]
 800db84:	6923      	ldr	r3, [r4, #16]
 800db86:	1bd2      	subs	r2, r2, r7
 800db88:	7da0      	ldrb	r0, [r4, #22]
 800db8a:	1bdb      	subs	r3, r3, r7
 800db8c:	f884 8015 	strb.w	r8, [r4, #21]
 800db90:	f080 0001 	eor.w	r0, r0, #1
 800db94:	60a2      	str	r2, [r4, #8]
 800db96:	6123      	str	r3, [r4, #16]
 800db98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db9c:	68a3      	ldr	r3, [r4, #8]
 800db9e:	789b      	ldrb	r3, [r3, #2]
 800dba0:	706b      	strb	r3, [r5, #1]
 800dba2:	1cab      	adds	r3, r5, #2
 800dba4:	68a2      	ldr	r2, [r4, #8]
 800dba6:	7852      	ldrb	r2, [r2, #1]
 800dba8:	f803 2b01 	strb.w	r2, [r3], #1
 800dbac:	68a2      	ldr	r2, [r4, #8]
 800dbae:	7812      	ldrb	r2, [r2, #0]
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	e7b4      	b.n	800db1e <ucdr_deserialize_uint32_t+0x72>
 800dbb4:	4631      	mov	r1, r6
 800dbb6:	463a      	mov	r2, r7
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f008 f884 	bl	8015cc6 <memcpy>
 800dbbe:	464a      	mov	r2, r9
 800dbc0:	19e8      	adds	r0, r5, r7
 800dbc2:	68a1      	ldr	r1, [r4, #8]
 800dbc4:	f008 f87f 	bl	8015cc6 <memcpy>
 800dbc8:	e7a9      	b.n	800db1e <ucdr_deserialize_uint32_t+0x72>
 800dbca:	bf00      	nop

0800dbcc <ucdr_deserialize_endian_uint32_t>:
 800dbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	460e      	mov	r6, r1
 800dbd4:	2104      	movs	r1, #4
 800dbd6:	4615      	mov	r5, r2
 800dbd8:	f000 fbda 	bl	800e390 <ucdr_buffer_alignment>
 800dbdc:	4601      	mov	r1, r0
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dbe4:	f000 fc1c 	bl	800e420 <ucdr_advance_buffer>
 800dbe8:	2104      	movs	r1, #4
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 fb70 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d13c      	bne.n	800dc6e <ucdr_deserialize_endian_uint32_t+0xa2>
 800dbf4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800dbf8:	42bb      	cmp	r3, r7
 800dbfa:	d933      	bls.n	800dc64 <ucdr_deserialize_endian_uint32_t+0x98>
 800dbfc:	eba3 0907 	sub.w	r9, r3, r7
 800dc00:	60a3      	str	r3, [r4, #8]
 800dc02:	6923      	ldr	r3, [r4, #16]
 800dc04:	4620      	mov	r0, r4
 800dc06:	f1c9 0a04 	rsb	sl, r9, #4
 800dc0a:	444b      	add	r3, r9
 800dc0c:	4651      	mov	r1, sl
 800dc0e:	6123      	str	r3, [r4, #16]
 800dc10:	f000 fb6a 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	d048      	beq.n	800dcaa <ucdr_deserialize_endian_uint32_t+0xde>
 800dc18:	2e01      	cmp	r6, #1
 800dc1a:	d061      	beq.n	800dce0 <ucdr_deserialize_endian_uint32_t+0x114>
 800dc1c:	78fb      	ldrb	r3, [r7, #3]
 800dc1e:	702b      	strb	r3, [r5, #0]
 800dc20:	f1b9 0f00 	cmp.w	r9, #0
 800dc24:	d050      	beq.n	800dcc8 <ucdr_deserialize_endian_uint32_t+0xfc>
 800dc26:	78bb      	ldrb	r3, [r7, #2]
 800dc28:	f1b9 0f01 	cmp.w	r9, #1
 800dc2c:	706b      	strb	r3, [r5, #1]
 800dc2e:	f105 0302 	add.w	r3, r5, #2
 800dc32:	d04d      	beq.n	800dcd0 <ucdr_deserialize_endian_uint32_t+0x104>
 800dc34:	787b      	ldrb	r3, [r7, #1]
 800dc36:	f1b9 0f02 	cmp.w	r9, #2
 800dc3a:	70ab      	strb	r3, [r5, #2]
 800dc3c:	f105 0303 	add.w	r3, r5, #3
 800dc40:	d04a      	beq.n	800dcd8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800dc42:	783b      	ldrb	r3, [r7, #0]
 800dc44:	70eb      	strb	r3, [r5, #3]
 800dc46:	6923      	ldr	r3, [r4, #16]
 800dc48:	2104      	movs	r1, #4
 800dc4a:	68a2      	ldr	r2, [r4, #8]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	7da0      	ldrb	r0, [r4, #22]
 800dc50:	4452      	add	r2, sl
 800dc52:	7561      	strb	r1, [r4, #21]
 800dc54:	eba3 0309 	sub.w	r3, r3, r9
 800dc58:	f080 0001 	eor.w	r0, r0, #1
 800dc5c:	60a2      	str	r2, [r4, #8]
 800dc5e:	6123      	str	r3, [r4, #16]
 800dc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc64:	2104      	movs	r1, #4
 800dc66:	4620      	mov	r0, r4
 800dc68:	f000 fb3e 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800dc6c:	b1a8      	cbz	r0, 800dc9a <ucdr_deserialize_endian_uint32_t+0xce>
 800dc6e:	2e01      	cmp	r6, #1
 800dc70:	68a3      	ldr	r3, [r4, #8]
 800dc72:	d017      	beq.n	800dca4 <ucdr_deserialize_endian_uint32_t+0xd8>
 800dc74:	78db      	ldrb	r3, [r3, #3]
 800dc76:	702b      	strb	r3, [r5, #0]
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	789b      	ldrb	r3, [r3, #2]
 800dc7c:	706b      	strb	r3, [r5, #1]
 800dc7e:	68a3      	ldr	r3, [r4, #8]
 800dc80:	785b      	ldrb	r3, [r3, #1]
 800dc82:	70ab      	strb	r3, [r5, #2]
 800dc84:	68a3      	ldr	r3, [r4, #8]
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	70eb      	strb	r3, [r5, #3]
 800dc8a:	2104      	movs	r1, #4
 800dc8c:	68a2      	ldr	r2, [r4, #8]
 800dc8e:	6923      	ldr	r3, [r4, #16]
 800dc90:	440a      	add	r2, r1
 800dc92:	7561      	strb	r1, [r4, #21]
 800dc94:	440b      	add	r3, r1
 800dc96:	60a2      	str	r2, [r4, #8]
 800dc98:	6123      	str	r3, [r4, #16]
 800dc9a:	7da0      	ldrb	r0, [r4, #22]
 800dc9c:	f080 0001 	eor.w	r0, r0, #1
 800dca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	602b      	str	r3, [r5, #0]
 800dca8:	e7ef      	b.n	800dc8a <ucdr_deserialize_endian_uint32_t+0xbe>
 800dcaa:	68a2      	ldr	r2, [r4, #8]
 800dcac:	6923      	ldr	r3, [r4, #16]
 800dcae:	eba2 0209 	sub.w	r2, r2, r9
 800dcb2:	7da0      	ldrb	r0, [r4, #22]
 800dcb4:	eba3 0309 	sub.w	r3, r3, r9
 800dcb8:	f884 8015 	strb.w	r8, [r4, #21]
 800dcbc:	f080 0001 	eor.w	r0, r0, #1
 800dcc0:	60a2      	str	r2, [r4, #8]
 800dcc2:	6123      	str	r3, [r4, #16]
 800dcc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcc8:	68a3      	ldr	r3, [r4, #8]
 800dcca:	789b      	ldrb	r3, [r3, #2]
 800dccc:	706b      	strb	r3, [r5, #1]
 800dcce:	1cab      	adds	r3, r5, #2
 800dcd0:	68a2      	ldr	r2, [r4, #8]
 800dcd2:	7852      	ldrb	r2, [r2, #1]
 800dcd4:	f803 2b01 	strb.w	r2, [r3], #1
 800dcd8:	68a2      	ldr	r2, [r4, #8]
 800dcda:	7812      	ldrb	r2, [r2, #0]
 800dcdc:	701a      	strb	r2, [r3, #0]
 800dcde:	e7b2      	b.n	800dc46 <ucdr_deserialize_endian_uint32_t+0x7a>
 800dce0:	4639      	mov	r1, r7
 800dce2:	464a      	mov	r2, r9
 800dce4:	4628      	mov	r0, r5
 800dce6:	f007 ffee 	bl	8015cc6 <memcpy>
 800dcea:	4652      	mov	r2, sl
 800dcec:	eb05 0009 	add.w	r0, r5, r9
 800dcf0:	68a1      	ldr	r1, [r4, #8]
 800dcf2:	f007 ffe8 	bl	8015cc6 <memcpy>
 800dcf6:	e7a6      	b.n	800dc46 <ucdr_deserialize_endian_uint32_t+0x7a>

0800dcf8 <ucdr_serialize_uint64_t>:
 800dcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	b082      	sub	sp, #8
 800dd00:	2108      	movs	r1, #8
 800dd02:	e9cd 2300 	strd	r2, r3, [sp]
 800dd06:	f000 fb43 	bl	800e390 <ucdr_buffer_alignment>
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	7d67      	ldrb	r7, [r4, #21]
 800dd10:	f000 fb86 	bl	800e420 <ucdr_advance_buffer>
 800dd14:	2108      	movs	r1, #8
 800dd16:	4620      	mov	r0, r4
 800dd18:	f000 fada 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d14e      	bne.n	800ddbe <ucdr_serialize_uint64_t+0xc6>
 800dd20:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dd24:	42ab      	cmp	r3, r5
 800dd26:	d945      	bls.n	800ddb4 <ucdr_serialize_uint64_t+0xbc>
 800dd28:	1b5e      	subs	r6, r3, r5
 800dd2a:	60a3      	str	r3, [r4, #8]
 800dd2c:	6923      	ldr	r3, [r4, #16]
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f1c6 0808 	rsb	r8, r6, #8
 800dd34:	4433      	add	r3, r6
 800dd36:	4641      	mov	r1, r8
 800dd38:	6123      	str	r3, [r4, #16]
 800dd3a:	f000 fad5 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d074      	beq.n	800de2c <ucdr_serialize_uint64_t+0x134>
 800dd42:	7d23      	ldrb	r3, [r4, #20]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	f000 809b 	beq.w	800de80 <ucdr_serialize_uint64_t+0x188>
 800dd4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd4e:	702b      	strb	r3, [r5, #0]
 800dd50:	2e00      	cmp	r6, #0
 800dd52:	d078      	beq.n	800de46 <ucdr_serialize_uint64_t+0x14e>
 800dd54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd58:	2e01      	cmp	r6, #1
 800dd5a:	706b      	strb	r3, [r5, #1]
 800dd5c:	d077      	beq.n	800de4e <ucdr_serialize_uint64_t+0x156>
 800dd5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dd62:	2e02      	cmp	r6, #2
 800dd64:	70ab      	strb	r3, [r5, #2]
 800dd66:	d076      	beq.n	800de56 <ucdr_serialize_uint64_t+0x15e>
 800dd68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd6c:	2e03      	cmp	r6, #3
 800dd6e:	70eb      	strb	r3, [r5, #3]
 800dd70:	d075      	beq.n	800de5e <ucdr_serialize_uint64_t+0x166>
 800dd72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dd76:	2e04      	cmp	r6, #4
 800dd78:	712b      	strb	r3, [r5, #4]
 800dd7a:	d074      	beq.n	800de66 <ucdr_serialize_uint64_t+0x16e>
 800dd7c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dd80:	2e05      	cmp	r6, #5
 800dd82:	716b      	strb	r3, [r5, #5]
 800dd84:	d073      	beq.n	800de6e <ucdr_serialize_uint64_t+0x176>
 800dd86:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dd8a:	2e06      	cmp	r6, #6
 800dd8c:	71ab      	strb	r3, [r5, #6]
 800dd8e:	d072      	beq.n	800de76 <ucdr_serialize_uint64_t+0x17e>
 800dd90:	f89d 3000 	ldrb.w	r3, [sp]
 800dd94:	71eb      	strb	r3, [r5, #7]
 800dd96:	6923      	ldr	r3, [r4, #16]
 800dd98:	2108      	movs	r1, #8
 800dd9a:	68a2      	ldr	r2, [r4, #8]
 800dd9c:	3308      	adds	r3, #8
 800dd9e:	7da0      	ldrb	r0, [r4, #22]
 800dda0:	4442      	add	r2, r8
 800dda2:	7561      	strb	r1, [r4, #21]
 800dda4:	1b9e      	subs	r6, r3, r6
 800dda6:	f080 0001 	eor.w	r0, r0, #1
 800ddaa:	60a2      	str	r2, [r4, #8]
 800ddac:	6126      	str	r6, [r4, #16]
 800ddae:	b002      	add	sp, #8
 800ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb4:	2108      	movs	r1, #8
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 fa96 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800ddbc:	b350      	cbz	r0, 800de14 <ucdr_serialize_uint64_t+0x11c>
 800ddbe:	7d23      	ldrb	r3, [r4, #20]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d02d      	beq.n	800de20 <ucdr_serialize_uint64_t+0x128>
 800ddc4:	68a3      	ldr	r3, [r4, #8]
 800ddc6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ddca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddce:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ddd2:	7018      	strb	r0, [r3, #0]
 800ddd4:	68a3      	ldr	r3, [r4, #8]
 800ddd6:	705a      	strb	r2, [r3, #1]
 800ddd8:	68a3      	ldr	r3, [r4, #8]
 800ddda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddde:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800dde2:	7099      	strb	r1, [r3, #2]
 800dde4:	68a3      	ldr	r3, [r4, #8]
 800dde6:	70da      	strb	r2, [r3, #3]
 800dde8:	68a3      	ldr	r3, [r4, #8]
 800ddea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ddee:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800ddf2:	7118      	strb	r0, [r3, #4]
 800ddf4:	68a3      	ldr	r3, [r4, #8]
 800ddf6:	715a      	strb	r2, [r3, #5]
 800ddf8:	68a3      	ldr	r3, [r4, #8]
 800ddfa:	f89d 2000 	ldrb.w	r2, [sp]
 800ddfe:	7199      	strb	r1, [r3, #6]
 800de00:	68a3      	ldr	r3, [r4, #8]
 800de02:	71da      	strb	r2, [r3, #7]
 800de04:	2108      	movs	r1, #8
 800de06:	68a2      	ldr	r2, [r4, #8]
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	440a      	add	r2, r1
 800de0c:	7561      	strb	r1, [r4, #21]
 800de0e:	440b      	add	r3, r1
 800de10:	60a2      	str	r2, [r4, #8]
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	7da0      	ldrb	r0, [r4, #22]
 800de16:	f080 0001 	eor.w	r0, r0, #1
 800de1a:	b002      	add	sp, #8
 800de1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de20:	466b      	mov	r3, sp
 800de22:	68a2      	ldr	r2, [r4, #8]
 800de24:	cb03      	ldmia	r3!, {r0, r1}
 800de26:	6010      	str	r0, [r2, #0]
 800de28:	6051      	str	r1, [r2, #4]
 800de2a:	e7eb      	b.n	800de04 <ucdr_serialize_uint64_t+0x10c>
 800de2c:	68a2      	ldr	r2, [r4, #8]
 800de2e:	6923      	ldr	r3, [r4, #16]
 800de30:	7da0      	ldrb	r0, [r4, #22]
 800de32:	1b92      	subs	r2, r2, r6
 800de34:	1b9b      	subs	r3, r3, r6
 800de36:	7567      	strb	r7, [r4, #21]
 800de38:	f080 0001 	eor.w	r0, r0, #1
 800de3c:	60a2      	str	r2, [r4, #8]
 800de3e:	6123      	str	r3, [r4, #16]
 800de40:	b002      	add	sp, #8
 800de42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de46:	68a3      	ldr	r3, [r4, #8]
 800de48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de4c:	701a      	strb	r2, [r3, #0]
 800de4e:	68a3      	ldr	r3, [r4, #8]
 800de50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800de54:	701a      	strb	r2, [r3, #0]
 800de56:	68a3      	ldr	r3, [r4, #8]
 800de58:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800de5c:	701a      	strb	r2, [r3, #0]
 800de5e:	68a3      	ldr	r3, [r4, #8]
 800de60:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800de64:	701a      	strb	r2, [r3, #0]
 800de66:	68a3      	ldr	r3, [r4, #8]
 800de68:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	68a3      	ldr	r3, [r4, #8]
 800de70:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800de74:	701a      	strb	r2, [r3, #0]
 800de76:	68a3      	ldr	r3, [r4, #8]
 800de78:	f89d 2000 	ldrb.w	r2, [sp]
 800de7c:	701a      	strb	r2, [r3, #0]
 800de7e:	e78a      	b.n	800dd96 <ucdr_serialize_uint64_t+0x9e>
 800de80:	4628      	mov	r0, r5
 800de82:	466d      	mov	r5, sp
 800de84:	4632      	mov	r2, r6
 800de86:	4629      	mov	r1, r5
 800de88:	f007 ff1d 	bl	8015cc6 <memcpy>
 800de8c:	4642      	mov	r2, r8
 800de8e:	19a9      	adds	r1, r5, r6
 800de90:	68a0      	ldr	r0, [r4, #8]
 800de92:	f007 ff18 	bl	8015cc6 <memcpy>
 800de96:	e77e      	b.n	800dd96 <ucdr_serialize_uint64_t+0x9e>

0800de98 <ucdr_serialize_int16_t>:
 800de98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de9c:	460b      	mov	r3, r1
 800de9e:	b082      	sub	sp, #8
 800dea0:	4604      	mov	r4, r0
 800dea2:	2102      	movs	r1, #2
 800dea4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dea8:	f000 fa72 	bl	800e390 <ucdr_buffer_alignment>
 800deac:	4601      	mov	r1, r0
 800deae:	4620      	mov	r0, r4
 800deb0:	7d67      	ldrb	r7, [r4, #21]
 800deb2:	f000 fab5 	bl	800e420 <ucdr_advance_buffer>
 800deb6:	2102      	movs	r1, #2
 800deb8:	4620      	mov	r0, r4
 800deba:	f000 fa09 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800debe:	bb78      	cbnz	r0, 800df20 <ucdr_serialize_int16_t+0x88>
 800dec0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dec4:	42ab      	cmp	r3, r5
 800dec6:	d926      	bls.n	800df16 <ucdr_serialize_int16_t+0x7e>
 800dec8:	1b5e      	subs	r6, r3, r5
 800deca:	60a3      	str	r3, [r4, #8]
 800decc:	6923      	ldr	r3, [r4, #16]
 800dece:	4620      	mov	r0, r4
 800ded0:	f1c6 0802 	rsb	r8, r6, #2
 800ded4:	4433      	add	r3, r6
 800ded6:	4641      	mov	r1, r8
 800ded8:	6123      	str	r3, [r4, #16]
 800deda:	f000 fa05 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d03b      	beq.n	800df5a <ucdr_serialize_int16_t+0xc2>
 800dee2:	7d23      	ldrb	r3, [r4, #20]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d04a      	beq.n	800df7e <ucdr_serialize_int16_t+0xe6>
 800dee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800deec:	702b      	strb	r3, [r5, #0]
 800deee:	2e00      	cmp	r6, #0
 800def0:	d040      	beq.n	800df74 <ucdr_serialize_int16_t+0xdc>
 800def2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800def6:	706b      	strb	r3, [r5, #1]
 800def8:	6923      	ldr	r3, [r4, #16]
 800defa:	2102      	movs	r1, #2
 800defc:	68a2      	ldr	r2, [r4, #8]
 800defe:	3302      	adds	r3, #2
 800df00:	7da0      	ldrb	r0, [r4, #22]
 800df02:	4442      	add	r2, r8
 800df04:	7561      	strb	r1, [r4, #21]
 800df06:	1b9e      	subs	r6, r3, r6
 800df08:	f080 0001 	eor.w	r0, r0, #1
 800df0c:	60a2      	str	r2, [r4, #8]
 800df0e:	6126      	str	r6, [r4, #16]
 800df10:	b002      	add	sp, #8
 800df12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df16:	2102      	movs	r1, #2
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 f9e5 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800df1e:	b190      	cbz	r0, 800df46 <ucdr_serialize_int16_t+0xae>
 800df20:	7d23      	ldrb	r3, [r4, #20]
 800df22:	2b01      	cmp	r3, #1
 800df24:	68a3      	ldr	r3, [r4, #8]
 800df26:	d014      	beq.n	800df52 <ucdr_serialize_int16_t+0xba>
 800df28:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800df2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df30:	7019      	strb	r1, [r3, #0]
 800df32:	68a3      	ldr	r3, [r4, #8]
 800df34:	705a      	strb	r2, [r3, #1]
 800df36:	2102      	movs	r1, #2
 800df38:	68a2      	ldr	r2, [r4, #8]
 800df3a:	6923      	ldr	r3, [r4, #16]
 800df3c:	440a      	add	r2, r1
 800df3e:	7561      	strb	r1, [r4, #21]
 800df40:	440b      	add	r3, r1
 800df42:	60a2      	str	r2, [r4, #8]
 800df44:	6123      	str	r3, [r4, #16]
 800df46:	7da0      	ldrb	r0, [r4, #22]
 800df48:	f080 0001 	eor.w	r0, r0, #1
 800df4c:	b002      	add	sp, #8
 800df4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df52:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800df56:	801a      	strh	r2, [r3, #0]
 800df58:	e7ed      	b.n	800df36 <ucdr_serialize_int16_t+0x9e>
 800df5a:	68a2      	ldr	r2, [r4, #8]
 800df5c:	6923      	ldr	r3, [r4, #16]
 800df5e:	7da0      	ldrb	r0, [r4, #22]
 800df60:	1b92      	subs	r2, r2, r6
 800df62:	1b9b      	subs	r3, r3, r6
 800df64:	7567      	strb	r7, [r4, #21]
 800df66:	f080 0001 	eor.w	r0, r0, #1
 800df6a:	60a2      	str	r2, [r4, #8]
 800df6c:	6123      	str	r3, [r4, #16]
 800df6e:	b002      	add	sp, #8
 800df70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df74:	68a3      	ldr	r3, [r4, #8]
 800df76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df7a:	701a      	strb	r2, [r3, #0]
 800df7c:	e7bc      	b.n	800def8 <ucdr_serialize_int16_t+0x60>
 800df7e:	4628      	mov	r0, r5
 800df80:	f10d 0506 	add.w	r5, sp, #6
 800df84:	4632      	mov	r2, r6
 800df86:	4629      	mov	r1, r5
 800df88:	f007 fe9d 	bl	8015cc6 <memcpy>
 800df8c:	4642      	mov	r2, r8
 800df8e:	19a9      	adds	r1, r5, r6
 800df90:	68a0      	ldr	r0, [r4, #8]
 800df92:	f007 fe98 	bl	8015cc6 <memcpy>
 800df96:	e7af      	b.n	800def8 <ucdr_serialize_int16_t+0x60>

0800df98 <ucdr_deserialize_int16_t>:
 800df98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df9c:	4604      	mov	r4, r0
 800df9e:	460d      	mov	r5, r1
 800dfa0:	2102      	movs	r1, #2
 800dfa2:	f000 f9f5 	bl	800e390 <ucdr_buffer_alignment>
 800dfa6:	4601      	mov	r1, r0
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dfae:	f000 fa37 	bl	800e420 <ucdr_advance_buffer>
 800dfb2:	2102      	movs	r1, #2
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f000 f98b 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800dfba:	bb60      	cbnz	r0, 800e016 <ucdr_deserialize_int16_t+0x7e>
 800dfbc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dfc0:	42be      	cmp	r6, r7
 800dfc2:	d923      	bls.n	800e00c <ucdr_deserialize_int16_t+0x74>
 800dfc4:	6923      	ldr	r3, [r4, #16]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	60a6      	str	r6, [r4, #8]
 800dfca:	1bf6      	subs	r6, r6, r7
 800dfcc:	4433      	add	r3, r6
 800dfce:	f1c6 0902 	rsb	r9, r6, #2
 800dfd2:	6123      	str	r3, [r4, #16]
 800dfd4:	4649      	mov	r1, r9
 800dfd6:	f000 f987 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d034      	beq.n	800e048 <ucdr_deserialize_int16_t+0xb0>
 800dfde:	7d23      	ldrb	r3, [r4, #20]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d042      	beq.n	800e06a <ucdr_deserialize_int16_t+0xd2>
 800dfe4:	787b      	ldrb	r3, [r7, #1]
 800dfe6:	702b      	strb	r3, [r5, #0]
 800dfe8:	2e00      	cmp	r6, #0
 800dfea:	d03a      	beq.n	800e062 <ucdr_deserialize_int16_t+0xca>
 800dfec:	783b      	ldrb	r3, [r7, #0]
 800dfee:	706b      	strb	r3, [r5, #1]
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	2102      	movs	r1, #2
 800dff4:	68a2      	ldr	r2, [r4, #8]
 800dff6:	3302      	adds	r3, #2
 800dff8:	7da0      	ldrb	r0, [r4, #22]
 800dffa:	444a      	add	r2, r9
 800dffc:	7561      	strb	r1, [r4, #21]
 800dffe:	1b9b      	subs	r3, r3, r6
 800e000:	f080 0001 	eor.w	r0, r0, #1
 800e004:	60a2      	str	r2, [r4, #8]
 800e006:	6123      	str	r3, [r4, #16]
 800e008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e00c:	2102      	movs	r1, #2
 800e00e:	4620      	mov	r0, r4
 800e010:	f000 f96a 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800e014:	b180      	cbz	r0, 800e038 <ucdr_deserialize_int16_t+0xa0>
 800e016:	7d23      	ldrb	r3, [r4, #20]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	68a3      	ldr	r3, [r4, #8]
 800e01c:	d011      	beq.n	800e042 <ucdr_deserialize_int16_t+0xaa>
 800e01e:	785b      	ldrb	r3, [r3, #1]
 800e020:	702b      	strb	r3, [r5, #0]
 800e022:	68a3      	ldr	r3, [r4, #8]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	706b      	strb	r3, [r5, #1]
 800e028:	2102      	movs	r1, #2
 800e02a:	68a2      	ldr	r2, [r4, #8]
 800e02c:	6923      	ldr	r3, [r4, #16]
 800e02e:	440a      	add	r2, r1
 800e030:	7561      	strb	r1, [r4, #21]
 800e032:	440b      	add	r3, r1
 800e034:	60a2      	str	r2, [r4, #8]
 800e036:	6123      	str	r3, [r4, #16]
 800e038:	7da0      	ldrb	r0, [r4, #22]
 800e03a:	f080 0001 	eor.w	r0, r0, #1
 800e03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	802b      	strh	r3, [r5, #0]
 800e046:	e7ef      	b.n	800e028 <ucdr_deserialize_int16_t+0x90>
 800e048:	68a2      	ldr	r2, [r4, #8]
 800e04a:	6923      	ldr	r3, [r4, #16]
 800e04c:	1b92      	subs	r2, r2, r6
 800e04e:	7da0      	ldrb	r0, [r4, #22]
 800e050:	1b9b      	subs	r3, r3, r6
 800e052:	f884 8015 	strb.w	r8, [r4, #21]
 800e056:	f080 0001 	eor.w	r0, r0, #1
 800e05a:	60a2      	str	r2, [r4, #8]
 800e05c:	6123      	str	r3, [r4, #16]
 800e05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e062:	68a3      	ldr	r3, [r4, #8]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	706b      	strb	r3, [r5, #1]
 800e068:	e7c2      	b.n	800dff0 <ucdr_deserialize_int16_t+0x58>
 800e06a:	4639      	mov	r1, r7
 800e06c:	4632      	mov	r2, r6
 800e06e:	4628      	mov	r0, r5
 800e070:	f007 fe29 	bl	8015cc6 <memcpy>
 800e074:	464a      	mov	r2, r9
 800e076:	19a8      	adds	r0, r5, r6
 800e078:	68a1      	ldr	r1, [r4, #8]
 800e07a:	f007 fe24 	bl	8015cc6 <memcpy>
 800e07e:	e7b7      	b.n	800dff0 <ucdr_deserialize_int16_t+0x58>

0800e080 <ucdr_serialize_int32_t>:
 800e080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e084:	b082      	sub	sp, #8
 800e086:	4604      	mov	r4, r0
 800e088:	9101      	str	r1, [sp, #4]
 800e08a:	2104      	movs	r1, #4
 800e08c:	f000 f980 	bl	800e390 <ucdr_buffer_alignment>
 800e090:	4601      	mov	r1, r0
 800e092:	4620      	mov	r0, r4
 800e094:	7d67      	ldrb	r7, [r4, #21]
 800e096:	f000 f9c3 	bl	800e420 <ucdr_advance_buffer>
 800e09a:	2104      	movs	r1, #4
 800e09c:	4620      	mov	r0, r4
 800e09e:	f000 f917 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	d139      	bne.n	800e11a <ucdr_serialize_int32_t+0x9a>
 800e0a6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e0aa:	42ab      	cmp	r3, r5
 800e0ac:	d930      	bls.n	800e110 <ucdr_serialize_int32_t+0x90>
 800e0ae:	1b5e      	subs	r6, r3, r5
 800e0b0:	60a3      	str	r3, [r4, #8]
 800e0b2:	6923      	ldr	r3, [r4, #16]
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f1c6 0804 	rsb	r8, r6, #4
 800e0ba:	4433      	add	r3, r6
 800e0bc:	4641      	mov	r1, r8
 800e0be:	6123      	str	r3, [r4, #16]
 800e0c0:	f000 f912 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d04c      	beq.n	800e162 <ucdr_serialize_int32_t+0xe2>
 800e0c8:	7d23      	ldrb	r3, [r4, #20]
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d063      	beq.n	800e196 <ucdr_serialize_int32_t+0x116>
 800e0ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e0d2:	702b      	strb	r3, [r5, #0]
 800e0d4:	2e00      	cmp	r6, #0
 800e0d6:	d051      	beq.n	800e17c <ucdr_serialize_int32_t+0xfc>
 800e0d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e0dc:	2e01      	cmp	r6, #1
 800e0de:	706b      	strb	r3, [r5, #1]
 800e0e0:	d050      	beq.n	800e184 <ucdr_serialize_int32_t+0x104>
 800e0e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e0e6:	2e02      	cmp	r6, #2
 800e0e8:	70ab      	strb	r3, [r5, #2]
 800e0ea:	d04f      	beq.n	800e18c <ucdr_serialize_int32_t+0x10c>
 800e0ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e0f0:	70eb      	strb	r3, [r5, #3]
 800e0f2:	6923      	ldr	r3, [r4, #16]
 800e0f4:	2104      	movs	r1, #4
 800e0f6:	68a2      	ldr	r2, [r4, #8]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	7da0      	ldrb	r0, [r4, #22]
 800e0fc:	4442      	add	r2, r8
 800e0fe:	7561      	strb	r1, [r4, #21]
 800e100:	1b9e      	subs	r6, r3, r6
 800e102:	f080 0001 	eor.w	r0, r0, #1
 800e106:	60a2      	str	r2, [r4, #8]
 800e108:	6126      	str	r6, [r4, #16]
 800e10a:	b002      	add	sp, #8
 800e10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e110:	2104      	movs	r1, #4
 800e112:	4620      	mov	r0, r4
 800e114:	f000 f8e8 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800e118:	b1d0      	cbz	r0, 800e150 <ucdr_serialize_int32_t+0xd0>
 800e11a:	7d23      	ldrb	r3, [r4, #20]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	68a3      	ldr	r3, [r4, #8]
 800e120:	d01c      	beq.n	800e15c <ucdr_serialize_int32_t+0xdc>
 800e122:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e126:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e12a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e12e:	7018      	strb	r0, [r3, #0]
 800e130:	68a3      	ldr	r3, [r4, #8]
 800e132:	705a      	strb	r2, [r3, #1]
 800e134:	68a3      	ldr	r3, [r4, #8]
 800e136:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e13a:	7099      	strb	r1, [r3, #2]
 800e13c:	68a3      	ldr	r3, [r4, #8]
 800e13e:	70da      	strb	r2, [r3, #3]
 800e140:	2104      	movs	r1, #4
 800e142:	68a2      	ldr	r2, [r4, #8]
 800e144:	6923      	ldr	r3, [r4, #16]
 800e146:	440a      	add	r2, r1
 800e148:	7561      	strb	r1, [r4, #21]
 800e14a:	440b      	add	r3, r1
 800e14c:	60a2      	str	r2, [r4, #8]
 800e14e:	6123      	str	r3, [r4, #16]
 800e150:	7da0      	ldrb	r0, [r4, #22]
 800e152:	f080 0001 	eor.w	r0, r0, #1
 800e156:	b002      	add	sp, #8
 800e158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15c:	9a01      	ldr	r2, [sp, #4]
 800e15e:	601a      	str	r2, [r3, #0]
 800e160:	e7ee      	b.n	800e140 <ucdr_serialize_int32_t+0xc0>
 800e162:	68a2      	ldr	r2, [r4, #8]
 800e164:	6923      	ldr	r3, [r4, #16]
 800e166:	7da0      	ldrb	r0, [r4, #22]
 800e168:	1b92      	subs	r2, r2, r6
 800e16a:	1b9b      	subs	r3, r3, r6
 800e16c:	7567      	strb	r7, [r4, #21]
 800e16e:	f080 0001 	eor.w	r0, r0, #1
 800e172:	60a2      	str	r2, [r4, #8]
 800e174:	6123      	str	r3, [r4, #16]
 800e176:	b002      	add	sp, #8
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e17c:	68a3      	ldr	r3, [r4, #8]
 800e17e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e182:	701a      	strb	r2, [r3, #0]
 800e184:	68a3      	ldr	r3, [r4, #8]
 800e186:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e18a:	701a      	strb	r2, [r3, #0]
 800e18c:	68a3      	ldr	r3, [r4, #8]
 800e18e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e192:	701a      	strb	r2, [r3, #0]
 800e194:	e7ad      	b.n	800e0f2 <ucdr_serialize_int32_t+0x72>
 800e196:	4628      	mov	r0, r5
 800e198:	ad01      	add	r5, sp, #4
 800e19a:	4632      	mov	r2, r6
 800e19c:	4629      	mov	r1, r5
 800e19e:	f007 fd92 	bl	8015cc6 <memcpy>
 800e1a2:	4642      	mov	r2, r8
 800e1a4:	19a9      	adds	r1, r5, r6
 800e1a6:	68a0      	ldr	r0, [r4, #8]
 800e1a8:	f007 fd8d 	bl	8015cc6 <memcpy>
 800e1ac:	e7a1      	b.n	800e0f2 <ucdr_serialize_int32_t+0x72>
 800e1ae:	bf00      	nop

0800e1b0 <ucdr_deserialize_int32_t>:
 800e1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	460d      	mov	r5, r1
 800e1b8:	2104      	movs	r1, #4
 800e1ba:	f000 f8e9 	bl	800e390 <ucdr_buffer_alignment>
 800e1be:	4601      	mov	r1, r0
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e1c6:	f000 f92b 	bl	800e420 <ucdr_advance_buffer>
 800e1ca:	2104      	movs	r1, #4
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f000 f87f 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d138      	bne.n	800e248 <ucdr_deserialize_int32_t+0x98>
 800e1d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e1da:	42b7      	cmp	r7, r6
 800e1dc:	d92f      	bls.n	800e23e <ucdr_deserialize_int32_t+0x8e>
 800e1de:	6923      	ldr	r3, [r4, #16]
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	60a7      	str	r7, [r4, #8]
 800e1e4:	1bbf      	subs	r7, r7, r6
 800e1e6:	443b      	add	r3, r7
 800e1e8:	f1c7 0904 	rsb	r9, r7, #4
 800e1ec:	6123      	str	r3, [r4, #16]
 800e1ee:	4649      	mov	r1, r9
 800e1f0:	f000 f87a 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d046      	beq.n	800e286 <ucdr_deserialize_int32_t+0xd6>
 800e1f8:	7d23      	ldrb	r3, [r4, #20]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d05c      	beq.n	800e2b8 <ucdr_deserialize_int32_t+0x108>
 800e1fe:	78f3      	ldrb	r3, [r6, #3]
 800e200:	702b      	strb	r3, [r5, #0]
 800e202:	2f00      	cmp	r7, #0
 800e204:	d04c      	beq.n	800e2a0 <ucdr_deserialize_int32_t+0xf0>
 800e206:	78b3      	ldrb	r3, [r6, #2]
 800e208:	2f01      	cmp	r7, #1
 800e20a:	706b      	strb	r3, [r5, #1]
 800e20c:	f105 0302 	add.w	r3, r5, #2
 800e210:	d04a      	beq.n	800e2a8 <ucdr_deserialize_int32_t+0xf8>
 800e212:	7873      	ldrb	r3, [r6, #1]
 800e214:	2f02      	cmp	r7, #2
 800e216:	70ab      	strb	r3, [r5, #2]
 800e218:	f105 0303 	add.w	r3, r5, #3
 800e21c:	d048      	beq.n	800e2b0 <ucdr_deserialize_int32_t+0x100>
 800e21e:	7833      	ldrb	r3, [r6, #0]
 800e220:	70eb      	strb	r3, [r5, #3]
 800e222:	6923      	ldr	r3, [r4, #16]
 800e224:	2104      	movs	r1, #4
 800e226:	68a2      	ldr	r2, [r4, #8]
 800e228:	3304      	adds	r3, #4
 800e22a:	7da0      	ldrb	r0, [r4, #22]
 800e22c:	444a      	add	r2, r9
 800e22e:	7561      	strb	r1, [r4, #21]
 800e230:	1bdb      	subs	r3, r3, r7
 800e232:	f080 0001 	eor.w	r0, r0, #1
 800e236:	60a2      	str	r2, [r4, #8]
 800e238:	6123      	str	r3, [r4, #16]
 800e23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e23e:	2104      	movs	r1, #4
 800e240:	4620      	mov	r0, r4
 800e242:	f000 f851 	bl	800e2e8 <ucdr_check_final_buffer_behavior>
 800e246:	b1b0      	cbz	r0, 800e276 <ucdr_deserialize_int32_t+0xc6>
 800e248:	7d23      	ldrb	r3, [r4, #20]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	68a3      	ldr	r3, [r4, #8]
 800e24e:	d017      	beq.n	800e280 <ucdr_deserialize_int32_t+0xd0>
 800e250:	78db      	ldrb	r3, [r3, #3]
 800e252:	702b      	strb	r3, [r5, #0]
 800e254:	68a3      	ldr	r3, [r4, #8]
 800e256:	789b      	ldrb	r3, [r3, #2]
 800e258:	706b      	strb	r3, [r5, #1]
 800e25a:	68a3      	ldr	r3, [r4, #8]
 800e25c:	785b      	ldrb	r3, [r3, #1]
 800e25e:	70ab      	strb	r3, [r5, #2]
 800e260:	68a3      	ldr	r3, [r4, #8]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	70eb      	strb	r3, [r5, #3]
 800e266:	2104      	movs	r1, #4
 800e268:	68a2      	ldr	r2, [r4, #8]
 800e26a:	6923      	ldr	r3, [r4, #16]
 800e26c:	440a      	add	r2, r1
 800e26e:	7561      	strb	r1, [r4, #21]
 800e270:	440b      	add	r3, r1
 800e272:	60a2      	str	r2, [r4, #8]
 800e274:	6123      	str	r3, [r4, #16]
 800e276:	7da0      	ldrb	r0, [r4, #22]
 800e278:	f080 0001 	eor.w	r0, r0, #1
 800e27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	602b      	str	r3, [r5, #0]
 800e284:	e7ef      	b.n	800e266 <ucdr_deserialize_int32_t+0xb6>
 800e286:	68a2      	ldr	r2, [r4, #8]
 800e288:	6923      	ldr	r3, [r4, #16]
 800e28a:	1bd2      	subs	r2, r2, r7
 800e28c:	7da0      	ldrb	r0, [r4, #22]
 800e28e:	1bdb      	subs	r3, r3, r7
 800e290:	f884 8015 	strb.w	r8, [r4, #21]
 800e294:	f080 0001 	eor.w	r0, r0, #1
 800e298:	60a2      	str	r2, [r4, #8]
 800e29a:	6123      	str	r3, [r4, #16]
 800e29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2a0:	68a3      	ldr	r3, [r4, #8]
 800e2a2:	789b      	ldrb	r3, [r3, #2]
 800e2a4:	706b      	strb	r3, [r5, #1]
 800e2a6:	1cab      	adds	r3, r5, #2
 800e2a8:	68a2      	ldr	r2, [r4, #8]
 800e2aa:	7852      	ldrb	r2, [r2, #1]
 800e2ac:	f803 2b01 	strb.w	r2, [r3], #1
 800e2b0:	68a2      	ldr	r2, [r4, #8]
 800e2b2:	7812      	ldrb	r2, [r2, #0]
 800e2b4:	701a      	strb	r2, [r3, #0]
 800e2b6:	e7b4      	b.n	800e222 <ucdr_deserialize_int32_t+0x72>
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	463a      	mov	r2, r7
 800e2bc:	4628      	mov	r0, r5
 800e2be:	f007 fd02 	bl	8015cc6 <memcpy>
 800e2c2:	464a      	mov	r2, r9
 800e2c4:	19e8      	adds	r0, r5, r7
 800e2c6:	68a1      	ldr	r1, [r4, #8]
 800e2c8:	f007 fcfd 	bl	8015cc6 <memcpy>
 800e2cc:	e7a9      	b.n	800e222 <ucdr_deserialize_int32_t+0x72>
 800e2ce:	bf00      	nop

0800e2d0 <ucdr_check_buffer_available_for>:
 800e2d0:	7d83      	ldrb	r3, [r0, #22]
 800e2d2:	b93b      	cbnz	r3, 800e2e4 <ucdr_check_buffer_available_for+0x14>
 800e2d4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e2d8:	4419      	add	r1, r3
 800e2da:	4288      	cmp	r0, r1
 800e2dc:	bf34      	ite	cc
 800e2de:	2000      	movcc	r0, #0
 800e2e0:	2001      	movcs	r0, #1
 800e2e2:	4770      	bx	lr
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	4770      	bx	lr

0800e2e8 <ucdr_check_final_buffer_behavior>:
 800e2e8:	7d83      	ldrb	r3, [r0, #22]
 800e2ea:	b943      	cbnz	r3, 800e2fe <ucdr_check_final_buffer_behavior+0x16>
 800e2ec:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	4291      	cmp	r1, r2
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	d205      	bcs.n	800e304 <ucdr_check_final_buffer_behavior+0x1c>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	2300      	movs	r3, #0
 800e300:	4618      	mov	r0, r3
 800e302:	4770      	bx	lr
 800e304:	6982      	ldr	r2, [r0, #24]
 800e306:	b13a      	cbz	r2, 800e318 <ucdr_check_final_buffer_behavior+0x30>
 800e308:	69c1      	ldr	r1, [r0, #28]
 800e30a:	4790      	blx	r2
 800e30c:	f080 0301 	eor.w	r3, r0, #1
 800e310:	75a0      	strb	r0, [r4, #22]
 800e312:	b2db      	uxtb	r3, r3
 800e314:	4618      	mov	r0, r3
 800e316:	bd10      	pop	{r4, pc}
 800e318:	2001      	movs	r0, #1
 800e31a:	75a0      	strb	r0, [r4, #22]
 800e31c:	e7fa      	b.n	800e314 <ucdr_check_final_buffer_behavior+0x2c>
 800e31e:	bf00      	nop

0800e320 <ucdr_set_on_full_buffer_callback>:
 800e320:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop

0800e328 <ucdr_init_buffer_origin_offset_endian>:
 800e328:	b410      	push	{r4}
 800e32a:	9c01      	ldr	r4, [sp, #4]
 800e32c:	440a      	add	r2, r1
 800e32e:	6001      	str	r1, [r0, #0]
 800e330:	6042      	str	r2, [r0, #4]
 800e332:	190a      	adds	r2, r1, r4
 800e334:	441c      	add	r4, r3
 800e336:	6082      	str	r2, [r0, #8]
 800e338:	2200      	movs	r2, #0
 800e33a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e33e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e342:	7542      	strb	r2, [r0, #21]
 800e344:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e348:	7582      	strb	r2, [r0, #22]
 800e34a:	7503      	strb	r3, [r0, #20]
 800e34c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop

0800e354 <ucdr_init_buffer_origin_offset>:
 800e354:	b510      	push	{r4, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	9c04      	ldr	r4, [sp, #16]
 800e35a:	9400      	str	r4, [sp, #0]
 800e35c:	2401      	movs	r4, #1
 800e35e:	9401      	str	r4, [sp, #4]
 800e360:	f7ff ffe2 	bl	800e328 <ucdr_init_buffer_origin_offset_endian>
 800e364:	b002      	add	sp, #8
 800e366:	bd10      	pop	{r4, pc}

0800e368 <ucdr_init_buffer_origin>:
 800e368:	b510      	push	{r4, lr}
 800e36a:	2400      	movs	r4, #0
 800e36c:	b082      	sub	sp, #8
 800e36e:	9400      	str	r4, [sp, #0]
 800e370:	f7ff fff0 	bl	800e354 <ucdr_init_buffer_origin_offset>
 800e374:	b002      	add	sp, #8
 800e376:	bd10      	pop	{r4, pc}

0800e378 <ucdr_init_buffer>:
 800e378:	2300      	movs	r3, #0
 800e37a:	f7ff bff5 	b.w	800e368 <ucdr_init_buffer_origin>
 800e37e:	bf00      	nop

0800e380 <ucdr_alignment>:
 800e380:	fbb0 f2f1 	udiv	r2, r0, r1
 800e384:	fb02 0011 	mls	r0, r2, r1, r0
 800e388:	1e4b      	subs	r3, r1, #1
 800e38a:	1a08      	subs	r0, r1, r0
 800e38c:	4018      	ands	r0, r3
 800e38e:	4770      	bx	lr

0800e390 <ucdr_buffer_alignment>:
 800e390:	7d43      	ldrb	r3, [r0, #21]
 800e392:	428b      	cmp	r3, r1
 800e394:	d209      	bcs.n	800e3aa <ucdr_buffer_alignment+0x1a>
 800e396:	6903      	ldr	r3, [r0, #16]
 800e398:	1e4a      	subs	r2, r1, #1
 800e39a:	fbb3 f0f1 	udiv	r0, r3, r1
 800e39e:	fb01 3010 	mls	r0, r1, r0, r3
 800e3a2:	1a09      	subs	r1, r1, r0
 800e3a4:	ea01 0002 	and.w	r0, r1, r2
 800e3a8:	4770      	bx	lr
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop

0800e3b0 <ucdr_align_to>:
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	f7ff ffeb 	bl	800e390 <ucdr_buffer_alignment>
 800e3ba:	68a3      	ldr	r3, [r4, #8]
 800e3bc:	7565      	strb	r5, [r4, #21]
 800e3be:	181a      	adds	r2, r3, r0
 800e3c0:	6923      	ldr	r3, [r4, #16]
 800e3c2:	4418      	add	r0, r3
 800e3c4:	6863      	ldr	r3, [r4, #4]
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	6120      	str	r0, [r4, #16]
 800e3ca:	bf28      	it	cs
 800e3cc:	4613      	movcs	r3, r2
 800e3ce:	60a3      	str	r3, [r4, #8]
 800e3d0:	bd38      	pop	{r3, r4, r5, pc}
 800e3d2:	bf00      	nop

0800e3d4 <ucdr_buffer_length>:
 800e3d4:	6882      	ldr	r2, [r0, #8]
 800e3d6:	6800      	ldr	r0, [r0, #0]
 800e3d8:	1a10      	subs	r0, r2, r0
 800e3da:	4770      	bx	lr

0800e3dc <ucdr_buffer_remaining>:
 800e3dc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e3e0:	1a10      	subs	r0, r2, r0
 800e3e2:	4770      	bx	lr

0800e3e4 <ucdr_check_final_buffer_behavior_array>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	7d83      	ldrb	r3, [r0, #22]
 800e3e8:	b9a3      	cbnz	r3, 800e414 <ucdr_check_final_buffer_behavior_array+0x30>
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	460d      	mov	r5, r1
 800e3ee:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d300      	bcc.n	800e3f8 <ucdr_check_final_buffer_behavior_array+0x14>
 800e3f6:	b931      	cbnz	r1, 800e406 <ucdr_check_final_buffer_behavior_array+0x22>
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f7ff ffef 	bl	800e3dc <ucdr_buffer_remaining>
 800e3fe:	42a8      	cmp	r0, r5
 800e400:	bf28      	it	cs
 800e402:	4628      	movcs	r0, r5
 800e404:	bd38      	pop	{r3, r4, r5, pc}
 800e406:	6983      	ldr	r3, [r0, #24]
 800e408:	b133      	cbz	r3, 800e418 <ucdr_check_final_buffer_behavior_array+0x34>
 800e40a:	69c1      	ldr	r1, [r0, #28]
 800e40c:	4798      	blx	r3
 800e40e:	75a0      	strb	r0, [r4, #22]
 800e410:	2800      	cmp	r0, #0
 800e412:	d0f1      	beq.n	800e3f8 <ucdr_check_final_buffer_behavior_array+0x14>
 800e414:	2000      	movs	r0, #0
 800e416:	bd38      	pop	{r3, r4, r5, pc}
 800e418:	2301      	movs	r3, #1
 800e41a:	7583      	strb	r3, [r0, #22]
 800e41c:	e7fa      	b.n	800e414 <ucdr_check_final_buffer_behavior_array+0x30>
 800e41e:	bf00      	nop

0800e420 <ucdr_advance_buffer>:
 800e420:	b538      	push	{r3, r4, r5, lr}
 800e422:	4604      	mov	r4, r0
 800e424:	460d      	mov	r5, r1
 800e426:	f7ff ff53 	bl	800e2d0 <ucdr_check_buffer_available_for>
 800e42a:	b178      	cbz	r0, 800e44c <ucdr_advance_buffer+0x2c>
 800e42c:	6923      	ldr	r3, [r4, #16]
 800e42e:	68a2      	ldr	r2, [r4, #8]
 800e430:	442b      	add	r3, r5
 800e432:	442a      	add	r2, r5
 800e434:	6123      	str	r3, [r4, #16]
 800e436:	2301      	movs	r3, #1
 800e438:	60a2      	str	r2, [r4, #8]
 800e43a:	7563      	strb	r3, [r4, #21]
 800e43c:	bd38      	pop	{r3, r4, r5, pc}
 800e43e:	68a2      	ldr	r2, [r4, #8]
 800e440:	1a2d      	subs	r5, r5, r0
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	4402      	add	r2, r0
 800e446:	4418      	add	r0, r3
 800e448:	60a2      	str	r2, [r4, #8]
 800e44a:	6120      	str	r0, [r4, #16]
 800e44c:	4629      	mov	r1, r5
 800e44e:	2201      	movs	r2, #1
 800e450:	4620      	mov	r0, r4
 800e452:	f7ff ffc7 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 800e456:	2800      	cmp	r0, #0
 800e458:	d1f1      	bne.n	800e43e <ucdr_advance_buffer+0x1e>
 800e45a:	2301      	movs	r3, #1
 800e45c:	7563      	strb	r3, [r4, #21]
 800e45e:	bd38      	pop	{r3, r4, r5, pc}

0800e460 <uxr_buffer_delete_entity>:
 800e460:	b510      	push	{r4, lr}
 800e462:	2300      	movs	r3, #0
 800e464:	b08e      	sub	sp, #56	; 0x38
 800e466:	4604      	mov	r4, r0
 800e468:	9103      	str	r1, [sp, #12]
 800e46a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e46e:	2303      	movs	r3, #3
 800e470:	2204      	movs	r2, #4
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	ab06      	add	r3, sp, #24
 800e476:	f001 f86d 	bl	800f554 <uxr_prepare_stream_to_write_submessage>
 800e47a:	b918      	cbnz	r0, 800e484 <uxr_buffer_delete_entity+0x24>
 800e47c:	4604      	mov	r4, r0
 800e47e:	4620      	mov	r0, r4
 800e480:	b00e      	add	sp, #56	; 0x38
 800e482:	bd10      	pop	{r4, pc}
 800e484:	9902      	ldr	r1, [sp, #8]
 800e486:	aa05      	add	r2, sp, #20
 800e488:	4620      	mov	r0, r4
 800e48a:	f001 f99f 	bl	800f7cc <uxr_init_base_object_request>
 800e48e:	4604      	mov	r4, r0
 800e490:	a905      	add	r1, sp, #20
 800e492:	a806      	add	r0, sp, #24
 800e494:	f002 fb08 	bl	8010aa8 <uxr_serialize_DELETE_Payload>
 800e498:	4620      	mov	r0, r4
 800e49a:	b00e      	add	sp, #56	; 0x38
 800e49c:	bd10      	pop	{r4, pc}
 800e49e:	bf00      	nop

0800e4a0 <uxr_common_create_entity>:
 800e4a0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e4a4:	b510      	push	{r4, lr}
 800e4a6:	f1bc 0f01 	cmp.w	ip, #1
 800e4aa:	b08c      	sub	sp, #48	; 0x30
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	9202      	str	r2, [sp, #8]
 800e4b0:	bf0c      	ite	eq
 800e4b2:	f003 0201 	andeq.w	r2, r3, #1
 800e4b6:	2200      	movne	r2, #0
 800e4b8:	330e      	adds	r3, #14
 800e4ba:	9103      	str	r1, [sp, #12]
 800e4bc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800e4c0:	441a      	add	r2, r3
 800e4c2:	ab04      	add	r3, sp, #16
 800e4c4:	9101      	str	r1, [sp, #4]
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	b292      	uxth	r2, r2
 800e4ca:	9100      	str	r1, [sp, #0]
 800e4cc:	9903      	ldr	r1, [sp, #12]
 800e4ce:	f001 f841 	bl	800f554 <uxr_prepare_stream_to_write_submessage>
 800e4d2:	b918      	cbnz	r0, 800e4dc <uxr_common_create_entity+0x3c>
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	b00c      	add	sp, #48	; 0x30
 800e4da:	bd10      	pop	{r4, pc}
 800e4dc:	9902      	ldr	r1, [sp, #8]
 800e4de:	4620      	mov	r0, r4
 800e4e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4e2:	f001 f973 	bl	800f7cc <uxr_init_base_object_request>
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e4ea:	a804      	add	r0, sp, #16
 800e4ec:	f002 fa36 	bl	801095c <uxr_serialize_CREATE_Payload>
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	b00c      	add	sp, #48	; 0x30
 800e4f4:	bd10      	pop	{r4, pc}
 800e4f6:	bf00      	nop

0800e4f8 <uxr_buffer_create_participant_bin>:
 800e4f8:	b570      	push	{r4, r5, r6, lr}
 800e4fa:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800e4fe:	4605      	mov	r5, r0
 800e500:	ac11      	add	r4, sp, #68	; 0x44
 800e502:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800e506:	2303      	movs	r3, #3
 800e508:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800e50c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e510:	7223      	strb	r3, [r4, #8]
 800e512:	2300      	movs	r3, #0
 800e514:	2201      	movs	r2, #1
 800e516:	f88d 3014 	strb.w	r3, [sp, #20]
 800e51a:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800e51c:	7122      	strb	r2, [r4, #4]
 800e51e:	b1cb      	cbz	r3, 800e554 <uxr_buffer_create_participant_bin+0x5c>
 800e520:	f88d 201c 	strb.w	r2, [sp, #28]
 800e524:	9308      	str	r3, [sp, #32]
 800e526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e52a:	a915      	add	r1, sp, #84	; 0x54
 800e52c:	a809      	add	r0, sp, #36	; 0x24
 800e52e:	f7ff ff23 	bl	800e378 <ucdr_init_buffer>
 800e532:	a905      	add	r1, sp, #20
 800e534:	a809      	add	r0, sp, #36	; 0x24
 800e536:	f001 fee7 	bl	8010308 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e53c:	9600      	str	r6, [sp, #0]
 800e53e:	4628      	mov	r0, r5
 800e540:	9401      	str	r4, [sp, #4]
 800e542:	60e3      	str	r3, [r4, #12]
 800e544:	b29b      	uxth	r3, r3
 800e546:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e54a:	f7ff ffa9 	bl	800e4a0 <uxr_common_create_entity>
 800e54e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	f88d 301c 	strb.w	r3, [sp, #28]
 800e558:	e7e5      	b.n	800e526 <uxr_buffer_create_participant_bin+0x2e>
 800e55a:	bf00      	nop

0800e55c <uxr_buffer_create_topic_bin>:
 800e55c:	b570      	push	{r4, r5, r6, lr}
 800e55e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800e562:	4605      	mov	r5, r0
 800e564:	4618      	mov	r0, r3
 800e566:	9105      	str	r1, [sp, #20]
 800e568:	a997      	add	r1, sp, #604	; 0x25c
 800e56a:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800e56e:	ac13      	add	r4, sp, #76	; 0x4c
 800e570:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e574:	2302      	movs	r3, #2
 800e576:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800e57a:	f000 f8ed 	bl	800e758 <uxr_object_id_to_raw>
 800e57e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800e580:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e584:	a917      	add	r1, sp, #92	; 0x5c
 800e586:	a80b      	add	r0, sp, #44	; 0x2c
 800e588:	9306      	str	r3, [sp, #24]
 800e58a:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800e58c:	930a      	str	r3, [sp, #40]	; 0x28
 800e58e:	2303      	movs	r3, #3
 800e590:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800e594:	2301      	movs	r3, #1
 800e596:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e59a:	2300      	movs	r3, #0
 800e59c:	f88d 301c 	strb.w	r3, [sp, #28]
 800e5a0:	f7ff feea 	bl	800e378 <ucdr_init_buffer>
 800e5a4:	a906      	add	r1, sp, #24
 800e5a6:	a80b      	add	r0, sp, #44	; 0x2c
 800e5a8:	f001 fed0 	bl	801034c <uxr_serialize_OBJK_Topic_Binary>
 800e5ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	9600      	str	r6, [sp, #0]
 800e5b2:	9316      	str	r3, [sp, #88]	; 0x58
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	9401      	str	r4, [sp, #4]
 800e5b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e5bc:	f7ff ff70 	bl	800e4a0 <uxr_common_create_entity>
 800e5c0:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800e5c4:	bd70      	pop	{r4, r5, r6, pc}
 800e5c6:	bf00      	nop

0800e5c8 <uxr_buffer_create_publisher_bin>:
 800e5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ca:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800e5ce:	2603      	movs	r6, #3
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	9105      	str	r1, [sp, #20]
 800e5d6:	a992      	add	r1, sp, #584	; 0x248
 800e5d8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800e5dc:	ac0e      	add	r4, sp, #56	; 0x38
 800e5de:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800e5e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e5e6:	f000 f8b7 	bl	800e758 <uxr_object_id_to_raw>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5f0:	a912      	add	r1, sp, #72	; 0x48
 800e5f2:	a806      	add	r0, sp, #24
 800e5f4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800e5f8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800e5fc:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800e600:	f7ff feba 	bl	800e378 <ucdr_init_buffer>
 800e604:	a993      	add	r1, sp, #588	; 0x24c
 800e606:	a806      	add	r0, sp, #24
 800e608:	f001 ff54 	bl	80104b4 <uxr_serialize_OBJK_Publisher_Binary>
 800e60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e60e:	4628      	mov	r0, r5
 800e610:	9700      	str	r7, [sp, #0]
 800e612:	9311      	str	r3, [sp, #68]	; 0x44
 800e614:	b29b      	uxth	r3, r3
 800e616:	9401      	str	r4, [sp, #4]
 800e618:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e61c:	f7ff ff40 	bl	800e4a0 <uxr_common_create_entity>
 800e620:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800e624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e626:	bf00      	nop

0800e628 <uxr_buffer_create_datawriter_bin>:
 800e628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e62c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e630:	4606      	mov	r6, r0
 800e632:	4618      	mov	r0, r3
 800e634:	2703      	movs	r7, #3
 800e636:	ac1d      	add	r4, sp, #116	; 0x74
 800e638:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800e63c:	9105      	str	r1, [sp, #20]
 800e63e:	a9a1      	add	r1, sp, #644	; 0x284
 800e640:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800e644:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e648:	2305      	movs	r3, #5
 800e64a:	7123      	strb	r3, [r4, #4]
 800e64c:	f000 f884 	bl	800e758 <uxr_object_id_to_raw>
 800e650:	a90e      	add	r1, sp, #56	; 0x38
 800e652:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800e654:	7227      	strb	r7, [r4, #8]
 800e656:	f000 f87f 	bl	800e758 <uxr_object_id_to_raw>
 800e65a:	2300      	movs	r3, #0
 800e65c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800e660:	3d00      	subs	r5, #0
 800e662:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800e666:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800e66a:	bf18      	it	ne
 800e66c:	2501      	movne	r5, #1
 800e66e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800e672:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800e676:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800e67a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e67e:	2301      	movs	r3, #1
 800e680:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800e684:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800e688:	bb8a      	cbnz	r2, 800e6ee <uxr_buffer_create_datawriter_bin+0xc6>
 800e68a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800e68e:	f04f 0c13 	mov.w	ip, #19
 800e692:	250b      	movs	r5, #11
 800e694:	2221      	movs	r2, #33	; 0x21
 800e696:	2111      	movs	r1, #17
 800e698:	2009      	movs	r0, #9
 800e69a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e69e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800e6a2:	b923      	cbnz	r3, 800e6ae <uxr_buffer_create_datawriter_bin+0x86>
 800e6a4:	4672      	mov	r2, lr
 800e6a6:	4661      	mov	r1, ip
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800e6ae:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d025      	beq.n	800e702 <uxr_buffer_create_datawriter_bin+0xda>
 800e6b6:	2b03      	cmp	r3, #3
 800e6b8:	d029      	beq.n	800e70e <uxr_buffer_create_datawriter_bin+0xe6>
 800e6ba:	b32b      	cbz	r3, 800e708 <uxr_buffer_create_datawriter_bin+0xe0>
 800e6bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6c0:	a921      	add	r1, sp, #132	; 0x84
 800e6c2:	a806      	add	r0, sp, #24
 800e6c4:	f7ff fe58 	bl	800e378 <ucdr_init_buffer>
 800e6c8:	a90e      	add	r1, sp, #56	; 0x38
 800e6ca:	a806      	add	r0, sp, #24
 800e6cc:	f001 ff68 	bl	80105a0 <uxr_serialize_OBJK_DataWriter_Binary>
 800e6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6d2:	f8cd 8000 	str.w	r8, [sp]
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	9401      	str	r4, [sp, #4]
 800e6da:	60e3      	str	r3, [r4, #12]
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e6e2:	f7ff fedd 	bl	800e4a0 <uxr_common_create_entity>
 800e6e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ee:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800e6f2:	f04f 0c12 	mov.w	ip, #18
 800e6f6:	250a      	movs	r5, #10
 800e6f8:	2220      	movs	r2, #32
 800e6fa:	2110      	movs	r1, #16
 800e6fc:	2008      	movs	r0, #8
 800e6fe:	2702      	movs	r7, #2
 800e700:	e7cd      	b.n	800e69e <uxr_buffer_create_datawriter_bin+0x76>
 800e702:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800e706:	e7d9      	b.n	800e6bc <uxr_buffer_create_datawriter_bin+0x94>
 800e708:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800e70c:	e7d6      	b.n	800e6bc <uxr_buffer_create_datawriter_bin+0x94>
 800e70e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800e712:	e7d3      	b.n	800e6bc <uxr_buffer_create_datawriter_bin+0x94>

0800e714 <uxr_object_id>:
 800e714:	b082      	sub	sp, #8
 800e716:	2300      	movs	r3, #0
 800e718:	f88d 1006 	strb.w	r1, [sp, #6]
 800e71c:	f360 030f 	bfi	r3, r0, #0, #16
 800e720:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e724:	f362 431f 	bfi	r3, r2, #16, #16
 800e728:	4618      	mov	r0, r3
 800e72a:	b002      	add	sp, #8
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop

0800e730 <uxr_object_id_from_raw>:
 800e730:	7843      	ldrb	r3, [r0, #1]
 800e732:	b082      	sub	sp, #8
 800e734:	7801      	ldrb	r1, [r0, #0]
 800e736:	2000      	movs	r0, #0
 800e738:	091a      	lsrs	r2, r3, #4
 800e73a:	f003 030f 	and.w	r3, r3, #15
 800e73e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800e742:	f88d 3006 	strb.w	r3, [sp, #6]
 800e746:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e74a:	f362 000f 	bfi	r0, r2, #0, #16
 800e74e:	f363 401f 	bfi	r0, r3, #16, #16
 800e752:	b002      	add	sp, #8
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop

0800e758 <uxr_object_id_to_raw>:
 800e758:	4602      	mov	r2, r0
 800e75a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e75e:	b082      	sub	sp, #8
 800e760:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e764:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e768:	f881 c000 	strb.w	ip, [r1]
 800e76c:	7048      	strb	r0, [r1, #1]
 800e76e:	b002      	add	sp, #8
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop

0800e774 <on_get_fragmentation_info>:
 800e774:	b500      	push	{lr}
 800e776:	b08b      	sub	sp, #44	; 0x2c
 800e778:	4601      	mov	r1, r0
 800e77a:	2204      	movs	r2, #4
 800e77c:	a802      	add	r0, sp, #8
 800e77e:	f7ff fdfb 	bl	800e378 <ucdr_init_buffer>
 800e782:	f10d 0305 	add.w	r3, sp, #5
 800e786:	f10d 0206 	add.w	r2, sp, #6
 800e78a:	a901      	add	r1, sp, #4
 800e78c:	a802      	add	r0, sp, #8
 800e78e:	f001 f9a7 	bl	800fae0 <uxr_read_submessage_header>
 800e792:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e796:	2b0d      	cmp	r3, #13
 800e798:	d003      	beq.n	800e7a2 <on_get_fragmentation_info+0x2e>
 800e79a:	2000      	movs	r0, #0
 800e79c:	b00b      	add	sp, #44	; 0x2c
 800e79e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e7a6:	f013 0f02 	tst.w	r3, #2
 800e7aa:	bf14      	ite	ne
 800e7ac:	2002      	movne	r0, #2
 800e7ae:	2001      	moveq	r0, #1
 800e7b0:	b00b      	add	sp, #44	; 0x2c
 800e7b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7b6:	bf00      	nop

0800e7b8 <read_submessage_get_info>:
 800e7b8:	b570      	push	{r4, r5, r6, lr}
 800e7ba:	2500      	movs	r5, #0
 800e7bc:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800e7c0:	460e      	mov	r6, r1
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	f44f 7224 	mov.w	r2, #656	; 0x290
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	a810      	add	r0, sp, #64	; 0x40
 800e7cc:	9503      	str	r5, [sp, #12]
 800e7ce:	9504      	str	r5, [sp, #16]
 800e7d0:	f007 f95a 	bl	8015a88 <memset>
 800e7d4:	a903      	add	r1, sp, #12
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f002 f950 	bl	8010a7c <uxr_deserialize_GET_INFO_Payload>
 800e7dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e7e6:	f000 ffe9 	bl	800f7bc <uxr_session_header_offset>
 800e7ea:	462b      	mov	r3, r5
 800e7ec:	220c      	movs	r2, #12
 800e7ee:	a905      	add	r1, sp, #20
 800e7f0:	9000      	str	r0, [sp, #0]
 800e7f2:	a808      	add	r0, sp, #32
 800e7f4:	f7ff fdae 	bl	800e354 <ucdr_init_buffer_origin_offset>
 800e7f8:	a910      	add	r1, sp, #64	; 0x40
 800e7fa:	a808      	add	r0, sp, #32
 800e7fc:	f002 f9b2 	bl	8010b64 <uxr_serialize_INFO_Payload>
 800e800:	9b08      	ldr	r3, [sp, #32]
 800e802:	462a      	mov	r2, r5
 800e804:	4629      	mov	r1, r5
 800e806:	4620      	mov	r0, r4
 800e808:	f000 ff84 	bl	800f714 <uxr_stamp_session_header>
 800e80c:	a808      	add	r0, sp, #32
 800e80e:	f7ff fde1 	bl	800e3d4 <ucdr_buffer_length>
 800e812:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e814:	4602      	mov	r2, r0
 800e816:	a905      	add	r1, sp, #20
 800e818:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e81c:	47a0      	blx	r4
 800e81e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800e822:	bd70      	pop	{r4, r5, r6, pc}

0800e824 <write_submessage_acknack.isra.0>:
 800e824:	b570      	push	{r4, r5, r6, lr}
 800e826:	b092      	sub	sp, #72	; 0x48
 800e828:	4605      	mov	r5, r0
 800e82a:	460e      	mov	r6, r1
 800e82c:	4614      	mov	r4, r2
 800e82e:	f000 ffc5 	bl	800f7bc <uxr_session_header_offset>
 800e832:	a905      	add	r1, sp, #20
 800e834:	9000      	str	r0, [sp, #0]
 800e836:	2300      	movs	r3, #0
 800e838:	a80a      	add	r0, sp, #40	; 0x28
 800e83a:	2211      	movs	r2, #17
 800e83c:	f7ff fd8a 	bl	800e354 <ucdr_init_buffer_origin_offset>
 800e840:	2218      	movs	r2, #24
 800e842:	2300      	movs	r3, #0
 800e844:	210a      	movs	r1, #10
 800e846:	fb02 5404 	mla	r4, r2, r4, r5
 800e84a:	a80a      	add	r0, sp, #40	; 0x28
 800e84c:	2205      	movs	r2, #5
 800e84e:	3450      	adds	r4, #80	; 0x50
 800e850:	f001 f92c 	bl	800faac <uxr_buffer_submessage_header>
 800e854:	a903      	add	r1, sp, #12
 800e856:	4620      	mov	r0, r4
 800e858:	f004 ffb2 	bl	80137c0 <uxr_compute_acknack>
 800e85c:	ba40      	rev16	r0, r0
 800e85e:	a903      	add	r1, sp, #12
 800e860:	f88d 6010 	strb.w	r6, [sp, #16]
 800e864:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e868:	a80a      	add	r0, sp, #40	; 0x28
 800e86a:	f002 f9ed 	bl	8010c48 <uxr_serialize_ACKNACK_Payload>
 800e86e:	2200      	movs	r2, #0
 800e870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e872:	4628      	mov	r0, r5
 800e874:	4611      	mov	r1, r2
 800e876:	f000 ff4d 	bl	800f714 <uxr_stamp_session_header>
 800e87a:	a80a      	add	r0, sp, #40	; 0x28
 800e87c:	f7ff fdaa 	bl	800e3d4 <ucdr_buffer_length>
 800e880:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e882:	4602      	mov	r2, r0
 800e884:	a905      	add	r1, sp, #20
 800e886:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e88a:	47a0      	blx	r4
 800e88c:	b012      	add	sp, #72	; 0x48
 800e88e:	bd70      	pop	{r4, r5, r6, pc}

0800e890 <uxr_init_session>:
 800e890:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800e8c8 <uxr_init_session+0x38>
 800e894:	2300      	movs	r3, #0
 800e896:	b510      	push	{r4, lr}
 800e898:	4604      	mov	r4, r0
 800e89a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800e89e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800e8a2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800e8a6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800e8aa:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800e8ae:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800e8b2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800e8b6:	2181      	movs	r1, #129	; 0x81
 800e8b8:	f000 fe90 	bl	800f5dc <uxr_init_session_info>
 800e8bc:	f104 0008 	add.w	r0, r4, #8
 800e8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8c4:	f001 b80e 	b.w	800f8e4 <uxr_init_stream_storage>
	...

0800e8d0 <uxr_set_status_callback>:
 800e8d0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop

0800e8d8 <uxr_set_topic_callback>:
 800e8d8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop

0800e8e0 <uxr_set_request_callback>:
 800e8e0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop

0800e8e8 <uxr_set_reply_callback>:
 800e8e8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop

0800e8f0 <uxr_create_output_best_effort_stream>:
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	b084      	sub	sp, #16
 800e8f6:	e9cd 2100 	strd	r2, r1, [sp]
 800e8fa:	f000 ff5f 	bl	800f7bc <uxr_session_header_offset>
 800e8fe:	4603      	mov	r3, r0
 800e900:	f104 0008 	add.w	r0, r4, #8
 800e904:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e908:	b004      	add	sp, #16
 800e90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e90e:	f001 b82f 	b.w	800f970 <uxr_add_output_best_effort_buffer>
 800e912:	bf00      	nop

0800e914 <uxr_create_output_reliable_stream>:
 800e914:	b530      	push	{r4, r5, lr}
 800e916:	b089      	sub	sp, #36	; 0x24
 800e918:	4604      	mov	r4, r0
 800e91a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e91e:	9303      	str	r3, [sp, #12]
 800e920:	f000 ff4c 	bl	800f7bc <uxr_session_header_offset>
 800e924:	4605      	mov	r5, r0
 800e926:	9905      	ldr	r1, [sp, #20]
 800e928:	f104 0008 	add.w	r0, r4, #8
 800e92c:	9500      	str	r5, [sp, #0]
 800e92e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e932:	f001 f831 	bl	800f998 <uxr_add_output_reliable_buffer>
 800e936:	2200      	movs	r2, #0
 800e938:	fa5f fc80 	uxtb.w	ip, r0
 800e93c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800e940:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800e944:	0e03      	lsrs	r3, r0, #24
 800e946:	f36c 0207 	bfi	r2, ip, #0, #8
 800e94a:	f364 220f 	bfi	r2, r4, #8, #8
 800e94e:	f361 4217 	bfi	r2, r1, #16, #8
 800e952:	f363 621f 	bfi	r2, r3, #24, #8
 800e956:	4610      	mov	r0, r2
 800e958:	b009      	add	sp, #36	; 0x24
 800e95a:	bd30      	pop	{r4, r5, pc}

0800e95c <uxr_create_input_best_effort_stream>:
 800e95c:	b082      	sub	sp, #8
 800e95e:	3008      	adds	r0, #8
 800e960:	b002      	add	sp, #8
 800e962:	f001 b833 	b.w	800f9cc <uxr_add_input_best_effort_buffer>
 800e966:	bf00      	nop

0800e968 <uxr_create_input_reliable_stream>:
 800e968:	b510      	push	{r4, lr}
 800e96a:	4c0c      	ldr	r4, [pc, #48]	; (800e99c <uxr_create_input_reliable_stream+0x34>)
 800e96c:	b084      	sub	sp, #16
 800e96e:	3008      	adds	r0, #8
 800e970:	9400      	str	r4, [sp, #0]
 800e972:	f001 f841 	bl	800f9f8 <uxr_add_input_reliable_buffer>
 800e976:	2200      	movs	r2, #0
 800e978:	fa5f fe80 	uxtb.w	lr, r0
 800e97c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800e980:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800e984:	0e03      	lsrs	r3, r0, #24
 800e986:	f36e 0207 	bfi	r2, lr, #0, #8
 800e98a:	f36c 220f 	bfi	r2, ip, #8, #8
 800e98e:	f361 4217 	bfi	r2, r1, #16, #8
 800e992:	f363 621f 	bfi	r2, r3, #24, #8
 800e996:	4610      	mov	r0, r2
 800e998:	b004      	add	sp, #16
 800e99a:	bd10      	pop	{r4, pc}
 800e99c:	0800e775 	.word	0x0800e775

0800e9a0 <uxr_epoch_nanos>:
 800e9a0:	b510      	push	{r4, lr}
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	f001 f8e4 	bl	800fb70 <uxr_nanos>
 800e9a8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800e9ac:	1ac0      	subs	r0, r0, r3
 800e9ae:	eb61 0102 	sbc.w	r1, r1, r2
 800e9b2:	bd10      	pop	{r4, pc}

0800e9b4 <uxr_flash_output_streams>:
 800e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b8:	7e03      	ldrb	r3, [r0, #24]
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	4604      	mov	r4, r0
 800e9be:	b1fb      	cbz	r3, 800ea00 <uxr_flash_output_streams+0x4c>
 800e9c0:	f04f 0900 	mov.w	r9, #0
 800e9c4:	f10d 0802 	add.w	r8, sp, #2
 800e9c8:	af03      	add	r7, sp, #12
 800e9ca:	ae02      	add	r6, sp, #8
 800e9cc:	4648      	mov	r0, r9
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	3508      	adds	r5, #8
 800e9d8:	f000 ff2a 	bl	800f830 <uxr_stream_id>
 800e9dc:	4684      	mov	ip, r0
 800e9de:	4643      	mov	r3, r8
 800e9e0:	463a      	mov	r2, r7
 800e9e2:	4631      	mov	r1, r6
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	f8cd c004 	str.w	ip, [sp, #4]
 800e9ea:	f004 ff73 	bl	80138d4 <uxr_prepare_best_effort_buffer_to_send>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d13d      	bne.n	800ea6e <uxr_flash_output_streams+0xba>
 800e9f2:	f109 0901 	add.w	r9, r9, #1
 800e9f6:	7e23      	ldrb	r3, [r4, #24]
 800e9f8:	fa5f f089 	uxtb.w	r0, r9
 800e9fc:	4283      	cmp	r3, r0
 800e9fe:	d8e6      	bhi.n	800e9ce <uxr_flash_output_streams+0x1a>
 800ea00:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ea04:	b383      	cbz	r3, 800ea68 <uxr_flash_output_streams+0xb4>
 800ea06:	f04f 0900 	mov.w	r9, #0
 800ea0a:	f10d 0802 	add.w	r8, sp, #2
 800ea0e:	af03      	add	r7, sp, #12
 800ea10:	ae02      	add	r6, sp, #8
 800ea12:	4648      	mov	r0, r9
 800ea14:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ea18:	2201      	movs	r2, #1
 800ea1a:	2102      	movs	r1, #2
 800ea1c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ea20:	f000 ff06 	bl	800f830 <uxr_stream_id>
 800ea24:	9001      	str	r0, [sp, #4]
 800ea26:	3520      	adds	r5, #32
 800ea28:	e00c      	b.n	800ea44 <uxr_flash_output_streams+0x90>
 800ea2a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ea2e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ea32:	9b02      	ldr	r3, [sp, #8]
 800ea34:	f000 fe6e 	bl	800f714 <uxr_stamp_session_header>
 800ea38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ea3a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ea3e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800ea42:	47d0      	blx	sl
 800ea44:	4643      	mov	r3, r8
 800ea46:	463a      	mov	r2, r7
 800ea48:	4631      	mov	r1, r6
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	f005 f964 	bl	8013d18 <uxr_prepare_next_reliable_buffer_to_send>
 800ea50:	4603      	mov	r3, r0
 800ea52:	4620      	mov	r0, r4
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1e8      	bne.n	800ea2a <uxr_flash_output_streams+0x76>
 800ea58:	f109 0901 	add.w	r9, r9, #1
 800ea5c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ea60:	fa5f f089 	uxtb.w	r0, r9
 800ea64:	4283      	cmp	r3, r0
 800ea66:	d8d5      	bhi.n	800ea14 <uxr_flash_output_streams+0x60>
 800ea68:	b004      	add	sp, #16
 800ea6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea6e:	9b02      	ldr	r3, [sp, #8]
 800ea70:	4620      	mov	r0, r4
 800ea72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ea76:	f109 0901 	add.w	r9, r9, #1
 800ea7a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ea7e:	f000 fe49 	bl	800f714 <uxr_stamp_session_header>
 800ea82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ea84:	9a03      	ldr	r2, [sp, #12]
 800ea86:	685d      	ldr	r5, [r3, #4]
 800ea88:	6818      	ldr	r0, [r3, #0]
 800ea8a:	9902      	ldr	r1, [sp, #8]
 800ea8c:	47a8      	blx	r5
 800ea8e:	7e23      	ldrb	r3, [r4, #24]
 800ea90:	fa5f f089 	uxtb.w	r0, r9
 800ea94:	4283      	cmp	r3, r0
 800ea96:	d89a      	bhi.n	800e9ce <uxr_flash_output_streams+0x1a>
 800ea98:	e7b2      	b.n	800ea00 <uxr_flash_output_streams+0x4c>
 800ea9a:	bf00      	nop

0800ea9c <read_submessage_info>:
 800ea9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa0:	460d      	mov	r5, r1
 800eaa2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	4669      	mov	r1, sp
 800eaaa:	4628      	mov	r0, r5
 800eaac:	f001 fef8 	bl	80108a0 <uxr_deserialize_BaseObjectReply>
 800eab0:	4604      	mov	r4, r0
 800eab2:	a902      	add	r1, sp, #8
 800eab4:	4628      	mov	r0, r5
 800eab6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800eaba:	f7fe fc99 	bl	800d3f0 <ucdr_deserialize_bool>
 800eabe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eac2:	4004      	ands	r4, r0
 800eac4:	b2e4      	uxtb	r4, r4
 800eac6:	b95b      	cbnz	r3, 800eae0 <read_submessage_info+0x44>
 800eac8:	a987      	add	r1, sp, #540	; 0x21c
 800eaca:	4628      	mov	r0, r5
 800eacc:	f7fe fc90 	bl	800d3f0 <ucdr_deserialize_bool>
 800ead0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800ead4:	4680      	mov	r8, r0
 800ead6:	b94b      	cbnz	r3, 800eaec <read_submessage_info+0x50>
 800ead8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800eadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae0:	a903      	add	r1, sp, #12
 800eae2:	4628      	mov	r0, r5
 800eae4:	f001 fd88 	bl	80105f8 <uxr_deserialize_ObjectVariant>
 800eae8:	4004      	ands	r4, r0
 800eaea:	e7ed      	b.n	800eac8 <read_submessage_info+0x2c>
 800eaec:	a988      	add	r1, sp, #544	; 0x220
 800eaee:	4628      	mov	r0, r5
 800eaf0:	f7fe fcac 	bl	800d44c <ucdr_deserialize_uint8_t>
 800eaf4:	ea14 0f08 	tst.w	r4, r8
 800eaf8:	d0ee      	beq.n	800ead8 <read_submessage_info+0x3c>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	d0ec      	beq.n	800ead8 <read_submessage_info+0x3c>
 800eafe:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800eb02:	2b0d      	cmp	r3, #13
 800eb04:	d1e8      	bne.n	800ead8 <read_submessage_info+0x3c>
 800eb06:	a98a      	add	r1, sp, #552	; 0x228
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f7ff fa45 	bl	800df98 <ucdr_deserialize_int16_t>
 800eb0e:	b138      	cbz	r0, 800eb20 <read_submessage_info+0x84>
 800eb10:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	dd06      	ble.n	800eb26 <read_submessage_info+0x8a>
 800eb18:	2f00      	cmp	r7, #0
 800eb1a:	bf14      	ite	ne
 800eb1c:	2001      	movne	r0, #1
 800eb1e:	2002      	moveq	r0, #2
 800eb20:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 800eb24:	e7d8      	b.n	800ead8 <read_submessage_info+0x3c>
 800eb26:	2000      	movs	r0, #0
 800eb28:	e7fa      	b.n	800eb20 <read_submessage_info+0x84>
 800eb2a:	bf00      	nop

0800eb2c <read_submessage_list>:
 800eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb30:	4604      	mov	r4, r0
 800eb32:	b097      	sub	sp, #92	; 0x5c
 800eb34:	460d      	mov	r5, r1
 800eb36:	4ec1      	ldr	r6, [pc, #772]	; (800ee3c <read_submessage_list+0x310>)
 800eb38:	9209      	str	r2, [sp, #36]	; 0x24
 800eb3a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800eb3e:	aa0c      	add	r2, sp, #48	; 0x30
 800eb40:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800eb44:	4628      	mov	r0, r5
 800eb46:	f000 ffcb 	bl	800fae0 <uxr_read_submessage_header>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	f000 8142 	beq.w	800edd4 <read_submessage_list+0x2a8>
 800eb50:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800eb54:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800eb58:	3b02      	subs	r3, #2
 800eb5a:	2b0d      	cmp	r3, #13
 800eb5c:	d8ed      	bhi.n	800eb3a <read_submessage_list+0xe>
 800eb5e:	a101      	add	r1, pc, #4	; (adr r1, 800eb64 <read_submessage_list+0x38>)
 800eb60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb64:	0800edcb 	.word	0x0800edcb
 800eb68:	0800eb3b 	.word	0x0800eb3b
 800eb6c:	0800edbb 	.word	0x0800edbb
 800eb70:	0800ed59 	.word	0x0800ed59
 800eb74:	0800ed4f 	.word	0x0800ed4f
 800eb78:	0800eb3b 	.word	0x0800eb3b
 800eb7c:	0800eb3b 	.word	0x0800eb3b
 800eb80:	0800eca5 	.word	0x0800eca5
 800eb84:	0800ec37 	.word	0x0800ec37
 800eb88:	0800ebf7 	.word	0x0800ebf7
 800eb8c:	0800eb3b 	.word	0x0800eb3b
 800eb90:	0800eb3b 	.word	0x0800eb3b
 800eb94:	0800eb3b 	.word	0x0800eb3b
 800eb98:	0800eb9d 	.word	0x0800eb9d
 800eb9c:	a910      	add	r1, sp, #64	; 0x40
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f002 f8a6 	bl	8010cf0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800eba4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800eba8:	f1b8 0f00 	cmp.w	r8, #0
 800ebac:	f000 811a 	beq.w	800ede4 <read_submessage_list+0x2b8>
 800ebb0:	f000 ffde 	bl	800fb70 <uxr_nanos>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ebc0:	9006      	str	r0, [sp, #24]
 800ebc2:	468c      	mov	ip, r1
 800ebc4:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ebc6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800ebca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ebcc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800ebd0:	468c      	mov	ip, r1
 800ebd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ebd4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800ebd8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800ebdc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 800ebe0:	fbc7 0106 	smlal	r0, r1, r7, r6
 800ebe4:	e9cd 0100 	strd	r0, r1, [sp]
 800ebe8:	4620      	mov	r0, r4
 800ebea:	47c0      	blx	r8
 800ebec:	f04f 0301 	mov.w	r3, #1
 800ebf0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800ebf4:	e7a1      	b.n	800eb3a <read_submessage_list+0xe>
 800ebf6:	a910      	add	r1, sp, #64	; 0x40
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	f002 f865 	bl	8010cc8 <uxr_deserialize_HEARTBEAT_Payload>
 800ebfe:	2100      	movs	r1, #0
 800ec00:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ec04:	f000 fe42 	bl	800f88c <uxr_stream_id_from_raw>
 800ec08:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800ec0c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec0e:	f104 0008 	add.w	r0, r4, #8
 800ec12:	4641      	mov	r1, r8
 800ec14:	f000 ff28 	bl	800fa68 <uxr_get_input_reliable_stream>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d08e      	beq.n	800eb3a <read_submessage_list+0xe>
 800ec1c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800ec20:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800ec24:	f004 fdc0 	bl	80137a8 <uxr_process_heartbeat>
 800ec28:	4642      	mov	r2, r8
 800ec2a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f7ff fdf8 	bl	800e824 <write_submessage_acknack.isra.0>
 800ec34:	e781      	b.n	800eb3a <read_submessage_list+0xe>
 800ec36:	a910      	add	r1, sp, #64	; 0x40
 800ec38:	4628      	mov	r0, r5
 800ec3a:	f002 f81d 	bl	8010c78 <uxr_deserialize_ACKNACK_Payload>
 800ec3e:	2100      	movs	r1, #0
 800ec40:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800ec44:	f000 fe22 	bl	800f88c <uxr_stream_id_from_raw>
 800ec48:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ec4c:	900d      	str	r0, [sp, #52]	; 0x34
 800ec4e:	f104 0008 	add.w	r0, r4, #8
 800ec52:	f000 fef3 	bl	800fa3c <uxr_get_output_reliable_stream>
 800ec56:	4680      	mov	r8, r0
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f43f af6e 	beq.w	800eb3a <read_submessage_list+0xe>
 800ec5e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800ec62:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800ec66:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800ec6a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ec6e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ec72:	b289      	uxth	r1, r1
 800ec74:	f005 f8f8 	bl	8013e68 <uxr_process_acknack>
 800ec78:	4640      	mov	r0, r8
 800ec7a:	f005 f8b9 	bl	8013df0 <uxr_begin_output_nack_buffer_it>
 800ec7e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800ec82:	e005      	b.n	800ec90 <read_submessage_list+0x164>
 800ec84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ec86:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800ec8a:	e9d3 0900 	ldrd	r0, r9, [r3]
 800ec8e:	47c8      	blx	r9
 800ec90:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800ec94:	aa0f      	add	r2, sp, #60	; 0x3c
 800ec96:	4651      	mov	r1, sl
 800ec98:	4640      	mov	r0, r8
 800ec9a:	f005 f8ab 	bl	8013df4 <uxr_next_reliable_nack_buffer_to_send>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d1f0      	bne.n	800ec84 <read_submessage_list+0x158>
 800eca2:	e74a      	b.n	800eb3a <read_submessage_list+0xe>
 800eca4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800eca8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800ecac:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800ecb6:	4651      	mov	r1, sl
 800ecb8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ecbc:	f1a8 0804 	sub.w	r8, r8, #4
 800ecc0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800ecc4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800ecc8:	fa1f f888 	uxth.w	r8, r8
 800eccc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ecd0:	f009 090e 	and.w	r9, r9, #14
 800ecd4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800ecd8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800ecdc:	f001 fd2e 	bl	801073c <uxr_deserialize_BaseObjectRequest>
 800ece0:	4650      	mov	r0, sl
 800ece2:	a90f      	add	r1, sp, #60	; 0x3c
 800ece4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800ece8:	f000 fd90 	bl	800f80c <uxr_parse_base_object_request>
 800ecec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ecee:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800ecf2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800ecf6:	9110      	str	r1, [sp, #64]	; 0x40
 800ecf8:	f1bb 0f00 	cmp.w	fp, #0
 800ecfc:	d006      	beq.n	800ed0c <read_submessage_list+0x1e0>
 800ecfe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ed02:	4652      	mov	r2, sl
 800ed04:	4620      	mov	r0, r4
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	2300      	movs	r3, #0
 800ed0a:	47d8      	blx	fp
 800ed0c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ed0e:	b182      	cbz	r2, 800ed32 <read_submessage_list+0x206>
 800ed10:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800ed12:	f04f 0c00 	mov.w	ip, #0
 800ed16:	3902      	subs	r1, #2
 800ed18:	e003      	b.n	800ed22 <read_submessage_list+0x1f6>
 800ed1a:	f10c 0c01 	add.w	ip, ip, #1
 800ed1e:	4594      	cmp	ip, r2
 800ed20:	d007      	beq.n	800ed32 <read_submessage_list+0x206>
 800ed22:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800ed26:	4553      	cmp	r3, sl
 800ed28:	d1f7      	bne.n	800ed1a <read_submessage_list+0x1ee>
 800ed2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f803 200c 	strb.w	r2, [r3, ip]
 800ed32:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800ed36:	464b      	mov	r3, r9
 800ed38:	4642      	mov	r2, r8
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	9102      	str	r1, [sp, #8]
 800ed3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ed40:	9101      	str	r1, [sp, #4]
 800ed42:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ed44:	9100      	str	r1, [sp, #0]
 800ed46:	4629      	mov	r1, r5
 800ed48:	f005 f916 	bl	8013f78 <read_submessage_format>
 800ed4c:	e6f5      	b.n	800eb3a <read_submessage_list+0xe>
 800ed4e:	4629      	mov	r1, r5
 800ed50:	4620      	mov	r0, r4
 800ed52:	f7ff fea3 	bl	800ea9c <read_submessage_info>
 800ed56:	e6f0      	b.n	800eb3a <read_submessage_list+0xe>
 800ed58:	2a00      	cmp	r2, #0
 800ed5a:	d03e      	beq.n	800edda <read_submessage_list+0x2ae>
 800ed5c:	a910      	add	r1, sp, #64	; 0x40
 800ed5e:	4628      	mov	r0, r5
 800ed60:	f001 fee2 	bl	8010b28 <uxr_deserialize_STATUS_Payload>
 800ed64:	a90e      	add	r1, sp, #56	; 0x38
 800ed66:	aa0d      	add	r2, sp, #52	; 0x34
 800ed68:	a810      	add	r0, sp, #64	; 0x40
 800ed6a:	f000 fd4f 	bl	800f80c <uxr_parse_base_object_request>
 800ed6e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ed70:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800ed74:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800ed78:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800ed7c:	910f      	str	r1, [sp, #60]	; 0x3c
 800ed7e:	f1ba 0f00 	cmp.w	sl, #0
 800ed82:	d006      	beq.n	800ed92 <read_submessage_list+0x266>
 800ed84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ed88:	4642      	mov	r2, r8
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	464b      	mov	r3, r9
 800ed90:	47d0      	blx	sl
 800ed92:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ed94:	2a00      	cmp	r2, #0
 800ed96:	f43f aed0 	beq.w	800eb3a <read_submessage_list+0xe>
 800ed9a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	3802      	subs	r0, #2
 800eda0:	e003      	b.n	800edaa <read_submessage_list+0x27e>
 800eda2:	3101      	adds	r1, #1
 800eda4:	4291      	cmp	r1, r2
 800eda6:	f43f aec8 	beq.w	800eb3a <read_submessage_list+0xe>
 800edaa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800edae:	4543      	cmp	r3, r8
 800edb0:	d1f7      	bne.n	800eda2 <read_submessage_list+0x276>
 800edb2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800edb4:	f803 9001 	strb.w	r9, [r3, r1]
 800edb8:	e6bf      	b.n	800eb3a <read_submessage_list+0xe>
 800edba:	2a00      	cmp	r2, #0
 800edbc:	f47f aebd 	bne.w	800eb3a <read_submessage_list+0xe>
 800edc0:	4629      	mov	r1, r5
 800edc2:	4620      	mov	r0, r4
 800edc4:	f000 fc66 	bl	800f694 <uxr_read_create_session_status>
 800edc8:	e6b7      	b.n	800eb3a <read_submessage_list+0xe>
 800edca:	4629      	mov	r1, r5
 800edcc:	4620      	mov	r0, r4
 800edce:	f7ff fcf3 	bl	800e7b8 <read_submessage_get_info>
 800edd2:	e6b2      	b.n	800eb3a <read_submessage_list+0xe>
 800edd4:	b017      	add	sp, #92	; 0x5c
 800edd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edda:	4629      	mov	r1, r5
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 fc67 	bl	800f6b0 <uxr_read_delete_session_status>
 800ede2:	e6aa      	b.n	800eb3a <read_submessage_list+0xe>
 800ede4:	f000 fec4 	bl	800fb70 <uxr_nanos>
 800ede8:	4642      	mov	r2, r8
 800edea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800edec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edee:	fbc7 3206 	smlal	r3, r2, r7, r6
 800edf2:	1818      	adds	r0, r3, r0
 800edf4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800edf6:	eb42 0101 	adc.w	r1, r2, r1
 800edfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800edfc:	4642      	mov	r2, r8
 800edfe:	fbc7 3206 	smlal	r3, r2, r7, r6
 800ee02:	469c      	mov	ip, r3
 800ee04:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 800ee08:	fbc3 7806 	smlal	r7, r8, r3, r6
 800ee0c:	4643      	mov	r3, r8
 800ee0e:	eb1c 0c07 	adds.w	ip, ip, r7
 800ee12:	eb42 0203 	adc.w	r2, r2, r3
 800ee16:	ebb0 030c 	subs.w	r3, r0, ip
 800ee1a:	eb61 0202 	sbc.w	r2, r1, r2
 800ee1e:	2a00      	cmp	r2, #0
 800ee20:	db08      	blt.n	800ee34 <read_submessage_list+0x308>
 800ee22:	085b      	lsrs	r3, r3, #1
 800ee24:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800ee28:	1052      	asrs	r2, r2, #1
 800ee2a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800ee2e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 800ee32:	e6db      	b.n	800ebec <read_submessage_list+0xc0>
 800ee34:	3301      	adds	r3, #1
 800ee36:	f142 0200 	adc.w	r2, r2, #0
 800ee3a:	e7f2      	b.n	800ee22 <read_submessage_list+0x2f6>
 800ee3c:	3b9aca00 	.word	0x3b9aca00

0800ee40 <listen_message_reliably>:
 800ee40:	1e0b      	subs	r3, r1, #0
 800ee42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee46:	bfb8      	it	lt
 800ee48:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800ee4c:	b09d      	sub	sp, #116	; 0x74
 800ee4e:	4680      	mov	r8, r0
 800ee50:	9305      	str	r3, [sp, #20]
 800ee52:	f000 fe71 	bl	800fb38 <uxr_millis>
 800ee56:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800ee5a:	4681      	mov	r9, r0
 800ee5c:	2a00      	cmp	r2, #0
 800ee5e:	f000 809a 	beq.w	800ef96 <listen_message_reliably+0x156>
 800ee62:	2600      	movs	r6, #0
 800ee64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee68:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ee6c:	460f      	mov	r7, r1
 800ee6e:	4630      	mov	r0, r6
 800ee70:	9303      	str	r3, [sp, #12]
 800ee72:	e00e      	b.n	800ee92 <listen_message_reliably+0x52>
 800ee74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee76:	3601      	adds	r6, #1
 800ee78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee7a:	455a      	cmp	r2, fp
 800ee7c:	9903      	ldr	r1, [sp, #12]
 800ee7e:	b2f0      	uxtb	r0, r6
 800ee80:	eb73 0101 	sbcs.w	r1, r3, r1
 800ee84:	da01      	bge.n	800ee8a <listen_message_reliably+0x4a>
 800ee86:	4693      	mov	fp, r2
 800ee88:	9303      	str	r3, [sp, #12]
 800ee8a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800ee8e:	4283      	cmp	r3, r0
 800ee90:	d95f      	bls.n	800ef52 <listen_message_reliably+0x112>
 800ee92:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800ee96:	2102      	movs	r1, #2
 800ee98:	2201      	movs	r2, #1
 800ee9a:	00e4      	lsls	r4, r4, #3
 800ee9c:	f000 fcc8 	bl	800f830 <uxr_stream_id>
 800eea0:	4601      	mov	r1, r0
 800eea2:	f104 0520 	add.w	r5, r4, #32
 800eea6:	463b      	mov	r3, r7
 800eea8:	464a      	mov	r2, r9
 800eeaa:	9109      	str	r1, [sp, #36]	; 0x24
 800eeac:	4445      	add	r5, r8
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f004 ff72 	bl	8013d98 <uxr_update_output_stream_heartbeat_timestamp>
 800eeb4:	eb08 0304 	add.w	r3, r8, r4
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d0db      	beq.n	800ee74 <listen_message_reliably+0x34>
 800eebc:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800eec0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800eec4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800eec8:	4640      	mov	r0, r8
 800eeca:	3501      	adds	r5, #1
 800eecc:	4444      	add	r4, r8
 800eece:	9304      	str	r3, [sp, #16]
 800eed0:	f000 fc74 	bl	800f7bc <uxr_session_header_offset>
 800eed4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800eed8:	2300      	movs	r3, #0
 800eeda:	2211      	movs	r2, #17
 800eedc:	a90c      	add	r1, sp, #48	; 0x30
 800eede:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800eee2:	9000      	str	r0, [sp, #0]
 800eee4:	4650      	mov	r0, sl
 800eee6:	3601      	adds	r6, #1
 800eee8:	f7ff fa34 	bl	800e354 <ucdr_init_buffer_origin_offset>
 800eeec:	2300      	movs	r3, #0
 800eeee:	2205      	movs	r2, #5
 800eef0:	210b      	movs	r1, #11
 800eef2:	4650      	mov	r0, sl
 800eef4:	f000 fdda 	bl	800faac <uxr_buffer_submessage_header>
 800eef8:	2101      	movs	r1, #1
 800eefa:	8968      	ldrh	r0, [r5, #10]
 800eefc:	f005 f906 	bl	801410c <uxr_seq_num_add>
 800ef00:	892b      	ldrh	r3, [r5, #8]
 800ef02:	4602      	mov	r2, r0
 800ef04:	a90a      	add	r1, sp, #40	; 0x28
 800ef06:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800ef0a:	4650      	mov	r0, sl
 800ef0c:	9b04      	ldr	r3, [sp, #16]
 800ef0e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800ef12:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800ef16:	f001 fec3 	bl	8010ca0 <uxr_serialize_HEARTBEAT_Payload>
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef1e:	4640      	mov	r0, r8
 800ef20:	4611      	mov	r1, r2
 800ef22:	f000 fbf7 	bl	800f714 <uxr_stamp_session_header>
 800ef26:	4650      	mov	r0, sl
 800ef28:	f7ff fa54 	bl	800e3d4 <ucdr_buffer_length>
 800ef2c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ef30:	4602      	mov	r2, r0
 800ef32:	a90c      	add	r1, sp, #48	; 0x30
 800ef34:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ef38:	47a8      	blx	r5
 800ef3a:	9903      	ldr	r1, [sp, #12]
 800ef3c:	b2f0      	uxtb	r0, r6
 800ef3e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800ef42:	455a      	cmp	r2, fp
 800ef44:	eb73 0101 	sbcs.w	r1, r3, r1
 800ef48:	db9d      	blt.n	800ee86 <listen_message_reliably+0x46>
 800ef4a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800ef4e:	4283      	cmp	r3, r0
 800ef50:	d89f      	bhi.n	800ee92 <listen_message_reliably+0x52>
 800ef52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ef56:	9a03      	ldr	r2, [sp, #12]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	bf08      	it	eq
 800ef5c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800ef60:	d019      	beq.n	800ef96 <listen_message_reliably+0x156>
 800ef62:	ebab 0309 	sub.w	r3, fp, r9
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	9d05      	ldr	r5, [sp, #20]
 800ef6a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 800ef6e:	aa08      	add	r2, sp, #32
 800ef70:	bf08      	it	eq
 800ef72:	2301      	moveq	r3, #1
 800ef74:	a907      	add	r1, sp, #28
 800ef76:	6884      	ldr	r4, [r0, #8]
 800ef78:	429d      	cmp	r5, r3
 800ef7a:	6800      	ldr	r0, [r0, #0]
 800ef7c:	bfa8      	it	ge
 800ef7e:	461d      	movge	r5, r3
 800ef80:	462b      	mov	r3, r5
 800ef82:	47a0      	blx	r4
 800ef84:	b948      	cbnz	r0, 800ef9a <listen_message_reliably+0x15a>
 800ef86:	9b05      	ldr	r3, [sp, #20]
 800ef88:	1b5b      	subs	r3, r3, r5
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	9305      	str	r3, [sp, #20]
 800ef8e:	f73f af60 	bgt.w	800ee52 <listen_message_reliably+0x12>
 800ef92:	4604      	mov	r4, r0
 800ef94:	e012      	b.n	800efbc <listen_message_reliably+0x17c>
 800ef96:	9b05      	ldr	r3, [sp, #20]
 800ef98:	e7e5      	b.n	800ef66 <listen_message_reliably+0x126>
 800ef9a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ef9e:	4604      	mov	r4, r0
 800efa0:	2500      	movs	r5, #0
 800efa2:	a80c      	add	r0, sp, #48	; 0x30
 800efa4:	f7ff f9e8 	bl	800e378 <ucdr_init_buffer>
 800efa8:	f10d 031a 	add.w	r3, sp, #26
 800efac:	aa06      	add	r2, sp, #24
 800efae:	a90c      	add	r1, sp, #48	; 0x30
 800efb0:	4640      	mov	r0, r8
 800efb2:	f88d 5018 	strb.w	r5, [sp, #24]
 800efb6:	f000 fbc1 	bl	800f73c <uxr_read_session_header>
 800efba:	b918      	cbnz	r0, 800efc4 <listen_message_reliably+0x184>
 800efbc:	4620      	mov	r0, r4
 800efbe:	b01d      	add	sp, #116	; 0x74
 800efc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc4:	4629      	mov	r1, r5
 800efc6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800efca:	f000 fc5f 	bl	800f88c <uxr_stream_id_from_raw>
 800efce:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800efd2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800efd6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800efda:	2e01      	cmp	r6, #1
 800efdc:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800efe0:	d04b      	beq.n	800f07a <listen_message_reliably+0x23a>
 800efe2:	2e02      	cmp	r6, #2
 800efe4:	d00f      	beq.n	800f006 <listen_message_reliably+0x1c6>
 800efe6:	2e00      	cmp	r6, #0
 800efe8:	d1e8      	bne.n	800efbc <listen_message_reliably+0x17c>
 800efea:	4631      	mov	r1, r6
 800efec:	4630      	mov	r0, r6
 800efee:	f000 fc4d 	bl	800f88c <uxr_stream_id_from_raw>
 800eff2:	4602      	mov	r2, r0
 800eff4:	a90c      	add	r1, sp, #48	; 0x30
 800eff6:	4640      	mov	r0, r8
 800eff8:	920a      	str	r2, [sp, #40]	; 0x28
 800effa:	f7ff fd97 	bl	800eb2c <read_submessage_list>
 800effe:	4620      	mov	r0, r4
 800f000:	b01d      	add	sp, #116	; 0x74
 800f002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f006:	4629      	mov	r1, r5
 800f008:	f108 0008 	add.w	r0, r8, #8
 800f00c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800f010:	f000 fd2a 	bl	800fa68 <uxr_get_input_reliable_stream>
 800f014:	4607      	mov	r7, r0
 800f016:	b338      	cbz	r0, 800f068 <listen_message_reliably+0x228>
 800f018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f01a:	a80c      	add	r0, sp, #48	; 0x30
 800f01c:	9203      	str	r2, [sp, #12]
 800f01e:	f7ff f9dd 	bl	800e3dc <ucdr_buffer_remaining>
 800f022:	4603      	mov	r3, r0
 800f024:	f10d 0019 	add.w	r0, sp, #25
 800f028:	9a03      	ldr	r2, [sp, #12]
 800f02a:	4651      	mov	r1, sl
 800f02c:	9000      	str	r0, [sp, #0]
 800f02e:	4638      	mov	r0, r7
 800f030:	f004 fabe 	bl	80135b0 <uxr_receive_reliable_message>
 800f034:	b1c0      	cbz	r0, 800f068 <listen_message_reliably+0x228>
 800f036:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f03a:	b393      	cbz	r3, 800f0a2 <listen_message_reliably+0x262>
 800f03c:	ae14      	add	r6, sp, #80	; 0x50
 800f03e:	f04f 0a02 	mov.w	sl, #2
 800f042:	e00a      	b.n	800f05a <listen_message_reliably+0x21a>
 800f044:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800f048:	4631      	mov	r1, r6
 800f04a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800f04e:	4640      	mov	r0, r8
 800f050:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800f054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f056:	f7ff fd69 	bl	800eb2c <read_submessage_list>
 800f05a:	2204      	movs	r2, #4
 800f05c:	4631      	mov	r1, r6
 800f05e:	4638      	mov	r0, r7
 800f060:	f004 fb28 	bl	80136b4 <uxr_next_input_reliable_buffer_available>
 800f064:	2800      	cmp	r0, #0
 800f066:	d1ed      	bne.n	800f044 <listen_message_reliably+0x204>
 800f068:	4640      	mov	r0, r8
 800f06a:	462a      	mov	r2, r5
 800f06c:	4649      	mov	r1, r9
 800f06e:	f7ff fbd9 	bl	800e824 <write_submessage_acknack.isra.0>
 800f072:	4620      	mov	r0, r4
 800f074:	b01d      	add	sp, #116	; 0x74
 800f076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07a:	4629      	mov	r1, r5
 800f07c:	f108 0008 	add.w	r0, r8, #8
 800f080:	f000 fce8 	bl	800fa54 <uxr_get_input_best_effort_stream>
 800f084:	2800      	cmp	r0, #0
 800f086:	d099      	beq.n	800efbc <listen_message_reliably+0x17c>
 800f088:	4651      	mov	r1, sl
 800f08a:	f004 fa07 	bl	801349c <uxr_receive_best_effort_message>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d094      	beq.n	800efbc <listen_message_reliably+0x17c>
 800f092:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800f096:	a90c      	add	r1, sp, #48	; 0x30
 800f098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f09a:	4640      	mov	r0, r8
 800f09c:	f7ff fd46 	bl	800eb2c <read_submessage_list>
 800f0a0:	e78c      	b.n	800efbc <listen_message_reliably+0x17c>
 800f0a2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800f0a6:	a90c      	add	r1, sp, #48	; 0x30
 800f0a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	f7ff fd3e 	bl	800eb2c <read_submessage_list>
 800f0b0:	e7c4      	b.n	800f03c <listen_message_reliably+0x1fc>
 800f0b2:	bf00      	nop

0800f0b4 <uxr_run_session_until_confirm_delivery>:
 800f0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	460d      	mov	r5, r1
 800f0bc:	f000 fd3c 	bl	800fb38 <uxr_millis>
 800f0c0:	4607      	mov	r7, r0
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	f106 0808 	add.w	r8, r6, #8
 800f0c8:	f7ff fc74 	bl	800e9b4 <uxr_flash_output_streams>
 800f0cc:	2d00      	cmp	r5, #0
 800f0ce:	db10      	blt.n	800f0f2 <uxr_run_session_until_confirm_delivery+0x3e>
 800f0d0:	462c      	mov	r4, r5
 800f0d2:	e006      	b.n	800f0e2 <uxr_run_session_until_confirm_delivery+0x2e>
 800f0d4:	f7ff feb4 	bl	800ee40 <listen_message_reliably>
 800f0d8:	f000 fd2e 	bl	800fb38 <uxr_millis>
 800f0dc:	1bc3      	subs	r3, r0, r7
 800f0de:	1aec      	subs	r4, r5, r3
 800f0e0:	d407      	bmi.n	800f0f2 <uxr_run_session_until_confirm_delivery+0x3e>
 800f0e2:	4640      	mov	r0, r8
 800f0e4:	f000 fccc 	bl	800fa80 <uxr_output_streams_confirmed>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d0f0      	beq.n	800f0d4 <uxr_run_session_until_confirm_delivery+0x20>
 800f0f2:	4640      	mov	r0, r8
 800f0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	f000 bcc2 	b.w	800fa80 <uxr_output_streams_confirmed>

0800f0fc <uxr_run_session_until_all_status>:
 800f0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f100:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800f104:	4606      	mov	r6, r0
 800f106:	4688      	mov	r8, r1
 800f108:	4692      	mov	sl, r2
 800f10a:	461f      	mov	r7, r3
 800f10c:	f7ff fc52 	bl	800e9b4 <uxr_flash_output_streams>
 800f110:	f1bb 0f00 	cmp.w	fp, #0
 800f114:	d004      	beq.n	800f120 <uxr_run_session_until_all_status+0x24>
 800f116:	465a      	mov	r2, fp
 800f118:	21ff      	movs	r1, #255	; 0xff
 800f11a:	4638      	mov	r0, r7
 800f11c:	f006 fcb4 	bl	8015a88 <memset>
 800f120:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800f124:	1e7d      	subs	r5, r7, #1
 800f126:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 800f12a:	f000 fd05 	bl	800fb38 <uxr_millis>
 800f12e:	4641      	mov	r1, r8
 800f130:	4681      	mov	r9, r0
 800f132:	4630      	mov	r0, r6
 800f134:	f7ff fe84 	bl	800ee40 <listen_message_reliably>
 800f138:	f000 fcfe 	bl	800fb38 <uxr_millis>
 800f13c:	eba0 0009 	sub.w	r0, r0, r9
 800f140:	eba8 0100 	sub.w	r1, r8, r0
 800f144:	f1bb 0f00 	cmp.w	fp, #0
 800f148:	d029      	beq.n	800f19e <uxr_run_session_until_all_status+0xa2>
 800f14a:	46ae      	mov	lr, r5
 800f14c:	f04f 0c00 	mov.w	ip, #0
 800f150:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800f154:	2cff      	cmp	r4, #255	; 0xff
 800f156:	d015      	beq.n	800f184 <uxr_run_session_until_all_status+0x88>
 800f158:	f10c 0c01 	add.w	ip, ip, #1
 800f15c:	45e3      	cmp	fp, ip
 800f15e:	d8f7      	bhi.n	800f150 <uxr_run_session_until_all_status+0x54>
 800f160:	2300      	movs	r3, #0
 800f162:	67f3      	str	r3, [r6, #124]	; 0x7c
 800f164:	e000      	b.n	800f168 <uxr_run_session_until_all_status+0x6c>
 800f166:	b158      	cbz	r0, 800f180 <uxr_run_session_until_all_status+0x84>
 800f168:	462b      	mov	r3, r5
 800f16a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800f16e:	3302      	adds	r3, #2
 800f170:	2801      	cmp	r0, #1
 800f172:	eba3 0307 	sub.w	r3, r3, r7
 800f176:	bf8c      	ite	hi
 800f178:	2000      	movhi	r0, #0
 800f17a:	2001      	movls	r0, #1
 800f17c:	459b      	cmp	fp, r3
 800f17e:	d8f2      	bhi.n	800f166 <uxr_run_session_until_all_status+0x6a>
 800f180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f184:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800f188:	f10c 0c01 	add.w	ip, ip, #1
 800f18c:	45dc      	cmp	ip, fp
 800f18e:	d201      	bcs.n	800f194 <uxr_run_session_until_all_status+0x98>
 800f190:	2b00      	cmp	r3, #0
 800f192:	d0dd      	beq.n	800f150 <uxr_run_session_until_all_status+0x54>
 800f194:	2900      	cmp	r1, #0
 800f196:	dde3      	ble.n	800f160 <uxr_run_session_until_all_status+0x64>
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d1ca      	bne.n	800f132 <uxr_run_session_until_all_status+0x36>
 800f19c:	e7e0      	b.n	800f160 <uxr_run_session_until_all_status+0x64>
 800f19e:	2001      	movs	r0, #1
 800f1a0:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800f1a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1a8 <wait_session_status>:
 800f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	b09d      	sub	sp, #116	; 0x74
 800f1b0:	20ff      	movs	r0, #255	; 0xff
 800f1b2:	9303      	str	r3, [sp, #12]
 800f1b4:	7160      	strb	r0, [r4, #5]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 80b6 	beq.w	800f328 <wait_session_status+0x180>
 800f1bc:	4689      	mov	r9, r1
 800f1be:	4692      	mov	sl, r2
 800f1c0:	f04f 0b00 	mov.w	fp, #0
 800f1c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f1c6:	4652      	mov	r2, sl
 800f1c8:	4649      	mov	r1, r9
 800f1ca:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f1ce:	47a8      	blx	r5
 800f1d0:	f000 fcb2 	bl	800fb38 <uxr_millis>
 800f1d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1d8:	4605      	mov	r5, r0
 800f1da:	e009      	b.n	800f1f0 <wait_session_status+0x48>
 800f1dc:	f000 fcac 	bl	800fb38 <uxr_millis>
 800f1e0:	1b40      	subs	r0, r0, r5
 800f1e2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	dd40      	ble.n	800f26c <wait_session_status+0xc4>
 800f1ea:	7960      	ldrb	r0, [r4, #5]
 800f1ec:	28ff      	cmp	r0, #255	; 0xff
 800f1ee:	d145      	bne.n	800f27c <wait_session_status+0xd4>
 800f1f0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f1f2:	a908      	add	r1, sp, #32
 800f1f4:	6896      	ldr	r6, [r2, #8]
 800f1f6:	6810      	ldr	r0, [r2, #0]
 800f1f8:	aa09      	add	r2, sp, #36	; 0x24
 800f1fa:	47b0      	blx	r6
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d0ed      	beq.n	800f1dc <wait_session_status+0x34>
 800f200:	a80c      	add	r0, sp, #48	; 0x30
 800f202:	2600      	movs	r6, #0
 800f204:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f208:	f7ff f8b6 	bl	800e378 <ucdr_init_buffer>
 800f20c:	f10d 031e 	add.w	r3, sp, #30
 800f210:	aa07      	add	r2, sp, #28
 800f212:	a90c      	add	r1, sp, #48	; 0x30
 800f214:	4620      	mov	r0, r4
 800f216:	f88d 601c 	strb.w	r6, [sp, #28]
 800f21a:	f000 fa8f 	bl	800f73c <uxr_read_session_header>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d0dc      	beq.n	800f1dc <wait_session_status+0x34>
 800f222:	4631      	mov	r1, r6
 800f224:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f228:	f000 fb30 	bl	800f88c <uxr_stream_id_from_raw>
 800f22c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f230:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f234:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f238:	2f01      	cmp	r7, #1
 800f23a:	9302      	str	r3, [sp, #8]
 800f23c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800f240:	d05c      	beq.n	800f2fc <wait_session_status+0x154>
 800f242:	2f02      	cmp	r7, #2
 800f244:	d020      	beq.n	800f288 <wait_session_status+0xe0>
 800f246:	2f00      	cmp	r7, #0
 800f248:	d1c8      	bne.n	800f1dc <wait_session_status+0x34>
 800f24a:	4639      	mov	r1, r7
 800f24c:	4638      	mov	r0, r7
 800f24e:	f000 fb1d 	bl	800f88c <uxr_stream_id_from_raw>
 800f252:	a90c      	add	r1, sp, #48	; 0x30
 800f254:	4602      	mov	r2, r0
 800f256:	900b      	str	r0, [sp, #44]	; 0x2c
 800f258:	4620      	mov	r0, r4
 800f25a:	f7ff fc67 	bl	800eb2c <read_submessage_list>
 800f25e:	f000 fc6b 	bl	800fb38 <uxr_millis>
 800f262:	1b40      	subs	r0, r0, r5
 800f264:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f268:	2b00      	cmp	r3, #0
 800f26a:	dcbe      	bgt.n	800f1ea <wait_session_status+0x42>
 800f26c:	f10b 0b01 	add.w	fp, fp, #1
 800f270:	9b03      	ldr	r3, [sp, #12]
 800f272:	7960      	ldrb	r0, [r4, #5]
 800f274:	455b      	cmp	r3, fp
 800f276:	d001      	beq.n	800f27c <wait_session_status+0xd4>
 800f278:	28ff      	cmp	r0, #255	; 0xff
 800f27a:	d0a3      	beq.n	800f1c4 <wait_session_status+0x1c>
 800f27c:	38ff      	subs	r0, #255	; 0xff
 800f27e:	bf18      	it	ne
 800f280:	2001      	movne	r0, #1
 800f282:	b01d      	add	sp, #116	; 0x74
 800f284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f288:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f28c:	4631      	mov	r1, r6
 800f28e:	f104 0008 	add.w	r0, r4, #8
 800f292:	9304      	str	r3, [sp, #16]
 800f294:	f000 fbe8 	bl	800fa68 <uxr_get_input_reliable_stream>
 800f298:	4680      	mov	r8, r0
 800f29a:	b348      	cbz	r0, 800f2f0 <wait_session_status+0x148>
 800f29c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f29e:	a80c      	add	r0, sp, #48	; 0x30
 800f2a0:	9205      	str	r2, [sp, #20]
 800f2a2:	f7ff f89b 	bl	800e3dc <ucdr_buffer_remaining>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	f10d 001d 	add.w	r0, sp, #29
 800f2ac:	9a05      	ldr	r2, [sp, #20]
 800f2ae:	9000      	str	r0, [sp, #0]
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	9902      	ldr	r1, [sp, #8]
 800f2b4:	f004 f97c 	bl	80135b0 <uxr_receive_reliable_message>
 800f2b8:	b1d0      	cbz	r0, 800f2f0 <wait_session_status+0x148>
 800f2ba:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d03a      	beq.n	800f338 <wait_session_status+0x190>
 800f2c2:	9f04      	ldr	r7, [sp, #16]
 800f2c4:	e00a      	b.n	800f2dc <wait_session_status+0x134>
 800f2c6:	f04f 0302 	mov.w	r3, #2
 800f2ca:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800f2ce:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800f2d2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800f2d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2d8:	f7ff fc28 	bl	800eb2c <read_submessage_list>
 800f2dc:	a914      	add	r1, sp, #80	; 0x50
 800f2de:	2204      	movs	r2, #4
 800f2e0:	4640      	mov	r0, r8
 800f2e2:	f004 f9e7 	bl	80136b4 <uxr_next_input_reliable_buffer_available>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	a914      	add	r1, sp, #80	; 0x50
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1ea      	bne.n	800f2c6 <wait_session_status+0x11e>
 800f2f0:	4632      	mov	r2, r6
 800f2f2:	9904      	ldr	r1, [sp, #16]
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f7ff fa95 	bl	800e824 <write_submessage_acknack.isra.0>
 800f2fa:	e76f      	b.n	800f1dc <wait_session_status+0x34>
 800f2fc:	4631      	mov	r1, r6
 800f2fe:	f104 0008 	add.w	r0, r4, #8
 800f302:	f000 fba7 	bl	800fa54 <uxr_get_input_best_effort_stream>
 800f306:	2800      	cmp	r0, #0
 800f308:	f43f af68 	beq.w	800f1dc <wait_session_status+0x34>
 800f30c:	9902      	ldr	r1, [sp, #8]
 800f30e:	f004 f8c5 	bl	801349c <uxr_receive_best_effort_message>
 800f312:	2800      	cmp	r0, #0
 800f314:	f43f af62 	beq.w	800f1dc <wait_session_status+0x34>
 800f318:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800f31c:	a90c      	add	r1, sp, #48	; 0x30
 800f31e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f320:	4620      	mov	r0, r4
 800f322:	f7ff fc03 	bl	800eb2c <read_submessage_list>
 800f326:	e759      	b.n	800f1dc <wait_session_status+0x34>
 800f328:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f32a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f32e:	47a0      	blx	r4
 800f330:	2001      	movs	r0, #1
 800f332:	b01d      	add	sp, #116	; 0x74
 800f334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f338:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800f33c:	a90c      	add	r1, sp, #48	; 0x30
 800f33e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f340:	4620      	mov	r0, r4
 800f342:	f7ff fbf3 	bl	800eb2c <read_submessage_list>
 800f346:	e7bc      	b.n	800f2c2 <wait_session_status+0x11a>

0800f348 <uxr_delete_session_retries>:
 800f348:	b530      	push	{r4, r5, lr}
 800f34a:	b08f      	sub	sp, #60	; 0x3c
 800f34c:	4604      	mov	r4, r0
 800f34e:	460d      	mov	r5, r1
 800f350:	f000 fa34 	bl	800f7bc <uxr_session_header_offset>
 800f354:	2300      	movs	r3, #0
 800f356:	2210      	movs	r2, #16
 800f358:	a902      	add	r1, sp, #8
 800f35a:	9000      	str	r0, [sp, #0]
 800f35c:	a806      	add	r0, sp, #24
 800f35e:	f7fe fff9 	bl	800e354 <ucdr_init_buffer_origin_offset>
 800f362:	a906      	add	r1, sp, #24
 800f364:	4620      	mov	r0, r4
 800f366:	f000 f979 	bl	800f65c <uxr_buffer_delete_session>
 800f36a:	2200      	movs	r2, #0
 800f36c:	9b06      	ldr	r3, [sp, #24]
 800f36e:	4620      	mov	r0, r4
 800f370:	4611      	mov	r1, r2
 800f372:	f000 f9cf 	bl	800f714 <uxr_stamp_session_header>
 800f376:	a806      	add	r0, sp, #24
 800f378:	f7ff f82c 	bl	800e3d4 <ucdr_buffer_length>
 800f37c:	462b      	mov	r3, r5
 800f37e:	4602      	mov	r2, r0
 800f380:	a902      	add	r1, sp, #8
 800f382:	4620      	mov	r0, r4
 800f384:	f7ff ff10 	bl	800f1a8 <wait_session_status>
 800f388:	b118      	cbz	r0, 800f392 <uxr_delete_session_retries+0x4a>
 800f38a:	7960      	ldrb	r0, [r4, #5]
 800f38c:	fab0 f080 	clz	r0, r0
 800f390:	0940      	lsrs	r0, r0, #5
 800f392:	b00f      	add	sp, #60	; 0x3c
 800f394:	bd30      	pop	{r4, r5, pc}
 800f396:	bf00      	nop

0800f398 <uxr_create_session>:
 800f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39c:	f100 0b08 	add.w	fp, r0, #8
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	b0ab      	sub	sp, #172	; 0xac
 800f3a4:	4658      	mov	r0, fp
 800f3a6:	465e      	mov	r6, fp
 800f3a8:	f000 faa6 	bl	800f8f8 <uxr_reset_stream_storage>
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	f000 fa05 	bl	800f7bc <uxr_session_header_offset>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	221c      	movs	r2, #28
 800f3b6:	a90b      	add	r1, sp, #44	; 0x2c
 800f3b8:	9000      	str	r0, [sp, #0]
 800f3ba:	a812      	add	r0, sp, #72	; 0x48
 800f3bc:	f7fe ffca 	bl	800e354 <ucdr_init_buffer_origin_offset>
 800f3c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f3c2:	a912      	add	r1, sp, #72	; 0x48
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	8a1a      	ldrh	r2, [r3, #16]
 800f3c8:	3a04      	subs	r2, #4
 800f3ca:	b292      	uxth	r2, r2
 800f3cc:	f000 f91c 	bl	800f608 <uxr_buffer_create_session>
 800f3d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 f98a 	bl	800f6ec <uxr_stamp_create_session_header>
 800f3d8:	a812      	add	r0, sp, #72	; 0x48
 800f3da:	f7fe fffb 	bl	800e3d4 <ucdr_buffer_length>
 800f3de:	23ff      	movs	r3, #255	; 0xff
 800f3e0:	4681      	mov	r9, r0
 800f3e2:	7163      	strb	r3, [r4, #5]
 800f3e4:	230a      	movs	r3, #10
 800f3e6:	9303      	str	r3, [sp, #12]
 800f3e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f3ea:	464a      	mov	r2, r9
 800f3ec:	a90b      	add	r1, sp, #44	; 0x2c
 800f3ee:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f3f2:	47a8      	blx	r5
 800f3f4:	f000 fba0 	bl	800fb38 <uxr_millis>
 800f3f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3fc:	4605      	mov	r5, r0
 800f3fe:	e009      	b.n	800f414 <uxr_create_session+0x7c>
 800f400:	f000 fb9a 	bl	800fb38 <uxr_millis>
 800f404:	1b40      	subs	r0, r0, r5
 800f406:	7962      	ldrb	r2, [r4, #5]
 800f408:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	dd38      	ble.n	800f482 <uxr_create_session+0xea>
 800f410:	2aff      	cmp	r2, #255	; 0xff
 800f412:	d13c      	bne.n	800f48e <uxr_create_session+0xf6>
 800f414:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f416:	a907      	add	r1, sp, #28
 800f418:	6897      	ldr	r7, [r2, #8]
 800f41a:	6810      	ldr	r0, [r2, #0]
 800f41c:	aa08      	add	r2, sp, #32
 800f41e:	47b8      	blx	r7
 800f420:	2800      	cmp	r0, #0
 800f422:	d0ed      	beq.n	800f400 <uxr_create_session+0x68>
 800f424:	a81a      	add	r0, sp, #104	; 0x68
 800f426:	2700      	movs	r7, #0
 800f428:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f42c:	f7fe ffa4 	bl	800e378 <ucdr_init_buffer>
 800f430:	f10d 031a 	add.w	r3, sp, #26
 800f434:	aa06      	add	r2, sp, #24
 800f436:	a91a      	add	r1, sp, #104	; 0x68
 800f438:	4620      	mov	r0, r4
 800f43a:	f88d 7018 	strb.w	r7, [sp, #24]
 800f43e:	f000 f97d 	bl	800f73c <uxr_read_session_header>
 800f442:	2800      	cmp	r0, #0
 800f444:	d0dc      	beq.n	800f400 <uxr_create_session+0x68>
 800f446:	4639      	mov	r1, r7
 800f448:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f44c:	f000 fa1e 	bl	800f88c <uxr_stream_id_from_raw>
 800f450:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f454:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800f458:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800f45c:	2f01      	cmp	r7, #1
 800f45e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800f462:	d053      	beq.n	800f50c <uxr_create_session+0x174>
 800f464:	2f02      	cmp	r7, #2
 800f466:	d018      	beq.n	800f49a <uxr_create_session+0x102>
 800f468:	2f00      	cmp	r7, #0
 800f46a:	d1c9      	bne.n	800f400 <uxr_create_session+0x68>
 800f46c:	4639      	mov	r1, r7
 800f46e:	4638      	mov	r0, r7
 800f470:	f000 fa0c 	bl	800f88c <uxr_stream_id_from_raw>
 800f474:	a91a      	add	r1, sp, #104	; 0x68
 800f476:	4602      	mov	r2, r0
 800f478:	900a      	str	r0, [sp, #40]	; 0x28
 800f47a:	4620      	mov	r0, r4
 800f47c:	f7ff fb56 	bl	800eb2c <read_submessage_list>
 800f480:	e7be      	b.n	800f400 <uxr_create_session+0x68>
 800f482:	9b03      	ldr	r3, [sp, #12]
 800f484:	3b01      	subs	r3, #1
 800f486:	9303      	str	r3, [sp, #12]
 800f488:	d001      	beq.n	800f48e <uxr_create_session+0xf6>
 800f48a:	2aff      	cmp	r2, #255	; 0xff
 800f48c:	d0ac      	beq.n	800f3e8 <uxr_create_session+0x50>
 800f48e:	2a00      	cmp	r2, #0
 800f490:	d051      	beq.n	800f536 <uxr_create_session+0x19e>
 800f492:	2000      	movs	r0, #0
 800f494:	b02b      	add	sp, #172	; 0xac
 800f496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f49a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800f49e:	4641      	mov	r1, r8
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	9304      	str	r3, [sp, #16]
 800f4a4:	f000 fae0 	bl	800fa68 <uxr_get_input_reliable_stream>
 800f4a8:	4682      	mov	sl, r0
 800f4aa:	b348      	cbz	r0, 800f500 <uxr_create_session+0x168>
 800f4ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f4ae:	a81a      	add	r0, sp, #104	; 0x68
 800f4b0:	9205      	str	r2, [sp, #20]
 800f4b2:	f7fe ff93 	bl	800e3dc <ucdr_buffer_remaining>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	f10d 0019 	add.w	r0, sp, #25
 800f4bc:	9a05      	ldr	r2, [sp, #20]
 800f4be:	4659      	mov	r1, fp
 800f4c0:	9000      	str	r0, [sp, #0]
 800f4c2:	4650      	mov	r0, sl
 800f4c4:	f004 f874 	bl	80135b0 <uxr_receive_reliable_message>
 800f4c8:	b1d0      	cbz	r0, 800f500 <uxr_create_session+0x168>
 800f4ca:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d038      	beq.n	800f544 <uxr_create_session+0x1ac>
 800f4d2:	9f04      	ldr	r7, [sp, #16]
 800f4d4:	e00a      	b.n	800f4ec <uxr_create_session+0x154>
 800f4d6:	f04f 0302 	mov.w	r3, #2
 800f4da:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800f4de:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800f4e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4e8:	f7ff fb20 	bl	800eb2c <read_submessage_list>
 800f4ec:	a922      	add	r1, sp, #136	; 0x88
 800f4ee:	2204      	movs	r2, #4
 800f4f0:	4650      	mov	r0, sl
 800f4f2:	f004 f8df 	bl	80136b4 <uxr_next_input_reliable_buffer_available>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	a922      	add	r1, sp, #136	; 0x88
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1ea      	bne.n	800f4d6 <uxr_create_session+0x13e>
 800f500:	4642      	mov	r2, r8
 800f502:	9904      	ldr	r1, [sp, #16]
 800f504:	4620      	mov	r0, r4
 800f506:	f7ff f98d 	bl	800e824 <write_submessage_acknack.isra.0>
 800f50a:	e779      	b.n	800f400 <uxr_create_session+0x68>
 800f50c:	4641      	mov	r1, r8
 800f50e:	4630      	mov	r0, r6
 800f510:	f000 faa0 	bl	800fa54 <uxr_get_input_best_effort_stream>
 800f514:	2800      	cmp	r0, #0
 800f516:	f43f af73 	beq.w	800f400 <uxr_create_session+0x68>
 800f51a:	4659      	mov	r1, fp
 800f51c:	f003 ffbe 	bl	801349c <uxr_receive_best_effort_message>
 800f520:	2800      	cmp	r0, #0
 800f522:	f43f af6d 	beq.w	800f400 <uxr_create_session+0x68>
 800f526:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800f52a:	a91a      	add	r1, sp, #104	; 0x68
 800f52c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f52e:	4620      	mov	r0, r4
 800f530:	f7ff fafc 	bl	800eb2c <read_submessage_list>
 800f534:	e764      	b.n	800f400 <uxr_create_session+0x68>
 800f536:	4630      	mov	r0, r6
 800f538:	f000 f9de 	bl	800f8f8 <uxr_reset_stream_storage>
 800f53c:	2001      	movs	r0, #1
 800f53e:	b02b      	add	sp, #172	; 0xac
 800f540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f544:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800f548:	a91a      	add	r1, sp, #104	; 0x68
 800f54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f54c:	4620      	mov	r0, r4
 800f54e:	f7ff faed 	bl	800eb2c <read_submessage_list>
 800f552:	e7be      	b.n	800f4d2 <uxr_create_session+0x13a>

0800f554 <uxr_prepare_stream_to_write_submessage>:
 800f554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f558:	b082      	sub	sp, #8
 800f55a:	4604      	mov	r4, r0
 800f55c:	4610      	mov	r0, r2
 800f55e:	4615      	mov	r5, r2
 800f560:	461e      	mov	r6, r3
 800f562:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800f566:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800f56a:	f105 0904 	add.w	r9, r5, #4
 800f56e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800f572:	9101      	str	r1, [sp, #4]
 800f574:	f000 fada 	bl	800fb2c <uxr_submessage_padding>
 800f578:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f57c:	4481      	add	r9, r0
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d01d      	beq.n	800f5be <uxr_prepare_stream_to_write_submessage+0x6a>
 800f582:	2b02      	cmp	r3, #2
 800f584:	d116      	bne.n	800f5b4 <uxr_prepare_stream_to_write_submessage+0x60>
 800f586:	f104 0008 	add.w	r0, r4, #8
 800f58a:	4651      	mov	r1, sl
 800f58c:	f000 fa56 	bl	800fa3c <uxr_get_output_reliable_stream>
 800f590:	4604      	mov	r4, r0
 800f592:	b158      	cbz	r0, 800f5ac <uxr_prepare_stream_to_write_submessage+0x58>
 800f594:	4649      	mov	r1, r9
 800f596:	4632      	mov	r2, r6
 800f598:	f004 fa50 	bl	8013a3c <uxr_prepare_reliable_buffer_to_write>
 800f59c:	4604      	mov	r4, r0
 800f59e:	b12c      	cbz	r4, 800f5ac <uxr_prepare_stream_to_write_submessage+0x58>
 800f5a0:	4643      	mov	r3, r8
 800f5a2:	b2aa      	uxth	r2, r5
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	f000 fa80 	bl	800faac <uxr_buffer_submessage_header>
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	b002      	add	sp, #8
 800f5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5b4:	2400      	movs	r4, #0
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	b002      	add	sp, #8
 800f5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5be:	f104 0008 	add.w	r0, r4, #8
 800f5c2:	4651      	mov	r1, sl
 800f5c4:	f000 fa32 	bl	800fa2c <uxr_get_output_best_effort_stream>
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	d0ee      	beq.n	800f5ac <uxr_prepare_stream_to_write_submessage+0x58>
 800f5ce:	4649      	mov	r1, r9
 800f5d0:	4632      	mov	r2, r6
 800f5d2:	f004 f95f 	bl	8013894 <uxr_prepare_best_effort_buffer_to_write>
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	e7e1      	b.n	800f59e <uxr_prepare_stream_to_write_submessage+0x4a>
 800f5da:	bf00      	nop

0800f5dc <uxr_init_session_info>:
 800f5dc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800f5e0:	23ff      	movs	r3, #255	; 0xff
 800f5e2:	7102      	strb	r2, [r0, #4]
 800f5e4:	f880 c001 	strb.w	ip, [r0, #1]
 800f5e8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f5ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f5f0:	7001      	strb	r1, [r0, #0]
 800f5f2:	f880 c002 	strb.w	ip, [r0, #2]
 800f5f6:	7143      	strb	r3, [r0, #5]
 800f5f8:	70c2      	strb	r2, [r0, #3]
 800f5fa:	b500      	push	{lr}
 800f5fc:	f04f 0e09 	mov.w	lr, #9
 800f600:	f8a0 e006 	strh.w	lr, [r0, #6]
 800f604:	f85d fb04 	ldr.w	pc, [sp], #4

0800f608 <uxr_buffer_create_session>:
 800f608:	b530      	push	{r4, r5, lr}
 800f60a:	2300      	movs	r3, #0
 800f60c:	b089      	sub	sp, #36	; 0x24
 800f60e:	4d12      	ldr	r5, [pc, #72]	; (800f658 <uxr_buffer_create_session+0x50>)
 800f610:	460c      	mov	r4, r1
 800f612:	9307      	str	r3, [sp, #28]
 800f614:	4619      	mov	r1, r3
 800f616:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f61a:	2201      	movs	r2, #1
 800f61c:	9301      	str	r3, [sp, #4]
 800f61e:	80c2      	strh	r2, [r0, #6]
 800f620:	f88d 2004 	strb.w	r2, [sp, #4]
 800f624:	682a      	ldr	r2, [r5, #0]
 800f626:	9303      	str	r3, [sp, #12]
 800f628:	9200      	str	r2, [sp, #0]
 800f62a:	88aa      	ldrh	r2, [r5, #4]
 800f62c:	9306      	str	r3, [sp, #24]
 800f62e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f632:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f636:	9202      	str	r2, [sp, #8]
 800f638:	7802      	ldrb	r2, [r0, #0]
 800f63a:	4620      	mov	r0, r4
 800f63c:	f88d 200c 	strb.w	r2, [sp, #12]
 800f640:	2210      	movs	r2, #16
 800f642:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f646:	f000 fa31 	bl	800faac <uxr_buffer_submessage_header>
 800f64a:	4669      	mov	r1, sp
 800f64c:	4620      	mov	r0, r4
 800f64e:	f001 f983 	bl	8010958 <uxr_serialize_CREATE_CLIENT_Payload>
 800f652:	b009      	add	sp, #36	; 0x24
 800f654:	bd30      	pop	{r4, r5, pc}
 800f656:	bf00      	nop
 800f658:	08016b5c 	.word	0x08016b5c

0800f65c <uxr_buffer_delete_session>:
 800f65c:	4a0c      	ldr	r2, [pc, #48]	; (800f690 <uxr_buffer_delete_session+0x34>)
 800f65e:	2302      	movs	r3, #2
 800f660:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800f664:	b510      	push	{r4, lr}
 800f666:	460c      	mov	r4, r1
 800f668:	b082      	sub	sp, #8
 800f66a:	8911      	ldrh	r1, [r2, #8]
 800f66c:	2204      	movs	r2, #4
 800f66e:	80c3      	strh	r3, [r0, #6]
 800f670:	2300      	movs	r3, #0
 800f672:	f8ad 1006 	strh.w	r1, [sp, #6]
 800f676:	4620      	mov	r0, r4
 800f678:	2103      	movs	r1, #3
 800f67a:	f8ad c004 	strh.w	ip, [sp, #4]
 800f67e:	f000 fa15 	bl	800faac <uxr_buffer_submessage_header>
 800f682:	a901      	add	r1, sp, #4
 800f684:	4620      	mov	r0, r4
 800f686:	f001 fa0f 	bl	8010aa8 <uxr_serialize_DELETE_Payload>
 800f68a:	b002      	add	sp, #8
 800f68c:	bd10      	pop	{r4, pc}
 800f68e:	bf00      	nop
 800f690:	08016b5c 	.word	0x08016b5c

0800f694 <uxr_read_create_session_status>:
 800f694:	b510      	push	{r4, lr}
 800f696:	460b      	mov	r3, r1
 800f698:	b088      	sub	sp, #32
 800f69a:	4604      	mov	r4, r0
 800f69c:	a901      	add	r1, sp, #4
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f001 fa12 	bl	8010ac8 <uxr_deserialize_STATUS_AGENT_Payload>
 800f6a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f6a8:	7163      	strb	r3, [r4, #5]
 800f6aa:	b008      	add	sp, #32
 800f6ac:	bd10      	pop	{r4, pc}
 800f6ae:	bf00      	nop

0800f6b0 <uxr_read_delete_session_status>:
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	4608      	mov	r0, r1
 800f6b8:	a902      	add	r1, sp, #8
 800f6ba:	f001 fa35 	bl	8010b28 <uxr_deserialize_STATUS_Payload>
 800f6be:	88e3      	ldrh	r3, [r4, #6]
 800f6c0:	2b02      	cmp	r3, #2
 800f6c2:	d001      	beq.n	800f6c8 <uxr_read_delete_session_status+0x18>
 800f6c4:	b004      	add	sp, #16
 800f6c6:	bd10      	pop	{r4, pc}
 800f6c8:	f10d 000a 	add.w	r0, sp, #10
 800f6cc:	f7ff f830 	bl	800e730 <uxr_object_id_from_raw>
 800f6d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f6d4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f6d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d1f0      	bne.n	800f6c4 <uxr_read_delete_session_status+0x14>
 800f6e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f6e6:	7163      	strb	r3, [r4, #5]
 800f6e8:	e7ec      	b.n	800f6c4 <uxr_read_delete_session_status+0x14>
 800f6ea:	bf00      	nop

0800f6ec <uxr_stamp_create_session_header>:
 800f6ec:	b510      	push	{r4, lr}
 800f6ee:	2208      	movs	r2, #8
 800f6f0:	b08a      	sub	sp, #40	; 0x28
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	eb0d 0002 	add.w	r0, sp, r2
 800f6f8:	f7fe fe3e 	bl	800e378 <ucdr_init_buffer>
 800f6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f700:	2300      	movs	r3, #0
 800f702:	a802      	add	r0, sp, #8
 800f704:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800f708:	9400      	str	r4, [sp, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	f000 fbca 	bl	800fea4 <uxr_serialize_message_header>
 800f710:	b00a      	add	sp, #40	; 0x28
 800f712:	bd10      	pop	{r4, pc}

0800f714 <uxr_stamp_session_header>:
 800f714:	b530      	push	{r4, r5, lr}
 800f716:	b08d      	sub	sp, #52	; 0x34
 800f718:	4604      	mov	r4, r0
 800f71a:	460d      	mov	r5, r1
 800f71c:	4619      	mov	r1, r3
 800f71e:	a804      	add	r0, sp, #16
 800f720:	9203      	str	r2, [sp, #12]
 800f722:	2208      	movs	r2, #8
 800f724:	f7fe fe28 	bl	800e378 <ucdr_init_buffer>
 800f728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f72c:	9b03      	ldr	r3, [sp, #12]
 800f72e:	462a      	mov	r2, r5
 800f730:	a804      	add	r0, sp, #16
 800f732:	9400      	str	r4, [sp, #0]
 800f734:	f000 fbb6 	bl	800fea4 <uxr_serialize_message_header>
 800f738:	b00d      	add	sp, #52	; 0x34
 800f73a:	bd30      	pop	{r4, r5, pc}

0800f73c <uxr_read_session_header>:
 800f73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f740:	4607      	mov	r7, r0
 800f742:	b084      	sub	sp, #16
 800f744:	4608      	mov	r0, r1
 800f746:	460c      	mov	r4, r1
 800f748:	4615      	mov	r5, r2
 800f74a:	461e      	mov	r6, r3
 800f74c:	f7fe fe46 	bl	800e3dc <ucdr_buffer_remaining>
 800f750:	2808      	cmp	r0, #8
 800f752:	d803      	bhi.n	800f75c <uxr_read_session_header+0x20>
 800f754:	2000      	movs	r0, #0
 800f756:	b004      	add	sp, #16
 800f758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f75c:	f10d 080c 	add.w	r8, sp, #12
 800f760:	4633      	mov	r3, r6
 800f762:	462a      	mov	r2, r5
 800f764:	4620      	mov	r0, r4
 800f766:	f10d 010b 	add.w	r1, sp, #11
 800f76a:	f8cd 8000 	str.w	r8, [sp]
 800f76e:	f000 fbb7 	bl	800fee0 <uxr_deserialize_message_header>
 800f772:	783a      	ldrb	r2, [r7, #0]
 800f774:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f778:	4293      	cmp	r3, r2
 800f77a:	d1eb      	bne.n	800f754 <uxr_read_session_header+0x18>
 800f77c:	061b      	lsls	r3, r3, #24
 800f77e:	d41b      	bmi.n	800f7b8 <uxr_read_session_header+0x7c>
 800f780:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f784:	787b      	ldrb	r3, [r7, #1]
 800f786:	429a      	cmp	r2, r3
 800f788:	d003      	beq.n	800f792 <uxr_read_session_header+0x56>
 800f78a:	2001      	movs	r0, #1
 800f78c:	f080 0001 	eor.w	r0, r0, #1
 800f790:	e7e1      	b.n	800f756 <uxr_read_session_header+0x1a>
 800f792:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f796:	1cb8      	adds	r0, r7, #2
 800f798:	78bb      	ldrb	r3, [r7, #2]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d1f5      	bne.n	800f78a <uxr_read_session_header+0x4e>
 800f79e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f7a2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d1ef      	bne.n	800f78a <uxr_read_session_header+0x4e>
 800f7aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f7ae:	7843      	ldrb	r3, [r0, #1]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d1ea      	bne.n	800f78a <uxr_read_session_header+0x4e>
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	e7e9      	b.n	800f78c <uxr_read_session_header+0x50>
 800f7b8:	2001      	movs	r0, #1
 800f7ba:	e7cc      	b.n	800f756 <uxr_read_session_header+0x1a>

0800f7bc <uxr_session_header_offset>:
 800f7bc:	f990 3000 	ldrsb.w	r3, [r0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	bfac      	ite	ge
 800f7c4:	2008      	movge	r0, #8
 800f7c6:	2004      	movlt	r0, #4
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop

0800f7cc <uxr_init_base_object_request>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800f7d4:	9101      	str	r1, [sp, #4]
 800f7d6:	88c3      	ldrh	r3, [r0, #6]
 800f7d8:	f1a3 010a 	sub.w	r1, r3, #10
 800f7dc:	b289      	uxth	r1, r1
 800f7de:	42a1      	cmp	r1, r4
 800f7e0:	d80f      	bhi.n	800f802 <uxr_init_base_object_request+0x36>
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	b29c      	uxth	r4, r3
 800f7e6:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	80c4      	strh	r4, [r0, #6]
 800f7ee:	1c91      	adds	r1, r2, #2
 800f7f0:	9801      	ldr	r0, [sp, #4]
 800f7f2:	f882 c000 	strb.w	ip, [r2]
 800f7f6:	7053      	strb	r3, [r2, #1]
 800f7f8:	f7fe ffae 	bl	800e758 <uxr_object_id_to_raw>
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	b002      	add	sp, #8
 800f800:	bd10      	pop	{r4, pc}
 800f802:	230a      	movs	r3, #10
 800f804:	f04f 0c00 	mov.w	ip, #0
 800f808:	461c      	mov	r4, r3
 800f80a:	e7ef      	b.n	800f7ec <uxr_init_base_object_request+0x20>

0800f80c <uxr_parse_base_object_request>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	4604      	mov	r4, r0
 800f810:	3002      	adds	r0, #2
 800f812:	460d      	mov	r5, r1
 800f814:	4616      	mov	r6, r2
 800f816:	f7fe ff8b 	bl	800e730 <uxr_object_id_from_raw>
 800f81a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f81e:	8028      	strh	r0, [r5, #0]
 800f820:	806b      	strh	r3, [r5, #2]
 800f822:	7822      	ldrb	r2, [r4, #0]
 800f824:	7863      	ldrb	r3, [r4, #1]
 800f826:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f82a:	8033      	strh	r3, [r6, #0]
 800f82c:	bd70      	pop	{r4, r5, r6, pc}
 800f82e:	bf00      	nop

0800f830 <uxr_stream_id>:
 800f830:	2901      	cmp	r1, #1
 800f832:	4684      	mov	ip, r0
 800f834:	b500      	push	{lr}
 800f836:	b083      	sub	sp, #12
 800f838:	d01f      	beq.n	800f87a <uxr_stream_id+0x4a>
 800f83a:	2902      	cmp	r1, #2
 800f83c:	f04f 0e00 	mov.w	lr, #0
 800f840:	d020      	beq.n	800f884 <uxr_stream_id+0x54>
 800f842:	2300      	movs	r3, #0
 800f844:	2000      	movs	r0, #0
 800f846:	f36e 0307 	bfi	r3, lr, #0, #8
 800f84a:	f36c 230f 	bfi	r3, ip, #8, #8
 800f84e:	f361 4317 	bfi	r3, r1, #16, #8
 800f852:	f362 631f 	bfi	r3, r2, #24, #8
 800f856:	fa5f fc83 	uxtb.w	ip, r3
 800f85a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f85e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f862:	0e1b      	lsrs	r3, r3, #24
 800f864:	f36c 0007 	bfi	r0, ip, #0, #8
 800f868:	f361 200f 	bfi	r0, r1, #8, #8
 800f86c:	f362 4017 	bfi	r0, r2, #16, #8
 800f870:	f363 601f 	bfi	r0, r3, #24, #8
 800f874:	b003      	add	sp, #12
 800f876:	f85d fb04 	ldr.w	pc, [sp], #4
 800f87a:	f100 0e01 	add.w	lr, r0, #1
 800f87e:	fa5f fe8e 	uxtb.w	lr, lr
 800f882:	e7de      	b.n	800f842 <uxr_stream_id+0x12>
 800f884:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 800f888:	e7db      	b.n	800f842 <uxr_stream_id+0x12>
 800f88a:	bf00      	nop

0800f88c <uxr_stream_id_from_raw>:
 800f88c:	b082      	sub	sp, #8
 800f88e:	b130      	cbz	r0, 800f89e <uxr_stream_id_from_raw+0x12>
 800f890:	0603      	lsls	r3, r0, #24
 800f892:	d421      	bmi.n	800f8d8 <uxr_stream_id_from_raw+0x4c>
 800f894:	1e42      	subs	r2, r0, #1
 800f896:	f04f 0c01 	mov.w	ip, #1
 800f89a:	b2d2      	uxtb	r2, r2
 800f89c:	e001      	b.n	800f8a2 <uxr_stream_id_from_raw+0x16>
 800f89e:	4684      	mov	ip, r0
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f360 0307 	bfi	r3, r0, #0, #8
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	f362 230f 	bfi	r3, r2, #8, #8
 800f8ae:	f36c 4317 	bfi	r3, ip, #16, #8
 800f8b2:	f361 631f 	bfi	r3, r1, #24, #8
 800f8b6:	fa5f fc83 	uxtb.w	ip, r3
 800f8ba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f8be:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f8c2:	0e1b      	lsrs	r3, r3, #24
 800f8c4:	f36c 0007 	bfi	r0, ip, #0, #8
 800f8c8:	f361 200f 	bfi	r0, r1, #8, #8
 800f8cc:	f362 4017 	bfi	r0, r2, #16, #8
 800f8d0:	f363 601f 	bfi	r0, r3, #24, #8
 800f8d4:	b002      	add	sp, #8
 800f8d6:	4770      	bx	lr
 800f8d8:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800f8dc:	f04f 0c02 	mov.w	ip, #2
 800f8e0:	e7df      	b.n	800f8a2 <uxr_stream_id_from_raw+0x16>
 800f8e2:	bf00      	nop

0800f8e4 <uxr_init_stream_storage>:
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	7403      	strb	r3, [r0, #16]
 800f8e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f8ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800f8f0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop

0800f8f8 <uxr_reset_stream_storage>:
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	7c03      	ldrb	r3, [r0, #16]
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	b14b      	cbz	r3, 800f914 <uxr_reset_stream_storage+0x1c>
 800f900:	4606      	mov	r6, r0
 800f902:	2500      	movs	r5, #0
 800f904:	4630      	mov	r0, r6
 800f906:	3501      	adds	r5, #1
 800f908:	f003 ffbe 	bl	8013888 <uxr_reset_output_best_effort_stream>
 800f90c:	7c23      	ldrb	r3, [r4, #16]
 800f90e:	3610      	adds	r6, #16
 800f910:	42ab      	cmp	r3, r5
 800f912:	d8f7      	bhi.n	800f904 <uxr_reset_stream_storage+0xc>
 800f914:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f918:	b15b      	cbz	r3, 800f932 <uxr_reset_stream_storage+0x3a>
 800f91a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f91e:	2500      	movs	r5, #0
 800f920:	4630      	mov	r0, r6
 800f922:	3501      	adds	r5, #1
 800f924:	f003 fdb6 	bl	8013494 <uxr_reset_input_best_effort_stream>
 800f928:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f92c:	3602      	adds	r6, #2
 800f92e:	42ab      	cmp	r3, r5
 800f930:	d8f6      	bhi.n	800f920 <uxr_reset_stream_storage+0x28>
 800f932:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f936:	b15b      	cbz	r3, 800f950 <uxr_reset_stream_storage+0x58>
 800f938:	f104 0618 	add.w	r6, r4, #24
 800f93c:	2500      	movs	r5, #0
 800f93e:	4630      	mov	r0, r6
 800f940:	3501      	adds	r5, #1
 800f942:	f004 f84d 	bl	80139e0 <uxr_reset_output_reliable_stream>
 800f946:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f94a:	3628      	adds	r6, #40	; 0x28
 800f94c:	42ab      	cmp	r3, r5
 800f94e:	d8f6      	bhi.n	800f93e <uxr_reset_stream_storage+0x46>
 800f950:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f954:	b15b      	cbz	r3, 800f96e <uxr_reset_stream_storage+0x76>
 800f956:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800f95a:	2500      	movs	r5, #0
 800f95c:	4630      	mov	r0, r6
 800f95e:	3501      	adds	r5, #1
 800f960:	f003 fe04 	bl	801356c <uxr_reset_input_reliable_stream>
 800f964:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f968:	3618      	adds	r6, #24
 800f96a:	42ab      	cmp	r3, r5
 800f96c:	d8f6      	bhi.n	800f95c <uxr_reset_stream_storage+0x64>
 800f96e:	bd70      	pop	{r4, r5, r6, pc}

0800f970 <uxr_add_output_best_effort_buffer>:
 800f970:	b510      	push	{r4, lr}
 800f972:	7c04      	ldrb	r4, [r0, #16]
 800f974:	b082      	sub	sp, #8
 800f976:	f104 0c01 	add.w	ip, r4, #1
 800f97a:	f880 c010 	strb.w	ip, [r0, #16]
 800f97e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f982:	f003 ff77 	bl	8013874 <uxr_init_output_best_effort_stream>
 800f986:	2201      	movs	r2, #1
 800f988:	4620      	mov	r0, r4
 800f98a:	4611      	mov	r1, r2
 800f98c:	b002      	add	sp, #8
 800f98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f992:	f7ff bf4d 	b.w	800f830 <uxr_stream_id>
 800f996:	bf00      	nop

0800f998 <uxr_add_output_reliable_buffer>:
 800f998:	b510      	push	{r4, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	4684      	mov	ip, r0
 800f99e:	2028      	movs	r0, #40	; 0x28
 800f9a0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800f9a4:	9400      	str	r4, [sp, #0]
 800f9a6:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800f9aa:	fb00 c004 	mla	r0, r0, r4, ip
 800f9ae:	f104 0e01 	add.w	lr, r4, #1
 800f9b2:	3018      	adds	r0, #24
 800f9b4:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800f9b8:	f003 ffdc 	bl	8013974 <uxr_init_output_reliable_stream>
 800f9bc:	2201      	movs	r2, #1
 800f9be:	2102      	movs	r1, #2
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	b004      	add	sp, #16
 800f9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9c8:	f7ff bf32 	b.w	800f830 <uxr_stream_id>

0800f9cc <uxr_add_input_best_effort_buffer>:
 800f9cc:	b510      	push	{r4, lr}
 800f9ce:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	1c62      	adds	r2, r4, #1
 800f9d6:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800f9da:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800f9de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f9e2:	f003 fd53 	bl	801348c <uxr_init_input_best_effort_stream>
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	2101      	movs	r1, #1
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	b002      	add	sp, #8
 800f9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9f2:	f7ff bf1d 	b.w	800f830 <uxr_stream_id>
 800f9f6:	bf00      	nop

0800f9f8 <uxr_add_input_reliable_buffer>:
 800f9f8:	b510      	push	{r4, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	4684      	mov	ip, r0
 800f9fe:	2018      	movs	r0, #24
 800fa00:	9c06      	ldr	r4, [sp, #24]
 800fa02:	9400      	str	r4, [sp, #0]
 800fa04:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800fa08:	fb00 c004 	mla	r0, r0, r4, ip
 800fa0c:	f104 0e01 	add.w	lr, r4, #1
 800fa10:	3048      	adds	r0, #72	; 0x48
 800fa12:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800fa16:	f003 fd83 	bl	8013520 <uxr_init_input_reliable_stream>
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	2102      	movs	r1, #2
 800fa1e:	4620      	mov	r0, r4
 800fa20:	b004      	add	sp, #16
 800fa22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa26:	f7ff bf03 	b.w	800f830 <uxr_stream_id>
 800fa2a:	bf00      	nop

0800fa2c <uxr_get_output_best_effort_stream>:
 800fa2c:	7c03      	ldrb	r3, [r0, #16]
 800fa2e:	428b      	cmp	r3, r1
 800fa30:	bf8c      	ite	hi
 800fa32:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800fa36:	2000      	movls	r0, #0
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop

0800fa3c <uxr_get_output_reliable_stream>:
 800fa3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800fa40:	428b      	cmp	r3, r1
 800fa42:	d904      	bls.n	800fa4e <uxr_get_output_reliable_stream+0x12>
 800fa44:	2328      	movs	r3, #40	; 0x28
 800fa46:	fb03 0001 	mla	r0, r3, r1, r0
 800fa4a:	3018      	adds	r0, #24
 800fa4c:	4770      	bx	lr
 800fa4e:	2000      	movs	r0, #0
 800fa50:	4770      	bx	lr
 800fa52:	bf00      	nop

0800fa54 <uxr_get_input_best_effort_stream>:
 800fa54:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800fa58:	428b      	cmp	r3, r1
 800fa5a:	d903      	bls.n	800fa64 <uxr_get_input_best_effort_stream+0x10>
 800fa5c:	3121      	adds	r1, #33	; 0x21
 800fa5e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800fa62:	4770      	bx	lr
 800fa64:	2000      	movs	r0, #0
 800fa66:	4770      	bx	lr

0800fa68 <uxr_get_input_reliable_stream>:
 800fa68:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800fa6c:	428b      	cmp	r3, r1
 800fa6e:	d904      	bls.n	800fa7a <uxr_get_input_reliable_stream+0x12>
 800fa70:	2318      	movs	r3, #24
 800fa72:	fb03 0001 	mla	r0, r3, r1, r0
 800fa76:	3048      	adds	r0, #72	; 0x48
 800fa78:	4770      	bx	lr
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop

0800fa80 <uxr_output_streams_confirmed>:
 800fa80:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800fa84:	b183      	cbz	r3, 800faa8 <uxr_output_streams_confirmed+0x28>
 800fa86:	b570      	push	{r4, r5, r6, lr}
 800fa88:	4606      	mov	r6, r0
 800fa8a:	f100 0518 	add.w	r5, r0, #24
 800fa8e:	2400      	movs	r4, #0
 800fa90:	e000      	b.n	800fa94 <uxr_output_streams_confirmed+0x14>
 800fa92:	b140      	cbz	r0, 800faa6 <uxr_output_streams_confirmed+0x26>
 800fa94:	4628      	mov	r0, r5
 800fa96:	3401      	adds	r4, #1
 800fa98:	f004 fa16 	bl	8013ec8 <uxr_is_output_up_to_date>
 800fa9c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800faa0:	3528      	adds	r5, #40	; 0x28
 800faa2:	42a3      	cmp	r3, r4
 800faa4:	d8f5      	bhi.n	800fa92 <uxr_output_streams_confirmed+0x12>
 800faa6:	bd70      	pop	{r4, r5, r6, pc}
 800faa8:	2001      	movs	r0, #1
 800faaa:	4770      	bx	lr

0800faac <uxr_buffer_submessage_header>:
 800faac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faae:	460e      	mov	r6, r1
 800fab0:	2104      	movs	r1, #4
 800fab2:	4604      	mov	r4, r0
 800fab4:	4615      	mov	r5, r2
 800fab6:	461f      	mov	r7, r3
 800fab8:	f7fe fc7a 	bl	800e3b0 <ucdr_align_to>
 800fabc:	2301      	movs	r3, #1
 800fabe:	4631      	mov	r1, r6
 800fac0:	4620      	mov	r0, r4
 800fac2:	ea47 0203 	orr.w	r2, r7, r3
 800fac6:	7523      	strb	r3, [r4, #20]
 800fac8:	462b      	mov	r3, r5
 800faca:	f000 fa29 	bl	800ff20 <uxr_serialize_submessage_header>
 800face:	4620      	mov	r0, r4
 800fad0:	f7fe fc84 	bl	800e3dc <ucdr_buffer_remaining>
 800fad4:	42a8      	cmp	r0, r5
 800fad6:	bf34      	ite	cc
 800fad8:	2000      	movcc	r0, #0
 800fada:	2001      	movcs	r0, #1
 800fadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fade:	bf00      	nop

0800fae0 <uxr_read_submessage_header>:
 800fae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae4:	4604      	mov	r4, r0
 800fae6:	460d      	mov	r5, r1
 800fae8:	2104      	movs	r1, #4
 800faea:	4616      	mov	r6, r2
 800faec:	4698      	mov	r8, r3
 800faee:	f7fe fc5f 	bl	800e3b0 <ucdr_align_to>
 800faf2:	4620      	mov	r0, r4
 800faf4:	f7fe fc72 	bl	800e3dc <ucdr_buffer_remaining>
 800faf8:	2803      	cmp	r0, #3
 800fafa:	bf8c      	ite	hi
 800fafc:	2701      	movhi	r7, #1
 800fafe:	2700      	movls	r7, #0
 800fb00:	d802      	bhi.n	800fb08 <uxr_read_submessage_header+0x28>
 800fb02:	4638      	mov	r0, r7
 800fb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb08:	4633      	mov	r3, r6
 800fb0a:	4642      	mov	r2, r8
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	4629      	mov	r1, r5
 800fb10:	f000 fa1a 	bl	800ff48 <uxr_deserialize_submessage_header>
 800fb14:	f898 3000 	ldrb.w	r3, [r8]
 800fb18:	4638      	mov	r0, r7
 800fb1a:	f003 0201 	and.w	r2, r3, #1
 800fb1e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fb22:	f888 3000 	strb.w	r3, [r8]
 800fb26:	7522      	strb	r2, [r4, #20]
 800fb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb2c <uxr_submessage_padding>:
 800fb2c:	f010 0003 	ands.w	r0, r0, #3
 800fb30:	bf18      	it	ne
 800fb32:	f1c0 0004 	rsbne	r0, r0, #4
 800fb36:	4770      	bx	lr

0800fb38 <uxr_millis>:
 800fb38:	b510      	push	{r4, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	2001      	movs	r0, #1
 800fb3e:	4669      	mov	r1, sp
 800fb40:	f7f1 fd0a 	bl	8001558 <clock_gettime>
 800fb44:	4908      	ldr	r1, [pc, #32]	; (800fb68 <uxr_millis+0x30>)
 800fb46:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800fb4a:	fba0 0301 	umull	r0, r3, r0, r1
 800fb4e:	1900      	adds	r0, r0, r4
 800fb50:	fb01 3102 	mla	r1, r1, r2, r3
 800fb54:	4a05      	ldr	r2, [pc, #20]	; (800fb6c <uxr_millis+0x34>)
 800fb56:	f04f 0300 	mov.w	r3, #0
 800fb5a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800fb5e:	f7f0 fc2f 	bl	80003c0 <__aeabi_ldivmod>
 800fb62:	b004      	add	sp, #16
 800fb64:	bd10      	pop	{r4, pc}
 800fb66:	bf00      	nop
 800fb68:	3b9aca00 	.word	0x3b9aca00
 800fb6c:	000f4240 	.word	0x000f4240

0800fb70 <uxr_nanos>:
 800fb70:	b510      	push	{r4, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	2001      	movs	r0, #1
 800fb76:	4669      	mov	r1, sp
 800fb78:	f7f1 fcee 	bl	8001558 <clock_gettime>
 800fb7c:	4a06      	ldr	r2, [pc, #24]	; (800fb98 <uxr_nanos+0x28>)
 800fb7e:	9800      	ldr	r0, [sp, #0]
 800fb80:	9902      	ldr	r1, [sp, #8]
 800fb82:	fba0 0302 	umull	r0, r3, r0, r2
 800fb86:	9c01      	ldr	r4, [sp, #4]
 800fb88:	1840      	adds	r0, r0, r1
 800fb8a:	fb02 3304 	mla	r3, r2, r4, r3
 800fb8e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800fb92:	b004      	add	sp, #16
 800fb94:	bd10      	pop	{r4, pc}
 800fb96:	bf00      	nop
 800fb98:	3b9aca00 	.word	0x3b9aca00

0800fb9c <on_full_output_buffer_fragmented>:
 800fb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fba0:	460c      	mov	r4, r1
 800fba2:	b08a      	sub	sp, #40	; 0x28
 800fba4:	4606      	mov	r6, r0
 800fba6:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800fbaa:	f104 0008 	add.w	r0, r4, #8
 800fbae:	f7ff ff45 	bl	800fa3c <uxr_get_output_reliable_stream>
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	f004 f992 	bl	8013edc <get_available_free_slots>
 800fbb8:	b968      	cbnz	r0, 800fbd6 <on_full_output_buffer_fragmented+0x3a>
 800fbba:	4620      	mov	r0, r4
 800fbbc:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800fbc0:	4798      	blx	r3
 800fbc2:	b918      	cbnz	r0, 800fbcc <on_full_output_buffer_fragmented+0x30>
 800fbc4:	2001      	movs	r0, #1
 800fbc6:	b00a      	add	sp, #40	; 0x28
 800fbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f004 f985 	bl	8013edc <get_available_free_slots>
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	d0f6      	beq.n	800fbc4 <on_full_output_buffer_fragmented+0x28>
 800fbd6:	8929      	ldrh	r1, [r5, #8]
 800fbd8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800fbdc:	89eb      	ldrh	r3, [r5, #14]
 800fbde:	7b28      	ldrb	r0, [r5, #12]
 800fbe0:	686f      	ldr	r7, [r5, #4]
 800fbe2:	1a12      	subs	r2, r2, r0
 800fbe4:	fbb3 f0f1 	udiv	r0, r3, r1
 800fbe8:	fbb7 f7f1 	udiv	r7, r7, r1
 800fbec:	fb01 3110 	mls	r1, r1, r0, r3
 800fbf0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800fbf4:	b289      	uxth	r1, r1
 800fbf6:	fb07 f101 	mul.w	r1, r7, r1
 800fbfa:	3f04      	subs	r7, #4
 800fbfc:	443a      	add	r2, r7
 800fbfe:	3104      	adds	r1, #4
 800fc00:	fa1f f882 	uxth.w	r8, r2
 800fc04:	463a      	mov	r2, r7
 800fc06:	eba3 0308 	sub.w	r3, r3, r8
 800fc0a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800fc0e:	682b      	ldr	r3, [r5, #0]
 800fc10:	4419      	add	r1, r3
 800fc12:	2300      	movs	r3, #0
 800fc14:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800fc18:	9000      	str	r0, [sp, #0]
 800fc1a:	a802      	add	r0, sp, #8
 800fc1c:	f7fe fb9a 	bl	800e354 <ucdr_init_buffer_origin_offset>
 800fc20:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800fc24:	f102 0308 	add.w	r3, r2, #8
 800fc28:	42bb      	cmp	r3, r7
 800fc2a:	d927      	bls.n	800fc7c <on_full_output_buffer_fragmented+0xe0>
 800fc2c:	4642      	mov	r2, r8
 800fc2e:	2300      	movs	r3, #0
 800fc30:	210d      	movs	r1, #13
 800fc32:	a802      	add	r0, sp, #8
 800fc34:	f7ff ff3a 	bl	800faac <uxr_buffer_submessage_header>
 800fc38:	8929      	ldrh	r1, [r5, #8]
 800fc3a:	89eb      	ldrh	r3, [r5, #14]
 800fc3c:	686a      	ldr	r2, [r5, #4]
 800fc3e:	fbb3 f0f1 	udiv	r0, r3, r1
 800fc42:	fbb2 f2f1 	udiv	r2, r2, r1
 800fc46:	fb01 3310 	mls	r3, r1, r0, r3
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	fb02 f303 	mul.w	r3, r2, r3
 800fc50:	682a      	ldr	r2, [r5, #0]
 800fc52:	50d7      	str	r7, [r2, r3]
 800fc54:	2101      	movs	r1, #1
 800fc56:	89e8      	ldrh	r0, [r5, #14]
 800fc58:	f004 fa58 	bl	801410c <uxr_seq_num_add>
 800fc5c:	9904      	ldr	r1, [sp, #16]
 800fc5e:	9a03      	ldr	r2, [sp, #12]
 800fc60:	81e8      	strh	r0, [r5, #14]
 800fc62:	4630      	mov	r0, r6
 800fc64:	1a52      	subs	r2, r2, r1
 800fc66:	f7fe fb87 	bl	800e378 <ucdr_init_buffer>
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	4622      	mov	r2, r4
 800fc6e:	490f      	ldr	r1, [pc, #60]	; (800fcac <on_full_output_buffer_fragmented+0x110>)
 800fc70:	f7fe fb56 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 800fc74:	2000      	movs	r0, #0
 800fc76:	b00a      	add	sp, #40	; 0x28
 800fc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc7c:	b292      	uxth	r2, r2
 800fc7e:	2302      	movs	r3, #2
 800fc80:	210d      	movs	r1, #13
 800fc82:	a802      	add	r0, sp, #8
 800fc84:	f7ff ff12 	bl	800faac <uxr_buffer_submessage_header>
 800fc88:	8928      	ldrh	r0, [r5, #8]
 800fc8a:	89eb      	ldrh	r3, [r5, #14]
 800fc8c:	6869      	ldr	r1, [r5, #4]
 800fc8e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800fc92:	fbb3 f7f0 	udiv	r7, r3, r0
 800fc96:	fbb1 f1f0 	udiv	r1, r1, r0
 800fc9a:	fb00 3317 	mls	r3, r0, r7, r3
 800fc9e:	3208      	adds	r2, #8
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	fb01 f303 	mul.w	r3, r1, r3
 800fca6:	6829      	ldr	r1, [r5, #0]
 800fca8:	50ca      	str	r2, [r1, r3]
 800fcaa:	e7d3      	b.n	800fc54 <on_full_output_buffer_fragmented+0xb8>
 800fcac:	0800fb9d 	.word	0x0800fb9d

0800fcb0 <uxr_prepare_output_stream>:
 800fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcb2:	b087      	sub	sp, #28
 800fcb4:	2707      	movs	r7, #7
 800fcb6:	2500      	movs	r5, #0
 800fcb8:	461c      	mov	r4, r3
 800fcba:	4606      	mov	r6, r0
 800fcbc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fcc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcc2:	e9cd 7500 	strd	r7, r5, [sp]
 800fcc6:	3204      	adds	r2, #4
 800fcc8:	f7ff fc44 	bl	800f554 <uxr_prepare_stream_to_write_submessage>
 800fccc:	f080 0201 	eor.w	r2, r0, #1
 800fcd0:	b2d2      	uxtb	r2, r2
 800fcd2:	75a2      	strb	r2, [r4, #22]
 800fcd4:	b112      	cbz	r2, 800fcdc <uxr_prepare_output_stream+0x2c>
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	b007      	add	sp, #28
 800fcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcdc:	aa05      	add	r2, sp, #20
 800fcde:	9902      	ldr	r1, [sp, #8]
 800fce0:	4630      	mov	r0, r6
 800fce2:	f7ff fd73 	bl	800f7cc <uxr_init_base_object_request>
 800fce6:	a905      	add	r1, sp, #20
 800fce8:	4605      	mov	r5, r0
 800fcea:	4620      	mov	r0, r4
 800fcec:	f000 ff9c 	bl	8010c28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fcf0:	69a6      	ldr	r6, [r4, #24]
 800fcf2:	69e7      	ldr	r7, [r4, #28]
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800fcfa:	1a52      	subs	r2, r2, r1
 800fcfc:	f7fe fb3c 	bl	800e378 <ucdr_init_buffer>
 800fd00:	4620      	mov	r0, r4
 800fd02:	463a      	mov	r2, r7
 800fd04:	4631      	mov	r1, r6
 800fd06:	f7fe fb0b 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	b007      	add	sp, #28
 800fd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd10 <uxr_prepare_output_stream_fragmented>:
 800fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd14:	b091      	sub	sp, #68	; 0x44
 800fd16:	4605      	mov	r5, r0
 800fd18:	3008      	adds	r0, #8
 800fd1a:	461e      	mov	r6, r3
 800fd1c:	9105      	str	r1, [sp, #20]
 800fd1e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800fd22:	9204      	str	r2, [sp, #16]
 800fd24:	f7ff fe8a 	bl	800fa3c <uxr_get_output_reliable_stream>
 800fd28:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	f000 8093 	beq.w	800fe58 <uxr_prepare_output_stream_fragmented+0x148>
 800fd32:	4604      	mov	r4, r0
 800fd34:	2800      	cmp	r0, #0
 800fd36:	f000 808f 	beq.w	800fe58 <uxr_prepare_output_stream_fragmented+0x148>
 800fd3a:	f004 f8cf 	bl	8013edc <get_available_free_slots>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f000 8085 	beq.w	800fe4e <uxr_prepare_output_stream_fragmented+0x13e>
 800fd44:	8923      	ldrh	r3, [r4, #8]
 800fd46:	89e7      	ldrh	r7, [r4, #14]
 800fd48:	6862      	ldr	r2, [r4, #4]
 800fd4a:	fbb7 f9f3 	udiv	r9, r7, r3
 800fd4e:	fbb2 f2f3 	udiv	r2, r2, r3
 800fd52:	fb03 7919 	mls	r9, r3, r9, r7
 800fd56:	6823      	ldr	r3, [r4, #0]
 800fd58:	f1a2 0b04 	sub.w	fp, r2, #4
 800fd5c:	9203      	str	r2, [sp, #12]
 800fd5e:	fa1f f989 	uxth.w	r9, r9
 800fd62:	fb02 f909 	mul.w	r9, r2, r9
 800fd66:	f109 0904 	add.w	r9, r9, #4
 800fd6a:	4499      	add	r9, r3
 800fd6c:	7b23      	ldrb	r3, [r4, #12]
 800fd6e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800fd72:	4543      	cmp	r3, r8
 800fd74:	d37c      	bcc.n	800fe70 <uxr_prepare_output_stream_fragmented+0x160>
 800fd76:	f1ab 0a04 	sub.w	sl, fp, #4
 800fd7a:	465a      	mov	r2, fp
 800fd7c:	4649      	mov	r1, r9
 800fd7e:	a808      	add	r0, sp, #32
 800fd80:	ebaa 0a03 	sub.w	sl, sl, r3
 800fd84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fd86:	f8cd 8000 	str.w	r8, [sp]
 800fd8a:	3308      	adds	r3, #8
 800fd8c:	fa1f fa8a 	uxth.w	sl, sl
 800fd90:	9302      	str	r3, [sp, #8]
 800fd92:	2300      	movs	r3, #0
 800fd94:	f7fe fade 	bl	800e354 <ucdr_init_buffer_origin_offset>
 800fd98:	9b02      	ldr	r3, [sp, #8]
 800fd9a:	4652      	mov	r2, sl
 800fd9c:	210d      	movs	r1, #13
 800fd9e:	455b      	cmp	r3, fp
 800fda0:	bf34      	ite	cc
 800fda2:	2302      	movcc	r3, #2
 800fda4:	2300      	movcs	r3, #0
 800fda6:	a808      	add	r0, sp, #32
 800fda8:	f7ff fe80 	bl	800faac <uxr_buffer_submessage_header>
 800fdac:	8921      	ldrh	r1, [r4, #8]
 800fdae:	6863      	ldr	r3, [r4, #4]
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	fbb7 f2f1 	udiv	r2, r7, r1
 800fdb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800fdba:	fb01 7212 	mls	r2, r1, r2, r7
 800fdbe:	2101      	movs	r1, #1
 800fdc0:	b292      	uxth	r2, r2
 800fdc2:	fb02 f303 	mul.w	r3, r2, r3
 800fdc6:	6822      	ldr	r2, [r4, #0]
 800fdc8:	f842 b003 	str.w	fp, [r2, r3]
 800fdcc:	f004 f99e 	bl	801410c <uxr_seq_num_add>
 800fdd0:	9b03      	ldr	r3, [sp, #12]
 800fdd2:	f108 0104 	add.w	r1, r8, #4
 800fdd6:	4607      	mov	r7, r0
 800fdd8:	f1a3 0208 	sub.w	r2, r3, #8
 800fddc:	4630      	mov	r0, r6
 800fdde:	4449      	add	r1, r9
 800fde0:	eba2 0208 	sub.w	r2, r2, r8
 800fde4:	f7fe fac8 	bl	800e378 <ucdr_init_buffer>
 800fde8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fdea:	2107      	movs	r1, #7
 800fdec:	81e7      	strh	r7, [r4, #14]
 800fdee:	1d1a      	adds	r2, r3, #4
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800fdf8:	bf28      	it	cs
 800fdfa:	461a      	movcs	r2, r3
 800fdfc:	b292      	uxth	r2, r2
 800fdfe:	f7ff fe55 	bl	800faac <uxr_buffer_submessage_header>
 800fe02:	aa07      	add	r2, sp, #28
 800fe04:	9904      	ldr	r1, [sp, #16]
 800fe06:	4628      	mov	r0, r5
 800fe08:	f7ff fce0 	bl	800f7cc <uxr_init_base_object_request>
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	b320      	cbz	r0, 800fe5a <uxr_prepare_output_stream_fragmented+0x14a>
 800fe10:	a907      	add	r1, sp, #28
 800fe12:	4630      	mov	r0, r6
 800fe14:	f000 ff08 	bl	8010c28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fe18:	4630      	mov	r0, r6
 800fe1a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800fe1e:	1a52      	subs	r2, r2, r1
 800fe20:	f7fe faaa 	bl	800e378 <ucdr_init_buffer>
 800fe24:	9b05      	ldr	r3, [sp, #20]
 800fe26:	9a02      	ldr	r2, [sp, #8]
 800fe28:	4630      	mov	r0, r6
 800fe2a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800fe2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe30:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800fe34:	462a      	mov	r2, r5
 800fe36:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800fe3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fe3c:	4918      	ldr	r1, [pc, #96]	; (800fea0 <uxr_prepare_output_stream_fragmented+0x190>)
 800fe3e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800fe42:	f7fe fa6d 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 800fe46:	4620      	mov	r0, r4
 800fe48:	b011      	add	sp, #68	; 0x44
 800fe4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fe50:	4628      	mov	r0, r5
 800fe52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe54:	4798      	blx	r3
 800fe56:	b920      	cbnz	r0, 800fe62 <uxr_prepare_output_stream_fragmented+0x152>
 800fe58:	2400      	movs	r4, #0
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	b011      	add	sp, #68	; 0x44
 800fe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe62:	4620      	mov	r0, r4
 800fe64:	f004 f83a 	bl	8013edc <get_available_free_slots>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	f47f af6b 	bne.w	800fd44 <uxr_prepare_output_stream_fragmented+0x34>
 800fe6e:	e7f3      	b.n	800fe58 <uxr_prepare_output_stream_fragmented+0x148>
 800fe70:	4638      	mov	r0, r7
 800fe72:	2101      	movs	r1, #1
 800fe74:	f004 f94a 	bl	801410c <uxr_seq_num_add>
 800fe78:	8922      	ldrh	r2, [r4, #8]
 800fe7a:	6863      	ldr	r3, [r4, #4]
 800fe7c:	4607      	mov	r7, r0
 800fe7e:	fbb3 f9f2 	udiv	r9, r3, r2
 800fe82:	fbb0 f3f2 	udiv	r3, r0, r2
 800fe86:	fb02 0313 	mls	r3, r2, r3, r0
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	fb03 f909 	mul.w	r9, r3, r9
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	f109 0904 	add.w	r9, r9, #4
 800fe96:	4499      	add	r9, r3
 800fe98:	7b23      	ldrb	r3, [r4, #12]
 800fe9a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800fe9e:	e76a      	b.n	800fd76 <uxr_prepare_output_stream_fragmented+0x66>
 800fea0:	0800fb9d 	.word	0x0800fb9d

0800fea4 <uxr_serialize_message_header>:
 800fea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fea6:	4616      	mov	r6, r2
 800fea8:	b083      	sub	sp, #12
 800feaa:	4604      	mov	r4, r0
 800feac:	460d      	mov	r5, r1
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	9f08      	ldr	r7, [sp, #32]
 800feb2:	f7fd fab5 	bl	800d420 <ucdr_serialize_uint8_t>
 800feb6:	4631      	mov	r1, r6
 800feb8:	4620      	mov	r0, r4
 800feba:	f7fd fab1 	bl	800d420 <ucdr_serialize_uint8_t>
 800febe:	9a01      	ldr	r2, [sp, #4]
 800fec0:	2101      	movs	r1, #1
 800fec2:	4620      	mov	r0, r4
 800fec4:	f7fd fb58 	bl	800d578 <ucdr_serialize_endian_uint16_t>
 800fec8:	062b      	lsls	r3, r5, #24
 800feca:	d501      	bpl.n	800fed0 <uxr_serialize_message_header+0x2c>
 800fecc:	b003      	add	sp, #12
 800fece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed0:	2204      	movs	r2, #4
 800fed2:	4639      	mov	r1, r7
 800fed4:	4620      	mov	r0, r4
 800fed6:	b003      	add	sp, #12
 800fed8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fedc:	f003 b8dc 	b.w	8013098 <ucdr_serialize_array_uint8_t>

0800fee0 <uxr_deserialize_message_header>:
 800fee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fee2:	4616      	mov	r6, r2
 800fee4:	b083      	sub	sp, #12
 800fee6:	4604      	mov	r4, r0
 800fee8:	460d      	mov	r5, r1
 800feea:	9301      	str	r3, [sp, #4]
 800feec:	9f08      	ldr	r7, [sp, #32]
 800feee:	f7fd faad 	bl	800d44c <ucdr_deserialize_uint8_t>
 800fef2:	4631      	mov	r1, r6
 800fef4:	4620      	mov	r0, r4
 800fef6:	f7fd faa9 	bl	800d44c <ucdr_deserialize_uint8_t>
 800fefa:	9a01      	ldr	r2, [sp, #4]
 800fefc:	2101      	movs	r1, #1
 800fefe:	4620      	mov	r0, r4
 800ff00:	f7fd fc2e 	bl	800d760 <ucdr_deserialize_endian_uint16_t>
 800ff04:	f995 3000 	ldrsb.w	r3, [r5]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	da01      	bge.n	800ff10 <uxr_deserialize_message_header+0x30>
 800ff0c:	b003      	add	sp, #12
 800ff0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff10:	2204      	movs	r2, #4
 800ff12:	4639      	mov	r1, r7
 800ff14:	4620      	mov	r0, r4
 800ff16:	b003      	add	sp, #12
 800ff18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff1c:	f003 b920 	b.w	8013160 <ucdr_deserialize_array_uint8_t>

0800ff20 <uxr_serialize_submessage_header>:
 800ff20:	b530      	push	{r4, r5, lr}
 800ff22:	4615      	mov	r5, r2
 800ff24:	b083      	sub	sp, #12
 800ff26:	4604      	mov	r4, r0
 800ff28:	9301      	str	r3, [sp, #4]
 800ff2a:	f7fd fa79 	bl	800d420 <ucdr_serialize_uint8_t>
 800ff2e:	4629      	mov	r1, r5
 800ff30:	4620      	mov	r0, r4
 800ff32:	f7fd fa75 	bl	800d420 <ucdr_serialize_uint8_t>
 800ff36:	9a01      	ldr	r2, [sp, #4]
 800ff38:	2101      	movs	r1, #1
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	b003      	add	sp, #12
 800ff3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff42:	f7fd bb19 	b.w	800d578 <ucdr_serialize_endian_uint16_t>
 800ff46:	bf00      	nop

0800ff48 <uxr_deserialize_submessage_header>:
 800ff48:	b530      	push	{r4, r5, lr}
 800ff4a:	4615      	mov	r5, r2
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	4604      	mov	r4, r0
 800ff50:	9301      	str	r3, [sp, #4]
 800ff52:	f7fd fa7b 	bl	800d44c <ucdr_deserialize_uint8_t>
 800ff56:	4629      	mov	r1, r5
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f7fd fa77 	bl	800d44c <ucdr_deserialize_uint8_t>
 800ff5e:	9a01      	ldr	r2, [sp, #4]
 800ff60:	2101      	movs	r1, #1
 800ff62:	4620      	mov	r0, r4
 800ff64:	b003      	add	sp, #12
 800ff66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff6a:	f7fd bbf9 	b.w	800d760 <ucdr_deserialize_endian_uint16_t>
 800ff6e:	bf00      	nop

0800ff70 <uxr_serialize_CLIENT_Representation>:
 800ff70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff74:	2204      	movs	r2, #4
 800ff76:	460e      	mov	r6, r1
 800ff78:	4605      	mov	r5, r0
 800ff7a:	f003 f88d 	bl	8013098 <ucdr_serialize_array_uint8_t>
 800ff7e:	4607      	mov	r7, r0
 800ff80:	2202      	movs	r2, #2
 800ff82:	1d31      	adds	r1, r6, #4
 800ff84:	4628      	mov	r0, r5
 800ff86:	f003 f887 	bl	8013098 <ucdr_serialize_array_uint8_t>
 800ff8a:	4038      	ands	r0, r7
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	1db1      	adds	r1, r6, #6
 800ff90:	b2c7      	uxtb	r7, r0
 800ff92:	4628      	mov	r0, r5
 800ff94:	f003 f880 	bl	8013098 <ucdr_serialize_array_uint8_t>
 800ff98:	2204      	movs	r2, #4
 800ff9a:	4007      	ands	r7, r0
 800ff9c:	f106 0108 	add.w	r1, r6, #8
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	f003 f879 	bl	8013098 <ucdr_serialize_array_uint8_t>
 800ffa6:	4007      	ands	r7, r0
 800ffa8:	7b31      	ldrb	r1, [r6, #12]
 800ffaa:	4628      	mov	r0, r5
 800ffac:	f7fd fa38 	bl	800d420 <ucdr_serialize_uint8_t>
 800ffb0:	7b71      	ldrb	r1, [r6, #13]
 800ffb2:	4007      	ands	r7, r0
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	f7fd fa05 	bl	800d3c4 <ucdr_serialize_bool>
 800ffba:	7b73      	ldrb	r3, [r6, #13]
 800ffbc:	ea07 0800 	and.w	r8, r7, r0
 800ffc0:	b93b      	cbnz	r3, 800ffd2 <uxr_serialize_CLIENT_Representation+0x62>
 800ffc2:	8bb1      	ldrh	r1, [r6, #28]
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	f7fd fa57 	bl	800d478 <ucdr_serialize_uint16_t>
 800ffca:	ea08 0000 	and.w	r0, r8, r0
 800ffce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffd2:	6931      	ldr	r1, [r6, #16]
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	f7fd fc39 	bl	800d84c <ucdr_serialize_uint32_t>
 800ffda:	6933      	ldr	r3, [r6, #16]
 800ffdc:	b1e3      	cbz	r3, 8010018 <uxr_serialize_CLIENT_Representation+0xa8>
 800ffde:	b1c0      	cbz	r0, 8010012 <uxr_serialize_CLIENT_Representation+0xa2>
 800ffe0:	4637      	mov	r7, r6
 800ffe2:	f04f 0900 	mov.w	r9, #0
 800ffe6:	e000      	b.n	800ffea <uxr_serialize_CLIENT_Representation+0x7a>
 800ffe8:	b19c      	cbz	r4, 8010012 <uxr_serialize_CLIENT_Representation+0xa2>
 800ffea:	6979      	ldr	r1, [r7, #20]
 800ffec:	4628      	mov	r0, r5
 800ffee:	f003 f977 	bl	80132e0 <ucdr_serialize_string>
 800fff2:	69b9      	ldr	r1, [r7, #24]
 800fff4:	4604      	mov	r4, r0
 800fff6:	4628      	mov	r0, r5
 800fff8:	f003 f972 	bl	80132e0 <ucdr_serialize_string>
 800fffc:	f109 0901 	add.w	r9, r9, #1
 8010000:	6933      	ldr	r3, [r6, #16]
 8010002:	4004      	ands	r4, r0
 8010004:	3708      	adds	r7, #8
 8010006:	4599      	cmp	r9, r3
 8010008:	b2e4      	uxtb	r4, r4
 801000a:	d3ed      	bcc.n	800ffe8 <uxr_serialize_CLIENT_Representation+0x78>
 801000c:	ea08 0804 	and.w	r8, r8, r4
 8010010:	e7d7      	b.n	800ffc2 <uxr_serialize_CLIENT_Representation+0x52>
 8010012:	f04f 0800 	mov.w	r8, #0
 8010016:	e7d4      	b.n	800ffc2 <uxr_serialize_CLIENT_Representation+0x52>
 8010018:	ea08 0800 	and.w	r8, r8, r0
 801001c:	e7d1      	b.n	800ffc2 <uxr_serialize_CLIENT_Representation+0x52>
 801001e:	bf00      	nop

08010020 <uxr_deserialize_CLIENT_Representation>:
 8010020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010024:	2204      	movs	r2, #4
 8010026:	460c      	mov	r4, r1
 8010028:	4605      	mov	r5, r0
 801002a:	f003 f899 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 801002e:	4607      	mov	r7, r0
 8010030:	2202      	movs	r2, #2
 8010032:	1d21      	adds	r1, r4, #4
 8010034:	4628      	mov	r0, r5
 8010036:	f003 f893 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 801003a:	4038      	ands	r0, r7
 801003c:	2202      	movs	r2, #2
 801003e:	1da1      	adds	r1, r4, #6
 8010040:	b2c6      	uxtb	r6, r0
 8010042:	4628      	mov	r0, r5
 8010044:	f003 f88c 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010048:	2204      	movs	r2, #4
 801004a:	4006      	ands	r6, r0
 801004c:	f104 0108 	add.w	r1, r4, #8
 8010050:	4628      	mov	r0, r5
 8010052:	f003 f885 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010056:	4006      	ands	r6, r0
 8010058:	f104 010c 	add.w	r1, r4, #12
 801005c:	4628      	mov	r0, r5
 801005e:	f7fd f9f5 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010062:	f104 010d 	add.w	r1, r4, #13
 8010066:	ea06 0700 	and.w	r7, r6, r0
 801006a:	4628      	mov	r0, r5
 801006c:	f7fd f9c0 	bl	800d3f0 <ucdr_deserialize_bool>
 8010070:	7b63      	ldrb	r3, [r4, #13]
 8010072:	4007      	ands	r7, r0
 8010074:	b93b      	cbnz	r3, 8010086 <uxr_deserialize_CLIENT_Representation+0x66>
 8010076:	f104 011c 	add.w	r1, r4, #28
 801007a:	4628      	mov	r0, r5
 801007c:	f7fd fafc 	bl	800d678 <ucdr_deserialize_uint16_t>
 8010080:	4038      	ands	r0, r7
 8010082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010086:	f104 0110 	add.w	r1, r4, #16
 801008a:	4628      	mov	r0, r5
 801008c:	f7fd fd0e 	bl	800daac <ucdr_deserialize_uint32_t>
 8010090:	6923      	ldr	r3, [r4, #16]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d903      	bls.n	801009e <uxr_deserialize_CLIENT_Representation+0x7e>
 8010096:	2301      	movs	r3, #1
 8010098:	2700      	movs	r7, #0
 801009a:	75ab      	strb	r3, [r5, #22]
 801009c:	e7eb      	b.n	8010076 <uxr_deserialize_CLIENT_Representation+0x56>
 801009e:	b30b      	cbz	r3, 80100e4 <uxr_deserialize_CLIENT_Representation+0xc4>
 80100a0:	b1f0      	cbz	r0, 80100e0 <uxr_deserialize_CLIENT_Representation+0xc0>
 80100a2:	46a0      	mov	r8, r4
 80100a4:	f04f 0900 	mov.w	r9, #0
 80100a8:	e000      	b.n	80100ac <uxr_deserialize_CLIENT_Representation+0x8c>
 80100aa:	b1ce      	cbz	r6, 80100e0 <uxr_deserialize_CLIENT_Representation+0xc0>
 80100ac:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80100b0:	f108 0808 	add.w	r8, r8, #8
 80100b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100b8:	4628      	mov	r0, r5
 80100ba:	f003 f921 	bl	8013300 <ucdr_deserialize_string>
 80100be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80100c2:	4606      	mov	r6, r0
 80100c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100c8:	4628      	mov	r0, r5
 80100ca:	f109 0901 	add.w	r9, r9, #1
 80100ce:	f003 f917 	bl	8013300 <ucdr_deserialize_string>
 80100d2:	6923      	ldr	r3, [r4, #16]
 80100d4:	4006      	ands	r6, r0
 80100d6:	4599      	cmp	r9, r3
 80100d8:	b2f6      	uxtb	r6, r6
 80100da:	d3e6      	bcc.n	80100aa <uxr_deserialize_CLIENT_Representation+0x8a>
 80100dc:	4037      	ands	r7, r6
 80100de:	e7ca      	b.n	8010076 <uxr_deserialize_CLIENT_Representation+0x56>
 80100e0:	2700      	movs	r7, #0
 80100e2:	e7c8      	b.n	8010076 <uxr_deserialize_CLIENT_Representation+0x56>
 80100e4:	4007      	ands	r7, r0
 80100e6:	e7c6      	b.n	8010076 <uxr_deserialize_CLIENT_Representation+0x56>

080100e8 <uxr_serialize_AGENT_Representation>:
 80100e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100ec:	2204      	movs	r2, #4
 80100ee:	460f      	mov	r7, r1
 80100f0:	4605      	mov	r5, r0
 80100f2:	f002 ffd1 	bl	8013098 <ucdr_serialize_array_uint8_t>
 80100f6:	4604      	mov	r4, r0
 80100f8:	2202      	movs	r2, #2
 80100fa:	1d39      	adds	r1, r7, #4
 80100fc:	4628      	mov	r0, r5
 80100fe:	f002 ffcb 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010102:	4020      	ands	r0, r4
 8010104:	2202      	movs	r2, #2
 8010106:	1db9      	adds	r1, r7, #6
 8010108:	b2c4      	uxtb	r4, r0
 801010a:	4628      	mov	r0, r5
 801010c:	f002 ffc4 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010110:	7a39      	ldrb	r1, [r7, #8]
 8010112:	4004      	ands	r4, r0
 8010114:	4628      	mov	r0, r5
 8010116:	f7fd f955 	bl	800d3c4 <ucdr_serialize_bool>
 801011a:	7a3b      	ldrb	r3, [r7, #8]
 801011c:	ea00 0804 	and.w	r8, r0, r4
 8010120:	b913      	cbnz	r3, 8010128 <uxr_serialize_AGENT_Representation+0x40>
 8010122:	4640      	mov	r0, r8
 8010124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010128:	68f9      	ldr	r1, [r7, #12]
 801012a:	4628      	mov	r0, r5
 801012c:	f7fd fb8e 	bl	800d84c <ucdr_serialize_uint32_t>
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	b303      	cbz	r3, 8010176 <uxr_serialize_AGENT_Representation+0x8e>
 8010134:	b1d0      	cbz	r0, 801016c <uxr_serialize_AGENT_Representation+0x84>
 8010136:	463e      	mov	r6, r7
 8010138:	f04f 0900 	mov.w	r9, #0
 801013c:	e000      	b.n	8010140 <uxr_serialize_AGENT_Representation+0x58>
 801013e:	b1ac      	cbz	r4, 801016c <uxr_serialize_AGENT_Representation+0x84>
 8010140:	6931      	ldr	r1, [r6, #16]
 8010142:	4628      	mov	r0, r5
 8010144:	f003 f8cc 	bl	80132e0 <ucdr_serialize_string>
 8010148:	6971      	ldr	r1, [r6, #20]
 801014a:	4604      	mov	r4, r0
 801014c:	4628      	mov	r0, r5
 801014e:	f003 f8c7 	bl	80132e0 <ucdr_serialize_string>
 8010152:	f109 0901 	add.w	r9, r9, #1
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	4004      	ands	r4, r0
 801015a:	3608      	adds	r6, #8
 801015c:	4599      	cmp	r9, r3
 801015e:	b2e4      	uxtb	r4, r4
 8010160:	d3ed      	bcc.n	801013e <uxr_serialize_AGENT_Representation+0x56>
 8010162:	ea08 0804 	and.w	r8, r8, r4
 8010166:	4640      	mov	r0, r8
 8010168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801016c:	f04f 0800 	mov.w	r8, #0
 8010170:	4640      	mov	r0, r8
 8010172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010176:	ea08 0800 	and.w	r8, r8, r0
 801017a:	e7d2      	b.n	8010122 <uxr_serialize_AGENT_Representation+0x3a>

0801017c <uxr_serialize_DATAWRITER_Representation>:
 801017c:	b570      	push	{r4, r5, r6, lr}
 801017e:	460d      	mov	r5, r1
 8010180:	7809      	ldrb	r1, [r1, #0]
 8010182:	4606      	mov	r6, r0
 8010184:	f7fd f94c 	bl	800d420 <ucdr_serialize_uint8_t>
 8010188:	4604      	mov	r4, r0
 801018a:	b130      	cbz	r0, 801019a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801018c:	782b      	ldrb	r3, [r5, #0]
 801018e:	2b02      	cmp	r3, #2
 8010190:	d00c      	beq.n	80101ac <uxr_serialize_DATAWRITER_Representation+0x30>
 8010192:	2b03      	cmp	r3, #3
 8010194:	d010      	beq.n	80101b8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010196:	2b01      	cmp	r3, #1
 8010198:	d008      	beq.n	80101ac <uxr_serialize_DATAWRITER_Representation+0x30>
 801019a:	2202      	movs	r2, #2
 801019c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80101a0:	4630      	mov	r0, r6
 80101a2:	f002 ff79 	bl	8013098 <ucdr_serialize_array_uint8_t>
 80101a6:	4020      	ands	r0, r4
 80101a8:	b2c0      	uxtb	r0, r0
 80101aa:	bd70      	pop	{r4, r5, r6, pc}
 80101ac:	6869      	ldr	r1, [r5, #4]
 80101ae:	4630      	mov	r0, r6
 80101b0:	f003 f896 	bl	80132e0 <ucdr_serialize_string>
 80101b4:	4604      	mov	r4, r0
 80101b6:	e7f0      	b.n	801019a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80101b8:	4629      	mov	r1, r5
 80101ba:	4630      	mov	r0, r6
 80101bc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80101c0:	3104      	adds	r1, #4
 80101c2:	f003 f861 	bl	8013288 <ucdr_serialize_sequence_uint8_t>
 80101c6:	4604      	mov	r4, r0
 80101c8:	e7e7      	b.n	801019a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80101ca:	bf00      	nop

080101cc <uxr_serialize_ObjectVariant.part.0>:
 80101cc:	b570      	push	{r4, r5, r6, lr}
 80101ce:	780b      	ldrb	r3, [r1, #0]
 80101d0:	460c      	mov	r4, r1
 80101d2:	4605      	mov	r5, r0
 80101d4:	3b01      	subs	r3, #1
 80101d6:	2b0d      	cmp	r3, #13
 80101d8:	d854      	bhi.n	8010284 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80101da:	e8df f003 	tbb	[pc, r3]
 80101de:	0730      	.short	0x0730
 80101e0:	07071b1b 	.word	0x07071b1b
 80101e4:	0c530707 	.word	0x0c530707
 80101e8:	494e0c0c 	.word	0x494e0c0c
 80101ec:	3104      	adds	r1, #4
 80101ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101f2:	f7ff bfc3 	b.w	801017c <uxr_serialize_DATAWRITER_Representation>
 80101f6:	7909      	ldrb	r1, [r1, #4]
 80101f8:	f7fd f912 	bl	800d420 <ucdr_serialize_uint8_t>
 80101fc:	b1e8      	cbz	r0, 801023a <uxr_serialize_ObjectVariant.part.0+0x6e>
 80101fe:	7923      	ldrb	r3, [r4, #4]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d001      	beq.n	8010208 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010204:	2b02      	cmp	r3, #2
 8010206:	d13d      	bne.n	8010284 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010208:	68a1      	ldr	r1, [r4, #8]
 801020a:	4628      	mov	r0, r5
 801020c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010210:	f003 b866 	b.w	80132e0 <ucdr_serialize_string>
 8010214:	7909      	ldrb	r1, [r1, #4]
 8010216:	f7fd f903 	bl	800d420 <ucdr_serialize_uint8_t>
 801021a:	4606      	mov	r6, r0
 801021c:	b120      	cbz	r0, 8010228 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801021e:	7923      	ldrb	r3, [r4, #4]
 8010220:	2b02      	cmp	r3, #2
 8010222:	d039      	beq.n	8010298 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010224:	2b03      	cmp	r3, #3
 8010226:	d02f      	beq.n	8010288 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010228:	2202      	movs	r2, #2
 801022a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801022e:	4628      	mov	r0, r5
 8010230:	f002 ff32 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010234:	4030      	ands	r0, r6
 8010236:	b2c0      	uxtb	r0, r0
 8010238:	bd70      	pop	{r4, r5, r6, pc}
 801023a:	2000      	movs	r0, #0
 801023c:	bd70      	pop	{r4, r5, r6, pc}
 801023e:	7909      	ldrb	r1, [r1, #4]
 8010240:	f7fd f8ee 	bl	800d420 <ucdr_serialize_uint8_t>
 8010244:	4606      	mov	r6, r0
 8010246:	b158      	cbz	r0, 8010260 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010248:	7923      	ldrb	r3, [r4, #4]
 801024a:	2b02      	cmp	r3, #2
 801024c:	d003      	beq.n	8010256 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801024e:	2b03      	cmp	r3, #3
 8010250:	d028      	beq.n	80102a4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010252:	2b01      	cmp	r3, #1
 8010254:	d104      	bne.n	8010260 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010256:	68a1      	ldr	r1, [r4, #8]
 8010258:	4628      	mov	r0, r5
 801025a:	f003 f841 	bl	80132e0 <ucdr_serialize_string>
 801025e:	4606      	mov	r6, r0
 8010260:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8010264:	4628      	mov	r0, r5
 8010266:	f7fd fe17 	bl	800de98 <ucdr_serialize_int16_t>
 801026a:	4030      	ands	r0, r6
 801026c:	b2c0      	uxtb	r0, r0
 801026e:	bd70      	pop	{r4, r5, r6, pc}
 8010270:	3104      	adds	r1, #4
 8010272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010276:	f7ff be7b 	b.w	800ff70 <uxr_serialize_CLIENT_Representation>
 801027a:	3104      	adds	r1, #4
 801027c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010280:	f7ff bf32 	b.w	80100e8 <uxr_serialize_AGENT_Representation>
 8010284:	2001      	movs	r0, #1
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	68a2      	ldr	r2, [r4, #8]
 801028a:	f104 010c 	add.w	r1, r4, #12
 801028e:	4628      	mov	r0, r5
 8010290:	f002 fffa 	bl	8013288 <ucdr_serialize_sequence_uint8_t>
 8010294:	4606      	mov	r6, r0
 8010296:	e7c7      	b.n	8010228 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010298:	68a1      	ldr	r1, [r4, #8]
 801029a:	4628      	mov	r0, r5
 801029c:	f003 f820 	bl	80132e0 <ucdr_serialize_string>
 80102a0:	4606      	mov	r6, r0
 80102a2:	e7c1      	b.n	8010228 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80102a4:	68a2      	ldr	r2, [r4, #8]
 80102a6:	f104 010c 	add.w	r1, r4, #12
 80102aa:	4628      	mov	r0, r5
 80102ac:	f002 ffec 	bl	8013288 <ucdr_serialize_sequence_uint8_t>
 80102b0:	4606      	mov	r6, r0
 80102b2:	e7d5      	b.n	8010260 <uxr_serialize_ObjectVariant.part.0+0x94>

080102b4 <uxr_deserialize_DATAWRITER_Representation>:
 80102b4:	b570      	push	{r4, r5, r6, lr}
 80102b6:	4606      	mov	r6, r0
 80102b8:	460d      	mov	r5, r1
 80102ba:	f7fd f8c7 	bl	800d44c <ucdr_deserialize_uint8_t>
 80102be:	4604      	mov	r4, r0
 80102c0:	b130      	cbz	r0, 80102d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80102c2:	782b      	ldrb	r3, [r5, #0]
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d00c      	beq.n	80102e2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80102c8:	2b03      	cmp	r3, #3
 80102ca:	d012      	beq.n	80102f2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d008      	beq.n	80102e2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80102d0:	2202      	movs	r2, #2
 80102d2:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80102d6:	4630      	mov	r0, r6
 80102d8:	f002 ff42 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 80102dc:	4020      	ands	r0, r4
 80102de:	b2c0      	uxtb	r0, r0
 80102e0:	bd70      	pop	{r4, r5, r6, pc}
 80102e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102e6:	6869      	ldr	r1, [r5, #4]
 80102e8:	4630      	mov	r0, r6
 80102ea:	f003 f809 	bl	8013300 <ucdr_deserialize_string>
 80102ee:	4604      	mov	r4, r0
 80102f0:	e7ee      	b.n	80102d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80102f2:	1d2b      	adds	r3, r5, #4
 80102f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102f8:	f105 0108 	add.w	r1, r5, #8
 80102fc:	4630      	mov	r0, r6
 80102fe:	f002 ffd5 	bl	80132ac <ucdr_deserialize_sequence_uint8_t>
 8010302:	4604      	mov	r4, r0
 8010304:	e7e4      	b.n	80102d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010306:	bf00      	nop

08010308 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010308:	b570      	push	{r4, r5, r6, lr}
 801030a:	460d      	mov	r5, r1
 801030c:	7809      	ldrb	r1, [r1, #0]
 801030e:	4606      	mov	r6, r0
 8010310:	f7fd f858 	bl	800d3c4 <ucdr_serialize_bool>
 8010314:	782b      	ldrb	r3, [r5, #0]
 8010316:	4604      	mov	r4, r0
 8010318:	b94b      	cbnz	r3, 801032e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801031a:	7a29      	ldrb	r1, [r5, #8]
 801031c:	4630      	mov	r0, r6
 801031e:	f7fd f851 	bl	800d3c4 <ucdr_serialize_bool>
 8010322:	7a2b      	ldrb	r3, [r5, #8]
 8010324:	4004      	ands	r4, r0
 8010326:	b2e4      	uxtb	r4, r4
 8010328:	b943      	cbnz	r3, 801033c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801032a:	4620      	mov	r0, r4
 801032c:	bd70      	pop	{r4, r5, r6, pc}
 801032e:	6869      	ldr	r1, [r5, #4]
 8010330:	4630      	mov	r0, r6
 8010332:	f002 ffd5 	bl	80132e0 <ucdr_serialize_string>
 8010336:	4004      	ands	r4, r0
 8010338:	b2e4      	uxtb	r4, r4
 801033a:	e7ee      	b.n	801031a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801033c:	68e9      	ldr	r1, [r5, #12]
 801033e:	4630      	mov	r0, r6
 8010340:	f002 ffce 	bl	80132e0 <ucdr_serialize_string>
 8010344:	4004      	ands	r4, r0
 8010346:	4620      	mov	r0, r4
 8010348:	bd70      	pop	{r4, r5, r6, pc}
 801034a:	bf00      	nop

0801034c <uxr_serialize_OBJK_Topic_Binary>:
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	460d      	mov	r5, r1
 8010350:	4606      	mov	r6, r0
 8010352:	6809      	ldr	r1, [r1, #0]
 8010354:	f002 ffc4 	bl	80132e0 <ucdr_serialize_string>
 8010358:	4604      	mov	r4, r0
 801035a:	7929      	ldrb	r1, [r5, #4]
 801035c:	4630      	mov	r0, r6
 801035e:	f7fd f831 	bl	800d3c4 <ucdr_serialize_bool>
 8010362:	792b      	ldrb	r3, [r5, #4]
 8010364:	4004      	ands	r4, r0
 8010366:	b2e4      	uxtb	r4, r4
 8010368:	b943      	cbnz	r3, 801037c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801036a:	7b29      	ldrb	r1, [r5, #12]
 801036c:	4630      	mov	r0, r6
 801036e:	f7fd f829 	bl	800d3c4 <ucdr_serialize_bool>
 8010372:	7b2b      	ldrb	r3, [r5, #12]
 8010374:	4004      	ands	r4, r0
 8010376:	b93b      	cbnz	r3, 8010388 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010378:	4620      	mov	r0, r4
 801037a:	bd70      	pop	{r4, r5, r6, pc}
 801037c:	68a9      	ldr	r1, [r5, #8]
 801037e:	4630      	mov	r0, r6
 8010380:	f002 ffae 	bl	80132e0 <ucdr_serialize_string>
 8010384:	4004      	ands	r4, r0
 8010386:	e7f0      	b.n	801036a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010388:	6929      	ldr	r1, [r5, #16]
 801038a:	4630      	mov	r0, r6
 801038c:	f002 ffa8 	bl	80132e0 <ucdr_serialize_string>
 8010390:	4004      	ands	r4, r0
 8010392:	b2e4      	uxtb	r4, r4
 8010394:	4620      	mov	r0, r4
 8010396:	bd70      	pop	{r4, r5, r6, pc}

08010398 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801039c:	460c      	mov	r4, r1
 801039e:	7809      	ldrb	r1, [r1, #0]
 80103a0:	4606      	mov	r6, r0
 80103a2:	f7fd f80f 	bl	800d3c4 <ucdr_serialize_bool>
 80103a6:	7823      	ldrb	r3, [r4, #0]
 80103a8:	4605      	mov	r5, r0
 80103aa:	b96b      	cbnz	r3, 80103c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80103ac:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80103b0:	4630      	mov	r0, r6
 80103b2:	f7fd f807 	bl	800d3c4 <ucdr_serialize_bool>
 80103b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80103ba:	4005      	ands	r5, r0
 80103bc:	b2ed      	uxtb	r5, r5
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d169      	bne.n	8010496 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80103c2:	4628      	mov	r0, r5
 80103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c8:	6861      	ldr	r1, [r4, #4]
 80103ca:	4630      	mov	r0, r6
 80103cc:	f7fd fa3e 	bl	800d84c <ucdr_serialize_uint32_t>
 80103d0:	6863      	ldr	r3, [r4, #4]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d06b      	beq.n	80104ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d067      	beq.n	80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80103da:	68a1      	ldr	r1, [r4, #8]
 80103dc:	4630      	mov	r0, r6
 80103de:	f002 ff7f 	bl	80132e0 <ucdr_serialize_string>
 80103e2:	6863      	ldr	r3, [r4, #4]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d953      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	d05e      	beq.n	80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80103ec:	68e1      	ldr	r1, [r4, #12]
 80103ee:	4630      	mov	r0, r6
 80103f0:	f002 ff76 	bl	80132e0 <ucdr_serialize_string>
 80103f4:	6863      	ldr	r3, [r4, #4]
 80103f6:	2b02      	cmp	r3, #2
 80103f8:	d94a      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	d055      	beq.n	80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80103fe:	6921      	ldr	r1, [r4, #16]
 8010400:	4630      	mov	r0, r6
 8010402:	f002 ff6d 	bl	80132e0 <ucdr_serialize_string>
 8010406:	6863      	ldr	r3, [r4, #4]
 8010408:	2b03      	cmp	r3, #3
 801040a:	d941      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801040c:	2800      	cmp	r0, #0
 801040e:	d04c      	beq.n	80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010410:	6961      	ldr	r1, [r4, #20]
 8010412:	4630      	mov	r0, r6
 8010414:	f002 ff64 	bl	80132e0 <ucdr_serialize_string>
 8010418:	6863      	ldr	r3, [r4, #4]
 801041a:	2b04      	cmp	r3, #4
 801041c:	d938      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801041e:	2800      	cmp	r0, #0
 8010420:	d043      	beq.n	80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010422:	69a1      	ldr	r1, [r4, #24]
 8010424:	4630      	mov	r0, r6
 8010426:	f002 ff5b 	bl	80132e0 <ucdr_serialize_string>
 801042a:	6863      	ldr	r3, [r4, #4]
 801042c:	2b05      	cmp	r3, #5
 801042e:	d92f      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010430:	2800      	cmp	r0, #0
 8010432:	d03a      	beq.n	80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010434:	69e1      	ldr	r1, [r4, #28]
 8010436:	4630      	mov	r0, r6
 8010438:	f002 ff52 	bl	80132e0 <ucdr_serialize_string>
 801043c:	6863      	ldr	r3, [r4, #4]
 801043e:	2b06      	cmp	r3, #6
 8010440:	d926      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010442:	b390      	cbz	r0, 80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010444:	6a21      	ldr	r1, [r4, #32]
 8010446:	4630      	mov	r0, r6
 8010448:	f002 ff4a 	bl	80132e0 <ucdr_serialize_string>
 801044c:	6863      	ldr	r3, [r4, #4]
 801044e:	2b07      	cmp	r3, #7
 8010450:	d91e      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010452:	b350      	cbz	r0, 80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010454:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010456:	4630      	mov	r0, r6
 8010458:	f002 ff42 	bl	80132e0 <ucdr_serialize_string>
 801045c:	6863      	ldr	r3, [r4, #4]
 801045e:	2b08      	cmp	r3, #8
 8010460:	d916      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010462:	b310      	cbz	r0, 80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010464:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010466:	4630      	mov	r0, r6
 8010468:	f002 ff3a 	bl	80132e0 <ucdr_serialize_string>
 801046c:	6863      	ldr	r3, [r4, #4]
 801046e:	2b09      	cmp	r3, #9
 8010470:	d90e      	bls.n	8010490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010472:	b1d0      	cbz	r0, 80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010474:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8010478:	2709      	movs	r7, #9
 801047a:	e000      	b.n	801047e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801047c:	b1a8      	cbz	r0, 80104aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801047e:	f858 1b04 	ldr.w	r1, [r8], #4
 8010482:	4630      	mov	r0, r6
 8010484:	f002 ff2c 	bl	80132e0 <ucdr_serialize_string>
 8010488:	3701      	adds	r7, #1
 801048a:	6862      	ldr	r2, [r4, #4]
 801048c:	4297      	cmp	r7, r2
 801048e:	d3f5      	bcc.n	801047c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8010490:	4005      	ands	r5, r0
 8010492:	b2ed      	uxtb	r5, r5
 8010494:	e78a      	b.n	80103ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010496:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010498:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801049c:	4630      	mov	r0, r6
 801049e:	f002 fef3 	bl	8013288 <ucdr_serialize_sequence_uint8_t>
 80104a2:	4005      	ands	r5, r0
 80104a4:	4628      	mov	r0, r5
 80104a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104aa:	2500      	movs	r5, #0
 80104ac:	e77e      	b.n	80103ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80104ae:	4028      	ands	r0, r5
 80104b0:	b2c5      	uxtb	r5, r0
 80104b2:	e77b      	b.n	80103ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080104b4 <uxr_serialize_OBJK_Publisher_Binary>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	460d      	mov	r5, r1
 80104b8:	7809      	ldrb	r1, [r1, #0]
 80104ba:	4606      	mov	r6, r0
 80104bc:	f7fc ff82 	bl	800d3c4 <ucdr_serialize_bool>
 80104c0:	782b      	ldrb	r3, [r5, #0]
 80104c2:	4604      	mov	r4, r0
 80104c4:	b94b      	cbnz	r3, 80104da <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80104c6:	7a29      	ldrb	r1, [r5, #8]
 80104c8:	4630      	mov	r0, r6
 80104ca:	f7fc ff7b 	bl	800d3c4 <ucdr_serialize_bool>
 80104ce:	7a2b      	ldrb	r3, [r5, #8]
 80104d0:	4004      	ands	r4, r0
 80104d2:	b2e4      	uxtb	r4, r4
 80104d4:	b943      	cbnz	r3, 80104e8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80104d6:	4620      	mov	r0, r4
 80104d8:	bd70      	pop	{r4, r5, r6, pc}
 80104da:	6869      	ldr	r1, [r5, #4]
 80104dc:	4630      	mov	r0, r6
 80104de:	f002 feff 	bl	80132e0 <ucdr_serialize_string>
 80104e2:	4004      	ands	r4, r0
 80104e4:	b2e4      	uxtb	r4, r4
 80104e6:	e7ee      	b.n	80104c6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80104e8:	f105 010c 	add.w	r1, r5, #12
 80104ec:	4630      	mov	r0, r6
 80104ee:	f7ff ff53 	bl	8010398 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80104f2:	4004      	ands	r4, r0
 80104f4:	4620      	mov	r0, r4
 80104f6:	bd70      	pop	{r4, r5, r6, pc}

080104f8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80104f8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80104fc:	4688      	mov	r8, r1
 80104fe:	4681      	mov	r9, r0
 8010500:	8809      	ldrh	r1, [r1, #0]
 8010502:	f7fc ffb9 	bl	800d478 <ucdr_serialize_uint16_t>
 8010506:	4606      	mov	r6, r0
 8010508:	f898 1002 	ldrb.w	r1, [r8, #2]
 801050c:	4648      	mov	r0, r9
 801050e:	f7fc ff59 	bl	800d3c4 <ucdr_serialize_bool>
 8010512:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010516:	4006      	ands	r6, r0
 8010518:	b2f5      	uxtb	r5, r6
 801051a:	b9eb      	cbnz	r3, 8010558 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801051c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010520:	4648      	mov	r0, r9
 8010522:	f7fc ff4f 	bl	800d3c4 <ucdr_serialize_bool>
 8010526:	f898 3006 	ldrb.w	r3, [r8, #6]
 801052a:	4005      	ands	r5, r0
 801052c:	bb7b      	cbnz	r3, 801058e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801052e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010532:	4648      	mov	r0, r9
 8010534:	f7fc ff46 	bl	800d3c4 <ucdr_serialize_bool>
 8010538:	f898 300c 	ldrb.w	r3, [r8, #12]
 801053c:	4005      	ands	r5, r0
 801053e:	b9f3      	cbnz	r3, 801057e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010540:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010544:	4648      	mov	r0, r9
 8010546:	f7fc ff3d 	bl	800d3c4 <ucdr_serialize_bool>
 801054a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801054e:	4005      	ands	r5, r0
 8010550:	b94b      	cbnz	r3, 8010566 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010552:	4628      	mov	r0, r5
 8010554:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010558:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801055c:	4648      	mov	r0, r9
 801055e:	f7fc ff8b 	bl	800d478 <ucdr_serialize_uint16_t>
 8010562:	4005      	ands	r5, r0
 8010564:	e7da      	b.n	801051c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010566:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801056a:	f108 011c 	add.w	r1, r8, #28
 801056e:	4648      	mov	r0, r9
 8010570:	f002 fe8a 	bl	8013288 <ucdr_serialize_sequence_uint8_t>
 8010574:	4028      	ands	r0, r5
 8010576:	b2c5      	uxtb	r5, r0
 8010578:	4628      	mov	r0, r5
 801057a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801057e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010582:	4648      	mov	r0, r9
 8010584:	f7fd f962 	bl	800d84c <ucdr_serialize_uint32_t>
 8010588:	4028      	ands	r0, r5
 801058a:	b2c5      	uxtb	r5, r0
 801058c:	e7d8      	b.n	8010540 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801058e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010592:	4648      	mov	r0, r9
 8010594:	f7fd f95a 	bl	800d84c <ucdr_serialize_uint32_t>
 8010598:	4028      	ands	r0, r5
 801059a:	b2c5      	uxtb	r5, r0
 801059c:	e7c7      	b.n	801052e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801059e:	bf00      	nop

080105a0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80105a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105a2:	2202      	movs	r2, #2
 80105a4:	460d      	mov	r5, r1
 80105a6:	4606      	mov	r6, r0
 80105a8:	f002 fd76 	bl	8013098 <ucdr_serialize_array_uint8_t>
 80105ac:	4604      	mov	r4, r0
 80105ae:	78a9      	ldrb	r1, [r5, #2]
 80105b0:	4630      	mov	r0, r6
 80105b2:	f7fc ff07 	bl	800d3c4 <ucdr_serialize_bool>
 80105b6:	78ab      	ldrb	r3, [r5, #2]
 80105b8:	4004      	ands	r4, r0
 80105ba:	b2e4      	uxtb	r4, r4
 80105bc:	b90b      	cbnz	r3, 80105c2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80105be:	4620      	mov	r0, r4
 80105c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105c2:	f105 0108 	add.w	r1, r5, #8
 80105c6:	4630      	mov	r0, r6
 80105c8:	f7ff ff96 	bl	80104f8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80105cc:	4607      	mov	r7, r0
 80105ce:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80105d2:	4630      	mov	r0, r6
 80105d4:	f7fc fef6 	bl	800d3c4 <ucdr_serialize_bool>
 80105d8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80105dc:	4038      	ands	r0, r7
 80105de:	b2c7      	uxtb	r7, r0
 80105e0:	b913      	cbnz	r3, 80105e8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80105e2:	403c      	ands	r4, r7
 80105e4:	4620      	mov	r0, r4
 80105e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105e8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80105ec:	4630      	mov	r0, r6
 80105ee:	f7fd fb83 	bl	800dcf8 <ucdr_serialize_uint64_t>
 80105f2:	4007      	ands	r7, r0
 80105f4:	e7f5      	b.n	80105e2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80105f6:	bf00      	nop

080105f8 <uxr_deserialize_ObjectVariant>:
 80105f8:	b570      	push	{r4, r5, r6, lr}
 80105fa:	4605      	mov	r5, r0
 80105fc:	460e      	mov	r6, r1
 80105fe:	f7fc ff25 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010602:	b168      	cbz	r0, 8010620 <uxr_deserialize_ObjectVariant+0x28>
 8010604:	7833      	ldrb	r3, [r6, #0]
 8010606:	4604      	mov	r4, r0
 8010608:	3b01      	subs	r3, #1
 801060a:	2b0d      	cmp	r3, #13
 801060c:	d809      	bhi.n	8010622 <uxr_deserialize_ObjectVariant+0x2a>
 801060e:	e8df f003 	tbb	[pc, r3]
 8010612:	0a41      	.short	0x0a41
 8010614:	0a0a2323 	.word	0x0a0a2323
 8010618:	10080a0a 	.word	0x10080a0a
 801061c:	565c1010 	.word	0x565c1010
 8010620:	2400      	movs	r4, #0
 8010622:	4620      	mov	r0, r4
 8010624:	bd70      	pop	{r4, r5, r6, pc}
 8010626:	1d31      	adds	r1, r6, #4
 8010628:	4628      	mov	r0, r5
 801062a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801062e:	f7ff be41 	b.w	80102b4 <uxr_deserialize_DATAWRITER_Representation>
 8010632:	1d31      	adds	r1, r6, #4
 8010634:	4628      	mov	r0, r5
 8010636:	f7fc ff09 	bl	800d44c <ucdr_deserialize_uint8_t>
 801063a:	2800      	cmp	r0, #0
 801063c:	d0f0      	beq.n	8010620 <uxr_deserialize_ObjectVariant+0x28>
 801063e:	7933      	ldrb	r3, [r6, #4]
 8010640:	2b01      	cmp	r3, #1
 8010642:	d001      	beq.n	8010648 <uxr_deserialize_ObjectVariant+0x50>
 8010644:	2b02      	cmp	r3, #2
 8010646:	d1ec      	bne.n	8010622 <uxr_deserialize_ObjectVariant+0x2a>
 8010648:	68b1      	ldr	r1, [r6, #8]
 801064a:	4628      	mov	r0, r5
 801064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010654:	f002 be54 	b.w	8013300 <ucdr_deserialize_string>
 8010658:	1d31      	adds	r1, r6, #4
 801065a:	4628      	mov	r0, r5
 801065c:	f7fc fef6 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010660:	4604      	mov	r4, r0
 8010662:	b170      	cbz	r0, 8010682 <uxr_deserialize_ObjectVariant+0x8a>
 8010664:	7933      	ldrb	r3, [r6, #4]
 8010666:	2b02      	cmp	r3, #2
 8010668:	d04c      	beq.n	8010704 <uxr_deserialize_ObjectVariant+0x10c>
 801066a:	2b03      	cmp	r3, #3
 801066c:	d109      	bne.n	8010682 <uxr_deserialize_ObjectVariant+0x8a>
 801066e:	f106 0308 	add.w	r3, r6, #8
 8010672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010676:	f106 010c 	add.w	r1, r6, #12
 801067a:	4628      	mov	r0, r5
 801067c:	f002 fe16 	bl	80132ac <ucdr_deserialize_sequence_uint8_t>
 8010680:	4604      	mov	r4, r0
 8010682:	2202      	movs	r2, #2
 8010684:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8010688:	4628      	mov	r0, r5
 801068a:	f002 fd69 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 801068e:	4020      	ands	r0, r4
 8010690:	b2c4      	uxtb	r4, r0
 8010692:	e7c6      	b.n	8010622 <uxr_deserialize_ObjectVariant+0x2a>
 8010694:	1d31      	adds	r1, r6, #4
 8010696:	4628      	mov	r0, r5
 8010698:	f7fc fed8 	bl	800d44c <ucdr_deserialize_uint8_t>
 801069c:	4604      	mov	r4, r0
 801069e:	b130      	cbz	r0, 80106ae <uxr_deserialize_ObjectVariant+0xb6>
 80106a0:	7933      	ldrb	r3, [r6, #4]
 80106a2:	2b02      	cmp	r3, #2
 80106a4:	d036      	beq.n	8010714 <uxr_deserialize_ObjectVariant+0x11c>
 80106a6:	2b03      	cmp	r3, #3
 80106a8:	d03c      	beq.n	8010724 <uxr_deserialize_ObjectVariant+0x12c>
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d032      	beq.n	8010714 <uxr_deserialize_ObjectVariant+0x11c>
 80106ae:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80106b2:	4628      	mov	r0, r5
 80106b4:	f7fd fc70 	bl	800df98 <ucdr_deserialize_int16_t>
 80106b8:	4020      	ands	r0, r4
 80106ba:	b2c4      	uxtb	r4, r0
 80106bc:	e7b1      	b.n	8010622 <uxr_deserialize_ObjectVariant+0x2a>
 80106be:	1d31      	adds	r1, r6, #4
 80106c0:	4628      	mov	r0, r5
 80106c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106c6:	f7ff bcab 	b.w	8010020 <uxr_deserialize_CLIENT_Representation>
 80106ca:	2204      	movs	r2, #4
 80106cc:	4628      	mov	r0, r5
 80106ce:	18b1      	adds	r1, r6, r2
 80106d0:	f002 fd46 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 80106d4:	4604      	mov	r4, r0
 80106d6:	2202      	movs	r2, #2
 80106d8:	f106 0108 	add.w	r1, r6, #8
 80106dc:	4628      	mov	r0, r5
 80106de:	f002 fd3f 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 80106e2:	4004      	ands	r4, r0
 80106e4:	2202      	movs	r2, #2
 80106e6:	f106 010a 	add.w	r1, r6, #10
 80106ea:	4628      	mov	r0, r5
 80106ec:	b2e4      	uxtb	r4, r4
 80106ee:	f002 fd37 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 80106f2:	4603      	mov	r3, r0
 80106f4:	f106 010c 	add.w	r1, r6, #12
 80106f8:	4628      	mov	r0, r5
 80106fa:	401c      	ands	r4, r3
 80106fc:	f7fc fe78 	bl	800d3f0 <ucdr_deserialize_bool>
 8010700:	4004      	ands	r4, r0
 8010702:	e78e      	b.n	8010622 <uxr_deserialize_ObjectVariant+0x2a>
 8010704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010708:	68b1      	ldr	r1, [r6, #8]
 801070a:	4628      	mov	r0, r5
 801070c:	f002 fdf8 	bl	8013300 <ucdr_deserialize_string>
 8010710:	4604      	mov	r4, r0
 8010712:	e7b6      	b.n	8010682 <uxr_deserialize_ObjectVariant+0x8a>
 8010714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010718:	68b1      	ldr	r1, [r6, #8]
 801071a:	4628      	mov	r0, r5
 801071c:	f002 fdf0 	bl	8013300 <ucdr_deserialize_string>
 8010720:	4604      	mov	r4, r0
 8010722:	e7c4      	b.n	80106ae <uxr_deserialize_ObjectVariant+0xb6>
 8010724:	f106 0308 	add.w	r3, r6, #8
 8010728:	f44f 7200 	mov.w	r2, #512	; 0x200
 801072c:	f106 010c 	add.w	r1, r6, #12
 8010730:	4628      	mov	r0, r5
 8010732:	f002 fdbb 	bl	80132ac <ucdr_deserialize_sequence_uint8_t>
 8010736:	4604      	mov	r4, r0
 8010738:	e7b9      	b.n	80106ae <uxr_deserialize_ObjectVariant+0xb6>
 801073a:	bf00      	nop

0801073c <uxr_deserialize_BaseObjectRequest>:
 801073c:	b570      	push	{r4, r5, r6, lr}
 801073e:	2202      	movs	r2, #2
 8010740:	4605      	mov	r5, r0
 8010742:	460e      	mov	r6, r1
 8010744:	f002 fd0c 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010748:	2202      	movs	r2, #2
 801074a:	4604      	mov	r4, r0
 801074c:	4628      	mov	r0, r5
 801074e:	18b1      	adds	r1, r6, r2
 8010750:	f002 fd06 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010754:	4020      	ands	r0, r4
 8010756:	b2c0      	uxtb	r0, r0
 8010758:	bd70      	pop	{r4, r5, r6, pc}
 801075a:	bf00      	nop

0801075c <uxr_serialize_ActivityInfoVariant>:
 801075c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010760:	460e      	mov	r6, r1
 8010762:	7809      	ldrb	r1, [r1, #0]
 8010764:	4680      	mov	r8, r0
 8010766:	f7fc fe5b 	bl	800d420 <ucdr_serialize_uint8_t>
 801076a:	4607      	mov	r7, r0
 801076c:	b138      	cbz	r0, 801077e <uxr_serialize_ActivityInfoVariant+0x22>
 801076e:	7833      	ldrb	r3, [r6, #0]
 8010770:	2b06      	cmp	r3, #6
 8010772:	f000 8081 	beq.w	8010878 <uxr_serialize_ActivityInfoVariant+0x11c>
 8010776:	2b0d      	cmp	r3, #13
 8010778:	d014      	beq.n	80107a4 <uxr_serialize_ActivityInfoVariant+0x48>
 801077a:	2b05      	cmp	r3, #5
 801077c:	d002      	beq.n	8010784 <uxr_serialize_ActivityInfoVariant+0x28>
 801077e:	4638      	mov	r0, r7
 8010780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010784:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8010788:	4640      	mov	r0, r8
 801078a:	f7fd fb85 	bl	800de98 <ucdr_serialize_int16_t>
 801078e:	4607      	mov	r7, r0
 8010790:	4640      	mov	r0, r8
 8010792:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8010796:	f7fd faaf 	bl	800dcf8 <ucdr_serialize_uint64_t>
 801079a:	4038      	ands	r0, r7
 801079c:	b2c7      	uxtb	r7, r0
 801079e:	4638      	mov	r0, r7
 80107a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80107a8:	4640      	mov	r0, r8
 80107aa:	f7fd fb75 	bl	800de98 <ucdr_serialize_int16_t>
 80107ae:	68f1      	ldr	r1, [r6, #12]
 80107b0:	4607      	mov	r7, r0
 80107b2:	4640      	mov	r0, r8
 80107b4:	f7fd f84a 	bl	800d84c <ucdr_serialize_uint32_t>
 80107b8:	68f3      	ldr	r3, [r6, #12]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d0ed      	beq.n	801079a <uxr_serialize_ActivityInfoVariant+0x3e>
 80107be:	b318      	cbz	r0, 8010808 <uxr_serialize_ActivityInfoVariant+0xac>
 80107c0:	f106 090c 	add.w	r9, r6, #12
 80107c4:	2400      	movs	r4, #0
 80107c6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80107ca:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 80107ce:	7c29      	ldrb	r1, [r5, #16]
 80107d0:	4640      	mov	r0, r8
 80107d2:	f7fc fe25 	bl	800d420 <ucdr_serialize_uint8_t>
 80107d6:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80107da:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80107de:	2800      	cmp	r0, #0
 80107e0:	d051      	beq.n	8010886 <uxr_serialize_ActivityInfoVariant+0x12a>
 80107e2:	7c2b      	ldrb	r3, [r5, #16]
 80107e4:	00c9      	lsls	r1, r1, #3
 80107e6:	2b03      	cmp	r3, #3
 80107e8:	d854      	bhi.n	8010894 <uxr_serialize_ActivityInfoVariant+0x138>
 80107ea:	e8df f003 	tbb	[pc, r3]
 80107ee:	2133      	.short	0x2133
 80107f0:	020f      	.short	0x020f
 80107f2:	4449      	add	r1, r9
 80107f4:	4640      	mov	r0, r8
 80107f6:	6889      	ldr	r1, [r1, #8]
 80107f8:	f002 fd72 	bl	80132e0 <ucdr_serialize_string>
 80107fc:	3401      	adds	r4, #1
 80107fe:	68f2      	ldr	r2, [r6, #12]
 8010800:	4294      	cmp	r4, r2
 8010802:	d244      	bcs.n	801088e <uxr_serialize_ActivityInfoVariant+0x132>
 8010804:	2800      	cmp	r0, #0
 8010806:	d1de      	bne.n	80107c6 <uxr_serialize_ActivityInfoVariant+0x6a>
 8010808:	2700      	movs	r7, #0
 801080a:	e7b8      	b.n	801077e <uxr_serialize_ActivityInfoVariant+0x22>
 801080c:	3108      	adds	r1, #8
 801080e:	44a2      	add	sl, r4
 8010810:	2210      	movs	r2, #16
 8010812:	4640      	mov	r0, r8
 8010814:	4449      	add	r1, r9
 8010816:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801081a:	f002 fc3d 	bl	8013098 <ucdr_serialize_array_uint8_t>
 801081e:	4605      	mov	r5, r0
 8010820:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8010824:	4640      	mov	r0, r8
 8010826:	f7fd f811 	bl	800d84c <ucdr_serialize_uint32_t>
 801082a:	4028      	ands	r0, r5
 801082c:	b2c0      	uxtb	r0, r0
 801082e:	e7e5      	b.n	80107fc <uxr_serialize_ActivityInfoVariant+0xa0>
 8010830:	3108      	adds	r1, #8
 8010832:	44a2      	add	sl, r4
 8010834:	2204      	movs	r2, #4
 8010836:	4640      	mov	r0, r8
 8010838:	4449      	add	r1, r9
 801083a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801083e:	f002 fc2b 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010842:	4605      	mov	r5, r0
 8010844:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8010848:	4640      	mov	r0, r8
 801084a:	f7fc fe15 	bl	800d478 <ucdr_serialize_uint16_t>
 801084e:	4028      	ands	r0, r5
 8010850:	b2c0      	uxtb	r0, r0
 8010852:	e7d3      	b.n	80107fc <uxr_serialize_ActivityInfoVariant+0xa0>
 8010854:	3108      	adds	r1, #8
 8010856:	44a2      	add	sl, r4
 8010858:	2202      	movs	r2, #2
 801085a:	4640      	mov	r0, r8
 801085c:	4449      	add	r1, r9
 801085e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8010862:	f002 fc19 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010866:	4605      	mov	r5, r0
 8010868:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801086c:	4640      	mov	r0, r8
 801086e:	f7fc fdd7 	bl	800d420 <ucdr_serialize_uint8_t>
 8010872:	4028      	ands	r0, r5
 8010874:	b2c0      	uxtb	r0, r0
 8010876:	e7c1      	b.n	80107fc <uxr_serialize_ActivityInfoVariant+0xa0>
 8010878:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801087c:	4640      	mov	r0, r8
 801087e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010882:	f7fd bb09 	b.w	800de98 <ucdr_serialize_int16_t>
 8010886:	3401      	adds	r4, #1
 8010888:	68f2      	ldr	r2, [r6, #12]
 801088a:	42a2      	cmp	r2, r4
 801088c:	d8bc      	bhi.n	8010808 <uxr_serialize_ActivityInfoVariant+0xac>
 801088e:	4007      	ands	r7, r0
 8010890:	b2ff      	uxtb	r7, r7
 8010892:	e774      	b.n	801077e <uxr_serialize_ActivityInfoVariant+0x22>
 8010894:	3401      	adds	r4, #1
 8010896:	68f3      	ldr	r3, [r6, #12]
 8010898:	3518      	adds	r5, #24
 801089a:	429c      	cmp	r4, r3
 801089c:	d397      	bcc.n	80107ce <uxr_serialize_ActivityInfoVariant+0x72>
 801089e:	e76e      	b.n	801077e <uxr_serialize_ActivityInfoVariant+0x22>

080108a0 <uxr_deserialize_BaseObjectReply>:
 80108a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108a4:	2202      	movs	r2, #2
 80108a6:	4606      	mov	r6, r0
 80108a8:	460f      	mov	r7, r1
 80108aa:	f002 fc59 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 80108ae:	2202      	movs	r2, #2
 80108b0:	4605      	mov	r5, r0
 80108b2:	4630      	mov	r0, r6
 80108b4:	18b9      	adds	r1, r7, r2
 80108b6:	f002 fc53 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 80108ba:	4680      	mov	r8, r0
 80108bc:	1d39      	adds	r1, r7, #4
 80108be:	4630      	mov	r0, r6
 80108c0:	f7fc fdc4 	bl	800d44c <ucdr_deserialize_uint8_t>
 80108c4:	ea05 0508 	and.w	r5, r5, r8
 80108c8:	4604      	mov	r4, r0
 80108ca:	1d79      	adds	r1, r7, #5
 80108cc:	4630      	mov	r0, r6
 80108ce:	402c      	ands	r4, r5
 80108d0:	f7fc fdbc 	bl	800d44c <ucdr_deserialize_uint8_t>
 80108d4:	4020      	ands	r0, r4
 80108d6:	b2c0      	uxtb	r0, r0
 80108d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108dc <uxr_serialize_ReadSpecification>:
 80108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108de:	460e      	mov	r6, r1
 80108e0:	4607      	mov	r7, r0
 80108e2:	7809      	ldrb	r1, [r1, #0]
 80108e4:	f7fc fd9c 	bl	800d420 <ucdr_serialize_uint8_t>
 80108e8:	4604      	mov	r4, r0
 80108ea:	7871      	ldrb	r1, [r6, #1]
 80108ec:	4638      	mov	r0, r7
 80108ee:	f7fc fd97 	bl	800d420 <ucdr_serialize_uint8_t>
 80108f2:	4004      	ands	r4, r0
 80108f4:	78b1      	ldrb	r1, [r6, #2]
 80108f6:	4638      	mov	r0, r7
 80108f8:	f7fc fd64 	bl	800d3c4 <ucdr_serialize_bool>
 80108fc:	78b3      	ldrb	r3, [r6, #2]
 80108fe:	b2e4      	uxtb	r4, r4
 8010900:	4004      	ands	r4, r0
 8010902:	b943      	cbnz	r3, 8010916 <uxr_serialize_ReadSpecification+0x3a>
 8010904:	7a31      	ldrb	r1, [r6, #8]
 8010906:	4638      	mov	r0, r7
 8010908:	f7fc fd5c 	bl	800d3c4 <ucdr_serialize_bool>
 801090c:	7a33      	ldrb	r3, [r6, #8]
 801090e:	4004      	ands	r4, r0
 8010910:	b93b      	cbnz	r3, 8010922 <uxr_serialize_ReadSpecification+0x46>
 8010912:	4620      	mov	r0, r4
 8010914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010916:	6871      	ldr	r1, [r6, #4]
 8010918:	4638      	mov	r0, r7
 801091a:	f002 fce1 	bl	80132e0 <ucdr_serialize_string>
 801091e:	4004      	ands	r4, r0
 8010920:	e7f0      	b.n	8010904 <uxr_serialize_ReadSpecification+0x28>
 8010922:	8971      	ldrh	r1, [r6, #10]
 8010924:	4638      	mov	r0, r7
 8010926:	f7fc fda7 	bl	800d478 <ucdr_serialize_uint16_t>
 801092a:	4605      	mov	r5, r0
 801092c:	89b1      	ldrh	r1, [r6, #12]
 801092e:	4638      	mov	r0, r7
 8010930:	f7fc fda2 	bl	800d478 <ucdr_serialize_uint16_t>
 8010934:	4005      	ands	r5, r0
 8010936:	89f1      	ldrh	r1, [r6, #14]
 8010938:	4638      	mov	r0, r7
 801093a:	b2ed      	uxtb	r5, r5
 801093c:	f7fc fd9c 	bl	800d478 <ucdr_serialize_uint16_t>
 8010940:	8a31      	ldrh	r1, [r6, #16]
 8010942:	4025      	ands	r5, r4
 8010944:	4604      	mov	r4, r0
 8010946:	4638      	mov	r0, r7
 8010948:	4025      	ands	r5, r4
 801094a:	f7fc fd95 	bl	800d478 <ucdr_serialize_uint16_t>
 801094e:	ea00 0405 	and.w	r4, r0, r5
 8010952:	4620      	mov	r0, r4
 8010954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010956:	bf00      	nop

08010958 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010958:	f7ff bb0a 	b.w	800ff70 <uxr_serialize_CLIENT_Representation>

0801095c <uxr_serialize_CREATE_Payload>:
 801095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801095e:	2202      	movs	r2, #2
 8010960:	4607      	mov	r7, r0
 8010962:	460e      	mov	r6, r1
 8010964:	f002 fb98 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010968:	2202      	movs	r2, #2
 801096a:	4605      	mov	r5, r0
 801096c:	4638      	mov	r0, r7
 801096e:	18b1      	adds	r1, r6, r2
 8010970:	f002 fb92 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010974:	7931      	ldrb	r1, [r6, #4]
 8010976:	4604      	mov	r4, r0
 8010978:	4638      	mov	r0, r7
 801097a:	f7fc fd51 	bl	800d420 <ucdr_serialize_uint8_t>
 801097e:	b170      	cbz	r0, 801099e <uxr_serialize_CREATE_Payload+0x42>
 8010980:	7933      	ldrb	r3, [r6, #4]
 8010982:	402c      	ands	r4, r5
 8010984:	3b01      	subs	r3, #1
 8010986:	b2e4      	uxtb	r4, r4
 8010988:	2b0d      	cmp	r3, #13
 801098a:	d809      	bhi.n	80109a0 <uxr_serialize_CREATE_Payload+0x44>
 801098c:	e8df f003 	tbb	[pc, r3]
 8010990:	23230a4c 	.word	0x23230a4c
 8010994:	0a0a0a0a 	.word	0x0a0a0a0a
 8010998:	12121208 	.word	0x12121208
 801099c:	3e45      	.short	0x3e45
 801099e:	2400      	movs	r4, #0
 80109a0:	4620      	mov	r0, r4
 80109a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109a4:	f106 0108 	add.w	r1, r6, #8
 80109a8:	4638      	mov	r0, r7
 80109aa:	f7ff fbe7 	bl	801017c <uxr_serialize_DATAWRITER_Representation>
 80109ae:	4004      	ands	r4, r0
 80109b0:	4620      	mov	r0, r4
 80109b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109b4:	7a31      	ldrb	r1, [r6, #8]
 80109b6:	4638      	mov	r0, r7
 80109b8:	f7fc fd32 	bl	800d420 <ucdr_serialize_uint8_t>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d0ee      	beq.n	801099e <uxr_serialize_CREATE_Payload+0x42>
 80109c0:	7a33      	ldrb	r3, [r6, #8]
 80109c2:	2b01      	cmp	r3, #1
 80109c4:	d001      	beq.n	80109ca <uxr_serialize_CREATE_Payload+0x6e>
 80109c6:	2b02      	cmp	r3, #2
 80109c8:	d1ea      	bne.n	80109a0 <uxr_serialize_CREATE_Payload+0x44>
 80109ca:	68f1      	ldr	r1, [r6, #12]
 80109cc:	4638      	mov	r0, r7
 80109ce:	f002 fc87 	bl	80132e0 <ucdr_serialize_string>
 80109d2:	4004      	ands	r4, r0
 80109d4:	e7e4      	b.n	80109a0 <uxr_serialize_CREATE_Payload+0x44>
 80109d6:	7a31      	ldrb	r1, [r6, #8]
 80109d8:	4638      	mov	r0, r7
 80109da:	f7fc fd21 	bl	800d420 <ucdr_serialize_uint8_t>
 80109de:	4605      	mov	r5, r0
 80109e0:	b158      	cbz	r0, 80109fa <uxr_serialize_CREATE_Payload+0x9e>
 80109e2:	7a33      	ldrb	r3, [r6, #8]
 80109e4:	2b02      	cmp	r3, #2
 80109e6:	d034      	beq.n	8010a52 <uxr_serialize_CREATE_Payload+0xf6>
 80109e8:	2b03      	cmp	r3, #3
 80109ea:	d106      	bne.n	80109fa <uxr_serialize_CREATE_Payload+0x9e>
 80109ec:	68f2      	ldr	r2, [r6, #12]
 80109ee:	f106 0110 	add.w	r1, r6, #16
 80109f2:	4638      	mov	r0, r7
 80109f4:	f002 fc48 	bl	8013288 <ucdr_serialize_sequence_uint8_t>
 80109f8:	4605      	mov	r5, r0
 80109fa:	2202      	movs	r2, #2
 80109fc:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8010a00:	4638      	mov	r0, r7
 8010a02:	f002 fb49 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010a06:	4028      	ands	r0, r5
 8010a08:	4004      	ands	r4, r0
 8010a0a:	e7c9      	b.n	80109a0 <uxr_serialize_CREATE_Payload+0x44>
 8010a0c:	f106 0108 	add.w	r1, r6, #8
 8010a10:	4638      	mov	r0, r7
 8010a12:	f7ff faad 	bl	800ff70 <uxr_serialize_CLIENT_Representation>
 8010a16:	4004      	ands	r4, r0
 8010a18:	e7c2      	b.n	80109a0 <uxr_serialize_CREATE_Payload+0x44>
 8010a1a:	f106 0108 	add.w	r1, r6, #8
 8010a1e:	4638      	mov	r0, r7
 8010a20:	f7ff fb62 	bl	80100e8 <uxr_serialize_AGENT_Representation>
 8010a24:	4004      	ands	r4, r0
 8010a26:	e7bb      	b.n	80109a0 <uxr_serialize_CREATE_Payload+0x44>
 8010a28:	7a31      	ldrb	r1, [r6, #8]
 8010a2a:	4638      	mov	r0, r7
 8010a2c:	f7fc fcf8 	bl	800d420 <ucdr_serialize_uint8_t>
 8010a30:	4605      	mov	r5, r0
 8010a32:	b130      	cbz	r0, 8010a42 <uxr_serialize_CREATE_Payload+0xe6>
 8010a34:	7a33      	ldrb	r3, [r6, #8]
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d011      	beq.n	8010a5e <uxr_serialize_CREATE_Payload+0x102>
 8010a3a:	2b03      	cmp	r3, #3
 8010a3c:	d015      	beq.n	8010a6a <uxr_serialize_CREATE_Payload+0x10e>
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d00d      	beq.n	8010a5e <uxr_serialize_CREATE_Payload+0x102>
 8010a42:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8010a46:	4638      	mov	r0, r7
 8010a48:	f7fd fa26 	bl	800de98 <ucdr_serialize_int16_t>
 8010a4c:	4028      	ands	r0, r5
 8010a4e:	4004      	ands	r4, r0
 8010a50:	e7a6      	b.n	80109a0 <uxr_serialize_CREATE_Payload+0x44>
 8010a52:	68f1      	ldr	r1, [r6, #12]
 8010a54:	4638      	mov	r0, r7
 8010a56:	f002 fc43 	bl	80132e0 <ucdr_serialize_string>
 8010a5a:	4605      	mov	r5, r0
 8010a5c:	e7cd      	b.n	80109fa <uxr_serialize_CREATE_Payload+0x9e>
 8010a5e:	68f1      	ldr	r1, [r6, #12]
 8010a60:	4638      	mov	r0, r7
 8010a62:	f002 fc3d 	bl	80132e0 <ucdr_serialize_string>
 8010a66:	4605      	mov	r5, r0
 8010a68:	e7eb      	b.n	8010a42 <uxr_serialize_CREATE_Payload+0xe6>
 8010a6a:	68f2      	ldr	r2, [r6, #12]
 8010a6c:	f106 0110 	add.w	r1, r6, #16
 8010a70:	4638      	mov	r0, r7
 8010a72:	f002 fc09 	bl	8013288 <ucdr_serialize_sequence_uint8_t>
 8010a76:	4605      	mov	r5, r0
 8010a78:	e7e3      	b.n	8010a42 <uxr_serialize_CREATE_Payload+0xe6>
 8010a7a:	bf00      	nop

08010a7c <uxr_deserialize_GET_INFO_Payload>:
 8010a7c:	b570      	push	{r4, r5, r6, lr}
 8010a7e:	2202      	movs	r2, #2
 8010a80:	4605      	mov	r5, r0
 8010a82:	460e      	mov	r6, r1
 8010a84:	f002 fb6c 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010a88:	2202      	movs	r2, #2
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	18b1      	adds	r1, r6, r2
 8010a90:	f002 fb66 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010a94:	4603      	mov	r3, r0
 8010a96:	1d31      	adds	r1, r6, #4
 8010a98:	4628      	mov	r0, r5
 8010a9a:	401c      	ands	r4, r3
 8010a9c:	f7fd f806 	bl	800daac <ucdr_deserialize_uint32_t>
 8010aa0:	b2e4      	uxtb	r4, r4
 8010aa2:	4020      	ands	r0, r4
 8010aa4:	bd70      	pop	{r4, r5, r6, pc}
 8010aa6:	bf00      	nop

08010aa8 <uxr_serialize_DELETE_Payload>:
 8010aa8:	b570      	push	{r4, r5, r6, lr}
 8010aaa:	2202      	movs	r2, #2
 8010aac:	4605      	mov	r5, r0
 8010aae:	460e      	mov	r6, r1
 8010ab0:	f002 faf2 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010ab4:	2202      	movs	r2, #2
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	4628      	mov	r0, r5
 8010aba:	18b1      	adds	r1, r6, r2
 8010abc:	f002 faec 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010ac0:	4020      	ands	r0, r4
 8010ac2:	b2c0      	uxtb	r0, r0
 8010ac4:	bd70      	pop	{r4, r5, r6, pc}
 8010ac6:	bf00      	nop

08010ac8 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010acc:	460e      	mov	r6, r1
 8010ace:	4605      	mov	r5, r0
 8010ad0:	f7fc fcbc 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	1c71      	adds	r1, r6, #1
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f7fc fcb7 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010ade:	2204      	movs	r2, #4
 8010ae0:	4681      	mov	r9, r0
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	18b1      	adds	r1, r6, r2
 8010ae6:	f002 fb3b 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010aea:	f106 0108 	add.w	r1, r6, #8
 8010aee:	4680      	mov	r8, r0
 8010af0:	2202      	movs	r2, #2
 8010af2:	4628      	mov	r0, r5
 8010af4:	f002 fb34 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010af8:	ea04 0309 	and.w	r3, r4, r9
 8010afc:	4607      	mov	r7, r0
 8010afe:	2202      	movs	r2, #2
 8010b00:	b2db      	uxtb	r3, r3
 8010b02:	f106 010a 	add.w	r1, r6, #10
 8010b06:	4628      	mov	r0, r5
 8010b08:	ea03 0408 	and.w	r4, r3, r8
 8010b0c:	f002 fb28 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010b10:	4603      	mov	r3, r0
 8010b12:	4628      	mov	r0, r5
 8010b14:	403c      	ands	r4, r7
 8010b16:	f106 010c 	add.w	r1, r6, #12
 8010b1a:	461d      	mov	r5, r3
 8010b1c:	f7fc fc68 	bl	800d3f0 <ucdr_deserialize_bool>
 8010b20:	4025      	ands	r5, r4
 8010b22:	4028      	ands	r0, r5
 8010b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010b28 <uxr_deserialize_STATUS_Payload>:
 8010b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b2c:	2202      	movs	r2, #2
 8010b2e:	4606      	mov	r6, r0
 8010b30:	460f      	mov	r7, r1
 8010b32:	f002 fb15 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010b36:	2202      	movs	r2, #2
 8010b38:	4605      	mov	r5, r0
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	18b9      	adds	r1, r7, r2
 8010b3e:	f002 fb0f 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010b42:	4680      	mov	r8, r0
 8010b44:	1d39      	adds	r1, r7, #4
 8010b46:	4630      	mov	r0, r6
 8010b48:	f7fc fc80 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010b4c:	ea05 0508 	and.w	r5, r5, r8
 8010b50:	4604      	mov	r4, r0
 8010b52:	1d79      	adds	r1, r7, #5
 8010b54:	4630      	mov	r0, r6
 8010b56:	402c      	ands	r4, r5
 8010b58:	f7fc fc78 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010b5c:	4020      	ands	r0, r4
 8010b5e:	b2c0      	uxtb	r0, r0
 8010b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b64 <uxr_serialize_INFO_Payload>:
 8010b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b68:	2202      	movs	r2, #2
 8010b6a:	460c      	mov	r4, r1
 8010b6c:	4605      	mov	r5, r0
 8010b6e:	f002 fa93 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010b72:	2202      	movs	r2, #2
 8010b74:	4680      	mov	r8, r0
 8010b76:	4628      	mov	r0, r5
 8010b78:	18a1      	adds	r1, r4, r2
 8010b7a:	f002 fa8d 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010b7e:	4607      	mov	r7, r0
 8010b80:	7921      	ldrb	r1, [r4, #4]
 8010b82:	4628      	mov	r0, r5
 8010b84:	f7fc fc4c 	bl	800d420 <ucdr_serialize_uint8_t>
 8010b88:	ea08 0807 	and.w	r8, r8, r7
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	7961      	ldrb	r1, [r4, #5]
 8010b90:	4628      	mov	r0, r5
 8010b92:	ea06 0608 	and.w	r6, r6, r8
 8010b96:	f7fc fc43 	bl	800d420 <ucdr_serialize_uint8_t>
 8010b9a:	7a21      	ldrb	r1, [r4, #8]
 8010b9c:	4030      	ands	r0, r6
 8010b9e:	b2c7      	uxtb	r7, r0
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	f7fc fc0f 	bl	800d3c4 <ucdr_serialize_bool>
 8010ba6:	7a23      	ldrb	r3, [r4, #8]
 8010ba8:	4606      	mov	r6, r0
 8010baa:	b96b      	cbnz	r3, 8010bc8 <uxr_serialize_INFO_Payload+0x64>
 8010bac:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	f7fc fc07 	bl	800d3c4 <ucdr_serialize_bool>
 8010bb6:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8010bba:	4030      	ands	r0, r6
 8010bbc:	b2c6      	uxtb	r6, r0
 8010bbe:	b983      	cbnz	r3, 8010be2 <uxr_serialize_INFO_Payload+0x7e>
 8010bc0:	ea06 0007 	and.w	r0, r6, r7
 8010bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc8:	7b21      	ldrb	r1, [r4, #12]
 8010bca:	4628      	mov	r0, r5
 8010bcc:	f7fc fc28 	bl	800d420 <ucdr_serialize_uint8_t>
 8010bd0:	b188      	cbz	r0, 8010bf6 <uxr_serialize_INFO_Payload+0x92>
 8010bd2:	f104 010c 	add.w	r1, r4, #12
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f7ff faf8 	bl	80101cc <uxr_serialize_ObjectVariant.part.0>
 8010bdc:	4030      	ands	r0, r6
 8010bde:	b2c6      	uxtb	r6, r0
 8010be0:	e7e4      	b.n	8010bac <uxr_serialize_INFO_Payload+0x48>
 8010be2:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8010be6:	4628      	mov	r0, r5
 8010be8:	f7ff fdb8 	bl	801075c <uxr_serialize_ActivityInfoVariant>
 8010bec:	4006      	ands	r6, r0
 8010bee:	ea06 0007 	and.w	r0, r6, r7
 8010bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	e7d8      	b.n	8010bac <uxr_serialize_INFO_Payload+0x48>
 8010bfa:	bf00      	nop

08010bfc <uxr_serialize_READ_DATA_Payload>:
 8010bfc:	b570      	push	{r4, r5, r6, lr}
 8010bfe:	2202      	movs	r2, #2
 8010c00:	4605      	mov	r5, r0
 8010c02:	460e      	mov	r6, r1
 8010c04:	f002 fa48 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010c08:	2202      	movs	r2, #2
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	18b1      	adds	r1, r6, r2
 8010c10:	f002 fa42 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010c14:	4603      	mov	r3, r0
 8010c16:	1d31      	adds	r1, r6, #4
 8010c18:	4628      	mov	r0, r5
 8010c1a:	401c      	ands	r4, r3
 8010c1c:	f7ff fe5e 	bl	80108dc <uxr_serialize_ReadSpecification>
 8010c20:	b2e4      	uxtb	r4, r4
 8010c22:	4020      	ands	r0, r4
 8010c24:	bd70      	pop	{r4, r5, r6, pc}
 8010c26:	bf00      	nop

08010c28 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010c28:	b570      	push	{r4, r5, r6, lr}
 8010c2a:	2202      	movs	r2, #2
 8010c2c:	4605      	mov	r5, r0
 8010c2e:	460e      	mov	r6, r1
 8010c30:	f002 fa32 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010c34:	2202      	movs	r2, #2
 8010c36:	4604      	mov	r4, r0
 8010c38:	4628      	mov	r0, r5
 8010c3a:	18b1      	adds	r1, r6, r2
 8010c3c:	f002 fa2c 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010c40:	4020      	ands	r0, r4
 8010c42:	b2c0      	uxtb	r0, r0
 8010c44:	bd70      	pop	{r4, r5, r6, pc}
 8010c46:	bf00      	nop

08010c48 <uxr_serialize_ACKNACK_Payload>:
 8010c48:	b570      	push	{r4, r5, r6, lr}
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	4605      	mov	r5, r0
 8010c4e:	460e      	mov	r6, r1
 8010c50:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010c54:	f7fc fc10 	bl	800d478 <ucdr_serialize_uint16_t>
 8010c58:	2202      	movs	r2, #2
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	4604      	mov	r4, r0
 8010c5e:	4628      	mov	r0, r5
 8010c60:	f002 fa1a 	bl	8013098 <ucdr_serialize_array_uint8_t>
 8010c64:	4603      	mov	r3, r0
 8010c66:	7931      	ldrb	r1, [r6, #4]
 8010c68:	4628      	mov	r0, r5
 8010c6a:	401c      	ands	r4, r3
 8010c6c:	f7fc fbd8 	bl	800d420 <ucdr_serialize_uint8_t>
 8010c70:	b2e4      	uxtb	r4, r4
 8010c72:	4020      	ands	r0, r4
 8010c74:	bd70      	pop	{r4, r5, r6, pc}
 8010c76:	bf00      	nop

08010c78 <uxr_deserialize_ACKNACK_Payload>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	460e      	mov	r6, r1
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	f7fc fcfb 	bl	800d678 <ucdr_deserialize_uint16_t>
 8010c82:	2202      	movs	r2, #2
 8010c84:	4604      	mov	r4, r0
 8010c86:	4628      	mov	r0, r5
 8010c88:	18b1      	adds	r1, r6, r2
 8010c8a:	f002 fa69 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	1d31      	adds	r1, r6, #4
 8010c92:	4628      	mov	r0, r5
 8010c94:	401c      	ands	r4, r3
 8010c96:	f7fc fbd9 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010c9a:	b2e4      	uxtb	r4, r4
 8010c9c:	4020      	ands	r0, r4
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}

08010ca0 <uxr_serialize_HEARTBEAT_Payload>:
 8010ca0:	b570      	push	{r4, r5, r6, lr}
 8010ca2:	460d      	mov	r5, r1
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	8809      	ldrh	r1, [r1, #0]
 8010ca8:	f7fc fbe6 	bl	800d478 <ucdr_serialize_uint16_t>
 8010cac:	8869      	ldrh	r1, [r5, #2]
 8010cae:	4604      	mov	r4, r0
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f7fc fbe1 	bl	800d478 <ucdr_serialize_uint16_t>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	7929      	ldrb	r1, [r5, #4]
 8010cba:	4630      	mov	r0, r6
 8010cbc:	401c      	ands	r4, r3
 8010cbe:	f7fc fbaf 	bl	800d420 <ucdr_serialize_uint8_t>
 8010cc2:	b2e4      	uxtb	r4, r4
 8010cc4:	4020      	ands	r0, r4
 8010cc6:	bd70      	pop	{r4, r5, r6, pc}

08010cc8 <uxr_deserialize_HEARTBEAT_Payload>:
 8010cc8:	b570      	push	{r4, r5, r6, lr}
 8010cca:	460e      	mov	r6, r1
 8010ccc:	4605      	mov	r5, r0
 8010cce:	f7fc fcd3 	bl	800d678 <ucdr_deserialize_uint16_t>
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	1cb1      	adds	r1, r6, #2
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f7fc fcce 	bl	800d678 <ucdr_deserialize_uint16_t>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	1d31      	adds	r1, r6, #4
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	401c      	ands	r4, r3
 8010ce4:	f7fc fbb2 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010ce8:	b2e4      	uxtb	r4, r4
 8010cea:	4020      	ands	r0, r4
 8010cec:	bd70      	pop	{r4, r5, r6, pc}
 8010cee:	bf00      	nop

08010cf0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf4:	460e      	mov	r6, r1
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	f7fd fa5a 	bl	800e1b0 <ucdr_deserialize_int32_t>
 8010cfc:	4607      	mov	r7, r0
 8010cfe:	1d31      	adds	r1, r6, #4
 8010d00:	4628      	mov	r0, r5
 8010d02:	f7fc fed3 	bl	800daac <ucdr_deserialize_uint32_t>
 8010d06:	4680      	mov	r8, r0
 8010d08:	f106 0108 	add.w	r1, r6, #8
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	f7fd fa4f 	bl	800e1b0 <ucdr_deserialize_int32_t>
 8010d12:	ea07 0708 	and.w	r7, r7, r8
 8010d16:	4604      	mov	r4, r0
 8010d18:	f106 010c 	add.w	r1, r6, #12
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	403c      	ands	r4, r7
 8010d20:	f7fc fec4 	bl	800daac <ucdr_deserialize_uint32_t>
 8010d24:	f106 0110 	add.w	r1, r6, #16
 8010d28:	4004      	ands	r4, r0
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f7fd fa40 	bl	800e1b0 <ucdr_deserialize_int32_t>
 8010d30:	4603      	mov	r3, r0
 8010d32:	b2e4      	uxtb	r4, r4
 8010d34:	4628      	mov	r0, r5
 8010d36:	461d      	mov	r5, r3
 8010d38:	f106 0114 	add.w	r1, r6, #20
 8010d3c:	f7fc feb6 	bl	800daac <ucdr_deserialize_uint32_t>
 8010d40:	402c      	ands	r4, r5
 8010d42:	4020      	ands	r0, r4
 8010d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d48 <uxr_deserialize_SampleIdentity>:
 8010d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	460d      	mov	r5, r1
 8010d50:	220c      	movs	r2, #12
 8010d52:	f002 fa05 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010d56:	2203      	movs	r2, #3
 8010d58:	f105 010c 	add.w	r1, r5, #12
 8010d5c:	4607      	mov	r7, r0
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f002 f9fe 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8010d64:	f105 010f 	add.w	r1, r5, #15
 8010d68:	4680      	mov	r8, r0
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f7fc fb6e 	bl	800d44c <ucdr_deserialize_uint8_t>
 8010d70:	f105 0110 	add.w	r1, r5, #16
 8010d74:	4606      	mov	r6, r0
 8010d76:	4620      	mov	r0, r4
 8010d78:	f7fd fa1a 	bl	800e1b0 <ucdr_deserialize_int32_t>
 8010d7c:	ea07 0708 	and.w	r7, r7, r8
 8010d80:	4603      	mov	r3, r0
 8010d82:	4620      	mov	r0, r4
 8010d84:	403e      	ands	r6, r7
 8010d86:	f105 0114 	add.w	r1, r5, #20
 8010d8a:	461c      	mov	r4, r3
 8010d8c:	f7fc fe8e 	bl	800daac <ucdr_deserialize_uint32_t>
 8010d90:	4034      	ands	r4, r6
 8010d92:	4020      	ands	r0, r4
 8010d94:	b2c0      	uxtb	r0, r0
 8010d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d9a:	bf00      	nop

08010d9c <rcl_convert_rmw_ret_to_rcl_ret>:
 8010d9c:	280b      	cmp	r0, #11
 8010d9e:	dc0d      	bgt.n	8010dbc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	db09      	blt.n	8010db8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010da4:	280b      	cmp	r0, #11
 8010da6:	d807      	bhi.n	8010db8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010da8:	e8df f000 	tbb	[pc, r0]
 8010dac:	07060607 	.word	0x07060607
 8010db0:	06060606 	.word	0x06060606
 8010db4:	07070606 	.word	0x07070606
 8010db8:	2001      	movs	r0, #1
 8010dba:	4770      	bx	lr
 8010dbc:	28cb      	cmp	r0, #203	; 0xcb
 8010dbe:	bf18      	it	ne
 8010dc0:	2001      	movne	r0, #1
 8010dc2:	4770      	bx	lr

08010dc4 <rcl_get_zero_initialized_context>:
 8010dc4:	4a03      	ldr	r2, [pc, #12]	; (8010dd4 <rcl_get_zero_initialized_context+0x10>)
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	4770      	bx	lr
 8010dd4:	08016e24 	.word	0x08016e24

08010dd8 <rcl_context_is_valid>:
 8010dd8:	b118      	cbz	r0, 8010de2 <rcl_context_is_valid+0xa>
 8010dda:	6840      	ldr	r0, [r0, #4]
 8010ddc:	3800      	subs	r0, #0
 8010dde:	bf18      	it	ne
 8010de0:	2001      	movne	r0, #1
 8010de2:	4770      	bx	lr

08010de4 <__cleanup_context>:
 8010de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010de8:	4606      	mov	r6, r0
 8010dea:	2300      	movs	r3, #0
 8010dec:	6800      	ldr	r0, [r0, #0]
 8010dee:	6073      	str	r3, [r6, #4]
 8010df0:	2800      	cmp	r0, #0
 8010df2:	d049      	beq.n	8010e88 <__cleanup_context+0xa4>
 8010df4:	6947      	ldr	r7, [r0, #20]
 8010df6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010dfa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010dfe:	b137      	cbz	r7, 8010e0e <__cleanup_context+0x2a>
 8010e00:	3014      	adds	r0, #20
 8010e02:	f000 f9bd 	bl	8011180 <rcl_init_options_fini>
 8010e06:	4607      	mov	r7, r0
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	d144      	bne.n	8010e96 <__cleanup_context+0xb2>
 8010e0c:	6830      	ldr	r0, [r6, #0]
 8010e0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010e10:	b143      	cbz	r3, 8010e24 <__cleanup_context+0x40>
 8010e12:	3028      	adds	r0, #40	; 0x28
 8010e14:	f001 fe20 	bl	8012a58 <rmw_context_fini>
 8010e18:	b118      	cbz	r0, 8010e22 <__cleanup_context+0x3e>
 8010e1a:	2f00      	cmp	r7, #0
 8010e1c:	d03e      	beq.n	8010e9c <__cleanup_context+0xb8>
 8010e1e:	f7fb fdc3 	bl	800c9a8 <rcutils_reset_error>
 8010e22:	6830      	ldr	r0, [r6, #0]
 8010e24:	6a03      	ldr	r3, [r0, #32]
 8010e26:	b1db      	cbz	r3, 8010e60 <__cleanup_context+0x7c>
 8010e28:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010e2c:	2a01      	cmp	r2, #1
 8010e2e:	f17c 0100 	sbcs.w	r1, ip, #0
 8010e32:	db11      	blt.n	8010e58 <__cleanup_context+0x74>
 8010e34:	2400      	movs	r4, #0
 8010e36:	4625      	mov	r5, r4
 8010e38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e3c:	4649      	mov	r1, r9
 8010e3e:	b1b8      	cbz	r0, 8010e70 <__cleanup_context+0x8c>
 8010e40:	47c0      	blx	r8
 8010e42:	6833      	ldr	r3, [r6, #0]
 8010e44:	3401      	adds	r4, #1
 8010e46:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010e4a:	f145 0500 	adc.w	r5, r5, #0
 8010e4e:	6a1b      	ldr	r3, [r3, #32]
 8010e50:	4294      	cmp	r4, r2
 8010e52:	eb75 010c 	sbcs.w	r1, r5, ip
 8010e56:	dbef      	blt.n	8010e38 <__cleanup_context+0x54>
 8010e58:	4618      	mov	r0, r3
 8010e5a:	4649      	mov	r1, r9
 8010e5c:	47c0      	blx	r8
 8010e5e:	6830      	ldr	r0, [r6, #0]
 8010e60:	4649      	mov	r1, r9
 8010e62:	47c0      	blx	r8
 8010e64:	2300      	movs	r3, #0
 8010e66:	4638      	mov	r0, r7
 8010e68:	e9c6 3300 	strd	r3, r3, [r6]
 8010e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e70:	3401      	adds	r4, #1
 8010e72:	f145 0500 	adc.w	r5, r5, #0
 8010e76:	4294      	cmp	r4, r2
 8010e78:	eb75 010c 	sbcs.w	r1, r5, ip
 8010e7c:	dbdc      	blt.n	8010e38 <__cleanup_context+0x54>
 8010e7e:	4618      	mov	r0, r3
 8010e80:	4649      	mov	r1, r9
 8010e82:	47c0      	blx	r8
 8010e84:	6830      	ldr	r0, [r6, #0]
 8010e86:	e7eb      	b.n	8010e60 <__cleanup_context+0x7c>
 8010e88:	4607      	mov	r7, r0
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	4638      	mov	r0, r7
 8010e8e:	e9c6 3300 	strd	r3, r3, [r6]
 8010e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e96:	f7fb fd87 	bl	800c9a8 <rcutils_reset_error>
 8010e9a:	e7b7      	b.n	8010e0c <__cleanup_context+0x28>
 8010e9c:	f7ff ff7e 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8010ea0:	4607      	mov	r7, r0
 8010ea2:	e7bc      	b.n	8010e1e <__cleanup_context+0x3a>

08010ea4 <rcl_init>:
 8010ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea8:	1e05      	subs	r5, r0, #0
 8010eaa:	b09e      	sub	sp, #120	; 0x78
 8010eac:	460e      	mov	r6, r1
 8010eae:	4690      	mov	r8, r2
 8010eb0:	461f      	mov	r7, r3
 8010eb2:	f340 809f 	ble.w	8010ff4 <rcl_init+0x150>
 8010eb6:	2900      	cmp	r1, #0
 8010eb8:	f000 809f 	beq.w	8010ffa <rcl_init+0x156>
 8010ebc:	f1a1 0e04 	sub.w	lr, r1, #4
 8010ec0:	f04f 0c00 	mov.w	ip, #0
 8010ec4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8010ec8:	f10c 0c01 	add.w	ip, ip, #1
 8010ecc:	2c00      	cmp	r4, #0
 8010ece:	f000 8094 	beq.w	8010ffa <rcl_init+0x156>
 8010ed2:	4565      	cmp	r5, ip
 8010ed4:	d1f6      	bne.n	8010ec4 <rcl_init+0x20>
 8010ed6:	f1b8 0f00 	cmp.w	r8, #0
 8010eda:	f000 808e 	beq.w	8010ffa <rcl_init+0x156>
 8010ede:	f8d8 4000 	ldr.w	r4, [r8]
 8010ee2:	2c00      	cmp	r4, #0
 8010ee4:	f000 8089 	beq.w	8010ffa <rcl_init+0x156>
 8010ee8:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8010eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010eee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	a819      	add	r0, sp, #100	; 0x64
 8010ef6:	f8cc 3000 	str.w	r3, [ip]
 8010efa:	f7fb fd31 	bl	800c960 <rcutils_allocator_is_valid>
 8010efe:	f080 0001 	eor.w	r0, r0, #1
 8010f02:	b2c0      	uxtb	r0, r0
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d178      	bne.n	8010ffa <rcl_init+0x156>
 8010f08:	2f00      	cmp	r7, #0
 8010f0a:	d076      	beq.n	8010ffa <rcl_init+0x156>
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d178      	bne.n	8011004 <rcl_init+0x160>
 8010f12:	2178      	movs	r1, #120	; 0x78
 8010f14:	2001      	movs	r0, #1
 8010f16:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8010f1a:	4798      	blx	r3
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	6038      	str	r0, [r7, #0]
 8010f20:	2800      	cmp	r0, #0
 8010f22:	f000 80b6 	beq.w	8011092 <rcl_init+0x1ee>
 8010f26:	a802      	add	r0, sp, #8
 8010f28:	f001 f9c2 	bl	80122b0 <rmw_get_zero_initialized_context>
 8010f2c:	a902      	add	r1, sp, #8
 8010f2e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010f32:	2250      	movs	r2, #80	; 0x50
 8010f34:	f004 fec7 	bl	8015cc6 <memcpy>
 8010f38:	ac19      	add	r4, sp, #100	; 0x64
 8010f3a:	f8d7 e000 	ldr.w	lr, [r7]
 8010f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f40:	46f4      	mov	ip, lr
 8010f42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	f10e 0114 	add.w	r1, lr, #20
 8010f4c:	4640      	mov	r0, r8
 8010f4e:	f8cc 3000 	str.w	r3, [ip]
 8010f52:	f000 f93f 	bl	80111d4 <rcl_init_options_copy>
 8010f56:	4604      	mov	r4, r0
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d144      	bne.n	8010fe6 <rcl_init+0x142>
 8010f5c:	f8d7 9000 	ldr.w	r9, [r7]
 8010f60:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8010f64:	f8c9 0020 	str.w	r0, [r9, #32]
 8010f68:	f8c9 5018 	str.w	r5, [r9, #24]
 8010f6c:	f8c9 801c 	str.w	r8, [r9, #28]
 8010f70:	2d00      	cmp	r5, #0
 8010f72:	d04e      	beq.n	8011012 <rcl_init+0x16e>
 8010f74:	2e00      	cmp	r6, #0
 8010f76:	d04c      	beq.n	8011012 <rcl_init+0x16e>
 8010f78:	2104      	movs	r1, #4
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8010f80:	4798      	blx	r3
 8010f82:	f8c9 0020 	str.w	r0, [r9, #32]
 8010f86:	f8d7 9000 	ldr.w	r9, [r7]
 8010f8a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010f8e:	46ca      	mov	sl, r9
 8010f90:	b343      	cbz	r3, 8010fe4 <rcl_init+0x140>
 8010f92:	2d01      	cmp	r5, #1
 8010f94:	f178 0300 	sbcs.w	r3, r8, #0
 8010f98:	db3b      	blt.n	8011012 <rcl_init+0x16e>
 8010f9a:	2400      	movs	r4, #0
 8010f9c:	3e04      	subs	r6, #4
 8010f9e:	46a1      	mov	r9, r4
 8010fa0:	e00b      	b.n	8010fba <rcl_init+0x116>
 8010fa2:	6831      	ldr	r1, [r6, #0]
 8010fa4:	f004 fe8f 	bl	8015cc6 <memcpy>
 8010fa8:	3401      	adds	r4, #1
 8010faa:	f149 0900 	adc.w	r9, r9, #0
 8010fae:	45c8      	cmp	r8, r9
 8010fb0:	bf08      	it	eq
 8010fb2:	42a5      	cmpeq	r5, r4
 8010fb4:	d02b      	beq.n	801100e <rcl_init+0x16a>
 8010fb6:	f8d7 a000 	ldr.w	sl, [r7]
 8010fba:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010fbe:	f7ef f9a1 	bl	8000304 <strlen>
 8010fc2:	1c42      	adds	r2, r0, #1
 8010fc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010fc6:	4610      	mov	r0, r2
 8010fc8:	991d      	ldr	r1, [sp, #116]	; 0x74
 8010fca:	f8da a020 	ldr.w	sl, [sl, #32]
 8010fce:	9201      	str	r2, [sp, #4]
 8010fd0:	4798      	blx	r3
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8010fd8:	6a1b      	ldr	r3, [r3, #32]
 8010fda:	9a01      	ldr	r2, [sp, #4]
 8010fdc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d1de      	bne.n	8010fa2 <rcl_init+0xfe>
 8010fe4:	240a      	movs	r4, #10
 8010fe6:	4638      	mov	r0, r7
 8010fe8:	f7ff fefc 	bl	8010de4 <__cleanup_context>
 8010fec:	4620      	mov	r0, r4
 8010fee:	b01e      	add	sp, #120	; 0x78
 8010ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ff4:	2900      	cmp	r1, #0
 8010ff6:	f43f af6e 	beq.w	8010ed6 <rcl_init+0x32>
 8010ffa:	240b      	movs	r4, #11
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	b01e      	add	sp, #120	; 0x78
 8011000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011004:	2464      	movs	r4, #100	; 0x64
 8011006:	4620      	mov	r0, r4
 8011008:	b01e      	add	sp, #120	; 0x78
 801100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801100e:	f8d7 9000 	ldr.w	r9, [r7]
 8011012:	4926      	ldr	r1, [pc, #152]	; (80110ac <rcl_init+0x208>)
 8011014:	680b      	ldr	r3, [r1, #0]
 8011016:	3301      	adds	r3, #1
 8011018:	d036      	beq.n	8011088 <rcl_init+0x1e4>
 801101a:	461a      	mov	r2, r3
 801101c:	2400      	movs	r4, #0
 801101e:	600b      	str	r3, [r1, #0]
 8011020:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011024:	607b      	str	r3, [r7, #4]
 8011026:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011028:	3301      	adds	r3, #1
 801102a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801102e:	d034      	beq.n	801109a <rcl_init+0x1f6>
 8011030:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8011034:	b93b      	cbnz	r3, 8011046 <rcl_init+0x1a2>
 8011036:	3030      	adds	r0, #48	; 0x30
 8011038:	f000 f93a 	bl	80112b0 <rcl_get_localhost_only>
 801103c:	4604      	mov	r4, r0
 801103e:	2800      	cmp	r0, #0
 8011040:	d1d1      	bne.n	8010fe6 <rcl_init+0x142>
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	6958      	ldr	r0, [r3, #20]
 8011046:	aa18      	add	r2, sp, #96	; 0x60
 8011048:	a917      	add	r1, sp, #92	; 0x5c
 801104a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801104c:	f000 fdce 	bl	8011bec <rcl_validate_enclave_name>
 8011050:	4604      	mov	r4, r0
 8011052:	2800      	cmp	r0, #0
 8011054:	d1c7      	bne.n	8010fe6 <rcl_init+0x142>
 8011056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011058:	b9eb      	cbnz	r3, 8011096 <rcl_init+0x1f2>
 801105a:	6839      	ldr	r1, [r7, #0]
 801105c:	694b      	ldr	r3, [r1, #20]
 801105e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8011062:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011064:	f000 fc72 	bl	801194c <rcl_get_security_options_from_environment>
 8011068:	4604      	mov	r4, r0
 801106a:	2800      	cmp	r0, #0
 801106c:	d1bb      	bne.n	8010fe6 <rcl_init+0x142>
 801106e:	6839      	ldr	r1, [r7, #0]
 8011070:	6948      	ldr	r0, [r1, #20]
 8011072:	3128      	adds	r1, #40	; 0x28
 8011074:	3018      	adds	r0, #24
 8011076:	f001 fbb9 	bl	80127ec <rmw_init>
 801107a:	4604      	mov	r4, r0
 801107c:	2800      	cmp	r0, #0
 801107e:	d0bd      	beq.n	8010ffc <rcl_init+0x158>
 8011080:	f7ff fe8c 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8011084:	4604      	mov	r4, r0
 8011086:	e7ae      	b.n	8010fe6 <rcl_init+0x142>
 8011088:	2201      	movs	r2, #1
 801108a:	461c      	mov	r4, r3
 801108c:	600a      	str	r2, [r1, #0]
 801108e:	4613      	mov	r3, r2
 8011090:	e7c6      	b.n	8011020 <rcl_init+0x17c>
 8011092:	240a      	movs	r4, #10
 8011094:	e7b2      	b.n	8010ffc <rcl_init+0x158>
 8011096:	2401      	movs	r4, #1
 8011098:	e7a5      	b.n	8010fe6 <rcl_init+0x142>
 801109a:	3024      	adds	r0, #36	; 0x24
 801109c:	f003 fcd2 	bl	8014a44 <rcl_get_default_domain_id>
 80110a0:	4604      	mov	r4, r0
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d19f      	bne.n	8010fe6 <rcl_init+0x142>
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	6958      	ldr	r0, [r3, #20]
 80110aa:	e7c1      	b.n	8011030 <rcl_init+0x18c>
 80110ac:	24010aa4 	.word	0x24010aa4

080110b0 <rcl_get_zero_initialized_init_options>:
 80110b0:	2000      	movs	r0, #0
 80110b2:	4770      	bx	lr

080110b4 <rcl_init_options_init>:
 80110b4:	b084      	sub	sp, #16
 80110b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110b8:	b097      	sub	sp, #92	; 0x5c
 80110ba:	ae1d      	add	r6, sp, #116	; 0x74
 80110bc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80110c0:	2800      	cmp	r0, #0
 80110c2:	d058      	beq.n	8011176 <rcl_init_options_init+0xc2>
 80110c4:	6803      	ldr	r3, [r0, #0]
 80110c6:	4605      	mov	r5, r0
 80110c8:	b133      	cbz	r3, 80110d8 <rcl_init_options_init+0x24>
 80110ca:	2464      	movs	r4, #100	; 0x64
 80110cc:	4620      	mov	r0, r4
 80110ce:	b017      	add	sp, #92	; 0x5c
 80110d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80110d4:	b004      	add	sp, #16
 80110d6:	4770      	bx	lr
 80110d8:	4630      	mov	r0, r6
 80110da:	f7fb fc41 	bl	800c960 <rcutils_allocator_is_valid>
 80110de:	2800      	cmp	r0, #0
 80110e0:	d049      	beq.n	8011176 <rcl_init_options_init+0xc2>
 80110e2:	46b4      	mov	ip, r6
 80110e4:	ac11      	add	r4, sp, #68	; 0x44
 80110e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80110ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110ec:	f8dc 3000 	ldr.w	r3, [ip]
 80110f0:	2050      	movs	r0, #80	; 0x50
 80110f2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80110f4:	6023      	str	r3, [r4, #0]
 80110f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110f8:	4798      	blx	r3
 80110fa:	4604      	mov	r4, r0
 80110fc:	6028      	str	r0, [r5, #0]
 80110fe:	2800      	cmp	r0, #0
 8011100:	d03b      	beq.n	801117a <rcl_init_options_init+0xc6>
 8011102:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011106:	4686      	mov	lr, r0
 8011108:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801110c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011110:	f8dc 3000 	ldr.w	r3, [ip]
 8011114:	a802      	add	r0, sp, #8
 8011116:	f8ce 3000 	str.w	r3, [lr]
 801111a:	f001 f8dd 	bl	80122d8 <rmw_get_zero_initialized_init_options>
 801111e:	f10d 0e08 	add.w	lr, sp, #8
 8011122:	f104 0c18 	add.w	ip, r4, #24
 8011126:	682f      	ldr	r7, [r5, #0]
 8011128:	ac20      	add	r4, sp, #128	; 0x80
 801112a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801112e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801113a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801113e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011142:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011146:	e88c 0003 	stmia.w	ip, {r0, r1}
 801114a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801114e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011152:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8011156:	f107 0018 	add.w	r0, r7, #24
 801115a:	f001 fa49 	bl	80125f0 <rmw_init_options_init>
 801115e:	4604      	mov	r4, r0
 8011160:	2800      	cmp	r0, #0
 8011162:	d0b3      	beq.n	80110cc <rcl_init_options_init+0x18>
 8011164:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011166:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011168:	6828      	ldr	r0, [r5, #0]
 801116a:	4798      	blx	r3
 801116c:	4620      	mov	r0, r4
 801116e:	f7ff fe15 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8011172:	4604      	mov	r4, r0
 8011174:	e7aa      	b.n	80110cc <rcl_init_options_init+0x18>
 8011176:	240b      	movs	r4, #11
 8011178:	e7a8      	b.n	80110cc <rcl_init_options_init+0x18>
 801117a:	240a      	movs	r4, #10
 801117c:	e7a6      	b.n	80110cc <rcl_init_options_init+0x18>
 801117e:	bf00      	nop

08011180 <rcl_init_options_fini>:
 8011180:	b530      	push	{r4, r5, lr}
 8011182:	b087      	sub	sp, #28
 8011184:	b1f0      	cbz	r0, 80111c4 <rcl_init_options_fini+0x44>
 8011186:	6803      	ldr	r3, [r0, #0]
 8011188:	4604      	mov	r4, r0
 801118a:	b1db      	cbz	r3, 80111c4 <rcl_init_options_fini+0x44>
 801118c:	469c      	mov	ip, r3
 801118e:	f10d 0e04 	add.w	lr, sp, #4
 8011192:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011196:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801119a:	f8dc 3000 	ldr.w	r3, [ip]
 801119e:	a801      	add	r0, sp, #4
 80111a0:	f8ce 3000 	str.w	r3, [lr]
 80111a4:	f7fb fbdc 	bl	800c960 <rcutils_allocator_is_valid>
 80111a8:	b160      	cbz	r0, 80111c4 <rcl_init_options_fini+0x44>
 80111aa:	6820      	ldr	r0, [r4, #0]
 80111ac:	3018      	adds	r0, #24
 80111ae:	f001 fad9 	bl	8012764 <rmw_init_options_fini>
 80111b2:	4605      	mov	r5, r0
 80111b4:	b950      	cbnz	r0, 80111cc <rcl_init_options_fini+0x4c>
 80111b6:	6820      	ldr	r0, [r4, #0]
 80111b8:	9b02      	ldr	r3, [sp, #8]
 80111ba:	9905      	ldr	r1, [sp, #20]
 80111bc:	4798      	blx	r3
 80111be:	4628      	mov	r0, r5
 80111c0:	b007      	add	sp, #28
 80111c2:	bd30      	pop	{r4, r5, pc}
 80111c4:	250b      	movs	r5, #11
 80111c6:	4628      	mov	r0, r5
 80111c8:	b007      	add	sp, #28
 80111ca:	bd30      	pop	{r4, r5, pc}
 80111cc:	f7ff fde6 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 80111d0:	4605      	mov	r5, r0
 80111d2:	e7f8      	b.n	80111c6 <rcl_init_options_fini+0x46>

080111d4 <rcl_init_options_copy>:
 80111d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111d8:	b094      	sub	sp, #80	; 0x50
 80111da:	2800      	cmp	r0, #0
 80111dc:	d05b      	beq.n	8011296 <rcl_init_options_copy+0xc2>
 80111de:	4604      	mov	r4, r0
 80111e0:	6800      	ldr	r0, [r0, #0]
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d057      	beq.n	8011296 <rcl_init_options_copy+0xc2>
 80111e6:	460e      	mov	r6, r1
 80111e8:	f7fb fbba 	bl	800c960 <rcutils_allocator_is_valid>
 80111ec:	2e00      	cmp	r6, #0
 80111ee:	d052      	beq.n	8011296 <rcl_init_options_copy+0xc2>
 80111f0:	f080 0001 	eor.w	r0, r0, #1
 80111f4:	b2c0      	uxtb	r0, r0
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d14d      	bne.n	8011296 <rcl_init_options_copy+0xc2>
 80111fa:	6833      	ldr	r3, [r6, #0]
 80111fc:	b123      	cbz	r3, 8011208 <rcl_init_options_copy+0x34>
 80111fe:	2464      	movs	r4, #100	; 0x64
 8011200:	4620      	mov	r0, r4
 8011202:	b014      	add	sp, #80	; 0x50
 8011204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011208:	6827      	ldr	r7, [r4, #0]
 801120a:	ad0f      	add	r5, sp, #60	; 0x3c
 801120c:	46bc      	mov	ip, r7
 801120e:	f8d7 8000 	ldr.w	r8, [r7]
 8011212:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011218:	f8dc 3000 	ldr.w	r3, [ip]
 801121c:	2050      	movs	r0, #80	; 0x50
 801121e:	4619      	mov	r1, r3
 8011220:	602b      	str	r3, [r5, #0]
 8011222:	47c0      	blx	r8
 8011224:	4605      	mov	r5, r0
 8011226:	6030      	str	r0, [r6, #0]
 8011228:	b3d0      	cbz	r0, 80112a0 <rcl_init_options_copy+0xcc>
 801122a:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 801122e:	4686      	mov	lr, r0
 8011230:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011234:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011238:	f8dc 3000 	ldr.w	r3, [ip]
 801123c:	4668      	mov	r0, sp
 801123e:	f8ce 3000 	str.w	r3, [lr]
 8011242:	f001 f849 	bl	80122d8 <rmw_get_zero_initialized_init_options>
 8011246:	46ee      	mov	lr, sp
 8011248:	f105 0c18 	add.w	ip, r5, #24
 801124c:	6824      	ldr	r4, [r4, #0]
 801124e:	6835      	ldr	r5, [r6, #0]
 8011250:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011254:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011258:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801125c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011260:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011264:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011268:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801126c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011270:	f104 0018 	add.w	r0, r4, #24
 8011274:	f105 0118 	add.w	r1, r5, #24
 8011278:	f001 fa22 	bl	80126c0 <rmw_init_options_copy>
 801127c:	4604      	mov	r4, r0
 801127e:	2800      	cmp	r0, #0
 8011280:	d0be      	beq.n	8011200 <rcl_init_options_copy+0x2c>
 8011282:	f7fb fb7b 	bl	800c97c <rcutils_get_error_string>
 8011286:	f7fb fb8f 	bl	800c9a8 <rcutils_reset_error>
 801128a:	4630      	mov	r0, r6
 801128c:	f7ff ff78 	bl	8011180 <rcl_init_options_fini>
 8011290:	b140      	cbz	r0, 80112a4 <rcl_init_options_copy+0xd0>
 8011292:	4604      	mov	r4, r0
 8011294:	e7b4      	b.n	8011200 <rcl_init_options_copy+0x2c>
 8011296:	240b      	movs	r4, #11
 8011298:	4620      	mov	r0, r4
 801129a:	b014      	add	sp, #80	; 0x50
 801129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a0:	240a      	movs	r4, #10
 80112a2:	e7ad      	b.n	8011200 <rcl_init_options_copy+0x2c>
 80112a4:	4620      	mov	r0, r4
 80112a6:	b014      	add	sp, #80	; 0x50
 80112a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	f7ff bd76 	b.w	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>

080112b0 <rcl_get_localhost_only>:
 80112b0:	b510      	push	{r4, lr}
 80112b2:	2300      	movs	r3, #0
 80112b4:	b082      	sub	sp, #8
 80112b6:	9301      	str	r3, [sp, #4]
 80112b8:	b1b8      	cbz	r0, 80112ea <rcl_get_localhost_only+0x3a>
 80112ba:	4604      	mov	r4, r0
 80112bc:	a901      	add	r1, sp, #4
 80112be:	480c      	ldr	r0, [pc, #48]	; (80112f0 <rcl_get_localhost_only+0x40>)
 80112c0:	f000 fcdc 	bl	8011c7c <rcutils_get_env>
 80112c4:	b110      	cbz	r0, 80112cc <rcl_get_localhost_only+0x1c>
 80112c6:	2001      	movs	r0, #1
 80112c8:	b002      	add	sp, #8
 80112ca:	bd10      	pop	{r4, pc}
 80112cc:	9b01      	ldr	r3, [sp, #4]
 80112ce:	b113      	cbz	r3, 80112d6 <rcl_get_localhost_only+0x26>
 80112d0:	781a      	ldrb	r2, [r3, #0]
 80112d2:	2a31      	cmp	r2, #49	; 0x31
 80112d4:	d004      	beq.n	80112e0 <rcl_get_localhost_only+0x30>
 80112d6:	2302      	movs	r3, #2
 80112d8:	2000      	movs	r0, #0
 80112da:	7023      	strb	r3, [r4, #0]
 80112dc:	b002      	add	sp, #8
 80112de:	bd10      	pop	{r4, pc}
 80112e0:	785b      	ldrb	r3, [r3, #1]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d1f7      	bne.n	80112d6 <rcl_get_localhost_only+0x26>
 80112e6:	2301      	movs	r3, #1
 80112e8:	e7f6      	b.n	80112d8 <rcl_get_localhost_only+0x28>
 80112ea:	200b      	movs	r0, #11
 80112ec:	b002      	add	sp, #8
 80112ee:	bd10      	pop	{r4, pc}
 80112f0:	08016e2c 	.word	0x08016e2c

080112f4 <rcl_get_zero_initialized_node>:
 80112f4:	4a03      	ldr	r2, [pc, #12]	; (8011304 <rcl_get_zero_initialized_node+0x10>)
 80112f6:	4603      	mov	r3, r0
 80112f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8011300:	4618      	mov	r0, r3
 8011302:	4770      	bx	lr
 8011304:	08016e54 	.word	0x08016e54

08011308 <rcl_node_init>:
 8011308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130c:	b0a9      	sub	sp, #164	; 0xa4
 801130e:	4604      	mov	r4, r0
 8011310:	460e      	mov	r6, r1
 8011312:	4615      	mov	r5, r2
 8011314:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8011318:	a823      	add	r0, sp, #140	; 0x8c
 801131a:	461f      	mov	r7, r3
 801131c:	f003 fdb8 	bl	8014e90 <rcl_guard_condition_get_default_options>
 8011320:	f1b8 0f00 	cmp.w	r8, #0
 8011324:	f000 80f3 	beq.w	801150e <rcl_node_init+0x206>
 8011328:	4640      	mov	r0, r8
 801132a:	f7fb fb19 	bl	800c960 <rcutils_allocator_is_valid>
 801132e:	2d00      	cmp	r5, #0
 8011330:	bf18      	it	ne
 8011332:	2c00      	cmpne	r4, #0
 8011334:	f080 0001 	eor.w	r0, r0, #1
 8011338:	bf0c      	ite	eq
 801133a:	f04f 0c01 	moveq.w	ip, #1
 801133e:	f04f 0c00 	movne.w	ip, #0
 8011342:	2e00      	cmp	r6, #0
 8011344:	bf08      	it	eq
 8011346:	f04c 0c01 	orreq.w	ip, ip, #1
 801134a:	ea4c 0c00 	orr.w	ip, ip, r0
 801134e:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8011352:	f040 80dc 	bne.w	801150e <rcl_node_init+0x206>
 8011356:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801135a:	f1ba 0f00 	cmp.w	sl, #0
 801135e:	f040 80fc 	bne.w	801155a <rcl_node_init+0x252>
 8011362:	2f00      	cmp	r7, #0
 8011364:	f000 80d3 	beq.w	801150e <rcl_node_init+0x206>
 8011368:	4638      	mov	r0, r7
 801136a:	f7ff fd35 	bl	8010dd8 <rcl_context_is_valid>
 801136e:	4683      	mov	fp, r0
 8011370:	2800      	cmp	r0, #0
 8011372:	f000 80d2 	beq.w	801151a <rcl_node_init+0x212>
 8011376:	4652      	mov	r2, sl
 8011378:	4630      	mov	r0, r6
 801137a:	a922      	add	r1, sp, #136	; 0x88
 801137c:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8011380:	f001 f8ac 	bl	80124dc <rmw_validate_node_name>
 8011384:	4682      	mov	sl, r0
 8011386:	2800      	cmp	r0, #0
 8011388:	f040 80c3 	bne.w	8011512 <rcl_node_init+0x20a>
 801138c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801138e:	2800      	cmp	r0, #0
 8011390:	f040 80f1 	bne.w	8011576 <rcl_node_init+0x26e>
 8011394:	4628      	mov	r0, r5
 8011396:	f7ee ffb5 	bl	8000304 <strlen>
 801139a:	2800      	cmp	r0, #0
 801139c:	f040 80c0 	bne.w	8011520 <rcl_node_init+0x218>
 80113a0:	4d79      	ldr	r5, [pc, #484]	; (8011588 <rcl_node_init+0x280>)
 80113a2:	a922      	add	r1, sp, #136	; 0x88
 80113a4:	2200      	movs	r2, #0
 80113a6:	4628      	mov	r0, r5
 80113a8:	f001 f87a 	bl	80124a0 <rmw_validate_namespace>
 80113ac:	4682      	mov	sl, r0
 80113ae:	2800      	cmp	r0, #0
 80113b0:	f040 80af 	bne.w	8011512 <rcl_node_init+0x20a>
 80113b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80113b6:	2800      	cmp	r0, #0
 80113b8:	f040 80d5 	bne.w	8011566 <rcl_node_init+0x25e>
 80113bc:	f8d8 3000 	ldr.w	r3, [r8]
 80113c0:	2078      	movs	r0, #120	; 0x78
 80113c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80113c6:	4798      	blx	r3
 80113c8:	4682      	mov	sl, r0
 80113ca:	6060      	str	r0, [r4, #4]
 80113cc:	2800      	cmp	r0, #0
 80113ce:	f000 80cf 	beq.w	8011570 <rcl_node_init+0x268>
 80113d2:	2200      	movs	r2, #0
 80113d4:	2300      	movs	r3, #0
 80113d6:	a808      	add	r0, sp, #32
 80113d8:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 80113dc:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 80113e0:	f000 f902 	bl	80115e8 <rcl_node_get_default_options>
 80113e4:	a908      	add	r1, sp, #32
 80113e6:	4650      	mov	r0, sl
 80113e8:	2268      	movs	r2, #104	; 0x68
 80113ea:	f004 fc6c 	bl	8015cc6 <memcpy>
 80113ee:	6861      	ldr	r1, [r4, #4]
 80113f0:	4640      	mov	r0, r8
 80113f2:	6027      	str	r7, [r4, #0]
 80113f4:	f000 f906 	bl	8011604 <rcl_node_options_copy>
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d158      	bne.n	80114ae <rcl_node_init+0x1a6>
 80113fc:	4628      	mov	r0, r5
 80113fe:	f7ee ff81 	bl	8000304 <strlen>
 8011402:	4428      	add	r0, r5
 8011404:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011408:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801140c:	2b2f      	cmp	r3, #47	; 0x2f
 801140e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011412:	9300      	str	r3, [sp, #0]
 8011414:	bf0c      	ite	eq
 8011416:	4b5d      	ldreq	r3, [pc, #372]	; (801158c <rcl_node_init+0x284>)
 8011418:	4b5d      	ldrne	r3, [pc, #372]	; (8011590 <rcl_node_init+0x288>)
 801141a:	9302      	str	r3, [sp, #8]
 801141c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011420:	9301      	str	r3, [sp, #4]
 8011422:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8011426:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801142a:	f000 fc4f 	bl	8011ccc <rcutils_format_string_limit>
 801142e:	6823      	ldr	r3, [r4, #0]
 8011430:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 8011434:	4631      	mov	r1, r6
 8011436:	6818      	ldr	r0, [r3, #0]
 8011438:	462a      	mov	r2, r5
 801143a:	6866      	ldr	r6, [r4, #4]
 801143c:	3028      	adds	r0, #40	; 0x28
 801143e:	f001 fc2f 	bl	8012ca0 <rmw_create_node>
 8011442:	6863      	ldr	r3, [r4, #4]
 8011444:	66b0      	str	r0, [r6, #104]	; 0x68
 8011446:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8011448:	2800      	cmp	r0, #0
 801144a:	d032      	beq.n	80114b2 <rcl_node_init+0x1aa>
 801144c:	f001 fcb8 	bl	8012dc0 <rmw_node_get_graph_guard_condition>
 8011450:	4682      	mov	sl, r0
 8011452:	b360      	cbz	r0, 80114ae <rcl_node_init+0x1a6>
 8011454:	f8d8 3000 	ldr.w	r3, [r8]
 8011458:	2008      	movs	r0, #8
 801145a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801145e:	6866      	ldr	r6, [r4, #4]
 8011460:	4798      	blx	r3
 8011462:	6863      	ldr	r3, [r4, #4]
 8011464:	66f0      	str	r0, [r6, #108]	; 0x6c
 8011466:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 801146a:	f1bb 0f00 	cmp.w	fp, #0
 801146e:	d020      	beq.n	80114b2 <rcl_node_init+0x1aa>
 8011470:	a806      	add	r0, sp, #24
 8011472:	ae23      	add	r6, sp, #140	; 0x8c
 8011474:	f003 fc80 	bl	8014d78 <rcl_get_zero_initialized_guard_condition>
 8011478:	a806      	add	r0, sp, #24
 801147a:	6863      	ldr	r3, [r4, #4]
 801147c:	46c4      	mov	ip, r8
 801147e:	c803      	ldmia	r0, {r0, r1}
 8011480:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8011484:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011488:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801148c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801148e:	f8dc 3000 	ldr.w	r3, [ip]
 8011492:	6033      	str	r3, [r6, #0]
 8011494:	ab28      	add	r3, sp, #160	; 0xa0
 8011496:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801149a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801149e:	4651      	mov	r1, sl
 80114a0:	463a      	mov	r2, r7
 80114a2:	4670      	mov	r0, lr
 80114a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80114a6:	f003 fc71 	bl	8014d8c <rcl_guard_condition_init_from_rmw>
 80114aa:	4682      	mov	sl, r0
 80114ac:	b328      	cbz	r0, 80114fa <rcl_node_init+0x1f2>
 80114ae:	6863      	ldr	r3, [r4, #4]
 80114b0:	b1f3      	cbz	r3, 80114f0 <rcl_node_init+0x1e8>
 80114b2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80114b4:	b128      	cbz	r0, 80114c2 <rcl_node_init+0x1ba>
 80114b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80114ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80114be:	4798      	blx	r3
 80114c0:	6863      	ldr	r3, [r4, #4]
 80114c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80114c4:	b110      	cbz	r0, 80114cc <rcl_node_init+0x1c4>
 80114c6:	f001 fbfd 	bl	8012cc4 <rmw_destroy_node>
 80114ca:	6863      	ldr	r3, [r4, #4]
 80114cc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80114ce:	b148      	cbz	r0, 80114e4 <rcl_node_init+0x1dc>
 80114d0:	f003 fcb8 	bl	8014e44 <rcl_guard_condition_fini>
 80114d4:	6863      	ldr	r3, [r4, #4]
 80114d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80114da:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80114dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80114e0:	4798      	blx	r3
 80114e2:	6863      	ldr	r3, [r4, #4]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80114ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80114ee:	4798      	blx	r3
 80114f0:	2300      	movs	r3, #0
 80114f2:	f04f 0a01 	mov.w	sl, #1
 80114f6:	e9c4 3300 	strd	r3, r3, [r4]
 80114fa:	f1b9 0f00 	cmp.w	r9, #0
 80114fe:	d008      	beq.n	8011512 <rcl_node_init+0x20a>
 8011500:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011504:	4628      	mov	r0, r5
 8011506:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801150a:	4798      	blx	r3
 801150c:	e001      	b.n	8011512 <rcl_node_init+0x20a>
 801150e:	f04f 0a0b 	mov.w	sl, #11
 8011512:	4650      	mov	r0, sl
 8011514:	b029      	add	sp, #164	; 0xa4
 8011516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801151a:	f04f 0a65 	mov.w	sl, #101	; 0x65
 801151e:	e7f8      	b.n	8011512 <rcl_node_init+0x20a>
 8011520:	782b      	ldrb	r3, [r5, #0]
 8011522:	2b2f      	cmp	r3, #47	; 0x2f
 8011524:	f43f af3d 	beq.w	80113a2 <rcl_node_init+0x9a>
 8011528:	9503      	str	r5, [sp, #12]
 801152a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	4b18      	ldr	r3, [pc, #96]	; (8011594 <rcl_node_init+0x28c>)
 8011532:	9302      	str	r3, [sp, #8]
 8011534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011538:	9301      	str	r3, [sp, #4]
 801153a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801153e:	f000 fbc5 	bl	8011ccc <rcutils_format_string_limit>
 8011542:	4605      	mov	r5, r0
 8011544:	b1e0      	cbz	r0, 8011580 <rcl_node_init+0x278>
 8011546:	2200      	movs	r2, #0
 8011548:	a922      	add	r1, sp, #136	; 0x88
 801154a:	9222      	str	r2, [sp, #136]	; 0x88
 801154c:	f000 ffa8 	bl	80124a0 <rmw_validate_namespace>
 8011550:	4682      	mov	sl, r0
 8011552:	2800      	cmp	r0, #0
 8011554:	d1d4      	bne.n	8011500 <rcl_node_init+0x1f8>
 8011556:	46d9      	mov	r9, fp
 8011558:	e72c      	b.n	80113b4 <rcl_node_init+0xac>
 801155a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801155e:	4650      	mov	r0, sl
 8011560:	b029      	add	sp, #164	; 0xa4
 8011562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011566:	f04f 0aca 	mov.w	sl, #202	; 0xca
 801156a:	f000 ffab 	bl	80124c4 <rmw_namespace_validation_result_string>
 801156e:	e7c4      	b.n	80114fa <rcl_node_init+0x1f2>
 8011570:	f04f 0a0a 	mov.w	sl, #10
 8011574:	e7c1      	b.n	80114fa <rcl_node_init+0x1f2>
 8011576:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 801157a:	f001 f803 	bl	8012584 <rmw_node_name_validation_result_string>
 801157e:	e7c8      	b.n	8011512 <rcl_node_init+0x20a>
 8011580:	f04f 0a0a 	mov.w	sl, #10
 8011584:	e7c5      	b.n	8011512 <rcl_node_init+0x20a>
 8011586:	bf00      	nop
 8011588:	08016e44 	.word	0x08016e44
 801158c:	08016cc8 	.word	0x08016cc8
 8011590:	08016e4c 	.word	0x08016e4c
 8011594:	08016e48 	.word	0x08016e48

08011598 <rcl_node_is_valid>:
 8011598:	b130      	cbz	r0, 80115a8 <rcl_node_is_valid+0x10>
 801159a:	6843      	ldr	r3, [r0, #4]
 801159c:	b123      	cbz	r3, 80115a8 <rcl_node_is_valid+0x10>
 801159e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80115a0:	b113      	cbz	r3, 80115a8 <rcl_node_is_valid+0x10>
 80115a2:	6800      	ldr	r0, [r0, #0]
 80115a4:	f7ff bc18 	b.w	8010dd8 <rcl_context_is_valid>
 80115a8:	2000      	movs	r0, #0
 80115aa:	4770      	bx	lr

080115ac <rcl_node_get_name>:
 80115ac:	b120      	cbz	r0, 80115b8 <rcl_node_get_name+0xc>
 80115ae:	6840      	ldr	r0, [r0, #4]
 80115b0:	b110      	cbz	r0, 80115b8 <rcl_node_get_name+0xc>
 80115b2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80115b4:	b100      	cbz	r0, 80115b8 <rcl_node_get_name+0xc>
 80115b6:	6880      	ldr	r0, [r0, #8]
 80115b8:	4770      	bx	lr
 80115ba:	bf00      	nop

080115bc <rcl_node_get_namespace>:
 80115bc:	b120      	cbz	r0, 80115c8 <rcl_node_get_namespace+0xc>
 80115be:	6840      	ldr	r0, [r0, #4]
 80115c0:	b110      	cbz	r0, 80115c8 <rcl_node_get_namespace+0xc>
 80115c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80115c4:	b100      	cbz	r0, 80115c8 <rcl_node_get_namespace+0xc>
 80115c6:	68c0      	ldr	r0, [r0, #12]
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop

080115cc <rcl_node_get_options>:
 80115cc:	b128      	cbz	r0, 80115da <rcl_node_get_options+0xe>
 80115ce:	6840      	ldr	r0, [r0, #4]
 80115d0:	b118      	cbz	r0, 80115da <rcl_node_get_options+0xe>
 80115d2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	bf08      	it	eq
 80115d8:	2000      	moveq	r0, #0
 80115da:	4770      	bx	lr

080115dc <rcl_node_get_rmw_handle>:
 80115dc:	b110      	cbz	r0, 80115e4 <rcl_node_get_rmw_handle+0x8>
 80115de:	6840      	ldr	r0, [r0, #4]
 80115e0:	b100      	cbz	r0, 80115e4 <rcl_node_get_rmw_handle+0x8>
 80115e2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop

080115e8 <rcl_node_get_default_options>:
 80115e8:	b510      	push	{r4, lr}
 80115ea:	4604      	mov	r4, r0
 80115ec:	2268      	movs	r2, #104	; 0x68
 80115ee:	2100      	movs	r1, #0
 80115f0:	f004 fa4a 	bl	8015a88 <memset>
 80115f4:	4620      	mov	r0, r4
 80115f6:	f7fb f9a5 	bl	800c944 <rcutils_get_default_allocator>
 80115fa:	2301      	movs	r3, #1
 80115fc:	4620      	mov	r0, r4
 80115fe:	7523      	strb	r3, [r4, #20]
 8011600:	bd10      	pop	{r4, pc}
 8011602:	bf00      	nop

08011604 <rcl_node_options_copy>:
 8011604:	2800      	cmp	r0, #0
 8011606:	bf18      	it	ne
 8011608:	4288      	cmpne	r0, r1
 801160a:	d01b      	beq.n	8011644 <rcl_node_options_copy+0x40>
 801160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801160e:	fab1 f681 	clz	r6, r1
 8011612:	460c      	mov	r4, r1
 8011614:	0976      	lsrs	r6, r6, #5
 8011616:	b199      	cbz	r1, 8011640 <rcl_node_options_copy+0x3c>
 8011618:	4605      	mov	r5, r0
 801161a:	8a87      	ldrh	r7, [r0, #20]
 801161c:	4684      	mov	ip, r0
 801161e:	468e      	mov	lr, r1
 8011620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011622:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011626:	682b      	ldr	r3, [r5, #0]
 8011628:	2250      	movs	r2, #80	; 0x50
 801162a:	f10c 0118 	add.w	r1, ip, #24
 801162e:	f104 0018 	add.w	r0, r4, #24
 8011632:	f8ce 3000 	str.w	r3, [lr]
 8011636:	82a7      	strh	r7, [r4, #20]
 8011638:	f004 fb45 	bl	8015cc6 <memcpy>
 801163c:	4630      	mov	r0, r6
 801163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011640:	200b      	movs	r0, #11
 8011642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011644:	200b      	movs	r0, #11
 8011646:	4770      	bx	lr

08011648 <rcl_node_resolve_name>:
 8011648:	b082      	sub	sp, #8
 801164a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801164e:	b091      	sub	sp, #68	; 0x44
 8011650:	ac1a      	add	r4, sp, #104	; 0x68
 8011652:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8011656:	e884 000c 	stmia.w	r4, {r2, r3}
 801165a:	2800      	cmp	r0, #0
 801165c:	d03d      	beq.n	80116da <rcl_node_resolve_name+0x92>
 801165e:	460c      	mov	r4, r1
 8011660:	4605      	mov	r5, r0
 8011662:	f7ff ffb3 	bl	80115cc <rcl_node_get_options>
 8011666:	2800      	cmp	r0, #0
 8011668:	d03a      	beq.n	80116e0 <rcl_node_resolve_name+0x98>
 801166a:	4628      	mov	r0, r5
 801166c:	f7ff ff9e 	bl	80115ac <rcl_node_get_name>
 8011670:	4606      	mov	r6, r0
 8011672:	4628      	mov	r0, r5
 8011674:	ad0b      	add	r5, sp, #44	; 0x2c
 8011676:	f7ff ffa1 	bl	80115bc <rcl_node_get_namespace>
 801167a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801167e:	4607      	mov	r7, r0
 8011680:	46ac      	mov	ip, r5
 8011682:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801168a:	f8de 3000 	ldr.w	r3, [lr]
 801168e:	f8cc 3000 	str.w	r3, [ip]
 8011692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011694:	b30b      	cbz	r3, 80116da <rcl_node_resolve_name+0x92>
 8011696:	4689      	mov	r9, r1
 8011698:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801169c:	f000 fc8e 	bl	8011fbc <rcutils_get_zero_initialized_string_map>
 80116a0:	ab10      	add	r3, sp, #64	; 0x40
 80116a2:	9008      	str	r0, [sp, #32]
 80116a4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80116a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80116ac:	2100      	movs	r1, #0
 80116ae:	a808      	add	r0, sp, #32
 80116b0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80116b4:	f000 fcf8 	bl	80120a8 <rcutils_string_map_init>
 80116b8:	4683      	mov	fp, r0
 80116ba:	b1a0      	cbz	r0, 80116e6 <rcl_node_resolve_name+0x9e>
 80116bc:	f7fb f95e 	bl	800c97c <rcutils_get_error_string>
 80116c0:	f7fb f972 	bl	800c9a8 <rcutils_reset_error>
 80116c4:	f1bb 0f0a 	cmp.w	fp, #10
 80116c8:	bf18      	it	ne
 80116ca:	f04f 0b01 	movne.w	fp, #1
 80116ce:	4658      	mov	r0, fp
 80116d0:	b011      	add	sp, #68	; 0x44
 80116d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d6:	b002      	add	sp, #8
 80116d8:	4770      	bx	lr
 80116da:	f04f 0b0b 	mov.w	fp, #11
 80116de:	e7f6      	b.n	80116ce <rcl_node_resolve_name+0x86>
 80116e0:	f04f 0b01 	mov.w	fp, #1
 80116e4:	e7f3      	b.n	80116ce <rcl_node_resolve_name+0x86>
 80116e6:	9009      	str	r0, [sp, #36]	; 0x24
 80116e8:	9007      	str	r0, [sp, #28]
 80116ea:	a808      	add	r0, sp, #32
 80116ec:	f003 fb3e 	bl	8014d6c <rcl_get_default_topic_name_substitutions>
 80116f0:	4683      	mov	fp, r0
 80116f2:	b180      	cbz	r0, 8011716 <rcl_node_resolve_name+0xce>
 80116f4:	280a      	cmp	r0, #10
 80116f6:	a808      	add	r0, sp, #32
 80116f8:	bf18      	it	ne
 80116fa:	f04f 0b01 	movne.w	fp, #1
 80116fe:	f000 fd13 	bl	8012128 <rcutils_string_map_fini>
 8011702:	4604      	mov	r4, r0
 8011704:	2800      	cmp	r0, #0
 8011706:	d15b      	bne.n	80117c0 <rcl_node_resolve_name+0x178>
 8011708:	4651      	mov	r1, sl
 801170a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801170c:	47c8      	blx	r9
 801170e:	4651      	mov	r1, sl
 8011710:	4620      	mov	r0, r4
 8011712:	47c8      	blx	r9
 8011714:	e7db      	b.n	80116ce <rcl_node_resolve_name+0x86>
 8011716:	ab09      	add	r3, sp, #36	; 0x24
 8011718:	46ec      	mov	ip, sp
 801171a:	9305      	str	r3, [sp, #20]
 801171c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801171e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011722:	682b      	ldr	r3, [r5, #0]
 8011724:	463a      	mov	r2, r7
 8011726:	4631      	mov	r1, r6
 8011728:	4620      	mov	r0, r4
 801172a:	f8cc 3000 	str.w	r3, [ip]
 801172e:	ab08      	add	r3, sp, #32
 8011730:	f003 f9bc 	bl	8014aac <rcl_expand_topic_name>
 8011734:	4683      	mov	fp, r0
 8011736:	b9d8      	cbnz	r0, 8011770 <rcl_node_resolve_name+0x128>
 8011738:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801173a:	4602      	mov	r2, r0
 801173c:	9009      	str	r0, [sp, #36]	; 0x24
 801173e:	a90a      	add	r1, sp, #40	; 0x28
 8011740:	4620      	mov	r0, r4
 8011742:	f000 fddd 	bl	8012300 <rmw_validate_full_topic_name>
 8011746:	bb50      	cbnz	r0, 801179e <rcl_node_resolve_name+0x156>
 8011748:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801174a:	2d00      	cmp	r5, #0
 801174c:	d140      	bne.n	80117d0 <rcl_node_resolve_name+0x188>
 801174e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011750:	a808      	add	r0, sp, #32
 8011752:	601c      	str	r4, [r3, #0]
 8011754:	f000 fce8 	bl	8012128 <rcutils_string_map_fini>
 8011758:	4683      	mov	fp, r0
 801175a:	2800      	cmp	r0, #0
 801175c:	d043      	beq.n	80117e6 <rcl_node_resolve_name+0x19e>
 801175e:	f7fb f90d 	bl	800c97c <rcutils_get_error_string>
 8011762:	46a8      	mov	r8, r5
 8011764:	f04f 0b01 	mov.w	fp, #1
 8011768:	462c      	mov	r4, r5
 801176a:	f7fb f91d 	bl	800c9a8 <rcutils_reset_error>
 801176e:	e00a      	b.n	8011786 <rcl_node_resolve_name+0x13e>
 8011770:	2867      	cmp	r0, #103	; 0x67
 8011772:	bf14      	ite	ne
 8011774:	f04f 0800 	movne.w	r8, #0
 8011778:	f008 0801 	andeq.w	r8, r8, #1
 801177c:	9c07      	ldr	r4, [sp, #28]
 801177e:	a808      	add	r0, sp, #32
 8011780:	f000 fcd2 	bl	8012128 <rcutils_string_map_fini>
 8011784:	bb50      	cbnz	r0, 80117dc <rcl_node_resolve_name+0x194>
 8011786:	4651      	mov	r1, sl
 8011788:	9809      	ldr	r0, [sp, #36]	; 0x24
 801178a:	47c8      	blx	r9
 801178c:	4651      	mov	r1, sl
 801178e:	4620      	mov	r0, r4
 8011790:	47c8      	blx	r9
 8011792:	f1b8 0f00 	cmp.w	r8, #0
 8011796:	bf18      	it	ne
 8011798:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801179c:	e797      	b.n	80116ce <rcl_node_resolve_name+0x86>
 801179e:	f7fb f8ed 	bl	800c97c <rcutils_get_error_string>
 80117a2:	f7fb f901 	bl	800c9a8 <rcutils_reset_error>
 80117a6:	a808      	add	r0, sp, #32
 80117a8:	f000 fcbe 	bl	8012128 <rcutils_string_map_fini>
 80117ac:	b998      	cbnz	r0, 80117d6 <rcl_node_resolve_name+0x18e>
 80117ae:	4651      	mov	r1, sl
 80117b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117b2:	47c8      	blx	r9
 80117b4:	4651      	mov	r1, sl
 80117b6:	4620      	mov	r0, r4
 80117b8:	f04f 0b01 	mov.w	fp, #1
 80117bc:	47c8      	blx	r9
 80117be:	e786      	b.n	80116ce <rcl_node_resolve_name+0x86>
 80117c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80117c4:	f7fb f8da 	bl	800c97c <rcutils_get_error_string>
 80117c8:	f7fb f8ee 	bl	800c9a8 <rcutils_reset_error>
 80117cc:	4644      	mov	r4, r8
 80117ce:	e7da      	b.n	8011786 <rcl_node_resolve_name+0x13e>
 80117d0:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80117d4:	e7d3      	b.n	801177e <rcl_node_resolve_name+0x136>
 80117d6:	46d8      	mov	r8, fp
 80117d8:	f04f 0b01 	mov.w	fp, #1
 80117dc:	f7fb f8ce 	bl	800c97c <rcutils_get_error_string>
 80117e0:	f7fb f8e2 	bl	800c9a8 <rcutils_reset_error>
 80117e4:	e7cf      	b.n	8011786 <rcl_node_resolve_name+0x13e>
 80117e6:	4651      	mov	r1, sl
 80117e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117ea:	47c8      	blx	r9
 80117ec:	4651      	mov	r1, sl
 80117ee:	4658      	mov	r0, fp
 80117f0:	47c8      	blx	r9
 80117f2:	e76c      	b.n	80116ce <rcl_node_resolve_name+0x86>

080117f4 <exact_match_lookup>:
 80117f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117f6:	f102 0708 	add.w	r7, r2, #8
 80117fa:	460b      	mov	r3, r1
 80117fc:	b085      	sub	sp, #20
 80117fe:	4614      	mov	r4, r2
 8011800:	4606      	mov	r6, r0
 8011802:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011806:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801180a:	4618      	mov	r0, r3
 801180c:	4919      	ldr	r1, [pc, #100]	; (8011874 <exact_match_lookup+0x80>)
 801180e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011812:	f000 fa4d 	bl	8011cb0 <rcutils_join_path>
 8011816:	7833      	ldrb	r3, [r6, #0]
 8011818:	4605      	mov	r5, r0
 801181a:	2b2f      	cmp	r3, #47	; 0x2f
 801181c:	d023      	beq.n	8011866 <exact_match_lookup+0x72>
 801181e:	f104 030c 	add.w	r3, r4, #12
 8011822:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011826:	e88d 0003 	stmia.w	sp, {r0, r1}
 801182a:	1c70      	adds	r0, r6, #1
 801182c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011830:	f000 fa44 	bl	8011cbc <rcutils_to_native_path>
 8011834:	4606      	mov	r6, r0
 8011836:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801183a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801183e:	4631      	mov	r1, r6
 8011840:	4628      	mov	r0, r5
 8011842:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011846:	f000 fa33 	bl	8011cb0 <rcutils_join_path>
 801184a:	4603      	mov	r3, r0
 801184c:	4630      	mov	r0, r6
 801184e:	6862      	ldr	r2, [r4, #4]
 8011850:	461e      	mov	r6, r3
 8011852:	6921      	ldr	r1, [r4, #16]
 8011854:	4790      	blx	r2
 8011856:	4628      	mov	r0, r5
 8011858:	4635      	mov	r5, r6
 801185a:	6863      	ldr	r3, [r4, #4]
 801185c:	6921      	ldr	r1, [r4, #16]
 801185e:	4798      	blx	r3
 8011860:	4628      	mov	r0, r5
 8011862:	b005      	add	sp, #20
 8011864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011866:	7873      	ldrb	r3, [r6, #1]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1d8      	bne.n	801181e <exact_match_lookup+0x2a>
 801186c:	4628      	mov	r0, r5
 801186e:	b005      	add	sp, #20
 8011870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011872:	bf00      	nop
 8011874:	08016e98 	.word	0x08016e98

08011878 <rcl_get_secure_root>:
 8011878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801187c:	b085      	sub	sp, #20
 801187e:	b168      	cbz	r0, 801189c <rcl_get_secure_root+0x24>
 8011880:	4607      	mov	r7, r0
 8011882:	4608      	mov	r0, r1
 8011884:	460c      	mov	r4, r1
 8011886:	f7fb f86b 	bl	800c960 <rcutils_allocator_is_valid>
 801188a:	b138      	cbz	r0, 801189c <rcl_get_secure_root+0x24>
 801188c:	2300      	movs	r3, #0
 801188e:	482d      	ldr	r0, [pc, #180]	; (8011944 <rcl_get_secure_root+0xcc>)
 8011890:	a903      	add	r1, sp, #12
 8011892:	9303      	str	r3, [sp, #12]
 8011894:	f000 f9f2 	bl	8011c7c <rcutils_get_env>
 8011898:	4605      	mov	r5, r0
 801189a:	b120      	cbz	r0, 80118a6 <rcl_get_secure_root+0x2e>
 801189c:	2500      	movs	r5, #0
 801189e:	4628      	mov	r0, r5
 80118a0:	b005      	add	sp, #20
 80118a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118a6:	9b03      	ldr	r3, [sp, #12]
 80118a8:	781a      	ldrb	r2, [r3, #0]
 80118aa:	2a00      	cmp	r2, #0
 80118ac:	d0f6      	beq.n	801189c <rcl_get_secure_root+0x24>
 80118ae:	f104 090c 	add.w	r9, r4, #12
 80118b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80118b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80118ba:	4618      	mov	r0, r3
 80118bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80118c0:	f000 fb3e 	bl	8011f40 <rcutils_strdup>
 80118c4:	4680      	mov	r8, r0
 80118c6:	2800      	cmp	r0, #0
 80118c8:	d0e8      	beq.n	801189c <rcl_get_secure_root+0x24>
 80118ca:	a903      	add	r1, sp, #12
 80118cc:	481e      	ldr	r0, [pc, #120]	; (8011948 <rcl_get_secure_root+0xd0>)
 80118ce:	9503      	str	r5, [sp, #12]
 80118d0:	f000 f9d4 	bl	8011c7c <rcutils_get_env>
 80118d4:	b160      	cbz	r0, 80118f0 <rcl_get_secure_root+0x78>
 80118d6:	2600      	movs	r6, #0
 80118d8:	4630      	mov	r0, r6
 80118da:	6863      	ldr	r3, [r4, #4]
 80118dc:	6921      	ldr	r1, [r4, #16]
 80118de:	4798      	blx	r3
 80118e0:	4640      	mov	r0, r8
 80118e2:	6863      	ldr	r3, [r4, #4]
 80118e4:	6921      	ldr	r1, [r4, #16]
 80118e6:	4798      	blx	r3
 80118e8:	4628      	mov	r0, r5
 80118ea:	b005      	add	sp, #20
 80118ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118f0:	9b03      	ldr	r3, [sp, #12]
 80118f2:	781e      	ldrb	r6, [r3, #0]
 80118f4:	b1f6      	cbz	r6, 8011934 <rcl_get_secure_root+0xbc>
 80118f6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80118fa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80118fe:	4618      	mov	r0, r3
 8011900:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011904:	f000 fb1c 	bl	8011f40 <rcutils_strdup>
 8011908:	4606      	mov	r6, r0
 801190a:	2800      	cmp	r0, #0
 801190c:	d0e3      	beq.n	80118d6 <rcl_get_secure_root+0x5e>
 801190e:	4622      	mov	r2, r4
 8011910:	4641      	mov	r1, r8
 8011912:	f7ff ff6f 	bl	80117f4 <exact_match_lookup>
 8011916:	4605      	mov	r5, r0
 8011918:	2d00      	cmp	r5, #0
 801191a:	d0dd      	beq.n	80118d8 <rcl_get_secure_root+0x60>
 801191c:	4628      	mov	r0, r5
 801191e:	f000 f9c5 	bl	8011cac <rcutils_is_directory>
 8011922:	4603      	mov	r3, r0
 8011924:	2800      	cmp	r0, #0
 8011926:	d1d7      	bne.n	80118d8 <rcl_get_secure_root+0x60>
 8011928:	4628      	mov	r0, r5
 801192a:	6921      	ldr	r1, [r4, #16]
 801192c:	461d      	mov	r5, r3
 801192e:	6863      	ldr	r3, [r4, #4]
 8011930:	4798      	blx	r3
 8011932:	e7d1      	b.n	80118d8 <rcl_get_secure_root+0x60>
 8011934:	4622      	mov	r2, r4
 8011936:	4638      	mov	r0, r7
 8011938:	4641      	mov	r1, r8
 801193a:	f7ff ff5b 	bl	80117f4 <exact_match_lookup>
 801193e:	4605      	mov	r5, r0
 8011940:	e7ea      	b.n	8011918 <rcl_get_secure_root+0xa0>
 8011942:	bf00      	nop
 8011944:	08016ea4 	.word	0x08016ea4
 8011948:	08016ebc 	.word	0x08016ebc

0801194c <rcl_get_security_options_from_environment>:
 801194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011950:	b082      	sub	sp, #8
 8011952:	2300      	movs	r3, #0
 8011954:	4606      	mov	r6, r0
 8011956:	460f      	mov	r7, r1
 8011958:	4821      	ldr	r0, [pc, #132]	; (80119e0 <rcl_get_security_options_from_environment+0x94>)
 801195a:	a901      	add	r1, sp, #4
 801195c:	4690      	mov	r8, r2
 801195e:	9301      	str	r3, [sp, #4]
 8011960:	f000 f98c 	bl	8011c7c <rcutils_get_env>
 8011964:	b120      	cbz	r0, 8011970 <rcl_get_security_options_from_environment+0x24>
 8011966:	2501      	movs	r5, #1
 8011968:	4628      	mov	r0, r5
 801196a:	b002      	add	sp, #8
 801196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011970:	4604      	mov	r4, r0
 8011972:	491c      	ldr	r1, [pc, #112]	; (80119e4 <rcl_get_security_options_from_environment+0x98>)
 8011974:	9801      	ldr	r0, [sp, #4]
 8011976:	f7ee fcbb 	bl	80002f0 <strcmp>
 801197a:	4605      	mov	r5, r0
 801197c:	b9f0      	cbnz	r0, 80119bc <rcl_get_security_options_from_environment+0x70>
 801197e:	9001      	str	r0, [sp, #4]
 8011980:	f1b8 0f00 	cmp.w	r8, #0
 8011984:	d021      	beq.n	80119ca <rcl_get_security_options_from_environment+0x7e>
 8011986:	a901      	add	r1, sp, #4
 8011988:	4817      	ldr	r0, [pc, #92]	; (80119e8 <rcl_get_security_options_from_environment+0x9c>)
 801198a:	f000 f977 	bl	8011c7c <rcutils_get_env>
 801198e:	2800      	cmp	r0, #0
 8011990:	d1e9      	bne.n	8011966 <rcl_get_security_options_from_environment+0x1a>
 8011992:	4916      	ldr	r1, [pc, #88]	; (80119ec <rcl_get_security_options_from_environment+0xa0>)
 8011994:	9801      	ldr	r0, [sp, #4]
 8011996:	f7ee fcab 	bl	80002f0 <strcmp>
 801199a:	4603      	mov	r3, r0
 801199c:	4639      	mov	r1, r7
 801199e:	4630      	mov	r0, r6
 80119a0:	fab3 f383 	clz	r3, r3
 80119a4:	095b      	lsrs	r3, r3, #5
 80119a6:	f888 3000 	strb.w	r3, [r8]
 80119aa:	f7ff ff65 	bl	8011878 <rcl_get_secure_root>
 80119ae:	b170      	cbz	r0, 80119ce <rcl_get_security_options_from_environment+0x82>
 80119b0:	f8c8 0004 	str.w	r0, [r8, #4]
 80119b4:	4628      	mov	r0, r5
 80119b6:	b002      	add	sp, #8
 80119b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119bc:	4625      	mov	r5, r4
 80119be:	f888 4000 	strb.w	r4, [r8]
 80119c2:	4628      	mov	r0, r5
 80119c4:	b002      	add	sp, #8
 80119c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ca:	250b      	movs	r5, #11
 80119cc:	e7cc      	b.n	8011968 <rcl_get_security_options_from_environment+0x1c>
 80119ce:	f898 5000 	ldrb.w	r5, [r8]
 80119d2:	f1a5 0501 	sub.w	r5, r5, #1
 80119d6:	fab5 f585 	clz	r5, r5
 80119da:	096d      	lsrs	r5, r5, #5
 80119dc:	e7c4      	b.n	8011968 <rcl_get_security_options_from_environment+0x1c>
 80119de:	bf00      	nop
 80119e0:	08016e5c 	.word	0x08016e5c
 80119e4:	08016e70 	.word	0x08016e70
 80119e8:	08016e78 	.word	0x08016e78
 80119ec:	08016e90 	.word	0x08016e90

080119f0 <rcl_get_system_time>:
 80119f0:	4608      	mov	r0, r1
 80119f2:	f000 bc11 	b.w	8012218 <rcutils_system_time_now>
 80119f6:	bf00      	nop

080119f8 <rcl_get_steady_time>:
 80119f8:	4608      	mov	r0, r1
 80119fa:	f000 bc33 	b.w	8012264 <rcutils_steady_time_now>
 80119fe:	bf00      	nop

08011a00 <rcl_get_ros_time>:
 8011a00:	7a03      	ldrb	r3, [r0, #8]
 8011a02:	b510      	push	{r4, lr}
 8011a04:	460c      	mov	r4, r1
 8011a06:	b143      	cbz	r3, 8011a1a <rcl_get_ros_time+0x1a>
 8011a08:	2105      	movs	r1, #5
 8011a0a:	f000 f901 	bl	8011c10 <__atomic_load_8>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	460b      	mov	r3, r1
 8011a12:	2000      	movs	r0, #0
 8011a14:	e9c4 2300 	strd	r2, r3, [r4]
 8011a18:	bd10      	pop	{r4, pc}
 8011a1a:	4608      	mov	r0, r1
 8011a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a20:	f000 bbfa 	b.w	8012218 <rcutils_system_time_now>

08011a24 <rcl_clock_init>:
 8011a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a26:	4605      	mov	r5, r0
 8011a28:	4610      	mov	r0, r2
 8011a2a:	4614      	mov	r4, r2
 8011a2c:	460e      	mov	r6, r1
 8011a2e:	f7fa ff97 	bl	800c960 <rcutils_allocator_is_valid>
 8011a32:	b128      	cbz	r0, 8011a40 <rcl_clock_init+0x1c>
 8011a34:	2d03      	cmp	r5, #3
 8011a36:	d803      	bhi.n	8011a40 <rcl_clock_init+0x1c>
 8011a38:	e8df f005 	tbb	[pc, r5]
 8011a3c:	0659301f 	.word	0x0659301f
 8011a40:	f04f 0c0b 	mov.w	ip, #11
 8011a44:	4660      	mov	r0, ip
 8011a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a48:	2c00      	cmp	r4, #0
 8011a4a:	d0f9      	beq.n	8011a40 <rcl_clock_init+0x1c>
 8011a4c:	fab6 f386 	clz	r3, r6
 8011a50:	095b      	lsrs	r3, r3, #5
 8011a52:	2e00      	cmp	r6, #0
 8011a54:	d0f4      	beq.n	8011a40 <rcl_clock_init+0x1c>
 8011a56:	6133      	str	r3, [r6, #16]
 8011a58:	469c      	mov	ip, r3
 8011a5a:	f106 0514 	add.w	r5, r6, #20
 8011a5e:	4f32      	ldr	r7, [pc, #200]	; (8011b28 <rcl_clock_init+0x104>)
 8011a60:	f04f 0e03 	mov.w	lr, #3
 8011a64:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011a6c:	6823      	ldr	r3, [r4, #0]
 8011a6e:	4660      	mov	r0, ip
 8011a70:	602b      	str	r3, [r5, #0]
 8011a72:	60f7      	str	r7, [r6, #12]
 8011a74:	f886 e000 	strb.w	lr, [r6]
 8011a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a7a:	2e00      	cmp	r6, #0
 8011a7c:	d0e0      	beq.n	8011a40 <rcl_clock_init+0x1c>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	f106 0514 	add.w	r5, r6, #20
 8011a84:	7033      	strb	r3, [r6, #0]
 8011a86:	469c      	mov	ip, r3
 8011a88:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011a8c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011a94:	6823      	ldr	r3, [r4, #0]
 8011a96:	4660      	mov	r0, ip
 8011a98:	602b      	str	r3, [r5, #0]
 8011a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a9c:	2c00      	cmp	r4, #0
 8011a9e:	d0cf      	beq.n	8011a40 <rcl_clock_init+0x1c>
 8011aa0:	fab6 f586 	clz	r5, r6
 8011aa4:	096d      	lsrs	r5, r5, #5
 8011aa6:	2e00      	cmp	r6, #0
 8011aa8:	d0ca      	beq.n	8011a40 <rcl_clock_init+0x1c>
 8011aaa:	46a6      	mov	lr, r4
 8011aac:	7035      	strb	r5, [r6, #0]
 8011aae:	f106 0c14 	add.w	ip, r6, #20
 8011ab2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ab6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011aba:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8011abe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ac2:	f8de 3000 	ldr.w	r3, [lr]
 8011ac6:	2010      	movs	r0, #16
 8011ac8:	f8cc 3000 	str.w	r3, [ip]
 8011acc:	6823      	ldr	r3, [r4, #0]
 8011ace:	6921      	ldr	r1, [r4, #16]
 8011ad0:	4798      	blx	r3
 8011ad2:	6130      	str	r0, [r6, #16]
 8011ad4:	b320      	cbz	r0, 8011b20 <rcl_clock_init+0xfc>
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	2300      	movs	r3, #0
 8011ada:	46ac      	mov	ip, r5
 8011adc:	7205      	strb	r5, [r0, #8]
 8011ade:	e9c0 2300 	strd	r2, r3, [r0]
 8011ae2:	4a12      	ldr	r2, [pc, #72]	; (8011b2c <rcl_clock_init+0x108>)
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	4660      	mov	r0, ip
 8011ae8:	60f2      	str	r2, [r6, #12]
 8011aea:	7033      	strb	r3, [r6, #0]
 8011aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aee:	2c00      	cmp	r4, #0
 8011af0:	d0a6      	beq.n	8011a40 <rcl_clock_init+0x1c>
 8011af2:	fab6 f386 	clz	r3, r6
 8011af6:	095b      	lsrs	r3, r3, #5
 8011af8:	2e00      	cmp	r6, #0
 8011afa:	d0a1      	beq.n	8011a40 <rcl_clock_init+0x1c>
 8011afc:	6133      	str	r3, [r6, #16]
 8011afe:	469c      	mov	ip, r3
 8011b00:	f106 0514 	add.w	r5, r6, #20
 8011b04:	f8df e028 	ldr.w	lr, [pc, #40]	; 8011b30 <rcl_clock_init+0x10c>
 8011b08:	2702      	movs	r7, #2
 8011b0a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b12:	6823      	ldr	r3, [r4, #0]
 8011b14:	4660      	mov	r0, ip
 8011b16:	602b      	str	r3, [r5, #0]
 8011b18:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011b1c:	7037      	strb	r7, [r6, #0]
 8011b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b20:	f04f 0c0a 	mov.w	ip, #10
 8011b24:	e78e      	b.n	8011a44 <rcl_clock_init+0x20>
 8011b26:	bf00      	nop
 8011b28:	080119f9 	.word	0x080119f9
 8011b2c:	08011a01 	.word	0x08011a01
 8011b30:	080119f1 	.word	0x080119f1

08011b34 <rcl_validate_enclave_name_with_size>:
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d049      	beq.n	8011bcc <rcl_validate_enclave_name_with_size+0x98>
 8011b38:	b570      	push	{r4, r5, r6, lr}
 8011b3a:	4615      	mov	r5, r2
 8011b3c:	b0c2      	sub	sp, #264	; 0x108
 8011b3e:	b19a      	cbz	r2, 8011b68 <rcl_validate_enclave_name_with_size+0x34>
 8011b40:	461e      	mov	r6, r3
 8011b42:	466a      	mov	r2, sp
 8011b44:	ab01      	add	r3, sp, #4
 8011b46:	460c      	mov	r4, r1
 8011b48:	f000 fc56 	bl	80123f8 <rmw_validate_namespace_with_size>
 8011b4c:	4684      	mov	ip, r0
 8011b4e:	b9b8      	cbnz	r0, 8011b80 <rcl_validate_enclave_name_with_size+0x4c>
 8011b50:	9900      	ldr	r1, [sp, #0]
 8011b52:	b171      	cbz	r1, 8011b72 <rcl_validate_enclave_name_with_size+0x3e>
 8011b54:	2907      	cmp	r1, #7
 8011b56:	d019      	beq.n	8011b8c <rcl_validate_enclave_name_with_size+0x58>
 8011b58:	1e4b      	subs	r3, r1, #1
 8011b5a:	2b05      	cmp	r3, #5
 8011b5c:	d83a      	bhi.n	8011bd4 <rcl_validate_enclave_name_with_size+0xa0>
 8011b5e:	e8df f003 	tbb	[pc, r3]
 8011b62:	2926      	.short	0x2926
 8011b64:	1d322f2c 	.word	0x1d322f2c
 8011b68:	f04f 0c0b 	mov.w	ip, #11
 8011b6c:	4660      	mov	r0, ip
 8011b6e:	b042      	add	sp, #264	; 0x108
 8011b70:	bd70      	pop	{r4, r5, r6, pc}
 8011b72:	2907      	cmp	r1, #7
 8011b74:	d00a      	beq.n	8011b8c <rcl_validate_enclave_name_with_size+0x58>
 8011b76:	2300      	movs	r3, #0
 8011b78:	4660      	mov	r0, ip
 8011b7a:	602b      	str	r3, [r5, #0]
 8011b7c:	b042      	add	sp, #264	; 0x108
 8011b7e:	bd70      	pop	{r4, r5, r6, pc}
 8011b80:	f7ff f90c 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8011b84:	4684      	mov	ip, r0
 8011b86:	4660      	mov	r0, ip
 8011b88:	b042      	add	sp, #264	; 0x108
 8011b8a:	bd70      	pop	{r4, r5, r6, pc}
 8011b8c:	2cff      	cmp	r4, #255	; 0xff
 8011b8e:	d9f2      	bls.n	8011b76 <rcl_validate_enclave_name_with_size+0x42>
 8011b90:	6029      	str	r1, [r5, #0]
 8011b92:	2e00      	cmp	r6, #0
 8011b94:	d0ea      	beq.n	8011b6c <rcl_validate_enclave_name_with_size+0x38>
 8011b96:	23fe      	movs	r3, #254	; 0xfe
 8011b98:	6033      	str	r3, [r6, #0]
 8011b9a:	e7e7      	b.n	8011b6c <rcl_validate_enclave_name_with_size+0x38>
 8011b9c:	2306      	movs	r3, #6
 8011b9e:	602b      	str	r3, [r5, #0]
 8011ba0:	2e00      	cmp	r6, #0
 8011ba2:	d0e3      	beq.n	8011b6c <rcl_validate_enclave_name_with_size+0x38>
 8011ba4:	9b01      	ldr	r3, [sp, #4]
 8011ba6:	4660      	mov	r0, ip
 8011ba8:	6033      	str	r3, [r6, #0]
 8011baa:	b042      	add	sp, #264	; 0x108
 8011bac:	bd70      	pop	{r4, r5, r6, pc}
 8011bae:	2301      	movs	r3, #1
 8011bb0:	602b      	str	r3, [r5, #0]
 8011bb2:	e7f5      	b.n	8011ba0 <rcl_validate_enclave_name_with_size+0x6c>
 8011bb4:	2302      	movs	r3, #2
 8011bb6:	602b      	str	r3, [r5, #0]
 8011bb8:	e7f2      	b.n	8011ba0 <rcl_validate_enclave_name_with_size+0x6c>
 8011bba:	2303      	movs	r3, #3
 8011bbc:	602b      	str	r3, [r5, #0]
 8011bbe:	e7ef      	b.n	8011ba0 <rcl_validate_enclave_name_with_size+0x6c>
 8011bc0:	2304      	movs	r3, #4
 8011bc2:	602b      	str	r3, [r5, #0]
 8011bc4:	e7ec      	b.n	8011ba0 <rcl_validate_enclave_name_with_size+0x6c>
 8011bc6:	2305      	movs	r3, #5
 8011bc8:	602b      	str	r3, [r5, #0]
 8011bca:	e7e9      	b.n	8011ba0 <rcl_validate_enclave_name_with_size+0x6c>
 8011bcc:	f04f 0c0b 	mov.w	ip, #11
 8011bd0:	4660      	mov	r0, ip
 8011bd2:	4770      	bx	lr
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	4a04      	ldr	r2, [pc, #16]	; (8011be8 <rcl_validate_enclave_name_with_size+0xb4>)
 8011bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011bdc:	a802      	add	r0, sp, #8
 8011bde:	f000 f961 	bl	8011ea4 <rcutils_snprintf>
 8011be2:	f04f 0c01 	mov.w	ip, #1
 8011be6:	e7c1      	b.n	8011b6c <rcl_validate_enclave_name_with_size+0x38>
 8011be8:	08016edc 	.word	0x08016edc

08011bec <rcl_validate_enclave_name>:
 8011bec:	b168      	cbz	r0, 8011c0a <rcl_validate_enclave_name+0x1e>
 8011bee:	b570      	push	{r4, r5, r6, lr}
 8011bf0:	460d      	mov	r5, r1
 8011bf2:	4616      	mov	r6, r2
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	f7ee fb85 	bl	8000304 <strlen>
 8011bfa:	4633      	mov	r3, r6
 8011bfc:	4601      	mov	r1, r0
 8011bfe:	462a      	mov	r2, r5
 8011c00:	4620      	mov	r0, r4
 8011c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c06:	f7ff bf95 	b.w	8011b34 <rcl_validate_enclave_name_with_size>
 8011c0a:	200b      	movs	r0, #11
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop

08011c10 <__atomic_load_8>:
 8011c10:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011c14:	4a16      	ldr	r2, [pc, #88]	; (8011c70 <__atomic_load_8+0x60>)
 8011c16:	4b17      	ldr	r3, [pc, #92]	; (8011c74 <__atomic_load_8+0x64>)
 8011c18:	f04f 0c01 	mov.w	ip, #1
 8011c1c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011c20:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011c24:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011c28:	fb02 f101 	mul.w	r1, r2, r1
 8011c2c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011c30:	fba3 2301 	umull	r2, r3, r3, r1
 8011c34:	091b      	lsrs	r3, r3, #4
 8011c36:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011c3a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011c3e:	b4d0      	push	{r4, r6, r7}
 8011c40:	1ac9      	subs	r1, r1, r3
 8011c42:	4c0d      	ldr	r4, [pc, #52]	; (8011c78 <__atomic_load_8+0x68>)
 8011c44:	1862      	adds	r2, r4, r1
 8011c46:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011c4a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011c4e:	2e00      	cmp	r6, #0
 8011c50:	d1f9      	bne.n	8011c46 <__atomic_load_8+0x36>
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	f3bf 8f5b 	dmb	ish
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d1f4      	bne.n	8011c46 <__atomic_load_8+0x36>
 8011c5c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011c60:	f3bf 8f5b 	dmb	ish
 8011c64:	5463      	strb	r3, [r4, r1]
 8011c66:	4630      	mov	r0, r6
 8011c68:	4639      	mov	r1, r7
 8011c6a:	bcd0      	pop	{r4, r6, r7}
 8011c6c:	4770      	bx	lr
 8011c6e:	bf00      	nop
 8011c70:	27d4eb2d 	.word	0x27d4eb2d
 8011c74:	b21642c9 	.word	0xb21642c9
 8011c78:	24010aa8 	.word	0x24010aa8

08011c7c <rcutils_get_env>:
 8011c7c:	b168      	cbz	r0, 8011c9a <rcutils_get_env+0x1e>
 8011c7e:	b510      	push	{r4, lr}
 8011c80:	460c      	mov	r4, r1
 8011c82:	b129      	cbz	r1, 8011c90 <rcutils_get_env+0x14>
 8011c84:	f003 fb58 	bl	8015338 <getenv>
 8011c88:	b120      	cbz	r0, 8011c94 <rcutils_get_env+0x18>
 8011c8a:	6020      	str	r0, [r4, #0]
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	bd10      	pop	{r4, pc}
 8011c90:	4803      	ldr	r0, [pc, #12]	; (8011ca0 <rcutils_get_env+0x24>)
 8011c92:	bd10      	pop	{r4, pc}
 8011c94:	4b03      	ldr	r3, [pc, #12]	; (8011ca4 <rcutils_get_env+0x28>)
 8011c96:	6023      	str	r3, [r4, #0]
 8011c98:	bd10      	pop	{r4, pc}
 8011c9a:	4803      	ldr	r0, [pc, #12]	; (8011ca8 <rcutils_get_env+0x2c>)
 8011c9c:	4770      	bx	lr
 8011c9e:	bf00      	nop
 8011ca0:	08016f58 	.word	0x08016f58
 8011ca4:	0801707c 	.word	0x0801707c
 8011ca8:	08016f3c 	.word	0x08016f3c

08011cac <rcutils_is_directory>:
 8011cac:	2000      	movs	r0, #0
 8011cae:	4770      	bx	lr

08011cb0 <rcutils_join_path>:
 8011cb0:	b082      	sub	sp, #8
 8011cb2:	2000      	movs	r0, #0
 8011cb4:	e88d 000c 	stmia.w	sp, {r2, r3}
 8011cb8:	b002      	add	sp, #8
 8011cba:	4770      	bx	lr

08011cbc <rcutils_to_native_path>:
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	f10d 0c04 	add.w	ip, sp, #4
 8011cc4:	b004      	add	sp, #16
 8011cc6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8011cca:	4770      	bx	lr

08011ccc <rcutils_format_string_limit>:
 8011ccc:	b40f      	push	{r0, r1, r2, r3}
 8011cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cd0:	b083      	sub	sp, #12
 8011cd2:	ac08      	add	r4, sp, #32
 8011cd4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011cda:	b326      	cbz	r6, 8011d26 <rcutils_format_string_limit+0x5a>
 8011cdc:	a808      	add	r0, sp, #32
 8011cde:	f7fa fe3f 	bl	800c960 <rcutils_allocator_is_valid>
 8011ce2:	b300      	cbz	r0, 8011d26 <rcutils_format_string_limit+0x5a>
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	ab0f      	add	r3, sp, #60	; 0x3c
 8011ce8:	4632      	mov	r2, r6
 8011cea:	4608      	mov	r0, r1
 8011cec:	e9cd 3300 	strd	r3, r3, [sp]
 8011cf0:	f000 f906 	bl	8011f00 <rcutils_vsnprintf>
 8011cf4:	1c43      	adds	r3, r0, #1
 8011cf6:	4605      	mov	r5, r0
 8011cf8:	d015      	beq.n	8011d26 <rcutils_format_string_limit+0x5a>
 8011cfa:	1c47      	adds	r7, r0, #1
 8011cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cfe:	429f      	cmp	r7, r3
 8011d00:	d901      	bls.n	8011d06 <rcutils_format_string_limit+0x3a>
 8011d02:	1e5d      	subs	r5, r3, #1
 8011d04:	461f      	mov	r7, r3
 8011d06:	9b08      	ldr	r3, [sp, #32]
 8011d08:	4638      	mov	r0, r7
 8011d0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d0c:	4798      	blx	r3
 8011d0e:	4604      	mov	r4, r0
 8011d10:	b148      	cbz	r0, 8011d26 <rcutils_format_string_limit+0x5a>
 8011d12:	4632      	mov	r2, r6
 8011d14:	4639      	mov	r1, r7
 8011d16:	9b01      	ldr	r3, [sp, #4]
 8011d18:	f000 f8f2 	bl	8011f00 <rcutils_vsnprintf>
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	db09      	blt.n	8011d34 <rcutils_format_string_limit+0x68>
 8011d20:	2300      	movs	r3, #0
 8011d22:	5563      	strb	r3, [r4, r5]
 8011d24:	e000      	b.n	8011d28 <rcutils_format_string_limit+0x5c>
 8011d26:	2400      	movs	r4, #0
 8011d28:	4620      	mov	r0, r4
 8011d2a:	b003      	add	sp, #12
 8011d2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011d30:	b004      	add	sp, #16
 8011d32:	4770      	bx	lr
 8011d34:	4620      	mov	r0, r4
 8011d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d3a:	2400      	movs	r4, #0
 8011d3c:	4798      	blx	r3
 8011d3e:	e7f3      	b.n	8011d28 <rcutils_format_string_limit+0x5c>

08011d40 <rcutils_repl_str>:
 8011d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d44:	ed2d 8b02 	vpush	{d8}
 8011d48:	b087      	sub	sp, #28
 8011d4a:	2600      	movs	r6, #0
 8011d4c:	4680      	mov	r8, r0
 8011d4e:	468a      	mov	sl, r1
 8011d50:	9000      	str	r0, [sp, #0]
 8011d52:	4608      	mov	r0, r1
 8011d54:	ee08 2a10 	vmov	s16, r2
 8011d58:	4699      	mov	r9, r3
 8011d5a:	2510      	movs	r5, #16
 8011d5c:	f7ee fad2 	bl	8000304 <strlen>
 8011d60:	4637      	mov	r7, r6
 8011d62:	46b3      	mov	fp, r6
 8011d64:	9001      	str	r0, [sp, #4]
 8011d66:	e01e      	b.n	8011da6 <rcutils_repl_str+0x66>
 8011d68:	f10b 0b01 	add.w	fp, fp, #1
 8011d6c:	9b01      	ldr	r3, [sp, #4]
 8011d6e:	455e      	cmp	r6, fp
 8011d70:	eb04 0803 	add.w	r8, r4, r3
 8011d74:	d211      	bcs.n	8011d9a <rcutils_repl_str+0x5a>
 8011d76:	442e      	add	r6, r5
 8011d78:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011d7c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d84:	00b1      	lsls	r1, r6, #2
 8011d86:	4798      	blx	r3
 8011d88:	2800      	cmp	r0, #0
 8011d8a:	f000 8088 	beq.w	8011e9e <rcutils_repl_str+0x15e>
 8011d8e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011d92:	4607      	mov	r7, r0
 8011d94:	bf28      	it	cs
 8011d96:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8011d9a:	9a00      	ldr	r2, [sp, #0]
 8011d9c:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8011da0:	1aa4      	subs	r4, r4, r2
 8011da2:	f843 4c04 	str.w	r4, [r3, #-4]
 8011da6:	4651      	mov	r1, sl
 8011da8:	4640      	mov	r0, r8
 8011daa:	f003 fe94 	bl	8015ad6 <strstr>
 8011dae:	4604      	mov	r4, r0
 8011db0:	4638      	mov	r0, r7
 8011db2:	2c00      	cmp	r4, #0
 8011db4:	d1d8      	bne.n	8011d68 <rcutils_repl_str+0x28>
 8011db6:	4640      	mov	r0, r8
 8011db8:	f7ee faa4 	bl	8000304 <strlen>
 8011dbc:	9b00      	ldr	r3, [sp, #0]
 8011dbe:	eba8 0803 	sub.w	r8, r8, r3
 8011dc2:	eb08 0400 	add.w	r4, r8, r0
 8011dc6:	9402      	str	r4, [sp, #8]
 8011dc8:	f1bb 0f00 	cmp.w	fp, #0
 8011dcc:	d045      	beq.n	8011e5a <rcutils_repl_str+0x11a>
 8011dce:	ee18 0a10 	vmov	r0, s16
 8011dd2:	f7ee fa97 	bl	8000304 <strlen>
 8011dd6:	9a01      	ldr	r2, [sp, #4]
 8011dd8:	4606      	mov	r6, r0
 8011dda:	f8d9 3000 	ldr.w	r3, [r9]
 8011dde:	1a82      	subs	r2, r0, r2
 8011de0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011de4:	fb0b 4202 	mla	r2, fp, r2, r4
 8011de8:	1c50      	adds	r0, r2, #1
 8011dea:	9205      	str	r2, [sp, #20]
 8011dec:	4798      	blx	r3
 8011dee:	4682      	mov	sl, r0
 8011df0:	2800      	cmp	r0, #0
 8011df2:	d054      	beq.n	8011e9e <rcutils_repl_str+0x15e>
 8011df4:	683a      	ldr	r2, [r7, #0]
 8011df6:	463d      	mov	r5, r7
 8011df8:	9900      	ldr	r1, [sp, #0]
 8011dfa:	2401      	movs	r4, #1
 8011dfc:	f003 ff63 	bl	8015cc6 <memcpy>
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8011e06:	eb0a 0803 	add.w	r8, sl, r3
 8011e0a:	ee18 7a10 	vmov	r7, s16
 8011e0e:	f8dd a000 	ldr.w	sl, [sp]
 8011e12:	f8cd 9000 	str.w	r9, [sp]
 8011e16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011e1a:	4632      	mov	r2, r6
 8011e1c:	4639      	mov	r1, r7
 8011e1e:	4640      	mov	r0, r8
 8011e20:	44b0      	add	r8, r6
 8011e22:	f003 ff50 	bl	8015cc6 <memcpy>
 8011e26:	f855 2b04 	ldr.w	r2, [r5], #4
 8011e2a:	45a3      	cmp	fp, r4
 8011e2c:	444a      	add	r2, r9
 8011e2e:	eb0a 0102 	add.w	r1, sl, r2
 8011e32:	d02a      	beq.n	8011e8a <rcutils_repl_str+0x14a>
 8011e34:	6828      	ldr	r0, [r5, #0]
 8011e36:	1a82      	subs	r2, r0, r2
 8011e38:	4640      	mov	r0, r8
 8011e3a:	4490      	add	r8, r2
 8011e3c:	f003 ff43 	bl	8015cc6 <memcpy>
 8011e40:	1c62      	adds	r2, r4, #1
 8011e42:	45a3      	cmp	fp, r4
 8011e44:	4614      	mov	r4, r2
 8011e46:	d8e8      	bhi.n	8011e1a <rcutils_repl_str+0xda>
 8011e48:	f8dd 9000 	ldr.w	r9, [sp]
 8011e4c:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8011e50:	2300      	movs	r3, #0
 8011e52:	9a05      	ldr	r2, [sp, #20]
 8011e54:	f80a 3002 	strb.w	r3, [sl, r2]
 8011e58:	e00b      	b.n	8011e72 <rcutils_repl_str+0x132>
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	f8d9 3000 	ldr.w	r3, [r9]
 8011e60:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011e64:	3001      	adds	r0, #1
 8011e66:	4798      	blx	r3
 8011e68:	4682      	mov	sl, r0
 8011e6a:	b110      	cbz	r0, 8011e72 <rcutils_repl_str+0x132>
 8011e6c:	9900      	ldr	r1, [sp, #0]
 8011e6e:	f003 ff22 	bl	8015cb6 <strcpy>
 8011e72:	4638      	mov	r0, r7
 8011e74:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011e78:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011e7c:	4798      	blx	r3
 8011e7e:	4650      	mov	r0, sl
 8011e80:	b007      	add	sp, #28
 8011e82:	ecbd 8b02 	vpop	{d8}
 8011e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e8a:	9b02      	ldr	r3, [sp, #8]
 8011e8c:	4640      	mov	r0, r8
 8011e8e:	f8dd 9000 	ldr.w	r9, [sp]
 8011e92:	1a9a      	subs	r2, r3, r2
 8011e94:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8011e98:	f003 ff15 	bl	8015cc6 <memcpy>
 8011e9c:	e7d8      	b.n	8011e50 <rcutils_repl_str+0x110>
 8011e9e:	f04f 0a00 	mov.w	sl, #0
 8011ea2:	e7e6      	b.n	8011e72 <rcutils_repl_str+0x132>

08011ea4 <rcutils_snprintf>:
 8011ea4:	b40c      	push	{r2, r3}
 8011ea6:	b530      	push	{r4, r5, lr}
 8011ea8:	b083      	sub	sp, #12
 8011eaa:	ab06      	add	r3, sp, #24
 8011eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eb0:	9301      	str	r3, [sp, #4]
 8011eb2:	b1e2      	cbz	r2, 8011eee <rcutils_snprintf+0x4a>
 8011eb4:	fab0 f480 	clz	r4, r0
 8011eb8:	fab1 f581 	clz	r5, r1
 8011ebc:	ea50 0c01 	orrs.w	ip, r0, r1
 8011ec0:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8011ec4:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8011ec8:	d008      	beq.n	8011edc <rcutils_snprintf+0x38>
 8011eca:	b984      	cbnz	r4, 8011eee <rcutils_snprintf+0x4a>
 8011ecc:	b97d      	cbnz	r5, 8011eee <rcutils_snprintf+0x4a>
 8011ece:	f003 fdcd 	bl	8015a6c <vsniprintf>
 8011ed2:	b003      	add	sp, #12
 8011ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ed8:	b002      	add	sp, #8
 8011eda:	4770      	bx	lr
 8011edc:	4661      	mov	r1, ip
 8011ede:	4660      	mov	r0, ip
 8011ee0:	f003 fdc4 	bl	8015a6c <vsniprintf>
 8011ee4:	b003      	add	sp, #12
 8011ee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011eea:	b002      	add	sp, #8
 8011eec:	4770      	bx	lr
 8011eee:	f003 feb5 	bl	8015c5c <__errno>
 8011ef2:	2216      	movs	r2, #22
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011efa:	601a      	str	r2, [r3, #0]
 8011efc:	e7e9      	b.n	8011ed2 <rcutils_snprintf+0x2e>
 8011efe:	bf00      	nop

08011f00 <rcutils_vsnprintf>:
 8011f00:	b570      	push	{r4, r5, r6, lr}
 8011f02:	b1b2      	cbz	r2, 8011f32 <rcutils_vsnprintf+0x32>
 8011f04:	fab0 f480 	clz	r4, r0
 8011f08:	fab1 f581 	clz	r5, r1
 8011f0c:	ea50 0c01 	orrs.w	ip, r0, r1
 8011f10:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8011f14:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8011f18:	d005      	beq.n	8011f26 <rcutils_vsnprintf+0x26>
 8011f1a:	b954      	cbnz	r4, 8011f32 <rcutils_vsnprintf+0x32>
 8011f1c:	b94d      	cbnz	r5, 8011f32 <rcutils_vsnprintf+0x32>
 8011f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f22:	f003 bda3 	b.w	8015a6c <vsniprintf>
 8011f26:	4661      	mov	r1, ip
 8011f28:	4660      	mov	r0, ip
 8011f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f2e:	f003 bd9d 	b.w	8015a6c <vsniprintf>
 8011f32:	f003 fe93 	bl	8015c5c <__errno>
 8011f36:	2316      	movs	r3, #22
 8011f38:	6003      	str	r3, [r0, #0]
 8011f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}

08011f40 <rcutils_strdup>:
 8011f40:	b084      	sub	sp, #16
 8011f42:	b570      	push	{r4, r5, r6, lr}
 8011f44:	b082      	sub	sp, #8
 8011f46:	4605      	mov	r5, r0
 8011f48:	ac07      	add	r4, sp, #28
 8011f4a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8011f4e:	b1b0      	cbz	r0, 8011f7e <rcutils_strdup+0x3e>
 8011f50:	f7ee f9d8 	bl	8000304 <strlen>
 8011f54:	1c42      	adds	r2, r0, #1
 8011f56:	9b07      	ldr	r3, [sp, #28]
 8011f58:	4606      	mov	r6, r0
 8011f5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f5c:	4610      	mov	r0, r2
 8011f5e:	9201      	str	r2, [sp, #4]
 8011f60:	4798      	blx	r3
 8011f62:	4604      	mov	r4, r0
 8011f64:	b128      	cbz	r0, 8011f72 <rcutils_strdup+0x32>
 8011f66:	9a01      	ldr	r2, [sp, #4]
 8011f68:	4629      	mov	r1, r5
 8011f6a:	f003 feac 	bl	8015cc6 <memcpy>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	55a3      	strb	r3, [r4, r6]
 8011f72:	4620      	mov	r0, r4
 8011f74:	b002      	add	sp, #8
 8011f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f7a:	b004      	add	sp, #16
 8011f7c:	4770      	bx	lr
 8011f7e:	4604      	mov	r4, r0
 8011f80:	e7f7      	b.n	8011f72 <rcutils_strdup+0x32>
 8011f82:	bf00      	nop

08011f84 <rcutils_strndup>:
 8011f84:	b082      	sub	sp, #8
 8011f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f88:	ac06      	add	r4, sp, #24
 8011f8a:	4605      	mov	r5, r0
 8011f8c:	e884 000c 	stmia.w	r4, {r2, r3}
 8011f90:	b188      	cbz	r0, 8011fb6 <rcutils_strndup+0x32>
 8011f92:	1c4f      	adds	r7, r1, #1
 8011f94:	460e      	mov	r6, r1
 8011f96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f98:	4638      	mov	r0, r7
 8011f9a:	4790      	blx	r2
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	b128      	cbz	r0, 8011fac <rcutils_strndup+0x28>
 8011fa0:	463a      	mov	r2, r7
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	f003 fe8f 	bl	8015cc6 <memcpy>
 8011fa8:	2300      	movs	r3, #0
 8011faa:	55a3      	strb	r3, [r4, r6]
 8011fac:	4620      	mov	r0, r4
 8011fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011fb2:	b002      	add	sp, #8
 8011fb4:	4770      	bx	lr
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	e7f8      	b.n	8011fac <rcutils_strndup+0x28>
 8011fba:	bf00      	nop

08011fbc <rcutils_get_zero_initialized_string_map>:
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	4b01      	ldr	r3, [pc, #4]	; (8011fc4 <rcutils_get_zero_initialized_string_map+0x8>)
 8011fc0:	6018      	str	r0, [r3, #0]
 8011fc2:	4770      	bx	lr
 8011fc4:	24010ac0 	.word	0x24010ac0

08011fc8 <rcutils_string_map_reserve>:
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	d05e      	beq.n	801208a <rcutils_string_map_reserve+0xc2>
 8011fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd0:	460c      	mov	r4, r1
 8011fd2:	6801      	ldr	r1, [r0, #0]
 8011fd4:	b082      	sub	sp, #8
 8011fd6:	4605      	mov	r5, r0
 8011fd8:	b129      	cbz	r1, 8011fe6 <rcutils_string_map_reserve+0x1e>
 8011fda:	68cb      	ldr	r3, [r1, #12]
 8011fdc:	42a3      	cmp	r3, r4
 8011fde:	d906      	bls.n	8011fee <rcutils_string_map_reserve+0x26>
 8011fe0:	461c      	mov	r4, r3
 8011fe2:	2900      	cmp	r1, #0
 8011fe4:	d1f9      	bne.n	8011fda <rcutils_string_map_reserve+0x12>
 8011fe6:	201f      	movs	r0, #31
 8011fe8:	b002      	add	sp, #8
 8011fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fee:	688b      	ldr	r3, [r1, #8]
 8011ff0:	42a3      	cmp	r3, r4
 8011ff2:	d046      	beq.n	8012082 <rcutils_string_map_reserve+0xba>
 8011ff4:	6a0e      	ldr	r6, [r1, #32]
 8011ff6:	2c00      	cmp	r4, #0
 8011ff8:	d033      	beq.n	8012062 <rcutils_string_map_reserve+0x9a>
 8011ffa:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8011ffe:	d242      	bcs.n	8012086 <rcutils_string_map_reserve+0xbe>
 8012000:	00a7      	lsls	r7, r4, #2
 8012002:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012006:	6808      	ldr	r0, [r1, #0]
 8012008:	4632      	mov	r2, r6
 801200a:	4639      	mov	r1, r7
 801200c:	47c0      	blx	r8
 801200e:	2800      	cmp	r0, #0
 8012010:	d039      	beq.n	8012086 <rcutils_string_map_reserve+0xbe>
 8012012:	682b      	ldr	r3, [r5, #0]
 8012014:	4632      	mov	r2, r6
 8012016:	4639      	mov	r1, r7
 8012018:	6018      	str	r0, [r3, #0]
 801201a:	6858      	ldr	r0, [r3, #4]
 801201c:	47c0      	blx	r8
 801201e:	2800      	cmp	r0, #0
 8012020:	d031      	beq.n	8012086 <rcutils_string_map_reserve+0xbe>
 8012022:	682d      	ldr	r5, [r5, #0]
 8012024:	68ab      	ldr	r3, [r5, #8]
 8012026:	6068      	str	r0, [r5, #4]
 8012028:	42a3      	cmp	r3, r4
 801202a:	d225      	bcs.n	8012078 <rcutils_string_map_reserve+0xb0>
 801202c:	682a      	ldr	r2, [r5, #0]
 801202e:	eb00 0c07 	add.w	ip, r0, r7
 8012032:	0099      	lsls	r1, r3, #2
 8012034:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012038:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801203c:	45e6      	cmp	lr, ip
 801203e:	d203      	bcs.n	8012048 <rcutils_string_map_reserve+0x80>
 8012040:	eb02 0c07 	add.w	ip, r2, r7
 8012044:	4566      	cmp	r6, ip
 8012046:	d322      	bcc.n	801208e <rcutils_string_map_reserve+0xc6>
 8012048:	1ae3      	subs	r3, r4, r3
 801204a:	4670      	mov	r0, lr
 801204c:	2100      	movs	r1, #0
 801204e:	009a      	lsls	r2, r3, #2
 8012050:	9201      	str	r2, [sp, #4]
 8012052:	f003 fd19 	bl	8015a88 <memset>
 8012056:	9a01      	ldr	r2, [sp, #4]
 8012058:	2100      	movs	r1, #0
 801205a:	4630      	mov	r0, r6
 801205c:	f003 fd14 	bl	8015a88 <memset>
 8012060:	e00a      	b.n	8012078 <rcutils_string_map_reserve+0xb0>
 8012062:	694f      	ldr	r7, [r1, #20]
 8012064:	6808      	ldr	r0, [r1, #0]
 8012066:	4631      	mov	r1, r6
 8012068:	47b8      	blx	r7
 801206a:	682b      	ldr	r3, [r5, #0]
 801206c:	4631      	mov	r1, r6
 801206e:	6858      	ldr	r0, [r3, #4]
 8012070:	601c      	str	r4, [r3, #0]
 8012072:	47b8      	blx	r7
 8012074:	682d      	ldr	r5, [r5, #0]
 8012076:	606c      	str	r4, [r5, #4]
 8012078:	2000      	movs	r0, #0
 801207a:	60ac      	str	r4, [r5, #8]
 801207c:	b002      	add	sp, #8
 801207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012082:	2000      	movs	r0, #0
 8012084:	e7b0      	b.n	8011fe8 <rcutils_string_map_reserve+0x20>
 8012086:	200a      	movs	r0, #10
 8012088:	e7ae      	b.n	8011fe8 <rcutils_string_map_reserve+0x20>
 801208a:	200b      	movs	r0, #11
 801208c:	4770      	bx	lr
 801208e:	1f0b      	subs	r3, r1, #4
 8012090:	4418      	add	r0, r3
 8012092:	4413      	add	r3, r2
 8012094:	3a04      	subs	r2, #4
 8012096:	4417      	add	r7, r2
 8012098:	2200      	movs	r2, #0
 801209a:	f843 2f04 	str.w	r2, [r3, #4]!
 801209e:	42bb      	cmp	r3, r7
 80120a0:	f840 2f04 	str.w	r2, [r0, #4]!
 80120a4:	d1f9      	bne.n	801209a <rcutils_string_map_reserve+0xd2>
 80120a6:	e7e7      	b.n	8012078 <rcutils_string_map_reserve+0xb0>

080120a8 <rcutils_string_map_init>:
 80120a8:	b082      	sub	sp, #8
 80120aa:	b570      	push	{r4, r5, r6, lr}
 80120ac:	ac04      	add	r4, sp, #16
 80120ae:	e884 000c 	stmia.w	r4, {r2, r3}
 80120b2:	b380      	cbz	r0, 8012116 <rcutils_string_map_init+0x6e>
 80120b4:	6806      	ldr	r6, [r0, #0]
 80120b6:	4604      	mov	r4, r0
 80120b8:	b12e      	cbz	r6, 80120c6 <rcutils_string_map_init+0x1e>
 80120ba:	251e      	movs	r5, #30
 80120bc:	4628      	mov	r0, r5
 80120be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120c2:	b002      	add	sp, #8
 80120c4:	4770      	bx	lr
 80120c6:	a804      	add	r0, sp, #16
 80120c8:	460d      	mov	r5, r1
 80120ca:	f7fa fc49 	bl	800c960 <rcutils_allocator_is_valid>
 80120ce:	b310      	cbz	r0, 8012116 <rcutils_string_map_init+0x6e>
 80120d0:	9b04      	ldr	r3, [sp, #16]
 80120d2:	2024      	movs	r0, #36	; 0x24
 80120d4:	9908      	ldr	r1, [sp, #32]
 80120d6:	4798      	blx	r3
 80120d8:	6020      	str	r0, [r4, #0]
 80120da:	b310      	cbz	r0, 8012122 <rcutils_string_map_init+0x7a>
 80120dc:	f10d 0e10 	add.w	lr, sp, #16
 80120e0:	f100 0c10 	add.w	ip, r0, #16
 80120e4:	e9c0 6600 	strd	r6, r6, [r0]
 80120e8:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80120ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120f4:	f8de 3000 	ldr.w	r3, [lr]
 80120f8:	4629      	mov	r1, r5
 80120fa:	4620      	mov	r0, r4
 80120fc:	f8cc 3000 	str.w	r3, [ip]
 8012100:	f7ff ff62 	bl	8011fc8 <rcutils_string_map_reserve>
 8012104:	4605      	mov	r5, r0
 8012106:	2800      	cmp	r0, #0
 8012108:	d0d8      	beq.n	80120bc <rcutils_string_map_init+0x14>
 801210a:	9b05      	ldr	r3, [sp, #20]
 801210c:	9908      	ldr	r1, [sp, #32]
 801210e:	6820      	ldr	r0, [r4, #0]
 8012110:	4798      	blx	r3
 8012112:	6026      	str	r6, [r4, #0]
 8012114:	e7d2      	b.n	80120bc <rcutils_string_map_init+0x14>
 8012116:	250b      	movs	r5, #11
 8012118:	4628      	mov	r0, r5
 801211a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801211e:	b002      	add	sp, #8
 8012120:	4770      	bx	lr
 8012122:	250a      	movs	r5, #10
 8012124:	e7ca      	b.n	80120bc <rcutils_string_map_init+0x14>
 8012126:	bf00      	nop

08012128 <rcutils_string_map_fini>:
 8012128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801212c:	b082      	sub	sp, #8
 801212e:	2800      	cmp	r0, #0
 8012130:	d03a      	beq.n	80121a8 <rcutils_string_map_fini+0x80>
 8012132:	6804      	ldr	r4, [r0, #0]
 8012134:	4606      	mov	r6, r0
 8012136:	2c00      	cmp	r4, #0
 8012138:	d032      	beq.n	80121a0 <rcutils_string_map_fini+0x78>
 801213a:	68a3      	ldr	r3, [r4, #8]
 801213c:	b32b      	cbz	r3, 801218a <rcutils_string_map_fini+0x62>
 801213e:	2500      	movs	r5, #0
 8012140:	6822      	ldr	r2, [r4, #0]
 8012142:	462f      	mov	r7, r5
 8012144:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012148:	b1e0      	cbz	r0, 8012184 <rcutils_string_map_fini+0x5c>
 801214a:	6a21      	ldr	r1, [r4, #32]
 801214c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012150:	9101      	str	r1, [sp, #4]
 8012152:	47c0      	blx	r8
 8012154:	9901      	ldr	r1, [sp, #4]
 8012156:	e9d4 3200 	ldrd	r3, r2, [r4]
 801215a:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801215e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012162:	47c0      	blx	r8
 8012164:	68e3      	ldr	r3, [r4, #12]
 8012166:	6862      	ldr	r2, [r4, #4]
 8012168:	3b01      	subs	r3, #1
 801216a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801216e:	3501      	adds	r5, #1
 8012170:	60e3      	str	r3, [r4, #12]
 8012172:	6834      	ldr	r4, [r6, #0]
 8012174:	68a3      	ldr	r3, [r4, #8]
 8012176:	429d      	cmp	r5, r3
 8012178:	d207      	bcs.n	801218a <rcutils_string_map_fini+0x62>
 801217a:	6822      	ldr	r2, [r4, #0]
 801217c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012180:	2800      	cmp	r0, #0
 8012182:	d1e2      	bne.n	801214a <rcutils_string_map_fini+0x22>
 8012184:	3501      	adds	r5, #1
 8012186:	429d      	cmp	r5, r3
 8012188:	d3dc      	bcc.n	8012144 <rcutils_string_map_fini+0x1c>
 801218a:	2100      	movs	r1, #0
 801218c:	4630      	mov	r0, r6
 801218e:	f7ff ff1b 	bl	8011fc8 <rcutils_string_map_reserve>
 8012192:	4604      	mov	r4, r0
 8012194:	b920      	cbnz	r0, 80121a0 <rcutils_string_map_fini+0x78>
 8012196:	6830      	ldr	r0, [r6, #0]
 8012198:	6943      	ldr	r3, [r0, #20]
 801219a:	6a01      	ldr	r1, [r0, #32]
 801219c:	4798      	blx	r3
 801219e:	6034      	str	r4, [r6, #0]
 80121a0:	4620      	mov	r0, r4
 80121a2:	b002      	add	sp, #8
 80121a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a8:	240b      	movs	r4, #11
 80121aa:	4620      	mov	r0, r4
 80121ac:	b002      	add	sp, #8
 80121ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b2:	bf00      	nop

080121b4 <rcutils_string_map_getn>:
 80121b4:	b378      	cbz	r0, 8012216 <rcutils_string_map_getn+0x62>
 80121b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ba:	f8d0 b000 	ldr.w	fp, [r0]
 80121be:	f1bb 0f00 	cmp.w	fp, #0
 80121c2:	d01f      	beq.n	8012204 <rcutils_string_map_getn+0x50>
 80121c4:	fab1 f481 	clz	r4, r1
 80121c8:	4688      	mov	r8, r1
 80121ca:	0964      	lsrs	r4, r4, #5
 80121cc:	b1d1      	cbz	r1, 8012204 <rcutils_string_map_getn+0x50>
 80121ce:	f8db 7008 	ldr.w	r7, [fp, #8]
 80121d2:	f8db 6000 	ldr.w	r6, [fp]
 80121d6:	b1af      	cbz	r7, 8012204 <rcutils_string_map_getn+0x50>
 80121d8:	4691      	mov	r9, r2
 80121da:	3e04      	subs	r6, #4
 80121dc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80121e0:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80121e4:	3401      	adds	r4, #1
 80121e6:	4628      	mov	r0, r5
 80121e8:	b155      	cbz	r5, 8012200 <rcutils_string_map_getn+0x4c>
 80121ea:	f7ee f88b 	bl	8000304 <strlen>
 80121ee:	4602      	mov	r2, r0
 80121f0:	4629      	mov	r1, r5
 80121f2:	4640      	mov	r0, r8
 80121f4:	454a      	cmp	r2, r9
 80121f6:	bf38      	it	cc
 80121f8:	464a      	movcc	r2, r9
 80121fa:	f003 fc5a 	bl	8015ab2 <strncmp>
 80121fe:	b120      	cbz	r0, 801220a <rcutils_string_map_getn+0x56>
 8012200:	42a7      	cmp	r7, r4
 8012202:	d1eb      	bne.n	80121dc <rcutils_string_map_getn+0x28>
 8012204:	2000      	movs	r0, #0
 8012206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801220e:	f853 000a 	ldr.w	r0, [r3, sl]
 8012212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012216:	4770      	bx	lr

08012218 <rcutils_system_time_now>:
 8012218:	b300      	cbz	r0, 801225c <rcutils_system_time_now+0x44>
 801221a:	b570      	push	{r4, r5, r6, lr}
 801221c:	b084      	sub	sp, #16
 801221e:	4604      	mov	r4, r0
 8012220:	2001      	movs	r0, #1
 8012222:	4669      	mov	r1, sp
 8012224:	f7ef f998 	bl	8001558 <clock_gettime>
 8012228:	e9dd 3100 	ldrd	r3, r1, [sp]
 801222c:	2900      	cmp	r1, #0
 801222e:	db12      	blt.n	8012256 <rcutils_system_time_now+0x3e>
 8012230:	ea53 0201 	orrs.w	r2, r3, r1
 8012234:	9d02      	ldr	r5, [sp, #8]
 8012236:	d101      	bne.n	801223c <rcutils_system_time_now+0x24>
 8012238:	2d00      	cmp	r5, #0
 801223a:	db0c      	blt.n	8012256 <rcutils_system_time_now+0x3e>
 801223c:	4e08      	ldr	r6, [pc, #32]	; (8012260 <rcutils_system_time_now+0x48>)
 801223e:	2000      	movs	r0, #0
 8012240:	fba3 3206 	umull	r3, r2, r3, r6
 8012244:	195b      	adds	r3, r3, r5
 8012246:	fb06 2201 	mla	r2, r6, r1, r2
 801224a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801224e:	e9c4 3200 	strd	r3, r2, [r4]
 8012252:	b004      	add	sp, #16
 8012254:	bd70      	pop	{r4, r5, r6, pc}
 8012256:	2002      	movs	r0, #2
 8012258:	b004      	add	sp, #16
 801225a:	bd70      	pop	{r4, r5, r6, pc}
 801225c:	200b      	movs	r0, #11
 801225e:	4770      	bx	lr
 8012260:	3b9aca00 	.word	0x3b9aca00

08012264 <rcutils_steady_time_now>:
 8012264:	b300      	cbz	r0, 80122a8 <rcutils_steady_time_now+0x44>
 8012266:	b570      	push	{r4, r5, r6, lr}
 8012268:	b084      	sub	sp, #16
 801226a:	4604      	mov	r4, r0
 801226c:	2000      	movs	r0, #0
 801226e:	4669      	mov	r1, sp
 8012270:	f7ef f972 	bl	8001558 <clock_gettime>
 8012274:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012278:	2900      	cmp	r1, #0
 801227a:	db12      	blt.n	80122a2 <rcutils_steady_time_now+0x3e>
 801227c:	ea53 0201 	orrs.w	r2, r3, r1
 8012280:	9d02      	ldr	r5, [sp, #8]
 8012282:	d101      	bne.n	8012288 <rcutils_steady_time_now+0x24>
 8012284:	2d00      	cmp	r5, #0
 8012286:	db0c      	blt.n	80122a2 <rcutils_steady_time_now+0x3e>
 8012288:	4e08      	ldr	r6, [pc, #32]	; (80122ac <rcutils_steady_time_now+0x48>)
 801228a:	2000      	movs	r0, #0
 801228c:	fba3 3206 	umull	r3, r2, r3, r6
 8012290:	195b      	adds	r3, r3, r5
 8012292:	fb06 2201 	mla	r2, r6, r1, r2
 8012296:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801229a:	e9c4 3200 	strd	r3, r2, [r4]
 801229e:	b004      	add	sp, #16
 80122a0:	bd70      	pop	{r4, r5, r6, pc}
 80122a2:	2002      	movs	r0, #2
 80122a4:	b004      	add	sp, #16
 80122a6:	bd70      	pop	{r4, r5, r6, pc}
 80122a8:	200b      	movs	r0, #11
 80122aa:	4770      	bx	lr
 80122ac:	3b9aca00 	.word	0x3b9aca00

080122b0 <rmw_get_zero_initialized_context>:
 80122b0:	b510      	push	{r4, lr}
 80122b2:	4604      	mov	r4, r0
 80122b4:	3010      	adds	r0, #16
 80122b6:	f000 f80f 	bl	80122d8 <rmw_get_zero_initialized_init_options>
 80122ba:	2300      	movs	r3, #0
 80122bc:	4620      	mov	r0, r4
 80122be:	60a3      	str	r3, [r4, #8]
 80122c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80122c2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80122c4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 80122d0 <rmw_get_zero_initialized_context+0x20>
 80122c8:	ed84 7b00 	vstr	d7, [r4]
 80122cc:	bd10      	pop	{r4, pc}
 80122ce:	bf00      	nop
	...

080122d8 <rmw_get_zero_initialized_init_options>:
 80122d8:	b510      	push	{r4, lr}
 80122da:	4604      	mov	r4, r0
 80122dc:	2238      	movs	r2, #56	; 0x38
 80122de:	2100      	movs	r1, #0
 80122e0:	f003 fbd2 	bl	8015a88 <memset>
 80122e4:	f104 0010 	add.w	r0, r4, #16
 80122e8:	f000 f806 	bl	80122f8 <rmw_get_default_security_options>
 80122ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122f0:	4620      	mov	r0, r4
 80122f2:	60e3      	str	r3, [r4, #12]
 80122f4:	bd10      	pop	{r4, pc}
 80122f6:	bf00      	nop

080122f8 <rmw_get_default_security_options>:
 80122f8:	2200      	movs	r2, #0
 80122fa:	7002      	strb	r2, [r0, #0]
 80122fc:	6042      	str	r2, [r0, #4]
 80122fe:	4770      	bx	lr

08012300 <rmw_validate_full_topic_name>:
 8012300:	2800      	cmp	r0, #0
 8012302:	d05d      	beq.n	80123c0 <rmw_validate_full_topic_name+0xc0>
 8012304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012308:	460d      	mov	r5, r1
 801230a:	2900      	cmp	r1, #0
 801230c:	d05a      	beq.n	80123c4 <rmw_validate_full_topic_name+0xc4>
 801230e:	4604      	mov	r4, r0
 8012310:	4616      	mov	r6, r2
 8012312:	f7ed fff7 	bl	8000304 <strlen>
 8012316:	b150      	cbz	r0, 801232e <rmw_validate_full_topic_name+0x2e>
 8012318:	7823      	ldrb	r3, [r4, #0]
 801231a:	2b2f      	cmp	r3, #47	; 0x2f
 801231c:	d00e      	beq.n	801233c <rmw_validate_full_topic_name+0x3c>
 801231e:	2302      	movs	r3, #2
 8012320:	602b      	str	r3, [r5, #0]
 8012322:	b146      	cbz	r6, 8012336 <rmw_validate_full_topic_name+0x36>
 8012324:	2300      	movs	r3, #0
 8012326:	4618      	mov	r0, r3
 8012328:	6033      	str	r3, [r6, #0]
 801232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801232e:	2301      	movs	r3, #1
 8012330:	602b      	str	r3, [r5, #0]
 8012332:	2e00      	cmp	r6, #0
 8012334:	d1f6      	bne.n	8012324 <rmw_validate_full_topic_name+0x24>
 8012336:	2000      	movs	r0, #0
 8012338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801233c:	1e43      	subs	r3, r0, #1
 801233e:	5ce2      	ldrb	r2, [r4, r3]
 8012340:	2a2f      	cmp	r2, #47	; 0x2f
 8012342:	d041      	beq.n	80123c8 <rmw_validate_full_topic_name+0xc8>
 8012344:	1e62      	subs	r2, r4, #1
 8012346:	f1c4 0e01 	rsb	lr, r4, #1
 801234a:	eb02 0800 	add.w	r8, r2, r0
 801234e:	eb0e 0702 	add.w	r7, lr, r2
 8012352:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012356:	f023 0120 	bic.w	r1, r3, #32
 801235a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801235e:	3941      	subs	r1, #65	; 0x41
 8012360:	2919      	cmp	r1, #25
 8012362:	d90f      	bls.n	8012384 <rmw_validate_full_topic_name+0x84>
 8012364:	f1bc 0f0a 	cmp.w	ip, #10
 8012368:	d90c      	bls.n	8012384 <rmw_validate_full_topic_name+0x84>
 801236a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801236e:	fab3 f383 	clz	r3, r3
 8012372:	095b      	lsrs	r3, r3, #5
 8012374:	b933      	cbnz	r3, 8012384 <rmw_validate_full_topic_name+0x84>
 8012376:	2204      	movs	r2, #4
 8012378:	602a      	str	r2, [r5, #0]
 801237a:	2e00      	cmp	r6, #0
 801237c:	d0db      	beq.n	8012336 <rmw_validate_full_topic_name+0x36>
 801237e:	4618      	mov	r0, r3
 8012380:	6037      	str	r7, [r6, #0]
 8012382:	e7d2      	b.n	801232a <rmw_validate_full_topic_name+0x2a>
 8012384:	4542      	cmp	r2, r8
 8012386:	d1e2      	bne.n	801234e <rmw_validate_full_topic_name+0x4e>
 8012388:	2301      	movs	r3, #1
 801238a:	4f1a      	ldr	r7, [pc, #104]	; (80123f4 <rmw_validate_full_topic_name+0xf4>)
 801238c:	e004      	b.n	8012398 <rmw_validate_full_topic_name+0x98>
 801238e:	4298      	cmp	r0, r3
 8012390:	f104 0401 	add.w	r4, r4, #1
 8012394:	4613      	mov	r3, r2
 8012396:	d91c      	bls.n	80123d2 <rmw_validate_full_topic_name+0xd2>
 8012398:	4298      	cmp	r0, r3
 801239a:	f103 0201 	add.w	r2, r3, #1
 801239e:	d0f6      	beq.n	801238e <rmw_validate_full_topic_name+0x8e>
 80123a0:	7821      	ldrb	r1, [r4, #0]
 80123a2:	292f      	cmp	r1, #47	; 0x2f
 80123a4:	d1f3      	bne.n	801238e <rmw_validate_full_topic_name+0x8e>
 80123a6:	7861      	ldrb	r1, [r4, #1]
 80123a8:	292f      	cmp	r1, #47	; 0x2f
 80123aa:	d01e      	beq.n	80123ea <rmw_validate_full_topic_name+0xea>
 80123ac:	5dc9      	ldrb	r1, [r1, r7]
 80123ae:	0749      	lsls	r1, r1, #29
 80123b0:	d5ed      	bpl.n	801238e <rmw_validate_full_topic_name+0x8e>
 80123b2:	2206      	movs	r2, #6
 80123b4:	602a      	str	r2, [r5, #0]
 80123b6:	2e00      	cmp	r6, #0
 80123b8:	d0bd      	beq.n	8012336 <rmw_validate_full_topic_name+0x36>
 80123ba:	2000      	movs	r0, #0
 80123bc:	6033      	str	r3, [r6, #0]
 80123be:	e7b4      	b.n	801232a <rmw_validate_full_topic_name+0x2a>
 80123c0:	200b      	movs	r0, #11
 80123c2:	4770      	bx	lr
 80123c4:	200b      	movs	r0, #11
 80123c6:	e7b0      	b.n	801232a <rmw_validate_full_topic_name+0x2a>
 80123c8:	2203      	movs	r2, #3
 80123ca:	602a      	str	r2, [r5, #0]
 80123cc:	2e00      	cmp	r6, #0
 80123ce:	d1f4      	bne.n	80123ba <rmw_validate_full_topic_name+0xba>
 80123d0:	e7b1      	b.n	8012336 <rmw_validate_full_topic_name+0x36>
 80123d2:	28f7      	cmp	r0, #247	; 0xf7
 80123d4:	d803      	bhi.n	80123de <rmw_validate_full_topic_name+0xde>
 80123d6:	2300      	movs	r3, #0
 80123d8:	4618      	mov	r0, r3
 80123da:	602b      	str	r3, [r5, #0]
 80123dc:	e7a5      	b.n	801232a <rmw_validate_full_topic_name+0x2a>
 80123de:	2307      	movs	r3, #7
 80123e0:	602b      	str	r3, [r5, #0]
 80123e2:	2e00      	cmp	r6, #0
 80123e4:	d0a7      	beq.n	8012336 <rmw_validate_full_topic_name+0x36>
 80123e6:	23f6      	movs	r3, #246	; 0xf6
 80123e8:	e7e7      	b.n	80123ba <rmw_validate_full_topic_name+0xba>
 80123ea:	2205      	movs	r2, #5
 80123ec:	602a      	str	r2, [r5, #0]
 80123ee:	2e00      	cmp	r6, #0
 80123f0:	d1e3      	bne.n	80123ba <rmw_validate_full_topic_name+0xba>
 80123f2:	e7a0      	b.n	8012336 <rmw_validate_full_topic_name+0x36>
 80123f4:	0801756c 	.word	0x0801756c

080123f8 <rmw_validate_namespace_with_size>:
 80123f8:	2800      	cmp	r0, #0
 80123fa:	d043      	beq.n	8012484 <rmw_validate_namespace_with_size+0x8c>
 80123fc:	b570      	push	{r4, r5, r6, lr}
 80123fe:	4614      	mov	r4, r2
 8012400:	b0c2      	sub	sp, #264	; 0x108
 8012402:	b32a      	cbz	r2, 8012450 <rmw_validate_namespace_with_size+0x58>
 8012404:	2901      	cmp	r1, #1
 8012406:	460d      	mov	r5, r1
 8012408:	461e      	mov	r6, r3
 801240a:	d102      	bne.n	8012412 <rmw_validate_namespace_with_size+0x1a>
 801240c:	7803      	ldrb	r3, [r0, #0]
 801240e:	2b2f      	cmp	r3, #47	; 0x2f
 8012410:	d012      	beq.n	8012438 <rmw_validate_namespace_with_size+0x40>
 8012412:	aa01      	add	r2, sp, #4
 8012414:	4669      	mov	r1, sp
 8012416:	f7ff ff73 	bl	8012300 <rmw_validate_full_topic_name>
 801241a:	b980      	cbnz	r0, 801243e <rmw_validate_namespace_with_size+0x46>
 801241c:	9a00      	ldr	r2, [sp, #0]
 801241e:	b14a      	cbz	r2, 8012434 <rmw_validate_namespace_with_size+0x3c>
 8012420:	2a07      	cmp	r2, #7
 8012422:	d007      	beq.n	8012434 <rmw_validate_namespace_with_size+0x3c>
 8012424:	1e53      	subs	r3, r2, #1
 8012426:	2b05      	cmp	r3, #5
 8012428:	d82e      	bhi.n	8012488 <rmw_validate_namespace_with_size+0x90>
 801242a:	e8df f003 	tbb	[pc, r3]
 801242e:	1f1c      	.short	0x1f1c
 8012430:	14282522 	.word	0x14282522
 8012434:	2df5      	cmp	r5, #245	; 0xf5
 8012436:	d804      	bhi.n	8012442 <rmw_validate_namespace_with_size+0x4a>
 8012438:	2300      	movs	r3, #0
 801243a:	4618      	mov	r0, r3
 801243c:	6023      	str	r3, [r4, #0]
 801243e:	b042      	add	sp, #264	; 0x108
 8012440:	bd70      	pop	{r4, r5, r6, pc}
 8012442:	2307      	movs	r3, #7
 8012444:	6023      	str	r3, [r4, #0]
 8012446:	2e00      	cmp	r6, #0
 8012448:	d0f9      	beq.n	801243e <rmw_validate_namespace_with_size+0x46>
 801244a:	23f4      	movs	r3, #244	; 0xf4
 801244c:	6033      	str	r3, [r6, #0]
 801244e:	e7f6      	b.n	801243e <rmw_validate_namespace_with_size+0x46>
 8012450:	200b      	movs	r0, #11
 8012452:	b042      	add	sp, #264	; 0x108
 8012454:	bd70      	pop	{r4, r5, r6, pc}
 8012456:	2306      	movs	r3, #6
 8012458:	6023      	str	r3, [r4, #0]
 801245a:	2e00      	cmp	r6, #0
 801245c:	d0ef      	beq.n	801243e <rmw_validate_namespace_with_size+0x46>
 801245e:	9b01      	ldr	r3, [sp, #4]
 8012460:	6033      	str	r3, [r6, #0]
 8012462:	b042      	add	sp, #264	; 0x108
 8012464:	bd70      	pop	{r4, r5, r6, pc}
 8012466:	2301      	movs	r3, #1
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	e7f6      	b.n	801245a <rmw_validate_namespace_with_size+0x62>
 801246c:	2302      	movs	r3, #2
 801246e:	6023      	str	r3, [r4, #0]
 8012470:	e7f3      	b.n	801245a <rmw_validate_namespace_with_size+0x62>
 8012472:	2303      	movs	r3, #3
 8012474:	6023      	str	r3, [r4, #0]
 8012476:	e7f0      	b.n	801245a <rmw_validate_namespace_with_size+0x62>
 8012478:	2304      	movs	r3, #4
 801247a:	6023      	str	r3, [r4, #0]
 801247c:	e7ed      	b.n	801245a <rmw_validate_namespace_with_size+0x62>
 801247e:	2305      	movs	r3, #5
 8012480:	6023      	str	r3, [r4, #0]
 8012482:	e7ea      	b.n	801245a <rmw_validate_namespace_with_size+0x62>
 8012484:	200b      	movs	r0, #11
 8012486:	4770      	bx	lr
 8012488:	4613      	mov	r3, r2
 801248a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801248e:	4a03      	ldr	r2, [pc, #12]	; (801249c <rmw_validate_namespace_with_size+0xa4>)
 8012490:	a802      	add	r0, sp, #8
 8012492:	f7ff fd07 	bl	8011ea4 <rcutils_snprintf>
 8012496:	2001      	movs	r0, #1
 8012498:	e7d1      	b.n	801243e <rmw_validate_namespace_with_size+0x46>
 801249a:	bf00      	nop
 801249c:	08016f74 	.word	0x08016f74

080124a0 <rmw_validate_namespace>:
 80124a0:	b168      	cbz	r0, 80124be <rmw_validate_namespace+0x1e>
 80124a2:	b570      	push	{r4, r5, r6, lr}
 80124a4:	460d      	mov	r5, r1
 80124a6:	4616      	mov	r6, r2
 80124a8:	4604      	mov	r4, r0
 80124aa:	f7ed ff2b 	bl	8000304 <strlen>
 80124ae:	4633      	mov	r3, r6
 80124b0:	4601      	mov	r1, r0
 80124b2:	462a      	mov	r2, r5
 80124b4:	4620      	mov	r0, r4
 80124b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124ba:	f7ff bf9d 	b.w	80123f8 <rmw_validate_namespace_with_size>
 80124be:	200b      	movs	r0, #11
 80124c0:	4770      	bx	lr
 80124c2:	bf00      	nop

080124c4 <rmw_namespace_validation_result_string>:
 80124c4:	2807      	cmp	r0, #7
 80124c6:	d803      	bhi.n	80124d0 <rmw_namespace_validation_result_string+0xc>
 80124c8:	4b02      	ldr	r3, [pc, #8]	; (80124d4 <rmw_namespace_validation_result_string+0x10>)
 80124ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80124ce:	4770      	bx	lr
 80124d0:	4801      	ldr	r0, [pc, #4]	; (80124d8 <rmw_namespace_validation_result_string+0x14>)
 80124d2:	4770      	bx	lr
 80124d4:	0801716c 	.word	0x0801716c
 80124d8:	08016fc4 	.word	0x08016fc4

080124dc <rmw_validate_node_name>:
 80124dc:	2800      	cmp	r0, #0
 80124de:	d042      	beq.n	8012566 <rmw_validate_node_name+0x8a>
 80124e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e4:	460d      	mov	r5, r1
 80124e6:	2900      	cmp	r1, #0
 80124e8:	d03f      	beq.n	801256a <rmw_validate_node_name+0x8e>
 80124ea:	4604      	mov	r4, r0
 80124ec:	4616      	mov	r6, r2
 80124ee:	f7ed ff09 	bl	8000304 <strlen>
 80124f2:	b310      	cbz	r0, 801253a <rmw_validate_node_name+0x5e>
 80124f4:	1e63      	subs	r3, r4, #1
 80124f6:	f1c4 0101 	rsb	r1, r4, #1
 80124fa:	eb03 0800 	add.w	r8, r3, r0
 80124fe:	18cf      	adds	r7, r1, r3
 8012500:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012504:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8012508:	f02e 0c20 	bic.w	ip, lr, #32
 801250c:	2a09      	cmp	r2, #9
 801250e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8012512:	d905      	bls.n	8012520 <rmw_validate_node_name+0x44>
 8012514:	f1bc 0f19 	cmp.w	ip, #25
 8012518:	d902      	bls.n	8012520 <rmw_validate_node_name+0x44>
 801251a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801251e:	d114      	bne.n	801254a <rmw_validate_node_name+0x6e>
 8012520:	4598      	cmp	r8, r3
 8012522:	d1ec      	bne.n	80124fe <rmw_validate_node_name+0x22>
 8012524:	7822      	ldrb	r2, [r4, #0]
 8012526:	4b16      	ldr	r3, [pc, #88]	; (8012580 <rmw_validate_node_name+0xa4>)
 8012528:	5cd3      	ldrb	r3, [r2, r3]
 801252a:	f013 0304 	ands.w	r3, r3, #4
 801252e:	d113      	bne.n	8012558 <rmw_validate_node_name+0x7c>
 8012530:	28ff      	cmp	r0, #255	; 0xff
 8012532:	d81c      	bhi.n	801256e <rmw_validate_node_name+0x92>
 8012534:	4618      	mov	r0, r3
 8012536:	602b      	str	r3, [r5, #0]
 8012538:	e00c      	b.n	8012554 <rmw_validate_node_name+0x78>
 801253a:	2301      	movs	r3, #1
 801253c:	602b      	str	r3, [r5, #0]
 801253e:	b17e      	cbz	r6, 8012560 <rmw_validate_node_name+0x84>
 8012540:	2300      	movs	r3, #0
 8012542:	4618      	mov	r0, r3
 8012544:	6033      	str	r3, [r6, #0]
 8012546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801254a:	2302      	movs	r3, #2
 801254c:	602b      	str	r3, [r5, #0]
 801254e:	b13e      	cbz	r6, 8012560 <rmw_validate_node_name+0x84>
 8012550:	2000      	movs	r0, #0
 8012552:	6037      	str	r7, [r6, #0]
 8012554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012558:	2303      	movs	r3, #3
 801255a:	602b      	str	r3, [r5, #0]
 801255c:	2e00      	cmp	r6, #0
 801255e:	d1ef      	bne.n	8012540 <rmw_validate_node_name+0x64>
 8012560:	2000      	movs	r0, #0
 8012562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012566:	200b      	movs	r0, #11
 8012568:	4770      	bx	lr
 801256a:	200b      	movs	r0, #11
 801256c:	e7f2      	b.n	8012554 <rmw_validate_node_name+0x78>
 801256e:	2204      	movs	r2, #4
 8012570:	602a      	str	r2, [r5, #0]
 8012572:	2e00      	cmp	r6, #0
 8012574:	d0f4      	beq.n	8012560 <rmw_validate_node_name+0x84>
 8012576:	22fe      	movs	r2, #254	; 0xfe
 8012578:	4618      	mov	r0, r3
 801257a:	6032      	str	r2, [r6, #0]
 801257c:	e7ea      	b.n	8012554 <rmw_validate_node_name+0x78>
 801257e:	bf00      	nop
 8012580:	0801756c 	.word	0x0801756c

08012584 <rmw_node_name_validation_result_string>:
 8012584:	2804      	cmp	r0, #4
 8012586:	d803      	bhi.n	8012590 <rmw_node_name_validation_result_string+0xc>
 8012588:	4b02      	ldr	r3, [pc, #8]	; (8012594 <rmw_node_name_validation_result_string+0x10>)
 801258a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801258e:	4770      	bx	lr
 8012590:	4801      	ldr	r0, [pc, #4]	; (8012598 <rmw_node_name_validation_result_string+0x14>)
 8012592:	4770      	bx	lr
 8012594:	08017278 	.word	0x08017278
 8012598:	0801718c 	.word	0x0801718c

0801259c <get_memory>:
 801259c:	4603      	mov	r3, r0
 801259e:	6840      	ldr	r0, [r0, #4]
 80125a0:	b158      	cbz	r0, 80125ba <get_memory+0x1e>
 80125a2:	6842      	ldr	r2, [r0, #4]
 80125a4:	605a      	str	r2, [r3, #4]
 80125a6:	b10a      	cbz	r2, 80125ac <get_memory+0x10>
 80125a8:	2100      	movs	r1, #0
 80125aa:	6011      	str	r1, [r2, #0]
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	6042      	str	r2, [r0, #4]
 80125b0:	b102      	cbz	r2, 80125b4 <get_memory+0x18>
 80125b2:	6010      	str	r0, [r2, #0]
 80125b4:	2200      	movs	r2, #0
 80125b6:	6002      	str	r2, [r0, #0]
 80125b8:	6018      	str	r0, [r3, #0]
 80125ba:	4770      	bx	lr

080125bc <put_memory>:
 80125bc:	680b      	ldr	r3, [r1, #0]
 80125be:	b10b      	cbz	r3, 80125c4 <put_memory+0x8>
 80125c0:	684a      	ldr	r2, [r1, #4]
 80125c2:	605a      	str	r2, [r3, #4]
 80125c4:	684a      	ldr	r2, [r1, #4]
 80125c6:	b102      	cbz	r2, 80125ca <put_memory+0xe>
 80125c8:	6013      	str	r3, [r2, #0]
 80125ca:	6803      	ldr	r3, [r0, #0]
 80125cc:	428b      	cmp	r3, r1
 80125ce:	6843      	ldr	r3, [r0, #4]
 80125d0:	bf08      	it	eq
 80125d2:	6002      	streq	r2, [r0, #0]
 80125d4:	604b      	str	r3, [r1, #4]
 80125d6:	b103      	cbz	r3, 80125da <put_memory+0x1e>
 80125d8:	6019      	str	r1, [r3, #0]
 80125da:	2300      	movs	r3, #0
 80125dc:	600b      	str	r3, [r1, #0]
 80125de:	6041      	str	r1, [r0, #4]
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop

080125e4 <rmw_get_implementation_identifier>:
 80125e4:	4b01      	ldr	r3, [pc, #4]	; (80125ec <rmw_get_implementation_identifier+0x8>)
 80125e6:	6818      	ldr	r0, [r3, #0]
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop
 80125ec:	080172a4 	.word	0x080172a4

080125f0 <rmw_init_options_init>:
 80125f0:	b084      	sub	sp, #16
 80125f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125f4:	b083      	sub	sp, #12
 80125f6:	ad09      	add	r5, sp, #36	; 0x24
 80125f8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80125fc:	b130      	cbz	r0, 801260c <rmw_init_options_init+0x1c>
 80125fe:	4604      	mov	r4, r0
 8012600:	4628      	mov	r0, r5
 8012602:	f7fa f9ad 	bl	800c960 <rcutils_allocator_is_valid>
 8012606:	b108      	cbz	r0, 801260c <rmw_init_options_init+0x1c>
 8012608:	68a6      	ldr	r6, [r4, #8]
 801260a:	b12e      	cbz	r6, 8012618 <rmw_init_options_init+0x28>
 801260c:	200b      	movs	r0, #11
 801260e:	b003      	add	sp, #12
 8012610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012614:	b004      	add	sp, #16
 8012616:	4770      	bx	lr
 8012618:	2200      	movs	r2, #0
 801261a:	2300      	movs	r3, #0
 801261c:	f104 0c20 	add.w	ip, r4, #32
 8012620:	f8df e098 	ldr.w	lr, [pc, #152]	; 80126bc <rmw_init_options_init+0xcc>
 8012624:	466f      	mov	r7, sp
 8012626:	e9c4 2300 	strd	r2, r3, [r4]
 801262a:	4b20      	ldr	r3, [pc, #128]	; (80126ac <rmw_init_options_init+0xbc>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	60a3      	str	r3, [r4, #8]
 8012630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012632:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012636:	682b      	ldr	r3, [r5, #0]
 8012638:	4638      	mov	r0, r7
 801263a:	f8cc 3000 	str.w	r3, [ip]
 801263e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8012642:	60e6      	str	r6, [r4, #12]
 8012644:	f7ff fe58 	bl	80122f8 <rmw_get_default_security_options>
 8012648:	f104 0310 	add.w	r3, r4, #16
 801264c:	2203      	movs	r2, #3
 801264e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012652:	e883 0003 	stmia.w	r3, {r0, r1}
 8012656:	4816      	ldr	r0, [pc, #88]	; (80126b0 <rmw_init_options_init+0xc0>)
 8012658:	4916      	ldr	r1, [pc, #88]	; (80126b4 <rmw_init_options_init+0xc4>)
 801265a:	7626      	strb	r6, [r4, #24]
 801265c:	f7fa fc8a 	bl	800cf74 <rmw_uxrce_init_init_options_impl_memory>
 8012660:	4813      	ldr	r0, [pc, #76]	; (80126b0 <rmw_init_options_init+0xc0>)
 8012662:	f7ff ff9b 	bl	801259c <get_memory>
 8012666:	b1f0      	cbz	r0, 80126a6 <rmw_init_options_init+0xb6>
 8012668:	4a13      	ldr	r2, [pc, #76]	; (80126b8 <rmw_init_options_init+0xc8>)
 801266a:	6883      	ldr	r3, [r0, #8]
 801266c:	6851      	ldr	r1, [r2, #4]
 801266e:	6363      	str	r3, [r4, #52]	; 0x34
 8012670:	7810      	ldrb	r0, [r2, #0]
 8012672:	6159      	str	r1, [r3, #20]
 8012674:	68d1      	ldr	r1, [r2, #12]
 8012676:	7418      	strb	r0, [r3, #16]
 8012678:	61d9      	str	r1, [r3, #28]
 801267a:	6911      	ldr	r1, [r2, #16]
 801267c:	6219      	str	r1, [r3, #32]
 801267e:	6951      	ldr	r1, [r2, #20]
 8012680:	6892      	ldr	r2, [r2, #8]
 8012682:	6259      	str	r1, [r3, #36]	; 0x24
 8012684:	619a      	str	r2, [r3, #24]
 8012686:	f7fd fa73 	bl	800fb70 <uxr_nanos>
 801268a:	f002 ff59 	bl	8015540 <srand>
 801268e:	f002 ff85 	bl	801559c <rand>
 8012692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012694:	6298      	str	r0, [r3, #40]	; 0x28
 8012696:	2800      	cmp	r0, #0
 8012698:	d0f9      	beq.n	801268e <rmw_init_options_init+0x9e>
 801269a:	2000      	movs	r0, #0
 801269c:	b003      	add	sp, #12
 801269e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80126a2:	b004      	add	sp, #16
 80126a4:	4770      	bx	lr
 80126a6:	2001      	movs	r0, #1
 80126a8:	e7b1      	b.n	801260e <rmw_init_options_init+0x1e>
 80126aa:	bf00      	nop
 80126ac:	080172a4 	.word	0x080172a4
 80126b0:	24010a14 	.word	0x24010a14
 80126b4:	2400c2b0 	.word	0x2400c2b0
 80126b8:	2400c13c 	.word	0x2400c13c
 80126bc:	08016e44 	.word	0x08016e44

080126c0 <rmw_init_options_copy>:
 80126c0:	2800      	cmp	r0, #0
 80126c2:	d047      	beq.n	8012754 <rmw_init_options_copy+0x94>
 80126c4:	b570      	push	{r4, r5, r6, lr}
 80126c6:	460d      	mov	r5, r1
 80126c8:	b149      	cbz	r1, 80126de <rmw_init_options_copy+0x1e>
 80126ca:	4604      	mov	r4, r0
 80126cc:	6880      	ldr	r0, [r0, #8]
 80126ce:	b120      	cbz	r0, 80126da <rmw_init_options_copy+0x1a>
 80126d0:	4b22      	ldr	r3, [pc, #136]	; (801275c <rmw_init_options_copy+0x9c>)
 80126d2:	6819      	ldr	r1, [r3, #0]
 80126d4:	f7ed fe0c 	bl	80002f0 <strcmp>
 80126d8:	bba8      	cbnz	r0, 8012746 <rmw_init_options_copy+0x86>
 80126da:	68ab      	ldr	r3, [r5, #8]
 80126dc:	b11b      	cbz	r3, 80126e6 <rmw_init_options_copy+0x26>
 80126de:	f04f 0c0b 	mov.w	ip, #11
 80126e2:	4660      	mov	r0, ip
 80126e4:	bd70      	pop	{r4, r5, r6, pc}
 80126e6:	4623      	mov	r3, r4
 80126e8:	462a      	mov	r2, r5
 80126ea:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80126ee:	f8d3 e000 	ldr.w	lr, [r3]
 80126f2:	3310      	adds	r3, #16
 80126f4:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80126f8:	3210      	adds	r2, #16
 80126fa:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80126fe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8012702:	42b3      	cmp	r3, r6
 8012704:	f842 ec10 	str.w	lr, [r2, #-16]
 8012708:	f842 cc0c 	str.w	ip, [r2, #-12]
 801270c:	f842 0c08 	str.w	r0, [r2, #-8]
 8012710:	f842 1c04 	str.w	r1, [r2, #-4]
 8012714:	d1eb      	bne.n	80126ee <rmw_init_options_copy+0x2e>
 8012716:	6819      	ldr	r1, [r3, #0]
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	4811      	ldr	r0, [pc, #68]	; (8012760 <rmw_init_options_copy+0xa0>)
 801271c:	6011      	str	r1, [r2, #0]
 801271e:	6053      	str	r3, [r2, #4]
 8012720:	f7ff ff3c 	bl	801259c <get_memory>
 8012724:	b198      	cbz	r0, 801274e <rmw_init_options_copy+0x8e>
 8012726:	6883      	ldr	r3, [r0, #8]
 8012728:	f04f 0c00 	mov.w	ip, #0
 801272c:	636b      	str	r3, [r5, #52]	; 0x34
 801272e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8012730:	f103 0410 	add.w	r4, r3, #16
 8012734:	3510      	adds	r5, #16
 8012736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801273a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801273e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012742:	4660      	mov	r0, ip
 8012744:	bd70      	pop	{r4, r5, r6, pc}
 8012746:	f04f 0c0c 	mov.w	ip, #12
 801274a:	4660      	mov	r0, ip
 801274c:	bd70      	pop	{r4, r5, r6, pc}
 801274e:	f04f 0c01 	mov.w	ip, #1
 8012752:	e7c6      	b.n	80126e2 <rmw_init_options_copy+0x22>
 8012754:	f04f 0c0b 	mov.w	ip, #11
 8012758:	4660      	mov	r0, ip
 801275a:	4770      	bx	lr
 801275c:	080172a4 	.word	0x080172a4
 8012760:	24010a14 	.word	0x24010a14

08012764 <rmw_init_options_fini>:
 8012764:	b510      	push	{r4, lr}
 8012766:	b08e      	sub	sp, #56	; 0x38
 8012768:	b388      	cbz	r0, 80127ce <rmw_init_options_fini+0x6a>
 801276a:	4604      	mov	r4, r0
 801276c:	3020      	adds	r0, #32
 801276e:	f7fa f8f7 	bl	800c960 <rcutils_allocator_is_valid>
 8012772:	b360      	cbz	r0, 80127ce <rmw_init_options_fini+0x6a>
 8012774:	68a0      	ldr	r0, [r4, #8]
 8012776:	b120      	cbz	r0, 8012782 <rmw_init_options_fini+0x1e>
 8012778:	4b1a      	ldr	r3, [pc, #104]	; (80127e4 <rmw_init_options_fini+0x80>)
 801277a:	6819      	ldr	r1, [r3, #0]
 801277c:	f7ed fdb8 	bl	80002f0 <strcmp>
 8012780:	bb68      	cbnz	r0, 80127de <rmw_init_options_fini+0x7a>
 8012782:	4b19      	ldr	r3, [pc, #100]	; (80127e8 <rmw_init_options_fini+0x84>)
 8012784:	6819      	ldr	r1, [r3, #0]
 8012786:	b331      	cbz	r1, 80127d6 <rmw_init_options_fini+0x72>
 8012788:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801278a:	e001      	b.n	8012790 <rmw_init_options_fini+0x2c>
 801278c:	6849      	ldr	r1, [r1, #4]
 801278e:	b311      	cbz	r1, 80127d6 <rmw_init_options_fini+0x72>
 8012790:	688b      	ldr	r3, [r1, #8]
 8012792:	429a      	cmp	r2, r3
 8012794:	d1fa      	bne.n	801278c <rmw_init_options_fini+0x28>
 8012796:	4814      	ldr	r0, [pc, #80]	; (80127e8 <rmw_init_options_fini+0x84>)
 8012798:	f7ff ff10 	bl	80125bc <put_memory>
 801279c:	4668      	mov	r0, sp
 801279e:	f7ff fd9b 	bl	80122d8 <rmw_get_zero_initialized_init_options>
 80127a2:	46ee      	mov	lr, sp
 80127a4:	46a4      	mov	ip, r4
 80127a6:	2400      	movs	r4, #0
 80127a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80127c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80127c8:	4620      	mov	r0, r4
 80127ca:	b00e      	add	sp, #56	; 0x38
 80127cc:	bd10      	pop	{r4, pc}
 80127ce:	240b      	movs	r4, #11
 80127d0:	4620      	mov	r0, r4
 80127d2:	b00e      	add	sp, #56	; 0x38
 80127d4:	bd10      	pop	{r4, pc}
 80127d6:	2401      	movs	r4, #1
 80127d8:	4620      	mov	r0, r4
 80127da:	b00e      	add	sp, #56	; 0x38
 80127dc:	bd10      	pop	{r4, pc}
 80127de:	240c      	movs	r4, #12
 80127e0:	e7f2      	b.n	80127c8 <rmw_init_options_fini+0x64>
 80127e2:	bf00      	nop
 80127e4:	080172a4 	.word	0x080172a4
 80127e8:	24010a14 	.word	0x24010a14

080127ec <rmw_init>:
 80127ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127f0:	b083      	sub	sp, #12
 80127f2:	2800      	cmp	r0, #0
 80127f4:	f000 80d3 	beq.w	801299e <rmw_init+0x1b2>
 80127f8:	460e      	mov	r6, r1
 80127fa:	2900      	cmp	r1, #0
 80127fc:	f000 80cf 	beq.w	801299e <rmw_init+0x1b2>
 8012800:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012802:	4605      	mov	r5, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	f000 80ca 	beq.w	801299e <rmw_init+0x1b2>
 801280a:	4b78      	ldr	r3, [pc, #480]	; (80129ec <rmw_init+0x200>)
 801280c:	6880      	ldr	r0, [r0, #8]
 801280e:	681f      	ldr	r7, [r3, #0]
 8012810:	b128      	cbz	r0, 801281e <rmw_init+0x32>
 8012812:	4639      	mov	r1, r7
 8012814:	f7ed fd6c 	bl	80002f0 <strcmp>
 8012818:	2800      	cmp	r0, #0
 801281a:	f040 80ca 	bne.w	80129b2 <rmw_init+0x1c6>
 801281e:	4c74      	ldr	r4, [pc, #464]	; (80129f0 <rmw_init+0x204>)
 8012820:	f04f 0800 	mov.w	r8, #0
 8012824:	4973      	ldr	r1, [pc, #460]	; (80129f4 <rmw_init+0x208>)
 8012826:	4874      	ldr	r0, [pc, #464]	; (80129f8 <rmw_init+0x20c>)
 8012828:	e9d5 2300 	ldrd	r2, r3, [r5]
 801282c:	60b7      	str	r7, [r6, #8]
 801282e:	e9c6 2300 	strd	r2, r3, [r6]
 8012832:	68eb      	ldr	r3, [r5, #12]
 8012834:	2201      	movs	r2, #1
 8012836:	64b3      	str	r3, [r6, #72]	; 0x48
 8012838:	f7fa fb3c 	bl	800ceb4 <rmw_uxrce_init_session_memory>
 801283c:	4620      	mov	r0, r4
 801283e:	2204      	movs	r2, #4
 8012840:	496e      	ldr	r1, [pc, #440]	; (80129fc <rmw_init+0x210>)
 8012842:	f7fa fb77 	bl	800cf34 <rmw_uxrce_init_static_input_buffer_memory>
 8012846:	486c      	ldr	r0, [pc, #432]	; (80129f8 <rmw_init+0x20c>)
 8012848:	f884 800d 	strb.w	r8, [r4, #13]
 801284c:	f7ff fea6 	bl	801259c <get_memory>
 8012850:	2800      	cmp	r0, #0
 8012852:	f000 80a9 	beq.w	80129a8 <rmw_init+0x1bc>
 8012856:	6884      	ldr	r4, [r0, #8]
 8012858:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801285a:	f104 0910 	add.w	r9, r4, #16
 801285e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012860:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012864:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012868:	9101      	str	r1, [sp, #4]
 801286a:	4661      	mov	r1, ip
 801286c:	6a00      	ldr	r0, [r0, #32]
 801286e:	9000      	str	r0, [sp, #0]
 8012870:	4648      	mov	r0, r9
 8012872:	f000 fdc9 	bl	8013408 <uxr_set_custom_transport_callbacks>
 8012876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801287a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801287e:	4960      	ldr	r1, [pc, #384]	; (8012a00 <rmw_init+0x214>)
 8012880:	4860      	ldr	r0, [pc, #384]	; (8012a04 <rmw_init+0x218>)
 8012882:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8012886:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801288a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801288e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8012892:	2201      	movs	r2, #1
 8012894:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8012898:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801289c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80128a0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80128a4:	64f4      	str	r4, [r6, #76]	; 0x4c
 80128a6:	f7fa fae5 	bl	800ce74 <rmw_uxrce_init_node_memory>
 80128aa:	2205      	movs	r2, #5
 80128ac:	4956      	ldr	r1, [pc, #344]	; (8012a08 <rmw_init+0x21c>)
 80128ae:	4857      	ldr	r0, [pc, #348]	; (8012a0c <rmw_init+0x220>)
 80128b0:	f7fa fac0 	bl	800ce34 <rmw_uxrce_init_subscription_memory>
 80128b4:	220a      	movs	r2, #10
 80128b6:	4956      	ldr	r1, [pc, #344]	; (8012a10 <rmw_init+0x224>)
 80128b8:	4856      	ldr	r0, [pc, #344]	; (8012a14 <rmw_init+0x228>)
 80128ba:	f7fa fa9b 	bl	800cdf4 <rmw_uxrce_init_publisher_memory>
 80128be:	2201      	movs	r2, #1
 80128c0:	4955      	ldr	r1, [pc, #340]	; (8012a18 <rmw_init+0x22c>)
 80128c2:	4856      	ldr	r0, [pc, #344]	; (8012a1c <rmw_init+0x230>)
 80128c4:	f7fa fa56 	bl	800cd74 <rmw_uxrce_init_service_memory>
 80128c8:	2201      	movs	r2, #1
 80128ca:	4955      	ldr	r1, [pc, #340]	; (8012a20 <rmw_init+0x234>)
 80128cc:	4855      	ldr	r0, [pc, #340]	; (8012a24 <rmw_init+0x238>)
 80128ce:	f7fa fa71 	bl	800cdb4 <rmw_uxrce_init_client_memory>
 80128d2:	220f      	movs	r2, #15
 80128d4:	4954      	ldr	r1, [pc, #336]	; (8012a28 <rmw_init+0x23c>)
 80128d6:	4855      	ldr	r0, [pc, #340]	; (8012a2c <rmw_init+0x240>)
 80128d8:	f7fa fb0c 	bl	800cef4 <rmw_uxrce_init_topic_memory>
 80128dc:	2203      	movs	r2, #3
 80128de:	4954      	ldr	r1, [pc, #336]	; (8012a30 <rmw_init+0x244>)
 80128e0:	4854      	ldr	r0, [pc, #336]	; (8012a34 <rmw_init+0x248>)
 80128e2:	f7fa fb47 	bl	800cf74 <rmw_uxrce_init_init_options_impl_memory>
 80128e6:	2204      	movs	r2, #4
 80128e8:	4953      	ldr	r1, [pc, #332]	; (8012a38 <rmw_init+0x24c>)
 80128ea:	4854      	ldr	r0, [pc, #336]	; (8012a3c <rmw_init+0x250>)
 80128ec:	f7fa fb62 	bl	800cfb4 <rmw_uxrce_init_wait_set_memory>
 80128f0:	4953      	ldr	r1, [pc, #332]	; (8012a40 <rmw_init+0x254>)
 80128f2:	4854      	ldr	r0, [pc, #336]	; (8012a44 <rmw_init+0x258>)
 80128f4:	2204      	movs	r2, #4
 80128f6:	f7fa fb7d 	bl	800cff4 <rmw_uxrce_init_guard_condition_memory>
 80128fa:	4642      	mov	r2, r8
 80128fc:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80128fe:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8012900:	f000 fb0a 	bl	8012f18 <rmw_uxrce_transport_init>
 8012904:	4607      	mov	r7, r0
 8012906:	2800      	cmp	r0, #0
 8012908:	d158      	bne.n	80129bc <rmw_init+0x1d0>
 801290a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801290c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8012910:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8012914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012916:	4628      	mov	r0, r5
 8012918:	f7fb ffba 	bl	800e890 <uxr_init_session>
 801291c:	4622      	mov	r2, r4
 801291e:	494a      	ldr	r1, [pc, #296]	; (8012a48 <rmw_init+0x25c>)
 8012920:	4628      	mov	r0, r5
 8012922:	f7fb ffd9 	bl	800e8d8 <uxr_set_topic_callback>
 8012926:	463a      	mov	r2, r7
 8012928:	4948      	ldr	r1, [pc, #288]	; (8012a4c <rmw_init+0x260>)
 801292a:	4628      	mov	r0, r5
 801292c:	f7fb ffd0 	bl	800e8d0 <uxr_set_status_callback>
 8012930:	463a      	mov	r2, r7
 8012932:	4947      	ldr	r1, [pc, #284]	; (8012a50 <rmw_init+0x264>)
 8012934:	4628      	mov	r0, r5
 8012936:	f7fb ffd3 	bl	800e8e0 <uxr_set_request_callback>
 801293a:	463a      	mov	r2, r7
 801293c:	4945      	ldr	r1, [pc, #276]	; (8012a54 <rmw_init+0x268>)
 801293e:	4628      	mov	r0, r5
 8012940:	f7fb ffd2 	bl	800e8e8 <uxr_set_reply_callback>
 8012944:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012948:	2304      	movs	r3, #4
 801294a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801294e:	0092      	lsls	r2, r2, #2
 8012950:	4628      	mov	r0, r5
 8012952:	f7fc f809 	bl	800e968 <uxr_create_input_reliable_stream>
 8012956:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801295a:	2304      	movs	r3, #4
 801295c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8012960:	0092      	lsls	r2, r2, #2
 8012962:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8012966:	4628      	mov	r0, r5
 8012968:	f7fb ffd4 	bl	800e914 <uxr_create_output_reliable_stream>
 801296c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8012970:	4628      	mov	r0, r5
 8012972:	f7fb fff3 	bl	800e95c <uxr_create_input_best_effort_stream>
 8012976:	f241 3194 	movw	r1, #5012	; 0x1394
 801297a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801297e:	4628      	mov	r0, r5
 8012980:	4421      	add	r1, r4
 8012982:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012986:	f7fb ffb3 	bl	800e8f0 <uxr_create_output_best_effort_stream>
 801298a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801298e:	4628      	mov	r0, r5
 8012990:	f7fc fd02 	bl	800f398 <uxr_create_session>
 8012994:	b1f8      	cbz	r0, 80129d6 <rmw_init+0x1ea>
 8012996:	4638      	mov	r0, r7
 8012998:	b003      	add	sp, #12
 801299a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801299e:	270b      	movs	r7, #11
 80129a0:	4638      	mov	r0, r7
 80129a2:	b003      	add	sp, #12
 80129a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129a8:	2701      	movs	r7, #1
 80129aa:	4638      	mov	r0, r7
 80129ac:	b003      	add	sp, #12
 80129ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129b2:	270c      	movs	r7, #12
 80129b4:	4638      	mov	r0, r7
 80129b6:	b003      	add	sp, #12
 80129b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129bc:	4648      	mov	r0, r9
 80129be:	f000 fd61 	bl	8013484 <uxr_close_custom_transport>
 80129c2:	4621      	mov	r1, r4
 80129c4:	480c      	ldr	r0, [pc, #48]	; (80129f8 <rmw_init+0x20c>)
 80129c6:	f7ff fdf9 	bl	80125bc <put_memory>
 80129ca:	4638      	mov	r0, r7
 80129cc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80129d0:	b003      	add	sp, #12
 80129d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129d6:	4648      	mov	r0, r9
 80129d8:	f000 fd54 	bl	8013484 <uxr_close_custom_transport>
 80129dc:	4621      	mov	r1, r4
 80129de:	4806      	ldr	r0, [pc, #24]	; (80129f8 <rmw_init+0x20c>)
 80129e0:	f7ff fdec 	bl	80125bc <put_memory>
 80129e4:	64f7      	str	r7, [r6, #76]	; 0x4c
 80129e6:	2701      	movs	r7, #1
 80129e8:	e7d5      	b.n	8012996 <rmw_init+0x1aa>
 80129ea:	bf00      	nop
 80129ec:	080172a4 	.word	0x080172a4
 80129f0:	24010a64 	.word	0x24010a64
 80129f4:	2400cd10 	.word	0x2400cd10
 80129f8:	24010a54 	.word	0x24010a54
 80129fc:	2400e2b8 	.word	0x2400e2b8
 8012a00:	2400c334 	.word	0x2400c334
 8012a04:	24010a24 	.word	0x24010a24
 8012a08:	240103b8 	.word	0x240103b8
 8012a0c:	24010a74 	.word	0x24010a74
 8012a10:	2400c3d8 	.word	0x2400c3d8
 8012a14:	24010a34 	.word	0x24010a34
 8012a18:	2400cc48 	.word	0x2400cc48
 8012a1c:	24010a44 	.word	0x24010a44
 8012a20:	2400c168 	.word	0x2400c168
 8012a24:	2400c158 	.word	0x2400c158
 8012a28:	240107f0 	.word	0x240107f0
 8012a2c:	24010a84 	.word	0x24010a84
 8012a30:	2400c2b0 	.word	0x2400c2b0
 8012a34:	24010a14 	.word	0x24010a14
 8012a38:	24010994 	.word	0x24010994
 8012a3c:	24010a94 	.word	0x24010a94
 8012a40:	2400c230 	.word	0x2400c230
 8012a44:	24010a04 	.word	0x24010a04
 8012a48:	08015059 	.word	0x08015059
 8012a4c:	08015051 	.word	0x08015051
 8012a50:	080150f1 	.word	0x080150f1
 8012a54:	0801518d 	.word	0x0801518d

08012a58 <rmw_context_fini>:
 8012a58:	4b17      	ldr	r3, [pc, #92]	; (8012ab8 <rmw_context_fini+0x60>)
 8012a5a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8012a5c:	b570      	push	{r4, r5, r6, lr}
 8012a5e:	681c      	ldr	r4, [r3, #0]
 8012a60:	4605      	mov	r5, r0
 8012a62:	b334      	cbz	r4, 8012ab2 <rmw_context_fini+0x5a>
 8012a64:	2600      	movs	r6, #0
 8012a66:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012a6a:	6902      	ldr	r2, [r0, #16]
 8012a6c:	428a      	cmp	r2, r1
 8012a6e:	d018      	beq.n	8012aa2 <rmw_context_fini+0x4a>
 8012a70:	2c00      	cmp	r4, #0
 8012a72:	d1f8      	bne.n	8012a66 <rmw_context_fini+0xe>
 8012a74:	b189      	cbz	r1, 8012a9a <rmw_context_fini+0x42>
 8012a76:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8012a7a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8012a7e:	789b      	ldrb	r3, [r3, #2]
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	bf14      	ite	ne
 8012a84:	210a      	movne	r1, #10
 8012a86:	2100      	moveq	r1, #0
 8012a88:	f7fc fc5e 	bl	800f348 <uxr_delete_session_retries>
 8012a8c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8012a8e:	f7fa fad1 	bl	800d034 <rmw_uxrce_fini_session_memory>
 8012a92:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8012a94:	3010      	adds	r0, #16
 8012a96:	f000 fcf5 	bl	8013484 <uxr_close_custom_transport>
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8012aa0:	bd70      	pop	{r4, r5, r6, pc}
 8012aa2:	3018      	adds	r0, #24
 8012aa4:	f000 f90e 	bl	8012cc4 <rmw_destroy_node>
 8012aa8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8012aaa:	4606      	mov	r6, r0
 8012aac:	2c00      	cmp	r4, #0
 8012aae:	d1da      	bne.n	8012a66 <rmw_context_fini+0xe>
 8012ab0:	e7e0      	b.n	8012a74 <rmw_context_fini+0x1c>
 8012ab2:	4626      	mov	r6, r4
 8012ab4:	e7de      	b.n	8012a74 <rmw_context_fini+0x1c>
 8012ab6:	bf00      	nop
 8012ab8:	24010a24 	.word	0x24010a24

08012abc <create_topic>:
 8012abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ac0:	4605      	mov	r5, r0
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	4822      	ldr	r0, [pc, #136]	; (8012b50 <create_topic+0x94>)
 8012ac6:	460f      	mov	r7, r1
 8012ac8:	4616      	mov	r6, r2
 8012aca:	f7ff fd67 	bl	801259c <get_memory>
 8012ace:	4604      	mov	r4, r0
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d039      	beq.n	8012b48 <create_topic+0x8c>
 8012ad4:	692b      	ldr	r3, [r5, #16]
 8012ad6:	2102      	movs	r1, #2
 8012ad8:	6884      	ldr	r4, [r0, #8]
 8012ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ade:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8012b58 <create_topic+0x9c>
 8012ae2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8012ae6:	1c42      	adds	r2, r0, #1
 8012ae8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8012aec:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8012af0:	f7fb fe10 	bl	800e714 <uxr_object_id>
 8012af4:	223c      	movs	r2, #60	; 0x3c
 8012af6:	6120      	str	r0, [r4, #16]
 8012af8:	4641      	mov	r1, r8
 8012afa:	4638      	mov	r0, r7
 8012afc:	f7fa fbd8 	bl	800d2b0 <generate_topic_name>
 8012b00:	b1f0      	cbz	r0, 8012b40 <create_topic+0x84>
 8012b02:	4f14      	ldr	r7, [pc, #80]	; (8012b54 <create_topic+0x98>)
 8012b04:	4630      	mov	r0, r6
 8012b06:	2264      	movs	r2, #100	; 0x64
 8012b08:	4639      	mov	r1, r7
 8012b0a:	f7fa fba3 	bl	800d254 <generate_type_name>
 8012b0e:	b1b8      	cbz	r0, 8012b40 <create_topic+0x84>
 8012b10:	6928      	ldr	r0, [r5, #16]
 8012b12:	2106      	movs	r1, #6
 8012b14:	696b      	ldr	r3, [r5, #20]
 8012b16:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012b1a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012b1e:	f8cd 8000 	str.w	r8, [sp]
 8012b22:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8012b26:	6811      	ldr	r1, [r2, #0]
 8012b28:	6922      	ldr	r2, [r4, #16]
 8012b2a:	f7fb fd17 	bl	800e55c <uxr_buffer_create_topic_bin>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	6928      	ldr	r0, [r5, #16]
 8012b32:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012b36:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012b3a:	f7fa fb57 	bl	800d1ec <run_xrce_session>
 8012b3e:	b918      	cbnz	r0, 8012b48 <create_topic+0x8c>
 8012b40:	4620      	mov	r0, r4
 8012b42:	2400      	movs	r4, #0
 8012b44:	f7fa faec 	bl	800d120 <rmw_uxrce_fini_topic_memory>
 8012b48:	4620      	mov	r0, r4
 8012b4a:	b004      	add	sp, #16
 8012b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b50:	24010a84 	.word	0x24010a84
 8012b54:	24010b00 	.word	0x24010b00
 8012b58:	24010ac4 	.word	0x24010ac4

08012b5c <destroy_topic>:
 8012b5c:	b538      	push	{r3, r4, r5, lr}
 8012b5e:	6985      	ldr	r5, [r0, #24]
 8012b60:	b1dd      	cbz	r5, 8012b9a <destroy_topic+0x3e>
 8012b62:	4604      	mov	r4, r0
 8012b64:	6928      	ldr	r0, [r5, #16]
 8012b66:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012b6a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012b6e:	6922      	ldr	r2, [r4, #16]
 8012b70:	6819      	ldr	r1, [r3, #0]
 8012b72:	f7fb fc75 	bl	800e460 <uxr_buffer_delete_entity>
 8012b76:	4602      	mov	r2, r0
 8012b78:	6928      	ldr	r0, [r5, #16]
 8012b7a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012b7e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012b82:	f7fa fb33 	bl	800d1ec <run_xrce_session>
 8012b86:	4603      	mov	r3, r0
 8012b88:	4620      	mov	r0, r4
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	bf14      	ite	ne
 8012b8e:	2400      	movne	r4, #0
 8012b90:	2402      	moveq	r4, #2
 8012b92:	f7fa fac5 	bl	800d120 <rmw_uxrce_fini_topic_memory>
 8012b96:	4620      	mov	r0, r4
 8012b98:	bd38      	pop	{r3, r4, r5, pc}
 8012b9a:	2401      	movs	r4, #1
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	bd38      	pop	{r3, r4, r5, pc}

08012ba0 <create_node>:
 8012ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ba4:	b083      	sub	sp, #12
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d064      	beq.n	8012c74 <create_node+0xd4>
 8012baa:	4606      	mov	r6, r0
 8012bac:	4838      	ldr	r0, [pc, #224]	; (8012c90 <create_node+0xf0>)
 8012bae:	460f      	mov	r7, r1
 8012bb0:	4690      	mov	r8, r2
 8012bb2:	461d      	mov	r5, r3
 8012bb4:	f7ff fcf2 	bl	801259c <get_memory>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d05b      	beq.n	8012c74 <create_node+0xd4>
 8012bbc:	6884      	ldr	r4, [r0, #8]
 8012bbe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8012bc0:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8012bc4:	f104 0518 	add.w	r5, r4, #24
 8012bc8:	6123      	str	r3, [r4, #16]
 8012bca:	f7ff fd0b 	bl	80125e4 <rmw_get_implementation_identifier>
 8012bce:	f8c4 9020 	str.w	r9, [r4, #32]
 8012bd2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	f7ed fb94 	bl	8000304 <strlen>
 8012bdc:	1c42      	adds	r2, r0, #1
 8012bde:	2a3c      	cmp	r2, #60	; 0x3c
 8012be0:	d840      	bhi.n	8012c64 <create_node+0xc4>
 8012be2:	4648      	mov	r0, r9
 8012be4:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8012be8:	4631      	mov	r1, r6
 8012bea:	f003 f86c 	bl	8015cc6 <memcpy>
 8012bee:	4638      	mov	r0, r7
 8012bf0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8012bf4:	f7ed fb86 	bl	8000304 <strlen>
 8012bf8:	1c42      	adds	r2, r0, #1
 8012bfa:	2a3c      	cmp	r2, #60	; 0x3c
 8012bfc:	d832      	bhi.n	8012c64 <create_node+0xc4>
 8012bfe:	4639      	mov	r1, r7
 8012c00:	4648      	mov	r0, r9
 8012c02:	f003 f860 	bl	8015cc6 <memcpy>
 8012c06:	6923      	ldr	r3, [r4, #16]
 8012c08:	2101      	movs	r1, #1
 8012c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c0e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8012c12:	1842      	adds	r2, r0, r1
 8012c14:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8012c18:	f7fb fd7c 	bl	800e714 <uxr_object_id>
 8012c1c:	6160      	str	r0, [r4, #20]
 8012c1e:	783b      	ldrb	r3, [r7, #0]
 8012c20:	2b2f      	cmp	r3, #47	; 0x2f
 8012c22:	d12c      	bne.n	8012c7e <create_node+0xde>
 8012c24:	787b      	ldrb	r3, [r7, #1]
 8012c26:	bb53      	cbnz	r3, 8012c7e <create_node+0xde>
 8012c28:	4633      	mov	r3, r6
 8012c2a:	4a1a      	ldr	r2, [pc, #104]	; (8012c94 <create_node+0xf4>)
 8012c2c:	213c      	movs	r1, #60	; 0x3c
 8012c2e:	481a      	ldr	r0, [pc, #104]	; (8012c98 <create_node+0xf8>)
 8012c30:	f002 fe7a 	bl	8015928 <sniprintf>
 8012c34:	6920      	ldr	r0, [r4, #16]
 8012c36:	2106      	movs	r1, #6
 8012c38:	fa1f f388 	uxth.w	r3, r8
 8012c3c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012c40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012c44:	9101      	str	r1, [sp, #4]
 8012c46:	4914      	ldr	r1, [pc, #80]	; (8012c98 <create_node+0xf8>)
 8012c48:	9100      	str	r1, [sp, #0]
 8012c4a:	6811      	ldr	r1, [r2, #0]
 8012c4c:	6962      	ldr	r2, [r4, #20]
 8012c4e:	f7fb fc53 	bl	800e4f8 <uxr_buffer_create_participant_bin>
 8012c52:	4602      	mov	r2, r0
 8012c54:	6920      	ldr	r0, [r4, #16]
 8012c56:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012c5a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012c5e:	f7fa fac5 	bl	800d1ec <run_xrce_session>
 8012c62:	b918      	cbnz	r0, 8012c6c <create_node+0xcc>
 8012c64:	4628      	mov	r0, r5
 8012c66:	2500      	movs	r5, #0
 8012c68:	f7fa f9ea 	bl	800d040 <rmw_uxrce_fini_node_memory>
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	b003      	add	sp, #12
 8012c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c74:	2500      	movs	r5, #0
 8012c76:	4628      	mov	r0, r5
 8012c78:	b003      	add	sp, #12
 8012c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c7e:	463b      	mov	r3, r7
 8012c80:	4a06      	ldr	r2, [pc, #24]	; (8012c9c <create_node+0xfc>)
 8012c82:	213c      	movs	r1, #60	; 0x3c
 8012c84:	9600      	str	r6, [sp, #0]
 8012c86:	4804      	ldr	r0, [pc, #16]	; (8012c98 <create_node+0xf8>)
 8012c88:	f002 fe4e 	bl	8015928 <sniprintf>
 8012c8c:	e7d2      	b.n	8012c34 <create_node+0x94>
 8012c8e:	bf00      	nop
 8012c90:	24010a24 	.word	0x24010a24
 8012c94:	08016cbc 	.word	0x08016cbc
 8012c98:	24010b64 	.word	0x24010b64
 8012c9c:	08016e4c 	.word	0x08016e4c

08012ca0 <rmw_create_node>:
 8012ca0:	468c      	mov	ip, r1
 8012ca2:	4611      	mov	r1, r2
 8012ca4:	f1bc 0f00 	cmp.w	ip, #0
 8012ca8:	d00a      	beq.n	8012cc0 <rmw_create_node+0x20>
 8012caa:	f89c 3000 	ldrb.w	r3, [ip]
 8012cae:	b13b      	cbz	r3, 8012cc0 <rmw_create_node+0x20>
 8012cb0:	b132      	cbz	r2, 8012cc0 <rmw_create_node+0x20>
 8012cb2:	7813      	ldrb	r3, [r2, #0]
 8012cb4:	b123      	cbz	r3, 8012cc0 <rmw_create_node+0x20>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8012cba:	4660      	mov	r0, ip
 8012cbc:	f7ff bf70 	b.w	8012ba0 <create_node>
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	4770      	bx	lr

08012cc4 <rmw_destroy_node>:
 8012cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc6:	b328      	cbz	r0, 8012d14 <rmw_destroy_node+0x50>
 8012cc8:	4607      	mov	r7, r0
 8012cca:	6800      	ldr	r0, [r0, #0]
 8012ccc:	b120      	cbz	r0, 8012cd8 <rmw_destroy_node+0x14>
 8012cce:	4b37      	ldr	r3, [pc, #220]	; (8012dac <rmw_destroy_node+0xe8>)
 8012cd0:	6819      	ldr	r1, [r3, #0]
 8012cd2:	f7ed fb0d 	bl	80002f0 <strcmp>
 8012cd6:	b9e8      	cbnz	r0, 8012d14 <rmw_destroy_node+0x50>
 8012cd8:	687d      	ldr	r5, [r7, #4]
 8012cda:	b1dd      	cbz	r5, 8012d14 <rmw_destroy_node+0x50>
 8012cdc:	4b34      	ldr	r3, [pc, #208]	; (8012db0 <rmw_destroy_node+0xec>)
 8012cde:	681c      	ldr	r4, [r3, #0]
 8012ce0:	2c00      	cmp	r4, #0
 8012ce2:	d060      	beq.n	8012da6 <rmw_destroy_node+0xe2>
 8012ce4:	2600      	movs	r6, #0
 8012ce6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012cea:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8012cee:	429d      	cmp	r5, r3
 8012cf0:	d013      	beq.n	8012d1a <rmw_destroy_node+0x56>
 8012cf2:	2c00      	cmp	r4, #0
 8012cf4:	d1f7      	bne.n	8012ce6 <rmw_destroy_node+0x22>
 8012cf6:	4b2f      	ldr	r3, [pc, #188]	; (8012db4 <rmw_destroy_node+0xf0>)
 8012cf8:	681c      	ldr	r4, [r3, #0]
 8012cfa:	b1c4      	cbz	r4, 8012d2e <rmw_destroy_node+0x6a>
 8012cfc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d00:	6a0b      	ldr	r3, [r1, #32]
 8012d02:	429d      	cmp	r5, r3
 8012d04:	d1f9      	bne.n	8012cfa <rmw_destroy_node+0x36>
 8012d06:	317c      	adds	r1, #124	; 0x7c
 8012d08:	4638      	mov	r0, r7
 8012d0a:	f000 f8a3 	bl	8012e54 <rmw_destroy_subscription>
 8012d0e:	2801      	cmp	r0, #1
 8012d10:	4606      	mov	r6, r0
 8012d12:	d1f2      	bne.n	8012cfa <rmw_destroy_node+0x36>
 8012d14:	2601      	movs	r6, #1
 8012d16:	4630      	mov	r0, r6
 8012d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d1a:	3184      	adds	r1, #132	; 0x84
 8012d1c:	4638      	mov	r0, r7
 8012d1e:	f7f9 ffd5 	bl	800cccc <rmw_destroy_publisher>
 8012d22:	2801      	cmp	r0, #1
 8012d24:	4606      	mov	r6, r0
 8012d26:	d0f5      	beq.n	8012d14 <rmw_destroy_node+0x50>
 8012d28:	2c00      	cmp	r4, #0
 8012d2a:	d1dc      	bne.n	8012ce6 <rmw_destroy_node+0x22>
 8012d2c:	e7e3      	b.n	8012cf6 <rmw_destroy_node+0x32>
 8012d2e:	4b22      	ldr	r3, [pc, #136]	; (8012db8 <rmw_destroy_node+0xf4>)
 8012d30:	681c      	ldr	r4, [r3, #0]
 8012d32:	b16c      	cbz	r4, 8012d50 <rmw_destroy_node+0x8c>
 8012d34:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d38:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012d3a:	429d      	cmp	r5, r3
 8012d3c:	d1f9      	bne.n	8012d32 <rmw_destroy_node+0x6e>
 8012d3e:	317c      	adds	r1, #124	; 0x7c
 8012d40:	4638      	mov	r0, r7
 8012d42:	f000 f843 	bl	8012dcc <rmw_destroy_service>
 8012d46:	2801      	cmp	r0, #1
 8012d48:	4606      	mov	r6, r0
 8012d4a:	d0e3      	beq.n	8012d14 <rmw_destroy_node+0x50>
 8012d4c:	2c00      	cmp	r4, #0
 8012d4e:	d1f1      	bne.n	8012d34 <rmw_destroy_node+0x70>
 8012d50:	4b1a      	ldr	r3, [pc, #104]	; (8012dbc <rmw_destroy_node+0xf8>)
 8012d52:	681c      	ldr	r4, [r3, #0]
 8012d54:	b16c      	cbz	r4, 8012d72 <rmw_destroy_node+0xae>
 8012d56:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d5a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012d5c:	429d      	cmp	r5, r3
 8012d5e:	d1f9      	bne.n	8012d54 <rmw_destroy_node+0x90>
 8012d60:	317c      	adds	r1, #124	; 0x7c
 8012d62:	4638      	mov	r0, r7
 8012d64:	f002 fa5c 	bl	8015220 <rmw_destroy_client>
 8012d68:	2801      	cmp	r0, #1
 8012d6a:	4606      	mov	r6, r0
 8012d6c:	d0d2      	beq.n	8012d14 <rmw_destroy_node+0x50>
 8012d6e:	2c00      	cmp	r4, #0
 8012d70:	d1f1      	bne.n	8012d56 <rmw_destroy_node+0x92>
 8012d72:	6928      	ldr	r0, [r5, #16]
 8012d74:	696a      	ldr	r2, [r5, #20]
 8012d76:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d7a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d7e:	6819      	ldr	r1, [r3, #0]
 8012d80:	f7fb fb6e 	bl	800e460 <uxr_buffer_delete_entity>
 8012d84:	4602      	mov	r2, r0
 8012d86:	6928      	ldr	r0, [r5, #16]
 8012d88:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012d8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012d90:	f7fa fa2c 	bl	800d1ec <run_xrce_session>
 8012d94:	4603      	mov	r3, r0
 8012d96:	4638      	mov	r0, r7
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	bf08      	it	eq
 8012d9c:	2602      	moveq	r6, #2
 8012d9e:	f7fa f94f 	bl	800d040 <rmw_uxrce_fini_node_memory>
 8012da2:	4630      	mov	r0, r6
 8012da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da6:	4626      	mov	r6, r4
 8012da8:	e7a5      	b.n	8012cf6 <rmw_destroy_node+0x32>
 8012daa:	bf00      	nop
 8012dac:	080172a4 	.word	0x080172a4
 8012db0:	24010a34 	.word	0x24010a34
 8012db4:	24010a74 	.word	0x24010a74
 8012db8:	24010a44 	.word	0x24010a44
 8012dbc:	2400c158 	.word	0x2400c158

08012dc0 <rmw_node_get_graph_guard_condition>:
 8012dc0:	6843      	ldr	r3, [r0, #4]
 8012dc2:	6918      	ldr	r0, [r3, #16]
 8012dc4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8012dc8:	4770      	bx	lr
 8012dca:	bf00      	nop

08012dcc <rmw_destroy_service>:
 8012dcc:	b570      	push	{r4, r5, r6, lr}
 8012dce:	b128      	cbz	r0, 8012ddc <rmw_destroy_service+0x10>
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	6800      	ldr	r0, [r0, #0]
 8012dd4:	460d      	mov	r5, r1
 8012dd6:	f7fa fa83 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 8012dda:	b910      	cbnz	r0, 8012de2 <rmw_destroy_service+0x16>
 8012ddc:	2401      	movs	r4, #1
 8012dde:	4620      	mov	r0, r4
 8012de0:	bd70      	pop	{r4, r5, r6, pc}
 8012de2:	6863      	ldr	r3, [r4, #4]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d0f9      	beq.n	8012ddc <rmw_destroy_service+0x10>
 8012de8:	2d00      	cmp	r5, #0
 8012dea:	d0f7      	beq.n	8012ddc <rmw_destroy_service+0x10>
 8012dec:	6828      	ldr	r0, [r5, #0]
 8012dee:	f7fa fa77 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 8012df2:	2800      	cmp	r0, #0
 8012df4:	d0f2      	beq.n	8012ddc <rmw_destroy_service+0x10>
 8012df6:	686e      	ldr	r6, [r5, #4]
 8012df8:	2e00      	cmp	r6, #0
 8012dfa:	d0ef      	beq.n	8012ddc <rmw_destroy_service+0x10>
 8012dfc:	6864      	ldr	r4, [r4, #4]
 8012dfe:	6932      	ldr	r2, [r6, #16]
 8012e00:	6920      	ldr	r0, [r4, #16]
 8012e02:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012e06:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e0a:	6819      	ldr	r1, [r3, #0]
 8012e0c:	f001 f888 	bl	8013f20 <uxr_buffer_cancel_data>
 8012e10:	4602      	mov	r2, r0
 8012e12:	6920      	ldr	r0, [r4, #16]
 8012e14:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012e18:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012e1c:	f7fa f9e6 	bl	800d1ec <run_xrce_session>
 8012e20:	6920      	ldr	r0, [r4, #16]
 8012e22:	6932      	ldr	r2, [r6, #16]
 8012e24:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012e28:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e2c:	6819      	ldr	r1, [r3, #0]
 8012e2e:	f7fb fb17 	bl	800e460 <uxr_buffer_delete_entity>
 8012e32:	4602      	mov	r2, r0
 8012e34:	6920      	ldr	r0, [r4, #16]
 8012e36:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012e3a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012e3e:	f7fa f9d5 	bl	800d1ec <run_xrce_session>
 8012e42:	4603      	mov	r3, r0
 8012e44:	4628      	mov	r0, r5
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	bf14      	ite	ne
 8012e4a:	2400      	movne	r4, #0
 8012e4c:	2402      	moveq	r4, #2
 8012e4e:	f7fa f93b 	bl	800d0c8 <rmw_uxrce_fini_service_memory>
 8012e52:	e7c4      	b.n	8012dde <rmw_destroy_service+0x12>

08012e54 <rmw_destroy_subscription>:
 8012e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e58:	b128      	cbz	r0, 8012e66 <rmw_destroy_subscription+0x12>
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	6800      	ldr	r0, [r0, #0]
 8012e5e:	460d      	mov	r5, r1
 8012e60:	f7fa fa3e 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 8012e64:	b918      	cbnz	r0, 8012e6e <rmw_destroy_subscription+0x1a>
 8012e66:	2401      	movs	r4, #1
 8012e68:	4620      	mov	r0, r4
 8012e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6e:	6863      	ldr	r3, [r4, #4]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d0f8      	beq.n	8012e66 <rmw_destroy_subscription+0x12>
 8012e74:	fab5 f485 	clz	r4, r5
 8012e78:	0964      	lsrs	r4, r4, #5
 8012e7a:	2d00      	cmp	r5, #0
 8012e7c:	d0f3      	beq.n	8012e66 <rmw_destroy_subscription+0x12>
 8012e7e:	6828      	ldr	r0, [r5, #0]
 8012e80:	f7fa fa2e 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	d0ee      	beq.n	8012e66 <rmw_destroy_subscription+0x12>
 8012e88:	686e      	ldr	r6, [r5, #4]
 8012e8a:	2e00      	cmp	r6, #0
 8012e8c:	d0eb      	beq.n	8012e66 <rmw_destroy_subscription+0x12>
 8012e8e:	6a37      	ldr	r7, [r6, #32]
 8012e90:	6972      	ldr	r2, [r6, #20]
 8012e92:	6938      	ldr	r0, [r7, #16]
 8012e94:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012e98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e9c:	6819      	ldr	r1, [r3, #0]
 8012e9e:	f001 f83f 	bl	8013f20 <uxr_buffer_cancel_data>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	6938      	ldr	r0, [r7, #16]
 8012ea6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012eaa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012eae:	f7fa f99d 	bl	800d1ec <run_xrce_session>
 8012eb2:	69f0      	ldr	r0, [r6, #28]
 8012eb4:	f7ff fe52 	bl	8012b5c <destroy_topic>
 8012eb8:	6a33      	ldr	r3, [r6, #32]
 8012eba:	6972      	ldr	r2, [r6, #20]
 8012ebc:	6918      	ldr	r0, [r3, #16]
 8012ebe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012ec2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012ec6:	6819      	ldr	r1, [r3, #0]
 8012ec8:	f7fb faca 	bl	800e460 <uxr_buffer_delete_entity>
 8012ecc:	6a33      	ldr	r3, [r6, #32]
 8012ece:	4680      	mov	r8, r0
 8012ed0:	6932      	ldr	r2, [r6, #16]
 8012ed2:	6918      	ldr	r0, [r3, #16]
 8012ed4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012ed8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012edc:	6819      	ldr	r1, [r3, #0]
 8012ede:	f7fb fabf 	bl	800e460 <uxr_buffer_delete_entity>
 8012ee2:	4606      	mov	r6, r0
 8012ee4:	6938      	ldr	r0, [r7, #16]
 8012ee6:	4642      	mov	r2, r8
 8012ee8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012eec:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012ef0:	f7fa f97c 	bl	800d1ec <run_xrce_session>
 8012ef4:	693f      	ldr	r7, [r7, #16]
 8012ef6:	4632      	mov	r2, r6
 8012ef8:	4606      	mov	r6, r0
 8012efa:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8012efe:	4638      	mov	r0, r7
 8012f00:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012f04:	f7fa f972 	bl	800d1ec <run_xrce_session>
 8012f08:	b126      	cbz	r6, 8012f14 <rmw_destroy_subscription+0xc0>
 8012f0a:	b118      	cbz	r0, 8012f14 <rmw_destroy_subscription+0xc0>
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f7fa f8c5 	bl	800d09c <rmw_uxrce_fini_subscription_memory>
 8012f12:	e7a9      	b.n	8012e68 <rmw_destroy_subscription+0x14>
 8012f14:	2402      	movs	r4, #2
 8012f16:	e7f9      	b.n	8012f0c <rmw_destroy_subscription+0xb8>

08012f18 <rmw_uxrce_transport_init>:
 8012f18:	b508      	push	{r3, lr}
 8012f1a:	b108      	cbz	r0, 8012f20 <rmw_uxrce_transport_init+0x8>
 8012f1c:	f100 0210 	add.w	r2, r0, #16
 8012f20:	b139      	cbz	r1, 8012f32 <rmw_uxrce_transport_init+0x1a>
 8012f22:	6949      	ldr	r1, [r1, #20]
 8012f24:	4610      	mov	r0, r2
 8012f26:	f000 fa79 	bl	801341c <uxr_init_custom_transport>
 8012f2a:	f080 0001 	eor.w	r0, r0, #1
 8012f2e:	b2c0      	uxtb	r0, r0
 8012f30:	bd08      	pop	{r3, pc}
 8012f32:	4b04      	ldr	r3, [pc, #16]	; (8012f44 <rmw_uxrce_transport_init+0x2c>)
 8012f34:	4610      	mov	r0, r2
 8012f36:	6859      	ldr	r1, [r3, #4]
 8012f38:	f000 fa70 	bl	801341c <uxr_init_custom_transport>
 8012f3c:	f080 0001 	eor.w	r0, r0, #1
 8012f40:	b2c0      	uxtb	r0, r0
 8012f42:	bd08      	pop	{r3, pc}
 8012f44:	2400c13c 	.word	0x2400c13c

08012f48 <rmw_uros_epoch_nanos>:
 8012f48:	4b05      	ldr	r3, [pc, #20]	; (8012f60 <rmw_uros_epoch_nanos+0x18>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	b123      	cbz	r3, 8012f58 <rmw_uros_epoch_nanos+0x10>
 8012f4e:	6898      	ldr	r0, [r3, #8]
 8012f50:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012f54:	f7fb bd24 	b.w	800e9a0 <uxr_epoch_nanos>
 8012f58:	2000      	movs	r0, #0
 8012f5a:	2100      	movs	r1, #0
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop
 8012f60:	24010a54 	.word	0x24010a54

08012f64 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f68:	6805      	ldr	r5, [r0, #0]
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	460e      	mov	r6, r1
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f7ed f9be 	bl	80002f0 <strcmp>
 8012f74:	b1c8      	cbz	r0, 8012faa <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8012f76:	4b11      	ldr	r3, [pc, #68]	; (8012fbc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	429d      	cmp	r5, r3
 8012f7c:	d112      	bne.n	8012fa4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012f7e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012f82:	f8d8 4000 	ldr.w	r4, [r8]
 8012f86:	b16c      	cbz	r4, 8012fa4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012f88:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012f8c:	2700      	movs	r7, #0
 8012f8e:	3d04      	subs	r5, #4
 8012f90:	4631      	mov	r1, r6
 8012f92:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012f96:	f7ed f9ab 	bl	80002f0 <strcmp>
 8012f9a:	00bb      	lsls	r3, r7, #2
 8012f9c:	b140      	cbz	r0, 8012fb0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012f9e:	3701      	adds	r7, #1
 8012fa0:	42bc      	cmp	r4, r7
 8012fa2:	d1f5      	bne.n	8012f90 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012fa4:	2000      	movs	r0, #0
 8012fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012faa:	4620      	mov	r0, r4
 8012fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb8:	58d3      	ldr	r3, [r2, r3]
 8012fba:	4718      	bx	r3
 8012fbc:	240000b0 	.word	0x240000b0

08012fc0 <std_msgs__msg__Int32__init>:
 8012fc0:	3800      	subs	r0, #0
 8012fc2:	bf18      	it	ne
 8012fc4:	2001      	movne	r0, #1
 8012fc6:	4770      	bx	lr

08012fc8 <std_msgs__msg__Int32__fini>:
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop

08012fcc <ucdr_serialize_endian_array_char>:
 8012fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	461f      	mov	r7, r3
 8012fd4:	4605      	mov	r5, r0
 8012fd6:	4690      	mov	r8, r2
 8012fd8:	f7fb f97a 	bl	800e2d0 <ucdr_check_buffer_available_for>
 8012fdc:	b9e0      	cbnz	r0, 8013018 <ucdr_serialize_endian_array_char+0x4c>
 8012fde:	463e      	mov	r6, r7
 8012fe0:	e00b      	b.n	8012ffa <ucdr_serialize_endian_array_char+0x2e>
 8012fe2:	4441      	add	r1, r8
 8012fe4:	68a8      	ldr	r0, [r5, #8]
 8012fe6:	4622      	mov	r2, r4
 8012fe8:	1b36      	subs	r6, r6, r4
 8012fea:	f002 fe6c 	bl	8015cc6 <memcpy>
 8012fee:	68ab      	ldr	r3, [r5, #8]
 8012ff0:	6928      	ldr	r0, [r5, #16]
 8012ff2:	4423      	add	r3, r4
 8012ff4:	4420      	add	r0, r4
 8012ff6:	60ab      	str	r3, [r5, #8]
 8012ff8:	6128      	str	r0, [r5, #16]
 8012ffa:	4631      	mov	r1, r6
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	4628      	mov	r0, r5
 8013000:	f7fb f9f0 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8013004:	1bb9      	subs	r1, r7, r6
 8013006:	4604      	mov	r4, r0
 8013008:	2800      	cmp	r0, #0
 801300a:	d1ea      	bne.n	8012fe2 <ucdr_serialize_endian_array_char+0x16>
 801300c:	2301      	movs	r3, #1
 801300e:	7da8      	ldrb	r0, [r5, #22]
 8013010:	756b      	strb	r3, [r5, #21]
 8013012:	4058      	eors	r0, r3
 8013014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013018:	463a      	mov	r2, r7
 801301a:	4641      	mov	r1, r8
 801301c:	68a8      	ldr	r0, [r5, #8]
 801301e:	f002 fe52 	bl	8015cc6 <memcpy>
 8013022:	68aa      	ldr	r2, [r5, #8]
 8013024:	692b      	ldr	r3, [r5, #16]
 8013026:	443a      	add	r2, r7
 8013028:	443b      	add	r3, r7
 801302a:	60aa      	str	r2, [r5, #8]
 801302c:	612b      	str	r3, [r5, #16]
 801302e:	e7ed      	b.n	801300c <ucdr_serialize_endian_array_char+0x40>

08013030 <ucdr_deserialize_endian_array_char>:
 8013030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013034:	4619      	mov	r1, r3
 8013036:	461f      	mov	r7, r3
 8013038:	4605      	mov	r5, r0
 801303a:	4690      	mov	r8, r2
 801303c:	f7fb f948 	bl	800e2d0 <ucdr_check_buffer_available_for>
 8013040:	b9e8      	cbnz	r0, 801307e <ucdr_deserialize_endian_array_char+0x4e>
 8013042:	463e      	mov	r6, r7
 8013044:	e00c      	b.n	8013060 <ucdr_deserialize_endian_array_char+0x30>
 8013046:	eb08 0003 	add.w	r0, r8, r3
 801304a:	68a9      	ldr	r1, [r5, #8]
 801304c:	4622      	mov	r2, r4
 801304e:	1b36      	subs	r6, r6, r4
 8013050:	f002 fe39 	bl	8015cc6 <memcpy>
 8013054:	68ab      	ldr	r3, [r5, #8]
 8013056:	6928      	ldr	r0, [r5, #16]
 8013058:	4423      	add	r3, r4
 801305a:	4420      	add	r0, r4
 801305c:	60ab      	str	r3, [r5, #8]
 801305e:	6128      	str	r0, [r5, #16]
 8013060:	4631      	mov	r1, r6
 8013062:	2201      	movs	r2, #1
 8013064:	4628      	mov	r0, r5
 8013066:	f7fb f9bd 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 801306a:	1bbb      	subs	r3, r7, r6
 801306c:	4604      	mov	r4, r0
 801306e:	2800      	cmp	r0, #0
 8013070:	d1e9      	bne.n	8013046 <ucdr_deserialize_endian_array_char+0x16>
 8013072:	2301      	movs	r3, #1
 8013074:	7da8      	ldrb	r0, [r5, #22]
 8013076:	756b      	strb	r3, [r5, #21]
 8013078:	4058      	eors	r0, r3
 801307a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307e:	463a      	mov	r2, r7
 8013080:	68a9      	ldr	r1, [r5, #8]
 8013082:	4640      	mov	r0, r8
 8013084:	f002 fe1f 	bl	8015cc6 <memcpy>
 8013088:	68aa      	ldr	r2, [r5, #8]
 801308a:	692b      	ldr	r3, [r5, #16]
 801308c:	443a      	add	r2, r7
 801308e:	443b      	add	r3, r7
 8013090:	60aa      	str	r2, [r5, #8]
 8013092:	612b      	str	r3, [r5, #16]
 8013094:	e7ed      	b.n	8013072 <ucdr_deserialize_endian_array_char+0x42>
 8013096:	bf00      	nop

08013098 <ucdr_serialize_array_uint8_t>:
 8013098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801309c:	4688      	mov	r8, r1
 801309e:	4611      	mov	r1, r2
 80130a0:	4617      	mov	r7, r2
 80130a2:	4605      	mov	r5, r0
 80130a4:	f7fb f914 	bl	800e2d0 <ucdr_check_buffer_available_for>
 80130a8:	b9e0      	cbnz	r0, 80130e4 <ucdr_serialize_array_uint8_t+0x4c>
 80130aa:	463e      	mov	r6, r7
 80130ac:	e00b      	b.n	80130c6 <ucdr_serialize_array_uint8_t+0x2e>
 80130ae:	4441      	add	r1, r8
 80130b0:	68a8      	ldr	r0, [r5, #8]
 80130b2:	4622      	mov	r2, r4
 80130b4:	1b36      	subs	r6, r6, r4
 80130b6:	f002 fe06 	bl	8015cc6 <memcpy>
 80130ba:	68ab      	ldr	r3, [r5, #8]
 80130bc:	6928      	ldr	r0, [r5, #16]
 80130be:	4423      	add	r3, r4
 80130c0:	4420      	add	r0, r4
 80130c2:	60ab      	str	r3, [r5, #8]
 80130c4:	6128      	str	r0, [r5, #16]
 80130c6:	4631      	mov	r1, r6
 80130c8:	2201      	movs	r2, #1
 80130ca:	4628      	mov	r0, r5
 80130cc:	f7fb f98a 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 80130d0:	1bb9      	subs	r1, r7, r6
 80130d2:	4604      	mov	r4, r0
 80130d4:	2800      	cmp	r0, #0
 80130d6:	d1ea      	bne.n	80130ae <ucdr_serialize_array_uint8_t+0x16>
 80130d8:	2301      	movs	r3, #1
 80130da:	7da8      	ldrb	r0, [r5, #22]
 80130dc:	756b      	strb	r3, [r5, #21]
 80130de:	4058      	eors	r0, r3
 80130e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e4:	463a      	mov	r2, r7
 80130e6:	4641      	mov	r1, r8
 80130e8:	68a8      	ldr	r0, [r5, #8]
 80130ea:	f002 fdec 	bl	8015cc6 <memcpy>
 80130ee:	68aa      	ldr	r2, [r5, #8]
 80130f0:	692b      	ldr	r3, [r5, #16]
 80130f2:	443a      	add	r2, r7
 80130f4:	443b      	add	r3, r7
 80130f6:	60aa      	str	r2, [r5, #8]
 80130f8:	612b      	str	r3, [r5, #16]
 80130fa:	e7ed      	b.n	80130d8 <ucdr_serialize_array_uint8_t+0x40>

080130fc <ucdr_serialize_endian_array_uint8_t>:
 80130fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013100:	4619      	mov	r1, r3
 8013102:	461f      	mov	r7, r3
 8013104:	4605      	mov	r5, r0
 8013106:	4690      	mov	r8, r2
 8013108:	f7fb f8e2 	bl	800e2d0 <ucdr_check_buffer_available_for>
 801310c:	b9e0      	cbnz	r0, 8013148 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801310e:	463e      	mov	r6, r7
 8013110:	e00b      	b.n	801312a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8013112:	4441      	add	r1, r8
 8013114:	68a8      	ldr	r0, [r5, #8]
 8013116:	4622      	mov	r2, r4
 8013118:	1b36      	subs	r6, r6, r4
 801311a:	f002 fdd4 	bl	8015cc6 <memcpy>
 801311e:	68ab      	ldr	r3, [r5, #8]
 8013120:	6928      	ldr	r0, [r5, #16]
 8013122:	4423      	add	r3, r4
 8013124:	4420      	add	r0, r4
 8013126:	60ab      	str	r3, [r5, #8]
 8013128:	6128      	str	r0, [r5, #16]
 801312a:	4631      	mov	r1, r6
 801312c:	2201      	movs	r2, #1
 801312e:	4628      	mov	r0, r5
 8013130:	f7fb f958 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8013134:	1bb9      	subs	r1, r7, r6
 8013136:	4604      	mov	r4, r0
 8013138:	2800      	cmp	r0, #0
 801313a:	d1ea      	bne.n	8013112 <ucdr_serialize_endian_array_uint8_t+0x16>
 801313c:	2301      	movs	r3, #1
 801313e:	7da8      	ldrb	r0, [r5, #22]
 8013140:	756b      	strb	r3, [r5, #21]
 8013142:	4058      	eors	r0, r3
 8013144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013148:	463a      	mov	r2, r7
 801314a:	4641      	mov	r1, r8
 801314c:	68a8      	ldr	r0, [r5, #8]
 801314e:	f002 fdba 	bl	8015cc6 <memcpy>
 8013152:	68aa      	ldr	r2, [r5, #8]
 8013154:	692b      	ldr	r3, [r5, #16]
 8013156:	443a      	add	r2, r7
 8013158:	443b      	add	r3, r7
 801315a:	60aa      	str	r2, [r5, #8]
 801315c:	612b      	str	r3, [r5, #16]
 801315e:	e7ed      	b.n	801313c <ucdr_serialize_endian_array_uint8_t+0x40>

08013160 <ucdr_deserialize_array_uint8_t>:
 8013160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013164:	4688      	mov	r8, r1
 8013166:	4611      	mov	r1, r2
 8013168:	4617      	mov	r7, r2
 801316a:	4605      	mov	r5, r0
 801316c:	f7fb f8b0 	bl	800e2d0 <ucdr_check_buffer_available_for>
 8013170:	b9e8      	cbnz	r0, 80131ae <ucdr_deserialize_array_uint8_t+0x4e>
 8013172:	463e      	mov	r6, r7
 8013174:	e00c      	b.n	8013190 <ucdr_deserialize_array_uint8_t+0x30>
 8013176:	eb08 0003 	add.w	r0, r8, r3
 801317a:	68a9      	ldr	r1, [r5, #8]
 801317c:	4622      	mov	r2, r4
 801317e:	1b36      	subs	r6, r6, r4
 8013180:	f002 fda1 	bl	8015cc6 <memcpy>
 8013184:	68ab      	ldr	r3, [r5, #8]
 8013186:	6928      	ldr	r0, [r5, #16]
 8013188:	4423      	add	r3, r4
 801318a:	4420      	add	r0, r4
 801318c:	60ab      	str	r3, [r5, #8]
 801318e:	6128      	str	r0, [r5, #16]
 8013190:	4631      	mov	r1, r6
 8013192:	2201      	movs	r2, #1
 8013194:	4628      	mov	r0, r5
 8013196:	f7fb f925 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 801319a:	1bbb      	subs	r3, r7, r6
 801319c:	4604      	mov	r4, r0
 801319e:	2800      	cmp	r0, #0
 80131a0:	d1e9      	bne.n	8013176 <ucdr_deserialize_array_uint8_t+0x16>
 80131a2:	2301      	movs	r3, #1
 80131a4:	7da8      	ldrb	r0, [r5, #22]
 80131a6:	756b      	strb	r3, [r5, #21]
 80131a8:	4058      	eors	r0, r3
 80131aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ae:	463a      	mov	r2, r7
 80131b0:	68a9      	ldr	r1, [r5, #8]
 80131b2:	4640      	mov	r0, r8
 80131b4:	f002 fd87 	bl	8015cc6 <memcpy>
 80131b8:	68aa      	ldr	r2, [r5, #8]
 80131ba:	692b      	ldr	r3, [r5, #16]
 80131bc:	443a      	add	r2, r7
 80131be:	443b      	add	r3, r7
 80131c0:	60aa      	str	r2, [r5, #8]
 80131c2:	612b      	str	r3, [r5, #16]
 80131c4:	e7ed      	b.n	80131a2 <ucdr_deserialize_array_uint8_t+0x42>
 80131c6:	bf00      	nop

080131c8 <ucdr_deserialize_endian_array_uint8_t>:
 80131c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131cc:	4619      	mov	r1, r3
 80131ce:	461f      	mov	r7, r3
 80131d0:	4605      	mov	r5, r0
 80131d2:	4690      	mov	r8, r2
 80131d4:	f7fb f87c 	bl	800e2d0 <ucdr_check_buffer_available_for>
 80131d8:	b9e8      	cbnz	r0, 8013216 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 80131da:	463e      	mov	r6, r7
 80131dc:	e00c      	b.n	80131f8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 80131de:	eb08 0003 	add.w	r0, r8, r3
 80131e2:	68a9      	ldr	r1, [r5, #8]
 80131e4:	4622      	mov	r2, r4
 80131e6:	1b36      	subs	r6, r6, r4
 80131e8:	f002 fd6d 	bl	8015cc6 <memcpy>
 80131ec:	68ab      	ldr	r3, [r5, #8]
 80131ee:	6928      	ldr	r0, [r5, #16]
 80131f0:	4423      	add	r3, r4
 80131f2:	4420      	add	r0, r4
 80131f4:	60ab      	str	r3, [r5, #8]
 80131f6:	6128      	str	r0, [r5, #16]
 80131f8:	4631      	mov	r1, r6
 80131fa:	2201      	movs	r2, #1
 80131fc:	4628      	mov	r0, r5
 80131fe:	f7fb f8f1 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8013202:	1bbb      	subs	r3, r7, r6
 8013204:	4604      	mov	r4, r0
 8013206:	2800      	cmp	r0, #0
 8013208:	d1e9      	bne.n	80131de <ucdr_deserialize_endian_array_uint8_t+0x16>
 801320a:	2301      	movs	r3, #1
 801320c:	7da8      	ldrb	r0, [r5, #22]
 801320e:	756b      	strb	r3, [r5, #21]
 8013210:	4058      	eors	r0, r3
 8013212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013216:	463a      	mov	r2, r7
 8013218:	68a9      	ldr	r1, [r5, #8]
 801321a:	4640      	mov	r0, r8
 801321c:	f002 fd53 	bl	8015cc6 <memcpy>
 8013220:	68aa      	ldr	r2, [r5, #8]
 8013222:	692b      	ldr	r3, [r5, #16]
 8013224:	443a      	add	r2, r7
 8013226:	443b      	add	r3, r7
 8013228:	60aa      	str	r2, [r5, #8]
 801322a:	612b      	str	r3, [r5, #16]
 801322c:	e7ed      	b.n	801320a <ucdr_deserialize_endian_array_uint8_t+0x42>
 801322e:	bf00      	nop

08013230 <ucdr_serialize_sequence_char>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	4615      	mov	r5, r2
 8013234:	460e      	mov	r6, r1
 8013236:	7d01      	ldrb	r1, [r0, #20]
 8013238:	4604      	mov	r4, r0
 801323a:	f7fa fb9f 	bl	800d97c <ucdr_serialize_endian_uint32_t>
 801323e:	b90d      	cbnz	r5, 8013244 <ucdr_serialize_sequence_char+0x14>
 8013240:	2001      	movs	r0, #1
 8013242:	bd70      	pop	{r4, r5, r6, pc}
 8013244:	462b      	mov	r3, r5
 8013246:	4632      	mov	r2, r6
 8013248:	7d21      	ldrb	r1, [r4, #20]
 801324a:	4620      	mov	r0, r4
 801324c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013250:	f7ff bebc 	b.w	8012fcc <ucdr_serialize_endian_array_char>

08013254 <ucdr_deserialize_sequence_char>:
 8013254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013258:	461d      	mov	r5, r3
 801325a:	4616      	mov	r6, r2
 801325c:	460f      	mov	r7, r1
 801325e:	461a      	mov	r2, r3
 8013260:	7d01      	ldrb	r1, [r0, #20]
 8013262:	4604      	mov	r4, r0
 8013264:	f7fa fcb2 	bl	800dbcc <ucdr_deserialize_endian_uint32_t>
 8013268:	682b      	ldr	r3, [r5, #0]
 801326a:	429e      	cmp	r6, r3
 801326c:	d201      	bcs.n	8013272 <ucdr_deserialize_sequence_char+0x1e>
 801326e:	2201      	movs	r2, #1
 8013270:	75a2      	strb	r2, [r4, #22]
 8013272:	b913      	cbnz	r3, 801327a <ucdr_deserialize_sequence_char+0x26>
 8013274:	2001      	movs	r0, #1
 8013276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801327a:	463a      	mov	r2, r7
 801327c:	7d21      	ldrb	r1, [r4, #20]
 801327e:	4620      	mov	r0, r4
 8013280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013284:	f7ff bed4 	b.w	8013030 <ucdr_deserialize_endian_array_char>

08013288 <ucdr_serialize_sequence_uint8_t>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	4615      	mov	r5, r2
 801328c:	460e      	mov	r6, r1
 801328e:	7d01      	ldrb	r1, [r0, #20]
 8013290:	4604      	mov	r4, r0
 8013292:	f7fa fb73 	bl	800d97c <ucdr_serialize_endian_uint32_t>
 8013296:	b90d      	cbnz	r5, 801329c <ucdr_serialize_sequence_uint8_t+0x14>
 8013298:	2001      	movs	r0, #1
 801329a:	bd70      	pop	{r4, r5, r6, pc}
 801329c:	462b      	mov	r3, r5
 801329e:	4632      	mov	r2, r6
 80132a0:	7d21      	ldrb	r1, [r4, #20]
 80132a2:	4620      	mov	r0, r4
 80132a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132a8:	f7ff bf28 	b.w	80130fc <ucdr_serialize_endian_array_uint8_t>

080132ac <ucdr_deserialize_sequence_uint8_t>:
 80132ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132b0:	461d      	mov	r5, r3
 80132b2:	4616      	mov	r6, r2
 80132b4:	460f      	mov	r7, r1
 80132b6:	461a      	mov	r2, r3
 80132b8:	7d01      	ldrb	r1, [r0, #20]
 80132ba:	4604      	mov	r4, r0
 80132bc:	f7fa fc86 	bl	800dbcc <ucdr_deserialize_endian_uint32_t>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	429e      	cmp	r6, r3
 80132c4:	d201      	bcs.n	80132ca <ucdr_deserialize_sequence_uint8_t+0x1e>
 80132c6:	2201      	movs	r2, #1
 80132c8:	75a2      	strb	r2, [r4, #22]
 80132ca:	b913      	cbnz	r3, 80132d2 <ucdr_deserialize_sequence_uint8_t+0x26>
 80132cc:	2001      	movs	r0, #1
 80132ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d2:	463a      	mov	r2, r7
 80132d4:	7d21      	ldrb	r1, [r4, #20]
 80132d6:	4620      	mov	r0, r4
 80132d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132dc:	f7ff bf74 	b.w	80131c8 <ucdr_deserialize_endian_array_uint8_t>

080132e0 <ucdr_serialize_string>:
 80132e0:	b510      	push	{r4, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	4604      	mov	r4, r0
 80132e6:	4608      	mov	r0, r1
 80132e8:	9101      	str	r1, [sp, #4]
 80132ea:	f7ed f80b 	bl	8000304 <strlen>
 80132ee:	4602      	mov	r2, r0
 80132f0:	9901      	ldr	r1, [sp, #4]
 80132f2:	4620      	mov	r0, r4
 80132f4:	3201      	adds	r2, #1
 80132f6:	b002      	add	sp, #8
 80132f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132fc:	f7ff bf98 	b.w	8013230 <ucdr_serialize_sequence_char>

08013300 <ucdr_deserialize_string>:
 8013300:	b500      	push	{lr}
 8013302:	b083      	sub	sp, #12
 8013304:	ab01      	add	r3, sp, #4
 8013306:	f7ff ffa5 	bl	8013254 <ucdr_deserialize_sequence_char>
 801330a:	b003      	add	sp, #12
 801330c:	f85d fb04 	ldr.w	pc, [sp], #4

08013310 <get_custom_error>:
 8013310:	4b01      	ldr	r3, [pc, #4]	; (8013318 <get_custom_error+0x8>)
 8013312:	7818      	ldrb	r0, [r3, #0]
 8013314:	4770      	bx	lr
 8013316:	bf00      	nop
 8013318:	24010ba0 	.word	0x24010ba0

0801331c <recv_custom_msg>:
 801331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013320:	4693      	mov	fp, r2
 8013322:	b089      	sub	sp, #36	; 0x24
 8013324:	2200      	movs	r2, #0
 8013326:	4604      	mov	r4, r0
 8013328:	468a      	mov	sl, r1
 801332a:	9305      	str	r3, [sp, #20]
 801332c:	f88d 201e 	strb.w	r2, [sp, #30]
 8013330:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8013334:	b322      	cbz	r2, 8013380 <recv_custom_msg+0x64>
 8013336:	f200 2902 	addw	r9, r0, #514	; 0x202
 801333a:	f10d 081f 	add.w	r8, sp, #31
 801333e:	af05      	add	r7, sp, #20
 8013340:	f10d 061e 	add.w	r6, sp, #30
 8013344:	f44f 7500 	mov.w	r5, #512	; 0x200
 8013348:	e002      	b.n	8013350 <recv_custom_msg+0x34>
 801334a:	9b05      	ldr	r3, [sp, #20]
 801334c:	2b00      	cmp	r3, #0
 801334e:	dd0f      	ble.n	8013370 <recv_custom_msg+0x54>
 8013350:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8013354:	4623      	mov	r3, r4
 8013356:	4622      	mov	r2, r4
 8013358:	4648      	mov	r0, r9
 801335a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801335e:	e9cd 5600 	strd	r5, r6, [sp]
 8013362:	f001 f8d7 	bl	8014514 <uxr_read_framed_msg>
 8013366:	2800      	cmp	r0, #0
 8013368:	d0ef      	beq.n	801334a <recv_custom_msg+0x2e>
 801336a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801336e:	b1b3      	cbz	r3, 801339e <recv_custom_msg+0x82>
 8013370:	4b0f      	ldr	r3, [pc, #60]	; (80133b0 <recv_custom_msg+0x94>)
 8013372:	2000      	movs	r0, #0
 8013374:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013378:	701a      	strb	r2, [r3, #0]
 801337a:	b009      	add	sp, #36	; 0x24
 801337c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013380:	f10d 021f 	add.w	r2, sp, #31
 8013384:	4601      	mov	r1, r0
 8013386:	9200      	str	r2, [sp, #0]
 8013388:	f44f 7200 	mov.w	r2, #512	; 0x200
 801338c:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8013390:	47a8      	blx	r5
 8013392:	2800      	cmp	r0, #0
 8013394:	d0ec      	beq.n	8013370 <recv_custom_msg+0x54>
 8013396:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d1e8      	bne.n	8013370 <recv_custom_msg+0x54>
 801339e:	f8cb 0000 	str.w	r0, [fp]
 80133a2:	2001      	movs	r0, #1
 80133a4:	f8ca 4000 	str.w	r4, [sl]
 80133a8:	b009      	add	sp, #36	; 0x24
 80133aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ae:	bf00      	nop
 80133b0:	24010ba0 	.word	0x24010ba0

080133b4 <send_custom_msg>:
 80133b4:	b530      	push	{r4, r5, lr}
 80133b6:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80133ba:	b087      	sub	sp, #28
 80133bc:	4614      	mov	r4, r2
 80133be:	b995      	cbnz	r5, 80133e6 <send_custom_msg+0x32>
 80133c0:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 80133c4:	f10d 0317 	add.w	r3, sp, #23
 80133c8:	47a8      	blx	r5
 80133ca:	1e03      	subs	r3, r0, #0
 80133cc:	bf18      	it	ne
 80133ce:	2301      	movne	r3, #1
 80133d0:	42a0      	cmp	r0, r4
 80133d2:	bf18      	it	ne
 80133d4:	2300      	movne	r3, #0
 80133d6:	b91b      	cbnz	r3, 80133e0 <send_custom_msg+0x2c>
 80133d8:	4a0a      	ldr	r2, [pc, #40]	; (8013404 <send_custom_msg+0x50>)
 80133da:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80133de:	7011      	strb	r1, [r2, #0]
 80133e0:	4618      	mov	r0, r3
 80133e2:	b007      	add	sp, #28
 80133e4:	bd30      	pop	{r4, r5, pc}
 80133e6:	460b      	mov	r3, r1
 80133e8:	2200      	movs	r2, #0
 80133ea:	f10d 0117 	add.w	r1, sp, #23
 80133ee:	9400      	str	r4, [sp, #0]
 80133f0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80133f4:	4602      	mov	r2, r0
 80133f6:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80133fa:	f200 2002 	addw	r0, r0, #514	; 0x202
 80133fe:	f000 feab 	bl	8014158 <uxr_write_framed_msg>
 8013402:	e7e2      	b.n	80133ca <send_custom_msg+0x16>
 8013404:	24010ba0 	.word	0x24010ba0

08013408 <uxr_set_custom_transport_callbacks>:
 8013408:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801340c:	9901      	ldr	r1, [sp, #4]
 801340e:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8013412:	9b00      	ldr	r3, [sp, #0]
 8013414:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop

0801341c <uxr_init_custom_transport>:
 801341c:	b538      	push	{r3, r4, r5, lr}
 801341e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8013422:	b303      	cbz	r3, 8013466 <uxr_init_custom_transport+0x4a>
 8013424:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8013428:	4604      	mov	r4, r0
 801342a:	b1e2      	cbz	r2, 8013466 <uxr_init_custom_transport+0x4a>
 801342c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8013430:	b1ca      	cbz	r2, 8013466 <uxr_init_custom_transport+0x4a>
 8013432:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8013436:	b1b2      	cbz	r2, 8013466 <uxr_init_custom_transport+0x4a>
 8013438:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801343c:	4798      	blx	r3
 801343e:	4605      	mov	r5, r0
 8013440:	b188      	cbz	r0, 8013466 <uxr_init_custom_transport+0x4a>
 8013442:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8013446:	b98b      	cbnz	r3, 801346c <uxr_init_custom_transport+0x50>
 8013448:	4b0b      	ldr	r3, [pc, #44]	; (8013478 <uxr_init_custom_transport+0x5c>)
 801344a:	4628      	mov	r0, r5
 801344c:	490b      	ldr	r1, [pc, #44]	; (801347c <uxr_init_custom_transport+0x60>)
 801344e:	4a0c      	ldr	r2, [pc, #48]	; (8013480 <uxr_init_custom_transport+0x64>)
 8013450:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8013454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013458:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801345c:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8013460:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8013464:	bd38      	pop	{r3, r4, r5, pc}
 8013466:	2500      	movs	r5, #0
 8013468:	4628      	mov	r0, r5
 801346a:	bd38      	pop	{r3, r4, r5, pc}
 801346c:	2100      	movs	r1, #0
 801346e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8013472:	f000 fe6b 	bl	801414c <uxr_init_framing_io>
 8013476:	e7e7      	b.n	8013448 <uxr_init_custom_transport+0x2c>
 8013478:	0801331d 	.word	0x0801331d
 801347c:	080133b5 	.word	0x080133b5
 8013480:	08013311 	.word	0x08013311

08013484 <uxr_close_custom_transport>:
 8013484:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8013488:	4718      	bx	r3
 801348a:	bf00      	nop

0801348c <uxr_init_input_best_effort_stream>:
 801348c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013490:	8003      	strh	r3, [r0, #0]
 8013492:	4770      	bx	lr

08013494 <uxr_reset_input_best_effort_stream>:
 8013494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013498:	8003      	strh	r3, [r0, #0]
 801349a:	4770      	bx	lr

0801349c <uxr_receive_best_effort_message>:
 801349c:	b538      	push	{r3, r4, r5, lr}
 801349e:	4604      	mov	r4, r0
 80134a0:	8800      	ldrh	r0, [r0, #0]
 80134a2:	460d      	mov	r5, r1
 80134a4:	f000 fe3a 	bl	801411c <uxr_seq_num_cmp>
 80134a8:	4603      	mov	r3, r0
 80134aa:	0fc0      	lsrs	r0, r0, #31
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	bfb8      	it	lt
 80134b0:	8025      	strhlt	r5, [r4, #0]
 80134b2:	bd38      	pop	{r3, r4, r5, pc}

080134b4 <on_full_input_buffer>:
 80134b4:	b570      	push	{r4, r5, r6, lr}
 80134b6:	460c      	mov	r4, r1
 80134b8:	4605      	mov	r5, r0
 80134ba:	8908      	ldrh	r0, [r1, #8]
 80134bc:	682b      	ldr	r3, [r5, #0]
 80134be:	7d26      	ldrb	r6, [r4, #20]
 80134c0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80134c4:	fbb2 f2f0 	udiv	r2, r2, r0
 80134c8:	eba3 0c01 	sub.w	ip, r3, r1
 80134cc:	fbbc fcf2 	udiv	ip, ip, r2
 80134d0:	f10c 0c01 	add.w	ip, ip, #1
 80134d4:	fa1f f38c 	uxth.w	r3, ip
 80134d8:	fbb3 fcf0 	udiv	ip, r3, r0
 80134dc:	fb00 331c 	mls	r3, r0, ip, r3
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	fb02 f303 	mul.w	r3, r2, r3
 80134e6:	1d18      	adds	r0, r3, #4
 80134e8:	4408      	add	r0, r1
 80134ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80134ee:	b116      	cbz	r6, 80134f6 <on_full_input_buffer+0x42>
 80134f0:	2600      	movs	r6, #0
 80134f2:	f840 6c04 	str.w	r6, [r0, #-4]
 80134f6:	2a03      	cmp	r2, #3
 80134f8:	d801      	bhi.n	80134fe <on_full_input_buffer+0x4a>
 80134fa:	2001      	movs	r0, #1
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
 80134fe:	3308      	adds	r3, #8
 8013500:	4628      	mov	r0, r5
 8013502:	3a04      	subs	r2, #4
 8013504:	4419      	add	r1, r3
 8013506:	692b      	ldr	r3, [r5, #16]
 8013508:	f7fa ff2e 	bl	800e368 <ucdr_init_buffer_origin>
 801350c:	4628      	mov	r0, r5
 801350e:	4622      	mov	r2, r4
 8013510:	4902      	ldr	r1, [pc, #8]	; (801351c <on_full_input_buffer+0x68>)
 8013512:	f7fa ff05 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 8013516:	2000      	movs	r0, #0
 8013518:	bd70      	pop	{r4, r5, r6, pc}
 801351a:	bf00      	nop
 801351c:	080134b5 	.word	0x080134b5

08013520 <uxr_init_input_reliable_stream>:
 8013520:	b510      	push	{r4, lr}
 8013522:	e9c0 1200 	strd	r1, r2, [r0]
 8013526:	2400      	movs	r4, #0
 8013528:	9a02      	ldr	r2, [sp, #8]
 801352a:	8103      	strh	r3, [r0, #8]
 801352c:	6102      	str	r2, [r0, #16]
 801352e:	7504      	strb	r4, [r0, #20]
 8013530:	b1c3      	cbz	r3, 8013564 <uxr_init_input_reliable_stream+0x44>
 8013532:	600c      	str	r4, [r1, #0]
 8013534:	8901      	ldrh	r1, [r0, #8]
 8013536:	2901      	cmp	r1, #1
 8013538:	d914      	bls.n	8013564 <uxr_init_input_reliable_stream+0x44>
 801353a:	f04f 0c01 	mov.w	ip, #1
 801353e:	6843      	ldr	r3, [r0, #4]
 8013540:	f10c 0e01 	add.w	lr, ip, #1
 8013544:	fbbc f2f1 	udiv	r2, ip, r1
 8013548:	fbb3 f3f1 	udiv	r3, r3, r1
 801354c:	fb01 c212 	mls	r2, r1, r2, ip
 8013550:	fa1f fc8e 	uxth.w	ip, lr
 8013554:	b292      	uxth	r2, r2
 8013556:	fb02 f303 	mul.w	r3, r2, r3
 801355a:	6802      	ldr	r2, [r0, #0]
 801355c:	50d4      	str	r4, [r2, r3]
 801355e:	8901      	ldrh	r1, [r0, #8]
 8013560:	4561      	cmp	r1, ip
 8013562:	d8ec      	bhi.n	801353e <uxr_init_input_reliable_stream+0x1e>
 8013564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013568:	60c3      	str	r3, [r0, #12]
 801356a:	bd10      	pop	{r4, pc}

0801356c <uxr_reset_input_reliable_stream>:
 801356c:	8901      	ldrh	r1, [r0, #8]
 801356e:	b1d9      	cbz	r1, 80135a8 <uxr_reset_input_reliable_stream+0x3c>
 8013570:	b510      	push	{r4, lr}
 8013572:	f04f 0e00 	mov.w	lr, #0
 8013576:	46f4      	mov	ip, lr
 8013578:	4674      	mov	r4, lr
 801357a:	6843      	ldr	r3, [r0, #4]
 801357c:	f10e 0e01 	add.w	lr, lr, #1
 8013580:	fbbc f2f1 	udiv	r2, ip, r1
 8013584:	fbb3 f3f1 	udiv	r3, r3, r1
 8013588:	fb01 c212 	mls	r2, r1, r2, ip
 801358c:	fa1f fc8e 	uxth.w	ip, lr
 8013590:	b292      	uxth	r2, r2
 8013592:	fb02 f303 	mul.w	r3, r2, r3
 8013596:	6802      	ldr	r2, [r0, #0]
 8013598:	50d4      	str	r4, [r2, r3]
 801359a:	8901      	ldrh	r1, [r0, #8]
 801359c:	4561      	cmp	r1, ip
 801359e:	d8ec      	bhi.n	801357a <uxr_reset_input_reliable_stream+0xe>
 80135a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135a4:	60c3      	str	r3, [r0, #12]
 80135a6:	bd10      	pop	{r4, pc}
 80135a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135ac:	60c3      	str	r3, [r0, #12]
 80135ae:	4770      	bx	lr

080135b0 <uxr_receive_reliable_message>:
 80135b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135b4:	4604      	mov	r4, r0
 80135b6:	460d      	mov	r5, r1
 80135b8:	8901      	ldrh	r1, [r0, #8]
 80135ba:	4617      	mov	r7, r2
 80135bc:	8980      	ldrh	r0, [r0, #12]
 80135be:	4698      	mov	r8, r3
 80135c0:	f000 fda4 	bl	801410c <uxr_seq_num_add>
 80135c4:	4629      	mov	r1, r5
 80135c6:	4606      	mov	r6, r0
 80135c8:	89a0      	ldrh	r0, [r4, #12]
 80135ca:	f000 fda7 	bl	801411c <uxr_seq_num_cmp>
 80135ce:	2800      	cmp	r0, #0
 80135d0:	db0a      	blt.n	80135e8 <uxr_receive_reliable_message+0x38>
 80135d2:	2600      	movs	r6, #0
 80135d4:	4629      	mov	r1, r5
 80135d6:	89e0      	ldrh	r0, [r4, #14]
 80135d8:	f000 fda0 	bl	801411c <uxr_seq_num_cmp>
 80135dc:	2800      	cmp	r0, #0
 80135de:	da00      	bge.n	80135e2 <uxr_receive_reliable_message+0x32>
 80135e0:	81e5      	strh	r5, [r4, #14]
 80135e2:	4630      	mov	r0, r6
 80135e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135e8:	4630      	mov	r0, r6
 80135ea:	4629      	mov	r1, r5
 80135ec:	f000 fd96 	bl	801411c <uxr_seq_num_cmp>
 80135f0:	2800      	cmp	r0, #0
 80135f2:	dbee      	blt.n	80135d2 <uxr_receive_reliable_message+0x22>
 80135f4:	6923      	ldr	r3, [r4, #16]
 80135f6:	4638      	mov	r0, r7
 80135f8:	4798      	blx	r3
 80135fa:	4681      	mov	r9, r0
 80135fc:	2101      	movs	r1, #1
 80135fe:	89a0      	ldrh	r0, [r4, #12]
 8013600:	f000 fd84 	bl	801410c <uxr_seq_num_add>
 8013604:	f1b9 0f00 	cmp.w	r9, #0
 8013608:	bf08      	it	eq
 801360a:	4285      	cmpeq	r5, r0
 801360c:	bf0c      	ite	eq
 801360e:	2601      	moveq	r6, #1
 8013610:	2600      	movne	r6, #0
 8013612:	d104      	bne.n	801361e <uxr_receive_reliable_message+0x6e>
 8013614:	2300      	movs	r3, #0
 8013616:	9a08      	ldr	r2, [sp, #32]
 8013618:	81a0      	strh	r0, [r4, #12]
 801361a:	7013      	strb	r3, [r2, #0]
 801361c:	e7da      	b.n	80135d4 <uxr_receive_reliable_message+0x24>
 801361e:	8922      	ldrh	r2, [r4, #8]
 8013620:	6863      	ldr	r3, [r4, #4]
 8013622:	fbb5 f0f2 	udiv	r0, r5, r2
 8013626:	fbb3 f3f2 	udiv	r3, r3, r2
 801362a:	fb02 5010 	mls	r0, r2, r0, r5
 801362e:	b280      	uxth	r0, r0
 8013630:	fb03 f000 	mul.w	r0, r3, r0
 8013634:	6823      	ldr	r3, [r4, #0]
 8013636:	3004      	adds	r0, #4
 8013638:	4418      	add	r0, r3
 801363a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d1c7      	bne.n	80135d2 <uxr_receive_reliable_message+0x22>
 8013642:	4639      	mov	r1, r7
 8013644:	4642      	mov	r2, r8
 8013646:	f002 fb3e 	bl	8015cc6 <memcpy>
 801364a:	8921      	ldrh	r1, [r4, #8]
 801364c:	6863      	ldr	r3, [r4, #4]
 801364e:	fbb5 f2f1 	udiv	r2, r5, r1
 8013652:	fbb3 f3f1 	udiv	r3, r3, r1
 8013656:	fb01 5212 	mls	r2, r1, r2, r5
 801365a:	b292      	uxth	r2, r2
 801365c:	fb02 f303 	mul.w	r3, r2, r3
 8013660:	6822      	ldr	r2, [r4, #0]
 8013662:	f842 8003 	str.w	r8, [r2, r3]
 8013666:	2301      	movs	r3, #1
 8013668:	9a08      	ldr	r2, [sp, #32]
 801366a:	7013      	strb	r3, [r2, #0]
 801366c:	f1b9 0f00 	cmp.w	r9, #0
 8013670:	d0af      	beq.n	80135d2 <uxr_receive_reliable_message+0x22>
 8013672:	89a6      	ldrh	r6, [r4, #12]
 8013674:	2101      	movs	r1, #1
 8013676:	4630      	mov	r0, r6
 8013678:	f000 fd48 	bl	801410c <uxr_seq_num_add>
 801367c:	8921      	ldrh	r1, [r4, #8]
 801367e:	6863      	ldr	r3, [r4, #4]
 8013680:	4606      	mov	r6, r0
 8013682:	fbb0 f2f1 	udiv	r2, r0, r1
 8013686:	fbb3 f3f1 	udiv	r3, r3, r1
 801368a:	fb01 0212 	mls	r2, r1, r2, r0
 801368e:	6820      	ldr	r0, [r4, #0]
 8013690:	b292      	uxth	r2, r2
 8013692:	fb02 f303 	mul.w	r3, r2, r3
 8013696:	3304      	adds	r3, #4
 8013698:	4418      	add	r0, r3
 801369a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d097      	beq.n	80135d2 <uxr_receive_reliable_message+0x22>
 80136a2:	6923      	ldr	r3, [r4, #16]
 80136a4:	4798      	blx	r3
 80136a6:	2802      	cmp	r0, #2
 80136a8:	d002      	beq.n	80136b0 <uxr_receive_reliable_message+0x100>
 80136aa:	2801      	cmp	r0, #1
 80136ac:	d0e2      	beq.n	8013674 <uxr_receive_reliable_message+0xc4>
 80136ae:	e790      	b.n	80135d2 <uxr_receive_reliable_message+0x22>
 80136b0:	2601      	movs	r6, #1
 80136b2:	e78f      	b.n	80135d4 <uxr_receive_reliable_message+0x24>

080136b4 <uxr_next_input_reliable_buffer_available>:
 80136b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136b8:	4604      	mov	r4, r0
 80136ba:	460f      	mov	r7, r1
 80136bc:	8980      	ldrh	r0, [r0, #12]
 80136be:	2101      	movs	r1, #1
 80136c0:	4690      	mov	r8, r2
 80136c2:	f000 fd23 	bl	801410c <uxr_seq_num_add>
 80136c6:	8922      	ldrh	r2, [r4, #8]
 80136c8:	6866      	ldr	r6, [r4, #4]
 80136ca:	fbb0 f3f2 	udiv	r3, r0, r2
 80136ce:	fbb6 f6f2 	udiv	r6, r6, r2
 80136d2:	fb02 0313 	mls	r3, r2, r3, r0
 80136d6:	b29b      	uxth	r3, r3
 80136d8:	fb03 f606 	mul.w	r6, r3, r6
 80136dc:	6823      	ldr	r3, [r4, #0]
 80136de:	3604      	adds	r6, #4
 80136e0:	441e      	add	r6, r3
 80136e2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80136e6:	f1b9 0f00 	cmp.w	r9, #0
 80136ea:	d023      	beq.n	8013734 <uxr_next_input_reliable_buffer_available+0x80>
 80136ec:	4605      	mov	r5, r0
 80136ee:	6923      	ldr	r3, [r4, #16]
 80136f0:	4630      	mov	r0, r6
 80136f2:	4798      	blx	r3
 80136f4:	4682      	mov	sl, r0
 80136f6:	b300      	cbz	r0, 801373a <uxr_next_input_reliable_buffer_available+0x86>
 80136f8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80136fc:	2101      	movs	r1, #1
 80136fe:	4650      	mov	r0, sl
 8013700:	f000 fd04 	bl	801410c <uxr_seq_num_add>
 8013704:	8921      	ldrh	r1, [r4, #8]
 8013706:	4682      	mov	sl, r0
 8013708:	6863      	ldr	r3, [r4, #4]
 801370a:	6820      	ldr	r0, [r4, #0]
 801370c:	fbba f2f1 	udiv	r2, sl, r1
 8013710:	fbb3 f3f1 	udiv	r3, r3, r1
 8013714:	fb01 a212 	mls	r2, r1, r2, sl
 8013718:	b292      	uxth	r2, r2
 801371a:	fb02 f303 	mul.w	r3, r2, r3
 801371e:	3304      	adds	r3, #4
 8013720:	4418      	add	r0, r3
 8013722:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013726:	b12b      	cbz	r3, 8013734 <uxr_next_input_reliable_buffer_available+0x80>
 8013728:	6923      	ldr	r3, [r4, #16]
 801372a:	4798      	blx	r3
 801372c:	2802      	cmp	r0, #2
 801372e:	d01b      	beq.n	8013768 <uxr_next_input_reliable_buffer_available+0xb4>
 8013730:	2801      	cmp	r0, #1
 8013732:	d0e3      	beq.n	80136fc <uxr_next_input_reliable_buffer_available+0x48>
 8013734:	2000      	movs	r0, #0
 8013736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801373a:	464a      	mov	r2, r9
 801373c:	4631      	mov	r1, r6
 801373e:	4638      	mov	r0, r7
 8013740:	f7fa fe1a 	bl	800e378 <ucdr_init_buffer>
 8013744:	8921      	ldrh	r1, [r4, #8]
 8013746:	6863      	ldr	r3, [r4, #4]
 8013748:	2001      	movs	r0, #1
 801374a:	fbb5 f2f1 	udiv	r2, r5, r1
 801374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013752:	fb01 5212 	mls	r2, r1, r2, r5
 8013756:	b292      	uxth	r2, r2
 8013758:	fb02 f303 	mul.w	r3, r2, r3
 801375c:	6822      	ldr	r2, [r4, #0]
 801375e:	f842 a003 	str.w	sl, [r2, r3]
 8013762:	81a5      	strh	r5, [r4, #12]
 8013764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013768:	8920      	ldrh	r0, [r4, #8]
 801376a:	eb06 0108 	add.w	r1, r6, r8
 801376e:	6863      	ldr	r3, [r4, #4]
 8013770:	eba9 0208 	sub.w	r2, r9, r8
 8013774:	fbb5 f6f0 	udiv	r6, r5, r0
 8013778:	fbb3 f3f0 	udiv	r3, r3, r0
 801377c:	fb00 5516 	mls	r5, r0, r6, r5
 8013780:	2000      	movs	r0, #0
 8013782:	b2ad      	uxth	r5, r5
 8013784:	fb03 f505 	mul.w	r5, r3, r5
 8013788:	6823      	ldr	r3, [r4, #0]
 801378a:	5158      	str	r0, [r3, r5]
 801378c:	4638      	mov	r0, r7
 801378e:	f7fa fdf3 	bl	800e378 <ucdr_init_buffer>
 8013792:	4638      	mov	r0, r7
 8013794:	4622      	mov	r2, r4
 8013796:	4903      	ldr	r1, [pc, #12]	; (80137a4 <uxr_next_input_reliable_buffer_available+0xf0>)
 8013798:	f7fa fdc2 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 801379c:	2001      	movs	r0, #1
 801379e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80137a2:	e7c8      	b.n	8013736 <uxr_next_input_reliable_buffer_available+0x82>
 80137a4:	080134b5 	.word	0x080134b5

080137a8 <uxr_process_heartbeat>:
 80137a8:	b538      	push	{r3, r4, r5, lr}
 80137aa:	4611      	mov	r1, r2
 80137ac:	4604      	mov	r4, r0
 80137ae:	89c0      	ldrh	r0, [r0, #14]
 80137b0:	4615      	mov	r5, r2
 80137b2:	f000 fcb3 	bl	801411c <uxr_seq_num_cmp>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	bfb8      	it	lt
 80137ba:	81e5      	strhlt	r5, [r4, #14]
 80137bc:	bd38      	pop	{r3, r4, r5, pc}
 80137be:	bf00      	nop

080137c0 <uxr_compute_acknack>:
 80137c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137c4:	8903      	ldrh	r3, [r0, #8]
 80137c6:	4604      	mov	r4, r0
 80137c8:	460f      	mov	r7, r1
 80137ca:	8985      	ldrh	r5, [r0, #12]
 80137cc:	b1db      	cbz	r3, 8013806 <uxr_compute_acknack+0x46>
 80137ce:	4628      	mov	r0, r5
 80137d0:	2601      	movs	r6, #1
 80137d2:	e004      	b.n	80137de <uxr_compute_acknack+0x1e>
 80137d4:	4566      	cmp	r6, ip
 80137d6:	f106 0601 	add.w	r6, r6, #1
 80137da:	d214      	bcs.n	8013806 <uxr_compute_acknack+0x46>
 80137dc:	89a0      	ldrh	r0, [r4, #12]
 80137de:	b2b1      	uxth	r1, r6
 80137e0:	f000 fc94 	bl	801410c <uxr_seq_num_add>
 80137e4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80137e8:	fbb0 f2fc 	udiv	r2, r0, ip
 80137ec:	e9d4 1300 	ldrd	r1, r3, [r4]
 80137f0:	fb0c 0212 	mls	r2, ip, r2, r0
 80137f4:	fbb3 f3fc 	udiv	r3, r3, ip
 80137f8:	b292      	uxth	r2, r2
 80137fa:	fb02 f303 	mul.w	r3, r2, r3
 80137fe:	58cb      	ldr	r3, [r1, r3]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d1e7      	bne.n	80137d4 <uxr_compute_acknack+0x14>
 8013804:	4605      	mov	r5, r0
 8013806:	803d      	strh	r5, [r7, #0]
 8013808:	2101      	movs	r1, #1
 801380a:	89e6      	ldrh	r6, [r4, #14]
 801380c:	4628      	mov	r0, r5
 801380e:	f000 fc81 	bl	8014114 <uxr_seq_num_sub>
 8013812:	4601      	mov	r1, r0
 8013814:	4630      	mov	r0, r6
 8013816:	f000 fc7d 	bl	8014114 <uxr_seq_num_sub>
 801381a:	4606      	mov	r6, r0
 801381c:	b328      	cbz	r0, 801386a <uxr_compute_acknack+0xaa>
 801381e:	f04f 0900 	mov.w	r9, #0
 8013822:	f04f 0801 	mov.w	r8, #1
 8013826:	464d      	mov	r5, r9
 8013828:	fa1f f189 	uxth.w	r1, r9
 801382c:	8838      	ldrh	r0, [r7, #0]
 801382e:	f000 fc6d 	bl	801410c <uxr_seq_num_add>
 8013832:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013836:	6861      	ldr	r1, [r4, #4]
 8013838:	fa08 fe09 	lsl.w	lr, r8, r9
 801383c:	6822      	ldr	r2, [r4, #0]
 801383e:	f109 0901 	add.w	r9, r9, #1
 8013842:	ea4e 0e05 	orr.w	lr, lr, r5
 8013846:	fbb0 f3fc 	udiv	r3, r0, ip
 801384a:	fbb1 f1fc 	udiv	r1, r1, ip
 801384e:	fb03 001c 	mls	r0, r3, ip, r0
 8013852:	b283      	uxth	r3, r0
 8013854:	fb01 f303 	mul.w	r3, r1, r3
 8013858:	58d3      	ldr	r3, [r2, r3]
 801385a:	b90b      	cbnz	r3, 8013860 <uxr_compute_acknack+0xa0>
 801385c:	fa1f f58e 	uxth.w	r5, lr
 8013860:	454e      	cmp	r6, r9
 8013862:	d1e1      	bne.n	8013828 <uxr_compute_acknack+0x68>
 8013864:	4628      	mov	r0, r5
 8013866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801386a:	4605      	mov	r5, r0
 801386c:	4628      	mov	r0, r5
 801386e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013872:	bf00      	nop

08013874 <uxr_init_output_best_effort_stream>:
 8013874:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8013878:	6001      	str	r1, [r0, #0]
 801387a:	7303      	strb	r3, [r0, #12]
 801387c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8013880:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8013884:	4770      	bx	lr
 8013886:	bf00      	nop

08013888 <uxr_reset_output_best_effort_stream>:
 8013888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801388c:	7b03      	ldrb	r3, [r0, #12]
 801388e:	81c2      	strh	r2, [r0, #14]
 8013890:	6043      	str	r3, [r0, #4]
 8013892:	4770      	bx	lr

08013894 <uxr_prepare_best_effort_buffer_to_write>:
 8013894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013896:	4604      	mov	r4, r0
 8013898:	b083      	sub	sp, #12
 801389a:	6840      	ldr	r0, [r0, #4]
 801389c:	460d      	mov	r5, r1
 801389e:	4616      	mov	r6, r2
 80138a0:	f7fc f944 	bl	800fb2c <uxr_submessage_padding>
 80138a4:	6863      	ldr	r3, [r4, #4]
 80138a6:	4418      	add	r0, r3
 80138a8:	68a3      	ldr	r3, [r4, #8]
 80138aa:	1942      	adds	r2, r0, r5
 80138ac:	4293      	cmp	r3, r2
 80138ae:	bf2c      	ite	cs
 80138b0:	2701      	movcs	r7, #1
 80138b2:	2700      	movcc	r7, #0
 80138b4:	d202      	bcs.n	80138bc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80138b6:	4638      	mov	r0, r7
 80138b8:	b003      	add	sp, #12
 80138ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138bc:	9000      	str	r0, [sp, #0]
 80138be:	2300      	movs	r3, #0
 80138c0:	4630      	mov	r0, r6
 80138c2:	6821      	ldr	r1, [r4, #0]
 80138c4:	f7fa fd46 	bl	800e354 <ucdr_init_buffer_origin_offset>
 80138c8:	6861      	ldr	r1, [r4, #4]
 80138ca:	4638      	mov	r0, r7
 80138cc:	4429      	add	r1, r5
 80138ce:	6061      	str	r1, [r4, #4]
 80138d0:	b003      	add	sp, #12
 80138d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080138d4 <uxr_prepare_best_effort_buffer_to_send>:
 80138d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d8:	4604      	mov	r4, r0
 80138da:	461d      	mov	r5, r3
 80138dc:	6840      	ldr	r0, [r0, #4]
 80138de:	7b23      	ldrb	r3, [r4, #12]
 80138e0:	4298      	cmp	r0, r3
 80138e2:	bf8c      	ite	hi
 80138e4:	2601      	movhi	r6, #1
 80138e6:	2600      	movls	r6, #0
 80138e8:	d802      	bhi.n	80138f0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80138ea:	4630      	mov	r0, r6
 80138ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f0:	4688      	mov	r8, r1
 80138f2:	89e0      	ldrh	r0, [r4, #14]
 80138f4:	2101      	movs	r1, #1
 80138f6:	4617      	mov	r7, r2
 80138f8:	f000 fc08 	bl	801410c <uxr_seq_num_add>
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	81e0      	strh	r0, [r4, #14]
 8013900:	8028      	strh	r0, [r5, #0]
 8013902:	4630      	mov	r0, r6
 8013904:	f8c8 3000 	str.w	r3, [r8]
 8013908:	6863      	ldr	r3, [r4, #4]
 801390a:	603b      	str	r3, [r7, #0]
 801390c:	7b23      	ldrb	r3, [r4, #12]
 801390e:	6063      	str	r3, [r4, #4]
 8013910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013914 <on_full_output_buffer>:
 8013914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013916:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801391a:	460c      	mov	r4, r1
 801391c:	6803      	ldr	r3, [r0, #0]
 801391e:	4605      	mov	r5, r0
 8013920:	7b26      	ldrb	r6, [r4, #12]
 8013922:	e9d1 1200 	ldrd	r1, r2, [r1]
 8013926:	fbb2 f2fc 	udiv	r2, r2, ip
 801392a:	eba3 0e01 	sub.w	lr, r3, r1
 801392e:	6903      	ldr	r3, [r0, #16]
 8013930:	fbbe fef2 	udiv	lr, lr, r2
 8013934:	f10e 0e01 	add.w	lr, lr, #1
 8013938:	fa1f fe8e 	uxth.w	lr, lr
 801393c:	fbbe f7fc 	udiv	r7, lr, ip
 8013940:	fb0c ec17 	mls	ip, ip, r7, lr
 8013944:	fa1f fc8c 	uxth.w	ip, ip
 8013948:	fb02 fc0c 	mul.w	ip, r2, ip
 801394c:	f851 200c 	ldr.w	r2, [r1, ip]
 8013950:	44b4      	add	ip, r6
 8013952:	1b92      	subs	r2, r2, r6
 8013954:	f10c 0c08 	add.w	ip, ip, #8
 8013958:	3a04      	subs	r2, #4
 801395a:	4461      	add	r1, ip
 801395c:	f7fa fd04 	bl	800e368 <ucdr_init_buffer_origin>
 8013960:	4628      	mov	r0, r5
 8013962:	4622      	mov	r2, r4
 8013964:	4902      	ldr	r1, [pc, #8]	; (8013970 <on_full_output_buffer+0x5c>)
 8013966:	f7fa fcdb 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 801396a:	2000      	movs	r0, #0
 801396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801396e:	bf00      	nop
 8013970:	08013915 	.word	0x08013915

08013974 <uxr_init_output_reliable_stream>:
 8013974:	b530      	push	{r4, r5, lr}
 8013976:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801397a:	8103      	strh	r3, [r0, #8]
 801397c:	7304      	strb	r4, [r0, #12]
 801397e:	e9c0 1200 	strd	r1, r2, [r0]
 8013982:	b1e3      	cbz	r3, 80139be <uxr_init_output_reliable_stream+0x4a>
 8013984:	600c      	str	r4, [r1, #0]
 8013986:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801398a:	f1bc 0f01 	cmp.w	ip, #1
 801398e:	d916      	bls.n	80139be <uxr_init_output_reliable_stream+0x4a>
 8013990:	f04f 0e01 	mov.w	lr, #1
 8013994:	6843      	ldr	r3, [r0, #4]
 8013996:	f10e 0501 	add.w	r5, lr, #1
 801399a:	7b04      	ldrb	r4, [r0, #12]
 801399c:	6801      	ldr	r1, [r0, #0]
 801399e:	fbbe f2fc 	udiv	r2, lr, ip
 80139a2:	fbb3 f3fc 	udiv	r3, r3, ip
 80139a6:	fb0c e212 	mls	r2, ip, r2, lr
 80139aa:	fa1f fe85 	uxth.w	lr, r5
 80139ae:	b292      	uxth	r2, r2
 80139b0:	fb02 f303 	mul.w	r3, r2, r3
 80139b4:	50cc      	str	r4, [r1, r3]
 80139b6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80139ba:	45f4      	cmp	ip, lr
 80139bc:	d8ea      	bhi.n	8013994 <uxr_init_output_reliable_stream+0x20>
 80139be:	4b07      	ldr	r3, [pc, #28]	; (80139dc <uxr_init_output_reliable_stream+0x68>)
 80139c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80139c8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80139cc:	f8c0 300e 	str.w	r3, [r0, #14]
 80139d0:	2300      	movs	r3, #0
 80139d2:	8242      	strh	r2, [r0, #18]
 80139d4:	8403      	strh	r3, [r0, #32]
 80139d6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80139da:	bd30      	pop	{r4, r5, pc}
 80139dc:	ffff0000 	.word	0xffff0000

080139e0 <uxr_reset_output_reliable_stream>:
 80139e0:	8901      	ldrh	r1, [r0, #8]
 80139e2:	b510      	push	{r4, lr}
 80139e4:	b1b1      	cbz	r1, 8013a14 <uxr_reset_output_reliable_stream+0x34>
 80139e6:	f04f 0e00 	mov.w	lr, #0
 80139ea:	46f4      	mov	ip, lr
 80139ec:	6843      	ldr	r3, [r0, #4]
 80139ee:	f10e 0e01 	add.w	lr, lr, #1
 80139f2:	7b04      	ldrb	r4, [r0, #12]
 80139f4:	fbbc f2f1 	udiv	r2, ip, r1
 80139f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80139fc:	fb01 c212 	mls	r2, r1, r2, ip
 8013a00:	fa1f fc8e 	uxth.w	ip, lr
 8013a04:	b292      	uxth	r2, r2
 8013a06:	fb02 f303 	mul.w	r3, r2, r3
 8013a0a:	6802      	ldr	r2, [r0, #0]
 8013a0c:	50d4      	str	r4, [r2, r3]
 8013a0e:	8901      	ldrh	r1, [r0, #8]
 8013a10:	4561      	cmp	r1, ip
 8013a12:	d8eb      	bhi.n	80139ec <uxr_reset_output_reliable_stream+0xc>
 8013a14:	4b08      	ldr	r3, [pc, #32]	; (8013a38 <uxr_reset_output_reliable_stream+0x58>)
 8013a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a1a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8013a30 <uxr_reset_output_reliable_stream+0x50>
 8013a1e:	f8c0 300e 	str.w	r3, [r0, #14]
 8013a22:	2300      	movs	r3, #0
 8013a24:	8242      	strh	r2, [r0, #18]
 8013a26:	8403      	strh	r3, [r0, #32]
 8013a28:	ed80 7b06 	vstr	d7, [r0, #24]
 8013a2c:	bd10      	pop	{r4, pc}
 8013a2e:	bf00      	nop
 8013a30:	ffffffff 	.word	0xffffffff
 8013a34:	7fffffff 	.word	0x7fffffff
 8013a38:	ffff0000 	.word	0xffff0000

08013a3c <uxr_prepare_reliable_buffer_to_write>:
 8013a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a40:	4604      	mov	r4, r0
 8013a42:	b091      	sub	sp, #68	; 0x44
 8013a44:	8900      	ldrh	r0, [r0, #8]
 8013a46:	468b      	mov	fp, r1
 8013a48:	89e6      	ldrh	r6, [r4, #14]
 8013a4a:	9204      	str	r2, [sp, #16]
 8013a4c:	6865      	ldr	r5, [r4, #4]
 8013a4e:	6823      	ldr	r3, [r4, #0]
 8013a50:	f894 900c 	ldrb.w	r9, [r4, #12]
 8013a54:	fbb6 f2f0 	udiv	r2, r6, r0
 8013a58:	fbb5 f5f0 	udiv	r5, r5, r0
 8013a5c:	fb00 6212 	mls	r2, r0, r2, r6
 8013a60:	1f2f      	subs	r7, r5, #4
 8013a62:	b292      	uxth	r2, r2
 8013a64:	fb05 3202 	mla	r2, r5, r2, r3
 8013a68:	1d11      	adds	r1, r2, #4
 8013a6a:	f8d2 8000 	ldr.w	r8, [r2]
 8013a6e:	9103      	str	r1, [sp, #12]
 8013a70:	2800      	cmp	r0, #0
 8013a72:	f000 814a 	beq.w	8013d0a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8013a76:	f04f 0c00 	mov.w	ip, #0
 8013a7a:	46e2      	mov	sl, ip
 8013a7c:	4661      	mov	r1, ip
 8013a7e:	f10c 0c01 	add.w	ip, ip, #1
 8013a82:	fbb1 f2f0 	udiv	r2, r1, r0
 8013a86:	fb00 1212 	mls	r2, r0, r2, r1
 8013a8a:	fa1f f18c 	uxth.w	r1, ip
 8013a8e:	b292      	uxth	r2, r2
 8013a90:	fb05 f202 	mul.w	r2, r5, r2
 8013a94:	589a      	ldr	r2, [r3, r2]
 8013a96:	454a      	cmp	r2, r9
 8013a98:	d103      	bne.n	8013aa2 <uxr_prepare_reliable_buffer_to_write+0x66>
 8013a9a:	f10a 0a01 	add.w	sl, sl, #1
 8013a9e:	fa1f fa8a 	uxth.w	sl, sl
 8013aa2:	4281      	cmp	r1, r0
 8013aa4:	d3eb      	bcc.n	8013a7e <uxr_prepare_reliable_buffer_to_write+0x42>
 8013aa6:	4640      	mov	r0, r8
 8013aa8:	2104      	movs	r1, #4
 8013aaa:	f8cd a014 	str.w	sl, [sp, #20]
 8013aae:	f7fa fc67 	bl	800e380 <ucdr_alignment>
 8013ab2:	4480      	add	r8, r0
 8013ab4:	eb08 020b 	add.w	r2, r8, fp
 8013ab8:	42ba      	cmp	r2, r7
 8013aba:	f240 80ca 	bls.w	8013c52 <uxr_prepare_reliable_buffer_to_write+0x216>
 8013abe:	7b22      	ldrb	r2, [r4, #12]
 8013ac0:	445a      	add	r2, fp
 8013ac2:	42ba      	cmp	r2, r7
 8013ac4:	f240 80b2 	bls.w	8013c2c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8013ac8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013acc:	b2bb      	uxth	r3, r7
 8013ace:	eba2 0209 	sub.w	r2, r2, r9
 8013ad2:	441a      	add	r2, r3
 8013ad4:	b292      	uxth	r2, r2
 8013ad6:	fb0a f902 	mul.w	r9, sl, r2
 8013ada:	9205      	str	r2, [sp, #20]
 8013adc:	45d9      	cmp	r9, fp
 8013ade:	9206      	str	r2, [sp, #24]
 8013ae0:	f0c0 80b3 	bcc.w	8013c4a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8013ae4:	f108 0204 	add.w	r2, r8, #4
 8013ae8:	42ba      	cmp	r2, r7
 8013aea:	f080 80da 	bcs.w	8013ca2 <uxr_prepare_reliable_buffer_to_write+0x266>
 8013aee:	f1a3 0904 	sub.w	r9, r3, #4
 8013af2:	9b05      	ldr	r3, [sp, #20]
 8013af4:	eba9 0908 	sub.w	r9, r9, r8
 8013af8:	fa1f f989 	uxth.w	r9, r9
 8013afc:	ebab 0b09 	sub.w	fp, fp, r9
 8013b00:	fbbb f2f3 	udiv	r2, fp, r3
 8013b04:	fb03 b312 	mls	r3, r3, r2, fp
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f040 80c4 	bne.w	8013c96 <uxr_prepare_reliable_buffer_to_write+0x25a>
 8013b0e:	b293      	uxth	r3, r2
 8013b10:	4553      	cmp	r3, sl
 8013b12:	f200 809a 	bhi.w	8013c4a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	f000 80f9 	beq.w	8013d0e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8013b1c:	f8cd 801c 	str.w	r8, [sp, #28]
 8013b20:	f04f 0a00 	mov.w	sl, #0
 8013b24:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013b28:	f10d 0b20 	add.w	fp, sp, #32
 8013b2c:	9505      	str	r5, [sp, #20]
 8013b2e:	461d      	mov	r5, r3
 8013b30:	e000      	b.n	8013b34 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8013b32:	46c1      	mov	r9, r8
 8013b34:	8922      	ldrh	r2, [r4, #8]
 8013b36:	4658      	mov	r0, fp
 8013b38:	6863      	ldr	r3, [r4, #4]
 8013b3a:	f10a 0a01 	add.w	sl, sl, #1
 8013b3e:	fbb6 f1f2 	udiv	r1, r6, r2
 8013b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b46:	fb02 6111 	mls	r1, r2, r1, r6
 8013b4a:	463a      	mov	r2, r7
 8013b4c:	b289      	uxth	r1, r1
 8013b4e:	fb03 f101 	mul.w	r1, r3, r1
 8013b52:	6823      	ldr	r3, [r4, #0]
 8013b54:	3104      	adds	r1, #4
 8013b56:	4419      	add	r1, r3
 8013b58:	2300      	movs	r3, #0
 8013b5a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8013b5e:	f8cd c000 	str.w	ip, [sp]
 8013b62:	f7fa fbf7 	bl	800e354 <ucdr_init_buffer_origin_offset>
 8013b66:	464a      	mov	r2, r9
 8013b68:	2300      	movs	r3, #0
 8013b6a:	210d      	movs	r1, #13
 8013b6c:	4658      	mov	r0, fp
 8013b6e:	f7fb ff9d 	bl	800faac <uxr_buffer_submessage_header>
 8013b72:	8921      	ldrh	r1, [r4, #8]
 8013b74:	6863      	ldr	r3, [r4, #4]
 8013b76:	4630      	mov	r0, r6
 8013b78:	fbb6 f2f1 	udiv	r2, r6, r1
 8013b7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b80:	fb01 6212 	mls	r2, r1, r2, r6
 8013b84:	2101      	movs	r1, #1
 8013b86:	b292      	uxth	r2, r2
 8013b88:	fb02 f303 	mul.w	r3, r2, r3
 8013b8c:	6822      	ldr	r2, [r4, #0]
 8013b8e:	50d7      	str	r7, [r2, r3]
 8013b90:	f000 fabc 	bl	801410c <uxr_seq_num_add>
 8013b94:	4606      	mov	r6, r0
 8013b96:	fa1f f38a 	uxth.w	r3, sl
 8013b9a:	429d      	cmp	r5, r3
 8013b9c:	d8c9      	bhi.n	8013b32 <uxr_prepare_reliable_buffer_to_write+0xf6>
 8013b9e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013ba2:	9d05      	ldr	r5, [sp, #20]
 8013ba4:	8920      	ldrh	r0, [r4, #8]
 8013ba6:	463a      	mov	r2, r7
 8013ba8:	6863      	ldr	r3, [r4, #4]
 8013baa:	fbb6 f1f0 	udiv	r1, r6, r0
 8013bae:	fbb3 f3f0 	udiv	r3, r3, r0
 8013bb2:	fb00 6111 	mls	r1, r0, r1, r6
 8013bb6:	4658      	mov	r0, fp
 8013bb8:	b289      	uxth	r1, r1
 8013bba:	fb01 f303 	mul.w	r3, r1, r3
 8013bbe:	6821      	ldr	r1, [r4, #0]
 8013bc0:	3304      	adds	r3, #4
 8013bc2:	4419      	add	r1, r3
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8013bca:	9700      	str	r7, [sp, #0]
 8013bcc:	f7fa fbc2 	bl	800e354 <ucdr_init_buffer_origin_offset>
 8013bd0:	9f06      	ldr	r7, [sp, #24]
 8013bd2:	4658      	mov	r0, fp
 8013bd4:	2302      	movs	r3, #2
 8013bd6:	b2ba      	uxth	r2, r7
 8013bd8:	210d      	movs	r1, #13
 8013bda:	f7fb ff67 	bl	800faac <uxr_buffer_submessage_header>
 8013bde:	f108 0104 	add.w	r1, r8, #4
 8013be2:	9b03      	ldr	r3, [sp, #12]
 8013be4:	f1a5 0208 	sub.w	r2, r5, #8
 8013be8:	8925      	ldrh	r5, [r4, #8]
 8013bea:	440b      	add	r3, r1
 8013bec:	eba2 0208 	sub.w	r2, r2, r8
 8013bf0:	fbb6 f0f5 	udiv	r0, r6, r5
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	6863      	ldr	r3, [r4, #4]
 8013bf8:	fb05 6010 	mls	r0, r5, r0, r6
 8013bfc:	fbb3 f3f5 	udiv	r3, r3, r5
 8013c00:	b280      	uxth	r0, r0
 8013c02:	6825      	ldr	r5, [r4, #0]
 8013c04:	fb00 f303 	mul.w	r3, r0, r3
 8013c08:	7b20      	ldrb	r0, [r4, #12]
 8013c0a:	3004      	adds	r0, #4
 8013c0c:	4438      	add	r0, r7
 8013c0e:	50e8      	str	r0, [r5, r3]
 8013c10:	9d04      	ldr	r5, [sp, #16]
 8013c12:	4628      	mov	r0, r5
 8013c14:	f7fa fbb0 	bl	800e378 <ucdr_init_buffer>
 8013c18:	4628      	mov	r0, r5
 8013c1a:	4622      	mov	r2, r4
 8013c1c:	493d      	ldr	r1, [pc, #244]	; (8013d14 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8013c1e:	f7fa fb7f 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 8013c22:	2001      	movs	r0, #1
 8013c24:	81e6      	strh	r6, [r4, #14]
 8013c26:	b011      	add	sp, #68	; 0x44
 8013c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c2c:	2101      	movs	r1, #1
 8013c2e:	89e0      	ldrh	r0, [r4, #14]
 8013c30:	f000 fa6c 	bl	801410c <uxr_seq_num_add>
 8013c34:	4605      	mov	r5, r0
 8013c36:	8921      	ldrh	r1, [r4, #8]
 8013c38:	8a60      	ldrh	r0, [r4, #18]
 8013c3a:	f000 fa67 	bl	801410c <uxr_seq_num_add>
 8013c3e:	4601      	mov	r1, r0
 8013c40:	4628      	mov	r0, r5
 8013c42:	f000 fa6b 	bl	801411c <uxr_seq_num_cmp>
 8013c46:	2800      	cmp	r0, #0
 8013c48:	dd44      	ble.n	8013cd4 <uxr_prepare_reliable_buffer_to_write+0x298>
 8013c4a:	2000      	movs	r0, #0
 8013c4c:	b011      	add	sp, #68	; 0x44
 8013c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c52:	8921      	ldrh	r1, [r4, #8]
 8013c54:	8a60      	ldrh	r0, [r4, #18]
 8013c56:	9205      	str	r2, [sp, #20]
 8013c58:	f000 fa58 	bl	801410c <uxr_seq_num_add>
 8013c5c:	4601      	mov	r1, r0
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f000 fa5c 	bl	801411c <uxr_seq_num_cmp>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	9a05      	ldr	r2, [sp, #20]
 8013c68:	dcef      	bgt.n	8013c4a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8013c6a:	8925      	ldrh	r5, [r4, #8]
 8013c6c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8013c70:	fbb6 f4f5 	udiv	r4, r6, r5
 8013c74:	fbb3 f3f5 	udiv	r3, r3, r5
 8013c78:	fb05 6414 	mls	r4, r5, r4, r6
 8013c7c:	b2a4      	uxth	r4, r4
 8013c7e:	fb04 f303 	mul.w	r3, r4, r3
 8013c82:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8013c86:	50fa      	str	r2, [r7, r3]
 8013c88:	2300      	movs	r3, #0
 8013c8a:	f8cd 8000 	str.w	r8, [sp]
 8013c8e:	f7fa fb61 	bl	800e354 <ucdr_init_buffer_origin_offset>
 8013c92:	2001      	movs	r0, #1
 8013c94:	e7da      	b.n	8013c4c <uxr_prepare_reliable_buffer_to_write+0x210>
 8013c96:	3201      	adds	r2, #1
 8013c98:	9306      	str	r3, [sp, #24]
 8013c9a:	b293      	uxth	r3, r2
 8013c9c:	4553      	cmp	r3, sl
 8013c9e:	d8d4      	bhi.n	8013c4a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8013ca0:	e739      	b.n	8013b16 <uxr_prepare_reliable_buffer_to_write+0xda>
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	2101      	movs	r1, #1
 8013ca6:	9307      	str	r3, [sp, #28]
 8013ca8:	f000 fa30 	bl	801410c <uxr_seq_num_add>
 8013cac:	4606      	mov	r6, r0
 8013cae:	8920      	ldrh	r0, [r4, #8]
 8013cb0:	6862      	ldr	r2, [r4, #4]
 8013cb2:	fbb6 f1f0 	udiv	r1, r6, r0
 8013cb6:	fbb2 f2f0 	udiv	r2, r2, r0
 8013cba:	fb00 6111 	mls	r1, r0, r1, r6
 8013cbe:	b289      	uxth	r1, r1
 8013cc0:	fb01 f202 	mul.w	r2, r1, r2
 8013cc4:	6821      	ldr	r1, [r4, #0]
 8013cc6:	3204      	adds	r2, #4
 8013cc8:	188b      	adds	r3, r1, r2
 8013cca:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8013cce:	9303      	str	r3, [sp, #12]
 8013cd0:	9b07      	ldr	r3, [sp, #28]
 8013cd2:	e70c      	b.n	8013aee <uxr_prepare_reliable_buffer_to_write+0xb2>
 8013cd4:	8921      	ldrh	r1, [r4, #8]
 8013cd6:	6863      	ldr	r3, [r4, #4]
 8013cd8:	9804      	ldr	r0, [sp, #16]
 8013cda:	fbb5 f2f1 	udiv	r2, r5, r1
 8013cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ce2:	fb01 5212 	mls	r2, r1, r2, r5
 8013ce6:	6821      	ldr	r1, [r4, #0]
 8013ce8:	b292      	uxth	r2, r2
 8013cea:	fb02 f303 	mul.w	r3, r2, r3
 8013cee:	7b22      	ldrb	r2, [r4, #12]
 8013cf0:	3304      	adds	r3, #4
 8013cf2:	445a      	add	r2, fp
 8013cf4:	4419      	add	r1, r3
 8013cf6:	f841 2c04 	str.w	r2, [r1, #-4]
 8013cfa:	7b23      	ldrb	r3, [r4, #12]
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	2300      	movs	r3, #0
 8013d00:	f7fa fb28 	bl	800e354 <ucdr_init_buffer_origin_offset>
 8013d04:	2001      	movs	r0, #1
 8013d06:	81e5      	strh	r5, [r4, #14]
 8013d08:	e7a0      	b.n	8013c4c <uxr_prepare_reliable_buffer_to_write+0x210>
 8013d0a:	4682      	mov	sl, r0
 8013d0c:	e6cb      	b.n	8013aa6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8013d0e:	f10d 0b20 	add.w	fp, sp, #32
 8013d12:	e747      	b.n	8013ba4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8013d14:	08013915 	.word	0x08013915

08013d18 <uxr_prepare_next_reliable_buffer_to_send>:
 8013d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d1a:	4604      	mov	r4, r0
 8013d1c:	461d      	mov	r5, r3
 8013d1e:	460f      	mov	r7, r1
 8013d20:	8a00      	ldrh	r0, [r0, #16]
 8013d22:	2101      	movs	r1, #1
 8013d24:	4616      	mov	r6, r2
 8013d26:	f000 f9f1 	bl	801410c <uxr_seq_num_add>
 8013d2a:	8028      	strh	r0, [r5, #0]
 8013d2c:	8922      	ldrh	r2, [r4, #8]
 8013d2e:	6863      	ldr	r3, [r4, #4]
 8013d30:	fbb0 f1f2 	udiv	r1, r0, r2
 8013d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d38:	fb02 0c11 	mls	ip, r2, r1, r0
 8013d3c:	89e1      	ldrh	r1, [r4, #14]
 8013d3e:	fa1f fc8c 	uxth.w	ip, ip
 8013d42:	fb0c fc03 	mul.w	ip, ip, r3
 8013d46:	6823      	ldr	r3, [r4, #0]
 8013d48:	f10c 0c04 	add.w	ip, ip, #4
 8013d4c:	4463      	add	r3, ip
 8013d4e:	603b      	str	r3, [r7, #0]
 8013d50:	6823      	ldr	r3, [r4, #0]
 8013d52:	449c      	add	ip, r3
 8013d54:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8013d58:	6033      	str	r3, [r6, #0]
 8013d5a:	f000 f9df 	bl	801411c <uxr_seq_num_cmp>
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	dd01      	ble.n	8013d66 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8013d62:	2000      	movs	r0, #0
 8013d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d66:	7b23      	ldrb	r3, [r4, #12]
 8013d68:	6832      	ldr	r2, [r6, #0]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d9f9      	bls.n	8013d62 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013d6e:	8a61      	ldrh	r1, [r4, #18]
 8013d70:	8a20      	ldrh	r0, [r4, #16]
 8013d72:	f000 f9cf 	bl	8014114 <uxr_seq_num_sub>
 8013d76:	8923      	ldrh	r3, [r4, #8]
 8013d78:	4283      	cmp	r3, r0
 8013d7a:	d0f2      	beq.n	8013d62 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013d7c:	8828      	ldrh	r0, [r5, #0]
 8013d7e:	89e3      	ldrh	r3, [r4, #14]
 8013d80:	8220      	strh	r0, [r4, #16]
 8013d82:	4298      	cmp	r0, r3
 8013d84:	d001      	beq.n	8013d8a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8013d86:	2001      	movs	r0, #1
 8013d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d8a:	2101      	movs	r1, #1
 8013d8c:	f000 f9be 	bl	801410c <uxr_seq_num_add>
 8013d90:	4603      	mov	r3, r0
 8013d92:	2001      	movs	r0, #1
 8013d94:	81e3      	strh	r3, [r4, #14]
 8013d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013d98 <uxr_update_output_stream_heartbeat_timestamp>:
 8013d98:	b570      	push	{r4, r5, r6, lr}
 8013d9a:	8a01      	ldrh	r1, [r0, #16]
 8013d9c:	4604      	mov	r4, r0
 8013d9e:	8a40      	ldrh	r0, [r0, #18]
 8013da0:	4615      	mov	r5, r2
 8013da2:	461e      	mov	r6, r3
 8013da4:	f000 f9ba 	bl	801411c <uxr_seq_num_cmp>
 8013da8:	2800      	cmp	r0, #0
 8013daa:	db07      	blt.n	8013dbc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8013dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013db0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013db4:	2000      	movs	r0, #0
 8013db6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8013dba:	bd70      	pop	{r4, r5, r6, pc}
 8013dbc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013dc0:	b940      	cbnz	r0, 8013dd4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	f884 3020 	strb.w	r3, [r4, #32]
 8013dc8:	3564      	adds	r5, #100	; 0x64
 8013dca:	f146 0600 	adc.w	r6, r6, #0
 8013dce:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013dd2:	bd70      	pop	{r4, r5, r6, pc}
 8013dd4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013dd8:	4295      	cmp	r5, r2
 8013dda:	eb76 0303 	sbcs.w	r3, r6, r3
 8013dde:	db04      	blt.n	8013dea <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8013de0:	1c43      	adds	r3, r0, #1
 8013de2:	2001      	movs	r0, #1
 8013de4:	f884 3020 	strb.w	r3, [r4, #32]
 8013de8:	e7ee      	b.n	8013dc8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8013dea:	2000      	movs	r0, #0
 8013dec:	e7ec      	b.n	8013dc8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8013dee:	bf00      	nop

08013df0 <uxr_begin_output_nack_buffer_it>:
 8013df0:	8a40      	ldrh	r0, [r0, #18]
 8013df2:	4770      	bx	lr

08013df4 <uxr_next_reliable_nack_buffer_to_send>:
 8013df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df8:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 8013dfc:	b197      	cbz	r7, 8013e24 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8013dfe:	4680      	mov	r8, r0
 8013e00:	460d      	mov	r5, r1
 8013e02:	4616      	mov	r6, r2
 8013e04:	461c      	mov	r4, r3
 8013e06:	8818      	ldrh	r0, [r3, #0]
 8013e08:	2101      	movs	r1, #1
 8013e0a:	f000 f97f 	bl	801410c <uxr_seq_num_add>
 8013e0e:	8020      	strh	r0, [r4, #0]
 8013e10:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8013e14:	f000 f982 	bl	801411c <uxr_seq_num_cmp>
 8013e18:	2800      	cmp	r0, #0
 8013e1a:	dd06      	ble.n	8013e2a <uxr_next_reliable_nack_buffer_to_send+0x36>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	461f      	mov	r7, r3
 8013e20:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 8013e24:	4638      	mov	r0, r7
 8013e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e2a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8013e2e:	8820      	ldrh	r0, [r4, #0]
 8013e30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e34:	fbb0 f3f2 	udiv	r3, r0, r2
 8013e38:	fbb1 fcf2 	udiv	ip, r1, r2
 8013e3c:	fb02 0313 	mls	r3, r2, r3, r0
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8013e46:	f8d8 3000 	ldr.w	r3, [r8]
 8013e4a:	f10c 0c04 	add.w	ip, ip, #4
 8013e4e:	4463      	add	r3, ip
 8013e50:	602b      	str	r3, [r5, #0]
 8013e52:	f8d8 3000 	ldr.w	r3, [r8]
 8013e56:	4463      	add	r3, ip
 8013e58:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013e5c:	6033      	str	r3, [r6, #0]
 8013e5e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d0d0      	beq.n	8013e08 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8013e66:	e7dd      	b.n	8013e24 <uxr_next_reliable_nack_buffer_to_send+0x30>

08013e68 <uxr_process_acknack>:
 8013e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	460e      	mov	r6, r1
 8013e6e:	4610      	mov	r0, r2
 8013e70:	2101      	movs	r1, #1
 8013e72:	f000 f94f 	bl	8014114 <uxr_seq_num_sub>
 8013e76:	8a61      	ldrh	r1, [r4, #18]
 8013e78:	f000 f94c 	bl	8014114 <uxr_seq_num_sub>
 8013e7c:	b1c8      	cbz	r0, 8013eb2 <uxr_process_acknack+0x4a>
 8013e7e:	4605      	mov	r5, r0
 8013e80:	2700      	movs	r7, #0
 8013e82:	2101      	movs	r1, #1
 8013e84:	8a60      	ldrh	r0, [r4, #18]
 8013e86:	f000 f941 	bl	801410c <uxr_seq_num_add>
 8013e8a:	8923      	ldrh	r3, [r4, #8]
 8013e8c:	6862      	ldr	r2, [r4, #4]
 8013e8e:	3701      	adds	r7, #1
 8013e90:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8013e94:	6821      	ldr	r1, [r4, #0]
 8013e96:	42bd      	cmp	r5, r7
 8013e98:	8260      	strh	r0, [r4, #18]
 8013e9a:	fbb0 fef3 	udiv	lr, r0, r3
 8013e9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8013ea2:	fb03 031e 	mls	r3, r3, lr, r0
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	fb02 f303 	mul.w	r3, r2, r3
 8013eac:	f841 c003 	str.w	ip, [r1, r3]
 8013eb0:	d1e7      	bne.n	8013e82 <uxr_process_acknack+0x1a>
 8013eb2:	3e00      	subs	r6, #0
 8013eb4:	f04f 0300 	mov.w	r3, #0
 8013eb8:	bf18      	it	ne
 8013eba:	2601      	movne	r6, #1
 8013ebc:	f884 3020 	strb.w	r3, [r4, #32]
 8013ec0:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8013ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ec6:	bf00      	nop

08013ec8 <uxr_is_output_up_to_date>:
 8013ec8:	8a01      	ldrh	r1, [r0, #16]
 8013eca:	8a40      	ldrh	r0, [r0, #18]
 8013ecc:	b508      	push	{r3, lr}
 8013ece:	f000 f925 	bl	801411c <uxr_seq_num_cmp>
 8013ed2:	fab0 f080 	clz	r0, r0
 8013ed6:	0940      	lsrs	r0, r0, #5
 8013ed8:	bd08      	pop	{r3, pc}
 8013eda:	bf00      	nop

08013edc <get_available_free_slots>:
 8013edc:	8901      	ldrh	r1, [r0, #8]
 8013ede:	b1e1      	cbz	r1, 8013f1a <get_available_free_slots+0x3e>
 8013ee0:	6843      	ldr	r3, [r0, #4]
 8013ee2:	f04f 0c00 	mov.w	ip, #0
 8013ee6:	b530      	push	{r4, r5, lr}
 8013ee8:	fbb3 fef1 	udiv	lr, r3, r1
 8013eec:	6805      	ldr	r5, [r0, #0]
 8013eee:	4662      	mov	r2, ip
 8013ef0:	7b04      	ldrb	r4, [r0, #12]
 8013ef2:	4660      	mov	r0, ip
 8013ef4:	f10c 0c01 	add.w	ip, ip, #1
 8013ef8:	fbb2 f3f1 	udiv	r3, r2, r1
 8013efc:	fb01 2313 	mls	r3, r1, r3, r2
 8013f00:	fa1f f28c 	uxth.w	r2, ip
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	fb0e f303 	mul.w	r3, lr, r3
 8013f0a:	58eb      	ldr	r3, [r5, r3]
 8013f0c:	429c      	cmp	r4, r3
 8013f0e:	d101      	bne.n	8013f14 <get_available_free_slots+0x38>
 8013f10:	3001      	adds	r0, #1
 8013f12:	b280      	uxth	r0, r0
 8013f14:	428a      	cmp	r2, r1
 8013f16:	d3ed      	bcc.n	8013ef4 <get_available_free_slots+0x18>
 8013f18:	bd30      	pop	{r4, r5, pc}
 8013f1a:	4608      	mov	r0, r1
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop

08013f20 <uxr_buffer_cancel_data>:
 8013f20:	b510      	push	{r4, lr}
 8013f22:	2300      	movs	r3, #0
 8013f24:	b094      	sub	sp, #80	; 0x50
 8013f26:	4604      	mov	r4, r0
 8013f28:	9205      	str	r2, [sp, #20]
 8013f2a:	9301      	str	r3, [sp, #4]
 8013f2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013f30:	f88d 301e 	strb.w	r3, [sp, #30]
 8013f34:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8013f38:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8013f3c:	2308      	movs	r3, #8
 8013f3e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013f42:	2201      	movs	r2, #1
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	ab0c      	add	r3, sp, #48	; 0x30
 8013f48:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8013f4c:	2210      	movs	r2, #16
 8013f4e:	f7fb fb01 	bl	800f554 <uxr_prepare_stream_to_write_submessage>
 8013f52:	b918      	cbnz	r0, 8013f5c <uxr_buffer_cancel_data+0x3c>
 8013f54:	4604      	mov	r4, r0
 8013f56:	4620      	mov	r0, r4
 8013f58:	b014      	add	sp, #80	; 0x50
 8013f5a:	bd10      	pop	{r4, pc}
 8013f5c:	9905      	ldr	r1, [sp, #20]
 8013f5e:	aa06      	add	r2, sp, #24
 8013f60:	4620      	mov	r0, r4
 8013f62:	f7fb fc33 	bl	800f7cc <uxr_init_base_object_request>
 8013f66:	4604      	mov	r4, r0
 8013f68:	a906      	add	r1, sp, #24
 8013f6a:	a80c      	add	r0, sp, #48	; 0x30
 8013f6c:	f7fc fe46 	bl	8010bfc <uxr_serialize_READ_DATA_Payload>
 8013f70:	4620      	mov	r0, r4
 8013f72:	b014      	add	sp, #80	; 0x50
 8013f74:	bd10      	pop	{r4, pc}
 8013f76:	bf00      	nop

08013f78 <read_submessage_format>:
 8013f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f7c:	b095      	sub	sp, #84	; 0x54
 8013f7e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8013f82:	b113      	cbz	r3, 8013f8a <read_submessage_format+0x12>
 8013f84:	b015      	add	sp, #84	; 0x54
 8013f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f8a:	4606      	mov	r6, r0
 8013f8c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8013f8e:	460c      	mov	r4, r1
 8013f90:	4615      	mov	r5, r2
 8013f92:	9004      	str	r0, [sp, #16]
 8013f94:	4699      	mov	r9, r3
 8013f96:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013f98:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8013f9c:	9005      	str	r0, [sp, #20]
 8013f9e:	a80c      	add	r0, sp, #48	; 0x30
 8013fa0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013fa4:	1a52      	subs	r2, r2, r1
 8013fa6:	f7fa f9e7 	bl	800e378 <ucdr_init_buffer>
 8013faa:	a80c      	add	r0, sp, #48	; 0x30
 8013fac:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013fb0:	f7fa f9b6 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 8013fb4:	69e2      	ldr	r2, [r4, #28]
 8013fb6:	b19a      	cbz	r2, 8013fe0 <read_submessage_format+0x68>
 8013fb8:	f1b8 0f07 	cmp.w	r8, #7
 8013fbc:	f882 9014 	strb.w	r9, [r2, #20]
 8013fc0:	d040      	beq.n	8014044 <read_submessage_format+0xcc>
 8013fc2:	f1b8 0f08 	cmp.w	r8, #8
 8013fc6:	d02e      	beq.n	8014026 <read_submessage_format+0xae>
 8013fc8:	f1b8 0f06 	cmp.w	r8, #6
 8013fcc:	d011      	beq.n	8013ff2 <read_submessage_format+0x7a>
 8013fce:	2301      	movs	r3, #1
 8013fd0:	7513      	strb	r3, [r2, #20]
 8013fd2:	4629      	mov	r1, r5
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	f7fa fa23 	bl	800e420 <ucdr_advance_buffer>
 8013fda:	b015      	add	sp, #84	; 0x54
 8013fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fe0:	f1b8 0f07 	cmp.w	r8, #7
 8013fe4:	d02e      	beq.n	8014044 <read_submessage_format+0xcc>
 8013fe6:	f1b8 0f08 	cmp.w	r8, #8
 8013fea:	d01c      	beq.n	8014026 <read_submessage_format+0xae>
 8013fec:	f1b8 0f06 	cmp.w	r8, #6
 8013ff0:	d1ef      	bne.n	8013fd2 <read_submessage_format+0x5a>
 8013ff2:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8013ff6:	f1b8 0f00 	cmp.w	r8, #0
 8013ffa:	d011      	beq.n	8014020 <read_submessage_format+0xa8>
 8013ffc:	ab0c      	add	r3, sp, #48	; 0x30
 8013ffe:	9501      	str	r5, [sp, #4]
 8014000:	463a      	mov	r2, r7
 8014002:	4630      	mov	r0, r6
 8014004:	9300      	str	r3, [sp, #0]
 8014006:	2306      	movs	r3, #6
 8014008:	f88d 3016 	strb.w	r3, [sp, #22]
 801400c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8014010:	9302      	str	r3, [sp, #8]
 8014012:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014016:	47c0      	blx	r8
 8014018:	2301      	movs	r3, #1
 801401a:	69e2      	ldr	r2, [r4, #28]
 801401c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8014020:	2a00      	cmp	r2, #0
 8014022:	d1d4      	bne.n	8013fce <read_submessage_format+0x56>
 8014024:	e7d5      	b.n	8013fd2 <read_submessage_format+0x5a>
 8014026:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801402a:	2b00      	cmp	r3, #0
 801402c:	d0f8      	beq.n	8014020 <read_submessage_format+0xa8>
 801402e:	a80c      	add	r0, sp, #48	; 0x30
 8014030:	a906      	add	r1, sp, #24
 8014032:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8014036:	f7fc fe87 	bl	8010d48 <uxr_deserialize_SampleIdentity>
 801403a:	b9a0      	cbnz	r0, 8014066 <read_submessage_format+0xee>
 801403c:	69e2      	ldr	r2, [r4, #28]
 801403e:	2a00      	cmp	r2, #0
 8014040:	d1c5      	bne.n	8013fce <read_submessage_format+0x56>
 8014042:	e7c6      	b.n	8013fd2 <read_submessage_format+0x5a>
 8014044:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8014048:	b13b      	cbz	r3, 801405a <read_submessage_format+0xe2>
 801404a:	a906      	add	r1, sp, #24
 801404c:	a80c      	add	r0, sp, #48	; 0x30
 801404e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8014052:	f7fc fb73 	bl	801073c <uxr_deserialize_BaseObjectRequest>
 8014056:	bb60      	cbnz	r0, 80140b2 <read_submessage_format+0x13a>
 8014058:	69e2      	ldr	r2, [r4, #28]
 801405a:	68a3      	ldr	r3, [r4, #8]
 801405c:	442b      	add	r3, r5
 801405e:	60a3      	str	r3, [r4, #8]
 8014060:	2a00      	cmp	r2, #0
 8014062:	d1b4      	bne.n	8013fce <read_submessage_format+0x56>
 8014064:	e7b5      	b.n	8013fd2 <read_submessage_format+0x5a>
 8014066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014068:	a80c      	add	r0, sp, #48	; 0x30
 801406a:	eba8 0803 	sub.w	r8, r8, r3
 801406e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8014072:	44a8      	add	r8, r5
 8014074:	1a52      	subs	r2, r2, r1
 8014076:	f7fa f97f 	bl	800e378 <ucdr_init_buffer>
 801407a:	a80c      	add	r0, sp, #48	; 0x30
 801407c:	fa1f f888 	uxth.w	r8, r8
 8014080:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014084:	f7fa f94c 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 8014088:	ab0c      	add	r3, sp, #48	; 0x30
 801408a:	2108      	movs	r1, #8
 801408c:	f8cd 8004 	str.w	r8, [sp, #4]
 8014090:	9300      	str	r3, [sp, #0]
 8014092:	463a      	mov	r2, r7
 8014094:	f88d 1016 	strb.w	r1, [sp, #22]
 8014098:	ab06      	add	r3, sp, #24
 801409a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801409e:	4630      	mov	r0, r6
 80140a0:	9102      	str	r1, [sp, #8]
 80140a2:	9905      	ldr	r1, [sp, #20]
 80140a4:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 80140a8:	47b8      	blx	r7
 80140aa:	2301      	movs	r3, #1
 80140ac:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80140b0:	e7c4      	b.n	801403c <read_submessage_format+0xc4>
 80140b2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80140b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140b8:	a80c      	add	r0, sp, #48	; 0x30
 80140ba:	1a52      	subs	r2, r2, r1
 80140bc:	eba8 0803 	sub.w	r8, r8, r3
 80140c0:	f7fa f95a 	bl	800e378 <ucdr_init_buffer>
 80140c4:	a80c      	add	r0, sp, #48	; 0x30
 80140c6:	44a8      	add	r8, r5
 80140c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80140cc:	f7fa f928 	bl	800e320 <ucdr_set_on_full_buffer_callback>
 80140d0:	ab0c      	add	r3, sp, #48	; 0x30
 80140d2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80140d6:	fa1f f888 	uxth.w	r8, r8
 80140da:	9300      	str	r3, [sp, #0]
 80140dc:	463a      	mov	r2, r7
 80140de:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80140e2:	4630      	mov	r0, r6
 80140e4:	f8cd 8004 	str.w	r8, [sp, #4]
 80140e8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80140ec:	2107      	movs	r1, #7
 80140ee:	f88d 1016 	strb.w	r1, [sp, #22]
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80140f8:	9102      	str	r1, [sp, #8]
 80140fa:	9905      	ldr	r1, [sp, #20]
 80140fc:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8014100:	47b8      	blx	r7
 8014102:	2301      	movs	r3, #1
 8014104:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8014108:	e7a6      	b.n	8014058 <read_submessage_format+0xe0>
 801410a:	bf00      	nop

0801410c <uxr_seq_num_add>:
 801410c:	4408      	add	r0, r1
 801410e:	b280      	uxth	r0, r0
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop

08014114 <uxr_seq_num_sub>:
 8014114:	1a40      	subs	r0, r0, r1
 8014116:	b280      	uxth	r0, r0
 8014118:	4770      	bx	lr
 801411a:	bf00      	nop

0801411c <uxr_seq_num_cmp>:
 801411c:	4288      	cmp	r0, r1
 801411e:	d011      	beq.n	8014144 <uxr_seq_num_cmp+0x28>
 8014120:	d309      	bcc.n	8014136 <uxr_seq_num_cmp+0x1a>
 8014122:	4288      	cmp	r0, r1
 8014124:	d910      	bls.n	8014148 <uxr_seq_num_cmp+0x2c>
 8014126:	1a40      	subs	r0, r0, r1
 8014128:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801412c:	bfd4      	ite	le
 801412e:	2001      	movle	r0, #1
 8014130:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8014134:	4770      	bx	lr
 8014136:	1a0b      	subs	r3, r1, r0
 8014138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801413c:	daf1      	bge.n	8014122 <uxr_seq_num_cmp+0x6>
 801413e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014142:	4770      	bx	lr
 8014144:	2000      	movs	r0, #0
 8014146:	4770      	bx	lr
 8014148:	2001      	movs	r0, #1
 801414a:	4770      	bx	lr

0801414c <uxr_init_framing_io>:
 801414c:	2300      	movs	r3, #0
 801414e:	7041      	strb	r1, [r0, #1]
 8014150:	7003      	strb	r3, [r0, #0]
 8014152:	8583      	strh	r3, [r0, #44]	; 0x2c
 8014154:	4770      	bx	lr
 8014156:	bf00      	nop

08014158 <uxr_write_framed_msg>:
 8014158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415c:	4617      	mov	r7, r2
 801415e:	7842      	ldrb	r2, [r0, #1]
 8014160:	460e      	mov	r6, r1
 8014162:	b083      	sub	sp, #12
 8014164:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8014168:	469b      	mov	fp, r3
 801416a:	237e      	movs	r3, #126	; 0x7e
 801416c:	4604      	mov	r4, r0
 801416e:	2901      	cmp	r1, #1
 8014170:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8014174:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014178:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801417c:	f240 8115 	bls.w	80143aa <uxr_write_framed_msg+0x252>
 8014180:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8014184:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8014188:	2202      	movs	r2, #2
 801418a:	2901      	cmp	r1, #1
 801418c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014190:	d952      	bls.n	8014238 <uxr_write_framed_msg+0xe0>
 8014192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014194:	2103      	movs	r1, #3
 8014196:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801419a:	b2dd      	uxtb	r5, r3
 801419c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80141a0:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80141a4:	2a01      	cmp	r2, #1
 80141a6:	d95c      	bls.n	8014262 <uxr_write_framed_msg+0x10a>
 80141a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141aa:	1862      	adds	r2, r4, r1
 80141ac:	3101      	adds	r1, #1
 80141ae:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80141b2:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 80141b6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80141ba:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80141be:	2a01      	cmp	r2, #1
 80141c0:	d961      	bls.n	8014286 <uxr_write_framed_msg+0x12e>
 80141c2:	1c4a      	adds	r2, r1, #1
 80141c4:	4421      	add	r1, r4
 80141c6:	b2d2      	uxtb	r2, r2
 80141c8:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80141cc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d06a      	beq.n	80142aa <uxr_write_framed_msg+0x152>
 80141d4:	f04f 0800 	mov.w	r8, #0
 80141d8:	46c1      	mov	r9, r8
 80141da:	e016      	b.n	801420a <uxr_write_framed_msg+0xb2>
 80141dc:	2a29      	cmp	r2, #41	; 0x29
 80141de:	d868      	bhi.n	80142b2 <uxr_write_framed_msg+0x15a>
 80141e0:	18a0      	adds	r0, r4, r2
 80141e2:	3201      	adds	r2, #1
 80141e4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80141e8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80141ec:	ea88 0101 	eor.w	r1, r8, r1
 80141f0:	4b7d      	ldr	r3, [pc, #500]	; (80143e8 <uxr_write_framed_msg+0x290>)
 80141f2:	f109 0901 	add.w	r9, r9, #1
 80141f6:	b2c9      	uxtb	r1, r1
 80141f8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80141fc:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8014200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014202:	454b      	cmp	r3, r9
 8014204:	d969      	bls.n	80142da <uxr_write_framed_msg+0x182>
 8014206:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801420a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801420e:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8014212:	2801      	cmp	r0, #1
 8014214:	d8e2      	bhi.n	80141dc <uxr_write_framed_msg+0x84>
 8014216:	1c50      	adds	r0, r2, #1
 8014218:	b2c0      	uxtb	r0, r0
 801421a:	2829      	cmp	r0, #41	; 0x29
 801421c:	d849      	bhi.n	80142b2 <uxr_write_framed_msg+0x15a>
 801421e:	18a0      	adds	r0, r4, r2
 8014220:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8014224:	3202      	adds	r2, #2
 8014226:	f081 0520 	eor.w	r5, r1, #32
 801422a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801422e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8014232:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014236:	e7d9      	b.n	80141ec <uxr_write_framed_msg+0x94>
 8014238:	2104      	movs	r1, #4
 801423a:	f04f 0c03 	mov.w	ip, #3
 801423e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014240:	4422      	add	r2, r4
 8014242:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8014246:	44a4      	add	ip, r4
 8014248:	b2dd      	uxtb	r5, r3
 801424a:	f080 0020 	eor.w	r0, r0, #32
 801424e:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8014252:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8014256:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801425a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801425e:	2a01      	cmp	r2, #1
 8014260:	d8a2      	bhi.n	80141a8 <uxr_write_framed_msg+0x50>
 8014262:	1862      	adds	r2, r4, r1
 8014264:	207d      	movs	r0, #125	; 0x7d
 8014266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014268:	f085 0520 	eor.w	r5, r5, #32
 801426c:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8014270:	3102      	adds	r1, #2
 8014272:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8014276:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801427a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801427e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014282:	2a01      	cmp	r2, #1
 8014284:	d89d      	bhi.n	80141c2 <uxr_write_framed_msg+0x6a>
 8014286:	1c4d      	adds	r5, r1, #1
 8014288:	1c8a      	adds	r2, r1, #2
 801428a:	f080 0020 	eor.w	r0, r0, #32
 801428e:	4421      	add	r1, r4
 8014290:	fa54 f585 	uxtab	r5, r4, r5
 8014294:	b2d2      	uxtb	r2, r2
 8014296:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801429a:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801429e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80142a2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d194      	bne.n	80141d4 <uxr_write_framed_msg+0x7c>
 80142aa:	4619      	mov	r1, r3
 80142ac:	f8ad 3004 	strh.w	r3, [sp, #4]
 80142b0:	e019      	b.n	80142e6 <uxr_write_framed_msg+0x18e>
 80142b2:	2500      	movs	r5, #0
 80142b4:	e000      	b.n	80142b8 <uxr_write_framed_msg+0x160>
 80142b6:	b160      	cbz	r0, 80142d2 <uxr_write_framed_msg+0x17a>
 80142b8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80142bc:	1b52      	subs	r2, r2, r5
 80142be:	4653      	mov	r3, sl
 80142c0:	4638      	mov	r0, r7
 80142c2:	4421      	add	r1, r4
 80142c4:	47b0      	blx	r6
 80142c6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80142ca:	4405      	add	r5, r0
 80142cc:	4295      	cmp	r5, r2
 80142ce:	d3f2      	bcc.n	80142b6 <uxr_write_framed_msg+0x15e>
 80142d0:	d066      	beq.n	80143a0 <uxr_write_framed_msg+0x248>
 80142d2:	2000      	movs	r0, #0
 80142d4:	b003      	add	sp, #12
 80142d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142da:	fa5f f188 	uxtb.w	r1, r8
 80142de:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80142e2:	f8ad 8004 	strh.w	r8, [sp, #4]
 80142e6:	f04f 0900 	mov.w	r9, #0
 80142ea:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80142ee:	46c8      	mov	r8, r9
 80142f0:	e013      	b.n	801431a <uxr_write_framed_msg+0x1c2>
 80142f2:	2a29      	cmp	r2, #41	; 0x29
 80142f4:	d824      	bhi.n	8014340 <uxr_write_framed_msg+0x1e8>
 80142f6:	18a3      	adds	r3, r4, r2
 80142f8:	3201      	adds	r2, #1
 80142fa:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80142fe:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014302:	f109 0901 	add.w	r9, r9, #1
 8014306:	f1b9 0f02 	cmp.w	r9, #2
 801430a:	d02d      	beq.n	8014368 <uxr_write_framed_msg+0x210>
 801430c:	f109 0308 	add.w	r3, r9, #8
 8014310:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014314:	446b      	add	r3, sp
 8014316:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801431a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801431e:	2b01      	cmp	r3, #1
 8014320:	d8e7      	bhi.n	80142f2 <uxr_write_framed_msg+0x19a>
 8014322:	1c53      	adds	r3, r2, #1
 8014324:	b2db      	uxtb	r3, r3
 8014326:	2b29      	cmp	r3, #41	; 0x29
 8014328:	d80a      	bhi.n	8014340 <uxr_write_framed_msg+0x1e8>
 801432a:	18a3      	adds	r3, r4, r2
 801432c:	f081 0120 	eor.w	r1, r1, #32
 8014330:	3202      	adds	r2, #2
 8014332:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8014336:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801433a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801433e:	e7e0      	b.n	8014302 <uxr_write_framed_msg+0x1aa>
 8014340:	2500      	movs	r5, #0
 8014342:	e001      	b.n	8014348 <uxr_write_framed_msg+0x1f0>
 8014344:	2800      	cmp	r0, #0
 8014346:	d0c4      	beq.n	80142d2 <uxr_write_framed_msg+0x17a>
 8014348:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801434c:	1b52      	subs	r2, r2, r5
 801434e:	4653      	mov	r3, sl
 8014350:	4638      	mov	r0, r7
 8014352:	4421      	add	r1, r4
 8014354:	47b0      	blx	r6
 8014356:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801435a:	4405      	add	r5, r0
 801435c:	4295      	cmp	r5, r2
 801435e:	d3f1      	bcc.n	8014344 <uxr_write_framed_msg+0x1ec>
 8014360:	d1b7      	bne.n	80142d2 <uxr_write_framed_msg+0x17a>
 8014362:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8014366:	e7d1      	b.n	801430c <uxr_write_framed_msg+0x1b4>
 8014368:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801436c:	b19a      	cbz	r2, 8014396 <uxr_write_framed_msg+0x23e>
 801436e:	2500      	movs	r5, #0
 8014370:	e001      	b.n	8014376 <uxr_write_framed_msg+0x21e>
 8014372:	2800      	cmp	r0, #0
 8014374:	d0ad      	beq.n	80142d2 <uxr_write_framed_msg+0x17a>
 8014376:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801437a:	1b52      	subs	r2, r2, r5
 801437c:	4653      	mov	r3, sl
 801437e:	4638      	mov	r0, r7
 8014380:	4421      	add	r1, r4
 8014382:	47b0      	blx	r6
 8014384:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014388:	4405      	add	r5, r0
 801438a:	4295      	cmp	r5, r2
 801438c:	d3f1      	bcc.n	8014372 <uxr_write_framed_msg+0x21a>
 801438e:	d1a0      	bne.n	80142d2 <uxr_write_framed_msg+0x17a>
 8014390:	2300      	movs	r3, #0
 8014392:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014398:	b298      	uxth	r0, r3
 801439a:	b003      	add	sp, #12
 801439c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a0:	f04f 0300 	mov.w	r3, #0
 80143a4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80143a8:	e72a      	b.n	8014200 <uxr_write_framed_msg+0xa8>
 80143aa:	217d      	movs	r1, #125	; 0x7d
 80143ac:	f082 0220 	eor.w	r2, r2, #32
 80143b0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80143b4:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80143b8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80143bc:	2203      	movs	r2, #3
 80143be:	2901      	cmp	r1, #1
 80143c0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80143c4:	d803      	bhi.n	80143ce <uxr_write_framed_msg+0x276>
 80143c6:	2105      	movs	r1, #5
 80143c8:	f04f 0c04 	mov.w	ip, #4
 80143cc:	e737      	b.n	801423e <uxr_write_framed_msg+0xe6>
 80143ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143d0:	2104      	movs	r1, #4
 80143d2:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80143d6:	b2dd      	uxtb	r5, r3
 80143d8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80143dc:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80143e0:	2a01      	cmp	r2, #1
 80143e2:	f63f aee1 	bhi.w	80141a8 <uxr_write_framed_msg+0x50>
 80143e6:	e73c      	b.n	8014262 <uxr_write_framed_msg+0x10a>
 80143e8:	080172c0 	.word	0x080172c0

080143ec <uxr_framing_read_transport>:
 80143ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f0:	4604      	mov	r4, r0
 80143f2:	b085      	sub	sp, #20
 80143f4:	4692      	mov	sl, r2
 80143f6:	4689      	mov	r9, r1
 80143f8:	461d      	mov	r5, r3
 80143fa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80143fc:	f7fb fb9c 	bl	800fb38 <uxr_millis>
 8014400:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014404:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8014408:	4680      	mov	r8, r0
 801440a:	42ba      	cmp	r2, r7
 801440c:	d05f      	beq.n	80144ce <uxr_framing_read_transport+0xe2>
 801440e:	d817      	bhi.n	8014440 <uxr_framing_read_transport+0x54>
 8014410:	3f01      	subs	r7, #1
 8014412:	1aba      	subs	r2, r7, r2
 8014414:	2700      	movs	r7, #0
 8014416:	b2d2      	uxtb	r2, r2
 8014418:	42b2      	cmp	r2, r6
 801441a:	d81a      	bhi.n	8014452 <uxr_framing_read_transport+0x66>
 801441c:	19d3      	adds	r3, r2, r7
 801441e:	42b3      	cmp	r3, r6
 8014420:	d852      	bhi.n	80144c8 <uxr_framing_read_transport+0xdc>
 8014422:	b9d2      	cbnz	r2, 801445a <uxr_framing_read_transport+0x6e>
 8014424:	2600      	movs	r6, #0
 8014426:	f7fb fb87 	bl	800fb38 <uxr_millis>
 801442a:	682b      	ldr	r3, [r5, #0]
 801442c:	eba0 0008 	sub.w	r0, r0, r8
 8014430:	1a1b      	subs	r3, r3, r0
 8014432:	4630      	mov	r0, r6
 8014434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014438:	602b      	str	r3, [r5, #0]
 801443a:	b005      	add	sp, #20
 801443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014440:	2f00      	cmp	r7, #0
 8014442:	d060      	beq.n	8014506 <uxr_framing_read_transport+0x11a>
 8014444:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8014448:	3f01      	subs	r7, #1
 801444a:	b2d2      	uxtb	r2, r2
 801444c:	b2ff      	uxtb	r7, r7
 801444e:	42b2      	cmp	r2, r6
 8014450:	d9e4      	bls.n	801441c <uxr_framing_read_transport+0x30>
 8014452:	b2f2      	uxtb	r2, r6
 8014454:	2700      	movs	r7, #0
 8014456:	2a00      	cmp	r2, #0
 8014458:	d0e4      	beq.n	8014424 <uxr_framing_read_transport+0x38>
 801445a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801445c:	4650      	mov	r0, sl
 801445e:	9203      	str	r2, [sp, #12]
 8014460:	9300      	str	r3, [sp, #0]
 8014462:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014466:	682b      	ldr	r3, [r5, #0]
 8014468:	3102      	adds	r1, #2
 801446a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8014510 <uxr_framing_read_transport+0x124>
 801446e:	4421      	add	r1, r4
 8014470:	47c8      	blx	r9
 8014472:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014476:	4606      	mov	r6, r0
 8014478:	4403      	add	r3, r0
 801447a:	0859      	lsrs	r1, r3, #1
 801447c:	fbab 2101 	umull	r2, r1, fp, r1
 8014480:	222a      	movs	r2, #42	; 0x2a
 8014482:	0889      	lsrs	r1, r1, #2
 8014484:	fb02 3111 	mls	r1, r2, r1, r3
 8014488:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801448c:	2800      	cmp	r0, #0
 801448e:	d0c9      	beq.n	8014424 <uxr_framing_read_transport+0x38>
 8014490:	9a03      	ldr	r2, [sp, #12]
 8014492:	4290      	cmp	r0, r2
 8014494:	d1c7      	bne.n	8014426 <uxr_framing_read_transport+0x3a>
 8014496:	2f00      	cmp	r7, #0
 8014498:	d0c5      	beq.n	8014426 <uxr_framing_read_transport+0x3a>
 801449a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801449c:	3102      	adds	r1, #2
 801449e:	463a      	mov	r2, r7
 80144a0:	4650      	mov	r0, sl
 80144a2:	4421      	add	r1, r4
 80144a4:	9300      	str	r3, [sp, #0]
 80144a6:	2300      	movs	r3, #0
 80144a8:	47c8      	blx	r9
 80144aa:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80144ae:	4406      	add	r6, r0
 80144b0:	1813      	adds	r3, r2, r0
 80144b2:	085a      	lsrs	r2, r3, #1
 80144b4:	fbab 1b02 	umull	r1, fp, fp, r2
 80144b8:	222a      	movs	r2, #42	; 0x2a
 80144ba:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80144be:	fb02 331b 	mls	r3, r2, fp, r3
 80144c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80144c6:	e7ae      	b.n	8014426 <uxr_framing_read_transport+0x3a>
 80144c8:	1ab6      	subs	r6, r6, r2
 80144ca:	b2f7      	uxtb	r7, r6
 80144cc:	e7a9      	b.n	8014422 <uxr_framing_read_transport+0x36>
 80144ce:	2300      	movs	r3, #0
 80144d0:	2e28      	cmp	r6, #40	; 0x28
 80144d2:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80144d4:	d9bd      	bls.n	8014452 <uxr_framing_read_transport+0x66>
 80144d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144d8:	2229      	movs	r2, #41	; 0x29
 80144da:	1ca1      	adds	r1, r4, #2
 80144dc:	4650      	mov	r0, sl
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	682b      	ldr	r3, [r5, #0]
 80144e2:	47c8      	blx	r9
 80144e4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80144e8:	4606      	mov	r6, r0
 80144ea:	212a      	movs	r1, #42	; 0x2a
 80144ec:	4403      	add	r3, r0
 80144ee:	4808      	ldr	r0, [pc, #32]	; (8014510 <uxr_framing_read_transport+0x124>)
 80144f0:	085a      	lsrs	r2, r3, #1
 80144f2:	fba0 0202 	umull	r0, r2, r0, r2
 80144f6:	0892      	lsrs	r2, r2, #2
 80144f8:	fb01 3312 	mls	r3, r1, r2, r3
 80144fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8014500:	2e00      	cmp	r6, #0
 8014502:	d08f      	beq.n	8014424 <uxr_framing_read_transport+0x38>
 8014504:	e78f      	b.n	8014426 <uxr_framing_read_transport+0x3a>
 8014506:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801450a:	b2d2      	uxtb	r2, r2
 801450c:	e784      	b.n	8014418 <uxr_framing_read_transport+0x2c>
 801450e:	bf00      	nop
 8014510:	30c30c31 	.word	0x30c30c31

08014514 <uxr_read_framed_msg>:
 8014514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014518:	461e      	mov	r6, r3
 801451a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801451e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8014522:	b083      	sub	sp, #12
 8014524:	4604      	mov	r4, r0
 8014526:	4688      	mov	r8, r1
 8014528:	429d      	cmp	r5, r3
 801452a:	4691      	mov	r9, r2
 801452c:	f000 818c 	beq.w	8014848 <uxr_read_framed_msg+0x334>
 8014530:	7823      	ldrb	r3, [r4, #0]
 8014532:	4dc3      	ldr	r5, [pc, #780]	; (8014840 <uxr_read_framed_msg+0x32c>)
 8014534:	4fc3      	ldr	r7, [pc, #780]	; (8014844 <uxr_read_framed_msg+0x330>)
 8014536:	2b07      	cmp	r3, #7
 8014538:	d8fd      	bhi.n	8014536 <uxr_read_framed_msg+0x22>
 801453a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801453e:	011c      	.short	0x011c
 8014540:	00d900fb 	.word	0x00d900fb
 8014544:	008f00ba 	.word	0x008f00ba
 8014548:	00320051 	.word	0x00320051
 801454c:	0008      	.short	0x0008
 801454e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014552:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014556:	4299      	cmp	r1, r3
 8014558:	f000 814d 	beq.w	80147f6 <uxr_read_framed_msg+0x2e2>
 801455c:	18e2      	adds	r2, r4, r3
 801455e:	7892      	ldrb	r2, [r2, #2]
 8014560:	2a7d      	cmp	r2, #125	; 0x7d
 8014562:	f000 81b8 	beq.w	80148d6 <uxr_read_framed_msg+0x3c2>
 8014566:	3301      	adds	r3, #1
 8014568:	212a      	movs	r1, #42	; 0x2a
 801456a:	2a7e      	cmp	r2, #126	; 0x7e
 801456c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8014570:	fba5 c000 	umull	ip, r0, r5, r0
 8014574:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8014578:	fb01 3310 	mls	r3, r1, r0, r3
 801457c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014580:	f000 8257 	beq.w	8014a32 <uxr_read_framed_msg+0x51e>
 8014584:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014586:	2000      	movs	r0, #0
 8014588:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801458a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801458e:	7020      	strb	r0, [r4, #0]
 8014590:	b29b      	uxth	r3, r3
 8014592:	4299      	cmp	r1, r3
 8014594:	86a3      	strh	r3, [r4, #52]	; 0x34
 8014596:	f000 8178 	beq.w	801488a <uxr_read_framed_msg+0x376>
 801459a:	2000      	movs	r0, #0
 801459c:	b003      	add	sp, #12
 801459e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80145a6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80145aa:	4298      	cmp	r0, r3
 80145ac:	f000 8132 	beq.w	8014814 <uxr_read_framed_msg+0x300>
 80145b0:	18e2      	adds	r2, r4, r3
 80145b2:	7891      	ldrb	r1, [r2, #2]
 80145b4:	297d      	cmp	r1, #125	; 0x7d
 80145b6:	f000 8170 	beq.w	801489a <uxr_read_framed_msg+0x386>
 80145ba:	3301      	adds	r3, #1
 80145bc:	202a      	movs	r0, #42	; 0x2a
 80145be:	297e      	cmp	r1, #126	; 0x7e
 80145c0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80145c4:	fba5 c202 	umull	ip, r2, r5, r2
 80145c8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80145cc:	fb00 3312 	mls	r3, r0, r2, r3
 80145d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80145d4:	f000 821d 	beq.w	8014a12 <uxr_read_framed_msg+0x4fe>
 80145d8:	2307      	movs	r3, #7
 80145da:	86a1      	strh	r1, [r4, #52]	; 0x34
 80145dc:	7023      	strb	r3, [r4, #0]
 80145de:	e7aa      	b.n	8014536 <uxr_read_framed_msg+0x22>
 80145e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80145e2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80145e6:	459e      	cmp	lr, r3
 80145e8:	d827      	bhi.n	801463a <uxr_read_framed_msg+0x126>
 80145ea:	e032      	b.n	8014652 <uxr_read_framed_msg+0x13e>
 80145ec:	fba5 b101 	umull	fp, r1, r5, r1
 80145f0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80145f4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80145f8:	0889      	lsrs	r1, r1, #2
 80145fa:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80145fe:	fb0b 0111 	mls	r1, fp, r1, r0
 8014602:	f000 80d4 	beq.w	80147ae <uxr_read_framed_msg+0x29a>
 8014606:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801460a:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801460e:	f000 80cb 	beq.w	80147a8 <uxr_read_framed_msg+0x294>
 8014612:	f806 c003 	strb.w	ip, [r6, r3]
 8014616:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8014618:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801461a:	ea80 010c 	eor.w	r1, r0, ip
 801461e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8014622:	3301      	adds	r3, #1
 8014624:	b2c9      	uxtb	r1, r1
 8014626:	b29b      	uxth	r3, r3
 8014628:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801462c:	4573      	cmp	r3, lr
 801462e:	8663      	strh	r3, [r4, #50]	; 0x32
 8014630:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8014634:	86e2      	strh	r2, [r4, #54]	; 0x36
 8014636:	f080 811d 	bcs.w	8014874 <uxr_read_framed_msg+0x360>
 801463a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801463e:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8014642:	1c50      	adds	r0, r2, #1
 8014644:	eb04 0c02 	add.w	ip, r4, r2
 8014648:	4592      	cmp	sl, r2
 801464a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801464e:	d1cd      	bne.n	80145ec <uxr_read_framed_msg+0xd8>
 8014650:	459e      	cmp	lr, r3
 8014652:	f040 8114 	bne.w	801487e <uxr_read_framed_msg+0x36a>
 8014656:	2306      	movs	r3, #6
 8014658:	7023      	strb	r3, [r4, #0]
 801465a:	e76c      	b.n	8014536 <uxr_read_framed_msg+0x22>
 801465c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014660:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014664:	4298      	cmp	r0, r3
 8014666:	f000 80c6 	beq.w	80147f6 <uxr_read_framed_msg+0x2e2>
 801466a:	18e2      	adds	r2, r4, r3
 801466c:	7891      	ldrb	r1, [r2, #2]
 801466e:	297d      	cmp	r1, #125	; 0x7d
 8014670:	f000 8193 	beq.w	801499a <uxr_read_framed_msg+0x486>
 8014674:	3301      	adds	r3, #1
 8014676:	202a      	movs	r0, #42	; 0x2a
 8014678:	297e      	cmp	r1, #126	; 0x7e
 801467a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801467e:	fba5 c202 	umull	ip, r2, r5, r2
 8014682:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014686:	fb00 3312 	mls	r3, r0, r2, r3
 801468a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801468e:	f000 81d0 	beq.w	8014a32 <uxr_read_framed_msg+0x51e>
 8014692:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014694:	2000      	movs	r0, #0
 8014696:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801469a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801469c:	8660      	strh	r0, [r4, #50]	; 0x32
 801469e:	b29b      	uxth	r3, r3
 80146a0:	86e0      	strh	r0, [r4, #54]	; 0x36
 80146a2:	428b      	cmp	r3, r1
 80146a4:	8623      	strh	r3, [r4, #48]	; 0x30
 80146a6:	f240 80e2 	bls.w	801486e <uxr_read_framed_msg+0x35a>
 80146aa:	7020      	strb	r0, [r4, #0]
 80146ac:	b003      	add	sp, #12
 80146ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80146b6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80146ba:	4298      	cmp	r0, r3
 80146bc:	f000 80aa 	beq.w	8014814 <uxr_read_framed_msg+0x300>
 80146c0:	18e2      	adds	r2, r4, r3
 80146c2:	7891      	ldrb	r1, [r2, #2]
 80146c4:	297d      	cmp	r1, #125	; 0x7d
 80146c6:	f000 8186 	beq.w	80149d6 <uxr_read_framed_msg+0x4c2>
 80146ca:	3301      	adds	r3, #1
 80146cc:	202a      	movs	r0, #42	; 0x2a
 80146ce:	297e      	cmp	r1, #126	; 0x7e
 80146d0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80146d4:	fba5 c202 	umull	ip, r2, r5, r2
 80146d8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80146dc:	fb00 3312 	mls	r3, r0, r2, r3
 80146e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80146e4:	f000 8195 	beq.w	8014a12 <uxr_read_framed_msg+0x4fe>
 80146e8:	2304      	movs	r3, #4
 80146ea:	8621      	strh	r1, [r4, #48]	; 0x30
 80146ec:	7023      	strb	r3, [r4, #0]
 80146ee:	e722      	b.n	8014536 <uxr_read_framed_msg+0x22>
 80146f0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80146f4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80146f8:	4290      	cmp	r0, r2
 80146fa:	f000 80b4 	beq.w	8014866 <uxr_read_framed_msg+0x352>
 80146fe:	18a3      	adds	r3, r4, r2
 8014700:	7899      	ldrb	r1, [r3, #2]
 8014702:	297d      	cmp	r1, #125	; 0x7d
 8014704:	f000 8107 	beq.w	8014916 <uxr_read_framed_msg+0x402>
 8014708:	3201      	adds	r2, #1
 801470a:	232a      	movs	r3, #42	; 0x2a
 801470c:	297e      	cmp	r1, #126	; 0x7e
 801470e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8014712:	fba5 c000 	umull	ip, r0, r5, r0
 8014716:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801471a:	fb03 2210 	mls	r2, r3, r0, r2
 801471e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014722:	f000 818a 	beq.w	8014a3a <uxr_read_framed_msg+0x526>
 8014726:	7863      	ldrb	r3, [r4, #1]
 8014728:	428b      	cmp	r3, r1
 801472a:	bf0c      	ite	eq
 801472c:	2303      	moveq	r3, #3
 801472e:	2300      	movne	r3, #0
 8014730:	7023      	strb	r3, [r4, #0]
 8014732:	e700      	b.n	8014536 <uxr_read_framed_msg+0x22>
 8014734:	2300      	movs	r3, #0
 8014736:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801473a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801473e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014742:	4299      	cmp	r1, r3
 8014744:	d06a      	beq.n	801481c <uxr_read_framed_msg+0x308>
 8014746:	18e2      	adds	r2, r4, r3
 8014748:	7890      	ldrb	r0, [r2, #2]
 801474a:	287d      	cmp	r0, #125	; 0x7d
 801474c:	f000 8100 	beq.w	8014950 <uxr_read_framed_msg+0x43c>
 8014750:	3301      	adds	r3, #1
 8014752:	212a      	movs	r1, #42	; 0x2a
 8014754:	287e      	cmp	r0, #126	; 0x7e
 8014756:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801475a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801475e:	fba5 c202 	umull	ip, r2, r5, r2
 8014762:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014766:	fb01 3312 	mls	r3, r1, r2, r3
 801476a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801476e:	d055      	beq.n	801481c <uxr_read_framed_msg+0x308>
 8014770:	2302      	movs	r3, #2
 8014772:	7023      	strb	r3, [r4, #0]
 8014774:	e6df      	b.n	8014536 <uxr_read_framed_msg+0x22>
 8014776:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801477a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801477e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014782:	1c5a      	adds	r2, r3, #1
 8014784:	459c      	cmp	ip, r3
 8014786:	eb04 0103 	add.w	r1, r4, r3
 801478a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801478e:	f43f af04 	beq.w	801459a <uxr_read_framed_msg+0x86>
 8014792:	fba5 0303 	umull	r0, r3, r5, r3
 8014796:	7889      	ldrb	r1, [r1, #2]
 8014798:	089b      	lsrs	r3, r3, #2
 801479a:	297e      	cmp	r1, #126	; 0x7e
 801479c:	fb0e 2313 	mls	r3, lr, r3, r2
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80147a6:	d1ec      	bne.n	8014782 <uxr_read_framed_msg+0x26e>
 80147a8:	2301      	movs	r3, #1
 80147aa:	7023      	strb	r3, [r4, #0]
 80147ac:	e6c3      	b.n	8014536 <uxr_read_framed_msg+0x22>
 80147ae:	1c50      	adds	r0, r2, #1
 80147b0:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80147b4:	3202      	adds	r2, #2
 80147b6:	0841      	lsrs	r1, r0, #1
 80147b8:	fba5 c101 	umull	ip, r1, r5, r1
 80147bc:	0889      	lsrs	r1, r1, #2
 80147be:	fb0b 0111 	mls	r1, fp, r1, r0
 80147c2:	1860      	adds	r0, r4, r1
 80147c4:	b2c9      	uxtb	r1, r1
 80147c6:	458a      	cmp	sl, r1
 80147c8:	f43f af42 	beq.w	8014650 <uxr_read_framed_msg+0x13c>
 80147cc:	0851      	lsrs	r1, r2, #1
 80147ce:	7880      	ldrb	r0, [r0, #2]
 80147d0:	fba5 a101 	umull	sl, r1, r5, r1
 80147d4:	287e      	cmp	r0, #126	; 0x7e
 80147d6:	f080 0c20 	eor.w	ip, r0, #32
 80147da:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80147de:	fb0b 2211 	mls	r2, fp, r1, r2
 80147e2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80147e6:	f47f af14 	bne.w	8014612 <uxr_read_framed_msg+0xfe>
 80147ea:	459e      	cmp	lr, r3
 80147ec:	f43f af33 	beq.w	8014656 <uxr_read_framed_msg+0x142>
 80147f0:	2301      	movs	r3, #1
 80147f2:	7023      	strb	r3, [r4, #0]
 80147f4:	e69f      	b.n	8014536 <uxr_read_framed_msg+0x22>
 80147f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147f8:	9300      	str	r3, [sp, #0]
 80147fa:	2301      	movs	r3, #1
 80147fc:	9301      	str	r3, [sp, #4]
 80147fe:	464a      	mov	r2, r9
 8014800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014802:	4641      	mov	r1, r8
 8014804:	4620      	mov	r0, r4
 8014806:	f7ff fdf1 	bl	80143ec <uxr_framing_read_transport>
 801480a:	2800      	cmp	r0, #0
 801480c:	f43f aec5 	beq.w	801459a <uxr_read_framed_msg+0x86>
 8014810:	7823      	ldrb	r3, [r4, #0]
 8014812:	e690      	b.n	8014536 <uxr_read_framed_msg+0x22>
 8014814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	2302      	movs	r3, #2
 801481a:	e7ef      	b.n	80147fc <uxr_read_framed_msg+0x2e8>
 801481c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801481e:	464a      	mov	r2, r9
 8014820:	4641      	mov	r1, r8
 8014822:	4620      	mov	r0, r4
 8014824:	9300      	str	r3, [sp, #0]
 8014826:	2304      	movs	r3, #4
 8014828:	9301      	str	r3, [sp, #4]
 801482a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801482c:	f7ff fdde 	bl	80143ec <uxr_framing_read_transport>
 8014830:	2800      	cmp	r0, #0
 8014832:	d1ed      	bne.n	8014810 <uxr_read_framed_msg+0x2fc>
 8014834:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014838:	2b7e      	cmp	r3, #126	; 0x7e
 801483a:	d0e9      	beq.n	8014810 <uxr_read_framed_msg+0x2fc>
 801483c:	e6ad      	b.n	801459a <uxr_read_framed_msg+0x86>
 801483e:	bf00      	nop
 8014840:	30c30c31 	.word	0x30c30c31
 8014844:	080172c0 	.word	0x080172c0
 8014848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801484a:	9300      	str	r3, [sp, #0]
 801484c:	2305      	movs	r3, #5
 801484e:	9301      	str	r3, [sp, #4]
 8014850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014852:	f7ff fdcb 	bl	80143ec <uxr_framing_read_transport>
 8014856:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801485a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801485e:	429a      	cmp	r2, r3
 8014860:	f43f ae9b 	beq.w	801459a <uxr_read_framed_msg+0x86>
 8014864:	e664      	b.n	8014530 <uxr_read_framed_msg+0x1c>
 8014866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014868:	9300      	str	r3, [sp, #0]
 801486a:	2303      	movs	r3, #3
 801486c:	e7c6      	b.n	80147fc <uxr_read_framed_msg+0x2e8>
 801486e:	2305      	movs	r3, #5
 8014870:	7023      	strb	r3, [r4, #0]
 8014872:	e660      	b.n	8014536 <uxr_read_framed_msg+0x22>
 8014874:	f43f aeef 	beq.w	8014656 <uxr_read_framed_msg+0x142>
 8014878:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801487c:	d094      	beq.n	80147a8 <uxr_read_framed_msg+0x294>
 801487e:	ebae 0303 	sub.w	r3, lr, r3
 8014882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014884:	3302      	adds	r3, #2
 8014886:	9200      	str	r2, [sp, #0]
 8014888:	e7b8      	b.n	80147fc <uxr_read_framed_msg+0x2e8>
 801488a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801488e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014890:	7013      	strb	r3, [r2, #0]
 8014892:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8014894:	b003      	add	sp, #12
 8014896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489a:	1c59      	adds	r1, r3, #1
 801489c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80148a0:	084a      	lsrs	r2, r1, #1
 80148a2:	fba5 e202 	umull	lr, r2, r5, r2
 80148a6:	0892      	lsrs	r2, r2, #2
 80148a8:	fb0c 1212 	mls	r2, ip, r2, r1
 80148ac:	b2d1      	uxtb	r1, r2
 80148ae:	4288      	cmp	r0, r1
 80148b0:	d0b0      	beq.n	8014814 <uxr_read_framed_msg+0x300>
 80148b2:	3302      	adds	r3, #2
 80148b4:	4422      	add	r2, r4
 80148b6:	7891      	ldrb	r1, [r2, #2]
 80148b8:	085a      	lsrs	r2, r3, #1
 80148ba:	fba5 0202 	umull	r0, r2, r5, r2
 80148be:	297e      	cmp	r1, #126	; 0x7e
 80148c0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80148c4:	fb0c 3312 	mls	r3, ip, r2, r3
 80148c8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80148cc:	f000 80a1 	beq.w	8014a12 <uxr_read_framed_msg+0x4fe>
 80148d0:	f081 0120 	eor.w	r1, r1, #32
 80148d4:	e680      	b.n	80145d8 <uxr_read_framed_msg+0xc4>
 80148d6:	f103 0c01 	add.w	ip, r3, #1
 80148da:	202a      	movs	r0, #42	; 0x2a
 80148dc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80148e0:	fba5 e202 	umull	lr, r2, r5, r2
 80148e4:	0892      	lsrs	r2, r2, #2
 80148e6:	fb00 c212 	mls	r2, r0, r2, ip
 80148ea:	fa5f fc82 	uxtb.w	ip, r2
 80148ee:	4561      	cmp	r1, ip
 80148f0:	d081      	beq.n	80147f6 <uxr_read_framed_msg+0x2e2>
 80148f2:	3302      	adds	r3, #2
 80148f4:	4422      	add	r2, r4
 80148f6:	0859      	lsrs	r1, r3, #1
 80148f8:	7892      	ldrb	r2, [r2, #2]
 80148fa:	fba5 c101 	umull	ip, r1, r5, r1
 80148fe:	2a7e      	cmp	r2, #126	; 0x7e
 8014900:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8014904:	fb00 3311 	mls	r3, r0, r1, r3
 8014908:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801490c:	f000 8091 	beq.w	8014a32 <uxr_read_framed_msg+0x51e>
 8014910:	f082 0220 	eor.w	r2, r2, #32
 8014914:	e636      	b.n	8014584 <uxr_read_framed_msg+0x70>
 8014916:	1c51      	adds	r1, r2, #1
 8014918:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801491c:	084b      	lsrs	r3, r1, #1
 801491e:	fba5 e303 	umull	lr, r3, r5, r3
 8014922:	089b      	lsrs	r3, r3, #2
 8014924:	fb0c 1313 	mls	r3, ip, r3, r1
 8014928:	b2d9      	uxtb	r1, r3
 801492a:	4288      	cmp	r0, r1
 801492c:	d09b      	beq.n	8014866 <uxr_read_framed_msg+0x352>
 801492e:	3202      	adds	r2, #2
 8014930:	4423      	add	r3, r4
 8014932:	0850      	lsrs	r0, r2, #1
 8014934:	789b      	ldrb	r3, [r3, #2]
 8014936:	fba5 1000 	umull	r1, r0, r5, r0
 801493a:	2b7e      	cmp	r3, #126	; 0x7e
 801493c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8014940:	fb0c 2210 	mls	r2, ip, r0, r2
 8014944:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014948:	d077      	beq.n	8014a3a <uxr_read_framed_msg+0x526>
 801494a:	f083 0120 	eor.w	r1, r3, #32
 801494e:	e6ea      	b.n	8014726 <uxr_read_framed_msg+0x212>
 8014950:	f103 0c01 	add.w	ip, r3, #1
 8014954:	202a      	movs	r0, #42	; 0x2a
 8014956:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801495a:	fba5 e202 	umull	lr, r2, r5, r2
 801495e:	0892      	lsrs	r2, r2, #2
 8014960:	fb00 c212 	mls	r2, r0, r2, ip
 8014964:	fa5f fc82 	uxtb.w	ip, r2
 8014968:	4561      	cmp	r1, ip
 801496a:	f43f af57 	beq.w	801481c <uxr_read_framed_msg+0x308>
 801496e:	3302      	adds	r3, #2
 8014970:	4422      	add	r2, r4
 8014972:	7891      	ldrb	r1, [r2, #2]
 8014974:	085a      	lsrs	r2, r3, #1
 8014976:	fba5 c202 	umull	ip, r2, r5, r2
 801497a:	297e      	cmp	r1, #126	; 0x7e
 801497c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8014980:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014984:	fb00 3312 	mls	r3, r0, r2, r3
 8014988:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801498c:	f43f af46 	beq.w	801481c <uxr_read_framed_msg+0x308>
 8014990:	f081 0120 	eor.w	r1, r1, #32
 8014994:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8014998:	e6ea      	b.n	8014770 <uxr_read_framed_msg+0x25c>
 801499a:	1c59      	adds	r1, r3, #1
 801499c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80149a0:	084a      	lsrs	r2, r1, #1
 80149a2:	fba5 e202 	umull	lr, r2, r5, r2
 80149a6:	0892      	lsrs	r2, r2, #2
 80149a8:	fb0c 1212 	mls	r2, ip, r2, r1
 80149ac:	b2d1      	uxtb	r1, r2
 80149ae:	4288      	cmp	r0, r1
 80149b0:	f43f af21 	beq.w	80147f6 <uxr_read_framed_msg+0x2e2>
 80149b4:	3302      	adds	r3, #2
 80149b6:	4422      	add	r2, r4
 80149b8:	7891      	ldrb	r1, [r2, #2]
 80149ba:	085a      	lsrs	r2, r3, #1
 80149bc:	fba5 0202 	umull	r0, r2, r5, r2
 80149c0:	297e      	cmp	r1, #126	; 0x7e
 80149c2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80149c6:	fb0c 3312 	mls	r3, ip, r2, r3
 80149ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80149ce:	d030      	beq.n	8014a32 <uxr_read_framed_msg+0x51e>
 80149d0:	f081 0120 	eor.w	r1, r1, #32
 80149d4:	e65d      	b.n	8014692 <uxr_read_framed_msg+0x17e>
 80149d6:	1c59      	adds	r1, r3, #1
 80149d8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80149dc:	084a      	lsrs	r2, r1, #1
 80149de:	fba5 e202 	umull	lr, r2, r5, r2
 80149e2:	0892      	lsrs	r2, r2, #2
 80149e4:	fb0c 1212 	mls	r2, ip, r2, r1
 80149e8:	b2d1      	uxtb	r1, r2
 80149ea:	4288      	cmp	r0, r1
 80149ec:	f43f af12 	beq.w	8014814 <uxr_read_framed_msg+0x300>
 80149f0:	3302      	adds	r3, #2
 80149f2:	4422      	add	r2, r4
 80149f4:	7891      	ldrb	r1, [r2, #2]
 80149f6:	085a      	lsrs	r2, r3, #1
 80149f8:	fba5 0202 	umull	r0, r2, r5, r2
 80149fc:	297e      	cmp	r1, #126	; 0x7e
 80149fe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014a02:	fb0c 3312 	mls	r3, ip, r2, r3
 8014a06:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014a0a:	d002      	beq.n	8014a12 <uxr_read_framed_msg+0x4fe>
 8014a0c:	f081 0120 	eor.w	r1, r1, #32
 8014a10:	e66a      	b.n	80146e8 <uxr_read_framed_msg+0x1d4>
 8014a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a14:	9300      	str	r3, [sp, #0]
 8014a16:	2302      	movs	r3, #2
 8014a18:	9301      	str	r3, [sp, #4]
 8014a1a:	464a      	mov	r2, r9
 8014a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a1e:	4641      	mov	r1, r8
 8014a20:	4620      	mov	r0, r4
 8014a22:	f7ff fce3 	bl	80143ec <uxr_framing_read_transport>
 8014a26:	2800      	cmp	r0, #0
 8014a28:	f47f aef2 	bne.w	8014810 <uxr_read_framed_msg+0x2fc>
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	7023      	strb	r3, [r4, #0]
 8014a30:	e581      	b.n	8014536 <uxr_read_framed_msg+0x22>
 8014a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a34:	9300      	str	r3, [sp, #0]
 8014a36:	2301      	movs	r3, #1
 8014a38:	e7ee      	b.n	8014a18 <uxr_read_framed_msg+0x504>
 8014a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	2303      	movs	r3, #3
 8014a40:	e7ea      	b.n	8014a18 <uxr_read_framed_msg+0x504>
 8014a42:	bf00      	nop

08014a44 <rcl_get_default_domain_id>:
 8014a44:	b530      	push	{r4, r5, lr}
 8014a46:	2300      	movs	r3, #0
 8014a48:	b083      	sub	sp, #12
 8014a4a:	9300      	str	r3, [sp, #0]
 8014a4c:	b1d0      	cbz	r0, 8014a84 <rcl_get_default_domain_id+0x40>
 8014a4e:	4604      	mov	r4, r0
 8014a50:	4669      	mov	r1, sp
 8014a52:	4815      	ldr	r0, [pc, #84]	; (8014aa8 <rcl_get_default_domain_id+0x64>)
 8014a54:	f7fd f912 	bl	8011c7c <rcutils_get_env>
 8014a58:	4602      	mov	r2, r0
 8014a5a:	b110      	cbz	r0, 8014a62 <rcl_get_default_domain_id+0x1e>
 8014a5c:	2001      	movs	r0, #1
 8014a5e:	b003      	add	sp, #12
 8014a60:	bd30      	pop	{r4, r5, pc}
 8014a62:	9b00      	ldr	r3, [sp, #0]
 8014a64:	b18b      	cbz	r3, 8014a8a <rcl_get_default_domain_id+0x46>
 8014a66:	7818      	ldrb	r0, [r3, #0]
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d0f8      	beq.n	8014a5e <rcl_get_default_domain_id+0x1a>
 8014a6c:	a901      	add	r1, sp, #4
 8014a6e:	4618      	mov	r0, r3
 8014a70:	9201      	str	r2, [sp, #4]
 8014a72:	f000 fe7b 	bl	801576c <strtoul>
 8014a76:	4605      	mov	r5, r0
 8014a78:	b150      	cbz	r0, 8014a90 <rcl_get_default_domain_id+0x4c>
 8014a7a:	1c43      	adds	r3, r0, #1
 8014a7c:	d00d      	beq.n	8014a9a <rcl_get_default_domain_id+0x56>
 8014a7e:	2000      	movs	r0, #0
 8014a80:	6025      	str	r5, [r4, #0]
 8014a82:	e7ec      	b.n	8014a5e <rcl_get_default_domain_id+0x1a>
 8014a84:	200b      	movs	r0, #11
 8014a86:	b003      	add	sp, #12
 8014a88:	bd30      	pop	{r4, r5, pc}
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	b003      	add	sp, #12
 8014a8e:	bd30      	pop	{r4, r5, pc}
 8014a90:	9b01      	ldr	r3, [sp, #4]
 8014a92:	781b      	ldrb	r3, [r3, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d0f2      	beq.n	8014a7e <rcl_get_default_domain_id+0x3a>
 8014a98:	e7e0      	b.n	8014a5c <rcl_get_default_domain_id+0x18>
 8014a9a:	f001 f8df 	bl	8015c5c <__errno>
 8014a9e:	6803      	ldr	r3, [r0, #0]
 8014aa0:	2b22      	cmp	r3, #34	; 0x22
 8014aa2:	d1ec      	bne.n	8014a7e <rcl_get_default_domain_id+0x3a>
 8014aa4:	e7da      	b.n	8014a5c <rcl_get_default_domain_id+0x18>
 8014aa6:	bf00      	nop
 8014aa8:	080174c0 	.word	0x080174c0

08014aac <rcl_expand_topic_name>:
 8014aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab0:	b08d      	sub	sp, #52	; 0x34
 8014ab2:	4698      	mov	r8, r3
 8014ab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ab6:	9207      	str	r2, [sp, #28]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	bf18      	it	ne
 8014abc:	f1b8 0f00 	cmpne.w	r8, #0
 8014ac0:	bf0c      	ite	eq
 8014ac2:	2301      	moveq	r3, #1
 8014ac4:	2300      	movne	r3, #0
 8014ac6:	2a00      	cmp	r2, #0
 8014ac8:	bf08      	it	eq
 8014aca:	f043 0301 	orreq.w	r3, r3, #1
 8014ace:	2900      	cmp	r1, #0
 8014ad0:	bf08      	it	eq
 8014ad2:	f043 0301 	orreq.w	r3, r3, #1
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d13d      	bne.n	8014b56 <rcl_expand_topic_name+0xaa>
 8014ada:	fab0 f280 	clz	r2, r0
 8014ade:	4604      	mov	r4, r0
 8014ae0:	0952      	lsrs	r2, r2, #5
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d037      	beq.n	8014b56 <rcl_expand_topic_name+0xaa>
 8014ae6:	460f      	mov	r7, r1
 8014ae8:	a90b      	add	r1, sp, #44	; 0x2c
 8014aea:	f000 f9ed 	bl	8014ec8 <rcl_validate_topic_name>
 8014aee:	4605      	mov	r5, r0
 8014af0:	bb68      	cbnz	r0, 8014b4e <rcl_expand_topic_name+0xa2>
 8014af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d137      	bne.n	8014b68 <rcl_expand_topic_name+0xbc>
 8014af8:	4602      	mov	r2, r0
 8014afa:	a90b      	add	r1, sp, #44	; 0x2c
 8014afc:	4638      	mov	r0, r7
 8014afe:	f7fd fced 	bl	80124dc <rmw_validate_node_name>
 8014b02:	bb68      	cbnz	r0, 8014b60 <rcl_expand_topic_name+0xb4>
 8014b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d133      	bne.n	8014b72 <rcl_expand_topic_name+0xc6>
 8014b0a:	462a      	mov	r2, r5
 8014b0c:	a90b      	add	r1, sp, #44	; 0x2c
 8014b0e:	9807      	ldr	r0, [sp, #28]
 8014b10:	f7fd fcc6 	bl	80124a0 <rmw_validate_namespace>
 8014b14:	bb20      	cbnz	r0, 8014b60 <rcl_expand_topic_name+0xb4>
 8014b16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014b18:	2d00      	cmp	r5, #0
 8014b1a:	f040 80a2 	bne.w	8014c62 <rcl_expand_topic_name+0x1b6>
 8014b1e:	217b      	movs	r1, #123	; 0x7b
 8014b20:	4620      	mov	r0, r4
 8014b22:	f000 ffb9 	bl	8015a98 <strchr>
 8014b26:	7823      	ldrb	r3, [r4, #0]
 8014b28:	4681      	mov	r9, r0
 8014b2a:	bb20      	cbnz	r0, 8014b76 <rcl_expand_topic_name+0xca>
 8014b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8014b2e:	d122      	bne.n	8014b76 <rcl_expand_topic_name+0xca>
 8014b30:	ab19      	add	r3, sp, #100	; 0x64
 8014b32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014b36:	ab16      	add	r3, sp, #88	; 0x58
 8014b38:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014b40:	f7fd f9fe 	bl	8011f40 <rcutils_strdup>
 8014b44:	2800      	cmp	r0, #0
 8014b46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b48:	bf08      	it	eq
 8014b4a:	250a      	moveq	r5, #10
 8014b4c:	6018      	str	r0, [r3, #0]
 8014b4e:	4628      	mov	r0, r5
 8014b50:	b00d      	add	sp, #52	; 0x34
 8014b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b56:	250b      	movs	r5, #11
 8014b58:	4628      	mov	r0, r5
 8014b5a:	b00d      	add	sp, #52	; 0x34
 8014b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b60:	f7fc f91c 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8014b64:	4605      	mov	r5, r0
 8014b66:	e7f2      	b.n	8014b4e <rcl_expand_topic_name+0xa2>
 8014b68:	2567      	movs	r5, #103	; 0x67
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	b00d      	add	sp, #52	; 0x34
 8014b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b72:	25c9      	movs	r5, #201	; 0xc9
 8014b74:	e7eb      	b.n	8014b4e <rcl_expand_topic_name+0xa2>
 8014b76:	2b7e      	cmp	r3, #126	; 0x7e
 8014b78:	d075      	beq.n	8014c66 <rcl_expand_topic_name+0x1ba>
 8014b7a:	f1b9 0f00 	cmp.w	r9, #0
 8014b7e:	f000 80c2 	beq.w	8014d06 <rcl_expand_topic_name+0x25a>
 8014b82:	2300      	movs	r3, #0
 8014b84:	46a2      	mov	sl, r4
 8014b86:	461e      	mov	r6, r3
 8014b88:	9508      	str	r5, [sp, #32]
 8014b8a:	4655      	mov	r5, sl
 8014b8c:	9409      	str	r4, [sp, #36]	; 0x24
 8014b8e:	46b2      	mov	sl, r6
 8014b90:	464c      	mov	r4, r9
 8014b92:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8014b96:	2c00      	cmp	r4, #0
 8014b98:	f000 80ae 	beq.w	8014cf8 <rcl_expand_topic_name+0x24c>
 8014b9c:	217d      	movs	r1, #125	; 0x7d
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	f000 ff7a 	bl	8015a98 <strchr>
 8014ba4:	eba0 0904 	sub.w	r9, r0, r4
 8014ba8:	4621      	mov	r1, r4
 8014baa:	4869      	ldr	r0, [pc, #420]	; (8014d50 <rcl_expand_topic_name+0x2a4>)
 8014bac:	f109 0601 	add.w	r6, r9, #1
 8014bb0:	4632      	mov	r2, r6
 8014bb2:	f000 ff7e 	bl	8015ab2 <strncmp>
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	d051      	beq.n	8014c5e <rcl_expand_topic_name+0x1b2>
 8014bba:	4632      	mov	r2, r6
 8014bbc:	4621      	mov	r1, r4
 8014bbe:	4865      	ldr	r0, [pc, #404]	; (8014d54 <rcl_expand_topic_name+0x2a8>)
 8014bc0:	f000 ff77 	bl	8015ab2 <strncmp>
 8014bc4:	b128      	cbz	r0, 8014bd2 <rcl_expand_topic_name+0x126>
 8014bc6:	4632      	mov	r2, r6
 8014bc8:	4621      	mov	r1, r4
 8014bca:	4863      	ldr	r0, [pc, #396]	; (8014d58 <rcl_expand_topic_name+0x2ac>)
 8014bcc:	f000 ff71 	bl	8015ab2 <strncmp>
 8014bd0:	bb38      	cbnz	r0, 8014c22 <rcl_expand_topic_name+0x176>
 8014bd2:	46d9      	mov	r9, fp
 8014bd4:	ab18      	add	r3, sp, #96	; 0x60
 8014bd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014bda:	ab16      	add	r3, sp, #88	; 0x58
 8014bdc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014be0:	4620      	mov	r0, r4
 8014be2:	4631      	mov	r1, r6
 8014be4:	cb0c      	ldmia	r3, {r2, r3}
 8014be6:	f7fd f9cd 	bl	8011f84 <rcutils_strndup>
 8014bea:	4604      	mov	r4, r0
 8014bec:	2800      	cmp	r0, #0
 8014bee:	f000 80a3 	beq.w	8014d38 <rcl_expand_topic_name+0x28c>
 8014bf2:	464a      	mov	r2, r9
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	ab16      	add	r3, sp, #88	; 0x58
 8014bf8:	4621      	mov	r1, r4
 8014bfa:	f7fd f8a1 	bl	8011d40 <rcutils_repl_str>
 8014bfe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014c00:	4605      	mov	r5, r0
 8014c02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c04:	4620      	mov	r0, r4
 8014c06:	4798      	blx	r3
 8014c08:	4650      	mov	r0, sl
 8014c0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014c0e:	4798      	blx	r3
 8014c10:	2d00      	cmp	r5, #0
 8014c12:	d06c      	beq.n	8014cee <rcl_expand_topic_name+0x242>
 8014c14:	217b      	movs	r1, #123	; 0x7b
 8014c16:	4628      	mov	r0, r5
 8014c18:	f000 ff3e 	bl	8015a98 <strchr>
 8014c1c:	46aa      	mov	sl, r5
 8014c1e:	4604      	mov	r4, r0
 8014c20:	e7b9      	b.n	8014b96 <rcl_expand_topic_name+0xea>
 8014c22:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014c26:	1c61      	adds	r1, r4, #1
 8014c28:	4640      	mov	r0, r8
 8014c2a:	f7fd fac3 	bl	80121b4 <rcutils_string_map_getn>
 8014c2e:	4681      	mov	r9, r0
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d1cf      	bne.n	8014bd4 <rcl_expand_topic_name+0x128>
 8014c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c36:	aa18      	add	r2, sp, #96	; 0x60
 8014c38:	2569      	movs	r5, #105	; 0x69
 8014c3a:	6018      	str	r0, [r3, #0]
 8014c3c:	ab16      	add	r3, sp, #88	; 0x58
 8014c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014c40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c44:	4631      	mov	r1, r6
 8014c46:	4620      	mov	r0, r4
 8014c48:	cb0c      	ldmia	r3, {r2, r3}
 8014c4a:	f7fd f99b 	bl	8011f84 <rcutils_strndup>
 8014c4e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c52:	4798      	blx	r3
 8014c54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014c58:	4650      	mov	r0, sl
 8014c5a:	4798      	blx	r3
 8014c5c:	e777      	b.n	8014b4e <rcl_expand_topic_name+0xa2>
 8014c5e:	46b9      	mov	r9, r7
 8014c60:	e7b8      	b.n	8014bd4 <rcl_expand_topic_name+0x128>
 8014c62:	25ca      	movs	r5, #202	; 0xca
 8014c64:	e773      	b.n	8014b4e <rcl_expand_topic_name+0xa2>
 8014c66:	9e07      	ldr	r6, [sp, #28]
 8014c68:	4630      	mov	r0, r6
 8014c6a:	f7eb fb4b 	bl	8000304 <strlen>
 8014c6e:	4a3b      	ldr	r2, [pc, #236]	; (8014d5c <rcl_expand_topic_name+0x2b0>)
 8014c70:	4b3b      	ldr	r3, [pc, #236]	; (8014d60 <rcl_expand_topic_name+0x2b4>)
 8014c72:	9603      	str	r6, [sp, #12]
 8014c74:	2801      	cmp	r0, #1
 8014c76:	bf18      	it	ne
 8014c78:	4613      	movne	r3, r2
 8014c7a:	9704      	str	r7, [sp, #16]
 8014c7c:	9302      	str	r3, [sp, #8]
 8014c7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014c80:	9300      	str	r3, [sp, #0]
 8014c82:	1c63      	adds	r3, r4, #1
 8014c84:	9305      	str	r3, [sp, #20]
 8014c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c8a:	9301      	str	r3, [sp, #4]
 8014c8c:	ab16      	add	r3, sp, #88	; 0x58
 8014c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c90:	f7fd f81c 	bl	8011ccc <rcutils_format_string_limit>
 8014c94:	4606      	mov	r6, r0
 8014c96:	b350      	cbz	r0, 8014cee <rcl_expand_topic_name+0x242>
 8014c98:	f1b9 0f00 	cmp.w	r9, #0
 8014c9c:	d005      	beq.n	8014caa <rcl_expand_topic_name+0x1fe>
 8014c9e:	217b      	movs	r1, #123	; 0x7b
 8014ca0:	46b2      	mov	sl, r6
 8014ca2:	f000 fef9 	bl	8015a98 <strchr>
 8014ca6:	4681      	mov	r9, r0
 8014ca8:	e76e      	b.n	8014b88 <rcl_expand_topic_name+0xdc>
 8014caa:	7833      	ldrb	r3, [r6, #0]
 8014cac:	2b2f      	cmp	r3, #47	; 0x2f
 8014cae:	d01b      	beq.n	8014ce8 <rcl_expand_topic_name+0x23c>
 8014cb0:	9c07      	ldr	r4, [sp, #28]
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f7eb fb26 	bl	8000304 <strlen>
 8014cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014cbc:	4a29      	ldr	r2, [pc, #164]	; (8014d64 <rcl_expand_topic_name+0x2b8>)
 8014cbe:	9301      	str	r3, [sp, #4]
 8014cc0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014cc2:	9604      	str	r6, [sp, #16]
 8014cc4:	9300      	str	r3, [sp, #0]
 8014cc6:	4b28      	ldr	r3, [pc, #160]	; (8014d68 <rcl_expand_topic_name+0x2bc>)
 8014cc8:	9403      	str	r4, [sp, #12]
 8014cca:	2801      	cmp	r0, #1
 8014ccc:	bf18      	it	ne
 8014cce:	4613      	movne	r3, r2
 8014cd0:	9302      	str	r3, [sp, #8]
 8014cd2:	ab16      	add	r3, sp, #88	; 0x58
 8014cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014cd6:	f7fc fff9 	bl	8011ccc <rcutils_format_string_limit>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014cde:	4630      	mov	r0, r6
 8014ce0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014ce2:	461e      	mov	r6, r3
 8014ce4:	4790      	blx	r2
 8014ce6:	b116      	cbz	r6, 8014cee <rcl_expand_topic_name+0x242>
 8014ce8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014cea:	601e      	str	r6, [r3, #0]
 8014cec:	e72f      	b.n	8014b4e <rcl_expand_topic_name+0xa2>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014cf2:	250a      	movs	r5, #10
 8014cf4:	6013      	str	r3, [r2, #0]
 8014cf6:	e72a      	b.n	8014b4e <rcl_expand_topic_name+0xa2>
 8014cf8:	4653      	mov	r3, sl
 8014cfa:	4656      	mov	r6, sl
 8014cfc:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d1d2      	bne.n	8014caa <rcl_expand_topic_name+0x1fe>
 8014d04:	7823      	ldrb	r3, [r4, #0]
 8014d06:	2b2f      	cmp	r3, #47	; 0x2f
 8014d08:	d01e      	beq.n	8014d48 <rcl_expand_topic_name+0x29c>
 8014d0a:	9e07      	ldr	r6, [sp, #28]
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	f7eb faf9 	bl	8000304 <strlen>
 8014d12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014d14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d18:	9603      	str	r6, [sp, #12]
 8014d1a:	9404      	str	r4, [sp, #16]
 8014d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8014d20:	4a10      	ldr	r2, [pc, #64]	; (8014d64 <rcl_expand_topic_name+0x2b8>)
 8014d22:	4b11      	ldr	r3, [pc, #68]	; (8014d68 <rcl_expand_topic_name+0x2bc>)
 8014d24:	2801      	cmp	r0, #1
 8014d26:	bf18      	it	ne
 8014d28:	4613      	movne	r3, r2
 8014d2a:	9302      	str	r3, [sp, #8]
 8014d2c:	ab16      	add	r3, sp, #88	; 0x58
 8014d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014d30:	f7fc ffcc 	bl	8011ccc <rcutils_format_string_limit>
 8014d34:	4606      	mov	r6, r0
 8014d36:	e7d6      	b.n	8014ce6 <rcl_expand_topic_name+0x23a>
 8014d38:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8014d3c:	4650      	mov	r0, sl
 8014d3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d40:	6014      	str	r4, [r2, #0]
 8014d42:	250a      	movs	r5, #10
 8014d44:	4798      	blx	r3
 8014d46:	e702      	b.n	8014b4e <rcl_expand_topic_name+0xa2>
 8014d48:	2300      	movs	r3, #0
 8014d4a:	461e      	mov	r6, r3
 8014d4c:	e7cc      	b.n	8014ce8 <rcl_expand_topic_name+0x23c>
 8014d4e:	bf00      	nop
 8014d50:	080174d8 	.word	0x080174d8
 8014d54:	080174e0 	.word	0x080174e0
 8014d58:	080174e8 	.word	0x080174e8
 8014d5c:	080174d0 	.word	0x080174d0
 8014d60:	08016cb8 	.word	0x08016cb8
 8014d64:	08016e4c 	.word	0x08016e4c
 8014d68:	08016cc8 	.word	0x08016cc8

08014d6c <rcl_get_default_topic_name_substitutions>:
 8014d6c:	2800      	cmp	r0, #0
 8014d6e:	bf0c      	ite	eq
 8014d70:	200b      	moveq	r0, #11
 8014d72:	2000      	movne	r0, #0
 8014d74:	4770      	bx	lr
 8014d76:	bf00      	nop

08014d78 <rcl_get_zero_initialized_guard_condition>:
 8014d78:	4a03      	ldr	r2, [pc, #12]	; (8014d88 <rcl_get_zero_initialized_guard_condition+0x10>)
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d80:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d84:	4618      	mov	r0, r3
 8014d86:	4770      	bx	lr
 8014d88:	080174f4 	.word	0x080174f4

08014d8c <rcl_guard_condition_init_from_rmw>:
 8014d8c:	b082      	sub	sp, #8
 8014d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d92:	b086      	sub	sp, #24
 8014d94:	4604      	mov	r4, r0
 8014d96:	460e      	mov	r6, r1
 8014d98:	4615      	mov	r5, r2
 8014d9a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014d9e:	f10d 0e04 	add.w	lr, sp, #4
 8014da2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014da6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014daa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014dae:	f8dc 3000 	ldr.w	r3, [ip]
 8014db2:	a801      	add	r0, sp, #4
 8014db4:	f8ce 3000 	str.w	r3, [lr]
 8014db8:	f7f7 fdd2 	bl	800c960 <rcutils_allocator_is_valid>
 8014dbc:	f080 0301 	eor.w	r3, r0, #1
 8014dc0:	b2db      	uxtb	r3, r3
 8014dc2:	bb3b      	cbnz	r3, 8014e14 <rcl_guard_condition_init_from_rmw+0x88>
 8014dc4:	b334      	cbz	r4, 8014e14 <rcl_guard_condition_init_from_rmw+0x88>
 8014dc6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014dca:	f1b8 0f00 	cmp.w	r8, #0
 8014dce:	d11a      	bne.n	8014e06 <rcl_guard_condition_init_from_rmw+0x7a>
 8014dd0:	b305      	cbz	r5, 8014e14 <rcl_guard_condition_init_from_rmw+0x88>
 8014dd2:	4628      	mov	r0, r5
 8014dd4:	f7fc f800 	bl	8010dd8 <rcl_context_is_valid>
 8014dd8:	b1f0      	cbz	r0, 8014e18 <rcl_guard_condition_init_from_rmw+0x8c>
 8014dda:	9b01      	ldr	r3, [sp, #4]
 8014ddc:	201c      	movs	r0, #28
 8014dde:	9905      	ldr	r1, [sp, #20]
 8014de0:	4798      	blx	r3
 8014de2:	4607      	mov	r7, r0
 8014de4:	6060      	str	r0, [r4, #4]
 8014de6:	b320      	cbz	r0, 8014e32 <rcl_guard_condition_init_from_rmw+0xa6>
 8014de8:	b1c6      	cbz	r6, 8014e1c <rcl_guard_condition_init_from_rmw+0x90>
 8014dea:	6006      	str	r6, [r0, #0]
 8014dec:	f880 8004 	strb.w	r8, [r0, #4]
 8014df0:	ac01      	add	r4, sp, #4
 8014df2:	f107 0c08 	add.w	ip, r7, #8
 8014df6:	2500      	movs	r5, #0
 8014df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	f8cc 3000 	str.w	r3, [ip]
 8014e04:	e000      	b.n	8014e08 <rcl_guard_condition_init_from_rmw+0x7c>
 8014e06:	2564      	movs	r5, #100	; 0x64
 8014e08:	4628      	mov	r0, r5
 8014e0a:	b006      	add	sp, #24
 8014e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e10:	b002      	add	sp, #8
 8014e12:	4770      	bx	lr
 8014e14:	250b      	movs	r5, #11
 8014e16:	e7f7      	b.n	8014e08 <rcl_guard_condition_init_from_rmw+0x7c>
 8014e18:	2565      	movs	r5, #101	; 0x65
 8014e1a:	e7f5      	b.n	8014e08 <rcl_guard_condition_init_from_rmw+0x7c>
 8014e1c:	6828      	ldr	r0, [r5, #0]
 8014e1e:	3028      	adds	r0, #40	; 0x28
 8014e20:	f000 fa42 	bl	80152a8 <rmw_create_guard_condition>
 8014e24:	6038      	str	r0, [r7, #0]
 8014e26:	6867      	ldr	r7, [r4, #4]
 8014e28:	683e      	ldr	r6, [r7, #0]
 8014e2a:	b126      	cbz	r6, 8014e36 <rcl_guard_condition_init_from_rmw+0xaa>
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	713b      	strb	r3, [r7, #4]
 8014e30:	e7de      	b.n	8014df0 <rcl_guard_condition_init_from_rmw+0x64>
 8014e32:	250a      	movs	r5, #10
 8014e34:	e7e8      	b.n	8014e08 <rcl_guard_condition_init_from_rmw+0x7c>
 8014e36:	9b02      	ldr	r3, [sp, #8]
 8014e38:	4638      	mov	r0, r7
 8014e3a:	9905      	ldr	r1, [sp, #20]
 8014e3c:	2501      	movs	r5, #1
 8014e3e:	4798      	blx	r3
 8014e40:	6066      	str	r6, [r4, #4]
 8014e42:	e7e1      	b.n	8014e08 <rcl_guard_condition_init_from_rmw+0x7c>

08014e44 <rcl_guard_condition_fini>:
 8014e44:	b570      	push	{r4, r5, r6, lr}
 8014e46:	b082      	sub	sp, #8
 8014e48:	b1f0      	cbz	r0, 8014e88 <rcl_guard_condition_fini+0x44>
 8014e4a:	6843      	ldr	r3, [r0, #4]
 8014e4c:	4604      	mov	r4, r0
 8014e4e:	b163      	cbz	r3, 8014e6a <rcl_guard_condition_fini+0x26>
 8014e50:	6818      	ldr	r0, [r3, #0]
 8014e52:	68de      	ldr	r6, [r3, #12]
 8014e54:	6999      	ldr	r1, [r3, #24]
 8014e56:	b160      	cbz	r0, 8014e72 <rcl_guard_condition_fini+0x2e>
 8014e58:	791d      	ldrb	r5, [r3, #4]
 8014e5a:	b965      	cbnz	r5, 8014e76 <rcl_guard_condition_fini+0x32>
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	47b0      	blx	r6
 8014e60:	2300      	movs	r3, #0
 8014e62:	4628      	mov	r0, r5
 8014e64:	6063      	str	r3, [r4, #4]
 8014e66:	b002      	add	sp, #8
 8014e68:	bd70      	pop	{r4, r5, r6, pc}
 8014e6a:	461d      	mov	r5, r3
 8014e6c:	4628      	mov	r0, r5
 8014e6e:	b002      	add	sp, #8
 8014e70:	bd70      	pop	{r4, r5, r6, pc}
 8014e72:	4605      	mov	r5, r0
 8014e74:	e7f2      	b.n	8014e5c <rcl_guard_condition_fini+0x18>
 8014e76:	9101      	str	r1, [sp, #4]
 8014e78:	f000 fa2c 	bl	80152d4 <rmw_destroy_guard_condition>
 8014e7c:	1e05      	subs	r5, r0, #0
 8014e7e:	6863      	ldr	r3, [r4, #4]
 8014e80:	9901      	ldr	r1, [sp, #4]
 8014e82:	bf18      	it	ne
 8014e84:	2501      	movne	r5, #1
 8014e86:	e7e9      	b.n	8014e5c <rcl_guard_condition_fini+0x18>
 8014e88:	250b      	movs	r5, #11
 8014e8a:	4628      	mov	r0, r5
 8014e8c:	b002      	add	sp, #8
 8014e8e:	bd70      	pop	{r4, r5, r6, pc}

08014e90 <rcl_guard_condition_get_default_options>:
 8014e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e92:	b087      	sub	sp, #28
 8014e94:	4606      	mov	r6, r0
 8014e96:	4c0b      	ldr	r4, [pc, #44]	; (8014ec4 <rcl_guard_condition_get_default_options+0x34>)
 8014e98:	4668      	mov	r0, sp
 8014e9a:	f7f7 fd53 	bl	800c944 <rcutils_get_default_allocator>
 8014e9e:	46ee      	mov	lr, sp
 8014ea0:	46a4      	mov	ip, r4
 8014ea2:	4625      	mov	r5, r4
 8014ea4:	4634      	mov	r4, r6
 8014ea6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014eaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014eb0:	f8de 7000 	ldr.w	r7, [lr]
 8014eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f8cc 7000 	str.w	r7, [ip]
 8014ebc:	6027      	str	r7, [r4, #0]
 8014ebe:	b007      	add	sp, #28
 8014ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	24010ba4 	.word	0x24010ba4

08014ec8 <rcl_validate_topic_name>:
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	f000 8089 	beq.w	8014fe0 <rcl_validate_topic_name+0x118>
 8014ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ed2:	460e      	mov	r6, r1
 8014ed4:	2900      	cmp	r1, #0
 8014ed6:	f000 8085 	beq.w	8014fe4 <rcl_validate_topic_name+0x11c>
 8014eda:	4604      	mov	r4, r0
 8014edc:	4617      	mov	r7, r2
 8014ede:	f7eb fa11 	bl	8000304 <strlen>
 8014ee2:	b1b0      	cbz	r0, 8014f12 <rcl_validate_topic_name+0x4a>
 8014ee4:	f894 e000 	ldrb.w	lr, [r4]
 8014ee8:	f8df c160 	ldr.w	ip, [pc, #352]	; 801504c <rcl_validate_topic_name+0x184>
 8014eec:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8014ef0:	f013 0304 	ands.w	r3, r3, #4
 8014ef4:	d139      	bne.n	8014f6a <rcl_validate_topic_name+0xa2>
 8014ef6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8014efa:	f814 2008 	ldrb.w	r2, [r4, r8]
 8014efe:	2a2f      	cmp	r2, #47	; 0x2f
 8014f00:	d10f      	bne.n	8014f22 <rcl_validate_topic_name+0x5a>
 8014f02:	2202      	movs	r2, #2
 8014f04:	6032      	str	r2, [r6, #0]
 8014f06:	b3a7      	cbz	r7, 8014f72 <rcl_validate_topic_name+0xaa>
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f8c7 8000 	str.w	r8, [r7]
 8014f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f12:	2301      	movs	r3, #1
 8014f14:	6033      	str	r3, [r6, #0]
 8014f16:	b367      	cbz	r7, 8014f72 <rcl_validate_topic_name+0xaa>
 8014f18:	2300      	movs	r3, #0
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	603b      	str	r3, [r7, #0]
 8014f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f22:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8014f26:	461d      	mov	r5, r3
 8014f28:	4619      	mov	r1, r3
 8014f2a:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014f2e:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8014f32:	f1b9 0f09 	cmp.w	r9, #9
 8014f36:	d91f      	bls.n	8014f78 <rcl_validate_topic_name+0xb0>
 8014f38:	f022 0920 	bic.w	r9, r2, #32
 8014f3c:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8014f40:	f1b9 0f19 	cmp.w	r9, #25
 8014f44:	d918      	bls.n	8014f78 <rcl_validate_topic_name+0xb0>
 8014f46:	2a5f      	cmp	r2, #95	; 0x5f
 8014f48:	d024      	beq.n	8014f94 <rcl_validate_topic_name+0xcc>
 8014f4a:	2a2f      	cmp	r2, #47	; 0x2f
 8014f4c:	d058      	beq.n	8015000 <rcl_validate_topic_name+0x138>
 8014f4e:	2a7e      	cmp	r2, #126	; 0x7e
 8014f50:	d04a      	beq.n	8014fe8 <rcl_validate_topic_name+0x120>
 8014f52:	2a7b      	cmp	r2, #123	; 0x7b
 8014f54:	d05b      	beq.n	801500e <rcl_validate_topic_name+0x146>
 8014f56:	2a7d      	cmp	r2, #125	; 0x7d
 8014f58:	d169      	bne.n	801502e <rcl_validate_topic_name+0x166>
 8014f5a:	2d00      	cmp	r5, #0
 8014f5c:	d15c      	bne.n	8015018 <rcl_validate_topic_name+0x150>
 8014f5e:	2305      	movs	r3, #5
 8014f60:	6033      	str	r3, [r6, #0]
 8014f62:	b137      	cbz	r7, 8014f72 <rcl_validate_topic_name+0xaa>
 8014f64:	2000      	movs	r0, #0
 8014f66:	6039      	str	r1, [r7, #0]
 8014f68:	e7d9      	b.n	8014f1e <rcl_validate_topic_name+0x56>
 8014f6a:	2304      	movs	r3, #4
 8014f6c:	6033      	str	r3, [r6, #0]
 8014f6e:	2f00      	cmp	r7, #0
 8014f70:	d1d2      	bne.n	8014f18 <rcl_validate_topic_name+0x50>
 8014f72:	2000      	movs	r0, #0
 8014f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f78:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014f7c:	0752      	lsls	r2, r2, #29
 8014f7e:	d509      	bpl.n	8014f94 <rcl_validate_topic_name+0xcc>
 8014f80:	2900      	cmp	r1, #0
 8014f82:	bf0c      	ite	eq
 8014f84:	2200      	moveq	r2, #0
 8014f86:	f005 0201 	andne.w	r2, r5, #1
 8014f8a:	b11a      	cbz	r2, 8014f94 <rcl_validate_topic_name+0xcc>
 8014f8c:	1e4d      	subs	r5, r1, #1
 8014f8e:	429d      	cmp	r5, r3
 8014f90:	d031      	beq.n	8014ff6 <rcl_validate_topic_name+0x12e>
 8014f92:	4615      	mov	r5, r2
 8014f94:	3101      	adds	r1, #1
 8014f96:	4288      	cmp	r0, r1
 8014f98:	d1c7      	bne.n	8014f2a <rcl_validate_topic_name+0x62>
 8014f9a:	2d00      	cmp	r5, #0
 8014f9c:	d142      	bne.n	8015024 <rcl_validate_topic_name+0x15c>
 8014f9e:	4628      	mov	r0, r5
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	e00c      	b.n	8014fbe <rcl_validate_topic_name+0xf6>
 8014fa4:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8014fa8:	d101      	bne.n	8014fae <rcl_validate_topic_name+0xe6>
 8014faa:	2801      	cmp	r0, #1
 8014fac:	d047      	beq.n	801503e <rcl_validate_topic_name+0x176>
 8014fae:	1c5a      	adds	r2, r3, #1
 8014fb0:	428b      	cmp	r3, r1
 8014fb2:	f100 0001 	add.w	r0, r0, #1
 8014fb6:	f104 0401 	add.w	r4, r4, #1
 8014fba:	4613      	mov	r3, r2
 8014fbc:	d22e      	bcs.n	801501c <rcl_validate_topic_name+0x154>
 8014fbe:	4580      	cmp	r8, r0
 8014fc0:	d0f5      	beq.n	8014fae <rcl_validate_topic_name+0xe6>
 8014fc2:	7822      	ldrb	r2, [r4, #0]
 8014fc4:	2a2f      	cmp	r2, #47	; 0x2f
 8014fc6:	d1ed      	bne.n	8014fa4 <rcl_validate_topic_name+0xdc>
 8014fc8:	7862      	ldrb	r2, [r4, #1]
 8014fca:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014fce:	0752      	lsls	r2, r2, #29
 8014fd0:	d5ed      	bpl.n	8014fae <rcl_validate_topic_name+0xe6>
 8014fd2:	2204      	movs	r2, #4
 8014fd4:	6032      	str	r2, [r6, #0]
 8014fd6:	2f00      	cmp	r7, #0
 8014fd8:	d0cb      	beq.n	8014f72 <rcl_validate_topic_name+0xaa>
 8014fda:	2000      	movs	r0, #0
 8014fdc:	603b      	str	r3, [r7, #0]
 8014fde:	e79e      	b.n	8014f1e <rcl_validate_topic_name+0x56>
 8014fe0:	200b      	movs	r0, #11
 8014fe2:	4770      	bx	lr
 8014fe4:	200b      	movs	r0, #11
 8014fe6:	e79a      	b.n	8014f1e <rcl_validate_topic_name+0x56>
 8014fe8:	2900      	cmp	r1, #0
 8014fea:	d0d3      	beq.n	8014f94 <rcl_validate_topic_name+0xcc>
 8014fec:	2306      	movs	r3, #6
 8014fee:	6033      	str	r3, [r6, #0]
 8014ff0:	2f00      	cmp	r7, #0
 8014ff2:	d1b7      	bne.n	8014f64 <rcl_validate_topic_name+0x9c>
 8014ff4:	e7bd      	b.n	8014f72 <rcl_validate_topic_name+0xaa>
 8014ff6:	2309      	movs	r3, #9
 8014ff8:	6033      	str	r3, [r6, #0]
 8014ffa:	2f00      	cmp	r7, #0
 8014ffc:	d1b2      	bne.n	8014f64 <rcl_validate_topic_name+0x9c>
 8014ffe:	e7b8      	b.n	8014f72 <rcl_validate_topic_name+0xaa>
 8015000:	2d00      	cmp	r5, #0
 8015002:	d0c7      	beq.n	8014f94 <rcl_validate_topic_name+0xcc>
 8015004:	2308      	movs	r3, #8
 8015006:	6033      	str	r3, [r6, #0]
 8015008:	2f00      	cmp	r7, #0
 801500a:	d1ab      	bne.n	8014f64 <rcl_validate_topic_name+0x9c>
 801500c:	e7b1      	b.n	8014f72 <rcl_validate_topic_name+0xaa>
 801500e:	2d00      	cmp	r5, #0
 8015010:	d1f8      	bne.n	8015004 <rcl_validate_topic_name+0x13c>
 8015012:	460b      	mov	r3, r1
 8015014:	2501      	movs	r5, #1
 8015016:	e7bd      	b.n	8014f94 <rcl_validate_topic_name+0xcc>
 8015018:	2500      	movs	r5, #0
 801501a:	e7bb      	b.n	8014f94 <rcl_validate_topic_name+0xcc>
 801501c:	2300      	movs	r3, #0
 801501e:	4618      	mov	r0, r3
 8015020:	6033      	str	r3, [r6, #0]
 8015022:	e77c      	b.n	8014f1e <rcl_validate_topic_name+0x56>
 8015024:	2205      	movs	r2, #5
 8015026:	6032      	str	r2, [r6, #0]
 8015028:	2f00      	cmp	r7, #0
 801502a:	d1d6      	bne.n	8014fda <rcl_validate_topic_name+0x112>
 801502c:	e7a1      	b.n	8014f72 <rcl_validate_topic_name+0xaa>
 801502e:	2d00      	cmp	r5, #0
 8015030:	bf14      	ite	ne
 8015032:	2308      	movne	r3, #8
 8015034:	2303      	moveq	r3, #3
 8015036:	6033      	str	r3, [r6, #0]
 8015038:	2f00      	cmp	r7, #0
 801503a:	d193      	bne.n	8014f64 <rcl_validate_topic_name+0x9c>
 801503c:	e799      	b.n	8014f72 <rcl_validate_topic_name+0xaa>
 801503e:	2307      	movs	r3, #7
 8015040:	6033      	str	r3, [r6, #0]
 8015042:	2f00      	cmp	r7, #0
 8015044:	d095      	beq.n	8014f72 <rcl_validate_topic_name+0xaa>
 8015046:	2301      	movs	r3, #1
 8015048:	e7c7      	b.n	8014fda <rcl_validate_topic_name+0x112>
 801504a:	bf00      	nop
 801504c:	0801756c 	.word	0x0801756c

08015050 <on_status>:
 8015050:	b082      	sub	sp, #8
 8015052:	b002      	add	sp, #8
 8015054:	4770      	bx	lr
 8015056:	bf00      	nop

08015058 <on_topic>:
 8015058:	4a23      	ldr	r2, [pc, #140]	; (80150e8 <on_topic+0x90>)
 801505a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801505e:	6812      	ldr	r2, [r2, #0]
 8015060:	b094      	sub	sp, #80	; 0x50
 8015062:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015064:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8015068:	9113      	str	r1, [sp, #76]	; 0x4c
 801506a:	9312      	str	r3, [sp, #72]	; 0x48
 801506c:	b3c2      	cbz	r2, 80150e0 <on_topic+0x88>
 801506e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8015072:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8015076:	e001      	b.n	801507c <on_topic+0x24>
 8015078:	6852      	ldr	r2, [r2, #4]
 801507a:	b38a      	cbz	r2, 80150e0 <on_topic+0x88>
 801507c:	6894      	ldr	r4, [r2, #8]
 801507e:	8aa3      	ldrh	r3, [r4, #20]
 8015080:	428b      	cmp	r3, r1
 8015082:	d1f9      	bne.n	8015078 <on_topic+0x20>
 8015084:	7da3      	ldrb	r3, [r4, #22]
 8015086:	4283      	cmp	r3, r0
 8015088:	d1f6      	bne.n	8015078 <on_topic+0x20>
 801508a:	2248      	movs	r2, #72	; 0x48
 801508c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015090:	4668      	mov	r0, sp
 8015092:	f000 fe18 	bl	8015cc6 <memcpy>
 8015096:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801509a:	4620      	mov	r0, r4
 801509c:	cb0c      	ldmia	r3, {r2, r3}
 801509e:	f7f8 f84b 	bl	800d138 <rmw_uxrce_get_static_input_buffer_for_entity>
 80150a2:	4607      	mov	r7, r0
 80150a4:	b1e0      	cbz	r0, 80150e0 <on_topic+0x88>
 80150a6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80150aa:	462a      	mov	r2, r5
 80150ac:	4630      	mov	r0, r6
 80150ae:	f108 0110 	add.w	r1, r8, #16
 80150b2:	f7fe f855 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 80150b6:	b930      	cbnz	r0, 80150c6 <on_topic+0x6e>
 80150b8:	4639      	mov	r1, r7
 80150ba:	480c      	ldr	r0, [pc, #48]	; (80150ec <on_topic+0x94>)
 80150bc:	b014      	add	sp, #80	; 0x50
 80150be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150c2:	f7fd ba7b 	b.w	80125bc <put_memory>
 80150c6:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80150ca:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 80150ce:	f7fd ff3b 	bl	8012f48 <rmw_uros_epoch_nanos>
 80150d2:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 80150d6:	2305      	movs	r3, #5
 80150d8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80150dc:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80150e0:	b014      	add	sp, #80	; 0x50
 80150e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e6:	bf00      	nop
 80150e8:	24010a74 	.word	0x24010a74
 80150ec:	24010a64 	.word	0x24010a64

080150f0 <on_request>:
 80150f0:	4824      	ldr	r0, [pc, #144]	; (8015184 <on_request+0x94>)
 80150f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150f6:	6800      	ldr	r0, [r0, #0]
 80150f8:	b094      	sub	sp, #80	; 0x50
 80150fa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80150fc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8015100:	9113      	str	r1, [sp, #76]	; 0x4c
 8015102:	2800      	cmp	r0, #0
 8015104:	d03b      	beq.n	801517e <on_request+0x8e>
 8015106:	461d      	mov	r5, r3
 8015108:	e001      	b.n	801510e <on_request+0x1e>
 801510a:	6840      	ldr	r0, [r0, #4]
 801510c:	b3b8      	cbz	r0, 801517e <on_request+0x8e>
 801510e:	6884      	ldr	r4, [r0, #8]
 8015110:	8b21      	ldrh	r1, [r4, #24]
 8015112:	4291      	cmp	r1, r2
 8015114:	d1f9      	bne.n	801510a <on_request+0x1a>
 8015116:	2248      	movs	r2, #72	; 0x48
 8015118:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801511c:	4668      	mov	r0, sp
 801511e:	f000 fdd2 	bl	8015cc6 <memcpy>
 8015122:	f104 0320 	add.w	r3, r4, #32
 8015126:	4620      	mov	r0, r4
 8015128:	cb0c      	ldmia	r3, {r2, r3}
 801512a:	f7f8 f805 	bl	800d138 <rmw_uxrce_get_static_input_buffer_for_entity>
 801512e:	4680      	mov	r8, r0
 8015130:	b328      	cbz	r0, 801517e <on_request+0x8e>
 8015132:	4630      	mov	r0, r6
 8015134:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8015138:	463a      	mov	r2, r7
 801513a:	f106 0110 	add.w	r1, r6, #16
 801513e:	f7fe f80f 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 8015142:	b930      	cbnz	r0, 8015152 <on_request+0x62>
 8015144:	4641      	mov	r1, r8
 8015146:	4810      	ldr	r0, [pc, #64]	; (8015188 <on_request+0x98>)
 8015148:	b014      	add	sp, #80	; 0x50
 801514a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801514e:	f7fd ba35 	b.w	80125bc <put_memory>
 8015152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015154:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 8015158:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801515c:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8015160:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015164:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015168:	e88c 0003 	stmia.w	ip, {r0, r1}
 801516c:	f7fd feec 	bl	8012f48 <rmw_uros_epoch_nanos>
 8015170:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8015174:	2303      	movs	r3, #3
 8015176:	e942 0102 	strd	r0, r1, [r2, #-8]
 801517a:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801517e:	b014      	add	sp, #80	; 0x50
 8015180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015184:	24010a44 	.word	0x24010a44
 8015188:	24010a64 	.word	0x24010a64

0801518c <on_reply>:
 801518c:	4822      	ldr	r0, [pc, #136]	; (8015218 <on_reply+0x8c>)
 801518e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015192:	6800      	ldr	r0, [r0, #0]
 8015194:	b094      	sub	sp, #80	; 0x50
 8015196:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015198:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801519c:	9113      	str	r1, [sp, #76]	; 0x4c
 801519e:	b3b8      	cbz	r0, 8015210 <on_reply+0x84>
 80151a0:	461d      	mov	r5, r3
 80151a2:	e001      	b.n	80151a8 <on_reply+0x1c>
 80151a4:	6840      	ldr	r0, [r0, #4]
 80151a6:	b398      	cbz	r0, 8015210 <on_reply+0x84>
 80151a8:	6884      	ldr	r4, [r0, #8]
 80151aa:	8b21      	ldrh	r1, [r4, #24]
 80151ac:	4291      	cmp	r1, r2
 80151ae:	d1f9      	bne.n	80151a4 <on_reply+0x18>
 80151b0:	2248      	movs	r2, #72	; 0x48
 80151b2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80151b6:	4668      	mov	r0, sp
 80151b8:	f000 fd85 	bl	8015cc6 <memcpy>
 80151bc:	f104 0320 	add.w	r3, r4, #32
 80151c0:	4620      	mov	r0, r4
 80151c2:	cb0c      	ldmia	r3, {r2, r3}
 80151c4:	f7f7 ffb8 	bl	800d138 <rmw_uxrce_get_static_input_buffer_for_entity>
 80151c8:	4680      	mov	r8, r0
 80151ca:	b308      	cbz	r0, 8015210 <on_reply+0x84>
 80151cc:	4630      	mov	r0, r6
 80151ce:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80151d2:	463a      	mov	r2, r7
 80151d4:	f106 0110 	add.w	r1, r6, #16
 80151d8:	f7fd ffc2 	bl	8013160 <ucdr_deserialize_array_uint8_t>
 80151dc:	b930      	cbnz	r0, 80151ec <on_reply+0x60>
 80151de:	4641      	mov	r1, r8
 80151e0:	480e      	ldr	r0, [pc, #56]	; (801521c <on_reply+0x90>)
 80151e2:	b014      	add	sp, #80	; 0x50
 80151e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151e8:	f7fd b9e8 	b.w	80125bc <put_memory>
 80151ec:	2200      	movs	r2, #0
 80151ee:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80151f2:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80151f6:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 80151fa:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 80151fe:	f7fd fea3 	bl	8012f48 <rmw_uros_epoch_nanos>
 8015202:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8015206:	2304      	movs	r3, #4
 8015208:	e942 0102 	strd	r0, r1, [r2, #-8]
 801520c:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8015210:	b014      	add	sp, #80	; 0x50
 8015212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015216:	bf00      	nop
 8015218:	2400c158 	.word	0x2400c158
 801521c:	24010a64 	.word	0x24010a64

08015220 <rmw_destroy_client>:
 8015220:	b570      	push	{r4, r5, r6, lr}
 8015222:	b128      	cbz	r0, 8015230 <rmw_destroy_client+0x10>
 8015224:	4604      	mov	r4, r0
 8015226:	6800      	ldr	r0, [r0, #0]
 8015228:	460d      	mov	r5, r1
 801522a:	f7f8 f859 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 801522e:	b910      	cbnz	r0, 8015236 <rmw_destroy_client+0x16>
 8015230:	2401      	movs	r4, #1
 8015232:	4620      	mov	r0, r4
 8015234:	bd70      	pop	{r4, r5, r6, pc}
 8015236:	6863      	ldr	r3, [r4, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d0f9      	beq.n	8015230 <rmw_destroy_client+0x10>
 801523c:	2d00      	cmp	r5, #0
 801523e:	d0f7      	beq.n	8015230 <rmw_destroy_client+0x10>
 8015240:	6828      	ldr	r0, [r5, #0]
 8015242:	f7f8 f84d 	bl	800d2e0 <is_uxrce_rmw_identifier_valid>
 8015246:	2800      	cmp	r0, #0
 8015248:	d0f2      	beq.n	8015230 <rmw_destroy_client+0x10>
 801524a:	686e      	ldr	r6, [r5, #4]
 801524c:	2e00      	cmp	r6, #0
 801524e:	d0ef      	beq.n	8015230 <rmw_destroy_client+0x10>
 8015250:	6864      	ldr	r4, [r4, #4]
 8015252:	6932      	ldr	r2, [r6, #16]
 8015254:	6920      	ldr	r0, [r4, #16]
 8015256:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801525a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801525e:	6819      	ldr	r1, [r3, #0]
 8015260:	f7fe fe5e 	bl	8013f20 <uxr_buffer_cancel_data>
 8015264:	4602      	mov	r2, r0
 8015266:	6920      	ldr	r0, [r4, #16]
 8015268:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801526c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015270:	f7f7 ffbc 	bl	800d1ec <run_xrce_session>
 8015274:	6920      	ldr	r0, [r4, #16]
 8015276:	6932      	ldr	r2, [r6, #16]
 8015278:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801527c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015280:	6819      	ldr	r1, [r3, #0]
 8015282:	f7f9 f8ed 	bl	800e460 <uxr_buffer_delete_entity>
 8015286:	4602      	mov	r2, r0
 8015288:	6920      	ldr	r0, [r4, #16]
 801528a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801528e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015292:	f7f7 ffab 	bl	800d1ec <run_xrce_session>
 8015296:	4603      	mov	r3, r0
 8015298:	4628      	mov	r0, r5
 801529a:	2b00      	cmp	r3, #0
 801529c:	bf14      	ite	ne
 801529e:	2400      	movne	r4, #0
 80152a0:	2402      	moveq	r4, #2
 80152a2:	f7f7 ff27 	bl	800d0f4 <rmw_uxrce_fini_client_memory>
 80152a6:	e7c4      	b.n	8015232 <rmw_destroy_client+0x12>

080152a8 <rmw_create_guard_condition>:
 80152a8:	b538      	push	{r3, r4, r5, lr}
 80152aa:	4605      	mov	r5, r0
 80152ac:	4808      	ldr	r0, [pc, #32]	; (80152d0 <rmw_create_guard_condition+0x28>)
 80152ae:	f7fd f975 	bl	801259c <get_memory>
 80152b2:	4603      	mov	r3, r0
 80152b4:	b148      	cbz	r0, 80152ca <rmw_create_guard_condition+0x22>
 80152b6:	6884      	ldr	r4, [r0, #8]
 80152b8:	2300      	movs	r3, #0
 80152ba:	61e5      	str	r5, [r4, #28]
 80152bc:	7423      	strb	r3, [r4, #16]
 80152be:	f7fd f991 	bl	80125e4 <rmw_get_implementation_identifier>
 80152c2:	f104 0314 	add.w	r3, r4, #20
 80152c6:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80152ca:	4618      	mov	r0, r3
 80152cc:	bd38      	pop	{r3, r4, r5, pc}
 80152ce:	bf00      	nop
 80152d0:	24010a04 	.word	0x24010a04

080152d4 <rmw_destroy_guard_condition>:
 80152d4:	b508      	push	{r3, lr}
 80152d6:	4b08      	ldr	r3, [pc, #32]	; (80152f8 <rmw_destroy_guard_condition+0x24>)
 80152d8:	6819      	ldr	r1, [r3, #0]
 80152da:	b911      	cbnz	r1, 80152e2 <rmw_destroy_guard_condition+0xe>
 80152dc:	e00a      	b.n	80152f4 <rmw_destroy_guard_condition+0x20>
 80152de:	6849      	ldr	r1, [r1, #4]
 80152e0:	b141      	cbz	r1, 80152f4 <rmw_destroy_guard_condition+0x20>
 80152e2:	688b      	ldr	r3, [r1, #8]
 80152e4:	3314      	adds	r3, #20
 80152e6:	4298      	cmp	r0, r3
 80152e8:	d1f9      	bne.n	80152de <rmw_destroy_guard_condition+0xa>
 80152ea:	4803      	ldr	r0, [pc, #12]	; (80152f8 <rmw_destroy_guard_condition+0x24>)
 80152ec:	f7fd f966 	bl	80125bc <put_memory>
 80152f0:	2000      	movs	r0, #0
 80152f2:	bd08      	pop	{r3, pc}
 80152f4:	2001      	movs	r0, #1
 80152f6:	bd08      	pop	{r3, pc}
 80152f8:	24010a04 	.word	0x24010a04

080152fc <calloc>:
 80152fc:	4b02      	ldr	r3, [pc, #8]	; (8015308 <calloc+0xc>)
 80152fe:	460a      	mov	r2, r1
 8015300:	4601      	mov	r1, r0
 8015302:	6818      	ldr	r0, [r3, #0]
 8015304:	f000 b802 	b.w	801530c <_calloc_r>
 8015308:	24000110 	.word	0x24000110

0801530c <_calloc_r>:
 801530c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801530e:	fba1 2402 	umull	r2, r4, r1, r2
 8015312:	b94c      	cbnz	r4, 8015328 <_calloc_r+0x1c>
 8015314:	4611      	mov	r1, r2
 8015316:	9201      	str	r2, [sp, #4]
 8015318:	f000 f886 	bl	8015428 <_malloc_r>
 801531c:	9a01      	ldr	r2, [sp, #4]
 801531e:	4605      	mov	r5, r0
 8015320:	b930      	cbnz	r0, 8015330 <_calloc_r+0x24>
 8015322:	4628      	mov	r0, r5
 8015324:	b003      	add	sp, #12
 8015326:	bd30      	pop	{r4, r5, pc}
 8015328:	220c      	movs	r2, #12
 801532a:	6002      	str	r2, [r0, #0]
 801532c:	2500      	movs	r5, #0
 801532e:	e7f8      	b.n	8015322 <_calloc_r+0x16>
 8015330:	4621      	mov	r1, r4
 8015332:	f000 fba9 	bl	8015a88 <memset>
 8015336:	e7f4      	b.n	8015322 <_calloc_r+0x16>

08015338 <getenv>:
 8015338:	b507      	push	{r0, r1, r2, lr}
 801533a:	4b04      	ldr	r3, [pc, #16]	; (801534c <getenv+0x14>)
 801533c:	4601      	mov	r1, r0
 801533e:	aa01      	add	r2, sp, #4
 8015340:	6818      	ldr	r0, [r3, #0]
 8015342:	f000 f805 	bl	8015350 <_findenv_r>
 8015346:	b003      	add	sp, #12
 8015348:	f85d fb04 	ldr.w	pc, [sp], #4
 801534c:	24000110 	.word	0x24000110

08015350 <_findenv_r>:
 8015350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015354:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80153c4 <_findenv_r+0x74>
 8015358:	4607      	mov	r7, r0
 801535a:	4689      	mov	r9, r1
 801535c:	4616      	mov	r6, r2
 801535e:	f000 fcdf 	bl	8015d20 <__env_lock>
 8015362:	f8da 4000 	ldr.w	r4, [sl]
 8015366:	b134      	cbz	r4, 8015376 <_findenv_r+0x26>
 8015368:	464b      	mov	r3, r9
 801536a:	4698      	mov	r8, r3
 801536c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015370:	b13a      	cbz	r2, 8015382 <_findenv_r+0x32>
 8015372:	2a3d      	cmp	r2, #61	; 0x3d
 8015374:	d1f9      	bne.n	801536a <_findenv_r+0x1a>
 8015376:	4638      	mov	r0, r7
 8015378:	f000 fcd8 	bl	8015d2c <__env_unlock>
 801537c:	2000      	movs	r0, #0
 801537e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015382:	eba8 0809 	sub.w	r8, r8, r9
 8015386:	46a3      	mov	fp, r4
 8015388:	f854 0b04 	ldr.w	r0, [r4], #4
 801538c:	2800      	cmp	r0, #0
 801538e:	d0f2      	beq.n	8015376 <_findenv_r+0x26>
 8015390:	4642      	mov	r2, r8
 8015392:	4649      	mov	r1, r9
 8015394:	f000 fb8d 	bl	8015ab2 <strncmp>
 8015398:	2800      	cmp	r0, #0
 801539a:	d1f4      	bne.n	8015386 <_findenv_r+0x36>
 801539c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80153a0:	eb03 0508 	add.w	r5, r3, r8
 80153a4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80153a8:	2b3d      	cmp	r3, #61	; 0x3d
 80153aa:	d1ec      	bne.n	8015386 <_findenv_r+0x36>
 80153ac:	f8da 3000 	ldr.w	r3, [sl]
 80153b0:	ebab 0303 	sub.w	r3, fp, r3
 80153b4:	109b      	asrs	r3, r3, #2
 80153b6:	4638      	mov	r0, r7
 80153b8:	6033      	str	r3, [r6, #0]
 80153ba:	f000 fcb7 	bl	8015d2c <__env_unlock>
 80153be:	1c68      	adds	r0, r5, #1
 80153c0:	e7dd      	b.n	801537e <_findenv_r+0x2e>
 80153c2:	bf00      	nop
 80153c4:	24000000 	.word	0x24000000

080153c8 <malloc>:
 80153c8:	4b02      	ldr	r3, [pc, #8]	; (80153d4 <malloc+0xc>)
 80153ca:	4601      	mov	r1, r0
 80153cc:	6818      	ldr	r0, [r3, #0]
 80153ce:	f000 b82b 	b.w	8015428 <_malloc_r>
 80153d2:	bf00      	nop
 80153d4:	24000110 	.word	0x24000110

080153d8 <free>:
 80153d8:	4b02      	ldr	r3, [pc, #8]	; (80153e4 <free+0xc>)
 80153da:	4601      	mov	r1, r0
 80153dc:	6818      	ldr	r0, [r3, #0]
 80153de:	f000 bcab 	b.w	8015d38 <_free_r>
 80153e2:	bf00      	nop
 80153e4:	24000110 	.word	0x24000110

080153e8 <sbrk_aligned>:
 80153e8:	b570      	push	{r4, r5, r6, lr}
 80153ea:	4e0e      	ldr	r6, [pc, #56]	; (8015424 <sbrk_aligned+0x3c>)
 80153ec:	460c      	mov	r4, r1
 80153ee:	6831      	ldr	r1, [r6, #0]
 80153f0:	4605      	mov	r5, r0
 80153f2:	b911      	cbnz	r1, 80153fa <sbrk_aligned+0x12>
 80153f4:	f000 fc10 	bl	8015c18 <_sbrk_r>
 80153f8:	6030      	str	r0, [r6, #0]
 80153fa:	4621      	mov	r1, r4
 80153fc:	4628      	mov	r0, r5
 80153fe:	f000 fc0b 	bl	8015c18 <_sbrk_r>
 8015402:	1c43      	adds	r3, r0, #1
 8015404:	d00a      	beq.n	801541c <sbrk_aligned+0x34>
 8015406:	1cc4      	adds	r4, r0, #3
 8015408:	f024 0403 	bic.w	r4, r4, #3
 801540c:	42a0      	cmp	r0, r4
 801540e:	d007      	beq.n	8015420 <sbrk_aligned+0x38>
 8015410:	1a21      	subs	r1, r4, r0
 8015412:	4628      	mov	r0, r5
 8015414:	f000 fc00 	bl	8015c18 <_sbrk_r>
 8015418:	3001      	adds	r0, #1
 801541a:	d101      	bne.n	8015420 <sbrk_aligned+0x38>
 801541c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015420:	4620      	mov	r0, r4
 8015422:	bd70      	pop	{r4, r5, r6, pc}
 8015424:	24010bbc 	.word	0x24010bbc

08015428 <_malloc_r>:
 8015428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801542c:	1ccd      	adds	r5, r1, #3
 801542e:	f025 0503 	bic.w	r5, r5, #3
 8015432:	3508      	adds	r5, #8
 8015434:	2d0c      	cmp	r5, #12
 8015436:	bf38      	it	cc
 8015438:	250c      	movcc	r5, #12
 801543a:	2d00      	cmp	r5, #0
 801543c:	4607      	mov	r7, r0
 801543e:	db01      	blt.n	8015444 <_malloc_r+0x1c>
 8015440:	42a9      	cmp	r1, r5
 8015442:	d905      	bls.n	8015450 <_malloc_r+0x28>
 8015444:	230c      	movs	r3, #12
 8015446:	603b      	str	r3, [r7, #0]
 8015448:	2600      	movs	r6, #0
 801544a:	4630      	mov	r0, r6
 801544c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015524 <_malloc_r+0xfc>
 8015454:	f000 f868 	bl	8015528 <__malloc_lock>
 8015458:	f8d8 3000 	ldr.w	r3, [r8]
 801545c:	461c      	mov	r4, r3
 801545e:	bb5c      	cbnz	r4, 80154b8 <_malloc_r+0x90>
 8015460:	4629      	mov	r1, r5
 8015462:	4638      	mov	r0, r7
 8015464:	f7ff ffc0 	bl	80153e8 <sbrk_aligned>
 8015468:	1c43      	adds	r3, r0, #1
 801546a:	4604      	mov	r4, r0
 801546c:	d155      	bne.n	801551a <_malloc_r+0xf2>
 801546e:	f8d8 4000 	ldr.w	r4, [r8]
 8015472:	4626      	mov	r6, r4
 8015474:	2e00      	cmp	r6, #0
 8015476:	d145      	bne.n	8015504 <_malloc_r+0xdc>
 8015478:	2c00      	cmp	r4, #0
 801547a:	d048      	beq.n	801550e <_malloc_r+0xe6>
 801547c:	6823      	ldr	r3, [r4, #0]
 801547e:	4631      	mov	r1, r6
 8015480:	4638      	mov	r0, r7
 8015482:	eb04 0903 	add.w	r9, r4, r3
 8015486:	f000 fbc7 	bl	8015c18 <_sbrk_r>
 801548a:	4581      	cmp	r9, r0
 801548c:	d13f      	bne.n	801550e <_malloc_r+0xe6>
 801548e:	6821      	ldr	r1, [r4, #0]
 8015490:	1a6d      	subs	r5, r5, r1
 8015492:	4629      	mov	r1, r5
 8015494:	4638      	mov	r0, r7
 8015496:	f7ff ffa7 	bl	80153e8 <sbrk_aligned>
 801549a:	3001      	adds	r0, #1
 801549c:	d037      	beq.n	801550e <_malloc_r+0xe6>
 801549e:	6823      	ldr	r3, [r4, #0]
 80154a0:	442b      	add	r3, r5
 80154a2:	6023      	str	r3, [r4, #0]
 80154a4:	f8d8 3000 	ldr.w	r3, [r8]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d038      	beq.n	801551e <_malloc_r+0xf6>
 80154ac:	685a      	ldr	r2, [r3, #4]
 80154ae:	42a2      	cmp	r2, r4
 80154b0:	d12b      	bne.n	801550a <_malloc_r+0xe2>
 80154b2:	2200      	movs	r2, #0
 80154b4:	605a      	str	r2, [r3, #4]
 80154b6:	e00f      	b.n	80154d8 <_malloc_r+0xb0>
 80154b8:	6822      	ldr	r2, [r4, #0]
 80154ba:	1b52      	subs	r2, r2, r5
 80154bc:	d41f      	bmi.n	80154fe <_malloc_r+0xd6>
 80154be:	2a0b      	cmp	r2, #11
 80154c0:	d917      	bls.n	80154f2 <_malloc_r+0xca>
 80154c2:	1961      	adds	r1, r4, r5
 80154c4:	42a3      	cmp	r3, r4
 80154c6:	6025      	str	r5, [r4, #0]
 80154c8:	bf18      	it	ne
 80154ca:	6059      	strne	r1, [r3, #4]
 80154cc:	6863      	ldr	r3, [r4, #4]
 80154ce:	bf08      	it	eq
 80154d0:	f8c8 1000 	streq.w	r1, [r8]
 80154d4:	5162      	str	r2, [r4, r5]
 80154d6:	604b      	str	r3, [r1, #4]
 80154d8:	4638      	mov	r0, r7
 80154da:	f104 060b 	add.w	r6, r4, #11
 80154de:	f000 f829 	bl	8015534 <__malloc_unlock>
 80154e2:	f026 0607 	bic.w	r6, r6, #7
 80154e6:	1d23      	adds	r3, r4, #4
 80154e8:	1af2      	subs	r2, r6, r3
 80154ea:	d0ae      	beq.n	801544a <_malloc_r+0x22>
 80154ec:	1b9b      	subs	r3, r3, r6
 80154ee:	50a3      	str	r3, [r4, r2]
 80154f0:	e7ab      	b.n	801544a <_malloc_r+0x22>
 80154f2:	42a3      	cmp	r3, r4
 80154f4:	6862      	ldr	r2, [r4, #4]
 80154f6:	d1dd      	bne.n	80154b4 <_malloc_r+0x8c>
 80154f8:	f8c8 2000 	str.w	r2, [r8]
 80154fc:	e7ec      	b.n	80154d8 <_malloc_r+0xb0>
 80154fe:	4623      	mov	r3, r4
 8015500:	6864      	ldr	r4, [r4, #4]
 8015502:	e7ac      	b.n	801545e <_malloc_r+0x36>
 8015504:	4634      	mov	r4, r6
 8015506:	6876      	ldr	r6, [r6, #4]
 8015508:	e7b4      	b.n	8015474 <_malloc_r+0x4c>
 801550a:	4613      	mov	r3, r2
 801550c:	e7cc      	b.n	80154a8 <_malloc_r+0x80>
 801550e:	230c      	movs	r3, #12
 8015510:	603b      	str	r3, [r7, #0]
 8015512:	4638      	mov	r0, r7
 8015514:	f000 f80e 	bl	8015534 <__malloc_unlock>
 8015518:	e797      	b.n	801544a <_malloc_r+0x22>
 801551a:	6025      	str	r5, [r4, #0]
 801551c:	e7dc      	b.n	80154d8 <_malloc_r+0xb0>
 801551e:	605b      	str	r3, [r3, #4]
 8015520:	deff      	udf	#255	; 0xff
 8015522:	bf00      	nop
 8015524:	24010bb8 	.word	0x24010bb8

08015528 <__malloc_lock>:
 8015528:	4801      	ldr	r0, [pc, #4]	; (8015530 <__malloc_lock+0x8>)
 801552a:	f000 bbc2 	b.w	8015cb2 <__retarget_lock_acquire_recursive>
 801552e:	bf00      	nop
 8015530:	24010d01 	.word	0x24010d01

08015534 <__malloc_unlock>:
 8015534:	4801      	ldr	r0, [pc, #4]	; (801553c <__malloc_unlock+0x8>)
 8015536:	f000 bbbd 	b.w	8015cb4 <__retarget_lock_release_recursive>
 801553a:	bf00      	nop
 801553c:	24010d01 	.word	0x24010d01

08015540 <srand>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	4b10      	ldr	r3, [pc, #64]	; (8015584 <srand+0x44>)
 8015544:	681d      	ldr	r5, [r3, #0]
 8015546:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015548:	4604      	mov	r4, r0
 801554a:	b9b3      	cbnz	r3, 801557a <srand+0x3a>
 801554c:	2018      	movs	r0, #24
 801554e:	f7ff ff3b 	bl	80153c8 <malloc>
 8015552:	4602      	mov	r2, r0
 8015554:	6328      	str	r0, [r5, #48]	; 0x30
 8015556:	b920      	cbnz	r0, 8015562 <srand+0x22>
 8015558:	4b0b      	ldr	r3, [pc, #44]	; (8015588 <srand+0x48>)
 801555a:	480c      	ldr	r0, [pc, #48]	; (801558c <srand+0x4c>)
 801555c:	2146      	movs	r1, #70	; 0x46
 801555e:	f000 fbc1 	bl	8015ce4 <__assert_func>
 8015562:	490b      	ldr	r1, [pc, #44]	; (8015590 <srand+0x50>)
 8015564:	4b0b      	ldr	r3, [pc, #44]	; (8015594 <srand+0x54>)
 8015566:	e9c0 1300 	strd	r1, r3, [r0]
 801556a:	4b0b      	ldr	r3, [pc, #44]	; (8015598 <srand+0x58>)
 801556c:	6083      	str	r3, [r0, #8]
 801556e:	230b      	movs	r3, #11
 8015570:	8183      	strh	r3, [r0, #12]
 8015572:	2100      	movs	r1, #0
 8015574:	2001      	movs	r0, #1
 8015576:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801557a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801557c:	2200      	movs	r2, #0
 801557e:	611c      	str	r4, [r3, #16]
 8015580:	615a      	str	r2, [r3, #20]
 8015582:	bd38      	pop	{r3, r4, r5, pc}
 8015584:	24000110 	.word	0x24000110
 8015588:	080174fc 	.word	0x080174fc
 801558c:	08017513 	.word	0x08017513
 8015590:	abcd330e 	.word	0xabcd330e
 8015594:	e66d1234 	.word	0xe66d1234
 8015598:	0005deec 	.word	0x0005deec

0801559c <rand>:
 801559c:	4b16      	ldr	r3, [pc, #88]	; (80155f8 <rand+0x5c>)
 801559e:	b510      	push	{r4, lr}
 80155a0:	681c      	ldr	r4, [r3, #0]
 80155a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155a4:	b9b3      	cbnz	r3, 80155d4 <rand+0x38>
 80155a6:	2018      	movs	r0, #24
 80155a8:	f7ff ff0e 	bl	80153c8 <malloc>
 80155ac:	4602      	mov	r2, r0
 80155ae:	6320      	str	r0, [r4, #48]	; 0x30
 80155b0:	b920      	cbnz	r0, 80155bc <rand+0x20>
 80155b2:	4b12      	ldr	r3, [pc, #72]	; (80155fc <rand+0x60>)
 80155b4:	4812      	ldr	r0, [pc, #72]	; (8015600 <rand+0x64>)
 80155b6:	2152      	movs	r1, #82	; 0x52
 80155b8:	f000 fb94 	bl	8015ce4 <__assert_func>
 80155bc:	4911      	ldr	r1, [pc, #68]	; (8015604 <rand+0x68>)
 80155be:	4b12      	ldr	r3, [pc, #72]	; (8015608 <rand+0x6c>)
 80155c0:	e9c0 1300 	strd	r1, r3, [r0]
 80155c4:	4b11      	ldr	r3, [pc, #68]	; (801560c <rand+0x70>)
 80155c6:	6083      	str	r3, [r0, #8]
 80155c8:	230b      	movs	r3, #11
 80155ca:	8183      	strh	r3, [r0, #12]
 80155cc:	2100      	movs	r1, #0
 80155ce:	2001      	movs	r0, #1
 80155d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80155d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80155d6:	480e      	ldr	r0, [pc, #56]	; (8015610 <rand+0x74>)
 80155d8:	690b      	ldr	r3, [r1, #16]
 80155da:	694c      	ldr	r4, [r1, #20]
 80155dc:	4a0d      	ldr	r2, [pc, #52]	; (8015614 <rand+0x78>)
 80155de:	4358      	muls	r0, r3
 80155e0:	fb02 0004 	mla	r0, r2, r4, r0
 80155e4:	fba3 3202 	umull	r3, r2, r3, r2
 80155e8:	3301      	adds	r3, #1
 80155ea:	eb40 0002 	adc.w	r0, r0, r2
 80155ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80155f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80155f6:	bd10      	pop	{r4, pc}
 80155f8:	24000110 	.word	0x24000110
 80155fc:	080174fc 	.word	0x080174fc
 8015600:	08017513 	.word	0x08017513
 8015604:	abcd330e 	.word	0xabcd330e
 8015608:	e66d1234 	.word	0xe66d1234
 801560c:	0005deec 	.word	0x0005deec
 8015610:	5851f42d 	.word	0x5851f42d
 8015614:	4c957f2d 	.word	0x4c957f2d

08015618 <realloc>:
 8015618:	4b02      	ldr	r3, [pc, #8]	; (8015624 <realloc+0xc>)
 801561a:	460a      	mov	r2, r1
 801561c:	4601      	mov	r1, r0
 801561e:	6818      	ldr	r0, [r3, #0]
 8015620:	f000 b802 	b.w	8015628 <_realloc_r>
 8015624:	24000110 	.word	0x24000110

08015628 <_realloc_r>:
 8015628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801562c:	4680      	mov	r8, r0
 801562e:	4614      	mov	r4, r2
 8015630:	460e      	mov	r6, r1
 8015632:	b921      	cbnz	r1, 801563e <_realloc_r+0x16>
 8015634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015638:	4611      	mov	r1, r2
 801563a:	f7ff bef5 	b.w	8015428 <_malloc_r>
 801563e:	b92a      	cbnz	r2, 801564c <_realloc_r+0x24>
 8015640:	f000 fb7a 	bl	8015d38 <_free_r>
 8015644:	4625      	mov	r5, r4
 8015646:	4628      	mov	r0, r5
 8015648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801564c:	f000 fbc0 	bl	8015dd0 <_malloc_usable_size_r>
 8015650:	4284      	cmp	r4, r0
 8015652:	4607      	mov	r7, r0
 8015654:	d802      	bhi.n	801565c <_realloc_r+0x34>
 8015656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801565a:	d812      	bhi.n	8015682 <_realloc_r+0x5a>
 801565c:	4621      	mov	r1, r4
 801565e:	4640      	mov	r0, r8
 8015660:	f7ff fee2 	bl	8015428 <_malloc_r>
 8015664:	4605      	mov	r5, r0
 8015666:	2800      	cmp	r0, #0
 8015668:	d0ed      	beq.n	8015646 <_realloc_r+0x1e>
 801566a:	42bc      	cmp	r4, r7
 801566c:	4622      	mov	r2, r4
 801566e:	4631      	mov	r1, r6
 8015670:	bf28      	it	cs
 8015672:	463a      	movcs	r2, r7
 8015674:	f000 fb27 	bl	8015cc6 <memcpy>
 8015678:	4631      	mov	r1, r6
 801567a:	4640      	mov	r0, r8
 801567c:	f000 fb5c 	bl	8015d38 <_free_r>
 8015680:	e7e1      	b.n	8015646 <_realloc_r+0x1e>
 8015682:	4635      	mov	r5, r6
 8015684:	e7df      	b.n	8015646 <_realloc_r+0x1e>
	...

08015688 <_strtoul_l.constprop.0>:
 8015688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801568c:	4f36      	ldr	r7, [pc, #216]	; (8015768 <_strtoul_l.constprop.0+0xe0>)
 801568e:	4686      	mov	lr, r0
 8015690:	460d      	mov	r5, r1
 8015692:	4628      	mov	r0, r5
 8015694:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015698:	5d3e      	ldrb	r6, [r7, r4]
 801569a:	f016 0608 	ands.w	r6, r6, #8
 801569e:	d1f8      	bne.n	8015692 <_strtoul_l.constprop.0+0xa>
 80156a0:	2c2d      	cmp	r4, #45	; 0x2d
 80156a2:	d130      	bne.n	8015706 <_strtoul_l.constprop.0+0x7e>
 80156a4:	782c      	ldrb	r4, [r5, #0]
 80156a6:	2601      	movs	r6, #1
 80156a8:	1c85      	adds	r5, r0, #2
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d057      	beq.n	801575e <_strtoul_l.constprop.0+0xd6>
 80156ae:	2b10      	cmp	r3, #16
 80156b0:	d109      	bne.n	80156c6 <_strtoul_l.constprop.0+0x3e>
 80156b2:	2c30      	cmp	r4, #48	; 0x30
 80156b4:	d107      	bne.n	80156c6 <_strtoul_l.constprop.0+0x3e>
 80156b6:	7828      	ldrb	r0, [r5, #0]
 80156b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80156bc:	2858      	cmp	r0, #88	; 0x58
 80156be:	d149      	bne.n	8015754 <_strtoul_l.constprop.0+0xcc>
 80156c0:	786c      	ldrb	r4, [r5, #1]
 80156c2:	2310      	movs	r3, #16
 80156c4:	3502      	adds	r5, #2
 80156c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80156ca:	2700      	movs	r7, #0
 80156cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80156d0:	fb03 f908 	mul.w	r9, r3, r8
 80156d4:	ea6f 0909 	mvn.w	r9, r9
 80156d8:	4638      	mov	r0, r7
 80156da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80156de:	f1bc 0f09 	cmp.w	ip, #9
 80156e2:	d815      	bhi.n	8015710 <_strtoul_l.constprop.0+0x88>
 80156e4:	4664      	mov	r4, ip
 80156e6:	42a3      	cmp	r3, r4
 80156e8:	dd23      	ble.n	8015732 <_strtoul_l.constprop.0+0xaa>
 80156ea:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80156ee:	d007      	beq.n	8015700 <_strtoul_l.constprop.0+0x78>
 80156f0:	4580      	cmp	r8, r0
 80156f2:	d31b      	bcc.n	801572c <_strtoul_l.constprop.0+0xa4>
 80156f4:	d101      	bne.n	80156fa <_strtoul_l.constprop.0+0x72>
 80156f6:	45a1      	cmp	r9, r4
 80156f8:	db18      	blt.n	801572c <_strtoul_l.constprop.0+0xa4>
 80156fa:	fb00 4003 	mla	r0, r0, r3, r4
 80156fe:	2701      	movs	r7, #1
 8015700:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015704:	e7e9      	b.n	80156da <_strtoul_l.constprop.0+0x52>
 8015706:	2c2b      	cmp	r4, #43	; 0x2b
 8015708:	bf04      	itt	eq
 801570a:	782c      	ldrbeq	r4, [r5, #0]
 801570c:	1c85      	addeq	r5, r0, #2
 801570e:	e7cc      	b.n	80156aa <_strtoul_l.constprop.0+0x22>
 8015710:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015714:	f1bc 0f19 	cmp.w	ip, #25
 8015718:	d801      	bhi.n	801571e <_strtoul_l.constprop.0+0x96>
 801571a:	3c37      	subs	r4, #55	; 0x37
 801571c:	e7e3      	b.n	80156e6 <_strtoul_l.constprop.0+0x5e>
 801571e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015722:	f1bc 0f19 	cmp.w	ip, #25
 8015726:	d804      	bhi.n	8015732 <_strtoul_l.constprop.0+0xaa>
 8015728:	3c57      	subs	r4, #87	; 0x57
 801572a:	e7dc      	b.n	80156e6 <_strtoul_l.constprop.0+0x5e>
 801572c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015730:	e7e6      	b.n	8015700 <_strtoul_l.constprop.0+0x78>
 8015732:	1c7b      	adds	r3, r7, #1
 8015734:	d106      	bne.n	8015744 <_strtoul_l.constprop.0+0xbc>
 8015736:	2322      	movs	r3, #34	; 0x22
 8015738:	f8ce 3000 	str.w	r3, [lr]
 801573c:	4638      	mov	r0, r7
 801573e:	b932      	cbnz	r2, 801574e <_strtoul_l.constprop.0+0xc6>
 8015740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015744:	b106      	cbz	r6, 8015748 <_strtoul_l.constprop.0+0xc0>
 8015746:	4240      	negs	r0, r0
 8015748:	2a00      	cmp	r2, #0
 801574a:	d0f9      	beq.n	8015740 <_strtoul_l.constprop.0+0xb8>
 801574c:	b107      	cbz	r7, 8015750 <_strtoul_l.constprop.0+0xc8>
 801574e:	1e69      	subs	r1, r5, #1
 8015750:	6011      	str	r1, [r2, #0]
 8015752:	e7f5      	b.n	8015740 <_strtoul_l.constprop.0+0xb8>
 8015754:	2430      	movs	r4, #48	; 0x30
 8015756:	2b00      	cmp	r3, #0
 8015758:	d1b5      	bne.n	80156c6 <_strtoul_l.constprop.0+0x3e>
 801575a:	2308      	movs	r3, #8
 801575c:	e7b3      	b.n	80156c6 <_strtoul_l.constprop.0+0x3e>
 801575e:	2c30      	cmp	r4, #48	; 0x30
 8015760:	d0a9      	beq.n	80156b6 <_strtoul_l.constprop.0+0x2e>
 8015762:	230a      	movs	r3, #10
 8015764:	e7af      	b.n	80156c6 <_strtoul_l.constprop.0+0x3e>
 8015766:	bf00      	nop
 8015768:	0801756c 	.word	0x0801756c

0801576c <strtoul>:
 801576c:	4613      	mov	r3, r2
 801576e:	460a      	mov	r2, r1
 8015770:	4601      	mov	r1, r0
 8015772:	4802      	ldr	r0, [pc, #8]	; (801577c <strtoul+0x10>)
 8015774:	6800      	ldr	r0, [r0, #0]
 8015776:	f7ff bf87 	b.w	8015688 <_strtoul_l.constprop.0>
 801577a:	bf00      	nop
 801577c:	24000110 	.word	0x24000110

08015780 <std>:
 8015780:	2300      	movs	r3, #0
 8015782:	b510      	push	{r4, lr}
 8015784:	4604      	mov	r4, r0
 8015786:	e9c0 3300 	strd	r3, r3, [r0]
 801578a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801578e:	6083      	str	r3, [r0, #8]
 8015790:	8181      	strh	r1, [r0, #12]
 8015792:	6643      	str	r3, [r0, #100]	; 0x64
 8015794:	81c2      	strh	r2, [r0, #14]
 8015796:	6183      	str	r3, [r0, #24]
 8015798:	4619      	mov	r1, r3
 801579a:	2208      	movs	r2, #8
 801579c:	305c      	adds	r0, #92	; 0x5c
 801579e:	f000 f973 	bl	8015a88 <memset>
 80157a2:	4b0d      	ldr	r3, [pc, #52]	; (80157d8 <std+0x58>)
 80157a4:	6263      	str	r3, [r4, #36]	; 0x24
 80157a6:	4b0d      	ldr	r3, [pc, #52]	; (80157dc <std+0x5c>)
 80157a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80157aa:	4b0d      	ldr	r3, [pc, #52]	; (80157e0 <std+0x60>)
 80157ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80157ae:	4b0d      	ldr	r3, [pc, #52]	; (80157e4 <std+0x64>)
 80157b0:	6323      	str	r3, [r4, #48]	; 0x30
 80157b2:	4b0d      	ldr	r3, [pc, #52]	; (80157e8 <std+0x68>)
 80157b4:	6224      	str	r4, [r4, #32]
 80157b6:	429c      	cmp	r4, r3
 80157b8:	d006      	beq.n	80157c8 <std+0x48>
 80157ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80157be:	4294      	cmp	r4, r2
 80157c0:	d002      	beq.n	80157c8 <std+0x48>
 80157c2:	33d0      	adds	r3, #208	; 0xd0
 80157c4:	429c      	cmp	r4, r3
 80157c6:	d105      	bne.n	80157d4 <std+0x54>
 80157c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80157cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157d0:	f000 ba6e 	b.w	8015cb0 <__retarget_lock_init_recursive>
 80157d4:	bd10      	pop	{r4, pc}
 80157d6:	bf00      	nop
 80157d8:	08015991 	.word	0x08015991
 80157dc:	080159b3 	.word	0x080159b3
 80157e0:	080159eb 	.word	0x080159eb
 80157e4:	08015a0f 	.word	0x08015a0f
 80157e8:	24010bc0 	.word	0x24010bc0

080157ec <stdio_exit_handler>:
 80157ec:	4a02      	ldr	r2, [pc, #8]	; (80157f8 <stdio_exit_handler+0xc>)
 80157ee:	4903      	ldr	r1, [pc, #12]	; (80157fc <stdio_exit_handler+0x10>)
 80157f0:	4803      	ldr	r0, [pc, #12]	; (8015800 <stdio_exit_handler+0x14>)
 80157f2:	f000 b869 	b.w	80158c8 <_fwalk_sglue>
 80157f6:	bf00      	nop
 80157f8:	240000b8 	.word	0x240000b8
 80157fc:	08016745 	.word	0x08016745
 8015800:	240000c4 	.word	0x240000c4

08015804 <cleanup_stdio>:
 8015804:	6841      	ldr	r1, [r0, #4]
 8015806:	4b0c      	ldr	r3, [pc, #48]	; (8015838 <cleanup_stdio+0x34>)
 8015808:	4299      	cmp	r1, r3
 801580a:	b510      	push	{r4, lr}
 801580c:	4604      	mov	r4, r0
 801580e:	d001      	beq.n	8015814 <cleanup_stdio+0x10>
 8015810:	f000 ff98 	bl	8016744 <_fflush_r>
 8015814:	68a1      	ldr	r1, [r4, #8]
 8015816:	4b09      	ldr	r3, [pc, #36]	; (801583c <cleanup_stdio+0x38>)
 8015818:	4299      	cmp	r1, r3
 801581a:	d002      	beq.n	8015822 <cleanup_stdio+0x1e>
 801581c:	4620      	mov	r0, r4
 801581e:	f000 ff91 	bl	8016744 <_fflush_r>
 8015822:	68e1      	ldr	r1, [r4, #12]
 8015824:	4b06      	ldr	r3, [pc, #24]	; (8015840 <cleanup_stdio+0x3c>)
 8015826:	4299      	cmp	r1, r3
 8015828:	d004      	beq.n	8015834 <cleanup_stdio+0x30>
 801582a:	4620      	mov	r0, r4
 801582c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015830:	f000 bf88 	b.w	8016744 <_fflush_r>
 8015834:	bd10      	pop	{r4, pc}
 8015836:	bf00      	nop
 8015838:	24010bc0 	.word	0x24010bc0
 801583c:	24010c28 	.word	0x24010c28
 8015840:	24010c90 	.word	0x24010c90

08015844 <global_stdio_init.part.0>:
 8015844:	b510      	push	{r4, lr}
 8015846:	4b0b      	ldr	r3, [pc, #44]	; (8015874 <global_stdio_init.part.0+0x30>)
 8015848:	4c0b      	ldr	r4, [pc, #44]	; (8015878 <global_stdio_init.part.0+0x34>)
 801584a:	4a0c      	ldr	r2, [pc, #48]	; (801587c <global_stdio_init.part.0+0x38>)
 801584c:	601a      	str	r2, [r3, #0]
 801584e:	4620      	mov	r0, r4
 8015850:	2200      	movs	r2, #0
 8015852:	2104      	movs	r1, #4
 8015854:	f7ff ff94 	bl	8015780 <std>
 8015858:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801585c:	2201      	movs	r2, #1
 801585e:	2109      	movs	r1, #9
 8015860:	f7ff ff8e 	bl	8015780 <std>
 8015864:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015868:	2202      	movs	r2, #2
 801586a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801586e:	2112      	movs	r1, #18
 8015870:	f7ff bf86 	b.w	8015780 <std>
 8015874:	24010cf8 	.word	0x24010cf8
 8015878:	24010bc0 	.word	0x24010bc0
 801587c:	080157ed 	.word	0x080157ed

08015880 <__sfp_lock_acquire>:
 8015880:	4801      	ldr	r0, [pc, #4]	; (8015888 <__sfp_lock_acquire+0x8>)
 8015882:	f000 ba16 	b.w	8015cb2 <__retarget_lock_acquire_recursive>
 8015886:	bf00      	nop
 8015888:	24010d02 	.word	0x24010d02

0801588c <__sfp_lock_release>:
 801588c:	4801      	ldr	r0, [pc, #4]	; (8015894 <__sfp_lock_release+0x8>)
 801588e:	f000 ba11 	b.w	8015cb4 <__retarget_lock_release_recursive>
 8015892:	bf00      	nop
 8015894:	24010d02 	.word	0x24010d02

08015898 <__sinit>:
 8015898:	b510      	push	{r4, lr}
 801589a:	4604      	mov	r4, r0
 801589c:	f7ff fff0 	bl	8015880 <__sfp_lock_acquire>
 80158a0:	6a23      	ldr	r3, [r4, #32]
 80158a2:	b11b      	cbz	r3, 80158ac <__sinit+0x14>
 80158a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158a8:	f7ff bff0 	b.w	801588c <__sfp_lock_release>
 80158ac:	4b04      	ldr	r3, [pc, #16]	; (80158c0 <__sinit+0x28>)
 80158ae:	6223      	str	r3, [r4, #32]
 80158b0:	4b04      	ldr	r3, [pc, #16]	; (80158c4 <__sinit+0x2c>)
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d1f5      	bne.n	80158a4 <__sinit+0xc>
 80158b8:	f7ff ffc4 	bl	8015844 <global_stdio_init.part.0>
 80158bc:	e7f2      	b.n	80158a4 <__sinit+0xc>
 80158be:	bf00      	nop
 80158c0:	08015805 	.word	0x08015805
 80158c4:	24010cf8 	.word	0x24010cf8

080158c8 <_fwalk_sglue>:
 80158c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158cc:	4607      	mov	r7, r0
 80158ce:	4688      	mov	r8, r1
 80158d0:	4614      	mov	r4, r2
 80158d2:	2600      	movs	r6, #0
 80158d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80158d8:	f1b9 0901 	subs.w	r9, r9, #1
 80158dc:	d505      	bpl.n	80158ea <_fwalk_sglue+0x22>
 80158de:	6824      	ldr	r4, [r4, #0]
 80158e0:	2c00      	cmp	r4, #0
 80158e2:	d1f7      	bne.n	80158d4 <_fwalk_sglue+0xc>
 80158e4:	4630      	mov	r0, r6
 80158e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158ea:	89ab      	ldrh	r3, [r5, #12]
 80158ec:	2b01      	cmp	r3, #1
 80158ee:	d907      	bls.n	8015900 <_fwalk_sglue+0x38>
 80158f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80158f4:	3301      	adds	r3, #1
 80158f6:	d003      	beq.n	8015900 <_fwalk_sglue+0x38>
 80158f8:	4629      	mov	r1, r5
 80158fa:	4638      	mov	r0, r7
 80158fc:	47c0      	blx	r8
 80158fe:	4306      	orrs	r6, r0
 8015900:	3568      	adds	r5, #104	; 0x68
 8015902:	e7e9      	b.n	80158d8 <_fwalk_sglue+0x10>

08015904 <iprintf>:
 8015904:	b40f      	push	{r0, r1, r2, r3}
 8015906:	b507      	push	{r0, r1, r2, lr}
 8015908:	4906      	ldr	r1, [pc, #24]	; (8015924 <iprintf+0x20>)
 801590a:	ab04      	add	r3, sp, #16
 801590c:	6808      	ldr	r0, [r1, #0]
 801590e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015912:	6881      	ldr	r1, [r0, #8]
 8015914:	9301      	str	r3, [sp, #4]
 8015916:	f000 fbe5 	bl	80160e4 <_vfiprintf_r>
 801591a:	b003      	add	sp, #12
 801591c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015920:	b004      	add	sp, #16
 8015922:	4770      	bx	lr
 8015924:	24000110 	.word	0x24000110

08015928 <sniprintf>:
 8015928:	b40c      	push	{r2, r3}
 801592a:	b530      	push	{r4, r5, lr}
 801592c:	4b17      	ldr	r3, [pc, #92]	; (801598c <sniprintf+0x64>)
 801592e:	1e0c      	subs	r4, r1, #0
 8015930:	681d      	ldr	r5, [r3, #0]
 8015932:	b09d      	sub	sp, #116	; 0x74
 8015934:	da08      	bge.n	8015948 <sniprintf+0x20>
 8015936:	238b      	movs	r3, #139	; 0x8b
 8015938:	602b      	str	r3, [r5, #0]
 801593a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801593e:	b01d      	add	sp, #116	; 0x74
 8015940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015944:	b002      	add	sp, #8
 8015946:	4770      	bx	lr
 8015948:	f44f 7302 	mov.w	r3, #520	; 0x208
 801594c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015950:	bf14      	ite	ne
 8015952:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015956:	4623      	moveq	r3, r4
 8015958:	9304      	str	r3, [sp, #16]
 801595a:	9307      	str	r3, [sp, #28]
 801595c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015960:	9002      	str	r0, [sp, #8]
 8015962:	9006      	str	r0, [sp, #24]
 8015964:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015968:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801596a:	ab21      	add	r3, sp, #132	; 0x84
 801596c:	a902      	add	r1, sp, #8
 801596e:	4628      	mov	r0, r5
 8015970:	9301      	str	r3, [sp, #4]
 8015972:	f000 fa8f 	bl	8015e94 <_svfiprintf_r>
 8015976:	1c43      	adds	r3, r0, #1
 8015978:	bfbc      	itt	lt
 801597a:	238b      	movlt	r3, #139	; 0x8b
 801597c:	602b      	strlt	r3, [r5, #0]
 801597e:	2c00      	cmp	r4, #0
 8015980:	d0dd      	beq.n	801593e <sniprintf+0x16>
 8015982:	9b02      	ldr	r3, [sp, #8]
 8015984:	2200      	movs	r2, #0
 8015986:	701a      	strb	r2, [r3, #0]
 8015988:	e7d9      	b.n	801593e <sniprintf+0x16>
 801598a:	bf00      	nop
 801598c:	24000110 	.word	0x24000110

08015990 <__sread>:
 8015990:	b510      	push	{r4, lr}
 8015992:	460c      	mov	r4, r1
 8015994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015998:	f000 f92c 	bl	8015bf4 <_read_r>
 801599c:	2800      	cmp	r0, #0
 801599e:	bfab      	itete	ge
 80159a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80159a2:	89a3      	ldrhlt	r3, [r4, #12]
 80159a4:	181b      	addge	r3, r3, r0
 80159a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80159aa:	bfac      	ite	ge
 80159ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80159ae:	81a3      	strhlt	r3, [r4, #12]
 80159b0:	bd10      	pop	{r4, pc}

080159b2 <__swrite>:
 80159b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b6:	461f      	mov	r7, r3
 80159b8:	898b      	ldrh	r3, [r1, #12]
 80159ba:	05db      	lsls	r3, r3, #23
 80159bc:	4605      	mov	r5, r0
 80159be:	460c      	mov	r4, r1
 80159c0:	4616      	mov	r6, r2
 80159c2:	d505      	bpl.n	80159d0 <__swrite+0x1e>
 80159c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159c8:	2302      	movs	r3, #2
 80159ca:	2200      	movs	r2, #0
 80159cc:	f000 f900 	bl	8015bd0 <_lseek_r>
 80159d0:	89a3      	ldrh	r3, [r4, #12]
 80159d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80159da:	81a3      	strh	r3, [r4, #12]
 80159dc:	4632      	mov	r2, r6
 80159de:	463b      	mov	r3, r7
 80159e0:	4628      	mov	r0, r5
 80159e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159e6:	f000 b927 	b.w	8015c38 <_write_r>

080159ea <__sseek>:
 80159ea:	b510      	push	{r4, lr}
 80159ec:	460c      	mov	r4, r1
 80159ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159f2:	f000 f8ed 	bl	8015bd0 <_lseek_r>
 80159f6:	1c43      	adds	r3, r0, #1
 80159f8:	89a3      	ldrh	r3, [r4, #12]
 80159fa:	bf15      	itete	ne
 80159fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80159fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015a06:	81a3      	strheq	r3, [r4, #12]
 8015a08:	bf18      	it	ne
 8015a0a:	81a3      	strhne	r3, [r4, #12]
 8015a0c:	bd10      	pop	{r4, pc}

08015a0e <__sclose>:
 8015a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a12:	f000 b877 	b.w	8015b04 <_close_r>

08015a16 <_vsniprintf_r>:
 8015a16:	b530      	push	{r4, r5, lr}
 8015a18:	4614      	mov	r4, r2
 8015a1a:	2c00      	cmp	r4, #0
 8015a1c:	b09b      	sub	sp, #108	; 0x6c
 8015a1e:	4605      	mov	r5, r0
 8015a20:	461a      	mov	r2, r3
 8015a22:	da05      	bge.n	8015a30 <_vsniprintf_r+0x1a>
 8015a24:	238b      	movs	r3, #139	; 0x8b
 8015a26:	6003      	str	r3, [r0, #0]
 8015a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a2c:	b01b      	add	sp, #108	; 0x6c
 8015a2e:	bd30      	pop	{r4, r5, pc}
 8015a30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015a34:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015a38:	bf14      	ite	ne
 8015a3a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015a3e:	4623      	moveq	r3, r4
 8015a40:	9302      	str	r3, [sp, #8]
 8015a42:	9305      	str	r3, [sp, #20]
 8015a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a48:	9100      	str	r1, [sp, #0]
 8015a4a:	9104      	str	r1, [sp, #16]
 8015a4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015a50:	4669      	mov	r1, sp
 8015a52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015a54:	f000 fa1e 	bl	8015e94 <_svfiprintf_r>
 8015a58:	1c43      	adds	r3, r0, #1
 8015a5a:	bfbc      	itt	lt
 8015a5c:	238b      	movlt	r3, #139	; 0x8b
 8015a5e:	602b      	strlt	r3, [r5, #0]
 8015a60:	2c00      	cmp	r4, #0
 8015a62:	d0e3      	beq.n	8015a2c <_vsniprintf_r+0x16>
 8015a64:	9b00      	ldr	r3, [sp, #0]
 8015a66:	2200      	movs	r2, #0
 8015a68:	701a      	strb	r2, [r3, #0]
 8015a6a:	e7df      	b.n	8015a2c <_vsniprintf_r+0x16>

08015a6c <vsniprintf>:
 8015a6c:	b507      	push	{r0, r1, r2, lr}
 8015a6e:	9300      	str	r3, [sp, #0]
 8015a70:	4613      	mov	r3, r2
 8015a72:	460a      	mov	r2, r1
 8015a74:	4601      	mov	r1, r0
 8015a76:	4803      	ldr	r0, [pc, #12]	; (8015a84 <vsniprintf+0x18>)
 8015a78:	6800      	ldr	r0, [r0, #0]
 8015a7a:	f7ff ffcc 	bl	8015a16 <_vsniprintf_r>
 8015a7e:	b003      	add	sp, #12
 8015a80:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a84:	24000110 	.word	0x24000110

08015a88 <memset>:
 8015a88:	4402      	add	r2, r0
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	d100      	bne.n	8015a92 <memset+0xa>
 8015a90:	4770      	bx	lr
 8015a92:	f803 1b01 	strb.w	r1, [r3], #1
 8015a96:	e7f9      	b.n	8015a8c <memset+0x4>

08015a98 <strchr>:
 8015a98:	b2c9      	uxtb	r1, r1
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015aa0:	b11a      	cbz	r2, 8015aaa <strchr+0x12>
 8015aa2:	428a      	cmp	r2, r1
 8015aa4:	d1f9      	bne.n	8015a9a <strchr+0x2>
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	4770      	bx	lr
 8015aaa:	2900      	cmp	r1, #0
 8015aac:	bf18      	it	ne
 8015aae:	2300      	movne	r3, #0
 8015ab0:	e7f9      	b.n	8015aa6 <strchr+0xe>

08015ab2 <strncmp>:
 8015ab2:	b510      	push	{r4, lr}
 8015ab4:	b16a      	cbz	r2, 8015ad2 <strncmp+0x20>
 8015ab6:	3901      	subs	r1, #1
 8015ab8:	1884      	adds	r4, r0, r2
 8015aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015abe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d103      	bne.n	8015ace <strncmp+0x1c>
 8015ac6:	42a0      	cmp	r0, r4
 8015ac8:	d001      	beq.n	8015ace <strncmp+0x1c>
 8015aca:	2a00      	cmp	r2, #0
 8015acc:	d1f5      	bne.n	8015aba <strncmp+0x8>
 8015ace:	1ad0      	subs	r0, r2, r3
 8015ad0:	bd10      	pop	{r4, pc}
 8015ad2:	4610      	mov	r0, r2
 8015ad4:	e7fc      	b.n	8015ad0 <strncmp+0x1e>

08015ad6 <strstr>:
 8015ad6:	780a      	ldrb	r2, [r1, #0]
 8015ad8:	b570      	push	{r4, r5, r6, lr}
 8015ada:	b96a      	cbnz	r2, 8015af8 <strstr+0x22>
 8015adc:	bd70      	pop	{r4, r5, r6, pc}
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d109      	bne.n	8015af6 <strstr+0x20>
 8015ae2:	460c      	mov	r4, r1
 8015ae4:	4605      	mov	r5, r0
 8015ae6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d0f6      	beq.n	8015adc <strstr+0x6>
 8015aee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015af2:	429e      	cmp	r6, r3
 8015af4:	d0f7      	beq.n	8015ae6 <strstr+0x10>
 8015af6:	3001      	adds	r0, #1
 8015af8:	7803      	ldrb	r3, [r0, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d1ef      	bne.n	8015ade <strstr+0x8>
 8015afe:	4618      	mov	r0, r3
 8015b00:	e7ec      	b.n	8015adc <strstr+0x6>
	...

08015b04 <_close_r>:
 8015b04:	b538      	push	{r3, r4, r5, lr}
 8015b06:	4d06      	ldr	r5, [pc, #24]	; (8015b20 <_close_r+0x1c>)
 8015b08:	2300      	movs	r3, #0
 8015b0a:	4604      	mov	r4, r0
 8015b0c:	4608      	mov	r0, r1
 8015b0e:	602b      	str	r3, [r5, #0]
 8015b10:	f7eb fea9 	bl	8001866 <_close>
 8015b14:	1c43      	adds	r3, r0, #1
 8015b16:	d102      	bne.n	8015b1e <_close_r+0x1a>
 8015b18:	682b      	ldr	r3, [r5, #0]
 8015b1a:	b103      	cbz	r3, 8015b1e <_close_r+0x1a>
 8015b1c:	6023      	str	r3, [r4, #0]
 8015b1e:	bd38      	pop	{r3, r4, r5, pc}
 8015b20:	24010cfc 	.word	0x24010cfc

08015b24 <_reclaim_reent>:
 8015b24:	4b29      	ldr	r3, [pc, #164]	; (8015bcc <_reclaim_reent+0xa8>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	4283      	cmp	r3, r0
 8015b2a:	b570      	push	{r4, r5, r6, lr}
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	d04b      	beq.n	8015bc8 <_reclaim_reent+0xa4>
 8015b30:	69c3      	ldr	r3, [r0, #28]
 8015b32:	b143      	cbz	r3, 8015b46 <_reclaim_reent+0x22>
 8015b34:	68db      	ldr	r3, [r3, #12]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d144      	bne.n	8015bc4 <_reclaim_reent+0xa0>
 8015b3a:	69e3      	ldr	r3, [r4, #28]
 8015b3c:	6819      	ldr	r1, [r3, #0]
 8015b3e:	b111      	cbz	r1, 8015b46 <_reclaim_reent+0x22>
 8015b40:	4620      	mov	r0, r4
 8015b42:	f000 f8f9 	bl	8015d38 <_free_r>
 8015b46:	6961      	ldr	r1, [r4, #20]
 8015b48:	b111      	cbz	r1, 8015b50 <_reclaim_reent+0x2c>
 8015b4a:	4620      	mov	r0, r4
 8015b4c:	f000 f8f4 	bl	8015d38 <_free_r>
 8015b50:	69e1      	ldr	r1, [r4, #28]
 8015b52:	b111      	cbz	r1, 8015b5a <_reclaim_reent+0x36>
 8015b54:	4620      	mov	r0, r4
 8015b56:	f000 f8ef 	bl	8015d38 <_free_r>
 8015b5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015b5c:	b111      	cbz	r1, 8015b64 <_reclaim_reent+0x40>
 8015b5e:	4620      	mov	r0, r4
 8015b60:	f000 f8ea 	bl	8015d38 <_free_r>
 8015b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b66:	b111      	cbz	r1, 8015b6e <_reclaim_reent+0x4a>
 8015b68:	4620      	mov	r0, r4
 8015b6a:	f000 f8e5 	bl	8015d38 <_free_r>
 8015b6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015b70:	b111      	cbz	r1, 8015b78 <_reclaim_reent+0x54>
 8015b72:	4620      	mov	r0, r4
 8015b74:	f000 f8e0 	bl	8015d38 <_free_r>
 8015b78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015b7a:	b111      	cbz	r1, 8015b82 <_reclaim_reent+0x5e>
 8015b7c:	4620      	mov	r0, r4
 8015b7e:	f000 f8db 	bl	8015d38 <_free_r>
 8015b82:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8015b84:	b111      	cbz	r1, 8015b8c <_reclaim_reent+0x68>
 8015b86:	4620      	mov	r0, r4
 8015b88:	f000 f8d6 	bl	8015d38 <_free_r>
 8015b8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015b8e:	b111      	cbz	r1, 8015b96 <_reclaim_reent+0x72>
 8015b90:	4620      	mov	r0, r4
 8015b92:	f000 f8d1 	bl	8015d38 <_free_r>
 8015b96:	6a23      	ldr	r3, [r4, #32]
 8015b98:	b1b3      	cbz	r3, 8015bc8 <_reclaim_reent+0xa4>
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ba0:	4718      	bx	r3
 8015ba2:	5949      	ldr	r1, [r1, r5]
 8015ba4:	b941      	cbnz	r1, 8015bb8 <_reclaim_reent+0x94>
 8015ba6:	3504      	adds	r5, #4
 8015ba8:	69e3      	ldr	r3, [r4, #28]
 8015baa:	2d80      	cmp	r5, #128	; 0x80
 8015bac:	68d9      	ldr	r1, [r3, #12]
 8015bae:	d1f8      	bne.n	8015ba2 <_reclaim_reent+0x7e>
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	f000 f8c1 	bl	8015d38 <_free_r>
 8015bb6:	e7c0      	b.n	8015b3a <_reclaim_reent+0x16>
 8015bb8:	680e      	ldr	r6, [r1, #0]
 8015bba:	4620      	mov	r0, r4
 8015bbc:	f000 f8bc 	bl	8015d38 <_free_r>
 8015bc0:	4631      	mov	r1, r6
 8015bc2:	e7ef      	b.n	8015ba4 <_reclaim_reent+0x80>
 8015bc4:	2500      	movs	r5, #0
 8015bc6:	e7ef      	b.n	8015ba8 <_reclaim_reent+0x84>
 8015bc8:	bd70      	pop	{r4, r5, r6, pc}
 8015bca:	bf00      	nop
 8015bcc:	24000110 	.word	0x24000110

08015bd0 <_lseek_r>:
 8015bd0:	b538      	push	{r3, r4, r5, lr}
 8015bd2:	4d07      	ldr	r5, [pc, #28]	; (8015bf0 <_lseek_r+0x20>)
 8015bd4:	4604      	mov	r4, r0
 8015bd6:	4608      	mov	r0, r1
 8015bd8:	4611      	mov	r1, r2
 8015bda:	2200      	movs	r2, #0
 8015bdc:	602a      	str	r2, [r5, #0]
 8015bde:	461a      	mov	r2, r3
 8015be0:	f7eb fe68 	bl	80018b4 <_lseek>
 8015be4:	1c43      	adds	r3, r0, #1
 8015be6:	d102      	bne.n	8015bee <_lseek_r+0x1e>
 8015be8:	682b      	ldr	r3, [r5, #0]
 8015bea:	b103      	cbz	r3, 8015bee <_lseek_r+0x1e>
 8015bec:	6023      	str	r3, [r4, #0]
 8015bee:	bd38      	pop	{r3, r4, r5, pc}
 8015bf0:	24010cfc 	.word	0x24010cfc

08015bf4 <_read_r>:
 8015bf4:	b538      	push	{r3, r4, r5, lr}
 8015bf6:	4d07      	ldr	r5, [pc, #28]	; (8015c14 <_read_r+0x20>)
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	4608      	mov	r0, r1
 8015bfc:	4611      	mov	r1, r2
 8015bfe:	2200      	movs	r2, #0
 8015c00:	602a      	str	r2, [r5, #0]
 8015c02:	461a      	mov	r2, r3
 8015c04:	f7eb fdf6 	bl	80017f4 <_read>
 8015c08:	1c43      	adds	r3, r0, #1
 8015c0a:	d102      	bne.n	8015c12 <_read_r+0x1e>
 8015c0c:	682b      	ldr	r3, [r5, #0]
 8015c0e:	b103      	cbz	r3, 8015c12 <_read_r+0x1e>
 8015c10:	6023      	str	r3, [r4, #0]
 8015c12:	bd38      	pop	{r3, r4, r5, pc}
 8015c14:	24010cfc 	.word	0x24010cfc

08015c18 <_sbrk_r>:
 8015c18:	b538      	push	{r3, r4, r5, lr}
 8015c1a:	4d06      	ldr	r5, [pc, #24]	; (8015c34 <_sbrk_r+0x1c>)
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	4604      	mov	r4, r0
 8015c20:	4608      	mov	r0, r1
 8015c22:	602b      	str	r3, [r5, #0]
 8015c24:	f7eb fe54 	bl	80018d0 <_sbrk>
 8015c28:	1c43      	adds	r3, r0, #1
 8015c2a:	d102      	bne.n	8015c32 <_sbrk_r+0x1a>
 8015c2c:	682b      	ldr	r3, [r5, #0]
 8015c2e:	b103      	cbz	r3, 8015c32 <_sbrk_r+0x1a>
 8015c30:	6023      	str	r3, [r4, #0]
 8015c32:	bd38      	pop	{r3, r4, r5, pc}
 8015c34:	24010cfc 	.word	0x24010cfc

08015c38 <_write_r>:
 8015c38:	b538      	push	{r3, r4, r5, lr}
 8015c3a:	4d07      	ldr	r5, [pc, #28]	; (8015c58 <_write_r+0x20>)
 8015c3c:	4604      	mov	r4, r0
 8015c3e:	4608      	mov	r0, r1
 8015c40:	4611      	mov	r1, r2
 8015c42:	2200      	movs	r2, #0
 8015c44:	602a      	str	r2, [r5, #0]
 8015c46:	461a      	mov	r2, r3
 8015c48:	f7eb fdf1 	bl	800182e <_write>
 8015c4c:	1c43      	adds	r3, r0, #1
 8015c4e:	d102      	bne.n	8015c56 <_write_r+0x1e>
 8015c50:	682b      	ldr	r3, [r5, #0]
 8015c52:	b103      	cbz	r3, 8015c56 <_write_r+0x1e>
 8015c54:	6023      	str	r3, [r4, #0]
 8015c56:	bd38      	pop	{r3, r4, r5, pc}
 8015c58:	24010cfc 	.word	0x24010cfc

08015c5c <__errno>:
 8015c5c:	4b01      	ldr	r3, [pc, #4]	; (8015c64 <__errno+0x8>)
 8015c5e:	6818      	ldr	r0, [r3, #0]
 8015c60:	4770      	bx	lr
 8015c62:	bf00      	nop
 8015c64:	24000110 	.word	0x24000110

08015c68 <__libc_init_array>:
 8015c68:	b570      	push	{r4, r5, r6, lr}
 8015c6a:	4d0d      	ldr	r5, [pc, #52]	; (8015ca0 <__libc_init_array+0x38>)
 8015c6c:	4c0d      	ldr	r4, [pc, #52]	; (8015ca4 <__libc_init_array+0x3c>)
 8015c6e:	1b64      	subs	r4, r4, r5
 8015c70:	10a4      	asrs	r4, r4, #2
 8015c72:	2600      	movs	r6, #0
 8015c74:	42a6      	cmp	r6, r4
 8015c76:	d109      	bne.n	8015c8c <__libc_init_array+0x24>
 8015c78:	4d0b      	ldr	r5, [pc, #44]	; (8015ca8 <__libc_init_array+0x40>)
 8015c7a:	4c0c      	ldr	r4, [pc, #48]	; (8015cac <__libc_init_array+0x44>)
 8015c7c:	f000 ff1c 	bl	8016ab8 <_init>
 8015c80:	1b64      	subs	r4, r4, r5
 8015c82:	10a4      	asrs	r4, r4, #2
 8015c84:	2600      	movs	r6, #0
 8015c86:	42a6      	cmp	r6, r4
 8015c88:	d105      	bne.n	8015c96 <__libc_init_array+0x2e>
 8015c8a:	bd70      	pop	{r4, r5, r6, pc}
 8015c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c90:	4798      	blx	r3
 8015c92:	3601      	adds	r6, #1
 8015c94:	e7ee      	b.n	8015c74 <__libc_init_array+0xc>
 8015c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c9a:	4798      	blx	r3
 8015c9c:	3601      	adds	r6, #1
 8015c9e:	e7f2      	b.n	8015c86 <__libc_init_array+0x1e>
 8015ca0:	080176e4 	.word	0x080176e4
 8015ca4:	080176e4 	.word	0x080176e4
 8015ca8:	080176e4 	.word	0x080176e4
 8015cac:	080176ec 	.word	0x080176ec

08015cb0 <__retarget_lock_init_recursive>:
 8015cb0:	4770      	bx	lr

08015cb2 <__retarget_lock_acquire_recursive>:
 8015cb2:	4770      	bx	lr

08015cb4 <__retarget_lock_release_recursive>:
 8015cb4:	4770      	bx	lr

08015cb6 <strcpy>:
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015cbc:	f803 2b01 	strb.w	r2, [r3], #1
 8015cc0:	2a00      	cmp	r2, #0
 8015cc2:	d1f9      	bne.n	8015cb8 <strcpy+0x2>
 8015cc4:	4770      	bx	lr

08015cc6 <memcpy>:
 8015cc6:	440a      	add	r2, r1
 8015cc8:	4291      	cmp	r1, r2
 8015cca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015cce:	d100      	bne.n	8015cd2 <memcpy+0xc>
 8015cd0:	4770      	bx	lr
 8015cd2:	b510      	push	{r4, lr}
 8015cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015cdc:	4291      	cmp	r1, r2
 8015cde:	d1f9      	bne.n	8015cd4 <memcpy+0xe>
 8015ce0:	bd10      	pop	{r4, pc}
	...

08015ce4 <__assert_func>:
 8015ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015ce6:	4614      	mov	r4, r2
 8015ce8:	461a      	mov	r2, r3
 8015cea:	4b09      	ldr	r3, [pc, #36]	; (8015d10 <__assert_func+0x2c>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	4605      	mov	r5, r0
 8015cf0:	68d8      	ldr	r0, [r3, #12]
 8015cf2:	b14c      	cbz	r4, 8015d08 <__assert_func+0x24>
 8015cf4:	4b07      	ldr	r3, [pc, #28]	; (8015d14 <__assert_func+0x30>)
 8015cf6:	9100      	str	r1, [sp, #0]
 8015cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015cfc:	4906      	ldr	r1, [pc, #24]	; (8015d18 <__assert_func+0x34>)
 8015cfe:	462b      	mov	r3, r5
 8015d00:	f000 fd48 	bl	8016794 <fiprintf>
 8015d04:	f000 fe08 	bl	8016918 <abort>
 8015d08:	4b04      	ldr	r3, [pc, #16]	; (8015d1c <__assert_func+0x38>)
 8015d0a:	461c      	mov	r4, r3
 8015d0c:	e7f3      	b.n	8015cf6 <__assert_func+0x12>
 8015d0e:	bf00      	nop
 8015d10:	24000110 	.word	0x24000110
 8015d14:	0801766c 	.word	0x0801766c
 8015d18:	08017679 	.word	0x08017679
 8015d1c:	080176a7 	.word	0x080176a7

08015d20 <__env_lock>:
 8015d20:	4801      	ldr	r0, [pc, #4]	; (8015d28 <__env_lock+0x8>)
 8015d22:	f7ff bfc6 	b.w	8015cb2 <__retarget_lock_acquire_recursive>
 8015d26:	bf00      	nop
 8015d28:	24010d00 	.word	0x24010d00

08015d2c <__env_unlock>:
 8015d2c:	4801      	ldr	r0, [pc, #4]	; (8015d34 <__env_unlock+0x8>)
 8015d2e:	f7ff bfc1 	b.w	8015cb4 <__retarget_lock_release_recursive>
 8015d32:	bf00      	nop
 8015d34:	24010d00 	.word	0x24010d00

08015d38 <_free_r>:
 8015d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015d3a:	2900      	cmp	r1, #0
 8015d3c:	d044      	beq.n	8015dc8 <_free_r+0x90>
 8015d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d42:	9001      	str	r0, [sp, #4]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	f1a1 0404 	sub.w	r4, r1, #4
 8015d4a:	bfb8      	it	lt
 8015d4c:	18e4      	addlt	r4, r4, r3
 8015d4e:	f7ff fbeb 	bl	8015528 <__malloc_lock>
 8015d52:	4a1e      	ldr	r2, [pc, #120]	; (8015dcc <_free_r+0x94>)
 8015d54:	9801      	ldr	r0, [sp, #4]
 8015d56:	6813      	ldr	r3, [r2, #0]
 8015d58:	b933      	cbnz	r3, 8015d68 <_free_r+0x30>
 8015d5a:	6063      	str	r3, [r4, #4]
 8015d5c:	6014      	str	r4, [r2, #0]
 8015d5e:	b003      	add	sp, #12
 8015d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d64:	f7ff bbe6 	b.w	8015534 <__malloc_unlock>
 8015d68:	42a3      	cmp	r3, r4
 8015d6a:	d908      	bls.n	8015d7e <_free_r+0x46>
 8015d6c:	6825      	ldr	r5, [r4, #0]
 8015d6e:	1961      	adds	r1, r4, r5
 8015d70:	428b      	cmp	r3, r1
 8015d72:	bf01      	itttt	eq
 8015d74:	6819      	ldreq	r1, [r3, #0]
 8015d76:	685b      	ldreq	r3, [r3, #4]
 8015d78:	1949      	addeq	r1, r1, r5
 8015d7a:	6021      	streq	r1, [r4, #0]
 8015d7c:	e7ed      	b.n	8015d5a <_free_r+0x22>
 8015d7e:	461a      	mov	r2, r3
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	b10b      	cbz	r3, 8015d88 <_free_r+0x50>
 8015d84:	42a3      	cmp	r3, r4
 8015d86:	d9fa      	bls.n	8015d7e <_free_r+0x46>
 8015d88:	6811      	ldr	r1, [r2, #0]
 8015d8a:	1855      	adds	r5, r2, r1
 8015d8c:	42a5      	cmp	r5, r4
 8015d8e:	d10b      	bne.n	8015da8 <_free_r+0x70>
 8015d90:	6824      	ldr	r4, [r4, #0]
 8015d92:	4421      	add	r1, r4
 8015d94:	1854      	adds	r4, r2, r1
 8015d96:	42a3      	cmp	r3, r4
 8015d98:	6011      	str	r1, [r2, #0]
 8015d9a:	d1e0      	bne.n	8015d5e <_free_r+0x26>
 8015d9c:	681c      	ldr	r4, [r3, #0]
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	6053      	str	r3, [r2, #4]
 8015da2:	440c      	add	r4, r1
 8015da4:	6014      	str	r4, [r2, #0]
 8015da6:	e7da      	b.n	8015d5e <_free_r+0x26>
 8015da8:	d902      	bls.n	8015db0 <_free_r+0x78>
 8015daa:	230c      	movs	r3, #12
 8015dac:	6003      	str	r3, [r0, #0]
 8015dae:	e7d6      	b.n	8015d5e <_free_r+0x26>
 8015db0:	6825      	ldr	r5, [r4, #0]
 8015db2:	1961      	adds	r1, r4, r5
 8015db4:	428b      	cmp	r3, r1
 8015db6:	bf04      	itt	eq
 8015db8:	6819      	ldreq	r1, [r3, #0]
 8015dba:	685b      	ldreq	r3, [r3, #4]
 8015dbc:	6063      	str	r3, [r4, #4]
 8015dbe:	bf04      	itt	eq
 8015dc0:	1949      	addeq	r1, r1, r5
 8015dc2:	6021      	streq	r1, [r4, #0]
 8015dc4:	6054      	str	r4, [r2, #4]
 8015dc6:	e7ca      	b.n	8015d5e <_free_r+0x26>
 8015dc8:	b003      	add	sp, #12
 8015dca:	bd30      	pop	{r4, r5, pc}
 8015dcc:	24010bb8 	.word	0x24010bb8

08015dd0 <_malloc_usable_size_r>:
 8015dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dd4:	1f18      	subs	r0, r3, #4
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	bfbc      	itt	lt
 8015dda:	580b      	ldrlt	r3, [r1, r0]
 8015ddc:	18c0      	addlt	r0, r0, r3
 8015dde:	4770      	bx	lr

08015de0 <__ssputs_r>:
 8015de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015de4:	688e      	ldr	r6, [r1, #8]
 8015de6:	461f      	mov	r7, r3
 8015de8:	42be      	cmp	r6, r7
 8015dea:	680b      	ldr	r3, [r1, #0]
 8015dec:	4682      	mov	sl, r0
 8015dee:	460c      	mov	r4, r1
 8015df0:	4690      	mov	r8, r2
 8015df2:	d82c      	bhi.n	8015e4e <__ssputs_r+0x6e>
 8015df4:	898a      	ldrh	r2, [r1, #12]
 8015df6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015dfa:	d026      	beq.n	8015e4a <__ssputs_r+0x6a>
 8015dfc:	6965      	ldr	r5, [r4, #20]
 8015dfe:	6909      	ldr	r1, [r1, #16]
 8015e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e04:	eba3 0901 	sub.w	r9, r3, r1
 8015e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e0c:	1c7b      	adds	r3, r7, #1
 8015e0e:	444b      	add	r3, r9
 8015e10:	106d      	asrs	r5, r5, #1
 8015e12:	429d      	cmp	r5, r3
 8015e14:	bf38      	it	cc
 8015e16:	461d      	movcc	r5, r3
 8015e18:	0553      	lsls	r3, r2, #21
 8015e1a:	d527      	bpl.n	8015e6c <__ssputs_r+0x8c>
 8015e1c:	4629      	mov	r1, r5
 8015e1e:	f7ff fb03 	bl	8015428 <_malloc_r>
 8015e22:	4606      	mov	r6, r0
 8015e24:	b360      	cbz	r0, 8015e80 <__ssputs_r+0xa0>
 8015e26:	6921      	ldr	r1, [r4, #16]
 8015e28:	464a      	mov	r2, r9
 8015e2a:	f7ff ff4c 	bl	8015cc6 <memcpy>
 8015e2e:	89a3      	ldrh	r3, [r4, #12]
 8015e30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e38:	81a3      	strh	r3, [r4, #12]
 8015e3a:	6126      	str	r6, [r4, #16]
 8015e3c:	6165      	str	r5, [r4, #20]
 8015e3e:	444e      	add	r6, r9
 8015e40:	eba5 0509 	sub.w	r5, r5, r9
 8015e44:	6026      	str	r6, [r4, #0]
 8015e46:	60a5      	str	r5, [r4, #8]
 8015e48:	463e      	mov	r6, r7
 8015e4a:	42be      	cmp	r6, r7
 8015e4c:	d900      	bls.n	8015e50 <__ssputs_r+0x70>
 8015e4e:	463e      	mov	r6, r7
 8015e50:	6820      	ldr	r0, [r4, #0]
 8015e52:	4632      	mov	r2, r6
 8015e54:	4641      	mov	r1, r8
 8015e56:	f000 fd45 	bl	80168e4 <memmove>
 8015e5a:	68a3      	ldr	r3, [r4, #8]
 8015e5c:	1b9b      	subs	r3, r3, r6
 8015e5e:	60a3      	str	r3, [r4, #8]
 8015e60:	6823      	ldr	r3, [r4, #0]
 8015e62:	4433      	add	r3, r6
 8015e64:	6023      	str	r3, [r4, #0]
 8015e66:	2000      	movs	r0, #0
 8015e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e6c:	462a      	mov	r2, r5
 8015e6e:	f7ff fbdb 	bl	8015628 <_realloc_r>
 8015e72:	4606      	mov	r6, r0
 8015e74:	2800      	cmp	r0, #0
 8015e76:	d1e0      	bne.n	8015e3a <__ssputs_r+0x5a>
 8015e78:	6921      	ldr	r1, [r4, #16]
 8015e7a:	4650      	mov	r0, sl
 8015e7c:	f7ff ff5c 	bl	8015d38 <_free_r>
 8015e80:	230c      	movs	r3, #12
 8015e82:	f8ca 3000 	str.w	r3, [sl]
 8015e86:	89a3      	ldrh	r3, [r4, #12]
 8015e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e8c:	81a3      	strh	r3, [r4, #12]
 8015e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e92:	e7e9      	b.n	8015e68 <__ssputs_r+0x88>

08015e94 <_svfiprintf_r>:
 8015e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e98:	4698      	mov	r8, r3
 8015e9a:	898b      	ldrh	r3, [r1, #12]
 8015e9c:	061b      	lsls	r3, r3, #24
 8015e9e:	b09d      	sub	sp, #116	; 0x74
 8015ea0:	4607      	mov	r7, r0
 8015ea2:	460d      	mov	r5, r1
 8015ea4:	4614      	mov	r4, r2
 8015ea6:	d50e      	bpl.n	8015ec6 <_svfiprintf_r+0x32>
 8015ea8:	690b      	ldr	r3, [r1, #16]
 8015eaa:	b963      	cbnz	r3, 8015ec6 <_svfiprintf_r+0x32>
 8015eac:	2140      	movs	r1, #64	; 0x40
 8015eae:	f7ff fabb 	bl	8015428 <_malloc_r>
 8015eb2:	6028      	str	r0, [r5, #0]
 8015eb4:	6128      	str	r0, [r5, #16]
 8015eb6:	b920      	cbnz	r0, 8015ec2 <_svfiprintf_r+0x2e>
 8015eb8:	230c      	movs	r3, #12
 8015eba:	603b      	str	r3, [r7, #0]
 8015ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ec0:	e0d0      	b.n	8016064 <_svfiprintf_r+0x1d0>
 8015ec2:	2340      	movs	r3, #64	; 0x40
 8015ec4:	616b      	str	r3, [r5, #20]
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8015eca:	2320      	movs	r3, #32
 8015ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ed4:	2330      	movs	r3, #48	; 0x30
 8015ed6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801607c <_svfiprintf_r+0x1e8>
 8015eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ede:	f04f 0901 	mov.w	r9, #1
 8015ee2:	4623      	mov	r3, r4
 8015ee4:	469a      	mov	sl, r3
 8015ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015eea:	b10a      	cbz	r2, 8015ef0 <_svfiprintf_r+0x5c>
 8015eec:	2a25      	cmp	r2, #37	; 0x25
 8015eee:	d1f9      	bne.n	8015ee4 <_svfiprintf_r+0x50>
 8015ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8015ef4:	d00b      	beq.n	8015f0e <_svfiprintf_r+0x7a>
 8015ef6:	465b      	mov	r3, fp
 8015ef8:	4622      	mov	r2, r4
 8015efa:	4629      	mov	r1, r5
 8015efc:	4638      	mov	r0, r7
 8015efe:	f7ff ff6f 	bl	8015de0 <__ssputs_r>
 8015f02:	3001      	adds	r0, #1
 8015f04:	f000 80a9 	beq.w	801605a <_svfiprintf_r+0x1c6>
 8015f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f0a:	445a      	add	r2, fp
 8015f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8015f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	f000 80a1 	beq.w	801605a <_svfiprintf_r+0x1c6>
 8015f18:	2300      	movs	r3, #0
 8015f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f22:	f10a 0a01 	add.w	sl, sl, #1
 8015f26:	9304      	str	r3, [sp, #16]
 8015f28:	9307      	str	r3, [sp, #28]
 8015f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8015f30:	4654      	mov	r4, sl
 8015f32:	2205      	movs	r2, #5
 8015f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f38:	4850      	ldr	r0, [pc, #320]	; (801607c <_svfiprintf_r+0x1e8>)
 8015f3a:	f7ea f9f1 	bl	8000320 <memchr>
 8015f3e:	9a04      	ldr	r2, [sp, #16]
 8015f40:	b9d8      	cbnz	r0, 8015f7a <_svfiprintf_r+0xe6>
 8015f42:	06d0      	lsls	r0, r2, #27
 8015f44:	bf44      	itt	mi
 8015f46:	2320      	movmi	r3, #32
 8015f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f4c:	0711      	lsls	r1, r2, #28
 8015f4e:	bf44      	itt	mi
 8015f50:	232b      	movmi	r3, #43	; 0x2b
 8015f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f56:	f89a 3000 	ldrb.w	r3, [sl]
 8015f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8015f5c:	d015      	beq.n	8015f8a <_svfiprintf_r+0xf6>
 8015f5e:	9a07      	ldr	r2, [sp, #28]
 8015f60:	4654      	mov	r4, sl
 8015f62:	2000      	movs	r0, #0
 8015f64:	f04f 0c0a 	mov.w	ip, #10
 8015f68:	4621      	mov	r1, r4
 8015f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f6e:	3b30      	subs	r3, #48	; 0x30
 8015f70:	2b09      	cmp	r3, #9
 8015f72:	d94d      	bls.n	8016010 <_svfiprintf_r+0x17c>
 8015f74:	b1b0      	cbz	r0, 8015fa4 <_svfiprintf_r+0x110>
 8015f76:	9207      	str	r2, [sp, #28]
 8015f78:	e014      	b.n	8015fa4 <_svfiprintf_r+0x110>
 8015f7a:	eba0 0308 	sub.w	r3, r0, r8
 8015f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8015f82:	4313      	orrs	r3, r2
 8015f84:	9304      	str	r3, [sp, #16]
 8015f86:	46a2      	mov	sl, r4
 8015f88:	e7d2      	b.n	8015f30 <_svfiprintf_r+0x9c>
 8015f8a:	9b03      	ldr	r3, [sp, #12]
 8015f8c:	1d19      	adds	r1, r3, #4
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	9103      	str	r1, [sp, #12]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	bfbb      	ittet	lt
 8015f96:	425b      	neglt	r3, r3
 8015f98:	f042 0202 	orrlt.w	r2, r2, #2
 8015f9c:	9307      	strge	r3, [sp, #28]
 8015f9e:	9307      	strlt	r3, [sp, #28]
 8015fa0:	bfb8      	it	lt
 8015fa2:	9204      	strlt	r2, [sp, #16]
 8015fa4:	7823      	ldrb	r3, [r4, #0]
 8015fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8015fa8:	d10c      	bne.n	8015fc4 <_svfiprintf_r+0x130>
 8015faa:	7863      	ldrb	r3, [r4, #1]
 8015fac:	2b2a      	cmp	r3, #42	; 0x2a
 8015fae:	d134      	bne.n	801601a <_svfiprintf_r+0x186>
 8015fb0:	9b03      	ldr	r3, [sp, #12]
 8015fb2:	1d1a      	adds	r2, r3, #4
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	9203      	str	r2, [sp, #12]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	bfb8      	it	lt
 8015fbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015fc0:	3402      	adds	r4, #2
 8015fc2:	9305      	str	r3, [sp, #20]
 8015fc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801608c <_svfiprintf_r+0x1f8>
 8015fc8:	7821      	ldrb	r1, [r4, #0]
 8015fca:	2203      	movs	r2, #3
 8015fcc:	4650      	mov	r0, sl
 8015fce:	f7ea f9a7 	bl	8000320 <memchr>
 8015fd2:	b138      	cbz	r0, 8015fe4 <_svfiprintf_r+0x150>
 8015fd4:	9b04      	ldr	r3, [sp, #16]
 8015fd6:	eba0 000a 	sub.w	r0, r0, sl
 8015fda:	2240      	movs	r2, #64	; 0x40
 8015fdc:	4082      	lsls	r2, r0
 8015fde:	4313      	orrs	r3, r2
 8015fe0:	3401      	adds	r4, #1
 8015fe2:	9304      	str	r3, [sp, #16]
 8015fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fe8:	4825      	ldr	r0, [pc, #148]	; (8016080 <_svfiprintf_r+0x1ec>)
 8015fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fee:	2206      	movs	r2, #6
 8015ff0:	f7ea f996 	bl	8000320 <memchr>
 8015ff4:	2800      	cmp	r0, #0
 8015ff6:	d038      	beq.n	801606a <_svfiprintf_r+0x1d6>
 8015ff8:	4b22      	ldr	r3, [pc, #136]	; (8016084 <_svfiprintf_r+0x1f0>)
 8015ffa:	bb1b      	cbnz	r3, 8016044 <_svfiprintf_r+0x1b0>
 8015ffc:	9b03      	ldr	r3, [sp, #12]
 8015ffe:	3307      	adds	r3, #7
 8016000:	f023 0307 	bic.w	r3, r3, #7
 8016004:	3308      	adds	r3, #8
 8016006:	9303      	str	r3, [sp, #12]
 8016008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801600a:	4433      	add	r3, r6
 801600c:	9309      	str	r3, [sp, #36]	; 0x24
 801600e:	e768      	b.n	8015ee2 <_svfiprintf_r+0x4e>
 8016010:	fb0c 3202 	mla	r2, ip, r2, r3
 8016014:	460c      	mov	r4, r1
 8016016:	2001      	movs	r0, #1
 8016018:	e7a6      	b.n	8015f68 <_svfiprintf_r+0xd4>
 801601a:	2300      	movs	r3, #0
 801601c:	3401      	adds	r4, #1
 801601e:	9305      	str	r3, [sp, #20]
 8016020:	4619      	mov	r1, r3
 8016022:	f04f 0c0a 	mov.w	ip, #10
 8016026:	4620      	mov	r0, r4
 8016028:	f810 2b01 	ldrb.w	r2, [r0], #1
 801602c:	3a30      	subs	r2, #48	; 0x30
 801602e:	2a09      	cmp	r2, #9
 8016030:	d903      	bls.n	801603a <_svfiprintf_r+0x1a6>
 8016032:	2b00      	cmp	r3, #0
 8016034:	d0c6      	beq.n	8015fc4 <_svfiprintf_r+0x130>
 8016036:	9105      	str	r1, [sp, #20]
 8016038:	e7c4      	b.n	8015fc4 <_svfiprintf_r+0x130>
 801603a:	fb0c 2101 	mla	r1, ip, r1, r2
 801603e:	4604      	mov	r4, r0
 8016040:	2301      	movs	r3, #1
 8016042:	e7f0      	b.n	8016026 <_svfiprintf_r+0x192>
 8016044:	ab03      	add	r3, sp, #12
 8016046:	9300      	str	r3, [sp, #0]
 8016048:	462a      	mov	r2, r5
 801604a:	4b0f      	ldr	r3, [pc, #60]	; (8016088 <_svfiprintf_r+0x1f4>)
 801604c:	a904      	add	r1, sp, #16
 801604e:	4638      	mov	r0, r7
 8016050:	f3af 8000 	nop.w
 8016054:	1c42      	adds	r2, r0, #1
 8016056:	4606      	mov	r6, r0
 8016058:	d1d6      	bne.n	8016008 <_svfiprintf_r+0x174>
 801605a:	89ab      	ldrh	r3, [r5, #12]
 801605c:	065b      	lsls	r3, r3, #25
 801605e:	f53f af2d 	bmi.w	8015ebc <_svfiprintf_r+0x28>
 8016062:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016064:	b01d      	add	sp, #116	; 0x74
 8016066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606a:	ab03      	add	r3, sp, #12
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	462a      	mov	r2, r5
 8016070:	4b05      	ldr	r3, [pc, #20]	; (8016088 <_svfiprintf_r+0x1f4>)
 8016072:	a904      	add	r1, sp, #16
 8016074:	4638      	mov	r0, r7
 8016076:	f000 f9bd 	bl	80163f4 <_printf_i>
 801607a:	e7eb      	b.n	8016054 <_svfiprintf_r+0x1c0>
 801607c:	080176a8 	.word	0x080176a8
 8016080:	080176b2 	.word	0x080176b2
 8016084:	00000000 	.word	0x00000000
 8016088:	08015de1 	.word	0x08015de1
 801608c:	080176ae 	.word	0x080176ae

08016090 <__sfputc_r>:
 8016090:	6893      	ldr	r3, [r2, #8]
 8016092:	3b01      	subs	r3, #1
 8016094:	2b00      	cmp	r3, #0
 8016096:	b410      	push	{r4}
 8016098:	6093      	str	r3, [r2, #8]
 801609a:	da08      	bge.n	80160ae <__sfputc_r+0x1e>
 801609c:	6994      	ldr	r4, [r2, #24]
 801609e:	42a3      	cmp	r3, r4
 80160a0:	db01      	blt.n	80160a6 <__sfputc_r+0x16>
 80160a2:	290a      	cmp	r1, #10
 80160a4:	d103      	bne.n	80160ae <__sfputc_r+0x1e>
 80160a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160aa:	f000 bb85 	b.w	80167b8 <__swbuf_r>
 80160ae:	6813      	ldr	r3, [r2, #0]
 80160b0:	1c58      	adds	r0, r3, #1
 80160b2:	6010      	str	r0, [r2, #0]
 80160b4:	7019      	strb	r1, [r3, #0]
 80160b6:	4608      	mov	r0, r1
 80160b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160bc:	4770      	bx	lr

080160be <__sfputs_r>:
 80160be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160c0:	4606      	mov	r6, r0
 80160c2:	460f      	mov	r7, r1
 80160c4:	4614      	mov	r4, r2
 80160c6:	18d5      	adds	r5, r2, r3
 80160c8:	42ac      	cmp	r4, r5
 80160ca:	d101      	bne.n	80160d0 <__sfputs_r+0x12>
 80160cc:	2000      	movs	r0, #0
 80160ce:	e007      	b.n	80160e0 <__sfputs_r+0x22>
 80160d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160d4:	463a      	mov	r2, r7
 80160d6:	4630      	mov	r0, r6
 80160d8:	f7ff ffda 	bl	8016090 <__sfputc_r>
 80160dc:	1c43      	adds	r3, r0, #1
 80160de:	d1f3      	bne.n	80160c8 <__sfputs_r+0xa>
 80160e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080160e4 <_vfiprintf_r>:
 80160e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e8:	460d      	mov	r5, r1
 80160ea:	b09d      	sub	sp, #116	; 0x74
 80160ec:	4614      	mov	r4, r2
 80160ee:	4698      	mov	r8, r3
 80160f0:	4606      	mov	r6, r0
 80160f2:	b118      	cbz	r0, 80160fc <_vfiprintf_r+0x18>
 80160f4:	6a03      	ldr	r3, [r0, #32]
 80160f6:	b90b      	cbnz	r3, 80160fc <_vfiprintf_r+0x18>
 80160f8:	f7ff fbce 	bl	8015898 <__sinit>
 80160fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160fe:	07d9      	lsls	r1, r3, #31
 8016100:	d405      	bmi.n	801610e <_vfiprintf_r+0x2a>
 8016102:	89ab      	ldrh	r3, [r5, #12]
 8016104:	059a      	lsls	r2, r3, #22
 8016106:	d402      	bmi.n	801610e <_vfiprintf_r+0x2a>
 8016108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801610a:	f7ff fdd2 	bl	8015cb2 <__retarget_lock_acquire_recursive>
 801610e:	89ab      	ldrh	r3, [r5, #12]
 8016110:	071b      	lsls	r3, r3, #28
 8016112:	d501      	bpl.n	8016118 <_vfiprintf_r+0x34>
 8016114:	692b      	ldr	r3, [r5, #16]
 8016116:	b99b      	cbnz	r3, 8016140 <_vfiprintf_r+0x5c>
 8016118:	4629      	mov	r1, r5
 801611a:	4630      	mov	r0, r6
 801611c:	f000 fb8a 	bl	8016834 <__swsetup_r>
 8016120:	b170      	cbz	r0, 8016140 <_vfiprintf_r+0x5c>
 8016122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016124:	07dc      	lsls	r4, r3, #31
 8016126:	d504      	bpl.n	8016132 <_vfiprintf_r+0x4e>
 8016128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801612c:	b01d      	add	sp, #116	; 0x74
 801612e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016132:	89ab      	ldrh	r3, [r5, #12]
 8016134:	0598      	lsls	r0, r3, #22
 8016136:	d4f7      	bmi.n	8016128 <_vfiprintf_r+0x44>
 8016138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801613a:	f7ff fdbb 	bl	8015cb4 <__retarget_lock_release_recursive>
 801613e:	e7f3      	b.n	8016128 <_vfiprintf_r+0x44>
 8016140:	2300      	movs	r3, #0
 8016142:	9309      	str	r3, [sp, #36]	; 0x24
 8016144:	2320      	movs	r3, #32
 8016146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801614a:	f8cd 800c 	str.w	r8, [sp, #12]
 801614e:	2330      	movs	r3, #48	; 0x30
 8016150:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016304 <_vfiprintf_r+0x220>
 8016154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016158:	f04f 0901 	mov.w	r9, #1
 801615c:	4623      	mov	r3, r4
 801615e:	469a      	mov	sl, r3
 8016160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016164:	b10a      	cbz	r2, 801616a <_vfiprintf_r+0x86>
 8016166:	2a25      	cmp	r2, #37	; 0x25
 8016168:	d1f9      	bne.n	801615e <_vfiprintf_r+0x7a>
 801616a:	ebba 0b04 	subs.w	fp, sl, r4
 801616e:	d00b      	beq.n	8016188 <_vfiprintf_r+0xa4>
 8016170:	465b      	mov	r3, fp
 8016172:	4622      	mov	r2, r4
 8016174:	4629      	mov	r1, r5
 8016176:	4630      	mov	r0, r6
 8016178:	f7ff ffa1 	bl	80160be <__sfputs_r>
 801617c:	3001      	adds	r0, #1
 801617e:	f000 80a9 	beq.w	80162d4 <_vfiprintf_r+0x1f0>
 8016182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016184:	445a      	add	r2, fp
 8016186:	9209      	str	r2, [sp, #36]	; 0x24
 8016188:	f89a 3000 	ldrb.w	r3, [sl]
 801618c:	2b00      	cmp	r3, #0
 801618e:	f000 80a1 	beq.w	80162d4 <_vfiprintf_r+0x1f0>
 8016192:	2300      	movs	r3, #0
 8016194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801619c:	f10a 0a01 	add.w	sl, sl, #1
 80161a0:	9304      	str	r3, [sp, #16]
 80161a2:	9307      	str	r3, [sp, #28]
 80161a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80161a8:	931a      	str	r3, [sp, #104]	; 0x68
 80161aa:	4654      	mov	r4, sl
 80161ac:	2205      	movs	r2, #5
 80161ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161b2:	4854      	ldr	r0, [pc, #336]	; (8016304 <_vfiprintf_r+0x220>)
 80161b4:	f7ea f8b4 	bl	8000320 <memchr>
 80161b8:	9a04      	ldr	r2, [sp, #16]
 80161ba:	b9d8      	cbnz	r0, 80161f4 <_vfiprintf_r+0x110>
 80161bc:	06d1      	lsls	r1, r2, #27
 80161be:	bf44      	itt	mi
 80161c0:	2320      	movmi	r3, #32
 80161c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161c6:	0713      	lsls	r3, r2, #28
 80161c8:	bf44      	itt	mi
 80161ca:	232b      	movmi	r3, #43	; 0x2b
 80161cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161d0:	f89a 3000 	ldrb.w	r3, [sl]
 80161d4:	2b2a      	cmp	r3, #42	; 0x2a
 80161d6:	d015      	beq.n	8016204 <_vfiprintf_r+0x120>
 80161d8:	9a07      	ldr	r2, [sp, #28]
 80161da:	4654      	mov	r4, sl
 80161dc:	2000      	movs	r0, #0
 80161de:	f04f 0c0a 	mov.w	ip, #10
 80161e2:	4621      	mov	r1, r4
 80161e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161e8:	3b30      	subs	r3, #48	; 0x30
 80161ea:	2b09      	cmp	r3, #9
 80161ec:	d94d      	bls.n	801628a <_vfiprintf_r+0x1a6>
 80161ee:	b1b0      	cbz	r0, 801621e <_vfiprintf_r+0x13a>
 80161f0:	9207      	str	r2, [sp, #28]
 80161f2:	e014      	b.n	801621e <_vfiprintf_r+0x13a>
 80161f4:	eba0 0308 	sub.w	r3, r0, r8
 80161f8:	fa09 f303 	lsl.w	r3, r9, r3
 80161fc:	4313      	orrs	r3, r2
 80161fe:	9304      	str	r3, [sp, #16]
 8016200:	46a2      	mov	sl, r4
 8016202:	e7d2      	b.n	80161aa <_vfiprintf_r+0xc6>
 8016204:	9b03      	ldr	r3, [sp, #12]
 8016206:	1d19      	adds	r1, r3, #4
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	9103      	str	r1, [sp, #12]
 801620c:	2b00      	cmp	r3, #0
 801620e:	bfbb      	ittet	lt
 8016210:	425b      	neglt	r3, r3
 8016212:	f042 0202 	orrlt.w	r2, r2, #2
 8016216:	9307      	strge	r3, [sp, #28]
 8016218:	9307      	strlt	r3, [sp, #28]
 801621a:	bfb8      	it	lt
 801621c:	9204      	strlt	r2, [sp, #16]
 801621e:	7823      	ldrb	r3, [r4, #0]
 8016220:	2b2e      	cmp	r3, #46	; 0x2e
 8016222:	d10c      	bne.n	801623e <_vfiprintf_r+0x15a>
 8016224:	7863      	ldrb	r3, [r4, #1]
 8016226:	2b2a      	cmp	r3, #42	; 0x2a
 8016228:	d134      	bne.n	8016294 <_vfiprintf_r+0x1b0>
 801622a:	9b03      	ldr	r3, [sp, #12]
 801622c:	1d1a      	adds	r2, r3, #4
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	9203      	str	r2, [sp, #12]
 8016232:	2b00      	cmp	r3, #0
 8016234:	bfb8      	it	lt
 8016236:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801623a:	3402      	adds	r4, #2
 801623c:	9305      	str	r3, [sp, #20]
 801623e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016314 <_vfiprintf_r+0x230>
 8016242:	7821      	ldrb	r1, [r4, #0]
 8016244:	2203      	movs	r2, #3
 8016246:	4650      	mov	r0, sl
 8016248:	f7ea f86a 	bl	8000320 <memchr>
 801624c:	b138      	cbz	r0, 801625e <_vfiprintf_r+0x17a>
 801624e:	9b04      	ldr	r3, [sp, #16]
 8016250:	eba0 000a 	sub.w	r0, r0, sl
 8016254:	2240      	movs	r2, #64	; 0x40
 8016256:	4082      	lsls	r2, r0
 8016258:	4313      	orrs	r3, r2
 801625a:	3401      	adds	r4, #1
 801625c:	9304      	str	r3, [sp, #16]
 801625e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016262:	4829      	ldr	r0, [pc, #164]	; (8016308 <_vfiprintf_r+0x224>)
 8016264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016268:	2206      	movs	r2, #6
 801626a:	f7ea f859 	bl	8000320 <memchr>
 801626e:	2800      	cmp	r0, #0
 8016270:	d03f      	beq.n	80162f2 <_vfiprintf_r+0x20e>
 8016272:	4b26      	ldr	r3, [pc, #152]	; (801630c <_vfiprintf_r+0x228>)
 8016274:	bb1b      	cbnz	r3, 80162be <_vfiprintf_r+0x1da>
 8016276:	9b03      	ldr	r3, [sp, #12]
 8016278:	3307      	adds	r3, #7
 801627a:	f023 0307 	bic.w	r3, r3, #7
 801627e:	3308      	adds	r3, #8
 8016280:	9303      	str	r3, [sp, #12]
 8016282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016284:	443b      	add	r3, r7
 8016286:	9309      	str	r3, [sp, #36]	; 0x24
 8016288:	e768      	b.n	801615c <_vfiprintf_r+0x78>
 801628a:	fb0c 3202 	mla	r2, ip, r2, r3
 801628e:	460c      	mov	r4, r1
 8016290:	2001      	movs	r0, #1
 8016292:	e7a6      	b.n	80161e2 <_vfiprintf_r+0xfe>
 8016294:	2300      	movs	r3, #0
 8016296:	3401      	adds	r4, #1
 8016298:	9305      	str	r3, [sp, #20]
 801629a:	4619      	mov	r1, r3
 801629c:	f04f 0c0a 	mov.w	ip, #10
 80162a0:	4620      	mov	r0, r4
 80162a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162a6:	3a30      	subs	r2, #48	; 0x30
 80162a8:	2a09      	cmp	r2, #9
 80162aa:	d903      	bls.n	80162b4 <_vfiprintf_r+0x1d0>
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d0c6      	beq.n	801623e <_vfiprintf_r+0x15a>
 80162b0:	9105      	str	r1, [sp, #20]
 80162b2:	e7c4      	b.n	801623e <_vfiprintf_r+0x15a>
 80162b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80162b8:	4604      	mov	r4, r0
 80162ba:	2301      	movs	r3, #1
 80162bc:	e7f0      	b.n	80162a0 <_vfiprintf_r+0x1bc>
 80162be:	ab03      	add	r3, sp, #12
 80162c0:	9300      	str	r3, [sp, #0]
 80162c2:	462a      	mov	r2, r5
 80162c4:	4b12      	ldr	r3, [pc, #72]	; (8016310 <_vfiprintf_r+0x22c>)
 80162c6:	a904      	add	r1, sp, #16
 80162c8:	4630      	mov	r0, r6
 80162ca:	f3af 8000 	nop.w
 80162ce:	4607      	mov	r7, r0
 80162d0:	1c78      	adds	r0, r7, #1
 80162d2:	d1d6      	bne.n	8016282 <_vfiprintf_r+0x19e>
 80162d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80162d6:	07d9      	lsls	r1, r3, #31
 80162d8:	d405      	bmi.n	80162e6 <_vfiprintf_r+0x202>
 80162da:	89ab      	ldrh	r3, [r5, #12]
 80162dc:	059a      	lsls	r2, r3, #22
 80162de:	d402      	bmi.n	80162e6 <_vfiprintf_r+0x202>
 80162e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162e2:	f7ff fce7 	bl	8015cb4 <__retarget_lock_release_recursive>
 80162e6:	89ab      	ldrh	r3, [r5, #12]
 80162e8:	065b      	lsls	r3, r3, #25
 80162ea:	f53f af1d 	bmi.w	8016128 <_vfiprintf_r+0x44>
 80162ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80162f0:	e71c      	b.n	801612c <_vfiprintf_r+0x48>
 80162f2:	ab03      	add	r3, sp, #12
 80162f4:	9300      	str	r3, [sp, #0]
 80162f6:	462a      	mov	r2, r5
 80162f8:	4b05      	ldr	r3, [pc, #20]	; (8016310 <_vfiprintf_r+0x22c>)
 80162fa:	a904      	add	r1, sp, #16
 80162fc:	4630      	mov	r0, r6
 80162fe:	f000 f879 	bl	80163f4 <_printf_i>
 8016302:	e7e4      	b.n	80162ce <_vfiprintf_r+0x1ea>
 8016304:	080176a8 	.word	0x080176a8
 8016308:	080176b2 	.word	0x080176b2
 801630c:	00000000 	.word	0x00000000
 8016310:	080160bf 	.word	0x080160bf
 8016314:	080176ae 	.word	0x080176ae

08016318 <_printf_common>:
 8016318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801631c:	4616      	mov	r6, r2
 801631e:	4699      	mov	r9, r3
 8016320:	688a      	ldr	r2, [r1, #8]
 8016322:	690b      	ldr	r3, [r1, #16]
 8016324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016328:	4293      	cmp	r3, r2
 801632a:	bfb8      	it	lt
 801632c:	4613      	movlt	r3, r2
 801632e:	6033      	str	r3, [r6, #0]
 8016330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016334:	4607      	mov	r7, r0
 8016336:	460c      	mov	r4, r1
 8016338:	b10a      	cbz	r2, 801633e <_printf_common+0x26>
 801633a:	3301      	adds	r3, #1
 801633c:	6033      	str	r3, [r6, #0]
 801633e:	6823      	ldr	r3, [r4, #0]
 8016340:	0699      	lsls	r1, r3, #26
 8016342:	bf42      	ittt	mi
 8016344:	6833      	ldrmi	r3, [r6, #0]
 8016346:	3302      	addmi	r3, #2
 8016348:	6033      	strmi	r3, [r6, #0]
 801634a:	6825      	ldr	r5, [r4, #0]
 801634c:	f015 0506 	ands.w	r5, r5, #6
 8016350:	d106      	bne.n	8016360 <_printf_common+0x48>
 8016352:	f104 0a19 	add.w	sl, r4, #25
 8016356:	68e3      	ldr	r3, [r4, #12]
 8016358:	6832      	ldr	r2, [r6, #0]
 801635a:	1a9b      	subs	r3, r3, r2
 801635c:	42ab      	cmp	r3, r5
 801635e:	dc26      	bgt.n	80163ae <_printf_common+0x96>
 8016360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016364:	1e13      	subs	r3, r2, #0
 8016366:	6822      	ldr	r2, [r4, #0]
 8016368:	bf18      	it	ne
 801636a:	2301      	movne	r3, #1
 801636c:	0692      	lsls	r2, r2, #26
 801636e:	d42b      	bmi.n	80163c8 <_printf_common+0xb0>
 8016370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016374:	4649      	mov	r1, r9
 8016376:	4638      	mov	r0, r7
 8016378:	47c0      	blx	r8
 801637a:	3001      	adds	r0, #1
 801637c:	d01e      	beq.n	80163bc <_printf_common+0xa4>
 801637e:	6823      	ldr	r3, [r4, #0]
 8016380:	6922      	ldr	r2, [r4, #16]
 8016382:	f003 0306 	and.w	r3, r3, #6
 8016386:	2b04      	cmp	r3, #4
 8016388:	bf02      	ittt	eq
 801638a:	68e5      	ldreq	r5, [r4, #12]
 801638c:	6833      	ldreq	r3, [r6, #0]
 801638e:	1aed      	subeq	r5, r5, r3
 8016390:	68a3      	ldr	r3, [r4, #8]
 8016392:	bf0c      	ite	eq
 8016394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016398:	2500      	movne	r5, #0
 801639a:	4293      	cmp	r3, r2
 801639c:	bfc4      	itt	gt
 801639e:	1a9b      	subgt	r3, r3, r2
 80163a0:	18ed      	addgt	r5, r5, r3
 80163a2:	2600      	movs	r6, #0
 80163a4:	341a      	adds	r4, #26
 80163a6:	42b5      	cmp	r5, r6
 80163a8:	d11a      	bne.n	80163e0 <_printf_common+0xc8>
 80163aa:	2000      	movs	r0, #0
 80163ac:	e008      	b.n	80163c0 <_printf_common+0xa8>
 80163ae:	2301      	movs	r3, #1
 80163b0:	4652      	mov	r2, sl
 80163b2:	4649      	mov	r1, r9
 80163b4:	4638      	mov	r0, r7
 80163b6:	47c0      	blx	r8
 80163b8:	3001      	adds	r0, #1
 80163ba:	d103      	bne.n	80163c4 <_printf_common+0xac>
 80163bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163c4:	3501      	adds	r5, #1
 80163c6:	e7c6      	b.n	8016356 <_printf_common+0x3e>
 80163c8:	18e1      	adds	r1, r4, r3
 80163ca:	1c5a      	adds	r2, r3, #1
 80163cc:	2030      	movs	r0, #48	; 0x30
 80163ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80163d2:	4422      	add	r2, r4
 80163d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80163d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80163dc:	3302      	adds	r3, #2
 80163de:	e7c7      	b.n	8016370 <_printf_common+0x58>
 80163e0:	2301      	movs	r3, #1
 80163e2:	4622      	mov	r2, r4
 80163e4:	4649      	mov	r1, r9
 80163e6:	4638      	mov	r0, r7
 80163e8:	47c0      	blx	r8
 80163ea:	3001      	adds	r0, #1
 80163ec:	d0e6      	beq.n	80163bc <_printf_common+0xa4>
 80163ee:	3601      	adds	r6, #1
 80163f0:	e7d9      	b.n	80163a6 <_printf_common+0x8e>
	...

080163f4 <_printf_i>:
 80163f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80163f8:	7e0f      	ldrb	r7, [r1, #24]
 80163fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80163fc:	2f78      	cmp	r7, #120	; 0x78
 80163fe:	4691      	mov	r9, r2
 8016400:	4680      	mov	r8, r0
 8016402:	460c      	mov	r4, r1
 8016404:	469a      	mov	sl, r3
 8016406:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801640a:	d807      	bhi.n	801641c <_printf_i+0x28>
 801640c:	2f62      	cmp	r7, #98	; 0x62
 801640e:	d80a      	bhi.n	8016426 <_printf_i+0x32>
 8016410:	2f00      	cmp	r7, #0
 8016412:	f000 80d4 	beq.w	80165be <_printf_i+0x1ca>
 8016416:	2f58      	cmp	r7, #88	; 0x58
 8016418:	f000 80c0 	beq.w	801659c <_printf_i+0x1a8>
 801641c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016424:	e03a      	b.n	801649c <_printf_i+0xa8>
 8016426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801642a:	2b15      	cmp	r3, #21
 801642c:	d8f6      	bhi.n	801641c <_printf_i+0x28>
 801642e:	a101      	add	r1, pc, #4	; (adr r1, 8016434 <_printf_i+0x40>)
 8016430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016434:	0801648d 	.word	0x0801648d
 8016438:	080164a1 	.word	0x080164a1
 801643c:	0801641d 	.word	0x0801641d
 8016440:	0801641d 	.word	0x0801641d
 8016444:	0801641d 	.word	0x0801641d
 8016448:	0801641d 	.word	0x0801641d
 801644c:	080164a1 	.word	0x080164a1
 8016450:	0801641d 	.word	0x0801641d
 8016454:	0801641d 	.word	0x0801641d
 8016458:	0801641d 	.word	0x0801641d
 801645c:	0801641d 	.word	0x0801641d
 8016460:	080165a5 	.word	0x080165a5
 8016464:	080164cd 	.word	0x080164cd
 8016468:	0801655f 	.word	0x0801655f
 801646c:	0801641d 	.word	0x0801641d
 8016470:	0801641d 	.word	0x0801641d
 8016474:	080165c7 	.word	0x080165c7
 8016478:	0801641d 	.word	0x0801641d
 801647c:	080164cd 	.word	0x080164cd
 8016480:	0801641d 	.word	0x0801641d
 8016484:	0801641d 	.word	0x0801641d
 8016488:	08016567 	.word	0x08016567
 801648c:	682b      	ldr	r3, [r5, #0]
 801648e:	1d1a      	adds	r2, r3, #4
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	602a      	str	r2, [r5, #0]
 8016494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801649c:	2301      	movs	r3, #1
 801649e:	e09f      	b.n	80165e0 <_printf_i+0x1ec>
 80164a0:	6820      	ldr	r0, [r4, #0]
 80164a2:	682b      	ldr	r3, [r5, #0]
 80164a4:	0607      	lsls	r7, r0, #24
 80164a6:	f103 0104 	add.w	r1, r3, #4
 80164aa:	6029      	str	r1, [r5, #0]
 80164ac:	d501      	bpl.n	80164b2 <_printf_i+0xbe>
 80164ae:	681e      	ldr	r6, [r3, #0]
 80164b0:	e003      	b.n	80164ba <_printf_i+0xc6>
 80164b2:	0646      	lsls	r6, r0, #25
 80164b4:	d5fb      	bpl.n	80164ae <_printf_i+0xba>
 80164b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80164ba:	2e00      	cmp	r6, #0
 80164bc:	da03      	bge.n	80164c6 <_printf_i+0xd2>
 80164be:	232d      	movs	r3, #45	; 0x2d
 80164c0:	4276      	negs	r6, r6
 80164c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80164c6:	485a      	ldr	r0, [pc, #360]	; (8016630 <_printf_i+0x23c>)
 80164c8:	230a      	movs	r3, #10
 80164ca:	e012      	b.n	80164f2 <_printf_i+0xfe>
 80164cc:	682b      	ldr	r3, [r5, #0]
 80164ce:	6820      	ldr	r0, [r4, #0]
 80164d0:	1d19      	adds	r1, r3, #4
 80164d2:	6029      	str	r1, [r5, #0]
 80164d4:	0605      	lsls	r5, r0, #24
 80164d6:	d501      	bpl.n	80164dc <_printf_i+0xe8>
 80164d8:	681e      	ldr	r6, [r3, #0]
 80164da:	e002      	b.n	80164e2 <_printf_i+0xee>
 80164dc:	0641      	lsls	r1, r0, #25
 80164de:	d5fb      	bpl.n	80164d8 <_printf_i+0xe4>
 80164e0:	881e      	ldrh	r6, [r3, #0]
 80164e2:	4853      	ldr	r0, [pc, #332]	; (8016630 <_printf_i+0x23c>)
 80164e4:	2f6f      	cmp	r7, #111	; 0x6f
 80164e6:	bf0c      	ite	eq
 80164e8:	2308      	moveq	r3, #8
 80164ea:	230a      	movne	r3, #10
 80164ec:	2100      	movs	r1, #0
 80164ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80164f2:	6865      	ldr	r5, [r4, #4]
 80164f4:	60a5      	str	r5, [r4, #8]
 80164f6:	2d00      	cmp	r5, #0
 80164f8:	bfa2      	ittt	ge
 80164fa:	6821      	ldrge	r1, [r4, #0]
 80164fc:	f021 0104 	bicge.w	r1, r1, #4
 8016500:	6021      	strge	r1, [r4, #0]
 8016502:	b90e      	cbnz	r6, 8016508 <_printf_i+0x114>
 8016504:	2d00      	cmp	r5, #0
 8016506:	d04b      	beq.n	80165a0 <_printf_i+0x1ac>
 8016508:	4615      	mov	r5, r2
 801650a:	fbb6 f1f3 	udiv	r1, r6, r3
 801650e:	fb03 6711 	mls	r7, r3, r1, r6
 8016512:	5dc7      	ldrb	r7, [r0, r7]
 8016514:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016518:	4637      	mov	r7, r6
 801651a:	42bb      	cmp	r3, r7
 801651c:	460e      	mov	r6, r1
 801651e:	d9f4      	bls.n	801650a <_printf_i+0x116>
 8016520:	2b08      	cmp	r3, #8
 8016522:	d10b      	bne.n	801653c <_printf_i+0x148>
 8016524:	6823      	ldr	r3, [r4, #0]
 8016526:	07de      	lsls	r6, r3, #31
 8016528:	d508      	bpl.n	801653c <_printf_i+0x148>
 801652a:	6923      	ldr	r3, [r4, #16]
 801652c:	6861      	ldr	r1, [r4, #4]
 801652e:	4299      	cmp	r1, r3
 8016530:	bfde      	ittt	le
 8016532:	2330      	movle	r3, #48	; 0x30
 8016534:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016538:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801653c:	1b52      	subs	r2, r2, r5
 801653e:	6122      	str	r2, [r4, #16]
 8016540:	f8cd a000 	str.w	sl, [sp]
 8016544:	464b      	mov	r3, r9
 8016546:	aa03      	add	r2, sp, #12
 8016548:	4621      	mov	r1, r4
 801654a:	4640      	mov	r0, r8
 801654c:	f7ff fee4 	bl	8016318 <_printf_common>
 8016550:	3001      	adds	r0, #1
 8016552:	d14a      	bne.n	80165ea <_printf_i+0x1f6>
 8016554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016558:	b004      	add	sp, #16
 801655a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801655e:	6823      	ldr	r3, [r4, #0]
 8016560:	f043 0320 	orr.w	r3, r3, #32
 8016564:	6023      	str	r3, [r4, #0]
 8016566:	4833      	ldr	r0, [pc, #204]	; (8016634 <_printf_i+0x240>)
 8016568:	2778      	movs	r7, #120	; 0x78
 801656a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801656e:	6823      	ldr	r3, [r4, #0]
 8016570:	6829      	ldr	r1, [r5, #0]
 8016572:	061f      	lsls	r7, r3, #24
 8016574:	f851 6b04 	ldr.w	r6, [r1], #4
 8016578:	d402      	bmi.n	8016580 <_printf_i+0x18c>
 801657a:	065f      	lsls	r7, r3, #25
 801657c:	bf48      	it	mi
 801657e:	b2b6      	uxthmi	r6, r6
 8016580:	07df      	lsls	r7, r3, #31
 8016582:	bf48      	it	mi
 8016584:	f043 0320 	orrmi.w	r3, r3, #32
 8016588:	6029      	str	r1, [r5, #0]
 801658a:	bf48      	it	mi
 801658c:	6023      	strmi	r3, [r4, #0]
 801658e:	b91e      	cbnz	r6, 8016598 <_printf_i+0x1a4>
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	f023 0320 	bic.w	r3, r3, #32
 8016596:	6023      	str	r3, [r4, #0]
 8016598:	2310      	movs	r3, #16
 801659a:	e7a7      	b.n	80164ec <_printf_i+0xf8>
 801659c:	4824      	ldr	r0, [pc, #144]	; (8016630 <_printf_i+0x23c>)
 801659e:	e7e4      	b.n	801656a <_printf_i+0x176>
 80165a0:	4615      	mov	r5, r2
 80165a2:	e7bd      	b.n	8016520 <_printf_i+0x12c>
 80165a4:	682b      	ldr	r3, [r5, #0]
 80165a6:	6826      	ldr	r6, [r4, #0]
 80165a8:	6961      	ldr	r1, [r4, #20]
 80165aa:	1d18      	adds	r0, r3, #4
 80165ac:	6028      	str	r0, [r5, #0]
 80165ae:	0635      	lsls	r5, r6, #24
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	d501      	bpl.n	80165b8 <_printf_i+0x1c4>
 80165b4:	6019      	str	r1, [r3, #0]
 80165b6:	e002      	b.n	80165be <_printf_i+0x1ca>
 80165b8:	0670      	lsls	r0, r6, #25
 80165ba:	d5fb      	bpl.n	80165b4 <_printf_i+0x1c0>
 80165bc:	8019      	strh	r1, [r3, #0]
 80165be:	2300      	movs	r3, #0
 80165c0:	6123      	str	r3, [r4, #16]
 80165c2:	4615      	mov	r5, r2
 80165c4:	e7bc      	b.n	8016540 <_printf_i+0x14c>
 80165c6:	682b      	ldr	r3, [r5, #0]
 80165c8:	1d1a      	adds	r2, r3, #4
 80165ca:	602a      	str	r2, [r5, #0]
 80165cc:	681d      	ldr	r5, [r3, #0]
 80165ce:	6862      	ldr	r2, [r4, #4]
 80165d0:	2100      	movs	r1, #0
 80165d2:	4628      	mov	r0, r5
 80165d4:	f7e9 fea4 	bl	8000320 <memchr>
 80165d8:	b108      	cbz	r0, 80165de <_printf_i+0x1ea>
 80165da:	1b40      	subs	r0, r0, r5
 80165dc:	6060      	str	r0, [r4, #4]
 80165de:	6863      	ldr	r3, [r4, #4]
 80165e0:	6123      	str	r3, [r4, #16]
 80165e2:	2300      	movs	r3, #0
 80165e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165e8:	e7aa      	b.n	8016540 <_printf_i+0x14c>
 80165ea:	6923      	ldr	r3, [r4, #16]
 80165ec:	462a      	mov	r2, r5
 80165ee:	4649      	mov	r1, r9
 80165f0:	4640      	mov	r0, r8
 80165f2:	47d0      	blx	sl
 80165f4:	3001      	adds	r0, #1
 80165f6:	d0ad      	beq.n	8016554 <_printf_i+0x160>
 80165f8:	6823      	ldr	r3, [r4, #0]
 80165fa:	079b      	lsls	r3, r3, #30
 80165fc:	d413      	bmi.n	8016626 <_printf_i+0x232>
 80165fe:	68e0      	ldr	r0, [r4, #12]
 8016600:	9b03      	ldr	r3, [sp, #12]
 8016602:	4298      	cmp	r0, r3
 8016604:	bfb8      	it	lt
 8016606:	4618      	movlt	r0, r3
 8016608:	e7a6      	b.n	8016558 <_printf_i+0x164>
 801660a:	2301      	movs	r3, #1
 801660c:	4632      	mov	r2, r6
 801660e:	4649      	mov	r1, r9
 8016610:	4640      	mov	r0, r8
 8016612:	47d0      	blx	sl
 8016614:	3001      	adds	r0, #1
 8016616:	d09d      	beq.n	8016554 <_printf_i+0x160>
 8016618:	3501      	adds	r5, #1
 801661a:	68e3      	ldr	r3, [r4, #12]
 801661c:	9903      	ldr	r1, [sp, #12]
 801661e:	1a5b      	subs	r3, r3, r1
 8016620:	42ab      	cmp	r3, r5
 8016622:	dcf2      	bgt.n	801660a <_printf_i+0x216>
 8016624:	e7eb      	b.n	80165fe <_printf_i+0x20a>
 8016626:	2500      	movs	r5, #0
 8016628:	f104 0619 	add.w	r6, r4, #25
 801662c:	e7f5      	b.n	801661a <_printf_i+0x226>
 801662e:	bf00      	nop
 8016630:	080176b9 	.word	0x080176b9
 8016634:	080176ca 	.word	0x080176ca

08016638 <__sflush_r>:
 8016638:	898a      	ldrh	r2, [r1, #12]
 801663a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801663e:	4605      	mov	r5, r0
 8016640:	0710      	lsls	r0, r2, #28
 8016642:	460c      	mov	r4, r1
 8016644:	d458      	bmi.n	80166f8 <__sflush_r+0xc0>
 8016646:	684b      	ldr	r3, [r1, #4]
 8016648:	2b00      	cmp	r3, #0
 801664a:	dc05      	bgt.n	8016658 <__sflush_r+0x20>
 801664c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801664e:	2b00      	cmp	r3, #0
 8016650:	dc02      	bgt.n	8016658 <__sflush_r+0x20>
 8016652:	2000      	movs	r0, #0
 8016654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801665a:	2e00      	cmp	r6, #0
 801665c:	d0f9      	beq.n	8016652 <__sflush_r+0x1a>
 801665e:	2300      	movs	r3, #0
 8016660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016664:	682f      	ldr	r7, [r5, #0]
 8016666:	6a21      	ldr	r1, [r4, #32]
 8016668:	602b      	str	r3, [r5, #0]
 801666a:	d032      	beq.n	80166d2 <__sflush_r+0x9a>
 801666c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801666e:	89a3      	ldrh	r3, [r4, #12]
 8016670:	075a      	lsls	r2, r3, #29
 8016672:	d505      	bpl.n	8016680 <__sflush_r+0x48>
 8016674:	6863      	ldr	r3, [r4, #4]
 8016676:	1ac0      	subs	r0, r0, r3
 8016678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801667a:	b10b      	cbz	r3, 8016680 <__sflush_r+0x48>
 801667c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801667e:	1ac0      	subs	r0, r0, r3
 8016680:	2300      	movs	r3, #0
 8016682:	4602      	mov	r2, r0
 8016684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016686:	6a21      	ldr	r1, [r4, #32]
 8016688:	4628      	mov	r0, r5
 801668a:	47b0      	blx	r6
 801668c:	1c43      	adds	r3, r0, #1
 801668e:	89a3      	ldrh	r3, [r4, #12]
 8016690:	d106      	bne.n	80166a0 <__sflush_r+0x68>
 8016692:	6829      	ldr	r1, [r5, #0]
 8016694:	291d      	cmp	r1, #29
 8016696:	d82b      	bhi.n	80166f0 <__sflush_r+0xb8>
 8016698:	4a29      	ldr	r2, [pc, #164]	; (8016740 <__sflush_r+0x108>)
 801669a:	410a      	asrs	r2, r1
 801669c:	07d6      	lsls	r6, r2, #31
 801669e:	d427      	bmi.n	80166f0 <__sflush_r+0xb8>
 80166a0:	2200      	movs	r2, #0
 80166a2:	6062      	str	r2, [r4, #4]
 80166a4:	04d9      	lsls	r1, r3, #19
 80166a6:	6922      	ldr	r2, [r4, #16]
 80166a8:	6022      	str	r2, [r4, #0]
 80166aa:	d504      	bpl.n	80166b6 <__sflush_r+0x7e>
 80166ac:	1c42      	adds	r2, r0, #1
 80166ae:	d101      	bne.n	80166b4 <__sflush_r+0x7c>
 80166b0:	682b      	ldr	r3, [r5, #0]
 80166b2:	b903      	cbnz	r3, 80166b6 <__sflush_r+0x7e>
 80166b4:	6560      	str	r0, [r4, #84]	; 0x54
 80166b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166b8:	602f      	str	r7, [r5, #0]
 80166ba:	2900      	cmp	r1, #0
 80166bc:	d0c9      	beq.n	8016652 <__sflush_r+0x1a>
 80166be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166c2:	4299      	cmp	r1, r3
 80166c4:	d002      	beq.n	80166cc <__sflush_r+0x94>
 80166c6:	4628      	mov	r0, r5
 80166c8:	f7ff fb36 	bl	8015d38 <_free_r>
 80166cc:	2000      	movs	r0, #0
 80166ce:	6360      	str	r0, [r4, #52]	; 0x34
 80166d0:	e7c0      	b.n	8016654 <__sflush_r+0x1c>
 80166d2:	2301      	movs	r3, #1
 80166d4:	4628      	mov	r0, r5
 80166d6:	47b0      	blx	r6
 80166d8:	1c41      	adds	r1, r0, #1
 80166da:	d1c8      	bne.n	801666e <__sflush_r+0x36>
 80166dc:	682b      	ldr	r3, [r5, #0]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d0c5      	beq.n	801666e <__sflush_r+0x36>
 80166e2:	2b1d      	cmp	r3, #29
 80166e4:	d001      	beq.n	80166ea <__sflush_r+0xb2>
 80166e6:	2b16      	cmp	r3, #22
 80166e8:	d101      	bne.n	80166ee <__sflush_r+0xb6>
 80166ea:	602f      	str	r7, [r5, #0]
 80166ec:	e7b1      	b.n	8016652 <__sflush_r+0x1a>
 80166ee:	89a3      	ldrh	r3, [r4, #12]
 80166f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166f4:	81a3      	strh	r3, [r4, #12]
 80166f6:	e7ad      	b.n	8016654 <__sflush_r+0x1c>
 80166f8:	690f      	ldr	r7, [r1, #16]
 80166fa:	2f00      	cmp	r7, #0
 80166fc:	d0a9      	beq.n	8016652 <__sflush_r+0x1a>
 80166fe:	0793      	lsls	r3, r2, #30
 8016700:	680e      	ldr	r6, [r1, #0]
 8016702:	bf08      	it	eq
 8016704:	694b      	ldreq	r3, [r1, #20]
 8016706:	600f      	str	r7, [r1, #0]
 8016708:	bf18      	it	ne
 801670a:	2300      	movne	r3, #0
 801670c:	eba6 0807 	sub.w	r8, r6, r7
 8016710:	608b      	str	r3, [r1, #8]
 8016712:	f1b8 0f00 	cmp.w	r8, #0
 8016716:	dd9c      	ble.n	8016652 <__sflush_r+0x1a>
 8016718:	6a21      	ldr	r1, [r4, #32]
 801671a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801671c:	4643      	mov	r3, r8
 801671e:	463a      	mov	r2, r7
 8016720:	4628      	mov	r0, r5
 8016722:	47b0      	blx	r6
 8016724:	2800      	cmp	r0, #0
 8016726:	dc06      	bgt.n	8016736 <__sflush_r+0xfe>
 8016728:	89a3      	ldrh	r3, [r4, #12]
 801672a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801672e:	81a3      	strh	r3, [r4, #12]
 8016730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016734:	e78e      	b.n	8016654 <__sflush_r+0x1c>
 8016736:	4407      	add	r7, r0
 8016738:	eba8 0800 	sub.w	r8, r8, r0
 801673c:	e7e9      	b.n	8016712 <__sflush_r+0xda>
 801673e:	bf00      	nop
 8016740:	dfbffffe 	.word	0xdfbffffe

08016744 <_fflush_r>:
 8016744:	b538      	push	{r3, r4, r5, lr}
 8016746:	690b      	ldr	r3, [r1, #16]
 8016748:	4605      	mov	r5, r0
 801674a:	460c      	mov	r4, r1
 801674c:	b913      	cbnz	r3, 8016754 <_fflush_r+0x10>
 801674e:	2500      	movs	r5, #0
 8016750:	4628      	mov	r0, r5
 8016752:	bd38      	pop	{r3, r4, r5, pc}
 8016754:	b118      	cbz	r0, 801675e <_fflush_r+0x1a>
 8016756:	6a03      	ldr	r3, [r0, #32]
 8016758:	b90b      	cbnz	r3, 801675e <_fflush_r+0x1a>
 801675a:	f7ff f89d 	bl	8015898 <__sinit>
 801675e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d0f3      	beq.n	801674e <_fflush_r+0xa>
 8016766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016768:	07d0      	lsls	r0, r2, #31
 801676a:	d404      	bmi.n	8016776 <_fflush_r+0x32>
 801676c:	0599      	lsls	r1, r3, #22
 801676e:	d402      	bmi.n	8016776 <_fflush_r+0x32>
 8016770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016772:	f7ff fa9e 	bl	8015cb2 <__retarget_lock_acquire_recursive>
 8016776:	4628      	mov	r0, r5
 8016778:	4621      	mov	r1, r4
 801677a:	f7ff ff5d 	bl	8016638 <__sflush_r>
 801677e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016780:	07da      	lsls	r2, r3, #31
 8016782:	4605      	mov	r5, r0
 8016784:	d4e4      	bmi.n	8016750 <_fflush_r+0xc>
 8016786:	89a3      	ldrh	r3, [r4, #12]
 8016788:	059b      	lsls	r3, r3, #22
 801678a:	d4e1      	bmi.n	8016750 <_fflush_r+0xc>
 801678c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801678e:	f7ff fa91 	bl	8015cb4 <__retarget_lock_release_recursive>
 8016792:	e7dd      	b.n	8016750 <_fflush_r+0xc>

08016794 <fiprintf>:
 8016794:	b40e      	push	{r1, r2, r3}
 8016796:	b503      	push	{r0, r1, lr}
 8016798:	4601      	mov	r1, r0
 801679a:	ab03      	add	r3, sp, #12
 801679c:	4805      	ldr	r0, [pc, #20]	; (80167b4 <fiprintf+0x20>)
 801679e:	f853 2b04 	ldr.w	r2, [r3], #4
 80167a2:	6800      	ldr	r0, [r0, #0]
 80167a4:	9301      	str	r3, [sp, #4]
 80167a6:	f7ff fc9d 	bl	80160e4 <_vfiprintf_r>
 80167aa:	b002      	add	sp, #8
 80167ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80167b0:	b003      	add	sp, #12
 80167b2:	4770      	bx	lr
 80167b4:	24000110 	.word	0x24000110

080167b8 <__swbuf_r>:
 80167b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ba:	460e      	mov	r6, r1
 80167bc:	4614      	mov	r4, r2
 80167be:	4605      	mov	r5, r0
 80167c0:	b118      	cbz	r0, 80167ca <__swbuf_r+0x12>
 80167c2:	6a03      	ldr	r3, [r0, #32]
 80167c4:	b90b      	cbnz	r3, 80167ca <__swbuf_r+0x12>
 80167c6:	f7ff f867 	bl	8015898 <__sinit>
 80167ca:	69a3      	ldr	r3, [r4, #24]
 80167cc:	60a3      	str	r3, [r4, #8]
 80167ce:	89a3      	ldrh	r3, [r4, #12]
 80167d0:	071a      	lsls	r2, r3, #28
 80167d2:	d525      	bpl.n	8016820 <__swbuf_r+0x68>
 80167d4:	6923      	ldr	r3, [r4, #16]
 80167d6:	b31b      	cbz	r3, 8016820 <__swbuf_r+0x68>
 80167d8:	6823      	ldr	r3, [r4, #0]
 80167da:	6922      	ldr	r2, [r4, #16]
 80167dc:	1a98      	subs	r0, r3, r2
 80167de:	6963      	ldr	r3, [r4, #20]
 80167e0:	b2f6      	uxtb	r6, r6
 80167e2:	4283      	cmp	r3, r0
 80167e4:	4637      	mov	r7, r6
 80167e6:	dc04      	bgt.n	80167f2 <__swbuf_r+0x3a>
 80167e8:	4621      	mov	r1, r4
 80167ea:	4628      	mov	r0, r5
 80167ec:	f7ff ffaa 	bl	8016744 <_fflush_r>
 80167f0:	b9e0      	cbnz	r0, 801682c <__swbuf_r+0x74>
 80167f2:	68a3      	ldr	r3, [r4, #8]
 80167f4:	3b01      	subs	r3, #1
 80167f6:	60a3      	str	r3, [r4, #8]
 80167f8:	6823      	ldr	r3, [r4, #0]
 80167fa:	1c5a      	adds	r2, r3, #1
 80167fc:	6022      	str	r2, [r4, #0]
 80167fe:	701e      	strb	r6, [r3, #0]
 8016800:	6962      	ldr	r2, [r4, #20]
 8016802:	1c43      	adds	r3, r0, #1
 8016804:	429a      	cmp	r2, r3
 8016806:	d004      	beq.n	8016812 <__swbuf_r+0x5a>
 8016808:	89a3      	ldrh	r3, [r4, #12]
 801680a:	07db      	lsls	r3, r3, #31
 801680c:	d506      	bpl.n	801681c <__swbuf_r+0x64>
 801680e:	2e0a      	cmp	r6, #10
 8016810:	d104      	bne.n	801681c <__swbuf_r+0x64>
 8016812:	4621      	mov	r1, r4
 8016814:	4628      	mov	r0, r5
 8016816:	f7ff ff95 	bl	8016744 <_fflush_r>
 801681a:	b938      	cbnz	r0, 801682c <__swbuf_r+0x74>
 801681c:	4638      	mov	r0, r7
 801681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016820:	4621      	mov	r1, r4
 8016822:	4628      	mov	r0, r5
 8016824:	f000 f806 	bl	8016834 <__swsetup_r>
 8016828:	2800      	cmp	r0, #0
 801682a:	d0d5      	beq.n	80167d8 <__swbuf_r+0x20>
 801682c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016830:	e7f4      	b.n	801681c <__swbuf_r+0x64>
	...

08016834 <__swsetup_r>:
 8016834:	b538      	push	{r3, r4, r5, lr}
 8016836:	4b2a      	ldr	r3, [pc, #168]	; (80168e0 <__swsetup_r+0xac>)
 8016838:	4605      	mov	r5, r0
 801683a:	6818      	ldr	r0, [r3, #0]
 801683c:	460c      	mov	r4, r1
 801683e:	b118      	cbz	r0, 8016848 <__swsetup_r+0x14>
 8016840:	6a03      	ldr	r3, [r0, #32]
 8016842:	b90b      	cbnz	r3, 8016848 <__swsetup_r+0x14>
 8016844:	f7ff f828 	bl	8015898 <__sinit>
 8016848:	89a3      	ldrh	r3, [r4, #12]
 801684a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801684e:	0718      	lsls	r0, r3, #28
 8016850:	d422      	bmi.n	8016898 <__swsetup_r+0x64>
 8016852:	06d9      	lsls	r1, r3, #27
 8016854:	d407      	bmi.n	8016866 <__swsetup_r+0x32>
 8016856:	2309      	movs	r3, #9
 8016858:	602b      	str	r3, [r5, #0]
 801685a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801685e:	81a3      	strh	r3, [r4, #12]
 8016860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016864:	e034      	b.n	80168d0 <__swsetup_r+0x9c>
 8016866:	0758      	lsls	r0, r3, #29
 8016868:	d512      	bpl.n	8016890 <__swsetup_r+0x5c>
 801686a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801686c:	b141      	cbz	r1, 8016880 <__swsetup_r+0x4c>
 801686e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016872:	4299      	cmp	r1, r3
 8016874:	d002      	beq.n	801687c <__swsetup_r+0x48>
 8016876:	4628      	mov	r0, r5
 8016878:	f7ff fa5e 	bl	8015d38 <_free_r>
 801687c:	2300      	movs	r3, #0
 801687e:	6363      	str	r3, [r4, #52]	; 0x34
 8016880:	89a3      	ldrh	r3, [r4, #12]
 8016882:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016886:	81a3      	strh	r3, [r4, #12]
 8016888:	2300      	movs	r3, #0
 801688a:	6063      	str	r3, [r4, #4]
 801688c:	6923      	ldr	r3, [r4, #16]
 801688e:	6023      	str	r3, [r4, #0]
 8016890:	89a3      	ldrh	r3, [r4, #12]
 8016892:	f043 0308 	orr.w	r3, r3, #8
 8016896:	81a3      	strh	r3, [r4, #12]
 8016898:	6923      	ldr	r3, [r4, #16]
 801689a:	b94b      	cbnz	r3, 80168b0 <__swsetup_r+0x7c>
 801689c:	89a3      	ldrh	r3, [r4, #12]
 801689e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80168a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168a6:	d003      	beq.n	80168b0 <__swsetup_r+0x7c>
 80168a8:	4621      	mov	r1, r4
 80168aa:	4628      	mov	r0, r5
 80168ac:	f000 f861 	bl	8016972 <__smakebuf_r>
 80168b0:	89a0      	ldrh	r0, [r4, #12]
 80168b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80168b6:	f010 0301 	ands.w	r3, r0, #1
 80168ba:	d00a      	beq.n	80168d2 <__swsetup_r+0x9e>
 80168bc:	2300      	movs	r3, #0
 80168be:	60a3      	str	r3, [r4, #8]
 80168c0:	6963      	ldr	r3, [r4, #20]
 80168c2:	425b      	negs	r3, r3
 80168c4:	61a3      	str	r3, [r4, #24]
 80168c6:	6923      	ldr	r3, [r4, #16]
 80168c8:	b943      	cbnz	r3, 80168dc <__swsetup_r+0xa8>
 80168ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80168ce:	d1c4      	bne.n	801685a <__swsetup_r+0x26>
 80168d0:	bd38      	pop	{r3, r4, r5, pc}
 80168d2:	0781      	lsls	r1, r0, #30
 80168d4:	bf58      	it	pl
 80168d6:	6963      	ldrpl	r3, [r4, #20]
 80168d8:	60a3      	str	r3, [r4, #8]
 80168da:	e7f4      	b.n	80168c6 <__swsetup_r+0x92>
 80168dc:	2000      	movs	r0, #0
 80168de:	e7f7      	b.n	80168d0 <__swsetup_r+0x9c>
 80168e0:	24000110 	.word	0x24000110

080168e4 <memmove>:
 80168e4:	4288      	cmp	r0, r1
 80168e6:	b510      	push	{r4, lr}
 80168e8:	eb01 0402 	add.w	r4, r1, r2
 80168ec:	d902      	bls.n	80168f4 <memmove+0x10>
 80168ee:	4284      	cmp	r4, r0
 80168f0:	4623      	mov	r3, r4
 80168f2:	d807      	bhi.n	8016904 <memmove+0x20>
 80168f4:	1e43      	subs	r3, r0, #1
 80168f6:	42a1      	cmp	r1, r4
 80168f8:	d008      	beq.n	801690c <memmove+0x28>
 80168fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016902:	e7f8      	b.n	80168f6 <memmove+0x12>
 8016904:	4402      	add	r2, r0
 8016906:	4601      	mov	r1, r0
 8016908:	428a      	cmp	r2, r1
 801690a:	d100      	bne.n	801690e <memmove+0x2a>
 801690c:	bd10      	pop	{r4, pc}
 801690e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016916:	e7f7      	b.n	8016908 <memmove+0x24>

08016918 <abort>:
 8016918:	b508      	push	{r3, lr}
 801691a:	2006      	movs	r0, #6
 801691c:	f000 f88e 	bl	8016a3c <raise>
 8016920:	2001      	movs	r0, #1
 8016922:	f7ea ff5d 	bl	80017e0 <_exit>

08016926 <__swhatbuf_r>:
 8016926:	b570      	push	{r4, r5, r6, lr}
 8016928:	460c      	mov	r4, r1
 801692a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801692e:	2900      	cmp	r1, #0
 8016930:	b096      	sub	sp, #88	; 0x58
 8016932:	4615      	mov	r5, r2
 8016934:	461e      	mov	r6, r3
 8016936:	da0d      	bge.n	8016954 <__swhatbuf_r+0x2e>
 8016938:	89a3      	ldrh	r3, [r4, #12]
 801693a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801693e:	f04f 0100 	mov.w	r1, #0
 8016942:	bf0c      	ite	eq
 8016944:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016948:	2340      	movne	r3, #64	; 0x40
 801694a:	2000      	movs	r0, #0
 801694c:	6031      	str	r1, [r6, #0]
 801694e:	602b      	str	r3, [r5, #0]
 8016950:	b016      	add	sp, #88	; 0x58
 8016952:	bd70      	pop	{r4, r5, r6, pc}
 8016954:	466a      	mov	r2, sp
 8016956:	f000 f879 	bl	8016a4c <_fstat_r>
 801695a:	2800      	cmp	r0, #0
 801695c:	dbec      	blt.n	8016938 <__swhatbuf_r+0x12>
 801695e:	9901      	ldr	r1, [sp, #4]
 8016960:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016964:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016968:	4259      	negs	r1, r3
 801696a:	4159      	adcs	r1, r3
 801696c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016970:	e7eb      	b.n	801694a <__swhatbuf_r+0x24>

08016972 <__smakebuf_r>:
 8016972:	898b      	ldrh	r3, [r1, #12]
 8016974:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016976:	079d      	lsls	r5, r3, #30
 8016978:	4606      	mov	r6, r0
 801697a:	460c      	mov	r4, r1
 801697c:	d507      	bpl.n	801698e <__smakebuf_r+0x1c>
 801697e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016982:	6023      	str	r3, [r4, #0]
 8016984:	6123      	str	r3, [r4, #16]
 8016986:	2301      	movs	r3, #1
 8016988:	6163      	str	r3, [r4, #20]
 801698a:	b002      	add	sp, #8
 801698c:	bd70      	pop	{r4, r5, r6, pc}
 801698e:	ab01      	add	r3, sp, #4
 8016990:	466a      	mov	r2, sp
 8016992:	f7ff ffc8 	bl	8016926 <__swhatbuf_r>
 8016996:	9900      	ldr	r1, [sp, #0]
 8016998:	4605      	mov	r5, r0
 801699a:	4630      	mov	r0, r6
 801699c:	f7fe fd44 	bl	8015428 <_malloc_r>
 80169a0:	b948      	cbnz	r0, 80169b6 <__smakebuf_r+0x44>
 80169a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169a6:	059a      	lsls	r2, r3, #22
 80169a8:	d4ef      	bmi.n	801698a <__smakebuf_r+0x18>
 80169aa:	f023 0303 	bic.w	r3, r3, #3
 80169ae:	f043 0302 	orr.w	r3, r3, #2
 80169b2:	81a3      	strh	r3, [r4, #12]
 80169b4:	e7e3      	b.n	801697e <__smakebuf_r+0xc>
 80169b6:	89a3      	ldrh	r3, [r4, #12]
 80169b8:	6020      	str	r0, [r4, #0]
 80169ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169be:	81a3      	strh	r3, [r4, #12]
 80169c0:	9b00      	ldr	r3, [sp, #0]
 80169c2:	6163      	str	r3, [r4, #20]
 80169c4:	9b01      	ldr	r3, [sp, #4]
 80169c6:	6120      	str	r0, [r4, #16]
 80169c8:	b15b      	cbz	r3, 80169e2 <__smakebuf_r+0x70>
 80169ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169ce:	4630      	mov	r0, r6
 80169d0:	f000 f84e 	bl	8016a70 <_isatty_r>
 80169d4:	b128      	cbz	r0, 80169e2 <__smakebuf_r+0x70>
 80169d6:	89a3      	ldrh	r3, [r4, #12]
 80169d8:	f023 0303 	bic.w	r3, r3, #3
 80169dc:	f043 0301 	orr.w	r3, r3, #1
 80169e0:	81a3      	strh	r3, [r4, #12]
 80169e2:	89a3      	ldrh	r3, [r4, #12]
 80169e4:	431d      	orrs	r5, r3
 80169e6:	81a5      	strh	r5, [r4, #12]
 80169e8:	e7cf      	b.n	801698a <__smakebuf_r+0x18>

080169ea <_raise_r>:
 80169ea:	291f      	cmp	r1, #31
 80169ec:	b538      	push	{r3, r4, r5, lr}
 80169ee:	4604      	mov	r4, r0
 80169f0:	460d      	mov	r5, r1
 80169f2:	d904      	bls.n	80169fe <_raise_r+0x14>
 80169f4:	2316      	movs	r3, #22
 80169f6:	6003      	str	r3, [r0, #0]
 80169f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169fc:	bd38      	pop	{r3, r4, r5, pc}
 80169fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016a00:	b112      	cbz	r2, 8016a08 <_raise_r+0x1e>
 8016a02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a06:	b94b      	cbnz	r3, 8016a1c <_raise_r+0x32>
 8016a08:	4620      	mov	r0, r4
 8016a0a:	f000 f853 	bl	8016ab4 <_getpid_r>
 8016a0e:	462a      	mov	r2, r5
 8016a10:	4601      	mov	r1, r0
 8016a12:	4620      	mov	r0, r4
 8016a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a18:	f000 b83a 	b.w	8016a90 <_kill_r>
 8016a1c:	2b01      	cmp	r3, #1
 8016a1e:	d00a      	beq.n	8016a36 <_raise_r+0x4c>
 8016a20:	1c59      	adds	r1, r3, #1
 8016a22:	d103      	bne.n	8016a2c <_raise_r+0x42>
 8016a24:	2316      	movs	r3, #22
 8016a26:	6003      	str	r3, [r0, #0]
 8016a28:	2001      	movs	r0, #1
 8016a2a:	e7e7      	b.n	80169fc <_raise_r+0x12>
 8016a2c:	2400      	movs	r4, #0
 8016a2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016a32:	4628      	mov	r0, r5
 8016a34:	4798      	blx	r3
 8016a36:	2000      	movs	r0, #0
 8016a38:	e7e0      	b.n	80169fc <_raise_r+0x12>
	...

08016a3c <raise>:
 8016a3c:	4b02      	ldr	r3, [pc, #8]	; (8016a48 <raise+0xc>)
 8016a3e:	4601      	mov	r1, r0
 8016a40:	6818      	ldr	r0, [r3, #0]
 8016a42:	f7ff bfd2 	b.w	80169ea <_raise_r>
 8016a46:	bf00      	nop
 8016a48:	24000110 	.word	0x24000110

08016a4c <_fstat_r>:
 8016a4c:	b538      	push	{r3, r4, r5, lr}
 8016a4e:	4d07      	ldr	r5, [pc, #28]	; (8016a6c <_fstat_r+0x20>)
 8016a50:	2300      	movs	r3, #0
 8016a52:	4604      	mov	r4, r0
 8016a54:	4608      	mov	r0, r1
 8016a56:	4611      	mov	r1, r2
 8016a58:	602b      	str	r3, [r5, #0]
 8016a5a:	f7ea ff10 	bl	800187e <_fstat>
 8016a5e:	1c43      	adds	r3, r0, #1
 8016a60:	d102      	bne.n	8016a68 <_fstat_r+0x1c>
 8016a62:	682b      	ldr	r3, [r5, #0]
 8016a64:	b103      	cbz	r3, 8016a68 <_fstat_r+0x1c>
 8016a66:	6023      	str	r3, [r4, #0]
 8016a68:	bd38      	pop	{r3, r4, r5, pc}
 8016a6a:	bf00      	nop
 8016a6c:	24010cfc 	.word	0x24010cfc

08016a70 <_isatty_r>:
 8016a70:	b538      	push	{r3, r4, r5, lr}
 8016a72:	4d06      	ldr	r5, [pc, #24]	; (8016a8c <_isatty_r+0x1c>)
 8016a74:	2300      	movs	r3, #0
 8016a76:	4604      	mov	r4, r0
 8016a78:	4608      	mov	r0, r1
 8016a7a:	602b      	str	r3, [r5, #0]
 8016a7c:	f7ea ff0f 	bl	800189e <_isatty>
 8016a80:	1c43      	adds	r3, r0, #1
 8016a82:	d102      	bne.n	8016a8a <_isatty_r+0x1a>
 8016a84:	682b      	ldr	r3, [r5, #0]
 8016a86:	b103      	cbz	r3, 8016a8a <_isatty_r+0x1a>
 8016a88:	6023      	str	r3, [r4, #0]
 8016a8a:	bd38      	pop	{r3, r4, r5, pc}
 8016a8c:	24010cfc 	.word	0x24010cfc

08016a90 <_kill_r>:
 8016a90:	b538      	push	{r3, r4, r5, lr}
 8016a92:	4d07      	ldr	r5, [pc, #28]	; (8016ab0 <_kill_r+0x20>)
 8016a94:	2300      	movs	r3, #0
 8016a96:	4604      	mov	r4, r0
 8016a98:	4608      	mov	r0, r1
 8016a9a:	4611      	mov	r1, r2
 8016a9c:	602b      	str	r3, [r5, #0]
 8016a9e:	f7ea fe8f 	bl	80017c0 <_kill>
 8016aa2:	1c43      	adds	r3, r0, #1
 8016aa4:	d102      	bne.n	8016aac <_kill_r+0x1c>
 8016aa6:	682b      	ldr	r3, [r5, #0]
 8016aa8:	b103      	cbz	r3, 8016aac <_kill_r+0x1c>
 8016aaa:	6023      	str	r3, [r4, #0]
 8016aac:	bd38      	pop	{r3, r4, r5, pc}
 8016aae:	bf00      	nop
 8016ab0:	24010cfc 	.word	0x24010cfc

08016ab4 <_getpid_r>:
 8016ab4:	f7ea be7c 	b.w	80017b0 <_getpid>

08016ab8 <_init>:
 8016ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aba:	bf00      	nop
 8016abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016abe:	bc08      	pop	{r3}
 8016ac0:	469e      	mov	lr, r3
 8016ac2:	4770      	bx	lr

08016ac4 <_fini>:
 8016ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ac6:	bf00      	nop
 8016ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016aca:	bc08      	pop	{r3}
 8016acc:	469e      	mov	lr, r3
 8016ace:	4770      	bx	lr
