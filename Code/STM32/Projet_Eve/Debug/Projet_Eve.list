
Projet_Eve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063cc  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08006604  08006604  00016604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800692c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000026c  2000000c  08006935  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000278  08006935  00020278  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001456e  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b5d  00000000  00000000  000345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000eb8  00000000  00000000  00037150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b3e  00000000  00000000  00038008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002d3f1  00000000  00000000  00038b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015ad8  00000000  00000000  00065f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0011671d  00000000  00000000  0007ba0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003bf4  00000000  00000000  0019212c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  00195d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	080065ec 	.word	0x080065ec

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	080065ec 	.word	0x080065ec

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ae:	460d      	mov	r5, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	460f      	mov	r7, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d146      	bne.n	8000346 <__udivmoddi4+0x9e>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4694      	mov	ip, r2
 80002bc:	d95e      	bls.n	800037c <__udivmoddi4+0xd4>
 80002be:	fab2 f382 	clz	r3, r2
 80002c2:	b143      	cbz	r3, 80002d6 <__udivmoddi4+0x2e>
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	409c      	lsls	r4, r3
 80002d0:	fa20 f202 	lsr.w	r2, r0, r2
 80002d4:	4317      	orrs	r7, r2
 80002d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002da:	fa1f f58c 	uxth.w	r5, ip
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fbb7 f1fe 	udiv	r1, r7, lr
 80002e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f0:	4290      	cmp	r0, r2
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f4:	eb1c 0202 	adds.w	r2, ip, r2
 80002f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f200 8134 	bhi.w	800056c <__udivmoddi4+0x2c4>
 8000304:	4639      	mov	r1, r7
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800031a:	42a5      	cmp	r5, r4
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x88>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x86>
 8000328:	42a5      	cmp	r5, r4
 800032a:	f200 8119 	bhi.w	8000560 <__udivmoddi4+0x2b8>
 800032e:	4610      	mov	r0, r2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xb4>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80fc 	beq.w	8000548 <__udivmoddi4+0x2a0>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d14c      	bne.n	80003fe <__udivmoddi4+0x156>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2a6>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2a6>
 8000370:	4608      	mov	r0, r1
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0x9a>
 8000376:	e9c6 4700 	strd	r4, r7, [r6]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xd8>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809f 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f5fe 	udiv	r5, r2, lr
 800039a:	fb0e 2015 	mls	r0, lr, r5, r2
 800039e:	0c22      	lsrs	r2, r4, #16
 80003a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a4:	fb07 f005 	mul.w	r0, r7, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90f      	bls.n	80003cc <__udivmoddi4+0x124>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003b4:	bf2c      	ite	cs
 80003b6:	f04f 0901 	movcs.w	r9, #1
 80003ba:	f04f 0900 	movcc.w	r9, #0
 80003be:	4290      	cmp	r0, r2
 80003c0:	d903      	bls.n	80003ca <__udivmoddi4+0x122>
 80003c2:	f1b9 0f00 	cmp.w	r9, #0
 80003c6:	f000 80ce 	beq.w	8000566 <__udivmoddi4+0x2be>
 80003ca:	4645      	mov	r5, r8
 80003cc:	1a12      	subs	r2, r2, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003d4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003d8:	fb00 f707 	mul.w	r7, r0, r7
 80003dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e0:	42a7      	cmp	r7, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x14e>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x14c>
 80003ee:	42a7      	cmp	r7, r4
 80003f0:	f200 80b3 	bhi.w	800055a <__udivmoddi4+0x2b2>
 80003f4:	4610      	mov	r0, r2
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fc:	e79c      	b.n	8000338 <__udivmoddi4+0x90>
 80003fe:	f1c1 0420 	rsb	r4, r1, #32
 8000402:	408b      	lsls	r3, r1
 8000404:	fa05 fc01 	lsl.w	ip, r5, r1
 8000408:	fa22 f704 	lsr.w	r7, r2, r4
 800040c:	40e5      	lsrs	r5, r4
 800040e:	408a      	lsls	r2, r1
 8000410:	431f      	orrs	r7, r3
 8000412:	fa20 f304 	lsr.w	r3, r0, r4
 8000416:	4088      	lsls	r0, r1
 8000418:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800041c:	ea43 030c 	orr.w	r3, r3, ip
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000428:	fbb5 fef8 	udiv	lr, r5, r8
 800042c:	fb08 551e 	mls	r5, r8, lr, r5
 8000430:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a9      	cmp	r9, r5
 800043a:	d90e      	bls.n	800045a <__udivmoddi4+0x1b2>
 800043c:	197d      	adds	r5, r7, r5
 800043e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	45a9      	cmp	r9, r5
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b0>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ca>
 8000458:	46d6      	mov	lr, sl
 800045a:	eba5 0509 	sub.w	r5, r5, r9
 800045e:	fa1f f983 	uxth.w	r9, r3
 8000462:	fbb5 f3f8 	udiv	r3, r5, r8
 8000466:	fb08 5513 	mls	r5, r8, r3, r5
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000472:	45ac      	cmp	ip, r5
 8000474:	d906      	bls.n	8000484 <__udivmoddi4+0x1dc>
 8000476:	197d      	adds	r5, r7, r5
 8000478:	f103 38ff 	add.w	r8, r3, #4294967295
 800047c:	d201      	bcs.n	8000482 <__udivmoddi4+0x1da>
 800047e:	45ac      	cmp	ip, r5
 8000480:	d87e      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 8000482:	4643      	mov	r3, r8
 8000484:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000488:	eba5 050c 	sub.w	r5, r5, ip
 800048c:	fba3 9802 	umull	r9, r8, r3, r2
 8000490:	4545      	cmp	r5, r8
 8000492:	46ce      	mov	lr, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0x1f6>
 8000498:	d106      	bne.n	80004a8 <__udivmoddi4+0x200>
 800049a:	4548      	cmp	r0, r9
 800049c:	d204      	bcs.n	80004a8 <__udivmoddi4+0x200>
 800049e:	3b01      	subs	r3, #1
 80004a0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d06f      	beq.n	800058c <__udivmoddi4+0x2e4>
 80004ac:	ebb0 020e 	subs.w	r2, r0, lr
 80004b0:	eb65 050c 	sbc.w	r5, r5, ip
 80004b4:	40ca      	lsrs	r2, r1
 80004b6:	fa05 f404 	lsl.w	r4, r5, r4
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	4618      	mov	r0, r3
 80004be:	4314      	orrs	r4, r2
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 4500 	strd	r4, r5, [r6]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0220 	rsb	r2, r3, #32
 80004d0:	4099      	lsls	r1, r3
 80004d2:	409c      	lsls	r4, r3
 80004d4:	40d5      	lsrs	r5, r2
 80004d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004da:	fa20 f202 	lsr.w	r2, r0, r2
 80004de:	fa1f f78c 	uxth.w	r7, ip
 80004e2:	fbb5 f0fe 	udiv	r0, r5, lr
 80004e6:	430a      	orrs	r2, r1
 80004e8:	fb0e 5510 	mls	r5, lr, r0, r5
 80004ec:	0c11      	lsrs	r1, r2, #16
 80004ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f2:	fb00 f507 	mul.w	r5, r0, r7
 80004f6:	428d      	cmp	r5, r1
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x270>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	428d      	cmp	r5, r1
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x26e>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000516:	4640      	mov	r0, r8
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000520:	fb0e 1115 	mls	r1, lr, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f107 	mul.w	r1, r5, r7
 800052c:	4291      	cmp	r1, r2
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x298>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x296>
 800053a:	4291      	cmp	r1, r2
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2de>
 800053e:	4645      	mov	r5, r8
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e726      	b.n	8000396 <__udivmoddi4+0xee>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e6f9      	b.n	8000342 <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb65 0203 	sbc.w	r2, r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	4617      	mov	r7, r2
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xca>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e74a      	b.n	80003f6 <__udivmoddi4+0x14e>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e4      	b.n	8000330 <__udivmoddi4+0x88>
 8000566:	3d02      	subs	r5, #2
 8000568:	4462      	add	r2, ip
 800056a:	e72f      	b.n	80003cc <__udivmoddi4+0x124>
 800056c:	3902      	subs	r1, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c9      	b.n	8000306 <__udivmoddi4+0x5e>
 8000572:	f1ae 0e02 	sub.w	lr, lr, #2
 8000576:	443d      	add	r5, r7
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b2>
 800057a:	3802      	subs	r0, #2
 800057c:	4461      	add	r1, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x270>
 8000580:	3b02      	subs	r3, #2
 8000582:	443d      	add	r5, r7
 8000584:	e77e      	b.n	8000484 <__udivmoddi4+0x1dc>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x298>
 800058c:	4618      	mov	r0, r3
 800058e:	4631      	mov	r1, r6
 8000590:	e6d7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, size_t data_blk_size)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800059e:	af00      	add	r7, sp, #0
 80005a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005a4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005a8:	6019      	str	r1, [r3, #0]
 80005aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005ae:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005b8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80005bc:	4602      	mov	r2, r0
 80005be:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 80005c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80005c8:	4a28      	ldr	r2, [pc, #160]	; (800066c <dyn2_crc+0xd4>)
 80005ca:	4618      	mov	r0, r3
 80005cc:	4611      	mov	r1, r2
 80005ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d2:	461a      	mov	r2, r3
 80005d4:	f005 fffc 	bl	80065d0 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 80005d8:	2300      	movs	r3, #0
 80005da:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80005de:	e031      	b.n	8000644 <dyn2_crc+0xac>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80005e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005e4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80005f2:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80005f6:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 80005fa:	6809      	ldr	r1, [r1, #0]
 80005fc:	440b      	add	r3, r1
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b29b      	uxth	r3, r3
 8000602:	4053      	eors	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 800060c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000610:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	f8b7 1214 	ldrh.w	r1, [r7, #532]	; 0x214
 800061e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000622:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000626:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800062a:	b21b      	sxth	r3, r3
 800062c:	4053      	eors	r3, r2
 800062e:	b21a      	sxth	r2, r3
 8000630:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000634:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000638:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800063a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 800063e:	3301      	adds	r3, #1
 8000640:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000644:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000648:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800064c:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000650:	6812      	ldr	r2, [r2, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d8c4      	bhi.n	80005e0 <dyn2_crc+0x48>
	}
	return crc_accum;
 8000656:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800065a:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800065e:	881b      	ldrh	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	08006604 	.word	0x08006604

08000670 <dyn2_append_crc>:
uint8_t* dyn2_append_crc(uint8_t* instruction,uint16_t bufferSize){
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	807b      	strh	r3, [r7, #2]
		return NULL;
	}

	memcpy(instruction_sent, instruction, bufferSize);
	*/
	unsigned short crc = dyn2_crc(0, instruction, bufferSize - 2);
 800067c:	887b      	ldrh	r3, [r7, #2]
 800067e:	3b02      	subs	r3, #2
 8000680:	461a      	mov	r2, r3
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ff87 	bl	8000598 <dyn2_crc>
 800068a:	4603      	mov	r3, r0
 800068c:	81fb      	strh	r3, [r7, #14]
	unsigned char crc_l = crc & 0x00FF;
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	737b      	strb	r3, [r7, #13]
	unsigned char crc_h = (crc >> 8) & 0x00FF;
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	b29b      	uxth	r3, r3
 8000698:	733b      	strb	r3, [r7, #12]

	instruction[bufferSize - 2] = crc_l;
 800069a:	887b      	ldrh	r3, [r7, #2]
 800069c:	3b02      	subs	r3, #2
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	7b7a      	ldrb	r2, [r7, #13]
 80006a4:	701a      	strb	r2, [r3, #0]
	instruction[bufferSize - 1] = crc_h;
 80006a6:	887b      	ldrh	r3, [r7, #2]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	7b3a      	ldrb	r2, [r7, #12]
 80006b0:	701a      	strb	r2, [r3, #0]

	return instruction;
 80006b2:	687b      	ldr	r3, [r7, #4]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <dyn2_send>:
	// Send the string through UART
	HAL_UART_Transmit(&huart4, (uint8_t*)arrayString, strlen(arrayString), HAL_MAX_DELAY);
}

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
int dyn2_send(uint8_t* buffer,uint16_t size){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	807b      	strh	r3, [r7, #2]

	//dyn2_debug_sendArrayAsString(buffer_crc, size); // for debuging purposes

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <dyn2_send+0x3c>)
 80006ca:	f005 f9e3 	bl	8005a94 <HAL_HalfDuplex_EnableTransmitter>

	HAL_UART_Transmit(&huart1, buffer, size, TIMEOUT);
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <dyn2_send+0x3c>)
 80006d6:	f005 f94f 	bl	8005978 <HAL_UART_Transmit>
	// Wait until UART transmission is complete
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80006da:	bf00      	nop
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <dyn2_send+0x3c>)
 80006de:	f005 fa81 	bl	8005be4 <HAL_UART_GetState>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b20      	cmp	r3, #32
 80006e6:	d1f9      	bne.n	80006dc <dyn2_send+0x20>
	HAL_HalfDuplex_EnableReceiver(&huart1);
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <dyn2_send+0x3c>)
 80006ea:	f005 fa27 	bl	8005b3c <HAL_HalfDuplex_EnableReceiver>

	return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200001e0 	.word	0x200001e0

080006fc <dyn2_reboot>:
	dyn2_torque(motor, TORQUE_OFF);
	dyn2_send(DYN2_SET_ID_CRC,size);
	return 0;

}
int dyn2_reboot(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
	uint8_t DYN2_REBOOT[10];
	DYN2_REBOOT[0] = HEADER_1;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <dyn2_reboot+0x58>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	713b      	strb	r3, [r7, #4]
	DYN2_REBOOT[1] = HEADER_2;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <dyn2_reboot+0x5c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	717b      	strb	r3, [r7, #5]
	DYN2_REBOOT[2] = HEADER_3;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <dyn2_reboot+0x60>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	71bb      	strb	r3, [r7, #6]
	DYN2_REBOOT[3] = HEADER_4;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <dyn2_reboot+0x64>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	71fb      	strb	r3, [r7, #7]
	// ID
	DYN2_REBOOT[4]= 1;
 800071a:	2301      	movs	r3, #1
 800071c:	723b      	strb	r3, [r7, #8]
	// LENGTH
	DYN2_REBOOT[5]= 3; // tkt ça marche
 800071e:	2303      	movs	r3, #3
 8000720:	727b      	strb	r3, [r7, #9]
	DYN2_REBOOT[6]= 0x00;
 8000722:	2300      	movs	r3, #0
 8000724:	72bb      	strb	r3, [r7, #10]
	// INSTRUCTION
	DYN2_REBOOT[7]= REBOOT;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <dyn2_reboot+0x68>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	72fb      	strb	r3, [r7, #11]
	uint16_t size = (uint16_t) NbOfElements(DYN2_REBOOT);
 800072c:	230a      	movs	r3, #10
 800072e:	82fb      	strh	r3, [r7, #22]
	uint8_t* DYN2_REBOOT_CRC = dyn2_append_crc(DYN2_REBOOT,size);
 8000730:	8afa      	ldrh	r2, [r7, #22]
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9a 	bl	8000670 <dyn2_append_crc>
 800073c:	6138      	str	r0, [r7, #16]
	dyn2_send(DYN2_REBOOT_CRC,size);
 800073e:	8afb      	ldrh	r3, [r7, #22]
 8000740:	4619      	mov	r1, r3
 8000742:	6938      	ldr	r0, [r7, #16]
 8000744:	f7ff ffba 	bl	80006bc <dyn2_send>

	}
 8000748:	bf00      	nop
 800074a:	4618      	mov	r0, r3
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08006817 	.word	0x08006817
 8000758:	08006818 	.word	0x08006818
 800075c:	08006819 	.word	0x08006819
 8000760:	0800681a 	.word	0x0800681a
 8000764:	08006816 	.word	0x08006816

08000768 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	4b47      	ldr	r3, [pc, #284]	; (800089c <MX_GPIO_Init+0x134>)
 8000780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000784:	4a45      	ldr	r2, [pc, #276]	; (800089c <MX_GPIO_Init+0x134>)
 8000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800078e:	4b43      	ldr	r3, [pc, #268]	; (800089c <MX_GPIO_Init+0x134>)
 8000790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	4b3f      	ldr	r3, [pc, #252]	; (800089c <MX_GPIO_Init+0x134>)
 800079e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007a2:	4a3e      	ldr	r2, [pc, #248]	; (800089c <MX_GPIO_Init+0x134>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007ac:	4b3b      	ldr	r3, [pc, #236]	; (800089c <MX_GPIO_Init+0x134>)
 80007ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <MX_GPIO_Init+0x134>)
 80007bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c0:	4a36      	ldr	r2, [pc, #216]	; (800089c <MX_GPIO_Init+0x134>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <MX_GPIO_Init+0x134>)
 80007cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b30      	ldr	r3, [pc, #192]	; (800089c <MX_GPIO_Init+0x134>)
 80007da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007de:	4a2f      	ldr	r2, [pc, #188]	; (800089c <MX_GPIO_Init+0x134>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <MX_GPIO_Init+0x134>)
 80007ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_CSN1_Pin|GPIO_CSN1C7_Pin|GPIO_CSN1C8_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80007fc:	4828      	ldr	r0, [pc, #160]	; (80008a0 <MX_GPIO_Init+0x138>)
 80007fe:	f000 ffad 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000808:	4826      	ldr	r0, [pc, #152]	; (80008a4 <MX_GPIO_Init+0x13c>)
 800080a:	f000 ffa7 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FDC_1_Pin|FDC_4_Pin|FDC_5_Pin|FDC_2_Pin;
 800080e:	23f0      	movs	r3, #240	; 0xf0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4820      	ldr	r0, [pc, #128]	; (80008a4 <MX_GPIO_Init+0x13c>)
 8000822:	f000 fdc3 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = FDC_3_Pin|FDC_8_Pin|USR_BTN_2_Pin|USR_BTN_3_Pin
 8000826:	f641 4330 	movw	r3, #7216	; 0x1c30
 800082a:	617b      	str	r3, [r7, #20]
                          |USR_BTN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4819      	ldr	r0, [pc, #100]	; (80008a0 <MX_GPIO_Init+0x138>)
 800083c:	f000 fdb6 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FDC_7_Pin|FDC_6_Pin;
 8000840:	2303      	movs	r3, #3
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4815      	ldr	r0, [pc, #84]	; (80008a8 <MX_GPIO_Init+0x140>)
 8000854:	f000 fdaa 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_CSN1_Pin|GPIO_CSN1C7_Pin|GPIO_CSN1C8_Pin;
 8000858:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_GPIO_Init+0x138>)
 8000872:	f000 fd9b 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin;
 8000876:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_GPIO_Init+0x13c>)
 8000890:	f000 fd8c 	bl	80013ac <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	46020c00 	.word	0x46020c00
 80008a0:	42020800 	.word	0x42020800
 80008a4:	42020000 	.word	0x42020000
 80008a8:	42020400 	.word	0x42020400

080008ac <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 ff6b 	bl	800178c <HAL_ICACHE_ConfigAssociativityMode>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80008bc:	f000 f8a1 	bl	8000a02 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008c0:	f000 ff84 	bl	80017cc <HAL_ICACHE_Enable>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80008ca:	f000 f89a 	bl	8000a02 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0d2      	sub	sp, #328	; 0x148
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 fbff 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f847 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f7ff ff41 	bl	8000768 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008e6:	f000 fa7d 	bl	8000de4 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 80008ea:	f7ff ffdf 	bl	80008ac <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80008ee:	f000 f9e3 	bl	8000cb8 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80008f2:	f000 fa2b 	bl	8000d4c <MX_UART4_Init>
  MX_SPI2_Init();
 80008f6:	f000 f889 	bl	8000a0c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  MOTOR XL430_1 = {
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8000900:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000908:	4a18      	ldr	r2, [pc, #96]	; (800096c <main+0x98>)
 800090a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800090e:	4611      	mov	r1, r2
 8000910:	2294      	movs	r2, #148	; 0x94
 8000912:	4618      	mov	r0, r3
 8000914:	f005 fe5c 	bl	80065d0 <memcpy>
 8000918:	23fe      	movs	r3, #254	; 0xfe
 800091a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
       .model = XL430,
       .baudrate = 57600,
       .uart = huart1, // Assuming huart4 is already defined elsewhere
       .id = 0xFE
   };
  MOTOR XL320_1 = {
 800091e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000922:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800092e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000932:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800093c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <main+0x98>)
 8000942:	3308      	adds	r3, #8
 8000944:	4611      	mov	r1, r2
 8000946:	2294      	movs	r2, #148	; 0x94
 8000948:	4618      	mov	r0, r3
 800094a:	f005 fe41 	bl	80065d0 <memcpy>
 800094e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000952:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000956:	22fe      	movs	r2, #254	; 0xfe
 8000958:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
       .uart = huart1, // Assuming huart4 is already defined elsewhere
       .id = 0xFE
   };

  //dyn2_led(XL320_1,2);
  float angle = 0;
 800095c:	f04f 0300 	mov.w	r3, #0
 8000960:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	  //dyn2_position(XL430_1, 90);
	  //dyn2_position(XL430_1, 90);

	  //HAL_Delay(2000);
	  dyn2_reboot();
 8000964:	f7ff feca 	bl	80006fc <dyn2_reboot>
 8000968:	e7fc      	b.n	8000964 <main+0x90>
 800096a:	bf00      	nop
 800096c:	200001e0 	.word	0x200001e0

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09e      	sub	sp, #120	; 0x78
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	2260      	movs	r2, #96	; 0x60
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f005 fdfa 	bl	8006578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000994:	2000      	movs	r0, #0
 8000996:	f000 ff29 	bl	80017ec <HAL_PWREx_ControlVoltageScaling>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009a0:	f000 f82f 	bl	8000a02 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009a4:	2310      	movs	r3, #16
 80009a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80009b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 ffa0 	bl	8001904 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009ca:	f000 f81a 	bl	8000a02 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	231f      	movs	r3, #31
 80009d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fe66 	bl	80026bc <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009f6:	f000 f804 	bl	8000a02 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3778      	adds	r7, #120	; 0x78
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a06:	b672      	cpsid	i
}
 8000a08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <Error_Handler+0x8>

08000a0c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a1e:	4a32      	ldr	r2, [pc, #200]	; (8000ae8 <MX_SPI2_Init+0xdc>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a4c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000a50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a66:	2207      	movs	r2, #7
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aa8:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000aaa:	f004 fd4b 	bl	8005544 <HAL_SPI_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8000ab4:	f7ff ffa5 	bl	8000a02 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000abc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ac0:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_SPI2_Init+0xd8>)
 8000acc:	f004 fe6b 	bl	80057a6 <HAL_SPIEx_SetConfigAutonomousMode>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8000ad6:	f7ff ff94 	bl	8000a02 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000028 	.word	0x20000028
 8000ae8:	40003800 	.word	0x40003800

08000aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0b8      	sub	sp, #224	; 0xe0
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	22b8      	movs	r2, #184	; 0xb8
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f005 fd33 	bl	8006578 <memset>
  if(spiHandle->Instance==SPI2)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <HAL_SPI_MspInit+0xc8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d147      	bne.n	8000bac <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 f991 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000b40:	f7ff ff5f 	bl	8000a02 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_SPI_MspInit+0xcc>)
 8000b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <HAL_SPI_MspInit+0xcc>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_SPI_MspInit+0xcc>)
 8000b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_SPI_MspInit+0xcc>)
 8000b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <HAL_SPI_MspInit+0xcc>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_SPI_MspInit+0xcc>)
 8000b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b80:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_SPI_MspInit+0xd0>)
 8000ba8:	f000 fc00 	bl	80013ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bac:	bf00      	nop
 8000bae:	37e0      	adds	r7, #224	; 0xe0
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40003800 	.word	0x40003800
 8000bb8:	46020c00 	.word	0x46020c00
 8000bbc:	42020400 	.word	0x42020400

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	46020c00 	.word	0x46020c00

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 fab0 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <SystemInit+0x68>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <SystemInit+0x68>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <SystemInit+0x6c>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <SystemInit+0x6c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <SystemInit+0x6c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <SystemInit+0x6c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <SystemInit+0x6c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <SystemInit+0x6c>)
 8000c7a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c7e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c82:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <SystemInit+0x6c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SystemInit+0x6c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <SystemInit+0x6c>)
 8000c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <SystemInit+0x6c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SystemInit+0x68>)
 8000c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca2:	609a      	str	r2, [r3, #8]
  #endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	46020c00 	.word	0x46020c00

08000cb8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <MX_LPUART1_UART_Init+0x8c>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cc4:	4a20      	ldr	r2, [pc, #128]	; (8000d48 <MX_LPUART1_UART_Init+0x90>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cdc:	220c      	movs	r2, #12
 8000cde:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000cfa:	f004 fd95 	bl	8005828 <HAL_UART_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000d04:	f7ff fe7d 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000d0c:	f005 fb6a 	bl	80063e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000d16:	f7ff fe74 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000d1e:	f005 fb9f 	bl	8006460 <HAL_UARTEx_SetRxFifoThreshold>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000d28:	f7ff fe6b 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_LPUART1_UART_Init+0x88>)
 8000d2e:	f005 fb20 	bl	8006372 <HAL_UARTEx_DisableFifoMode>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000d38:	f7ff fe63 	bl	8000a02 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000b8 	.word	0x200000b8
 8000d44:	46002400 	.word	0x46002400
 8000d48:	00033324 	.word	0x00033324

08000d4c <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <MX_UART4_Init+0x94>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <MX_UART4_Init+0x90>)
 8000d96:	f004 fd47 	bl	8005828 <HAL_UART_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000da0:	f7ff fe2f 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_UART4_Init+0x90>)
 8000da8:	f005 fb1c 	bl	80063e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000db2:	f7ff fe26 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <MX_UART4_Init+0x90>)
 8000dba:	f005 fb51 	bl	8006460 <HAL_UARTEx_SetRxFifoThreshold>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f7ff fe1d 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_UART4_Init+0x90>)
 8000dca:	f005 fad2 	bl	8006372 <HAL_UARTEx_DisableFifoMode>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f7ff fe15 	bl	8000a02 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000014c 	.word	0x2000014c
 8000de0:	40004c00 	.word	0x40004c00

08000de4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000dea:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <MX_USART1_UART_Init+0x94>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000df0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e2e:	f004 fd4b 	bl	80058c8 <HAL_HalfDuplex_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e38:	f7ff fde3 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e40:	f005 fad0 	bl	80063e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4a:	f7ff fdda 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e52:	f005 fb05 	bl	8006460 <HAL_UARTEx_SetRxFifoThreshold>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e5c:	f7ff fdd1 	bl	8000a02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_USART1_UART_Init+0x90>)
 8000e62:	f005 fa86 	bl	8006372 <HAL_UARTEx_DisableFifoMode>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f7ff fdc9 	bl	8000a02 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200001e0 	.word	0x200001e0
 8000e78:	40013800 	.word	0x40013800

08000e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0bc      	sub	sp, #240	; 0xf0
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	22b8      	movs	r2, #184	; 0xb8
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f005 fb6b 	bl	8006578 <memset>
  if(uartHandle->Instance==LPUART1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a71      	ldr	r2, [pc, #452]	; (800106c <HAL_UART_MspInit+0x1f0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d146      	bne.n	8000f3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000eac:	f04f 0220 	mov.w	r2, #32
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 ffca 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ece:	f7ff fd98 	bl	8000a02 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ed2:	4b67      	ldr	r3, [pc, #412]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000ed4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ed8:	4a65      	ldr	r2, [pc, #404]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ede:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000ee2:	4b63      	ldr	r3, [pc, #396]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000ee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef0:	4b5f      	ldr	r3, [pc, #380]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ef6:	4a5e      	ldr	r2, [pc, #376]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f00:	4b5b      	ldr	r3, [pc, #364]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = Rasp_RX_Pin|Rasp_TX_Pin;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f26:	2308      	movs	r3, #8
 8000f28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f30:	4619      	mov	r1, r3
 8000f32:	4850      	ldr	r0, [pc, #320]	; (8001074 <HAL_UART_MspInit+0x1f8>)
 8000f34:	f000 fa3a 	bl	80013ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f38:	e094      	b.n	8001064 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==UART4)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_UART_MspInit+0x1fc>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d145      	bne.n	8000fd0 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f44:	f04f 0208 	mov.w	r2, #8
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 ff7f 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8000f64:	f7ff fd4d 	bl	8000a02 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f68:	4b41      	ldr	r3, [pc, #260]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f6e:	4a40      	ldr	r2, [pc, #256]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000f70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f74:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f78:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f8c:	4a38      	ldr	r2, [pc, #224]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f96:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8000f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ST_LINK_TX_Pin|ST_LINK_RX_Pin;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	482c      	ldr	r0, [pc, #176]	; (800107c <HAL_UART_MspInit+0x200>)
 8000fca:	f000 f9ef 	bl	80013ac <HAL_GPIO_Init>
}
 8000fce:	e049      	b.n	8001064 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <HAL_UART_MspInit+0x204>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d144      	bne.n	8001064 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fda:	f04f 0201 	mov.w	r2, #1
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 ff34 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x182>
      Error_Handler();
 8000ffa:	f7ff fd02 	bl	8000a02 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8001000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001004:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8001010:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 800101e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_UART_MspInit+0x1f4>)
 800102e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servos_Pin;
 800103a:	2340      	movs	r3, #64	; 0x40
 800103c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001052:	2307      	movs	r3, #7
 8001054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(Servos_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800105c:	4619      	mov	r1, r3
 800105e:	4809      	ldr	r0, [pc, #36]	; (8001084 <HAL_UART_MspInit+0x208>)
 8001060:	f000 f9a4 	bl	80013ac <HAL_GPIO_Init>
}
 8001064:	bf00      	nop
 8001066:	37f0      	adds	r7, #240	; 0xf0
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	46002400 	.word	0x46002400
 8001070:	46020c00 	.word	0x46020c00
 8001074:	42020800 	.word	0x42020800
 8001078:	40004c00 	.word	0x40004c00
 800107c:	42020000 	.word	0x42020000
 8001080:	40013800 	.word	0x40013800
 8001084:	42020400 	.word	0x42020400

08001088 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800108a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800108c:	f7ff fddc 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	; (80010c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <LoopForever+0xe>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	; (80010d4 <LoopForever+0x16>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010b6:	f005 fa67 	bl	8006588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ba:	f7ff fc0b 	bl	80008d4 <main>

080010be <LoopForever>:

LoopForever:
    b LoopForever
 80010be:	e7fe      	b.n	80010be <LoopForever>
  ldr   r0, =_estack
 80010c0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	20000009 	.word	0x20000009
  ldr r2, =_sidata
 80010cc:	0800692c 	.word	0x0800692c
  ldr r2, =_sbss
 80010d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010d4:	20000278 	.word	0x20000278

080010d8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC1_IRQHandler>
	...

080010dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_Init+0x4c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_Init+0x4c>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f92b 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80010f2:	f001 fcd5 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 80010f6:	4602      	mov	r2, r0
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_Init+0x50>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	490b      	ldr	r1, [pc, #44]	; (8001130 <HAL_Init+0x54>)
 8001102:	5ccb      	ldrb	r3, [r1, r3]
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_Init+0x58>)
 800110a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110c:	200f      	movs	r0, #15
 800110e:	f000 f813 	bl	8001138 <HAL_InitTick>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e002      	b.n	8001122 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fd50 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000
 800112c:	46020c00 	.word	0x46020c00
 8001130:	0800681c 	.word	0x0800681c
 8001134:	20000000 	.word	0x20000000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_InitTick+0x60>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e021      	b.n	8001190 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_InitTick+0x64>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_InitTick+0x60>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f915 	bl	8001392 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f8ed 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x68>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000008 	.word	0x20000008
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000274 	.word	0x20000274

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000274 	.word	0x20000274

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff47 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff5e 	bl	800122c <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb2 	bl	8001304 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80013be:	e1ba      	b.n	8001736 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 81aa 	beq.w	8001730 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a55      	ldr	r2, [pc, #340]	; (8001534 <HAL_GPIO_Init+0x188>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d15d      	bne.n	80014a0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80013ea:	2201      	movs	r2, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	4313      	orrs	r3, r2
 800140c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001414:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x18c>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800141c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800141e:	4a46      	ldr	r2, [pc, #280]	; (8001538 <HAL_GPIO_Init+0x18c>)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	3208      	adds	r2, #8
 8001432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001436:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	4013      	ands	r3, r2
 800144c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220b      	movs	r2, #11
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	4313      	orrs	r3, r2
 8001460:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3208      	adds	r2, #8
 800146a:	69f9      	ldr	r1, [r7, #28]
 800146c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	4013      	ands	r3, r2
 8001486:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2202      	movs	r2, #2
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	4313      	orrs	r3, r2
 8001496:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e067      	b.n	8001570 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x104>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b12      	cmp	r3, #18
 80014ae:	d145      	bne.n	800153c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f003 020f 	and.w	r2, r3, #15
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69f9      	ldr	r1, [r7, #28]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	4013      	ands	r3, r2
 8001512:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	4313      	orrs	r3, r2
 8001528:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e01e      	b.n	8001570 <HAL_GPIO_Init+0x1c4>
 8001532:	bf00      	nop
 8001534:	46020000 	.word	0x46020000
 8001538:	08006874 	.word	0x08006874
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	4013      	ands	r3, r2
 8001552:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	4313      	orrs	r3, r2
 8001568:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d00b      	beq.n	8001590 <HAL_GPIO_Init+0x1e4>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001584:	2b11      	cmp	r3, #17
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b12      	cmp	r3, #18
 800158e:	d130      	bne.n	80015f2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80015c6:	2201      	movs	r2, #1
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	f003 0201 	and.w	r2, r3, #1
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d017      	beq.n	800162a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	4013      	ands	r3, r2
 8001610:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	4313      	orrs	r3, r2
 8001622:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d07c      	beq.n	8001730 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001636:	4a47      	ldr	r2, [pc, #284]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3318      	adds	r3, #24
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	4013      	ands	r3, r2
 8001658:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0a9a      	lsrs	r2, r3, #10
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_GPIO_Init+0x3ac>)
 8001660:	4013      	ands	r3, r2
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	00d2      	lsls	r2, r2, #3
 800166a:	4093      	lsls	r3, r2
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	4313      	orrs	r3, r2
 8001670:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001672:	4938      	ldr	r1, [pc, #224]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3318      	adds	r3, #24
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4013      	ands	r3, r2
 800168e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 80016d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 8001704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001708:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_GPIO_Init+0x3a8>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	f47f ae3d 	bne.w	80013c0 <HAL_GPIO_Init+0x14>
  }
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	3724      	adds	r7, #36	; 0x24
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	46022000 	.word	0x46022000
 8001758:	002f7f7f 	.word	0x002f7f7f

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001778:	e002      	b.n	8001780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e007      	b.n	80017ba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 0204 	bic.w	r2, r3, #4
 80017b2:	4905      	ldr	r1, [pc, #20]	; (80017c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40030400 	.word	0x40030400

080017cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_ICACHE_Enable+0x1c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_ICACHE_Enable+0x1c>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40030400 	.word	0x40030400

080017ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	429a      	cmp	r2, r3
 8001804:	d10b      	bne.n	800181e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180c:	d905      	bls.n	800181a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001818:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e057      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d90a      	bls.n	800183c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	4a2a      	ldr	r2, [pc, #168]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001838:	60d3      	str	r3, [r2, #12]
 800183a:	e007      	b.n	800184c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001844:	4925      	ldr	r1, [pc, #148]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	2232      	movs	r2, #50	; 0x32
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	3301      	adds	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800186a:	e002      	b.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3b01      	subs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x98>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f3      	bne.n	800186c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01b      	beq.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	2232      	movs	r2, #50	; 0x32
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80018a8:	e002      	b.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f3      	bne.n	80018aa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e000      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	46020800 	.word	0x46020800
 80018e0:	20000000 	.word	0x20000000
 80018e4:	10624dd3 	.word	0x10624dd3

080018e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <HAL_PWREx_GetVoltageRange+0x18>)
 80018ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	46020800 	.word	0x46020800

08001904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08e      	sub	sp, #56	; 0x38
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	f000 bec8 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191e:	4b99      	ldr	r3, [pc, #612]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001928:	4b96      	ldr	r3, [pc, #600]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 816c 	beq.w	8001c18 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_RCC_OscConfig+0x52>
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	2b0c      	cmp	r3, #12
 800194a:	f040 80de 	bne.w	8001b0a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	2b01      	cmp	r3, #1
 8001952:	f040 80da 	bne.w	8001b0a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	f000 bea5 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001968:	4b86      	ldr	r3, [pc, #536]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_RCC_OscConfig+0x7a>
 8001974:	4b83      	ldr	r3, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800197c:	e005      	b.n	800198a <HAL_RCC_OscConfig+0x86>
 800197e:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800198a:	4293      	cmp	r3, r2
 800198c:	d255      	bcs.n	8001a3a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	4618      	mov	r0, r3
 800199a:	f001 f9d9 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f000 be82 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019b4:	6093      	str	r3, [r2, #8]
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	4970      	ldr	r1, [pc, #448]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80019d0:	d309      	bcc.n	80019e6 <HAL_RCC_OscConfig+0xe2>
 80019d2:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f023 021f 	bic.w	r2, r3, #31
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4969      	ldr	r1, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
 80019e4:	e07e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da0a      	bge.n	8001a04 <HAL_RCC_OscConfig+0x100>
 80019ee:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	015b      	lsls	r3, r3, #5
 80019fc:	4961      	ldr	r1, [pc, #388]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60cb      	str	r3, [r1, #12]
 8001a02:	e06f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0c:	d30a      	bcc.n	8001a24 <HAL_RCC_OscConfig+0x120>
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	029b      	lsls	r3, r3, #10
 8001a1c:	4959      	ldr	r1, [pc, #356]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60cb      	str	r3, [r1, #12]
 8001a22:	e05f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	03db      	lsls	r3, r3, #15
 8001a32:	4954      	ldr	r1, [pc, #336]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
 8001a38:	e054      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001a3a:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4a51      	ldr	r2, [pc, #324]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a44:	6093      	str	r3, [r2, #8]
 8001a46:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	494c      	ldr	r1, [pc, #304]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001a60:	d309      	bcc.n	8001a76 <HAL_RCC_OscConfig+0x172>
 8001a62:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f023 021f 	bic.w	r2, r3, #31
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4945      	ldr	r1, [pc, #276]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
 8001a74:	e028      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1c4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da0a      	bge.n	8001a94 <HAL_RCC_OscConfig+0x190>
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	015b      	lsls	r3, r3, #5
 8001a8c:	493d      	ldr	r1, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60cb      	str	r3, [r1, #12]
 8001a92:	e019      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1c4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9c:	d30a      	bcc.n	8001ab4 <HAL_RCC_OscConfig+0x1b0>
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	029b      	lsls	r3, r3, #10
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60cb      	str	r3, [r1, #12]
 8001ab2:	e009      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1c4>
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	03db      	lsls	r3, r3, #15
 8001ac2:	4930      	ldr	r1, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10a      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 f93c 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f000 bde5 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001ae4:	f001 f8de 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x284>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fb23 	bl	8001138 <HAL_InitTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 808a 	beq.w	8001c16 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b06:	f000 bdd2 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d066      	beq.n	8001be0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b1e:	f7ff fb55 	bl	80011cc <HAL_GetTick>
 8001b22:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b26:	f7ff fb51 	bl	80011cc <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d902      	bls.n	8001b3a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f000 bdba 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0ef      	beq.n	8001b26 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b50:	6093      	str	r3, [r2, #8]
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	4909      	ldr	r1, [pc, #36]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001b6c:	d30e      	bcc.n	8001b8c <HAL_RCC_OscConfig+0x288>
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f023 021f 	bic.w	r2, r3, #31
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4902      	ldr	r1, [pc, #8]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
 8001b80:	e04a      	b.n	8001c18 <HAL_RCC_OscConfig+0x314>
 8001b82:	bf00      	nop
 8001b84:	46020c00 	.word	0x46020c00
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da0a      	bge.n	8001baa <HAL_RCC_OscConfig+0x2a6>
 8001b94:	4b98      	ldr	r3, [pc, #608]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	015b      	lsls	r3, r3, #5
 8001ba2:	4995      	ldr	r1, [pc, #596]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
 8001ba8:	e036      	b.n	8001c18 <HAL_RCC_OscConfig+0x314>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb2:	d30a      	bcc.n	8001bca <HAL_RCC_OscConfig+0x2c6>
 8001bb4:	4b90      	ldr	r3, [pc, #576]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	498d      	ldr	r1, [pc, #564]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
 8001bc8:	e026      	b.n	8001c18 <HAL_RCC_OscConfig+0x314>
 8001bca:	4b8b      	ldr	r3, [pc, #556]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	03db      	lsls	r3, r3, #15
 8001bd8:	4987      	ldr	r1, [pc, #540]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60cb      	str	r3, [r1, #12]
 8001bde:	e01b      	b.n	8001c18 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001be0:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a84      	ldr	r2, [pc, #528]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001bec:	f7ff faee 	bl	80011cc <HAL_GetTick>
 8001bf0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001bf2:	e009      	b.n	8001c08 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf4:	f7ff faea 	bl	80011cc <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d902      	bls.n	8001c08 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	f000 bd53 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001c08:	4b7b      	ldr	r3, [pc, #492]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ef      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 808b 	beq.w	8001d3c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x334>
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d17d      	bne.n	8001d3c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f000 bd34 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x35a>
 8001c50:	4b69      	ldr	r3, [pc, #420]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a68      	ldr	r2, [pc, #416]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e041      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c66:	d112      	bne.n	8001c8e <HAL_RCC_OscConfig+0x38a>
 8001c68:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a62      	ldr	r2, [pc, #392]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5f      	ldr	r2, [pc, #380]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5c      	ldr	r2, [pc, #368]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e029      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001c96:	d112      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3ba>
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a53      	ldr	r2, [pc, #332]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b51      	ldr	r3, [pc, #324]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e011      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
 8001cbe:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a4a      	ldr	r2, [pc, #296]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a47      	ldr	r2, [pc, #284]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d014      	beq.n	8001d14 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001cea:	f7ff fa6f 	bl	80011cc <HAL_GetTick>
 8001cee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf0:	e009      	b.n	8001d06 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf2:	f7ff fa6b 	bl	80011cc <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b64      	cmp	r3, #100	; 0x64
 8001cfe:	d902      	bls.n	8001d06 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	f000 bcd4 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ef      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3ee>
 8001d12:	e013      	b.n	8001d3c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001d14:	f7ff fa5a 	bl	80011cc <HAL_GetTick>
 8001d18:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fa56 	bl	80011cc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d902      	bls.n	8001d30 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	f000 bcbf 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ef      	bne.n	8001d1c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05f      	beq.n	8001e08 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x456>
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d114      	bne.n	8001d7e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d111      	bne.n	8001d7e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f000 bca3 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b23      	ldr	r3, [pc, #140]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	4920      	ldr	r1, [pc, #128]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d7c:	e044      	b.n	8001e08 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d024      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d92:	f7ff fa1b 	bl	80011cc <HAL_GetTick>
 8001d96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d98:	e009      	b.n	8001dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fa17 	bl	80011cc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d902      	bls.n	8001dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	f000 bc80 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0ef      	beq.n	8001d9a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	490b      	ldr	r1, [pc, #44]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	610b      	str	r3, [r1, #16]
 8001dce:	e01b      	b.n	8001e08 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ddc:	f7ff f9f6 	bl	80011cc <HAL_GetTick>
 8001de0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de4:	f7ff f9f2 	bl	80011cc <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d904      	bls.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	f000 bc5b 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
 8001df8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dfc:	4baf      	ldr	r3, [pc, #700]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ed      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80c8 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1c:	4ba7      	ldr	r3, [pc, #668]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d111      	bne.n	8001e4e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4ba4      	ldr	r3, [pc, #656]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e30:	4aa2      	ldr	r2, [pc, #648]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e3a:	4ba0      	ldr	r3, [pc, #640]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e4e:	4b9c      	ldr	r3, [pc, #624]	; (80020c0 <HAL_RCC_OscConfig+0x7bc>)
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d119      	bne.n	8001e8e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e5a:	4b99      	ldr	r3, [pc, #612]	; (80020c0 <HAL_RCC_OscConfig+0x7bc>)
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	4a98      	ldr	r2, [pc, #608]	; (80020c0 <HAL_RCC_OscConfig+0x7bc>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e66:	f7ff f9b1 	bl	80011cc <HAL_GetTick>
 8001e6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e6c:	e009      	b.n	8001e82 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6e:	f7ff f9ad 	bl	80011cc <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d902      	bls.n	8001e82 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	f000 bc16 	b.w	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e82:	4b8f      	ldr	r3, [pc, #572]	; (80020c0 <HAL_RCC_OscConfig+0x7bc>)
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0ef      	beq.n	8001e6e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d05f      	beq.n	8001f56 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e9c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d037      	beq.n	8001f1c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e3f4      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ed4:	4a79      	ldr	r2, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001ed6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001eda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001ede:	f7ff f975 	bl	80011cc <HAL_GetTick>
 8001ee2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f971 	bl	80011cc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e3da      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ef8:	4b70      	ldr	r3, [pc, #448]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ef      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001f06:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f0c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4969      	ldr	r1, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001f1c:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f22:	4a66      	ldr	r2, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001f2c:	f7ff f94e 	bl	80011cc <HAL_GetTick>
 8001f30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff f94a 	bl	80011cc <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e3b3      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ef      	beq.n	8001f34 <HAL_RCC_OscConfig+0x630>
 8001f54:	e01b      	b.n	8001f8e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001f56:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f5c:	4a57      	ldr	r2, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f5e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001f62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001f66:	f7ff f931 	bl	80011cc <HAL_GetTick>
 8001f6a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f92d 	bl	80011cc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e396      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f80:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ef      	bne.n	8001f6e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f8e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	4a47      	ldr	r2, [pc, #284]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8111 	beq.w	80021d6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d111      	bne.n	8001fec <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fce:	4a3b      	ldr	r2, [pc, #236]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8001fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <HAL_RCC_OscConfig+0x7bc>)
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d118      	bne.n	800202a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_OscConfig+0x7bc>)
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	4a30      	ldr	r2, [pc, #192]	; (80020c0 <HAL_RCC_OscConfig+0x7bc>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002004:	f7ff f8e2 	bl	80011cc <HAL_GetTick>
 8002008:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200c:	f7ff f8de 	bl	80011cc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e347      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_RCC_OscConfig+0x7bc>)
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01f      	beq.n	8002076 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8002044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8002054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002058:	4a18      	ldr	r2, [pc, #96]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002062:	e018      	b.n	8002096 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8002066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002074:	e00f      	b.n	8002096 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8002078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800207c:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 8002088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x7b8>)
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d057      	beq.n	800214e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800209e:	f7ff f895 	bl	80011cc <HAL_GetTick>
 80020a2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a4:	e00e      	b.n	80020c4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff f891 	bl	80011cc <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d905      	bls.n	80020c4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e2f8      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
 80020bc:	46020c00 	.word	0x46020c00
 80020c0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c4:	4b9c      	ldr	r3, [pc, #624]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80020c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0e9      	beq.n	80020a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01b      	beq.n	8002116 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020de:	4b96      	ldr	r3, [pc, #600]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80020e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020e4:	4a94      	ldr	r2, [pc, #592]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80020e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7ff f86c 	bl	80011cc <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e2d3      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002106:	4b8c      	ldr	r3, [pc, #560]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800210c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ed      	beq.n	80020f0 <HAL_RCC_OscConfig+0x7ec>
 8002114:	e053      	b.n	80021be <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002116:	4b88      	ldr	r3, [pc, #544]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800211c:	4a86      	ldr	r2, [pc, #536]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 800211e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002122:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff f850 	bl	80011cc <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e2b7      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800213e:	4b7e      	ldr	r3, [pc, #504]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ed      	bne.n	8002128 <HAL_RCC_OscConfig+0x824>
 800214c:	e037      	b.n	80021be <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800214e:	f7ff f83d 	bl	80011cc <HAL_GetTick>
 8002152:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7ff f839 	bl	80011cc <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e2a0      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800216c:	4b72      	ldr	r3, [pc, #456]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 800216e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ed      	bne.n	8002156 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800217a:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 800217c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01a      	beq.n	80021be <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002188:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 800218a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800218e:	4a6a      	ldr	r2, [pc, #424]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002194:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7ff f817 	bl	80011cc <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e27e      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021b0:	4b61      	ldr	r3, [pc, #388]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80021b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ed      	bne.n	800219a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b5c      	ldr	r3, [pc, #368]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80021c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021cc:	4a5a      	ldr	r2, [pc, #360]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80021ce:	f023 0304 	bic.w	r3, r3, #4
 80021d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d036      	beq.n	8002250 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a52      	ldr	r2, [pc, #328]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80021f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021f6:	f7fe ffe9 	bl	80011cc <HAL_GetTick>
 80021fa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fe:	f7fe ffe5 	bl	80011cc <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e24e      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002210:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x8fa>
 800221c:	e018      	b.n	8002250 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a45      	ldr	r2, [pc, #276]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002228:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800222a:	f7fe ffcf 	bl	80011cc <HAL_GetTick>
 800222e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002232:	f7fe ffcb 	bl	80011cc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e234      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002244:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002258:	2b00      	cmp	r3, #0
 800225a:	d036      	beq.n	80022ca <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	2b00      	cmp	r3, #0
 8002262:	d019      	beq.n	8002298 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 800226a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002270:	f7fe ffac 	bl	80011cc <HAL_GetTick>
 8002274:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002278:	f7fe ffa8 	bl	80011cc <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e211      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800228a:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x974>
 8002296:	e018      	b.n	80022ca <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 800229e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80022a4:	f7fe ff92 	bl	80011cc <HAL_GetTick>
 80022a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80022ac:	f7fe ff8e 	bl	80011cc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1f7      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d07f      	beq.n	80023d6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d062      	beq.n	80023a4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80022e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e8:	6093      	str	r3, [r2, #8]
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	4910      	ldr	r1, [pc, #64]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002304:	d309      	bcc.n	800231a <HAL_RCC_OscConfig+0xa16>
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f023 021f 	bic.w	r2, r3, #31
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4909      	ldr	r1, [pc, #36]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002314:	4313      	orrs	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
 8002318:	e02a      	b.n	8002370 <HAL_RCC_OscConfig+0xa6c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	da0c      	bge.n	800233c <HAL_RCC_OscConfig+0xa38>
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	4901      	ldr	r1, [pc, #4]	; (8002338 <HAL_RCC_OscConfig+0xa34>)
 8002332:	4313      	orrs	r3, r2
 8002334:	60cb      	str	r3, [r1, #12]
 8002336:	e01b      	b.n	8002370 <HAL_RCC_OscConfig+0xa6c>
 8002338:	46020c00 	.word	0x46020c00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d30a      	bcc.n	800235c <HAL_RCC_OscConfig+0xa58>
 8002346:	4ba1      	ldr	r3, [pc, #644]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	029b      	lsls	r3, r3, #10
 8002354:	499d      	ldr	r1, [pc, #628]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	60cb      	str	r3, [r1, #12]
 800235a:	e009      	b.n	8002370 <HAL_RCC_OscConfig+0xa6c>
 800235c:	4b9b      	ldr	r3, [pc, #620]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	03db      	lsls	r3, r3, #15
 800236a:	4998      	ldr	r1, [pc, #608]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800236c:	4313      	orrs	r3, r2
 800236e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002370:	4b96      	ldr	r3, [pc, #600]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a95      	ldr	r2, [pc, #596]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800237c:	f7fe ff26 	bl	80011cc <HAL_GetTick>
 8002380:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002384:	f7fe ff22 	bl	80011cc <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e18b      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002396:	4b8d      	ldr	r3, [pc, #564]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xa80>
 80023a2:	e018      	b.n	80023d6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80023a4:	4b89      	ldr	r3, [pc, #548]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a88      	ldr	r2, [pc, #544]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80023aa:	f023 0310 	bic.w	r3, r3, #16
 80023ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80023b0:	f7fe ff0c 	bl	80011cc <HAL_GetTick>
 80023b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80023b8:	f7fe ff08 	bl	80011cc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e171      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80023ca:	4b80      	ldr	r3, [pc, #512]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8166 	beq.w	80026ac <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e6:	4b79      	ldr	r3, [pc, #484]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	f000 80f2 	beq.w	80025d8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	f040 80c5 	bne.w	8002588 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b73      	ldr	r3, [pc, #460]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a72      	ldr	r2, [pc, #456]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002408:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800240a:	f7fe fedf 	bl	80011cc <HAL_GetTick>
 800240e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fedb 	bl	80011cc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e144      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002424:	4b69      	ldr	r3, [pc, #420]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d111      	bne.n	8002462 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	4a61      	ldr	r2, [pc, #388]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002462:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <HAL_RCC_OscConfig+0xccc>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_OscConfig+0xccc>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a55      	ldr	r2, [pc, #340]	; (80025d0 <HAL_RCC_OscConfig+0xccc>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002482:	4b52      	ldr	r3, [pc, #328]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002496:	3a01      	subs	r2, #1
 8002498:	0212      	lsls	r2, r2, #8
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024a0:	430a      	orrs	r2, r1
 80024a2:	494a      	ldr	r1, [pc, #296]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	628b      	str	r3, [r1, #40]	; 0x28
 80024a8:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80024aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ac:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <HAL_RCC_OscConfig+0xcd0>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024b4:	3a01      	subs	r2, #1
 80024b6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024be:	3a01      	subs	r2, #1
 80024c0:	0252      	lsls	r2, r2, #9
 80024c2:	b292      	uxth	r2, r2
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024ca:	3a01      	subs	r2, #1
 80024cc:	0412      	lsls	r2, r2, #16
 80024ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80024d2:	4311      	orrs	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80024d8:	3a01      	subs	r2, #1
 80024da:	0612      	lsls	r2, r2, #24
 80024dc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80024e0:	430a      	orrs	r2, r1
 80024e2:	493a      	ldr	r1, [pc, #232]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80024e8:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	4a37      	ldr	r2, [pc, #220]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80024ee:	f023 0310 	bic.w	r3, r3, #16
 80024f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	4a34      	ldr	r2, [pc, #208]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	4a32      	ldr	r2, [pc, #200]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002504:	f043 0310 	orr.w	r3, r3, #16
 8002508:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f023 020c 	bic.w	r2, r3, #12
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	492d      	ldr	r1, [pc, #180]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002518:	4313      	orrs	r3, r2
 800251a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800251c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_RCC_OscConfig+0xccc>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a29      	ldr	r2, [pc, #164]	; (80025d0 <HAL_RCC_OscConfig+0xccc>)
 800252a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002530:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002548:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800254e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002552:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800255a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002560:	f7fe fe34 	bl	80011cc <HAL_GetTick>
 8002564:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fe30 	bl	80011cc <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e099      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc64>
 8002586:	e091      	b.n	80026ac <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 800258e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002592:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002594:	f7fe fe1a 	bl	80011cc <HAL_GetTick>
 8002598:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fe16 	bl	80011cc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e07f      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	4a03      	ldr	r2, [pc, #12]	; (80025cc <HAL_RCC_OscConfig+0xcc8>)
 80025c0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80025c4:	f023 0303 	bic.w	r3, r3, #3
 80025c8:	6293      	str	r3, [r2, #40]	; 0x28
 80025ca:	e06f      	b.n	80026ac <HAL_RCC_OscConfig+0xda8>
 80025cc:	46020c00 	.word	0x46020c00
 80025d0:	46020800 	.word	0x46020800
 80025d4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80025d8:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <HAL_RCC_OscConfig+0xdb4>)
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_OscConfig+0xdb4>)
 80025e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d039      	beq.n	8002660 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0203 	and.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d132      	bne.n	8002660 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d129      	bne.n	8002660 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d122      	bne.n	8002660 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002624:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d11a      	bne.n	8002660 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	0a5b      	lsrs	r3, r3, #9
 800262e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d111      	bne.n	8002660 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d108      	bne.n	8002660 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	0e1b      	lsrs	r3, r3, #24
 8002652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e024      	b.n	80026ae <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_RCC_OscConfig+0xdb4>)
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	08db      	lsrs	r3, r3, #3
 800266a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002672:	429a      	cmp	r2, r3
 8002674:	d01a      	beq.n	80026ac <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCC_OscConfig+0xdb4>)
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	4a0f      	ldr	r2, [pc, #60]	; (80026b8 <HAL_RCC_OscConfig+0xdb4>)
 800267c:	f023 0310 	bic.w	r3, r3, #16
 8002680:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fda3 	bl	80011cc <HAL_GetTick>
 8002686:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002688:	bf00      	nop
 800268a:	f7fe fd9f 	bl	80011cc <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	4293      	cmp	r3, r2
 8002694:	d0f9      	beq.n	800268a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_RCC_OscConfig+0xdb4>)
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_OscConfig+0xdb4>)
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_RCC_OscConfig+0xdb4>)
 80026a6:	f043 0310 	orr.w	r3, r3, #16
 80026aa:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3738      	adds	r7, #56	; 0x38
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	46020c00 	.word	0x46020c00

080026bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e1d9      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b9b      	ldr	r3, [pc, #620]	; (8002940 <HAL_RCC_ClockConfig+0x284>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b98      	ldr	r3, [pc, #608]	; (8002940 <HAL_RCC_ClockConfig+0x284>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 020f 	bic.w	r2, r3, #15
 80026e6:	4996      	ldr	r1, [pc, #600]	; (8002940 <HAL_RCC_ClockConfig+0x284>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b94      	ldr	r3, [pc, #592]	; (8002940 <HAL_RCC_ClockConfig+0x284>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e1c1      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	4b8c      	ldr	r3, [pc, #560]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002718:	429a      	cmp	r2, r3
 800271a:	d908      	bls.n	800272e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800271c:	4b89      	ldr	r3, [pc, #548]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	4986      	ldr	r1, [pc, #536]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 800272a:	4313      	orrs	r3, r2
 800272c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d012      	beq.n	8002760 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	4b81      	ldr	r3, [pc, #516]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002748:	429a      	cmp	r2, r3
 800274a:	d909      	bls.n	8002760 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800274c:	4b7d      	ldr	r3, [pc, #500]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	497a      	ldr	r1, [pc, #488]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 800275c:	4313      	orrs	r3, r2
 800275e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d010      	beq.n	800278e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	4b74      	ldr	r3, [pc, #464]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002778:	429a      	cmp	r2, r3
 800277a:	d908      	bls.n	800278e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b71      	ldr	r3, [pc, #452]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	496e      	ldr	r1, [pc, #440]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 800278a:	4313      	orrs	r3, r2
 800278c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d010      	beq.n	80027bc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	4b69      	ldr	r3, [pc, #420]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d908      	bls.n	80027bc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80027aa:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f023 020f 	bic.w	r2, r3, #15
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4963      	ldr	r1, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80d2 	beq.w	800296e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d143      	bne.n	800285e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d110      	bne.n	8002806 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ea:	4a56      	ldr	r2, [pc, #344]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80027f4:	4b53      	ldr	r3, [pc, #332]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002806:	f7fe fce1 	bl	80011cc <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800280c:	4b4e      	ldr	r3, [pc, #312]	; (8002948 <HAL_RCC_ClockConfig+0x28c>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00f      	beq.n	8002838 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800281a:	f7fe fcd7 	bl	80011cc <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e12b      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800282c:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCC_ClockConfig+0x28c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002844:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d121      	bne.n	800289e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e112      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002866:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e106      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0fa      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0f2      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4926      	ldr	r1, [pc, #152]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80028b0:	f7fe fc8c 	bl	80011cc <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d112      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7fe fc84 	bl	80011cc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0d6      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d1ee      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x204>
 80028e2:	e044      	b.n	800296e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d112      	bne.n	8002912 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ee:	f7fe fc6d 	bl	80011cc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e0bf      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d1ee      	bne.n	80028ee <HAL_RCC_ClockConfig+0x232>
 8002910:	e02d      	b.n	800296e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d123      	bne.n	8002962 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fe fc56 	bl	80011cc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0a8      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <HAL_RCC_ClockConfig+0x288>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ee      	bne.n	800291c <HAL_RCC_ClockConfig+0x260>
 800293e:	e016      	b.n	800296e <HAL_RCC_ClockConfig+0x2b2>
 8002940:	40022000 	.word	0x40022000
 8002944:	46020c00 	.word	0x46020c00
 8002948:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fc3e 	bl	80011cc <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e090      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002962:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d1ee      	bne.n	800294c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d010      	beq.n	800299c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	429a      	cmp	r2, r3
 8002988:	d208      	bcs.n	800299c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 020f 	bic.w	r2, r3, #15
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	493d      	ldr	r1, [pc, #244]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_RCC_ClockConfig+0x3d4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d210      	bcs.n	80029cc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCC_ClockConfig+0x3d4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 020f 	bic.w	r2, r3, #15
 80029b2:	4937      	ldr	r1, [pc, #220]	; (8002a90 <HAL_RCC_ClockConfig+0x3d4>)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_RCC_ClockConfig+0x3d4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e05b      	b.n	8002a84 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d010      	beq.n	80029fa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d208      	bcs.n	80029fa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4925      	ldr	r1, [pc, #148]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d209      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	4919      	ldr	r1, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d010      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d208      	bcs.n	8002a5a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002a48:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	490d      	ldr	r1, [pc, #52]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x3d0>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	490a      	ldr	r1, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x3d8>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x3dc>)
 8002a72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x3e0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fb5d 	bl	8001138 <HAL_InitTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	46020c00 	.word	0x46020c00
 8002a90:	40022000 	.word	0x40022000
 8002a94:	0800681c 	.word	0x0800681c
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000004 	.word	0x20000004

08002aa0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b08b      	sub	sp, #44	; 0x2c
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab8:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d121      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d11e      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002ad4:	4b6e      	ldr	r3, [pc, #440]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ae6:	0b1b      	lsrs	r3, r3, #12
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	e005      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002af0:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	0f1b      	lsrs	r3, r3, #28
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002afc:	4a65      	ldr	r2, [pc, #404]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d110      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b10:	e00d      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b1e:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	e004      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002b2c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	f040 80a5 	bne.w	8002c80 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b36:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b4e:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b72:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d003      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0xe4>
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d022      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x128>
 8002b82:	e043      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b8e:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002c9c <HAL_RCC_GetSysClockFreq+0x1fc>
 8002b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b96:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ba6:	ed97 6a01 	vldr	s12, [r7, #4]
 8002baa:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8002ca0 <HAL_RCC_GetSysClockFreq+0x200>
 8002bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bc6:	e046      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002c9c <HAL_RCC_GetSysClockFreq+0x1fc>
 8002bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bea:	ed97 6a01 	vldr	s12, [r7, #4]
 8002bee:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8002ca0 <HAL_RCC_GetSysClockFreq+0x200>
 8002bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c0a:	e024      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c34:	ed97 6a01 	vldr	s12, [r7, #4]
 8002c38:	eddf 5a19 	vldr	s11, [pc, #100]	; 8002ca0 <HAL_RCC_GetSysClockFreq+0x200>
 8002c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c54:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	0e1b      	lsrs	r3, r3, #24
 8002c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c60:	3301      	adds	r3, #1
 8002c62:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c7a:	ee17 3a90 	vmov	r3, s15
 8002c7e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	372c      	adds	r7, #44	; 0x2c
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	46020c00 	.word	0x46020c00
 8002c94:	08006834 	.word	0x08006834
 8002c98:	00f42400 	.word	0x00f42400
 8002c9c:	4b742400 	.word	0x4b742400
 8002ca0:	46000000 	.word	0x46000000

08002ca4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ca8:	f7ff fefa 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_RCC_GetHCLKFreq+0x28>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	4906      	ldr	r1, [pc, #24]	; (8002cd0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002cb8:	5ccb      	ldrb	r3, [r1, r3]
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002cc0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	46020c00 	.word	0x46020c00
 8002cd0:	0800681c 	.word	0x0800681c
 8002cd4:	20000000 	.word	0x20000000

08002cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002cdc:	f7ff ffe2 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	46020c00 	.word	0x46020c00
 8002cfc:	0800682c 	.word	0x0800682c

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002d04:	f7ff ffce 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	46020c00 	.word	0x46020c00
 8002d24:	0800682c 	.word	0x0800682c

08002d28 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002d2c:	f7ff ffba 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	46020c00 	.word	0x46020c00
 8002d4c:	0800682c 	.word	0x0800682c

08002d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d58:	4b3e      	ldr	r3, [pc, #248]	; (8002e54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d66:	f7fe fdbf 	bl	80018e8 <HAL_PWREx_GetVoltageRange>
 8002d6a:	6178      	str	r0, [r7, #20]
 8002d6c:	e019      	b.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d74:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002d7e:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d8c:	f7fe fdac 	bl	80018e8 <HAL_PWREx_GetVoltageRange>
 8002d90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d98:	4a2e      	ldr	r2, [pc, #184]	; (8002e54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d9a:	f023 0304 	bic.w	r3, r3, #4
 8002d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002da8:	d003      	beq.n	8002db2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002db0:	d109      	bne.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db8:	d202      	bcs.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002dba:	2301      	movs	r3, #1
 8002dbc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002dbe:	e033      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002dc4:	e030      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dcc:	d208      	bcs.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d102      	bne.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	e025      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e035      	b.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de6:	d90f      	bls.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002df4:	d902      	bls.n	8002dfc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	e015      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	e012      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	e00f      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e0e:	d109      	bne.n	8002e24 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d102      	bne.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002e18:	2301      	movs	r3, #1
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e004      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002e1e:	2302      	movs	r3, #2
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	e001      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002e24:	2301      	movs	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 020f 	bic.w	r2, r3, #15
 8002e30:	4909      	ldr	r1, [pc, #36]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d001      	beq.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	46020c00 	.word	0x46020c00
 8002e58:	40022000 	.word	0x40022000

08002e5c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b0b4      	sub	sp, #208	; 0xd0
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f002 0401 	and.w	r4, r2, #1
 8002e80:	2500      	movs	r5, #0
 8002e82:	ea54 0305 	orrs.w	r3, r4, r5
 8002e86:	d00b      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002e88:	4bc4      	ldr	r3, [pc, #784]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8e:	f023 0103 	bic.w	r1, r3, #3
 8002e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	4ac0      	ldr	r2, [pc, #768]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ea0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f002 0804 	and.w	r8, r2, #4
 8002eac:	f04f 0900 	mov.w	r9, #0
 8002eb0:	ea58 0309 	orrs.w	r3, r8, r9
 8002eb4:	d00b      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002eb6:	4bb9      	ldr	r3, [pc, #740]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ebc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	4ab5      	ldr	r2, [pc, #724]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ece:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f002 0a08 	and.w	sl, r2, #8
 8002eda:	f04f 0b00 	mov.w	fp, #0
 8002ede:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ee2:	d00b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002ee4:	4bad      	ldr	r3, [pc, #692]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	4aa9      	ldr	r2, [pc, #676]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f002 0310 	and.w	r3, r2, #16
 8002f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002f1c:	4b9f      	ldr	r3, [pc, #636]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	4a9b      	ldr	r2, [pc, #620]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f002 0320 	and.w	r3, r2, #32
 8002f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4313      	orrs	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002f54:	4b91      	ldr	r3, [pc, #580]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f5a:	f023 0107 	bic.w	r1, r3, #7
 8002f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	4a8d      	ldr	r2, [pc, #564]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f66:	430b      	orrs	r3, r1
 8002f68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f82:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002f8c:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f92:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002f96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9c:	4a7f      	ldr	r2, [pc, #508]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002fc4:	4b75      	ldr	r3, [pc, #468]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd4:	4a71      	ldr	r2, [pc, #452]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ff2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	d00b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002ffc:	4b67      	ldr	r3, [pc, #412]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003002:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003006:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800300a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300c:	4a63      	ldr	r2, [pc, #396]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800300e:	430b      	orrs	r3, r1
 8003010:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003014:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800302a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800302e:	460b      	mov	r3, r1
 8003030:	4313      	orrs	r3, r2
 8003032:	d00b      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800303e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a55      	ldr	r2, [pc, #340]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003046:	430b      	orrs	r3, r1
 8003048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800304c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003062:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003066:	460b      	mov	r3, r1
 8003068:	4313      	orrs	r3, r2
 800306a:	d00b      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800306e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003072:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800307a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307c:	4a47      	ldr	r2, [pc, #284]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800307e:	430b      	orrs	r3, r1
 8003080:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003084:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003090:	67bb      	str	r3, [r7, #120]	; 0x78
 8003092:	2300      	movs	r3, #0
 8003094:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003096:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800309a:	460b      	mov	r3, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	d00b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80030a0:	4b3e      	ldr	r3, [pc, #248]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80030aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b0:	4a3a      	ldr	r2, [pc, #232]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030b2:	430b      	orrs	r3, r1
 80030b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80030b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80030c4:	673b      	str	r3, [r7, #112]	; 0x70
 80030c6:	2300      	movs	r3, #0
 80030c8:	677b      	str	r3, [r7, #116]	; 0x74
 80030ca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80030ce:	460b      	mov	r3, r1
 80030d0:	4313      	orrs	r3, r2
 80030d2:	d00b      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80030d4:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e4:	4a2d      	ldr	r2, [pc, #180]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030e6:	430b      	orrs	r3, r1
 80030e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80030f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80030fa:	2300      	movs	r3, #0
 80030fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003102:	460b      	mov	r3, r1
 8003104:	4313      	orrs	r3, r2
 8003106:	d04f      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800310c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d02d      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d827      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d02b      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800311c:	2b60      	cmp	r3, #96	; 0x60
 800311e:	d823      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d006      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d81f      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d011      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003130:	e01a      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	4a19      	ldr	r2, [pc, #100]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800313e:	e01a      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003144:	3308      	adds	r3, #8
 8003146:	4618      	mov	r0, r3
 8003148:	f002 f8cc 	bl	80052e4 <RCCEx_PLL2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003152:	e010      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003154:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003158:	332c      	adds	r3, #44	; 0x2c
 800315a:	4618      	mov	r0, r3
 800315c:	f002 f95a 	bl	8005414 <RCCEx_PLL3_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003166:	e006      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800316e:	e002      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8003174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003176:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800317a:	2b00      	cmp	r3, #0
 800317c:	d110      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003180:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003184:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003188:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800318c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003190:	4a02      	ldr	r2, [pc, #8]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003192:	430b      	orrs	r3, r1
 8003194:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003198:	e006      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800319a:	bf00      	nop
 800319c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80031a4:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80031a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80031b4:	663b      	str	r3, [r7, #96]	; 0x60
 80031b6:	2300      	movs	r3, #0
 80031b8:	667b      	str	r3, [r7, #100]	; 0x64
 80031ba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80031be:	460b      	mov	r3, r1
 80031c0:	4313      	orrs	r3, r2
 80031c2:	d046      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80031c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031cc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80031d0:	d028      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80031d2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80031d6:	d821      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80031d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031dc:	d022      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80031de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e2:	d81b      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80031e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031e8:	d01c      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80031ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031ee:	d815      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f4:	d008      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80031f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fa:	d80f      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d011      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003204:	d00e      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003206:	e009      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003208:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800320c:	3308      	adds	r3, #8
 800320e:	4618      	mov	r0, r3
 8003210:	f002 f868 	bl	80052e4 <RCCEx_PLL2_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800321a:	e004      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003222:	e000      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        break;
 8003224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003226:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10d      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800322e:	4bb6      	ldr	r3, [pc, #728]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003234:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003238:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800323c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003240:	4ab1      	ldr	r2, [pc, #708]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003242:	430b      	orrs	r3, r1
 8003244:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800324e:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800325e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003260:	2300      	movs	r3, #0
 8003262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003264:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003268:	460b      	mov	r3, r1
 800326a:	4313      	orrs	r3, r2
 800326c:	d03e      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800326e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003276:	2b04      	cmp	r3, #4
 8003278:	d81d      	bhi.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032bf 	.word	0x080032bf
 8003284:	08003295 	.word	0x08003295
 8003288:	080032a3 	.word	0x080032a3
 800328c:	080032bf 	.word	0x080032bf
 8003290:	080032bf 	.word	0x080032bf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003294:	4b9c      	ldr	r3, [pc, #624]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	4a9b      	ldr	r2, [pc, #620]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80032a0:	e00e      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032a6:	332c      	adds	r3, #44	; 0x2c
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 f8b3 	bl	8005414 <RCCEx_PLL3_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 80032b4:	e004      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 80032bc:	e000      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x464>
        break;
 80032be:	bf00      	nop
    }
    if (ret == HAL_OK)
 80032c0:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80032c8:	4b8f      	ldr	r3, [pc, #572]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80032ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032ce:	f023 0107 	bic.w	r1, r3, #7
 80032d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032da:	4a8b      	ldr	r2, [pc, #556]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80032e2:	e003      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80032e8:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80032ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80032f8:	653b      	str	r3, [r7, #80]	; 0x50
 80032fa:	2300      	movs	r3, #0
 80032fc:	657b      	str	r3, [r7, #84]	; 0x54
 80032fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003302:	460b      	mov	r3, r1
 8003304:	4313      	orrs	r3, r2
 8003306:	d04a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003308:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003314:	d028      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800331a:	d821      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800331c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003320:	d024      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003322:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003326:	d81b      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800332c:	d00e      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800332e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003332:	d815      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01b      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333c:	d110      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800333e:	4b72      	ldr	r3, [pc, #456]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	4a71      	ldr	r2, [pc, #452]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800334a:	e012      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800334c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003350:	332c      	adds	r3, #44	; 0x2c
 8003352:	4618      	mov	r0, r3
 8003354:	f002 f85e 	bl	8005414 <RCCEx_PLL3_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800335e:	e008      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003366:	e004      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8003370:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003372:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800337a:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800337c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003380:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	4a5e      	ldr	r2, [pc, #376]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800338e:	430b      	orrs	r3, r1
 8003390:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x542>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800339a:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800339e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ac:	2300      	movs	r3, #0
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80033b4:	460b      	mov	r3, r1
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f000 80ba 	beq.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	4b51      	ldr	r3, [pc, #324]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80033c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d113      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b4d      	ldr	r3, [pc, #308]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80033d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d6:	4a4c      	ldr	r2, [pc, #304]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80033e0:	4b49      	ldr	r3, [pc, #292]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80033e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
      pwrclkchanged = SET;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80033f8:	4b44      	ldr	r3, [pc, #272]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	4a43      	ldr	r2, [pc, #268]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003404:	f7fd fee2 	bl	80011cc <HAL_GetTick>
 8003408:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800340c:	e00b      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340e:	f7fd fedd 	bl	80011cc <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d903      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      {
        ret = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003424:	e005      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ed      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      }
    }

    if (ret == HAL_OK)
 8003432:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003436:	2b00      	cmp	r3, #0
 8003438:	d16a      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800343c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800344c:	2b00      	cmp	r3, #0
 800344e:	d023      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8003450:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003454:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800345c:	4293      	cmp	r3, r2
 800345e:	d01b      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003474:	4a24      	ldr	r2, [pc, #144]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003484:	4a20      	ldr	r2, [pc, #128]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003494:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d019      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fe92 	bl	80011cc <HAL_GetTick>
 80034a8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ac:	e00d      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fd fe8d 	bl	80011cc <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80034be:	429a      	cmp	r2, r3
 80034c0:	d903      	bls.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
            break;
 80034c8:	e006      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ca:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80034cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ea      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if (ret == HAL_OK)
 80034d8:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80034e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034f2:	4a05      	ldr	r2, [pc, #20]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034fa:	e00d      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034fc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003500:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8003504:	e008      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003506:	bf00      	nop
 8003508:	46020c00 	.word	0x46020c00
 800350c:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003514:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003518:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003520:	4bc0      	ldr	r3, [pc, #768]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	4abf      	ldr	r2, [pc, #764]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800353c:	643b      	str	r3, [r7, #64]	; 0x40
 800353e:	2300      	movs	r3, #0
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
 8003542:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003546:	460b      	mov	r3, r1
 8003548:	4313      	orrs	r3, r2
 800354a:	d042      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x776>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800354c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003554:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003558:	d022      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x744>
 800355a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800355e:	d81b      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8003560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003564:	d011      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8003566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356a:	d815      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d019      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003574:	d110      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003576:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800357a:	3308      	adds	r3, #8
 800357c:	4618      	mov	r0, r3
 800357e:	f001 feb1 	bl	80052e4 <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003588:	e00d      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358a:	4ba6      	ldr	r3, [pc, #664]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	4aa5      	ldr	r2, [pc, #660]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003596:	e006      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800359e:	e002      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 80035a0:	bf00      	nop
 80035a2:	e000      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 80035a4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035a6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x76e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80035ae:	4b9d      	ldr	r3, [pc, #628]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80035b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80035b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c0:	4a98      	ldr	r2, [pc, #608]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80035c2:	430b      	orrs	r3, r1
 80035c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80035ce:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e0:	2300      	movs	r3, #0
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d02d      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80035ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	d00b      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80035fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003600:	d804      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	d007      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003612:	e004      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 800361c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800361e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003626:	4b7f      	ldr	r3, [pc, #508]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003628:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800362c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4a7a      	ldr	r2, [pc, #488]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800363a:	430b      	orrs	r3, r1
 800363c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003646:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800364a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
 8003658:	2300      	movs	r3, #0
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
 800365c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d019      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003666:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800366a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800366e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003672:	d105      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003674:	4b6b      	ldr	r3, [pc, #428]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	4a6a      	ldr	r2, [pc, #424]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003680:	4b68      	ldr	r3, [pc, #416]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003682:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003686:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800368a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800368e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003692:	4a64      	ldr	r2, [pc, #400]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003694:	430b      	orrs	r3, r1
 8003696:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800369a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80036b0:	460b      	mov	r3, r1
 80036b2:	4313      	orrs	r3, r2
 80036b4:	d00c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80036b6:	4b5b      	ldr	r3, [pc, #364]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80036b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036c8:	4956      	ldr	r1, [pc, #344]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80036d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036e6:	460b      	mov	r3, r1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	d00c      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80036ec:	4b4d      	ldr	r3, [pc, #308]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80036ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036fe:	4949      	ldr	r1, [pc, #292]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800371c:	460b      	mov	r3, r1
 800371e:	4313      	orrs	r3, r2
 8003720:	d00c      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003722:	4b40      	ldr	r3, [pc, #256]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003728:	f023 0218 	bic.w	r2, r3, #24
 800372c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003734:	493b      	ldr	r1, [pc, #236]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800373c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d032      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x962>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800375c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003764:	d105      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003766:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800376c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003770:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003772:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800377a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800377e:	d108      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x936>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003784:	3308      	adds	r3, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fdac 	bl	80052e4 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }
    if (ret == HAL_OK)
 8003792:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800379c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80037a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037ac:	491d      	ldr	r1, [pc, #116]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x962>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80037ba:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80037be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037d4:	460b      	mov	r3, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d03d      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80037da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037e6:	d00e      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 80037e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ec:	d815      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80037f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f6:	d110      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x9be>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80037fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003802:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003804:	e011      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800380a:	3308      	adds	r3, #8
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fd69 	bl	80052e4 <RCCEx_PLL2_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003818:	e007      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      default:
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8003822:	bf00      	nop
 8003824:	46020c00 	.word	0x46020c00
        break;
 8003828:	bf00      	nop
    }
    if (ret == HAL_OK)
 800382a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8003834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003838:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800383c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003844:	4915      	ldr	r1, [pc, #84]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800384c:	e003      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003852:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003856:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	e9d7 1200 	ldrd	r1, r2, [r7]
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d00c      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xa30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8003874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003878:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800387c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003884:	4905      	ldr	r1, [pc, #20]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800388c:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
}
 8003890:	4618      	mov	r0, r3
 8003892:	37d0      	adds	r7, #208	; 0xd0
 8003894:	46bd      	mov	sp, r7
 8003896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800389a:	bf00      	nop
 800389c:	46020c00 	.word	0x46020c00

080038a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80038a8:	4ba6      	ldr	r3, [pc, #664]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80038b2:	4ba4      	ldr	r3, [pc, #656]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80038bc:	4ba1      	ldr	r3, [pc, #644]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3301      	adds	r3, #1
 80038c8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80038ca:	4b9e      	ldr	r3, [pc, #632]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80038d6:	4b9b      	ldr	r3, [pc, #620]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	08db      	lsrs	r3, r3, #3
 80038dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d062      	beq.n	80039be <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	f200 8081 	bhi.w	8003a02 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d024      	beq.n	8003950 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d17a      	bne.n	8003a02 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8003b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800391a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391e:	4b89      	ldr	r3, [pc, #548]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800392e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003932:	eddf 5a86 	vldr	s11, [pc, #536]	; 8003b4c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003936:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800393e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003942:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800394e:	e08f      	b.n	8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003950:	4b7c      	ldr	r3, [pc, #496]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800395c:	4b79      	ldr	r3, [pc, #484]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	0f1b      	lsrs	r3, r3, #28
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	e006      	b.n	8003976 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003968:	4b76      	ldr	r3, [pc, #472]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800396a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800396e:	041b      	lsls	r3, r3, #16
 8003970:	0f1b      	lsrs	r3, r3, #28
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	4a76      	ldr	r2, [pc, #472]	; (8003b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399c:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8003b4c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80039a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80039b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039bc:	e058      	b.n	8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80039cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d0:	4b5c      	ldr	r3, [pc, #368]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e4:	eddf 5a59 	vldr	s11, [pc, #356]	; 8003b4c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80039e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a00:	e036      	b.n	8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a02:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8003a0e:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0f1b      	lsrs	r3, r3, #28
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	e006      	b.n	8003a28 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	0f1b      	lsrs	r3, r3, #28
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	4a49      	ldr	r2, [pc, #292]	; (8003b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	ee07 3a90 	vmov	s15, r3
 8003a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a52:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003b4c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a6e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003a70:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d017      	beq.n	8003aac <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a7c:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	0a5b      	lsrs	r3, r3, #9
 8003a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa2:	ee17 2a90 	vmov	r2, s15
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d017      	beq.n	8003aee <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003abe:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae4:	ee17 2a90 	vmov	r2, s15
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	e002      	b.n	8003af4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d017      	beq.n	8003b30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b00:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b16:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b26:	ee17 2a90 	vmov	r2, s15
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
}
 8003b36:	bf00      	nop
 8003b38:	3724      	adds	r7, #36	; 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	46020c00 	.word	0x46020c00
 8003b48:	4b742400 	.word	0x4b742400
 8003b4c:	46000000 	.word	0x46000000
 8003b50:	08006834 	.word	0x08006834

08003b54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b089      	sub	sp, #36	; 0x24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003b5c:	4ba6      	ldr	r3, [pc, #664]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b64:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003b66:	4ba4      	ldr	r3, [pc, #656]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003b70:	4ba1      	ldr	r3, [pc, #644]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003b7e:	4b9e      	ldr	r3, [pc, #632]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003b8a:	4b9b      	ldr	r3, [pc, #620]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	08db      	lsrs	r3, r3, #3
 8003b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d062      	beq.n	8003c72 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	f200 8081 	bhi.w	8003cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d024      	beq.n	8003c04 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d17a      	bne.n	8003cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b89      	ldr	r3, [pc, #548]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be6:	eddf 5a86 	vldr	s11, [pc, #536]	; 8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c02:	e08f      	b.n	8003d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003c04:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003c10:	4b79      	ldr	r3, [pc, #484]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	0f1b      	lsrs	r3, r3, #28
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	e006      	b.n	8003c2a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8003c1c:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	0f1b      	lsrs	r3, r3, #28
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4a76      	ldr	r2, [pc, #472]	; (8003e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c50:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c54:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c70:	e058      	b.n	8003d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c84:	4b5c      	ldr	r3, [pc, #368]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c94:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c98:	eddf 5a59 	vldr	s11, [pc, #356]	; 8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cb4:	e036      	b.n	8003d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8003cc2:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0f1b      	lsrs	r3, r3, #28
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	e006      	b.n	8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	0f1b      	lsrs	r3, r3, #28
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	4a49      	ldr	r2, [pc, #292]	; (8003e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8003cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d06:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d22:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003d24:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d017      	beq.n	8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	0a5b      	lsrs	r3, r3, #9
 8003d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d46:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d56:	ee17 2a90 	vmov	r2, s15
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d017      	beq.n	8003da2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d72:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d7c:	ee07 3a90 	vmov	s15, r3
 8003d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d88:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d98:	ee17 2a90 	vmov	r2, s15
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	e002      	b.n	8003da8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d017      	beq.n	8003de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	0e1b      	lsrs	r3, r3, #24
 8003dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dda:	ee17 2a90 	vmov	r2, s15
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003de2:	e002      	b.n	8003dea <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
}
 8003dea:	bf00      	nop
 8003dec:	3724      	adds	r7, #36	; 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	46020c00 	.word	0x46020c00
 8003dfc:	4b742400 	.word	0x4b742400
 8003e00:	46000000 	.word	0x46000000
 8003e04:	08006834 	.word	0x08006834

08003e08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003e10:	4ba6      	ldr	r3, [pc, #664]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e18:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003e1a:	4ba4      	ldr	r3, [pc, #656]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003e24:	4ba1      	ldr	r3, [pc, #644]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	0a1b      	lsrs	r3, r3, #8
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	3301      	adds	r3, #1
 8003e30:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003e32:	4b9e      	ldr	r3, [pc, #632]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003e3e:	4b9b      	ldr	r3, [pc, #620]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e42:	08db      	lsrs	r3, r3, #3
 8003e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d062      	beq.n	8003f26 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	f200 8081 	bhi.w	8003f6a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d024      	beq.n	8003eb8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d17a      	bne.n	8003f6a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80040b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b89      	ldr	r3, [pc, #548]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9a:	eddf 5a86 	vldr	s11, [pc, #536]	; 80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8003eb6:	e08f      	b.n	8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003eb8:	4b7c      	ldr	r3, [pc, #496]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003ec4:	4b79      	ldr	r3, [pc, #484]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	0f1b      	lsrs	r3, r3, #28
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	e006      	b.n	8003ede <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8003ed0:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	0f1b      	lsrs	r3, r3, #28
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	4a76      	ldr	r2, [pc, #472]	; (80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f04:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f08:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f24:	e058      	b.n	8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f30:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8003f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f38:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f48:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4c:	eddf 5a59 	vldr	s11, [pc, #356]	; 80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f68:	e036      	b.n	8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003f6a:	4b50      	ldr	r3, [pc, #320]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8003f76:	4b4d      	ldr	r3, [pc, #308]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0f1b      	lsrs	r3, r3, #28
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8003f82:	4b4a      	ldr	r3, [pc, #296]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	0f1b      	lsrs	r3, r3, #28
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	4a49      	ldr	r2, [pc, #292]	; (80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8003f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8003fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fd6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003fd8:	4b34      	ldr	r3, [pc, #208]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d017      	beq.n	8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe8:	0a5b      	lsrs	r3, r3, #9
 8003fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800400a:	ee17 2a90 	vmov	r2, s15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e002      	b.n	800401a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004026:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800403c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004040:	edd7 6a07 	vldr	s13, [r7, #28]
 8004044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800404c:	ee17 2a90 	vmov	r2, s15
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	e002      	b.n	800405c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d017      	beq.n	8004098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004068:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	0e1b      	lsrs	r3, r3, #24
 800406e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800407a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800407e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004082:	edd7 6a07 	vldr	s13, [r7, #28]
 8004086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800408a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800408e:	ee17 2a90 	vmov	r2, s15
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004096:	e002      	b.n	800409e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
}
 800409e:	bf00      	nop
 80040a0:	3724      	adds	r7, #36	; 0x24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	46020c00 	.word	0x46020c00
 80040b0:	4b742400 	.word	0x4b742400
 80040b4:	46000000 	.word	0x46000000
 80040b8:	08006834 	.word	0x08006834

080040bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	; 0x38
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80040c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ca:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80040ce:	430b      	orrs	r3, r1
 80040d0:	d145      	bne.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80040d2:	4bac      	ldr	r3, [pc, #688]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80040d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80040de:	4ba9      	ldr	r3, [pc, #676]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80040e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d108      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f2:	d104      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80040f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f8:	637b      	str	r3, [r7, #52]	; 0x34
 80040fa:	f001 b8e3 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80040fe:	4ba1      	ldr	r3, [pc, #644]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410c:	d114      	bne.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004114:	d110      	bne.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004116:	4b9b      	ldr	r3, [pc, #620]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800411c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004124:	d103      	bne.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004126:	23fa      	movs	r3, #250	; 0xfa
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800412a:	f001 b8cb 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800412e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004134:	f001 b8c6 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004138:	4b92      	ldr	r3, [pc, #584]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004144:	d107      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d103      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800414e:	4b8e      	ldr	r3, [pc, #568]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
 8004152:	f001 b8b7 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
 800415a:	f001 b8b3 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800415e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004162:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004166:	430b      	orrs	r3, r1
 8004168:	d151      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800416a:	4b86      	ldr	r3, [pc, #536]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800416c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004170:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004174:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2b80      	cmp	r3, #128	; 0x80
 800417a:	d035      	beq.n	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d841      	bhi.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	2b60      	cmp	r3, #96	; 0x60
 8004186:	d02a      	beq.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	2b60      	cmp	r3, #96	; 0x60
 800418c:	d83b      	bhi.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d009      	beq.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	d835      	bhi.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00c      	beq.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d012      	beq.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80041a6:	e02e      	b.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fb77 	bl	80038a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041b6:	f001 b885 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041ba:	f107 0318 	add.w	r3, r7, #24
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fcc8 	bl	8003b54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041c8:	f001 b87c 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041cc:	f107 030c 	add.w	r3, r7, #12
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fe19 	bl	8003e08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041da:	f001 b873 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80041de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041e4:	f001 b86e 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041e8:	4b66      	ldr	r3, [pc, #408]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f4:	d103      	bne.n	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80041f6:	4b65      	ldr	r3, [pc, #404]	; (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80041f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80041fa:	f001 b863 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004202:	f001 b85f 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :
      {
        frequency = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800420a:	f001 b85b 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800420e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004212:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004216:	430b      	orrs	r3, r1
 8004218:	d165      	bne.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800421a:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800421c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004220:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004224:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800422c:	d034      	beq.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004234:	d853      	bhi.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423c:	d00b      	beq.n	8004256 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004244:	d84b      	bhi.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	2b00      	cmp	r3, #0
 800424a:	d016      	beq.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004252:	d009      	beq.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004254:	e043      	b.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x222>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fb20 	bl	80038a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004264:	f001 b82e 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004268:	f107 0318 	add.w	r3, r7, #24
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fc71 	bl	8003b54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004276:	f001 b825 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800427a:	4b42      	ldr	r3, [pc, #264]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004286:	d103      	bne.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        {
          frequency = HSI48_VALUE;
 8004288:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800428c:	f001 b81a 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004294:	f001 b816 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004298:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d118      	bne.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042a4:	4b37      	ldr	r3, [pc, #220]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 80042b0:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	e006      	b.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80042bc:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80042be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	0e1b      	lsrs	r3, r3, #24
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	4a32      	ldr	r2, [pc, #200]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80042cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80042d2:	f000 bff7 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042da:	f000 bff3 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :

        frequency = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042e2:	f000 bfef 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80042e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ea:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80042ee:	430b      	orrs	r3, r1
 80042f0:	f040 808a 	bne.w	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80042f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fe:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	d16f      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004306:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800430c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004310:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004318:	d03e      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004320:	d85d      	bhi.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004328:	d00b      	beq.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004330:	d855      	bhi.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2b00      	cmp	r3, #0
 8004336:	d016      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433e:	d009      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8004340:	e04d      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff faaa 	bl	80038a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004350:	f000 bfb8 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004354:	f107 0318 	add.w	r3, r7, #24
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fbfb 	bl	8003b54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004362:	f000 bfaf 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	d103      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          {
            frequency = HSI48_VALUE;
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004378:	f000 bfa4 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004380:	f000 bfa0 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004384:	46020c00 	.word	0x46020c00
 8004388:	0007a120 	.word	0x0007a120
 800438c:	00f42400 	.word	0x00f42400
 8004390:	02dc6c00 	.word	0x02dc6c00
 8004394:	08006834 	.word	0x08006834
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004398:	4bab      	ldr	r3, [pc, #684]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d118      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80043a4:	4ba8      	ldr	r3, [pc, #672]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80043b0:	4ba5      	ldr	r3, [pc, #660]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	0e1b      	lsrs	r3, r3, #24
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	e006      	b.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80043bc:	4ba2      	ldr	r3, [pc, #648]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80043be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	0e1b      	lsrs	r3, r3, #24
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	4aa0      	ldr	r2, [pc, #640]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80043d2:	f000 bf77 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80043da:	f000 bf73 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        default :
        {
          frequency = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80043e2:	f000 bf6f 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ec:	d108      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fa54 	bl	80038a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	637b      	str	r3, [r7, #52]	; 0x34
 80043fc:	f000 bf62 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else
    {
      frequency = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
 8004404:	f000 bf5e 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440c:	1e51      	subs	r1, r2, #1
 800440e:	430b      	orrs	r3, r1
 8004410:	d136      	bne.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004412:	4b8d      	ldr	r3, [pc, #564]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fc6c 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8004428:	6378      	str	r0, [r7, #52]	; 0x34
 800442a:	f000 bf4b 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	2b01      	cmp	r3, #1
 8004432:	d104      	bne.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004434:	f7fe fb34 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8004438:	6378      	str	r0, [r7, #52]	; 0x34
 800443a:	f000 bf43 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800443e:	4b82      	ldr	r3, [pc, #520]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444a:	d106      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	2b02      	cmp	r3, #2
 8004450:	d103      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
    {
      frequency = HSI_VALUE;
 8004452:	4b7f      	ldr	r3, [pc, #508]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
 8004456:	f000 bf35 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800445a:	4b7b      	ldr	r3, [pc, #492]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800445c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d107      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2b03      	cmp	r3, #3
 800446c:	d104      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
    {
      frequency = LSE_VALUE;
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
 8004474:	f000 bf26 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
 800447c:	f000 bf22 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004484:	1f11      	subs	r1, r2, #4
 8004486:	430b      	orrs	r3, r1
 8004488:	d136      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800448a:	4b6f      	ldr	r3, [pc, #444]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800448c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004490:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004494:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800449c:	f7fe fc1c 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 80044a0:	6378      	str	r0, [r7, #52]	; 0x34
 80044a2:	f000 bf0f 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d104      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044ac:	f7fe faf8 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 80044b0:	6378      	str	r0, [r7, #52]	; 0x34
 80044b2:	f000 bf07 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80044b6:	4b64      	ldr	r3, [pc, #400]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c2:	d106      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d103      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      frequency = HSI_VALUE;
 80044ca:	4b61      	ldr	r3, [pc, #388]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	f000 bef9 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80044d2:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80044d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d107      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	2b30      	cmp	r3, #48	; 0x30
 80044e4:	d104      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
    {
      frequency = LSE_VALUE;
 80044e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
 80044ec:	f000 beea 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
 80044f4:	f000 bee6 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80044f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fc:	f1a2 0108 	sub.w	r1, r2, #8
 8004500:	430b      	orrs	r3, r1
 8004502:	d136      	bne.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004504:	4b50      	ldr	r3, [pc, #320]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800450a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800450e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004516:	f7fe fbdf 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 800451a:	6378      	str	r0, [r7, #52]	; 0x34
 800451c:	f000 bed2 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d104      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004526:	f7fe fabb 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 800452a:	6378      	str	r0, [r7, #52]	; 0x34
 800452c:	f000 beca 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004530:	4b45      	ldr	r3, [pc, #276]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453c:	d106      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d103      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = HSI_VALUE;
 8004544:	4b42      	ldr	r3, [pc, #264]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004546:	637b      	str	r3, [r7, #52]	; 0x34
 8004548:	f000 bebc 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800454c:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800454e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b02      	cmp	r3, #2
 8004558:	d107      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2bc0      	cmp	r3, #192	; 0xc0
 800455e:	d104      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
    {
      frequency = LSE_VALUE;
 8004560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004564:	637b      	str	r3, [r7, #52]	; 0x34
 8004566:	f000 bead 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
 800456e:	f000 bea9 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004576:	f1a2 0110 	sub.w	r1, r2, #16
 800457a:	430b      	orrs	r3, r1
 800457c:	d139      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800457e:	4b32      	ldr	r3, [pc, #200]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004588:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004590:	f7fe fba2 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004594:	6378      	str	r0, [r7, #52]	; 0x34
 8004596:	f000 be95 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a0:	d104      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fa7d 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 80045a6:	6378      	str	r0, [r7, #52]	; 0x34
 80045a8:	f000 be8c 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80045ac:	4b26      	ldr	r3, [pc, #152]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b8:	d107      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c0:	d103      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HSI_VALUE;
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80045c4:	637b      	str	r3, [r7, #52]	; 0x34
 80045c6:	f000 be7d 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80045ca:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d108      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045de:	d104      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
    {
      frequency = LSE_VALUE;
 80045e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
 80045e6:	f000 be6d 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
 80045ee:	f000 be69 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80045f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f6:	f1a2 0120 	sub.w	r1, r2, #32
 80045fa:	430b      	orrs	r3, r1
 80045fc:	d15f      	bne.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x602>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004610:	f7fe fb8a 	bl	8002d28 <HAL_RCC_GetPCLK3Freq>
 8004614:	6378      	str	r0, [r7, #52]	; 0x34
 8004616:	f000 be55 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	2b01      	cmp	r3, #1
 800461e:	d104      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004620:	f7fe fa3e 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8004624:	6378      	str	r0, [r7, #52]	; 0x34
 8004626:	f000 be4d 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004636:	d10d      	bne.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	2b02      	cmp	r3, #2
 800463c:	d10a      	bne.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HSI_VALUE;
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
 8004642:	f000 be3f 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004646:	bf00      	nop
 8004648:	46020c00 	.word	0x46020c00
 800464c:	08006834 	.word	0x08006834
 8004650:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004654:	4baf      	ldr	r3, [pc, #700]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d107      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	2b03      	cmp	r3, #3
 8004666:	d104      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = LSE_VALUE;
 8004668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
 800466e:	f000 be29 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004672:	4ba8      	ldr	r3, [pc, #672]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d11b      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2b04      	cmp	r3, #4
 8004682:	d118      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004684:	4ba3      	ldr	r3, [pc, #652]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 8004690:	4ba0      	ldr	r3, [pc, #640]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	0e1b      	lsrs	r3, r3, #24
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	e006      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800469c:	4b9d      	ldr	r3, [pc, #628]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800469e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	0e1b      	lsrs	r3, r3, #24
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	4a9b      	ldr	r2, [pc, #620]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
 80046b2:	f000 be07 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ba:	f000 be03 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80046be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c2:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80046c6:	430b      	orrs	r3, r1
 80046c8:	d16c      	bne.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80046ca:	4b92      	ldr	r3, [pc, #584]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80046cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d104      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80046de:	f7fe f9df 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 80046e2:	6378      	str	r0, [r7, #52]	; 0x34
 80046e4:	f000 bdee 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ee:	d108      	bne.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046f0:	f107 0318 	add.w	r3, r7, #24
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fa2d 	bl	8003b54 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
 80046fe:	f000 bde1 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004708:	f7fe facc 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 800470c:	6378      	str	r0, [r7, #52]	; 0x34
 800470e:	f000 bdd9 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004718:	d122      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800471a:	4b7e      	ldr	r3, [pc, #504]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b20      	cmp	r3, #32
 8004724:	d118      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004726:	4b7b      	ldr	r3, [pc, #492]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8004732:	4b78      	ldr	r3, [pc, #480]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	0e1b      	lsrs	r3, r3, #24
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	e006      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 800473e:	4b75      	ldr	r3, [pc, #468]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	0e1b      	lsrs	r3, r3, #24
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	4a72      	ldr	r2, [pc, #456]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800474e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
 8004754:	f000 bdb6 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
 800475c:	f000 bdb2 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004760:	4b6c      	ldr	r3, [pc, #432]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800476c:	d107      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004774:	d103      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
    {
      frequency = HSE_VALUE;
 8004776:	4b69      	ldr	r3, [pc, #420]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
 800477a:	f000 bda3 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800477e:	4b65      	ldr	r3, [pc, #404]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478a:	d107      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004792:	d103      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
    {
      frequency = HSI_VALUE;
 8004794:	4b61      	ldr	r3, [pc, #388]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
 8004798:	f000 bd94 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
 80047a0:	f000 bd90 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80047a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80047ac:	430b      	orrs	r3, r1
 80047ae:	d158      	bne.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80047b0:	4b58      	ldr	r3, [pc, #352]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80047b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d84b      	bhi.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	08004801 	.word	0x08004801
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047ef 	.word	0x080047ef
 80047d4:	0800480b 	.word	0x0800480b
 80047d8:	08004815 	.word	0x08004815
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f85d 	bl	80038a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047ea:	f000 bd6b 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fb08 	bl	8003e08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047fc:	f000 bd62 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004800:	f7fe fa50 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8004804:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004806:	f000 bd5d 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800480a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004810:	f000 bd58 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004814:	4b3f      	ldr	r3, [pc, #252]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b20      	cmp	r3, #32
 800481e:	d118      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004820:	4b3c      	ldr	r3, [pc, #240]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 800482c:	4b39      	ldr	r3, [pc, #228]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	e006      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8004838:	4b36      	ldr	r3, [pc, #216]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800483a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	0e1b      	lsrs	r3, r3, #24
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	4a34      	ldr	r2, [pc, #208]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8004848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800484e:	f000 bd39 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004856:	f000 bd35 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800485e:	f000 bd31 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004866:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800486a:	430b      	orrs	r3, r1
 800486c:	d16d      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800486e:	4b29      	ldr	r3, [pc, #164]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004874:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004878:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004880:	d036      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004888:	d85b      	bhi.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004890:	d029      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004898:	d853      	bhi.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a0:	d013      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a8:	d84b      	bhi.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b6:	d144      	bne.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe ffef 	bl	80038a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048c6:	f000 bcfd 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ca:	f107 030c 	add.w	r3, r7, #12
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fa9a 	bl	8003e08 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048d8:	f000 bcf4 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80048dc:	f7fe f9e2 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 80048e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80048e2:	f000 bcef 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80048e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048ec:	f000 bcea 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80048f0:	4b08      	ldr	r3, [pc, #32]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d11e      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8004908:	4b02      	ldr	r3, [pc, #8]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	0e1b      	lsrs	r3, r3, #24
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	e00c      	b.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8004914:	46020c00 	.word	0x46020c00
 8004918:	08006834 	.word	0x08006834
 800491c:	00f42400 	.word	0x00f42400
 8004920:	4b9d      	ldr	r3, [pc, #628]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	0e1b      	lsrs	r3, r3, #24
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	4a9b      	ldr	r2, [pc, #620]	; (8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8004930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004936:	f000 bcc5 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800493e:	f000 bcc1 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004946:	f000 bcbd 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800494a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800494e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004952:	430b      	orrs	r3, r1
 8004954:	d14c      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004956:	4b90      	ldr	r3, [pc, #576]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800495c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004960:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fe f9b6 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 800496c:	6378      	str	r0, [r7, #52]	; 0x34
 800496e:	f000 bca9 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004978:	d104      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800497a:	f7fe f891 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 800497e:	6378      	str	r0, [r7, #52]	; 0x34
 8004980:	f000 bca0 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004984:	4b84      	ldr	r3, [pc, #528]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004990:	d107      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d103      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
    {
      frequency = HSI_VALUE;
 800499a:	4b81      	ldr	r3, [pc, #516]	; (8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 800499c:	637b      	str	r3, [r7, #52]	; 0x34
 800499e:	f000 bc91 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80049a2:	4b7d      	ldr	r3, [pc, #500]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d11c      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b4:	d118      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049b6:	4b78      	ldr	r3, [pc, #480]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x912>
 80049c2:	4b75      	ldr	r3, [pc, #468]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	0e1b      	lsrs	r3, r3, #24
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	e006      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80049ce:	4b72      	ldr	r3, [pc, #456]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80049d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	0e1b      	lsrs	r3, r3, #24
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	4a6f      	ldr	r2, [pc, #444]	; (8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 80049de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
 80049e4:	f000 bc6e 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
 80049ec:	f000 bc6a 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80049f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80049f8:	430b      	orrs	r3, r1
 80049fa:	d14c      	bne.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80049fc:	4b66      	ldr	r3, [pc, #408]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80049fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d104      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a0e:	f7fe f963 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004a12:	6378      	str	r0, [r7, #52]	; 0x34
 8004a14:	f000 bc56 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	d104      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a20:	f7fe f83e 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8004a24:	6378      	str	r0, [r7, #52]	; 0x34
 8004a26:	f000 bc4d 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004a2a:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a36:	d107      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3e:	d103      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
    {
      frequency = HSI_VALUE;
 8004a40:	4b57      	ldr	r3, [pc, #348]	; (8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
 8004a44:	f000 bc3e 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004a48:	4b53      	ldr	r3, [pc, #332]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d11c      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a5a:	d118      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a5c:	4b4e      	ldr	r3, [pc, #312]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004a68:	4b4b      	ldr	r3, [pc, #300]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	0e1b      	lsrs	r3, r3, #24
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	e006      	b.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8004a74:	4b48      	ldr	r3, [pc, #288]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	0e1b      	lsrs	r3, r3, #24
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	4a46      	ldr	r2, [pc, #280]	; (8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8a:	f000 bc1b 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
 8004a92:	f000 bc17 	b.w	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a9a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	d151      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004aa8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8004ab2:	d024      	beq.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ab8:	d842      	bhi.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d00d      	beq.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d83c      	bhi.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d011      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8004ad2:	e035      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004ad4:	f7fe f928 	bl	8002d28 <HAL_RCC_GetPCLK3Freq>
 8004ad8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004ada:	e3f3      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004adc:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d102      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
        {
          frequency = HSI_VALUE;
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004aee:	e3e9      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004af4:	e3e6      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004af6:	f7fd ffd3 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8004afa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004afc:	e3e2      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004afe:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d117      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 8004b16:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	0e1b      	lsrs	r3, r3, #24
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004b22:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	0e1b      	lsrs	r3, r3, #24
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8004b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b38:	e3c4      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b3e:	e3c1      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      default:
      {
        frequency = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b44:	e3be      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	d14d      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b5c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d103      	bne.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7fe f8b8 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004b68:	6378      	str	r0, [r7, #52]	; 0x34
 8004b6a:	e3ab      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b72:	d103      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b74:	f7fd ff94 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8004b78:	6378      	str	r0, [r7, #52]	; 0x34
 8004b7a:	e3a3      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b90:	d108      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
    {
      frequency = HSI_VALUE;
 8004b92:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
 8004b96:	e395      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004b98:	46020c00 	.word	0x46020c00
 8004b9c:	08006834 	.word	0x08006834
 8004ba0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004ba4:	4ba4      	ldr	r3, [pc, #656]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d11b      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bb6:	d117      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bb8:	4b9f      	ldr	r3, [pc, #636]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8004bc4:	4b9c      	ldr	r3, [pc, #624]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	0e1b      	lsrs	r3, r3, #24
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	e006      	b.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004bd0:	4b99      	ldr	r3, [pc, #612]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	0e1b      	lsrs	r3, r3, #24
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	4a97      	ldr	r2, [pc, #604]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34
 8004be6:	e36d      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
 8004bec:	e36a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	d164      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004bfa:	4b8f      	ldr	r3, [pc, #572]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c04:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d120      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c0c:	4b8a      	ldr	r3, [pc, #552]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d117      	bne.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c18:	4b87      	ldr	r3, [pc, #540]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 8004c24:	4b84      	ldr	r3, [pc, #528]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	e006      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 8004c30:	4b81      	ldr	r3, [pc, #516]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	0e1b      	lsrs	r3, r3, #24
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	4a7f      	ldr	r2, [pc, #508]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8004c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
 8004c46:	e33d      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4c:	e33a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004c4e:	4b7a      	ldr	r3, [pc, #488]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c5c:	d112      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c64:	d10e      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c66:	4b74      	ldr	r3, [pc, #464]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c74:	d102      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
      {
        frequency = LSI_VALUE / 128U;
 8004c76:	23fa      	movs	r3, #250	; 0xfa
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c7a:	e323      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8004c7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c82:	e31f      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004c84:	4b6c      	ldr	r3, [pc, #432]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
    {
      frequency = HSI_VALUE;
 8004c9a:	4b69      	ldr	r3, [pc, #420]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9e:	e311      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004ca0:	4b65      	ldr	r3, [pc, #404]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d107      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb4:	d103      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
    {
      frequency = LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	e302      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc2:	e2ff      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	d164      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004cd0:	4b59      	ldr	r3, [pc, #356]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d120      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ce2:	4b55      	ldr	r3, [pc, #340]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d117      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004cee:	4b52      	ldr	r3, [pc, #328]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8004cfa:	4b4f      	ldr	r3, [pc, #316]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0e1b      	lsrs	r3, r3, #24
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	e006      	b.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 8004d06:	4b4c      	ldr	r3, [pc, #304]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	0e1b      	lsrs	r3, r3, #24
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	4a49      	ldr	r2, [pc, #292]	; (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8004d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1c:	e2d2      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
 8004d22:	e2cf      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004d24:	4b44      	ldr	r3, [pc, #272]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d32:	d112      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3a:	d10e      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d3c:	4b3e      	ldr	r3, [pc, #248]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d4a:	d102      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
      {
        frequency = LSI_VALUE / 128U;
 8004d4c:	23fa      	movs	r3, #250	; 0xfa
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d50:	e2b8      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d52:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d58:	e2b4      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004d5a:	4b37      	ldr	r3, [pc, #220]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d66:	d106      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
    {
      frequency = HSI_VALUE;
 8004d70:	4b33      	ldr	r3, [pc, #204]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
 8004d74:	e2a6      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004d76:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d107      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d8a:	d103      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
    {
      frequency = LSE_VALUE;
 8004d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
 8004d92:	e297      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
 8004d98:	e294      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d9e:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004da2:	430b      	orrs	r3, r1
 8004da4:	d14e      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004da6:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004db0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7fd ff8e 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	6378      	str	r0, [r7, #52]	; 0x34
 8004dbe:	e281      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dce:	d112      	bne.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dd6:	d10e      	bne.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de6:	d102      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
      {
        frequency = LSI_VALUE / 128U;
 8004de8:	23fa      	movs	r3, #250	; 0xfa
 8004dea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dec:	e26a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8004dee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004df4:	e266      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e02:	d106      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e0a:	d102      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = HSI_VALUE;
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e10:	e258      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8004e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e26:	d103      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
    {
      frequency = LSE_VALUE;
 8004e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2e:	e249      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
 8004e34:	e246      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004e36:	bf00      	nop
 8004e38:	46020c00 	.word	0x46020c00
 8004e3c:	08006834 	.word	0x08006834
 8004e40:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e48:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	d12d      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004e50:	4ba9      	ldr	r3, [pc, #676]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e56:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004e5c:	4ba6      	ldr	r3, [pc, #664]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e68:	d105      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
    {
      frequency = HSE_VALUE;
 8004e70:	4ba2      	ldr	r3, [pc, #648]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
 8004e74:	e226      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fd0c 	bl	80038a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8c:	e21a      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e96:	f107 0318 	add.w	r3, r7, #24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fe5a 	bl	8003b54 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea4:	e20e      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eaa:	e20b      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	d156      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004eb8:	4b8f      	ldr	r3, [pc, #572]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ebe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ec2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004eca:	d028      	beq.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ed2:	d845      	bhi.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eda:	d013      	beq.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee2:	d83d      	bhi.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef0:	d004      	beq.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
 8004ef2:	e035      	b.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fd ff04 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8004ef8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004efa:	e1e3      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004efc:	f7fd fdd0 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8004f00:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004f02:	e1df      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f04:	4b7c      	ldr	r3, [pc, #496]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f10:	d102      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI_VALUE;
 8004f12:	4b7a      	ldr	r3, [pc, #488]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f16:	e1d5      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f1c:	e1d2      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f1e:	4b76      	ldr	r3, [pc, #472]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d117      	bne.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f2a:	4b73      	ldr	r3, [pc, #460]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8004f36:	4b70      	ldr	r3, [pc, #448]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	0e1b      	lsrs	r3, r3, #24
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8004f42:	4b6d      	ldr	r3, [pc, #436]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	0e1b      	lsrs	r3, r3, #24
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	4a6b      	ldr	r2, [pc, #428]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8004f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f56:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f58:	e1b4      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f5e:	e1b1      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f64:	e1ae      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6a:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	d156      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004f72:	4b61      	ldr	r3, [pc, #388]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f7c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f84:	d028      	beq.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f8c:	d845      	bhi.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f94:	d013      	beq.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f9c:	d83d      	bhi.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004faa:	d004      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
 8004fac:	e035      	b.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004fae:	f7fd fe93 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004fb2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fb4:	e186      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fd fd73 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8004fba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fbc:	e182      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fbe:	4b4e      	ldr	r3, [pc, #312]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	d102      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
        {
          frequency = HSI_VALUE;
 8004fcc:	4b4b      	ldr	r3, [pc, #300]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fd0:	e178      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fd6:	e175      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fd8:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d117      	bne.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fe4:	4b44      	ldr	r3, [pc, #272]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
 8004ff0:	4b41      	ldr	r3, [pc, #260]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	0e1b      	lsrs	r3, r3, #24
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	e006      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xf4e>
 8004ffc:	4b3e      	ldr	r3, [pc, #248]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8004ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	0e1b      	lsrs	r3, r3, #24
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	4a3d      	ldr	r2, [pc, #244]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800500c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005012:	e157      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005018:	e154      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800501e:	e151      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005024:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005028:	430b      	orrs	r3, r1
 800502a:	d17d      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800502c:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800502e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005032:	f003 0318 	and.w	r3, r3, #24
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	2b18      	cmp	r3, #24
 800503c:	d871      	bhi.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	080050a9 	.word	0x080050a9
 8005048:	08005123 	.word	0x08005123
 800504c:	08005123 	.word	0x08005123
 8005050:	08005123 	.word	0x08005123
 8005054:	08005123 	.word	0x08005123
 8005058:	08005123 	.word	0x08005123
 800505c:	08005123 	.word	0x08005123
 8005060:	08005123 	.word	0x08005123
 8005064:	080050b1 	.word	0x080050b1
 8005068:	08005123 	.word	0x08005123
 800506c:	08005123 	.word	0x08005123
 8005070:	08005123 	.word	0x08005123
 8005074:	08005123 	.word	0x08005123
 8005078:	08005123 	.word	0x08005123
 800507c:	08005123 	.word	0x08005123
 8005080:	08005123 	.word	0x08005123
 8005084:	080050b9 	.word	0x080050b9
 8005088:	08005123 	.word	0x08005123
 800508c:	08005123 	.word	0x08005123
 8005090:	08005123 	.word	0x08005123
 8005094:	08005123 	.word	0x08005123
 8005098:	08005123 	.word	0x08005123
 800509c:	08005123 	.word	0x08005123
 80050a0:	08005123 	.word	0x08005123
 80050a4:	080050d3 	.word	0x080050d3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80050a8:	f7fd fe3e 	bl	8002d28 <HAL_RCC_GetPCLK3Freq>
 80050ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80050ae:	e109      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80050b0:	f7fd fcf6 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 80050b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80050b6:	e105      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c4:	d102      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
        {
          frequency = HSI_VALUE;
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050ca:	e0fb      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050d0:	e0f8      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d11e      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00c      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80050ea:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	0e1b      	lsrs	r3, r3, #24
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	e00d      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 80050f6:	bf00      	nop
 80050f8:	46020c00 	.word	0x46020c00
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	08006834 	.word	0x08006834
 8005104:	4b72      	ldr	r3, [pc, #456]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	0e1b      	lsrs	r3, r3, #24
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	4a70      	ldr	r2, [pc, #448]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 8005114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800511a:	e0d3      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005120:	e0d0      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005126:	e0cd      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005130:	430b      	orrs	r3, r1
 8005132:	d155      	bne.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005134:	4b66      	ldr	r3, [pc, #408]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005136:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800513a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800513e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005146:	d013      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800514e:	d844      	bhi.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005156:	d013      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800515e:	d83c      	bhi.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	2b00      	cmp	r3, #0
 8005164:	d014      	beq.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516c:	d014      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 800516e:	e034      	b.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005170:	f107 0318 	add.w	r3, r7, #24
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe fced 	bl	8003b54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800517e:	e0a1      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fb8b 	bl	80038a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800518e:	e099      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005190:	f7fd fc86 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8005194:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005196:	e095      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005198:	4b4d      	ldr	r3, [pc, #308]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d117      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1118>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051a4:	4b4a      	ldr	r3, [pc, #296]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 80051b0:	4b47      	ldr	r3, [pc, #284]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	0e1b      	lsrs	r3, r3, #24
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	e006      	b.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
 80051bc:	4b44      	ldr	r3, [pc, #272]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80051be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	0e1b      	lsrs	r3, r3, #24
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	4a42      	ldr	r2, [pc, #264]	; (80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 80051cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051d2:	e077      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051d8:	e074      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051de:	e071      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80051e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e4:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80051e8:	430b      	orrs	r3, r1
 80051ea:	d131      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x1194>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80051ec:	4b38      	ldr	r3, [pc, #224]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80051ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80051f8:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80051fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d106      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
    {
      frequency = LSE_VALUE;
 800520c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	e057      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005214:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800521a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800521e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005222:	d112      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522a:	d10e      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800522c:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800522e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800523a:	d102      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
      {
        frequency = LSI_VALUE / 128U;
 800523c:	23fa      	movs	r3, #250	; 0xfa
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005240:	e040      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005242:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005248:	e03c      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
 800524e:	e039      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005254:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005258:	430b      	orrs	r3, r1
 800525a:	d131      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800525c:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800525e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005262:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005266:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005274:	d105      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
    {
      frequency = HSI48_VALUE;
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	e020      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800528a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528e:	d106      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005296:	d102      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>)
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
 800529c:	e012      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052aa:	d106      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b2:	d102      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
    {
      frequency = HSI_VALUE;
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
 80052b8:	e004      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
 80052be:	e001      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3738      	adds	r7, #56	; 0x38
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	46020c00 	.word	0x46020c00
 80052d4:	08006834 	.word	0x08006834
 80052d8:	02dc6c00 	.word	0x02dc6c00
 80052dc:	016e3600 	.word	0x016e3600
 80052e0:	00f42400 	.word	0x00f42400

080052e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80052ec:	4b47      	ldr	r3, [pc, #284]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a46      	ldr	r2, [pc, #280]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80052f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052f8:	f7fb ff68 	bl	80011cc <HAL_GetTick>
 80052fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052fe:	e008      	b.n	8005312 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005300:	f7fb ff64 	bl	80011cc <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e077      	b.n	8005402 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005312:	4b3e      	ldr	r3, [pc, #248]	; (800540c <RCCEx_PLL2_Config+0x128>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800531e:	4b3b      	ldr	r3, [pc, #236]	; (800540c <RCCEx_PLL2_Config+0x128>)
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6811      	ldr	r1, [r2, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6852      	ldr	r2, [r2, #4]
 8005332:	3a01      	subs	r2, #1
 8005334:	0212      	lsls	r2, r2, #8
 8005336:	430a      	orrs	r2, r1
 8005338:	4934      	ldr	r1, [pc, #208]	; (800540c <RCCEx_PLL2_Config+0x128>)
 800533a:	4313      	orrs	r3, r2
 800533c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800533e:	4b33      	ldr	r3, [pc, #204]	; (800540c <RCCEx_PLL2_Config+0x128>)
 8005340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <RCCEx_PLL2_Config+0x12c>)
 8005344:	4013      	ands	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6892      	ldr	r2, [r2, #8]
 800534a:	3a01      	subs	r2, #1
 800534c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68d2      	ldr	r2, [r2, #12]
 8005354:	3a01      	subs	r2, #1
 8005356:	0252      	lsls	r2, r2, #9
 8005358:	b292      	uxth	r2, r2
 800535a:	4311      	orrs	r1, r2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6912      	ldr	r2, [r2, #16]
 8005360:	3a01      	subs	r2, #1
 8005362:	0412      	lsls	r2, r2, #16
 8005364:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005368:	4311      	orrs	r1, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6952      	ldr	r2, [r2, #20]
 800536e:	3a01      	subs	r2, #1
 8005370:	0612      	lsls	r2, r2, #24
 8005372:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005376:	430a      	orrs	r2, r1
 8005378:	4924      	ldr	r1, [pc, #144]	; (800540c <RCCEx_PLL2_Config+0x128>)
 800537a:	4313      	orrs	r3, r2
 800537c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800537e:	4b23      	ldr	r3, [pc, #140]	; (800540c <RCCEx_PLL2_Config+0x128>)
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f023 020c 	bic.w	r2, r3, #12
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	4920      	ldr	r1, [pc, #128]	; (800540c <RCCEx_PLL2_Config+0x128>)
 800538c:	4313      	orrs	r3, r2
 800538e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <RCCEx_PLL2_Config+0x128>)
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	491c      	ldr	r1, [pc, #112]	; (800540c <RCCEx_PLL2_Config+0x128>)
 800539a:	4313      	orrs	r3, r2
 800539c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800539e:	4b1b      	ldr	r3, [pc, #108]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4a1a      	ldr	r2, [pc, #104]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	69d2      	ldr	r2, [r2, #28]
 80053ba:	00d2      	lsls	r2, r2, #3
 80053bc:	4913      	ldr	r1, [pc, #76]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	4a11      	ldr	r2, [pc, #68]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053c8:	f043 0310 	orr.w	r3, r3, #16
 80053cc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80053ce:	4b0f      	ldr	r3, [pc, #60]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a0e      	ldr	r2, [pc, #56]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053da:	f7fb fef7 	bl	80011cc <HAL_GetTick>
 80053de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053e0:	e008      	b.n	80053f4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053e2:	f7fb fef3 	bl	80011cc <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e006      	b.n	8005402 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <RCCEx_PLL2_Config+0x128>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0

}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	46020c00 	.word	0x46020c00
 8005410:	80800000 	.word	0x80800000

08005414 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800541c:	4b47      	ldr	r3, [pc, #284]	; (800553c <RCCEx_PLL3_Config+0x128>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a46      	ldr	r2, [pc, #280]	; (800553c <RCCEx_PLL3_Config+0x128>)
 8005422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005426:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005428:	f7fb fed0 	bl	80011cc <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800542e:	e008      	b.n	8005442 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005430:	f7fb fecc 	bl	80011cc <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e077      	b.n	8005532 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005442:	4b3e      	ldr	r3, [pc, #248]	; (800553c <RCCEx_PLL3_Config+0x128>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <RCCEx_PLL3_Config+0x128>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6811      	ldr	r1, [r2, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6852      	ldr	r2, [r2, #4]
 8005462:	3a01      	subs	r2, #1
 8005464:	0212      	lsls	r2, r2, #8
 8005466:	430a      	orrs	r2, r1
 8005468:	4934      	ldr	r1, [pc, #208]	; (800553c <RCCEx_PLL3_Config+0x128>)
 800546a:	4313      	orrs	r3, r2
 800546c:	630b      	str	r3, [r1, #48]	; 0x30
 800546e:	4b33      	ldr	r3, [pc, #204]	; (800553c <RCCEx_PLL3_Config+0x128>)
 8005470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005472:	4b33      	ldr	r3, [pc, #204]	; (8005540 <RCCEx_PLL3_Config+0x12c>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6892      	ldr	r2, [r2, #8]
 800547a:	3a01      	subs	r2, #1
 800547c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68d2      	ldr	r2, [r2, #12]
 8005484:	3a01      	subs	r2, #1
 8005486:	0252      	lsls	r2, r2, #9
 8005488:	b292      	uxth	r2, r2
 800548a:	4311      	orrs	r1, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6912      	ldr	r2, [r2, #16]
 8005490:	3a01      	subs	r2, #1
 8005492:	0412      	lsls	r2, r2, #16
 8005494:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005498:	4311      	orrs	r1, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6952      	ldr	r2, [r2, #20]
 800549e:	3a01      	subs	r2, #1
 80054a0:	0612      	lsls	r2, r2, #24
 80054a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80054a6:	430a      	orrs	r2, r1
 80054a8:	4924      	ldr	r1, [pc, #144]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80054ae:	4b23      	ldr	r3, [pc, #140]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	f023 020c 	bic.w	r2, r3, #12
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	4920      	ldr	r1, [pc, #128]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80054c0:	4b1e      	ldr	r3, [pc, #120]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	491c      	ldr	r1, [pc, #112]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	4a1a      	ldr	r2, [pc, #104]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054d4:	f023 0310 	bic.w	r3, r3, #16
 80054d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054da:	4b18      	ldr	r3, [pc, #96]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	69d2      	ldr	r2, [r2, #28]
 80054ea:	00d2      	lsls	r2, r2, #3
 80054ec:	4913      	ldr	r1, [pc, #76]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	4a11      	ldr	r2, [pc, #68]	; (800553c <RCCEx_PLL3_Config+0x128>)
 80054f8:	f043 0310 	orr.w	r3, r3, #16
 80054fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <RCCEx_PLL3_Config+0x128>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a0e      	ldr	r2, [pc, #56]	; (800553c <RCCEx_PLL3_Config+0x128>)
 8005504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005508:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800550a:	f7fb fe5f 	bl	80011cc <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005510:	e008      	b.n	8005524 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005512:	f7fb fe5b 	bl	80011cc <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e006      	b.n	8005532 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <RCCEx_PLL3_Config+0x128>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	46020c00 	.word	0x46020c00
 8005540:	80800000 	.word	0x80800000

08005544 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0fb      	b.n	800574e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a7f      	ldr	r2, [pc, #508]	; (8005758 <HAL_SPI_Init+0x214>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_SPI_Init+0x26>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a7d      	ldr	r2, [pc, #500]	; (800575c <HAL_SPI_Init+0x218>)
 8005566:	4293      	cmp	r3, r2
 8005568:	e000      	b.n	800556c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800556a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a78      	ldr	r2, [pc, #480]	; (8005758 <HAL_SPI_Init+0x214>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_SPI_Init+0x42>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a76      	ldr	r2, [pc, #472]	; (800575c <HAL_SPI_Init+0x218>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d105      	bne.n	8005592 <HAL_SPI_Init+0x4e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	d901      	bls.n	8005592 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0dd      	b.n	800574e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8ec 	bl	8005770 <SPI_GetPacketSize>
 8005598:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a6e      	ldr	r2, [pc, #440]	; (8005758 <HAL_SPI_Init+0x214>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_SPI_Init+0x6a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a6c      	ldr	r2, [pc, #432]	; (800575c <HAL_SPI_Init+0x218>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d102      	bne.n	80055b4 <HAL_SPI_Init+0x70>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d816      	bhi.n	80055e2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80055b8:	4a69      	ldr	r2, [pc, #420]	; (8005760 <HAL_SPI_Init+0x21c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00e      	beq.n	80055dc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a68      	ldr	r2, [pc, #416]	; (8005764 <HAL_SPI_Init+0x220>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d009      	beq.n	80055dc <HAL_SPI_Init+0x98>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a66      	ldr	r2, [pc, #408]	; (8005768 <HAL_SPI_Init+0x224>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_SPI_Init+0x98>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a65      	ldr	r2, [pc, #404]	; (800576c <HAL_SPI_Init+0x228>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d104      	bne.n	80055e6 <HAL_SPI_Init+0xa2>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d901      	bls.n	80055e6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e0b3      	b.n	800574e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb fa76 	bl	8000aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005622:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800562c:	d119      	bne.n	8005662 <HAL_SPI_Init+0x11e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005636:	d103      	bne.n	8005640 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10c      	bne.n	8005662 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800564c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005650:	d107      	bne.n	8005662 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005660:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00f      	beq.n	800568e <HAL_SPI_Init+0x14a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2b06      	cmp	r3, #6
 8005674:	d90b      	bls.n	800568e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e007      	b.n	800569e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800569c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	ea42 0103 	orr.w	r1, r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570a:	ea42 0103 	orr.w	r1, r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	46002000 	.word	0x46002000
 800575c:	56002000 	.word	0x56002000
 8005760:	40013000 	.word	0x40013000
 8005764:	50013000 	.word	0x50013000
 8005768:	40003800 	.word	0x40003800
 800576c:	50003800 	.word	0x50003800

08005770 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	3307      	adds	r3, #7
 800578e:	08db      	lsrs	r3, r3, #3
 8005790:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	fb02 f303 	mul.w	r3, r2, r3
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d12e      	bne.n	800581a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e028      	b.n	800581c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80057f6:	ea42 0103 	orr.w	r1, r2, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e000      	b.n	800581c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
  }
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e042      	b.n	80058c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fb fb15 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2224      	movs	r2, #36	; 0x24
 8005856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb64 	bl	8005f40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f9c9 	bl	8005c10 <UART_SetConfig>
 800587e:	4603      	mov	r3, r0
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e01b      	b.n	80058c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fbe3 	bl	8006084 <UART_CheckIdleState>
 80058be:	4603      	mov	r3, r0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e04a      	b.n	8005970 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fb fac5 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2224      	movs	r2, #36	; 0x24
 80058f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fb14 	bl	8005f40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f979 	bl	8005c10 <UART_SetConfig>
 800591e:	4603      	mov	r3, r0
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e023      	b.n	8005970 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005946:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0208 	orr.w	r2, r2, #8
 8005956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fb8b 	bl	8006084 <UART_CheckIdleState>
 800596e:	4603      	mov	r3, r0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	2b20      	cmp	r3, #32
 8005990:	d17b      	bne.n	8005a8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_UART_Transmit+0x26>
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e074      	b.n	8005a8c <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2221      	movs	r2, #33	; 0x21
 80059ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059b2:	f7fb fc0b 	bl	80011cc <HAL_GetTick>
 80059b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	88fa      	ldrh	r2, [r7, #6]
 80059bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	88fa      	ldrh	r2, [r7, #6]
 80059c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d0:	d108      	bne.n	80059e4 <HAL_UART_Transmit+0x6c>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d104      	bne.n	80059e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	e003      	b.n	80059ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059ec:	e030      	b.n	8005a50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fbed 	bl	80061d8 <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e03d      	b.n	8005a8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	3302      	adds	r3, #2
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e007      	b.n	8005a3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1c8      	bne.n	80059ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2200      	movs	r2, #0
 8005a64:	2140      	movs	r1, #64	; 0x40
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fbb6 	bl	80061d8 <UART_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e006      	b.n	8005a8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e000      	b.n	8005a8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b08f      	sub	sp, #60	; 0x3c
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_HalfDuplex_EnableTransmitter+0x16>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e042      	b.n	8005b30 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2224      	movs	r2, #36	; 0x24
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f023 030c 	bic.w	r3, r3, #12
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ada:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e6      	bne.n	8005aba <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f043 0308 	orr.w	r3, r3, #8
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	613b      	str	r3, [r7, #16]
   return(result);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e6      	bne.n	8005aec <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	373c      	adds	r7, #60	; 0x3c
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b08f      	sub	sp, #60	; 0x3c
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_HalfDuplex_EnableReceiver+0x16>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e042      	b.n	8005bd8 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2224      	movs	r2, #36	; 0x24
 8005b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f023 030c 	bic.w	r3, r3, #12
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b82:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e6      	bne.n	8005b62 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f043 0304 	orr.w	r3, r3, #4
 8005ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6979      	ldr	r1, [r7, #20]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e6      	bne.n	8005b94 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	373c      	adds	r7, #60	; 0x3c
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfa:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4313      	orrs	r3, r2
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c14:	b094      	sub	sp, #80	; 0x50
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b9b      	ldr	r3, [pc, #620]	; (8005e94 <UART_SetConfig+0x284>)
 8005c26:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4994      	ldr	r1, [pc, #592]	; (8005e98 <UART_SetConfig+0x288>)
 8005c48:	4019      	ands	r1, r3
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	68d9      	ldr	r1, [r3, #12]
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	ea40 0301 	orr.w	r3, r0, r1
 8005c6a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b87      	ldr	r3, [pc, #540]	; (8005e94 <UART_SetConfig+0x284>)
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d009      	beq.n	8005c90 <UART_SetConfig+0x80>
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b86      	ldr	r3, [pc, #536]	; (8005e9c <UART_SetConfig+0x28c>)
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d004      	beq.n	8005c90 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	6a1a      	ldr	r2, [r3, #32]
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005c9a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	f023 000f 	bic.w	r0, r3, #15
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	ea40 0301 	orr.w	r3, r0, r1
 8005cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	4b76      	ldr	r3, [pc, #472]	; (8005ea0 <UART_SetConfig+0x290>)
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d102      	bne.n	8005cd0 <UART_SetConfig+0xc0>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cce:	e021      	b.n	8005d14 <UART_SetConfig+0x104>
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4b73      	ldr	r3, [pc, #460]	; (8005ea4 <UART_SetConfig+0x294>)
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d102      	bne.n	8005ce0 <UART_SetConfig+0xd0>
 8005cda:	2304      	movs	r3, #4
 8005cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cde:	e019      	b.n	8005d14 <UART_SetConfig+0x104>
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b70      	ldr	r3, [pc, #448]	; (8005ea8 <UART_SetConfig+0x298>)
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d102      	bne.n	8005cf0 <UART_SetConfig+0xe0>
 8005cea:	2308      	movs	r3, #8
 8005cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cee:	e011      	b.n	8005d14 <UART_SetConfig+0x104>
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4b6d      	ldr	r3, [pc, #436]	; (8005eac <UART_SetConfig+0x29c>)
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d102      	bne.n	8005d00 <UART_SetConfig+0xf0>
 8005cfa:	2310      	movs	r3, #16
 8005cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cfe:	e009      	b.n	8005d14 <UART_SetConfig+0x104>
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <UART_SetConfig+0x284>)
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d102      	bne.n	8005d10 <UART_SetConfig+0x100>
 8005d0a:	2320      	movs	r3, #32
 8005d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d0e:	e001      	b.n	8005d14 <UART_SetConfig+0x104>
 8005d10:	2300      	movs	r3, #0
 8005d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b5e      	ldr	r3, [pc, #376]	; (8005e94 <UART_SetConfig+0x284>)
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d004      	beq.n	8005d28 <UART_SetConfig+0x118>
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b5e      	ldr	r3, [pc, #376]	; (8005e9c <UART_SetConfig+0x28c>)
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d172      	bne.n	8005e0e <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d34:	f7fe f9c2 	bl	80040bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005d38:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80e7 	beq.w	8005f10 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	4a5a      	ldr	r2, [pc, #360]	; (8005eb0 <UART_SetConfig+0x2a0>)
 8005d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d305      	bcc.n	8005d72 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d903      	bls.n	8005d7a <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005d78:	e048      	b.n	8005e0c <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	61fa      	str	r2, [r7, #28]
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	4a4a      	ldr	r2, [pc, #296]	; (8005eb0 <UART_SetConfig+0x2a0>)
 8005d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2200      	movs	r2, #0
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	617a      	str	r2, [r7, #20]
 8005d94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005d9c:	f7fa fa6c 	bl	8000278 <__aeabi_uldivmod>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4610      	mov	r0, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	020b      	lsls	r3, r1, #8
 8005db2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005db6:	0202      	lsls	r2, r0, #8
 8005db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dba:	6849      	ldr	r1, [r1, #4]
 8005dbc:	0849      	lsrs	r1, r1, #1
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	eb12 0804 	adds.w	r8, r2, r4
 8005dc8:	eb43 0905 	adc.w	r9, r3, r5
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	60bb      	str	r3, [r7, #8]
 8005dd4:	60fa      	str	r2, [r7, #12]
 8005dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dda:	4640      	mov	r0, r8
 8005ddc:	4649      	mov	r1, r9
 8005dde:	f7fa fa4b 	bl	8000278 <__aeabi_uldivmod>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4613      	mov	r3, r2
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df0:	d308      	bcc.n	8005e04 <UART_SetConfig+0x1f4>
 8005df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df8:	d204      	bcs.n	8005e04 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	e003      	b.n	8005e0c <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8005e0a:	e081      	b.n	8005f10 <UART_SetConfig+0x300>
 8005e0c:	e080      	b.n	8005f10 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e16:	d14d      	bne.n	8005eb4 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e24:	f7fe f94a 	bl	80040bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005e28:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d06f      	beq.n	8005f10 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <UART_SetConfig+0x2a0>)
 8005e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e42:	005a      	lsls	r2, r3, #1
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	441a      	add	r2, r3
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	2b0f      	cmp	r3, #15
 8005e5a:	d916      	bls.n	8005e8a <UART_SetConfig+0x27a>
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e62:	d212      	bcs.n	8005e8a <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f023 030f 	bic.w	r3, r3, #15
 8005e6c:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005e86:	60da      	str	r2, [r3, #12]
 8005e88:	e042      	b.n	8005f10 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e90:	e03e      	b.n	8005f10 <UART_SetConfig+0x300>
 8005e92:	bf00      	nop
 8005e94:	46002400 	.word	0x46002400
 8005e98:	cfff69f3 	.word	0xcfff69f3
 8005e9c:	56002400 	.word	0x56002400
 8005ea0:	40013800 	.word	0x40013800
 8005ea4:	40004800 	.word	0x40004800
 8005ea8:	40004c00 	.word	0x40004c00
 8005eac:	40005000 	.word	0x40005000
 8005eb0:	080068f4 	.word	0x080068f4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	469a      	mov	sl, r3
 8005eba:	4693      	mov	fp, r2
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	f7fe f8fc 	bl	80040bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005ec4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8005ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d021      	beq.n	8005f10 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <UART_SetConfig+0x32c>)
 8005ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eda:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	441a      	add	r2, r3
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef2:	2b0f      	cmp	r3, #15
 8005ef4:	d909      	bls.n	8005f0a <UART_SetConfig+0x2fa>
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	d205      	bcs.n	8005f0a <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60da      	str	r2, [r3, #12]
 8005f08:	e002      	b.n	8005f10 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	2201      	movs	r2, #1
 8005f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	2200      	movs	r2, #0
 8005f24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	2200      	movs	r2, #0
 8005f2a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3750      	adds	r7, #80	; 0x50
 8005f34:	46bd      	mov	sp, r7
 8005f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3a:	bf00      	nop
 8005f3c:	080068f4 	.word	0x080068f4

08005f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01a      	beq.n	8006056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800603e:	d10a      	bne.n	8006056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	605a      	str	r2, [r3, #4]
  }
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b098      	sub	sp, #96	; 0x60
 8006088:	af02      	add	r7, sp, #8
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006094:	f7fb f89a 	bl	80011cc <HAL_GetTick>
 8006098:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d12f      	bne.n	8006108 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b0:	2200      	movs	r2, #0
 80060b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f88e 	bl	80061d8 <UART_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d022      	beq.n	8006108 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d6:	653b      	str	r3, [r7, #80]	; 0x50
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e0:	647b      	str	r3, [r7, #68]	; 0x44
 80060e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e6      	bne.n	80060c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e063      	b.n	80061d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b04      	cmp	r3, #4
 8006114:	d149      	bne.n	80061aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006116:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611e:	2200      	movs	r2, #0
 8006120:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f857 	bl	80061d8 <UART_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d03c      	beq.n	80061aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	623b      	str	r3, [r7, #32]
   return(result);
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614e:	633b      	str	r3, [r7, #48]	; 0x30
 8006150:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e6      	bne.n	8006130 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	60fb      	str	r3, [r7, #12]
   return(result);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	64bb      	str	r3, [r7, #72]	; 0x48
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3308      	adds	r3, #8
 8006180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006182:	61fa      	str	r2, [r7, #28]
 8006184:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	69b9      	ldr	r1, [r7, #24]
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	617b      	str	r3, [r7, #20]
   return(result);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e012      	b.n	80061d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3758      	adds	r7, #88	; 0x58
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e8:	e049      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d045      	beq.n	800627e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f2:	f7fa ffeb 	bl	80011cc <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <UART_WaitOnFlagUntilTimeout+0x30>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e048      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b00      	cmp	r3, #0
 8006218:	d031      	beq.n	800627e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b08      	cmp	r3, #8
 8006226:	d110      	bne.n	800624a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2208      	movs	r2, #8
 800622e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f838 	bl	80062a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2208      	movs	r2, #8
 800623a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e029      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006258:	d111      	bne.n	800627e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f81e 	bl	80062a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e00f      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4013      	ands	r3, r2
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	429a      	cmp	r2, r3
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	429a      	cmp	r2, r3
 800629a:	d0a6      	beq.n	80061ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b095      	sub	sp, #84	; 0x54
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	643b      	str	r3, [r7, #64]	; 0x40
 80062ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e6      	bne.n	80062ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3308      	adds	r3, #8
 80062e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800630a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e3      	bne.n	80062e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631c:	2b01      	cmp	r3, #1
 800631e:	d118      	bne.n	8006352 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	60bb      	str	r3, [r7, #8]
   return(result);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f023 0310 	bic.w	r3, r3, #16
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6979      	ldr	r1, [r7, #20]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	613b      	str	r3, [r7, #16]
   return(result);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e6      	bne.n	8006320 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006366:	bf00      	nop
 8006368:	3754      	adds	r7, #84	; 0x54
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_UARTEx_DisableFifoMode+0x16>
 8006384:	2302      	movs	r3, #2
 8006386:	e027      	b.n	80063d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2224      	movs	r2, #36	; 0x24
 8006394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e02d      	b.n	8006458 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f84f 	bl	80064dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e02d      	b.n	80064d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2224      	movs	r2, #36	; 0x24
 8006484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0201 	bic.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f811 	bl	80064dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d108      	bne.n	80064fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064fc:	e031      	b.n	8006562 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064fe:	2308      	movs	r3, #8
 8006500:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006502:	2308      	movs	r3, #8
 8006504:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	0e5b      	lsrs	r3, r3, #25
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	0f5b      	lsrs	r3, r3, #29
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	7b3a      	ldrb	r2, [r7, #12]
 800652a:	4911      	ldr	r1, [pc, #68]	; (8006570 <UARTEx_SetNbDataToProcess+0x94>)
 800652c:	5c8a      	ldrb	r2, [r1, r2]
 800652e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006532:	7b3a      	ldrb	r2, [r7, #12]
 8006534:	490f      	ldr	r1, [pc, #60]	; (8006574 <UARTEx_SetNbDataToProcess+0x98>)
 8006536:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006538:	fb93 f3f2 	sdiv	r3, r3, r2
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	7b7a      	ldrb	r2, [r7, #13]
 8006548:	4909      	ldr	r1, [pc, #36]	; (8006570 <UARTEx_SetNbDataToProcess+0x94>)
 800654a:	5c8a      	ldrb	r2, [r1, r2]
 800654c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006550:	7b7a      	ldrb	r2, [r7, #13]
 8006552:	4908      	ldr	r1, [pc, #32]	; (8006574 <UARTEx_SetNbDataToProcess+0x98>)
 8006554:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006556:	fb93 f3f2 	sdiv	r3, r3, r2
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	0800690c 	.word	0x0800690c
 8006574:	08006914 	.word	0x08006914

08006578 <memset>:
 8006578:	4402      	add	r2, r0
 800657a:	4603      	mov	r3, r0
 800657c:	4293      	cmp	r3, r2
 800657e:	d100      	bne.n	8006582 <memset+0xa>
 8006580:	4770      	bx	lr
 8006582:	f803 1b01 	strb.w	r1, [r3], #1
 8006586:	e7f9      	b.n	800657c <memset+0x4>

08006588 <__libc_init_array>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0d      	ldr	r5, [pc, #52]	; (80065c0 <__libc_init_array+0x38>)
 800658c:	2600      	movs	r6, #0
 800658e:	4c0d      	ldr	r4, [pc, #52]	; (80065c4 <__libc_init_array+0x3c>)
 8006590:	1b64      	subs	r4, r4, r5
 8006592:	10a4      	asrs	r4, r4, #2
 8006594:	42a6      	cmp	r6, r4
 8006596:	d109      	bne.n	80065ac <__libc_init_array+0x24>
 8006598:	4d0b      	ldr	r5, [pc, #44]	; (80065c8 <__libc_init_array+0x40>)
 800659a:	2600      	movs	r6, #0
 800659c:	4c0b      	ldr	r4, [pc, #44]	; (80065cc <__libc_init_array+0x44>)
 800659e:	f000 f825 	bl	80065ec <_init>
 80065a2:	1b64      	subs	r4, r4, r5
 80065a4:	10a4      	asrs	r4, r4, #2
 80065a6:	42a6      	cmp	r6, r4
 80065a8:	d105      	bne.n	80065b6 <__libc_init_array+0x2e>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b0:	3601      	adds	r6, #1
 80065b2:	4798      	blx	r3
 80065b4:	e7ee      	b.n	8006594 <__libc_init_array+0xc>
 80065b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ba:	3601      	adds	r6, #1
 80065bc:	4798      	blx	r3
 80065be:	e7f2      	b.n	80065a6 <__libc_init_array+0x1e>
 80065c0:	08006924 	.word	0x08006924
 80065c4:	08006924 	.word	0x08006924
 80065c8:	08006924 	.word	0x08006924
 80065cc:	08006928 	.word	0x08006928

080065d0 <memcpy>:
 80065d0:	440a      	add	r2, r1
 80065d2:	1e43      	subs	r3, r0, #1
 80065d4:	4291      	cmp	r1, r2
 80065d6:	d100      	bne.n	80065da <memcpy+0xa>
 80065d8:	4770      	bx	lr
 80065da:	b510      	push	{r4, lr}
 80065dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e0:	4291      	cmp	r1, r2
 80065e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e6:	d1f9      	bne.n	80065dc <memcpy+0xc>
 80065e8:	bd10      	pop	{r4, pc}
	...

080065ec <_init>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	bf00      	nop
 80065f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f2:	bc08      	pop	{r3}
 80065f4:	469e      	mov	lr, r3
 80065f6:	4770      	bx	lr

080065f8 <_fini>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	bf00      	nop
 80065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fe:	bc08      	pop	{r3}
 8006600:	469e      	mov	lr, r3
 8006602:	4770      	bx	lr
