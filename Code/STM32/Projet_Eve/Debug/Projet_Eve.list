
Projet_Eve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bfc  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009278  08009278  00019278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800927c  0800927c  0001927c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08009280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000348  2000000c  08009289  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000354  08009289  00020354  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001bad6  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000035d8  00000000  00000000  0003bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015a0  00000000  00000000  0003f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f4db  00000000  00000000  000406d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dc66  00000000  00000000  0006fbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00126d48  00000000  00000000  0008d811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ac  00000000  00000000  001b4559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005be0  00000000  00000000  001b5608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001bb1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08008e1c 	.word	0x08008e1c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08008e1c 	.word	0x08008e1c

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	; 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2iz>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d215      	bcs.n	8000a4a <__aeabi_d2iz+0x36>
 8000a1e:	d511      	bpl.n	8000a44 <__aeabi_d2iz+0x30>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d912      	bls.n	8000a50 <__aeabi_d2iz+0x3c>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3e:	bf18      	it	ne
 8000a40:	4240      	negne	r0, r0
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_d2iz+0x48>
 8000a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	bf08      	it	eq
 8000a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 b982 	b.w	8000d80 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	460f      	mov	r7, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d146      	bne.n	8000b32 <__udivmoddi4+0x9e>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	d95e      	bls.n	8000b68 <__udivmoddi4+0xd4>
 8000aaa:	fab2 f382 	clz	r3, r2
 8000aae:	b143      	cbz	r3, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab4:	f1c3 0220 	rsb	r2, r3, #32
 8000ab8:	409f      	lsls	r7, r3
 8000aba:	409c      	lsls	r4, r3
 8000abc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac0:	4317      	orrs	r7, r2
 8000ac2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ac6:	fa1f f58c 	uxth.w	r5, ip
 8000aca:	0c22      	lsrs	r2, r4, #16
 8000acc:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ad4:	fb01 f005 	mul.w	r0, r1, r5
 8000ad8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000adc:	4290      	cmp	r0, r2
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x5e>
 8000ae0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x5c>
 8000aea:	4290      	cmp	r0, r2
 8000aec:	f200 8134 	bhi.w	8000d58 <__udivmoddi4+0x2c4>
 8000af0:	4639      	mov	r1, r7
 8000af2:	1a12      	subs	r2, r2, r0
 8000af4:	b2a4      	uxth	r4, r4
 8000af6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000afa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b06:	42a5      	cmp	r5, r4
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x88>
 8000b0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x86>
 8000b14:	42a5      	cmp	r5, r4
 8000b16:	f200 8119 	bhi.w	8000d4c <__udivmoddi4+0x2b8>
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0x9a>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xb4>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80fc 	beq.w	8000d34 <__udivmoddi4+0x2a0>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d14c      	bne.n	8000bea <__udivmoddi4+0x156>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	f0c0 80f2 	bcc.w	8000d3a <__udivmoddi4+0x2a6>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f240 80ef 	bls.w	8000d3a <__udivmoddi4+0x2a6>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0x9a>
 8000b62:	e9c6 4700 	strd	r4, r7, [r6]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xd8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f382 	clz	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f040 809f 	bne.w	8000cb4 <__udivmoddi4+0x220>
 8000b76:	1a8a      	subs	r2, r1, r2
 8000b78:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7c:	fa1f f78c 	uxth.w	r7, ip
 8000b80:	2101      	movs	r1, #1
 8000b82:	fbb2 f5fe 	udiv	r5, r2, lr
 8000b86:	fb0e 2015 	mls	r0, lr, r5, r2
 8000b8a:	0c22      	lsrs	r2, r4, #16
 8000b8c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b90:	fb07 f005 	mul.w	r0, r7, r5
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d90f      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000b98:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ba0:	bf2c      	ite	cs
 8000ba2:	f04f 0901 	movcs.w	r9, #1
 8000ba6:	f04f 0900 	movcc.w	r9, #0
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d903      	bls.n	8000bb6 <__udivmoddi4+0x122>
 8000bae:	f1b9 0f00 	cmp.w	r9, #0
 8000bb2:	f000 80ce 	beq.w	8000d52 <__udivmoddi4+0x2be>
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	1a12      	subs	r2, r2, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc0:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bc4:	fb00 f707 	mul.w	r7, r0, r7
 8000bc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x14e>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x14c>
 8000bda:	42a7      	cmp	r7, r4
 8000bdc:	f200 80b3 	bhi.w	8000d46 <__udivmoddi4+0x2b2>
 8000be0:	4610      	mov	r0, r2
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be8:	e79c      	b.n	8000b24 <__udivmoddi4+0x90>
 8000bea:	f1c1 0420 	rsb	r4, r1, #32
 8000bee:	408b      	lsls	r3, r1
 8000bf0:	fa05 fc01 	lsl.w	ip, r5, r1
 8000bf4:	fa22 f704 	lsr.w	r7, r2, r4
 8000bf8:	40e5      	lsrs	r5, r4
 8000bfa:	408a      	lsls	r2, r1
 8000bfc:	431f      	orrs	r7, r3
 8000bfe:	fa20 f304 	lsr.w	r3, r0, r4
 8000c02:	4088      	lsls	r0, r1
 8000c04:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c08:	ea43 030c 	orr.w	r3, r3, ip
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c14:	fbb5 fef8 	udiv	lr, r5, r8
 8000c18:	fb08 551e 	mls	r5, r8, lr, r5
 8000c1c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a9      	cmp	r9, r5
 8000c26:	d90e      	bls.n	8000c46 <__udivmoddi4+0x1b2>
 8000c28:	197d      	adds	r5, r7, r5
 8000c2a:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000c2e:	bf2c      	ite	cs
 8000c30:	f04f 0b01 	movcs.w	fp, #1
 8000c34:	f04f 0b00 	movcc.w	fp, #0
 8000c38:	45a9      	cmp	r9, r5
 8000c3a:	d903      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c3c:	f1bb 0f00 	cmp.w	fp, #0
 8000c40:	f000 808d 	beq.w	8000d5e <__udivmoddi4+0x2ca>
 8000c44:	46d6      	mov	lr, sl
 8000c46:	eba5 0509 	sub.w	r5, r5, r9
 8000c4a:	fa1f f983 	uxth.w	r9, r3
 8000c4e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000c52:	fb08 5513 	mls	r5, r8, r3, r5
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000c5e:	45ac      	cmp	ip, r5
 8000c60:	d906      	bls.n	8000c70 <__udivmoddi4+0x1dc>
 8000c62:	197d      	adds	r5, r7, r5
 8000c64:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c68:	d201      	bcs.n	8000c6e <__udivmoddi4+0x1da>
 8000c6a:	45ac      	cmp	ip, r5
 8000c6c:	d87e      	bhi.n	8000d6c <__udivmoddi4+0x2d8>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c74:	eba5 050c 	sub.w	r5, r5, ip
 8000c78:	fba3 9802 	umull	r9, r8, r3, r2
 8000c7c:	4545      	cmp	r5, r8
 8000c7e:	46ce      	mov	lr, r9
 8000c80:	46c4      	mov	ip, r8
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0x1f6>
 8000c84:	d106      	bne.n	8000c94 <__udivmoddi4+0x200>
 8000c86:	4548      	cmp	r0, r9
 8000c88:	d204      	bcs.n	8000c94 <__udivmoddi4+0x200>
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c90:	eb68 0c07 	sbc.w	ip, r8, r7
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d06f      	beq.n	8000d78 <__udivmoddi4+0x2e4>
 8000c98:	ebb0 020e 	subs.w	r2, r0, lr
 8000c9c:	eb65 050c 	sbc.w	r5, r5, ip
 8000ca0:	40ca      	lsrs	r2, r1
 8000ca2:	fa05 f404 	lsl.w	r4, r5, r4
 8000ca6:	40cd      	lsrs	r5, r1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	4314      	orrs	r4, r2
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 4500 	strd	r4, r5, [r6]
 8000cb2:	e73c      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	4099      	lsls	r1, r3
 8000cbe:	409c      	lsls	r4, r3
 8000cc0:	40d5      	lsrs	r5, r2
 8000cc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cca:	fa1f f78c 	uxth.w	r7, ip
 8000cce:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cde:	fb00 f507 	mul.w	r5, r0, r7
 8000ce2:	428d      	cmp	r5, r1
 8000ce4:	d90e      	bls.n	8000d04 <__udivmoddi4+0x270>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	428d      	cmp	r5, r1
 8000cfa:	d902      	bls.n	8000d02 <__udivmoddi4+0x26e>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	d031      	beq.n	8000d66 <__udivmoddi4+0x2d2>
 8000d02:	4640      	mov	r0, r8
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5fe 	udiv	r5, r1, lr
 8000d0c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f107 	mul.w	r1, r5, r7
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x298>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d24:	d201      	bcs.n	8000d2a <__udivmoddi4+0x296>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d823      	bhi.n	8000d72 <__udivmoddi4+0x2de>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a52      	subs	r2, r2, r1
 8000d2e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d32:	e726      	b.n	8000b82 <__udivmoddi4+0xee>
 8000d34:	4631      	mov	r1, r6
 8000d36:	4630      	mov	r0, r6
 8000d38:	e6f9      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000d3a:	1a84      	subs	r4, r0, r2
 8000d3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d40:	2001      	movs	r0, #1
 8000d42:	4617      	mov	r7, r2
 8000d44:	e70b      	b.n	8000b5e <__udivmoddi4+0xca>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e74a      	b.n	8000be2 <__udivmoddi4+0x14e>
 8000d4c:	4464      	add	r4, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	e6e4      	b.n	8000b1c <__udivmoddi4+0x88>
 8000d52:	3d02      	subs	r5, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d58:	3902      	subs	r1, #2
 8000d5a:	4462      	add	r2, ip
 8000d5c:	e6c9      	b.n	8000af2 <__udivmoddi4+0x5e>
 8000d5e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d62:	443d      	add	r5, r7
 8000d64:	e76f      	b.n	8000c46 <__udivmoddi4+0x1b2>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	e7cb      	b.n	8000d04 <__udivmoddi4+0x270>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	443d      	add	r5, r7
 8000d70:	e77e      	b.n	8000c70 <__udivmoddi4+0x1dc>
 8000d72:	3d02      	subs	r5, #2
 8000d74:	4462      	add	r2, ip
 8000d76:	e7d9      	b.n	8000d2c <__udivmoddi4+0x298>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e6d7      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, size_t data_blk_size)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d90:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000d94:	6019      	str	r1, [r3, #0]
 8000d96:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d9a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000da4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000da8:	4602      	mov	r2, r0
 8000daa:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000dac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000db0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <dyn2_crc+0xd4>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	4611      	mov	r1, r2
 8000dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f008 f81e 	bl	8008e00 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000dca:	e031      	b.n	8000e30 <dyn2_crc+0xac>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000dcc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dd0:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000dde:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8000de2:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000de6:	6809      	ldr	r1, [r1, #0]
 8000de8:	440b      	add	r3, r1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4053      	eors	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000df8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dfc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	f8b7 1214 	ldrh.w	r1, [r7, #532]	; 0x214
 8000e0a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e12:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4053      	eors	r3, r2
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e20:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e24:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8000e26:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000e30:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000e34:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000e38:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d8c4      	bhi.n	8000dcc <dyn2_crc+0x48>
	}
	return crc_accum;
 8000e42:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e46:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e4a:	881b      	ldrh	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08008e34 	.word	0x08008e34

08000e5c <dyn2_append_crc>:
uint8_t* dyn2_append_crc(uint8_t* instruction,uint16_t bufferSize){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
		return NULL;
	}

	memcpy(instruction_sent, instruction, bufferSize);
	*/
	unsigned short crc = dyn2_crc(0, instruction, bufferSize - 2);
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff ff87 	bl	8000d84 <dyn2_crc>
 8000e76:	4603      	mov	r3, r0
 8000e78:	81fb      	strh	r3, [r7, #14]
	unsigned char crc_l = crc & 0x00FF;
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	737b      	strb	r3, [r7, #13]
	unsigned char crc_h = (crc >> 8) & 0x00FF;
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	733b      	strb	r3, [r7, #12]

	instruction[bufferSize - 2] = crc_l;
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	7b7a      	ldrb	r2, [r7, #13]
 8000e90:	701a      	strb	r2, [r3, #0]
	instruction[bufferSize - 1] = crc_h;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	7b3a      	ldrb	r2, [r7, #12]
 8000e9c:	701a      	strb	r2, [r3, #0]

	return instruction;
 8000e9e:	687b      	ldr	r3, [r7, #4]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <dyn2_send>:
	// Send the string through UART
	HAL_UART_Transmit(&huart4, (uint8_t*)arrayString, strlen(arrayString), HAL_MAX_DELAY);
}

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
int dyn2_send(uint8_t* buffer,uint16_t size){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]

	//dyn2_debug_sendArrayAsString(buffer_crc, size); // for debuging purposes

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <dyn2_send+0x3c>)
 8000eb6:	f007 fa05 	bl	80082c4 <HAL_HalfDuplex_EnableTransmitter>

	HAL_UART_Transmit(&huart1, buffer, size, TIMEOUT);
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <dyn2_send+0x3c>)
 8000ec2:	f007 f971 	bl	80081a8 <HAL_UART_Transmit>
	// Wait until UART transmission is complete
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000ec6:	bf00      	nop
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <dyn2_send+0x3c>)
 8000eca:	f007 faa3 	bl	8008414 <HAL_UART_GetState>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b20      	cmp	r3, #32
 8000ed2:	d1f9      	bne.n	8000ec8 <dyn2_send+0x20>
	HAL_HalfDuplex_EnableReceiver(&huart1);
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <dyn2_send+0x3c>)
 8000ed6:	f007 fa49 	bl	800836c <HAL_HalfDuplex_EnableReceiver>

	return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200002bc 	.word	0x200002bc

08000ee8 <dyn2_torque>:

	return 0;
}

// TORQUE_ON => writing in EEPROM is IMPOSSIBLE and the motor can rotate, TORQUE_OFF =>
int dyn2_torque(uint8_t ID,int mode){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
	uint8_t DYN2_TORQUE[13];
	// HEADER
	DYN2_TORQUE[0] = HEADER_1;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <dyn2_torque+0x8c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	723b      	strb	r3, [r7, #8]
	DYN2_TORQUE[1] = HEADER_2;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <dyn2_torque+0x90>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	727b      	strb	r3, [r7, #9]
	DYN2_TORQUE[2] = HEADER_3;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <dyn2_torque+0x94>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	72bb      	strb	r3, [r7, #10]
	DYN2_TORQUE[3] = HEADER_4;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <dyn2_torque+0x98>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	72fb      	strb	r3, [r7, #11]
	// ID
	DYN2_TORQUE[4]= ID;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	733b      	strb	r3, [r7, #12]
	// LENGTH
	DYN2_TORQUE[5]= NbOfElements(DYN2_TORQUE)- 7; // tkt ca marche
 8000f10:	2306      	movs	r3, #6
 8000f12:	737b      	strb	r3, [r7, #13]
	DYN2_TORQUE[6]= 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73bb      	strb	r3, [r7, #14]
	// INSTRUCTION
	DYN2_TORQUE[7]= WRITE;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <dyn2_torque+0x9c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	73fb      	strb	r3, [r7, #15]
	// PARAMETERS
	// ADDRRESS
	DYN2_TORQUE[8]= ADDRESS_TORQUE;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <dyn2_torque+0xa0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	743b      	strb	r3, [r7, #16]
	DYN2_TORQUE[9]= 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	747b      	strb	r3, [r7, #17]
	// VALUE
	switch(mode){
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <dyn2_torque+0x4e>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d004      	beq.n	8000f3e <dyn2_torque+0x56>
 8000f34:	e007      	b.n	8000f46 <dyn2_torque+0x5e>
	case 0:
		DYN2_TORQUE[10]=TORQUE_OFF;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <dyn2_torque+0xa4>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	74bb      	strb	r3, [r7, #18]
		break;
 8000f3c:	e006      	b.n	8000f4c <dyn2_torque+0x64>
	case 1:
		DYN2_TORQUE[10]=TORQUE_ON;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <dyn2_torque+0xa8>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	74bb      	strb	r3, [r7, #18]
		break;
 8000f44:	e002      	b.n	8000f4c <dyn2_torque+0x64>
	default :
		return ERROR_TORQUE_VALUE;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <dyn2_torque+0xac>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	e00f      	b.n	8000f6c <dyn2_torque+0x84>
	}

	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_TORQUE);
 8000f4c:	230d      	movs	r3, #13
 8000f4e:	83fb      	strh	r3, [r7, #30]
	uint8_t* DYN2_TORQUE_CRC = dyn2_append_crc(DYN2_TORQUE,size);
 8000f50:	8bfa      	ldrh	r2, [r7, #30]
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff7f 	bl	8000e5c <dyn2_append_crc>
 8000f5e:	61b8      	str	r0, [r7, #24]

	dyn2_send(DYN2_TORQUE_CRC,size);
 8000f60:	8bfb      	ldrh	r3, [r7, #30]
 8000f62:	4619      	mov	r1, r3
 8000f64:	69b8      	ldr	r0, [r7, #24]
 8000f66:	f7ff ff9f 	bl	8000ea8 <dyn2_send>
	return 0;
 8000f6a:	2300      	movs	r3, #0

}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08009062 	.word	0x08009062
 8000f78:	08009063 	.word	0x08009063
 8000f7c:	08009064 	.word	0x08009064
 8000f80:	08009065 	.word	0x08009065
 8000f84:	08009061 	.word	0x08009061
 8000f88:	08009066 	.word	0x08009066
 8000f8c:	0800906d 	.word	0x0800906d
 8000f90:	0800906c 	.word	0x0800906c
 8000f94:	08009068 	.word	0x08009068

08000f98 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	4b47      	ldr	r3, [pc, #284]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb4:	4a45      	ldr	r2, [pc, #276]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fbe:	4b43      	ldr	r3, [pc, #268]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fcc:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_GPIO_Init+0x134>)
 8000fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ff0:	4a36      	ldr	r2, [pc, #216]	; (80010cc <MX_GPIO_Init+0x134>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <MX_GPIO_Init+0x134>)
 8000ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <MX_GPIO_Init+0x134>)
 800100a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800100e:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <MX_GPIO_Init+0x134>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <MX_GPIO_Init+0x134>)
 800101a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_CSN1_Pin|GPIO_CSN1C7_Pin|GPIO_CSN1C8_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800102c:	4828      	ldr	r0, [pc, #160]	; (80010d0 <MX_GPIO_Init+0x138>)
 800102e:	f001 fb0d 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001038:	4826      	ldr	r0, [pc, #152]	; (80010d4 <MX_GPIO_Init+0x13c>)
 800103a:	f001 fb07 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FDC_1_Pin|FDC_4_Pin|FDC_5_Pin|FDC_2_Pin;
 800103e:	23f0      	movs	r3, #240	; 0xf0
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4820      	ldr	r0, [pc, #128]	; (80010d4 <MX_GPIO_Init+0x13c>)
 8001052:	f001 f90b 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = FDC_3_Pin|FDC_8_Pin|USR_BTN_2_Pin|USR_BTN_3_Pin
 8001056:	f641 4330 	movw	r3, #7216	; 0x1c30
 800105a:	617b      	str	r3, [r7, #20]
                          |USR_BTN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4819      	ldr	r0, [pc, #100]	; (80010d0 <MX_GPIO_Init+0x138>)
 800106c:	f001 f8fe 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FDC_7_Pin|FDC_6_Pin;
 8001070:	2303      	movs	r3, #3
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4815      	ldr	r0, [pc, #84]	; (80010d8 <MX_GPIO_Init+0x140>)
 8001084:	f001 f8f2 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_CSN1_Pin|GPIO_CSN1C7_Pin|GPIO_CSN1C8_Pin;
 8001088:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <MX_GPIO_Init+0x138>)
 80010a2:	f001 f8e3 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin;
 80010a6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_GPIO_Init+0x13c>)
 80010c0:	f001 f8d4 	bl	800226c <HAL_GPIO_Init>

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	46020c00 	.word	0x46020c00
 80010d0:	42020800 	.word	0x42020800
 80010d4:	42020000 	.word	0x42020000
 80010d8:	42020400 	.word	0x42020400

080010dc <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 facb 	bl	800267c <HAL_ICACHE_ConfigAssociativityMode>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80010ec:	f000 f893 	bl	8001216 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80010f0:	f001 fae4 	bl	80026bc <HAL_ICACHE_Enable>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80010fa:	f000 f88c 	bl	8001216 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110a:	f000 ff23 	bl	8001f54 <HAL_Init>
  Stepper stepper1;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110e:	f000 f839 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001112:	f7ff ff41 	bl	8000f98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001116:	f000 fda1 	bl	8001c5c <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 800111a:	f7ff ffdf 	bl	80010dc <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 800111e:	f000 fd07 	bl	8001b30 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8001122:	f000 fd4f 	bl	8001bc4 <MX_UART4_Init>
  MX_SPI2_Init();
 8001126:	f000 f87b 	bl	8001220 <MX_SPI2_Init>
  MX_TIM2_Init();
 800112a:	f000 f9fd 	bl	8001528 <MX_TIM2_Init>
  MX_TIM3_Init();
 800112e:	f000 fa47 	bl	80015c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //lucas
  uint8_t ID = 0x01;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
  dyn2_torque(ID,TORQUE_ON);
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <main+0x70>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fed1 	bl	8000ee8 <dyn2_torque>

  int order = 20;
 8001146:	2314      	movs	r3, #20
 8001148:	613b      	str	r3, [r7, #16]
  tmc2590_Init(&htmc2590, &hspi2, GPIO_CSN1_GPIO_Port, GPIO_CSN1_Pin, FDC_3_GPIO_Port, FDC_3_Pin);
 800114a:	2310      	movs	r3, #16
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <main+0x74>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2340      	movs	r3, #64	; 0x40
 8001154:	4a08      	ldr	r2, [pc, #32]	; (8001178 <main+0x74>)
 8001156:	4909      	ldr	r1, [pc, #36]	; (800117c <main+0x78>)
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <main+0x7c>)
 800115a:	f000 fb09 	bl	8001770 <tmc2590_Init>

  //fonction d'init


  stepper_Init(&stepper1);
 800115e:	463b      	mov	r3, r7
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f937 	bl	80013d4 <stepper_Init>
  HAL_Delay(1000);
 8001166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116a:	f000 ff77 	bl	800205c <HAL_Delay>
  stepper1.angularPositionMax = 180;
 800116e:	23b4      	movs	r3, #180	; 0xb4
 8001170:	60fb      	str	r3, [r7, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001172:	e7fe      	b.n	8001172 <main+0x6e>
 8001174:	0800906c 	.word	0x0800906c
 8001178:	42020800 	.word	0x42020800
 800117c:	20000028 	.word	0x20000028
 8001180:	20000150 	.word	0x20000150

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09e      	sub	sp, #120	; 0x78
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2260      	movs	r2, #96	; 0x60
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f007 fe08 	bl	8008da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
 80011a6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 fa97 	bl	80026dc <HAL_PWREx_ControlVoltageScaling>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011b4:	f000 f82f 	bl	8001216 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011b8:	2310      	movs	r3, #16
 80011ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011bc:	2301      	movs	r3, #1
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011c0:	2310      	movs	r3, #16
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 fb0e 	bl	80027f4 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80011de:	f000 f81a 	bl	8001216 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	231f      	movs	r3, #31
 80011e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 f9d4 	bl	80035ac <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800120a:	f000 f804 	bl	8001216 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3778      	adds	r7, #120	; 0x78
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121a:	b672      	cpsid	i
}
 800121c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121e:	e7fe      	b.n	800121e <Error_Handler+0x8>

08001220 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001232:	4a32      	ldr	r2, [pc, #200]	; (80012fc <MX_SPI2_Init+0xdc>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001238:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800123c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001246:	2207      	movs	r2, #7
 8001248:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_SPI2_Init+0xd8>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001258:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800125c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001260:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001264:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_SPI2_Init+0xd8>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_SPI2_Init+0xd8>)
 800127a:	2207      	movs	r2, #7
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001280:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001284:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001288:	2200      	movs	r2, #0
 800128a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_SPI2_Init+0xd8>)
 800128e:	2200      	movs	r2, #0
 8001290:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_SPI2_Init+0xd8>)
 8001294:	2200      	movs	r2, #0
 8001296:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_SPI2_Init+0xd8>)
 800129a:	2200      	movs	r2, #0
 800129c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_SPI2_Init+0xd8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_SPI2_Init+0xd8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_SPI2_Init+0xd8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_SPI2_Init+0xd8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_SPI2_Init+0xd8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012bc:	480e      	ldr	r0, [pc, #56]	; (80012f8 <MX_SPI2_Init+0xd8>)
 80012be:	f005 f8b9 	bl	8006434 <HAL_SPI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 80012c8:	f7ff ffa5 	bl	8001216 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80012d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012d4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_SPI2_Init+0xd8>)
 80012e0:	f005 fce5 	bl	8006cae <HAL_SPIEx_SetConfigAutonomousMode>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 80012ea:	f7ff ff94 	bl	8001216 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000028 	.word	0x20000028
 80012fc:	40003800 	.word	0x40003800

08001300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0b8      	sub	sp, #224	; 0xe0
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	22b8      	movs	r2, #184	; 0xb8
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f007 fd41 	bl	8008da8 <memset>
  if(spiHandle->Instance==SPI2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <HAL_SPI_MspInit+0xc8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d147      	bne.n	80013c0 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 800133c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001340:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fcff 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001354:	f7ff ff5f 	bl	8001216 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_SPI_MspInit+0xcc>)
 800135a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800135e:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_SPI_MspInit+0xcc>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_SPI_MspInit+0xcc>)
 800136a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_SPI_MspInit+0xcc>)
 8001378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_SPI_MspInit+0xcc>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_SPI_MspInit+0xcc>)
 8001388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001394:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ae:	2305      	movs	r3, #5
 80013b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <HAL_SPI_MspInit+0xd0>)
 80013bc:	f000 ff56 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	37e0      	adds	r7, #224	; 0xe0
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40003800 	.word	0x40003800
 80013cc:	46020c00 	.word	0x46020c00
 80013d0:	42020400 	.word	0x42020400

080013d4 <stepper_Init>:

#include "stepper.h"



void stepper_Init(Stepper * stepper){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

	//char message[20]; 		// we create a tab to stock caracters

	int inputOrder = 10; // 10 degrees for each iteration
 80013dc:	230a      	movs	r3, #10
 80013de:	60fb      	str	r3, [r7, #12]
	//int polarity = (inputOrder > 0);

	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) { // sensor not activate
 80013e0:	e007      	b.n	80013f2 <stepper_Init+0x1e>
		sendOrderStepper( inputOrder, stepper);
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 fa97 	bl	8001918 <sendOrderStepper>
		HAL_Delay(1000);
 80013ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ee:	f000 fe35 	bl	800205c <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) { // sensor not activate
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <stepper_Init+0x50>)
 80013f6:	f001 f911 	bl	800261c <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <stepper_Init+0xe>
	    }

	stepper->angularPosition = 0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]

	HAL_Delay(3000);
 8001406:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800140a:	f000 fe27 	bl	800205c <HAL_Delay>
	sprintf(message, "%d \r\n", position_init);
	HAL_UART_Transmit(&huart2, (uint8_t *)message ,strlen(message) , 1000);
	HAL_Delay(1000);
	*/

	HAL_UART_Transmit(&huart4, (uint8_t *)"test 1\r\n", strlen("test 1\r\n"), HAL_MAX_DELAY);
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001412:	2208      	movs	r2, #8
 8001414:	4904      	ldr	r1, [pc, #16]	; (8001428 <stepper_Init+0x54>)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <stepper_Init+0x58>)
 8001418:	f006 fec6 	bl	80081a8 <HAL_UART_Transmit>

	return;
 800141c:	bf00      	nop

	//il faut faire en sorte de changer la polarité

}
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	42020400 	.word	0x42020400
 8001428:	08009058 	.word	0x08009058
 800142c:	20000228 	.word	0x20000228

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_MspInit+0x30>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_MspInit+0x30>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x30>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	46020c00 	.word	0x46020c00

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 fdb4 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <SystemInit+0x68>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <SystemInit+0x68>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <SystemInit+0x6c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <SystemInit+0x6c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <SystemInit+0x6c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <SystemInit+0x6c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <SystemInit+0x6c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <SystemInit+0x6c>)
 80014ea:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014ee:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <SystemInit+0x6c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <SystemInit+0x6c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <SystemInit+0x6c>)
 8001500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001504:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <SystemInit+0x6c>)
 8001508:	2200      	movs	r2, #0
 800150a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SystemInit+0x68>)
 800150e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001512:	609a      	str	r2, [r3, #8]
  #endif
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	46020c00 	.word	0x46020c00

08001528 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_TIM2_Init+0x94>)
 8001548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_TIM2_Init+0x94>)
 8001550:	22aa      	movs	r2, #170	; 0xaa
 8001552:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_TIM2_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 70;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_TIM2_Init+0x94>)
 800155c:	2246      	movs	r2, #70	; 0x46
 800155e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_TIM2_Init+0x94>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_TIM2_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800156c:	4813      	ldr	r0, [pc, #76]	; (80015bc <MX_TIM2_Init+0x94>)
 800156e:	f005 fbdf 	bl	8006d30 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001578:	f7ff fe4d 	bl	8001216 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_TIM2_Init+0x94>)
 800158a:	f005 fe35 	bl	80071f8 <HAL_TIM_ConfigClockSource>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001594:	f7ff fe3f 	bl	8001216 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_TIM2_Init+0x94>)
 80015a6:	f006 fc95 	bl	8007ed4 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015b0:	f7ff fe31 	bl	8001216 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000b8 	.word	0x200000b8

080015c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <MX_TIM3_Init+0xb0>)
 80015e6:	4a23      	ldr	r2, [pc, #140]	; (8001674 <MX_TIM3_Init+0xb4>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17000;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_TIM3_Init+0xb0>)
 80015ec:	f244 2268 	movw	r2, #17000	; 0x4268
 80015f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_TIM3_Init+0xb0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM3_Init+0xb0>)
 80015fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_TIM3_Init+0xb0>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM3_Init+0xb0>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800160c:	4818      	ldr	r0, [pc, #96]	; (8001670 <MX_TIM3_Init+0xb0>)
 800160e:	f005 fc87 	bl	8006f20 <HAL_TIM_PWM_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001618:	f7ff fdfd 	bl	8001216 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4811      	ldr	r0, [pc, #68]	; (8001670 <MX_TIM3_Init+0xb0>)
 800162c:	f006 fc52 	bl	8007ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001636:	f7ff fdee 	bl	8001216 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163a:	2360      	movs	r3, #96	; 0x60
 800163c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800163e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001642:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM3_Init+0xb0>)
 8001654:	f005 fcbc 	bl	8006fd0 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800165e:	f7ff fdda 	bl	8001216 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <MX_TIM3_Init+0xb0>)
 8001664:	f000 f84a 	bl	80016fc <HAL_TIM_MspPostInit>

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000104 	.word	0x20000104
 8001674:	40000400 	.word	0x40000400

08001678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d10e      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_TIM_Base_MspInit+0x3c>)
 800168c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_TIM_Base_MspInit+0x3c>)
 800169c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	46020c00 	.word	0x46020c00

080016b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10e      	bne.n	80016e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_TIM_PWM_MspInit+0x40>)
 80016cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_TIM_PWM_MspInit+0x40>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_TIM_PWM_MspInit+0x40>)
 80016dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40000400 	.word	0x40000400
 80016f8:	46020c00 	.word	0x46020c00

080016fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <HAL_TIM_MspPostInit+0x68>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d11e      	bne.n	800175c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_TIM_MspPostInit+0x6c>)
 8001720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001724:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_TIM_MspPostInit+0x6c>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_TIM_MspPostInit+0x6c>)
 8001730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800173c:	2310      	movs	r3, #16
 800173e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4619      	mov	r1, r3
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <HAL_TIM_MspPostInit+0x70>)
 8001758:	f000 fd88 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40000400 	.word	0x40000400
 8001768:	46020c00 	.word	0x46020c00
 800176c:	42020400 	.word	0x42020400

08001770 <tmc2590_Init>:
		176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,201,202,203,204,205,206,
		207,207,208,209,210,211,212,212,213,214,215,215,216,217,218,218,219,220,220,221,222,223,223,224,225,225,226,226,227,228,228,229,
		229,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,238,239,239,240,240,240,241,241,241,242,242,242,243,243,
		243,244,244,244,244,245,245,245,245,246,246,246,246,246,247,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,248};

void tmc2590_Init(TMC2590_HandleTypeDef *phtmc2590, SPI_HandleTypeDef *hspi, GPIO_TypeDef *gpioPortNCS, uint16_t gpioPinNCS, GPIO_TypeDef *gpioPortDrvEnN, uint16_t gpioPinDrvEnN){
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	807b      	strh	r3, [r7, #2]
	uint8_t pData[3];
	phtmc2590->hspi = hspi;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	601a      	str	r2, [r3, #0]
	phtmc2590->gpioPinNCS = gpioPinNCS;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	809a      	strh	r2, [r3, #4]
	phtmc2590->gpioPortNCS = gpioPortNCS;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
	phtmc2590->gpioPinDrvEnN = gpioPinDrvEnN;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001794:	819a      	strh	r2, [r3, #12]
	phtmc2590->gpioPortDrvEnN = gpioPortDrvEnN;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a3a      	ldr	r2, [r7, #32]
 800179a:	611a      	str	r2, [r3, #16]

	tmc2590_SetPowerEnable(phtmc2590, SET);
 800179c:	2101      	movs	r1, #1
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f868 	bl	8001874 <tmc2590_SetPowerEnable>
	tmc2590_SetnCS(phtmc2590, SET);
 80017a4:	2101      	movs	r1, #1
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f852 	bl	8001850 <tmc2590_SetnCS>

	phtmc2590->drvCtrlRegister 			= 0x00000; // No Current
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
	phtmc2590->chopConfRegister			= 0b10011000000000001111; // 100 10
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4a22      	ldr	r2, [pc, #136]	; (8001840 <tmc2590_Init+0xd0>)
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
	phtmc2590->smartEnRegister 			= 0b10100000000000000000; // 101 0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
	phtmc2590->stallGuardCtrlRegister 	= 0b11000000000000011111;//0xD001F; // 110 1---- 11111
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4a20      	ldr	r2, [pc, #128]	; (8001844 <tmc2590_Init+0xd4>)
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
	phtmc2590->drvConfRegister 			= 0b11100000011110110000;//0xE0480; // 1110 0000 0100 1000 0000
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <tmc2590_Init+0xd8>)
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30

	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->drvCtrlRegister);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4619      	mov	r1, r3
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f886 	bl	80018e4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80017d8:	2103      	movs	r1, #3
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f85f 	bl	800189e <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->chopConfRegister);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f87c 	bl	80018e4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80017ec:	2103      	movs	r1, #3
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f855 	bl	800189e <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->smartEnRegister);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	4619      	mov	r1, r3
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f872 	bl	80018e4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8001800:	2103      	movs	r1, #3
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f84b 	bl	800189e <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->stallGuardCtrlRegister);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f868 	bl	80018e4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8001814:	2103      	movs	r1, #3
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f841 	bl	800189e <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->drvConfRegister);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	4619      	mov	r1, r3
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f85e 	bl	80018e4 <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8001828:	2103      	movs	r1, #3
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f837 	bl	800189e <tmc2590_TransmitReceive>

	HAL_TIM_Base_Start_IT(&htim2);
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <tmc2590_Init+0xdc>)
 8001832:	f005 fad5 	bl	8006de0 <HAL_TIM_Base_Start_IT>

}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	0009800f 	.word	0x0009800f
 8001844:	000c001f 	.word	0x000c001f
 8001848:	000e07b0 	.word	0x000e07b0
 800184c:	200000b8 	.word	0x200000b8

08001850 <tmc2590_SetnCS>:

void tmc2590_SetnCS(TMC2590_HandleTypeDef *phtmc2590, FlagStatus status){
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(phtmc2590->gpioPortNCS, phtmc2590->gpioPinNCS, status);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6898      	ldr	r0, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	889b      	ldrh	r3, [r3, #4]
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	4619      	mov	r1, r3
 8001868:	f000 fef0 	bl	800264c <HAL_GPIO_WritePin>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <tmc2590_SetPowerEnable>:

void tmc2590_SetPowerEnable(TMC2590_HandleTypeDef *phtmc2590, FlagStatus status){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(phtmc2590->gpioPortDrvEnN, phtmc2590->gpioPinDrvEnN, 1-status);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6918      	ldr	r0, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	8999      	ldrh	r1, [r3, #12]
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	f1c3 0301 	rsb	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	f000 fedb 	bl	800264c <HAL_GPIO_WritePin>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <tmc2590_TransmitReceive>:


HAL_StatusTypeDef tmc2590_TransmitReceive(TMC2590_HandleTypeDef *phtmc2590, int size){
 800189e:	b590      	push	{r4, r7, lr}
 80018a0:	b087      	sub	sp, #28
 80018a2:	af02      	add	r7, sp, #8
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	tmc2590_SetnCS(phtmc2590, RESET);
 80018a8:	2100      	movs	r1, #0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffd0 	bl	8001850 <tmc2590_SetnCS>
	status = HAL_SPI_TransmitReceive(phtmc2590->hspi, phtmc2590->spiTxBuffer, phtmc2590->spiRxBuffer, size, HAL_MAX_DELAY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f103 0114 	add.w	r1, r3, #20
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f103 021a 	add.w	r2, r3, #26
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80018c8:	9400      	str	r4, [sp, #0]
 80018ca:	f004 fec9 	bl	8006660 <HAL_SPI_TransmitReceive>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
	tmc2590_SetnCS(phtmc2590, SET);
 80018d2:	2101      	movs	r1, #1
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffbb 	bl	8001850 <tmc2590_SetnCS>
	}
	else{

	}

	return status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}

080018e4 <tmc2590_SetTxBufferInt32>:

void tmc2590_SetTxBuffer(TMC2590_HandleTypeDef *phtmc2590, uint8_t *pData, int size){
	memcpy(phtmc2590->spiTxBuffer, pData, size);
}

void tmc2590_SetTxBufferInt32(TMC2590_HandleTypeDef *phtmc2590, uint32_t data){
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
	phtmc2590->spiTxBuffer[0] = (data >> 16) & 0xFF;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	751a      	strb	r2, [r3, #20]
	phtmc2590->spiTxBuffer[1] = (data >> 8) & 0xFF;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	755a      	strb	r2, [r3, #21]
	phtmc2590->spiTxBuffer[2] = (data >> 0) & 0xFF;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	759a      	strb	r2, [r3, #22]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <sendOrderStepper>:
		perioedElapsed_IT = 1;
	}
}


int sendOrderStepper(int inputOrder, Stepper * stepper){
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	 * We need to put in input how much we want to turn in degrees and what stepper we want to move
	 * For the moment, we have only one stepper but witch nCS signal, we will be able to change with
	 * stepper we want to communicate
	 */

	int polarity = (inputOrder>0);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	bfcc      	ite	gt
 8001928:	2301      	movgt	r3, #1
 800192a:	2300      	movle	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	613b      	str	r3, [r7, #16]
	int order = (int) abs(inputOrder)*142.2;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	bfb8      	it	lt
 8001936:	425b      	neglt	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fdef 	bl	800051c <__aeabi_i2d>
 800193e:	a37a      	add	r3, pc, #488	; (adr r3, 8001b28 <sendOrderStepper+0x210>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fe54 	bl	80005f0 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f860 	bl	8000a14 <__aeabi_d2iz>
 8001954:	4603      	mov	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]
	int indice = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
	stepper->angularPosition += inputOrder;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	441a      	add	r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	609a      	str	r2, [r3, #8]
	if (stepper->angularPosition >= stepper->angularPositionMax){
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	f2c0 80ba 	blt.w	8001aea <sendOrderStepper+0x1d2>
		stepper->angularPosition -= inputOrder;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	1ad2      	subs	r2, r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	609a      	str	r2, [r3, #8]
		return 0;
 8001982:	2300      	movs	r3, #0
 8001984:	e0b7      	b.n	8001af6 <sendOrderStepper+0x1de>
	}
	while (indice != order){
		uint32_t stateInterruption = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198a:	485d      	ldr	r0, [pc, #372]	; (8001b00 <sendOrderStepper+0x1e8>)
 800198c:	f000 fe46 	bl	800261c <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	60bb      	str	r3, [r7, #8]
		if (stateInterruption != 0 && !polarity){
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <sendOrderStepper+0x8c>
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <sendOrderStepper+0x8c>
			return 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e0a8      	b.n	8001af6 <sendOrderStepper+0x1de>
		}

		if(perioedElapsed_IT){
 80019a4:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <sendOrderStepper+0x1ec>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 809e 	beq.w	8001aea <sendOrderStepper+0x1d2>
				if(index_sin_loop < 256){
 80019ae:	4b56      	ldr	r3, [pc, #344]	; (8001b08 <sendOrderStepper+0x1f0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	dc15      	bgt.n	80019e2 <sendOrderStepper+0xca>
					currentCoilA = sinTable[index_sin_loop];
 80019b6:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <sendOrderStepper+0x1f0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a54      	ldr	r2, [pc, #336]	; (8001b0c <sendOrderStepper+0x1f4>)
 80019bc:	5cd2      	ldrb	r2, [r2, r3]
 80019be:	4b54      	ldr	r3, [pc, #336]	; (8001b10 <sendOrderStepper+0x1f8>)
 80019c0:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[256-index_sin_loop];
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <sendOrderStepper+0x1f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80019ca:	4a50      	ldr	r2, [pc, #320]	; (8001b0c <sendOrderStepper+0x1f4>)
 80019cc:	5cd2      	ldrb	r2, [r2, r3]
 80019ce:	4b51      	ldr	r3, [pc, #324]	; (8001b14 <sendOrderStepper+0x1fc>)
 80019d0:	701a      	strb	r2, [r3, #0]
					polarityCoilA = polarity;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <sendOrderStepper+0x200>)
 80019d8:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 1;
 80019da:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <sendOrderStepper+0x204>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e056      	b.n	8001a90 <sendOrderStepper+0x178>
				}
				else if(index_sin_loop < 512){
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <sendOrderStepper+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ea:	da17      	bge.n	8001a1c <sendOrderStepper+0x104>
					currentCoilA = sinTable[512-index_sin_loop];
 80019ec:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <sendOrderStepper+0x1f0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80019f4:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <sendOrderStepper+0x1f4>)
 80019f6:	5cd2      	ldrb	r2, [r2, r3]
 80019f8:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <sendOrderStepper+0x1f8>)
 80019fa:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[index_sin_loop-256];
 80019fc:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <sendOrderStepper+0x1f0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a04:	4a41      	ldr	r2, [pc, #260]	; (8001b0c <sendOrderStepper+0x1f4>)
 8001a06:	5cd2      	ldrb	r2, [r2, r3]
 8001a08:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <sendOrderStepper+0x1fc>)
 8001a0a:	701a      	strb	r2, [r3, #0]
					polarityCoilA = polarity;
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <sendOrderStepper+0x200>)
 8001a12:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 0;
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <sendOrderStepper+0x204>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	e039      	b.n	8001a90 <sendOrderStepper+0x178>
				}
				else if(index_sin_loop < 768){
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <sendOrderStepper+0x1f0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a24:	da1a      	bge.n	8001a5c <sendOrderStepper+0x144>
					currentCoilA = sinTable[index_sin_loop-512];
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <sendOrderStepper+0x1f0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <sendOrderStepper+0x1f4>)
 8001a30:	5cd2      	ldrb	r2, [r2, r3]
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <sendOrderStepper+0x1f8>)
 8001a34:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[768-index_sin_loop];
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <sendOrderStepper+0x1f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f5c3 7340 	rsb	r3, r3, #768	; 0x300
 8001a3e:	4a33      	ldr	r2, [pc, #204]	; (8001b0c <sendOrderStepper+0x1f4>)
 8001a40:	5cd2      	ldrb	r2, [r2, r3]
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <sendOrderStepper+0x1fc>)
 8001a44:	701a      	strb	r2, [r3, #0]
					polarityCoilA = 1 - polarity;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f1c3 0301 	rsb	r3, r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b31      	ldr	r3, [pc, #196]	; (8001b18 <sendOrderStepper+0x200>)
 8001a52:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 0;
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <sendOrderStepper+0x204>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e019      	b.n	8001a90 <sendOrderStepper+0x178>
				}
				else{
					currentCoilA = sinTable[1024-index_sin_loop];
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <sendOrderStepper+0x1f0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001a64:	4a29      	ldr	r2, [pc, #164]	; (8001b0c <sendOrderStepper+0x1f4>)
 8001a66:	5cd2      	ldrb	r2, [r2, r3]
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <sendOrderStepper+0x1f8>)
 8001a6a:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[index_sin_loop-768];
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <sendOrderStepper+0x1f0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001a74:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <sendOrderStepper+0x1f4>)
 8001a76:	5cd2      	ldrb	r2, [r2, r3]
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <sendOrderStepper+0x1fc>)
 8001a7a:	701a      	strb	r2, [r3, #0]
					polarityCoilA = 1 - polarity;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f1c3 0301 	rsb	r3, r3, #1
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <sendOrderStepper+0x200>)
 8001a88:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 1;
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <sendOrderStepper+0x204>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
				}
				index_sin_loop = (index_sin_loop+1)%1024;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <sendOrderStepper+0x1f0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	425a      	negs	r2, r3
 8001a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a9c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001aa0:	bf58      	it	pl
 8001aa2:	4253      	negpl	r3, r2
 8001aa4:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <sendOrderStepper+0x1f0>)
 8001aa6:	6013      	str	r3, [r2, #0]
				indice++;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]

				drvCtrlCommand = (polarityCoilA << 17) | (currentCoilA << 9) | (polarityCoilB << 8) | (currentCoilB << 0);
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <sendOrderStepper+0x200>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	045a      	lsls	r2, r3, #17
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <sendOrderStepper+0x1f8>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	025b      	lsls	r3, r3, #9
 8001aba:	431a      	orrs	r2, r3
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <sendOrderStepper+0x204>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <sendOrderStepper+0x1fc>)
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <sendOrderStepper+0x208>)
 8001ace:	601a      	str	r2, [r3, #0]
				tmc2590_SetTxBufferInt32(&htmc2590, drvCtrlCommand);
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <sendOrderStepper+0x208>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4813      	ldr	r0, [pc, #76]	; (8001b24 <sendOrderStepper+0x20c>)
 8001ad8:	f7ff ff04 	bl	80018e4 <tmc2590_SetTxBufferInt32>
				tmc2590_TransmitReceive(&htmc2590, TMC2590_CMD_SIZE);
 8001adc:	2103      	movs	r1, #3
 8001ade:	4811      	ldr	r0, [pc, #68]	; (8001b24 <sendOrderStepper+0x20c>)
 8001ae0:	f7ff fedd 	bl	800189e <tmc2590_TransmitReceive>
				perioedElapsed_IT = 0;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <sendOrderStepper+0x1ec>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	while (indice != order){
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	f47f af49 	bne.w	8001986 <sendOrderStepper+0x6e>
			}
	}

	return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	42020800 	.word	0x42020800
 8001b04:	20000184 	.word	0x20000184
 8001b08:	20000188 	.word	0x20000188
 8001b0c:	080090c8 	.word	0x080090c8
 8001b10:	2000018c 	.word	0x2000018c
 8001b14:	2000018d 	.word	0x2000018d
 8001b18:	2000018e 	.word	0x2000018e
 8001b1c:	2000018f 	.word	0x2000018f
 8001b20:	20000190 	.word	0x20000190
 8001b24:	20000150 	.word	0x20000150
 8001b28:	66666666 	.word	0x66666666
 8001b2c:	4061c666 	.word	0x4061c666

08001b30 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b36:	4a21      	ldr	r2, [pc, #132]	; (8001bbc <MX_LPUART1_UART_Init+0x8c>)
 8001b38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b3c:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <MX_LPUART1_UART_Init+0x90>)
 8001b3e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b54:	220c      	movs	r2, #12
 8001b56:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b70:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b72:	f006 fa71 	bl	8008058 <HAL_UART_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001b7c:	f7ff fb4b 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b80:	2100      	movs	r1, #0
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b84:	f007 f846 	bl	8008c14 <HAL_UARTEx_SetTxFifoThreshold>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001b8e:	f7ff fb42 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b92:	2100      	movs	r1, #0
 8001b94:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001b96:	f007 f87b 	bl	8008c90 <HAL_UARTEx_SetRxFifoThreshold>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001ba0:	f7ff fb39 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_LPUART1_UART_Init+0x88>)
 8001ba6:	f006 fffc 	bl	8008ba2 <HAL_UARTEx_DisableFifoMode>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001bb0:	f7ff fb31 	bl	8001216 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000194 	.word	0x20000194
 8001bbc:	46002400 	.word	0x46002400
 8001bc0:	00033324 	.word	0x00033324

08001bc4 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <MX_UART4_Init+0x90>)
 8001bca:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <MX_UART4_Init+0x94>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <MX_UART4_Init+0x90>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <MX_UART4_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_UART4_Init+0x90>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_UART4_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_UART4_Init+0x90>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_UART4_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_UART4_Init+0x90>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_UART4_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_UART4_Init+0x90>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_UART4_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_UART4_Init+0x90>)
 8001c0e:	f006 fa23 	bl	8008058 <HAL_UART_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c18:	f7ff fafd 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_UART4_Init+0x90>)
 8001c20:	f006 fff8 	bl	8008c14 <HAL_UARTEx_SetTxFifoThreshold>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c2a:	f7ff faf4 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4808      	ldr	r0, [pc, #32]	; (8001c54 <MX_UART4_Init+0x90>)
 8001c32:	f007 f82d 	bl	8008c90 <HAL_UARTEx_SetRxFifoThreshold>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c3c:	f7ff faeb 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_UART4_Init+0x90>)
 8001c42:	f006 ffae 	bl	8008ba2 <HAL_UARTEx_DisableFifoMode>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c4c:	f7ff fae3 	bl	8001216 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000228 	.word	0x20000228
 8001c58:	40004c00 	.word	0x40004c00

08001c5c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c62:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <MX_USART1_UART_Init+0x94>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001c66:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c68:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001ca4:	4811      	ldr	r0, [pc, #68]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001ca6:	f006 fa27 	bl	80080f8 <HAL_HalfDuplex_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cb0:	f7ff fab1 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	480d      	ldr	r0, [pc, #52]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001cb8:	f006 ffac 	bl	8008c14 <HAL_UARTEx_SetTxFifoThreshold>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cc2:	f7ff faa8 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001cca:	f006 ffe1 	bl	8008c90 <HAL_UARTEx_SetRxFifoThreshold>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cd4:	f7ff fa9f 	bl	8001216 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_USART1_UART_Init+0x90>)
 8001cda:	f006 ff62 	bl	8008ba2 <HAL_UARTEx_DisableFifoMode>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ce4:	f7ff fa97 	bl	8001216 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200002bc 	.word	0x200002bc
 8001cf0:	40013800 	.word	0x40013800

08001cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0bc      	sub	sp, #240	; 0xf0
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	f107 0320 	add.w	r3, r7, #32
 8001d10:	22b8      	movs	r2, #184	; 0xb8
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f007 f847 	bl	8008da8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a71      	ldr	r2, [pc, #452]	; (8001ee4 <HAL_UART_MspInit+0x1f0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d146      	bne.n	8001db2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d24:	f04f 0220 	mov.w	r2, #32
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d36:	f107 0320 	add.w	r3, r7, #32
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 f806 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d46:	f7ff fa66 	bl	8001216 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d4a:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001d4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d50:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d56:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001d5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d68:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d78:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = Rasp_RX_Pin|Rasp_TX_Pin;
 8001d86:	2303      	movs	r3, #3
 8001d88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d9e:	2308      	movs	r3, #8
 8001da0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001da8:	4619      	mov	r1, r3
 8001daa:	4850      	ldr	r0, [pc, #320]	; (8001eec <HAL_UART_MspInit+0x1f8>)
 8001dac:	f000 fa5e 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001db0:	e094      	b.n	8001edc <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==UART4)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4e      	ldr	r2, [pc, #312]	; (8001ef0 <HAL_UART_MspInit+0x1fc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d145      	bne.n	8001e48 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dbc:	f04f 0208 	mov.w	r2, #8
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dcc:	f107 0320 	add.w	r3, r7, #32
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 ffbb 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001ddc:	f7ff fa1b 	bl	8001216 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001de0:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001de6:	4a40      	ldr	r2, [pc, #256]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e04:	4a38      	ldr	r2, [pc, #224]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ST_LINK_TX_Pin|ST_LINK_RX_Pin;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e34:	2308      	movs	r3, #8
 8001e36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e3e:	4619      	mov	r1, r3
 8001e40:	482c      	ldr	r0, [pc, #176]	; (8001ef4 <HAL_UART_MspInit+0x200>)
 8001e42:	f000 fa13 	bl	800226c <HAL_GPIO_Init>
}
 8001e46:	e049      	b.n	8001edc <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <HAL_UART_MspInit+0x204>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d144      	bne.n	8001edc <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e52:	f04f 0201 	mov.w	r2, #1
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e62:	f107 0320 	add.w	r3, r7, #32
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 ff70 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001e72:	f7ff f9d0 	bl	8001216 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001e78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e82:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001e88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e9a:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_UART_MspInit+0x1f4>)
 8001ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servos_Pin;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb8:	2312      	movs	r3, #18
 8001eba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eca:	2307      	movs	r3, #7
 8001ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(Servos_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <HAL_UART_MspInit+0x208>)
 8001ed8:	f000 f9c8 	bl	800226c <HAL_GPIO_Init>
}
 8001edc:	bf00      	nop
 8001ede:	37f0      	adds	r7, #240	; 0xf0
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	46002400 	.word	0x46002400
 8001ee8:	46020c00 	.word	0x46020c00
 8001eec:	42020800 	.word	0x42020800
 8001ef0:	40004c00 	.word	0x40004c00
 8001ef4:	42020000 	.word	0x42020000
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	42020400 	.word	0x42020400

08001f00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f04:	f7ff fad8 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0a:	490d      	ldr	r1, [pc, #52]	; (8001f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <LoopForever+0xe>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f20:	4c0a      	ldr	r4, [pc, #40]	; (8001f4c <LoopForever+0x16>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f2e:	f006 ff43 	bl	8008db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f32:	f7ff f8e7 	bl	8001104 <main>

08001f36 <LoopForever>:

LoopForever:
    b LoopForever
 8001f36:	e7fe      	b.n	8001f36 <LoopForever>
  ldr   r0, =_estack
 8001f38:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	20000009 	.word	0x20000009
  ldr r2, =_sidata
 8001f44:	08009280 	.word	0x08009280
  ldr r2, =_sbss
 8001f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f4c:	20000354 	.word	0x20000354

08001f50 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC1_IRQHandler>
	...

08001f54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_Init+0x4c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_Init+0x4c>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f94f 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f6a:	f001 fd11 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_Init+0x50>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <HAL_Init+0x54>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_Init+0x58>)
 8001f82:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f84:	200f      	movs	r0, #15
 8001f86:	f000 f813 	bl	8001fb0 <HAL_InitTick>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e002      	b.n	8001f9a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fa4c 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	46020c00 	.word	0x46020c00
 8001fa8:	08009070 	.word	0x08009070
 8001fac:	20000000 	.word	0x20000000

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_InitTick+0x60>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e021      	b.n	8002008 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_InitTick+0x64>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_InitTick+0x60>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f939 	bl	8002252 <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff8:	f000 f911 	bl	800221e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_InitTick+0x68>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000008 	.word	0x20000008
 8002014:	20000000 	.word	0x20000000
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008
 8002040:	20000350 	.word	0x20000350

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000350 	.word	0x20000350

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000008 	.word	0x20000008

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff47 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff5e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff90 	bl	800215c <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5f 	bl	8002108 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffb2 	bl	80021c4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800227e:	e1ba      	b.n	80025f6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 81aa 	beq.w	80025f0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a55      	ldr	r2, [pc, #340]	; (80023f4 <HAL_GPIO_Init+0x188>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d15d      	bne.n	8002360 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80022aa:	2201      	movs	r2, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80022d4:	4a48      	ldr	r2, [pc, #288]	; (80023f8 <HAL_GPIO_Init+0x18c>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022dc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80022de:	4a46      	ldr	r2, [pc, #280]	; (80023f8 <HAL_GPIO_Init+0x18c>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	3208      	adds	r2, #8
 80022f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	4013      	ands	r3, r2
 800230c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220b      	movs	r2, #11
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	4313      	orrs	r3, r2
 8002320:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	3208      	adds	r2, #8
 800232a:	69f9      	ldr	r1, [r7, #28]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	4013      	ands	r3, r2
 8002346:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2202      	movs	r2, #2
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	4313      	orrs	r3, r2
 8002356:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e067      	b.n	8002430 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x104>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b12      	cmp	r3, #18
 800236e:	d145      	bne.n	80023fc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	4013      	ands	r3, r2
 8002392:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 020f 	and.w	r2, r3, #15
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	69f9      	ldr	r1, [r7, #28]
 80023b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0203 	and.w	r2, r3, #3
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e01e      	b.n	8002430 <HAL_GPIO_Init+0x1c4>
 80023f2:	bf00      	nop
 80023f4:	46020000 	.word	0x46020000
 80023f8:	080091c8 	.word	0x080091c8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	4013      	ands	r3, r2
 8002412:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	4313      	orrs	r3, r2
 8002428:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d00b      	beq.n	8002450 <HAL_GPIO_Init+0x1e4>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d007      	beq.n	8002450 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002444:	2b11      	cmp	r3, #17
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b12      	cmp	r3, #18
 800244e:	d130      	bne.n	80024b2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	4013      	ands	r3, r2
 8002466:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	4313      	orrs	r3, r2
 8002478:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002486:	2201      	movs	r2, #1
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	4013      	ands	r3, r2
 8002494:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0201 	and.w	r2, r3, #1
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d017      	beq.n	80024ea <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d07c      	beq.n	80025f0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80024f6:	4a47      	ldr	r2, [pc, #284]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3318      	adds	r3, #24
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	4013      	ands	r3, r2
 8002518:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	0a9a      	lsrs	r2, r3, #10
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_GPIO_Init+0x3ac>)
 8002520:	4013      	ands	r3, r2
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	f002 0203 	and.w	r2, r2, #3
 8002528:	00d2      	lsls	r2, r2, #3
 800252a:	4093      	lsls	r3, r2
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	4313      	orrs	r3, r2
 8002530:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002532:	4938      	ldr	r1, [pc, #224]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3318      	adds	r3, #24
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	4013      	ands	r3, r2
 800254e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	4013      	ands	r3, r2
 8002578:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 8002596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80025ba:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 80025c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <HAL_GPIO_Init+0x3a8>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	f47f ae3d 	bne.w	8002280 <HAL_GPIO_Init+0x14>
  }
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	3724      	adds	r7, #36	; 0x24
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	46022000 	.word	0x46022000
 8002618:	002f7f7f 	.word	0x002f7f7f

0800261c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e001      	b.n	800263e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002668:	e002      	b.n	8002670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e007      	b.n	80026aa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0204 	bic.w	r2, r3, #4
 80026a2:	4905      	ldr	r1, [pc, #20]	; (80026b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40030400 	.word	0x40030400

080026bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_ICACHE_Enable+0x1c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_ICACHE_Enable+0x1c>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40030400 	.word	0x40030400

080026dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d10b      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fc:	d905      	bls.n	800270a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4a32      	ldr	r2, [pc, #200]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e057      	b.n	80027be <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d90a      	bls.n	800272c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002716:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4313      	orrs	r3, r2
 8002722:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	60d3      	str	r3, [r2, #12]
 800272a:	e007      	b.n	800273c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002734:	4925      	ldr	r1, [pc, #148]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4313      	orrs	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	2232      	movs	r2, #50	; 0x32
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	3301      	adds	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800275a:	e002      	b.n	8002762 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3b01      	subs	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x98>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f3      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01b      	beq.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2232      	movs	r2, #50	; 0x32
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002798:	e002      	b.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3b01      	subs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f3      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e000      	b.n	80027be <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	46020800 	.word	0x46020800
 80027d0:	20000000 	.word	0x20000000
 80027d4:	10624dd3 	.word	0x10624dd3

080027d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	46020800 	.word	0x46020800

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08e      	sub	sp, #56	; 0x38
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f000 bec8 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	4b99      	ldr	r3, [pc, #612]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002818:	4b96      	ldr	r3, [pc, #600]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 816c 	beq.w	8002b08 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_RCC_OscConfig+0x52>
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	2b0c      	cmp	r3, #12
 800283a:	f040 80de 	bne.w	80029fa <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 80da 	bne.w	80029fa <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f000 bea5 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002858:	4b86      	ldr	r3, [pc, #536]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_RCC_OscConfig+0x7a>
 8002864:	4b83      	ldr	r3, [pc, #524]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800286c:	e005      	b.n	800287a <HAL_RCC_OscConfig+0x86>
 800286e:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002874:	041b      	lsls	r3, r3, #16
 8002876:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800287a:	4293      	cmp	r3, r2
 800287c:	d255      	bcs.n	800292a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	4618      	mov	r0, r3
 800288a:	f001 f9d9 	bl	8003c40 <RCC_SetFlashLatencyFromMSIRange>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	f000 be82 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800289a:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	4a75      	ldr	r2, [pc, #468]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80028a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a4:	6093      	str	r3, [r2, #8]
 80028a6:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	4970      	ldr	r1, [pc, #448]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80028c0:	d309      	bcc.n	80028d6 <HAL_RCC_OscConfig+0xe2>
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 021f 	bic.w	r2, r3, #31
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	4969      	ldr	r1, [pc, #420]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
 80028d4:	e07e      	b.n	80029d4 <HAL_RCC_OscConfig+0x1e0>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da0a      	bge.n	80028f4 <HAL_RCC_OscConfig+0x100>
 80028de:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	4961      	ldr	r1, [pc, #388]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
 80028f2:	e06f      	b.n	80029d4 <HAL_RCC_OscConfig+0x1e0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d30a      	bcc.n	8002914 <HAL_RCC_OscConfig+0x120>
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	029b      	lsls	r3, r3, #10
 800290c:	4959      	ldr	r1, [pc, #356]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
 8002912:	e05f      	b.n	80029d4 <HAL_RCC_OscConfig+0x1e0>
 8002914:	4b57      	ldr	r3, [pc, #348]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	03db      	lsls	r3, r3, #15
 8002922:	4954      	ldr	r1, [pc, #336]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002924:	4313      	orrs	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
 8002928:	e054      	b.n	80029d4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800292a:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4a51      	ldr	r2, [pc, #324]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002934:	6093      	str	r3, [r2, #8]
 8002936:	4b4f      	ldr	r3, [pc, #316]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	494c      	ldr	r1, [pc, #304]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002950:	d309      	bcc.n	8002966 <HAL_RCC_OscConfig+0x172>
 8002952:	4b48      	ldr	r3, [pc, #288]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f023 021f 	bic.w	r2, r3, #31
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4945      	ldr	r1, [pc, #276]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
 8002964:	e028      	b.n	80029b8 <HAL_RCC_OscConfig+0x1c4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	da0a      	bge.n	8002984 <HAL_RCC_OscConfig+0x190>
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	015b      	lsls	r3, r3, #5
 800297c:	493d      	ldr	r1, [pc, #244]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 800297e:	4313      	orrs	r3, r2
 8002980:	60cb      	str	r3, [r1, #12]
 8002982:	e019      	b.n	80029b8 <HAL_RCC_OscConfig+0x1c4>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d30a      	bcc.n	80029a4 <HAL_RCC_OscConfig+0x1b0>
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	029b      	lsls	r3, r3, #10
 800299c:	4935      	ldr	r1, [pc, #212]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	60cb      	str	r3, [r1, #12]
 80029a2:	e009      	b.n	80029b8 <HAL_RCC_OscConfig+0x1c4>
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	03db      	lsls	r3, r3, #15
 80029b2:	4930      	ldr	r1, [pc, #192]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 f93c 	bl	8003c40 <RCC_SetFlashLatencyFromMSIRange>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f000 bde5 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80029d4:	f001 f8de 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_RCC_OscConfig+0x284>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fae7 	bl	8001fb0 <HAL_InitTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80029e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 808a 	beq.w	8002b06 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80029f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f6:	f000 bdd2 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d066      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a0e:	f7ff fb19 	bl	8002044 <HAL_GetTick>
 8002a12:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a14:	e009      	b.n	8002a2a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a16:	f7ff fb15 	bl	8002044 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d902      	bls.n	8002a2a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	f000 bdba 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ef      	beq.n	8002a16 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a40:	6093      	str	r3, [r2, #8]
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	4909      	ldr	r1, [pc, #36]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002a5c:	d30e      	bcc.n	8002a7c <HAL_RCC_OscConfig+0x288>
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f023 021f 	bic.w	r2, r3, #31
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4902      	ldr	r1, [pc, #8]	; (8002a74 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60cb      	str	r3, [r1, #12]
 8002a70:	e04a      	b.n	8002b08 <HAL_RCC_OscConfig+0x314>
 8002a72:	bf00      	nop
 8002a74:	46020c00 	.word	0x46020c00
 8002a78:	20000004 	.word	0x20000004
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da0a      	bge.n	8002a9a <HAL_RCC_OscConfig+0x2a6>
 8002a84:	4b98      	ldr	r3, [pc, #608]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	015b      	lsls	r3, r3, #5
 8002a92:	4995      	ldr	r1, [pc, #596]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
 8002a98:	e036      	b.n	8002b08 <HAL_RCC_OscConfig+0x314>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa2:	d30a      	bcc.n	8002aba <HAL_RCC_OscConfig+0x2c6>
 8002aa4:	4b90      	ldr	r3, [pc, #576]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	029b      	lsls	r3, r3, #10
 8002ab2:	498d      	ldr	r1, [pc, #564]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
 8002ab8:	e026      	b.n	8002b08 <HAL_RCC_OscConfig+0x314>
 8002aba:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	03db      	lsls	r3, r3, #15
 8002ac8:	4987      	ldr	r1, [pc, #540]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60cb      	str	r3, [r1, #12]
 8002ace:	e01b      	b.n	8002b08 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002ad0:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a84      	ldr	r2, [pc, #528]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002adc:	f7ff fab2 	bl	8002044 <HAL_GetTick>
 8002ae0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002ae2:	e009      	b.n	8002af8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae4:	f7ff faae 	bl	8002044 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d902      	bls.n	8002af8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	f000 bd53 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002af8:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ef      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2f0>
 8002b04:	e000      	b.n	8002b08 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 808b 	beq.w	8002c2c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_OscConfig+0x334>
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d17d      	bne.n	8002c2c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f000 bd34 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x35a>
 8002b40:	4b69      	ldr	r3, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a68      	ldr	r2, [pc, #416]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	e041      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3de>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b56:	d112      	bne.n	8002b7e <HAL_RCC_OscConfig+0x38a>
 8002b58:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a62      	ldr	r2, [pc, #392]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b5d      	ldr	r3, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a5c      	ldr	r2, [pc, #368]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	e029      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3de>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002b86:	d112      	bne.n	8002bae <HAL_RCC_OscConfig+0x3ba>
 8002b88:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a56      	ldr	r2, [pc, #344]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a53      	ldr	r2, [pc, #332]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b51      	ldr	r3, [pc, #324]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a50      	ldr	r2, [pc, #320]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e011      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3de>
 8002bae:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4a      	ldr	r2, [pc, #296]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a47      	ldr	r2, [pc, #284]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002bd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d014      	beq.n	8002c04 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002bda:	f7ff fa33 	bl	8002044 <HAL_GetTick>
 8002bde:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be0:	e009      	b.n	8002bf6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be2:	f7ff fa2f 	bl	8002044 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b64      	cmp	r3, #100	; 0x64
 8002bee:	d902      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	f000 bcd4 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ef      	beq.n	8002be2 <HAL_RCC_OscConfig+0x3ee>
 8002c02:	e013      	b.n	8002c2c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002c04:	f7ff fa1e 	bl	8002044 <HAL_GetTick>
 8002c08:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0a:	e009      	b.n	8002c20 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7ff fa1a 	bl	8002044 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d902      	bls.n	8002c20 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	f000 bcbf 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c20:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ef      	bne.n	8002c0c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05f      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x456>
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d114      	bne.n	8002c6e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d111      	bne.n	8002c6e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f000 bca3 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	4920      	ldr	r1, [pc, #128]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c6c:	e044      	b.n	8002cf8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d024      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c82:	f7ff f9df 	bl	8002044 <HAL_GetTick>
 8002c86:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c88:	e009      	b.n	8002c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7ff f9db 	bl	8002044 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d902      	bls.n	8002c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f000 bc80 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0ef      	beq.n	8002c8a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	490b      	ldr	r1, [pc, #44]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	610b      	str	r3, [r1, #16]
 8002cbe:	e01b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ccc:	f7ff f9ba 	bl	8002044 <HAL_GetTick>
 8002cd0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7ff f9b6 	bl	8002044 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d904      	bls.n	8002cec <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	f000 bc5b 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
 8002ce8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cec:	4baf      	ldr	r3, [pc, #700]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ed      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80c8 	beq.w	8002e96 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0c:	4ba7      	ldr	r3, [pc, #668]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d111      	bne.n	8002d3e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4ba4      	ldr	r3, [pc, #656]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d20:	4aa2      	ldr	r2, [pc, #648]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002d2a:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d3e:	4b9c      	ldr	r3, [pc, #624]	; (8002fb0 <HAL_RCC_OscConfig+0x7bc>)
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d119      	bne.n	8002d7e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002d4a:	4b99      	ldr	r3, [pc, #612]	; (8002fb0 <HAL_RCC_OscConfig+0x7bc>)
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	4a98      	ldr	r2, [pc, #608]	; (8002fb0 <HAL_RCC_OscConfig+0x7bc>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7ff f975 	bl	8002044 <HAL_GetTick>
 8002d5a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d5c:	e009      	b.n	8002d72 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7ff f971 	bl	8002044 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d902      	bls.n	8002d72 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	f000 bc16 	b.w	800359e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <HAL_RCC_OscConfig+0x7bc>)
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ef      	beq.n	8002d5e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d05f      	beq.n	8002e46 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002d86:	4b89      	ldr	r3, [pc, #548]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d8c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d037      	beq.n	8002e0c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e3f4      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dc4:	4a79      	ldr	r2, [pc, #484]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002dc6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002dca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002dce:	f7ff f939 	bl	8002044 <HAL_GetTick>
 8002dd2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7ff f935 	bl	8002044 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e3da      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002de8:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ef      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dfc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	4969      	ldr	r1, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002e0c:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e12:	4a66      	ldr	r2, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002e1c:	f7ff f912 	bl	8002044 <HAL_GetTick>
 8002e20:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7ff f90e 	bl	8002044 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e3b3      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002e36:	4b5d      	ldr	r3, [pc, #372]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ef      	beq.n	8002e24 <HAL_RCC_OscConfig+0x630>
 8002e44:	e01b      	b.n	8002e7e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002e46:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e4c:	4a57      	ldr	r2, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e4e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002e52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002e56:	f7ff f8f5 	bl	8002044 <HAL_GetTick>
 8002e5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5e:	f7ff f8f1 	bl	8002044 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e396      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e70:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ef      	bne.n	8002e5e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e86:	4b49      	ldr	r3, [pc, #292]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8c:	4a47      	ldr	r2, [pc, #284]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002e8e:	f023 0304 	bic.w	r3, r3, #4
 8002e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8111 	beq.w	80030c6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eaa:	4b40      	ldr	r3, [pc, #256]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d111      	bne.n	8002edc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	4a3b      	ldr	r2, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ec8:	4b38      	ldr	r3, [pc, #224]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_RCC_OscConfig+0x7bc>)
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d118      	bne.n	8002f1a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <HAL_RCC_OscConfig+0x7bc>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <HAL_RCC_OscConfig+0x7bc>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef4:	f7ff f8a6 	bl	8002044 <HAL_GetTick>
 8002ef8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7ff f8a2 	bl	8002044 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e347      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCC_OscConfig+0x7bc>)
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01f      	beq.n	8002f66 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f48:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f52:	e018      	b.n	8002f86 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f5a:	4a14      	ldr	r2, [pc, #80]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f64:	e00f      	b.n	8002f86 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f6c:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f7c:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x7b8>)
 8002f7e:	f023 0304 	bic.w	r3, r3, #4
 8002f82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d057      	beq.n	800303e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002f8e:	f7ff f859 	bl	8002044 <HAL_GetTick>
 8002f92:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f94:	e00e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7ff f855 	bl	8002044 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d905      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e2f8      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
 8002fac:	46020c00 	.word	0x46020c00
 8002fb0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb4:	4b9c      	ldr	r3, [pc, #624]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8002fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0e9      	beq.n	8002f96 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01b      	beq.n	8003006 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fce:	4b96      	ldr	r3, [pc, #600]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8002fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fd4:	4a94      	ldr	r2, [pc, #592]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8002fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7ff f830 	bl	8002044 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e2d3      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ff6:	4b8c      	ldr	r3, [pc, #560]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8002ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ed      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x7ec>
 8003004:	e053      	b.n	80030ae <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800300c:	4a86      	ldr	r2, [pc, #536]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 800300e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003012:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f7ff f814 	bl	8002044 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	; 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e2b7      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800302e:	4b7e      	ldr	r3, [pc, #504]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ed      	bne.n	8003018 <HAL_RCC_OscConfig+0x824>
 800303c:	e037      	b.n	80030ae <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800303e:	f7ff f801 	bl	8002044 <HAL_GetTick>
 8003042:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe fffd 	bl	8002044 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e2a0      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800305c:	4b72      	ldr	r3, [pc, #456]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 800305e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ed      	bne.n	8003046 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800306a:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 800306c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01a      	beq.n	80030ae <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003078:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 800307a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800307e:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003084:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe ffdb 	bl	8002044 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e27e      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030a0:	4b61      	ldr	r3, [pc, #388]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80030a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ed      	bne.n	800308a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80030b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030bc:	4a5a      	ldr	r2, [pc, #360]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80030be:	f023 0304 	bic.w	r3, r3, #4
 80030c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d036      	beq.n	8003140 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80030da:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80030e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030e4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030e6:	f7fe ffad 	bl	8002044 <HAL_GetTick>
 80030ea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ee:	f7fe ffa9 	bl	8002044 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e24e      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003100:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x8fa>
 800310c:	e018      	b.n	8003140 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800310e:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a45      	ldr	r2, [pc, #276]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003118:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800311a:	f7fe ff93 	bl	8002044 <HAL_GetTick>
 800311e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003122:	f7fe ff8f 	bl	8002044 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e234      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003134:	4b3c      	ldr	r3, [pc, #240]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b00      	cmp	r3, #0
 800314a:	d036      	beq.n	80031ba <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	2b00      	cmp	r3, #0
 8003152:	d019      	beq.n	8003188 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a33      	ldr	r2, [pc, #204]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 800315a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800315e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003160:	f7fe ff70 	bl	8002044 <HAL_GetTick>
 8003164:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003168:	f7fe ff6c 	bl	8002044 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e211      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x974>
 8003186:	e018      	b.n	80031ba <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a26      	ldr	r2, [pc, #152]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 800318e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003192:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003194:	f7fe ff56 	bl	8002044 <HAL_GetTick>
 8003198:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800319c:	f7fe ff52 	bl	8002044 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1f7      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80031ae:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d07f      	beq.n	80032c6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d062      	beq.n	8003294 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4a15      	ldr	r2, [pc, #84]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80031d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031d8:	6093      	str	r3, [r2, #8]
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	4910      	ldr	r1, [pc, #64]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80031f4:	d309      	bcc.n	800320a <HAL_RCC_OscConfig+0xa16>
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f023 021f 	bic.w	r2, r3, #31
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4909      	ldr	r1, [pc, #36]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003204:	4313      	orrs	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
 8003208:	e02a      	b.n	8003260 <HAL_RCC_OscConfig+0xa6c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b00      	cmp	r3, #0
 8003210:	da0c      	bge.n	800322c <HAL_RCC_OscConfig+0xa38>
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	4901      	ldr	r1, [pc, #4]	; (8003228 <HAL_RCC_OscConfig+0xa34>)
 8003222:	4313      	orrs	r3, r2
 8003224:	60cb      	str	r3, [r1, #12]
 8003226:	e01b      	b.n	8003260 <HAL_RCC_OscConfig+0xa6c>
 8003228:	46020c00 	.word	0x46020c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d30a      	bcc.n	800324c <HAL_RCC_OscConfig+0xa58>
 8003236:	4ba1      	ldr	r3, [pc, #644]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	029b      	lsls	r3, r3, #10
 8003244:	499d      	ldr	r1, [pc, #628]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	60cb      	str	r3, [r1, #12]
 800324a:	e009      	b.n	8003260 <HAL_RCC_OscConfig+0xa6c>
 800324c:	4b9b      	ldr	r3, [pc, #620]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	03db      	lsls	r3, r3, #15
 800325a:	4998      	ldr	r1, [pc, #608]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800325c:	4313      	orrs	r3, r2
 800325e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003260:	4b96      	ldr	r3, [pc, #600]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a95      	ldr	r2, [pc, #596]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003266:	f043 0310 	orr.w	r3, r3, #16
 800326a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800326c:	f7fe feea 	bl	8002044 <HAL_GetTick>
 8003270:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003274:	f7fe fee6 	bl	8002044 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e18b      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003286:	4b8d      	ldr	r3, [pc, #564]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xa80>
 8003292:	e018      	b.n	80032c6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003294:	4b89      	ldr	r3, [pc, #548]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a88      	ldr	r2, [pc, #544]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032a0:	f7fe fed0 	bl	8002044 <HAL_GetTick>
 80032a4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80032a8:	f7fe fecc 	bl	8002044 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e171      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80032ba:	4b80      	ldr	r3, [pc, #512]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8166 	beq.w	800359c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d6:	4b79      	ldr	r3, [pc, #484]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	f000 80f2 	beq.w	80034c8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	f040 80c5 	bne.w	8003478 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b73      	ldr	r3, [pc, #460]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a72      	ldr	r2, [pc, #456]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80032f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80032fa:	f7fe fea3 	bl	8002044 <HAL_GetTick>
 80032fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe fe9f 	bl	8002044 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e144      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003314:	4b69      	ldr	r3, [pc, #420]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f0      	bne.n	8003302 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003320:	4b66      	ldr	r3, [pc, #408]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d111      	bne.n	8003352 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4b63      	ldr	r3, [pc, #396]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003334:	4a61      	ldr	r2, [pc, #388]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800333e:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003352:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0xccc>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800335e:	d102      	bne.n	8003366 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003366:	4b56      	ldr	r3, [pc, #344]	; (80034c0 <HAL_RCC_OscConfig+0xccc>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4a55      	ldr	r2, [pc, #340]	; (80034c0 <HAL_RCC_OscConfig+0xccc>)
 800336c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003370:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003372:	4b52      	ldr	r3, [pc, #328]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003386:	3a01      	subs	r2, #1
 8003388:	0212      	lsls	r2, r2, #8
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003390:	430a      	orrs	r2, r1
 8003392:	494a      	ldr	r1, [pc, #296]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003394:	4313      	orrs	r3, r2
 8003396:	628b      	str	r3, [r1, #40]	; 0x28
 8003398:	4b48      	ldr	r3, [pc, #288]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800339a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339c:	4b49      	ldr	r3, [pc, #292]	; (80034c4 <HAL_RCC_OscConfig+0xcd0>)
 800339e:	4013      	ands	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033a4:	3a01      	subs	r2, #1
 80033a6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033ae:	3a01      	subs	r2, #1
 80033b0:	0252      	lsls	r2, r2, #9
 80033b2:	b292      	uxth	r2, r2
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033ba:	3a01      	subs	r2, #1
 80033bc:	0412      	lsls	r2, r2, #16
 80033be:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80033c2:	4311      	orrs	r1, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033c8:	3a01      	subs	r2, #1
 80033ca:	0612      	lsls	r2, r2, #24
 80033cc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80033d0:	430a      	orrs	r2, r1
 80033d2:	493a      	ldr	r1, [pc, #232]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80033d8:	4b38      	ldr	r3, [pc, #224]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	4a37      	ldr	r2, [pc, #220]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80033de:	f023 0310 	bic.w	r3, r3, #16
 80033e2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	4a34      	ldr	r2, [pc, #208]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80033ee:	4b33      	ldr	r3, [pc, #204]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	4a32      	ldr	r2, [pc, #200]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80033fa:	4b30      	ldr	r3, [pc, #192]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	f023 020c 	bic.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	492d      	ldr	r1, [pc, #180]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003408:	4313      	orrs	r3, r2
 800340a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800340c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <HAL_RCC_OscConfig+0xccc>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <HAL_RCC_OscConfig+0xccc>)
 800341a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003420:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342e:	4a23      	ldr	r2, [pc, #140]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800343e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003442:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003450:	f7fe fdf8 	bl	8002044 <HAL_GetTick>
 8003454:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe fdf4 	bl	8002044 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e099      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0xc64>
 8003476:	e091      	b.n	800359c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0f      	ldr	r2, [pc, #60]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003482:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003484:	f7fe fdde 	bl	8002044 <HAL_GetTick>
 8003488:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fdda 	bl	8002044 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e07f      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	4a03      	ldr	r2, [pc, #12]	; (80034bc <HAL_RCC_OscConfig+0xcc8>)
 80034b0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80034b4:	f023 0303 	bic.w	r3, r3, #3
 80034b8:	6293      	str	r3, [r2, #40]	; 0x28
 80034ba:	e06f      	b.n	800359c <HAL_RCC_OscConfig+0xda8>
 80034bc:	46020c00 	.word	0x46020c00
 80034c0:	46020800 	.word	0x46020800
 80034c4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80034c8:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_RCC_OscConfig+0xdb4>)
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCC_OscConfig+0xdb4>)
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d039      	beq.n	8003550 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0203 	and.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d132      	bne.n	8003550 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d129      	bne.n	8003550 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d122      	bne.n	8003550 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d11a      	bne.n	8003550 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	0a5b      	lsrs	r3, r3, #9
 800351e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d111      	bne.n	8003550 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d108      	bne.n	8003550 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	0e1b      	lsrs	r3, r3, #24
 8003542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e024      	b.n	800359e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_RCC_OscConfig+0xdb4>)
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003562:	429a      	cmp	r2, r3
 8003564:	d01a      	beq.n	800359c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_OscConfig+0xdb4>)
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <HAL_RCC_OscConfig+0xdb4>)
 800356c:	f023 0310 	bic.w	r3, r3, #16
 8003570:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f7fe fd67 	bl	8002044 <HAL_GetTick>
 8003576:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003578:	bf00      	nop
 800357a:	f7fe fd63 	bl	8002044 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	4293      	cmp	r3, r2
 8003584:	d0f9      	beq.n	800357a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <HAL_RCC_OscConfig+0xdb4>)
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_OscConfig+0xdb4>)
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_RCC_OscConfig+0xdb4>)
 8003596:	f043 0310 	orr.w	r3, r3, #16
 800359a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3738      	adds	r7, #56	; 0x38
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	46020c00 	.word	0x46020c00

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e1d9      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b9b      	ldr	r3, [pc, #620]	; (8003830 <HAL_RCC_ClockConfig+0x284>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d910      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b98      	ldr	r3, [pc, #608]	; (8003830 <HAL_RCC_ClockConfig+0x284>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 020f 	bic.w	r2, r3, #15
 80035d6:	4996      	ldr	r1, [pc, #600]	; (8003830 <HAL_RCC_ClockConfig+0x284>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b94      	ldr	r3, [pc, #592]	; (8003830 <HAL_RCC_ClockConfig+0x284>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e1c1      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	4b8c      	ldr	r3, [pc, #560]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003608:	429a      	cmp	r2, r3
 800360a:	d908      	bls.n	800361e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800360c:	4b89      	ldr	r3, [pc, #548]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	4986      	ldr	r1, [pc, #536]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 800361a:	4313      	orrs	r3, r2
 800361c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d012      	beq.n	8003650 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	4b81      	ldr	r3, [pc, #516]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003638:	429a      	cmp	r2, r3
 800363a:	d909      	bls.n	8003650 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800363c:	4b7d      	ldr	r3, [pc, #500]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	497a      	ldr	r1, [pc, #488]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 800364c:	4313      	orrs	r3, r2
 800364e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d010      	beq.n	800367e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	4b74      	ldr	r3, [pc, #464]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003668:	429a      	cmp	r2, r3
 800366a:	d908      	bls.n	800367e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b71      	ldr	r3, [pc, #452]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	496e      	ldr	r1, [pc, #440]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 800367a:	4313      	orrs	r3, r2
 800367c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d010      	beq.n	80036ac <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	4b69      	ldr	r3, [pc, #420]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	429a      	cmp	r2, r3
 8003698:	d908      	bls.n	80036ac <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800369a:	4b66      	ldr	r3, [pc, #408]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4963      	ldr	r1, [pc, #396]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80d2 	beq.w	800385e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d143      	bne.n	800374e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4b5b      	ldr	r3, [pc, #364]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 80036c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d110      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b57      	ldr	r3, [pc, #348]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036da:	4a56      	ldr	r2, [pc, #344]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80036f6:	f7fe fca5 	bl	8002044 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80036fc:	4b4e      	ldr	r3, [pc, #312]	; (8003838 <HAL_RCC_ClockConfig+0x28c>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00f      	beq.n	8003728 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800370a:	f7fe fc9b 	bl	8002044 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e12b      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCC_ClockConfig+0x28c>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b41      	ldr	r3, [pc, #260]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003734:	4a3f      	ldr	r2, [pc, #252]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003736:	f023 0304 	bic.w	r3, r3, #4
 800373a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800373e:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d121      	bne.n	800378e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e112      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e106      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0fa      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0f2      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4926      	ldr	r1, [pc, #152]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 800379c:	4313      	orrs	r3, r2
 800379e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80037a0:	f7fe fc50 	bl	8002044 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d112      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fe fc48 	bl	8002044 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0d6      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c6:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b0c      	cmp	r3, #12
 80037d0:	d1ee      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x204>
 80037d2:	e044      	b.n	800385e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d112      	bne.n	8003802 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037de:	f7fe fc31 	bl	8002044 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0bf      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d1ee      	bne.n	80037de <HAL_RCC_ClockConfig+0x232>
 8003800:	e02d      	b.n	800385e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d123      	bne.n	8003852 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fe fc1a 	bl	8002044 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0a8      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_RCC_ClockConfig+0x288>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ee      	bne.n	800380c <HAL_RCC_ClockConfig+0x260>
 800382e:	e016      	b.n	800385e <HAL_RCC_ClockConfig+0x2b2>
 8003830:	40022000 	.word	0x40022000
 8003834:	46020c00 	.word	0x46020c00
 8003838:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fe fc02 	bl	8002044 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e090      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b04      	cmp	r3, #4
 800385c:	d1ee      	bne.n	800383c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d010      	beq.n	800388c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	429a      	cmp	r2, r3
 8003878:	d208      	bcs.n	800388c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800387a:	4b40      	ldr	r3, [pc, #256]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f023 020f 	bic.w	r2, r3, #15
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	493d      	ldr	r1, [pc, #244]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800388c:	4b3c      	ldr	r3, [pc, #240]	; (8003980 <HAL_RCC_ClockConfig+0x3d4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d210      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_ClockConfig+0x3d4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 020f 	bic.w	r2, r3, #15
 80038a2:	4937      	ldr	r1, [pc, #220]	; (8003980 <HAL_RCC_ClockConfig+0x3d4>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b35      	ldr	r3, [pc, #212]	; (8003980 <HAL_RCC_ClockConfig+0x3d4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e05b      	b.n	8003974 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d208      	bcs.n	80038ea <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4925      	ldr	r1, [pc, #148]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d012      	beq.n	800391c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003904:	429a      	cmp	r2, r3
 8003906:	d209      	bcs.n	800391c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	4919      	ldr	r1, [pc, #100]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003934:	429a      	cmp	r2, r3
 8003936:	d208      	bcs.n	800394a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003938:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	490d      	ldr	r1, [pc, #52]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800394a:	f000 f821 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x3d0>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	490a      	ldr	r1, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x3d8>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x3dc>)
 8003962:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x3e0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fb21 	bl	8001fb0 <HAL_InitTick>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	46020c00 	.word	0x46020c00
 8003980:	40022000 	.word	0x40022000
 8003984:	08009070 	.word	0x08009070
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b08b      	sub	sp, #44	; 0x2c
 8003994:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399e:	4b78      	ldr	r3, [pc, #480]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a8:	4b75      	ldr	r3, [pc, #468]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x34>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	d121      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d11e      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80039c4:	4b6e      	ldr	r3, [pc, #440]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80039d0:	4b6b      	ldr	r3, [pc, #428]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039d6:	0b1b      	lsrs	r3, r3, #12
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
 80039de:	e005      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80039e0:	4b67      	ldr	r3, [pc, #412]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	0f1b      	lsrs	r3, r3, #28
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039ec:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d110      	bne.n	8003a1e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a00:	e00d      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a02:	4b5f      	ldr	r3, [pc, #380]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a0e:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003a10:	623b      	str	r3, [r7, #32]
 8003a12:	e004      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a1a:	4b5b      	ldr	r3, [pc, #364]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003a1c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b0c      	cmp	r3, #12
 8003a22:	f040 80a5 	bne.w	8003b70 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a26:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a30:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003a3e:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a4a:	4b4d      	ldr	r3, [pc, #308]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	08db      	lsrs	r3, r3, #3
 8003a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d022      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x128>
 8003a72:	e043      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003b8c <HAL_RCC_GetSysClockFreq+0x1fc>
 8003a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a86:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a96:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a9a:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x200>
 8003a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ab6:	e046      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac2:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003b8c <HAL_RCC_GetSysClockFreq+0x1fc>
 8003ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aca:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ada:	ed97 6a01 	vldr	s12, [r7, #4]
 8003ade:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x200>
 8003ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003afa:	e024      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b24:	ed97 6a01 	vldr	s12, [r7, #4]
 8003b28:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x200>
 8003b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b44:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	0e1b      	lsrs	r3, r3, #24
 8003b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b50:	3301      	adds	r3, #1
 8003b52:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b6a:	ee17 3a90 	vmov	r3, s15
 8003b6e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003b70:	6a3b      	ldr	r3, [r7, #32]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	372c      	adds	r7, #44	; 0x2c
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	46020c00 	.word	0x46020c00
 8003b84:	08009088 	.word	0x08009088
 8003b88:	00f42400 	.word	0x00f42400
 8003b8c:	4b742400 	.word	0x4b742400
 8003b90:	46000000 	.word	0x46000000

08003b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b98:	f7ff fefa 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x28>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4906      	ldr	r1, [pc, #24]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8003bb0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003bb2:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	46020c00 	.word	0x46020c00
 8003bc0:	08009070 	.word	0x08009070
 8003bc4:	20000000 	.word	0x20000000

08003bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003bcc:	f7ff ffe2 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4903      	ldr	r1, [pc, #12]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	46020c00 	.word	0x46020c00
 8003bec:	08009080 	.word	0x08009080

08003bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003bf4:	f7ff ffce 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	46020c00 	.word	0x46020c00
 8003c14:	08009080 	.word	0x08009080

08003c18 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003c1c:	f7ff ffba 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4903      	ldr	r1, [pc, #12]	; (8003c3c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	46020c00 	.word	0x46020c00
 8003c3c:	08009080 	.word	0x08009080

08003c40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c48:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c56:	f7fe fdbf 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 8003c5a:	6178      	str	r0, [r7, #20]
 8003c5c:	e019      	b.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c64:	4a37      	ldr	r2, [pc, #220]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c7c:	f7fe fdac 	bl	80027d8 <HAL_PWREx_GetVoltageRange>
 8003c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b30      	ldr	r3, [pc, #192]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c88:	4a2e      	ldr	r2, [pc, #184]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c98:	d003      	beq.n	8003ca2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca0:	d109      	bne.n	8003cb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca8:	d202      	bcs.n	8003cb0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003caa:	2301      	movs	r3, #1
 8003cac:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003cae:	e033      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003cb4:	e030      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cbc:	d208      	bcs.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d102      	bne.n	8003ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e025      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e035      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd6:	d90f      	bls.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ce4:	d902      	bls.n	8003cec <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	e015      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003cec:	2301      	movs	r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e012      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	e00f      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cfe:	d109      	bne.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d06:	d102      	bne.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003d08:	2301      	movs	r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	e004      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003d0e:	2302      	movs	r3, #2
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e001      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003d14:	2301      	movs	r3, #1
 8003d16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 020f 	bic.w	r2, r3, #15
 8003d20:	4909      	ldr	r1, [pc, #36]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d001      	beq.n	8003d3a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	46020c00 	.word	0x46020c00
 8003d48:	40022000 	.word	0x40022000

08003d4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d50:	b0b4      	sub	sp, #208	; 0xd0
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f002 0401 	and.w	r4, r2, #1
 8003d70:	2500      	movs	r5, #0
 8003d72:	ea54 0305 	orrs.w	r3, r4, r5
 8003d76:	d00b      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003d78:	4bc4      	ldr	r3, [pc, #784]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d7e:	f023 0103 	bic.w	r1, r3, #3
 8003d82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d88:	4ac0      	ldr	r2, [pc, #768]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f002 0804 	and.w	r8, r2, #4
 8003d9c:	f04f 0900 	mov.w	r9, #0
 8003da0:	ea58 0309 	orrs.w	r3, r8, r9
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003da6:	4bb9      	ldr	r3, [pc, #740]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003db0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	4ab5      	ldr	r2, [pc, #724]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f002 0a08 	and.w	sl, r2, #8
 8003dca:	f04f 0b00 	mov.w	fp, #0
 8003dce:	ea5a 030b 	orrs.w	r3, sl, fp
 8003dd2:	d00b      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003dd4:	4bad      	ldr	r3, [pc, #692]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	4aa9      	ldr	r2, [pc, #676]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f002 0310 	and.w	r3, r2, #16
 8003df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003e0c:	4b9f      	ldr	r3, [pc, #636]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	4a9b      	ldr	r2, [pc, #620]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f002 0320 	and.w	r3, r2, #32
 8003e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e3a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003e44:	4b91      	ldr	r3, [pc, #580]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e4a:	f023 0107 	bic.w	r1, r3, #7
 8003e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e54:	4a8d      	ldr	r2, [pc, #564]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e72:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	d00b      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003e7c:	4b83      	ldr	r3, [pc, #524]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e82:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003e86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8c:	4a7f      	ldr	r2, [pc, #508]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eaa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003eb4:	4b75      	ldr	r3, [pc, #468]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ebe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec4:	4a71      	ldr	r2, [pc, #452]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ecc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ee2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003eec:	4b67      	ldr	r3, [pc, #412]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ef2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ef6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efc:	4a63      	ldr	r2, [pc, #396]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003efe:	430b      	orrs	r3, r1
 8003f00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f1a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003f24:	4b59      	ldr	r3, [pc, #356]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f2a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003f2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a55      	ldr	r2, [pc, #340]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003f36:	430b      	orrs	r3, r1
 8003f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003f5c:	4b4b      	ldr	r3, [pc, #300]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f62:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003f66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6c:	4a47      	ldr	r2, [pc, #284]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f82:	2300      	movs	r3, #0
 8003f84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f86:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003f90:	4b3e      	ldr	r3, [pc, #248]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f96:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003f9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa0:	4a3a      	ldr	r2, [pc, #232]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003fa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003fb4:	673b      	str	r3, [r7, #112]	; 0x70
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	677b      	str	r3, [r7, #116]	; 0x74
 8003fba:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d00b      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003fc4:	4b31      	ldr	r3, [pc, #196]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd4:	4a2d      	ldr	r2, [pc, #180]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fea:	2300      	movs	r3, #0
 8003fec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d04f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	2b80      	cmp	r3, #128	; 0x80
 8004002:	d02d      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d827      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004008:	2b60      	cmp	r3, #96	; 0x60
 800400a:	d02b      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800400c:	2b60      	cmp	r3, #96	; 0x60
 800400e:	d823      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d006      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d81f      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800401c:	2b20      	cmp	r3, #32
 800401e:	d011      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8004020:	e01a      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004022:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	4a19      	ldr	r2, [pc, #100]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800402e:	e01a      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004034:	3308      	adds	r3, #8
 8004036:	4618      	mov	r0, r3
 8004038:	f002 f8cc 	bl	80061d4 <RCCEx_PLL2_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004042:	e010      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004044:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004048:	332c      	adds	r3, #44	; 0x2c
 800404a:	4618      	mov	r0, r3
 800404c:	f002 f95a 	bl	8006304 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004056:	e006      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800405e:	e002      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8004060:	bf00      	nop
 8004062:	e000      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8004064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004066:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800406a:	2b00      	cmp	r3, #0
 800406c:	d110      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004070:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004074:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800407c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004080:	4a02      	ldr	r2, [pc, #8]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004082:	430b      	orrs	r3, r1
 8004084:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004088:	e006      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800408a:	bf00      	nop
 800408c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004094:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004098:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80040a4:	663b      	str	r3, [r7, #96]	; 0x60
 80040a6:	2300      	movs	r3, #0
 80040a8:	667b      	str	r3, [r7, #100]	; 0x64
 80040aa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80040ae:	460b      	mov	r3, r1
 80040b0:	4313      	orrs	r3, r2
 80040b2:	d046      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80040b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040bc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040c0:	d028      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80040c2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040c6:	d821      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040cc:	d022      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80040ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d2:	d81b      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d8:	d01c      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80040da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040de:	d815      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80040e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ea:	d80f      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d011      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f4:	d00e      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80040f6:	e009      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040fc:	3308      	adds	r3, #8
 80040fe:	4618      	mov	r0, r3
 8004100:	f002 f868 	bl	80061d4 <RCCEx_PLL2_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800410a:	e004      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004112:	e000      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        break;
 8004114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004116:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10d      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800411e:	4bb6      	ldr	r3, [pc, #728]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004124:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004128:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800412c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004130:	4ab1      	ldr	r2, [pc, #708]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004132:	430b      	orrs	r3, r1
 8004134:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004138:	e003      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800413e:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004142:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800414e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004150:	2300      	movs	r3, #0
 8004152:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004154:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004158:	460b      	mov	r3, r1
 800415a:	4313      	orrs	r3, r2
 800415c:	d03e      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800415e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004166:	2b04      	cmp	r3, #4
 8004168:	d81d      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041af 	.word	0x080041af
 8004174:	08004185 	.word	0x08004185
 8004178:	08004193 	.word	0x08004193
 800417c:	080041af 	.word	0x080041af
 8004180:	080041af 	.word	0x080041af
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004184:	4b9c      	ldr	r3, [pc, #624]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	4a9b      	ldr	r2, [pc, #620]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800418a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004190:	e00e      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004196:	332c      	adds	r3, #44	; 0x2c
 8004198:	4618      	mov	r0, r3
 800419a:	f002 f8b3 	bl	8006304 <RCCEx_PLL3_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 80041a4:	e004      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
        break;
 80041ae:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041b0:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80041b8:	4b8f      	ldr	r3, [pc, #572]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80041ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041be:	f023 0107 	bic.w	r1, r3, #7
 80041c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ca:	4a8b      	ldr	r2, [pc, #556]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80041d8:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80041dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80041e8:	653b      	str	r3, [r7, #80]	; 0x50
 80041ea:	2300      	movs	r3, #0
 80041ec:	657b      	str	r3, [r7, #84]	; 0x54
 80041ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d04a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80041f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004204:	d028      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004206:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800420a:	d821      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800420c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004210:	d024      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004216:	d81b      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800421c:	d00e      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800421e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004222:	d815      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01b      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d110      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800422e:	4b72      	ldr	r3, [pc, #456]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	4a71      	ldr	r2, [pc, #452]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004238:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800423a:	e012      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800423c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004240:	332c      	adds	r3, #44	; 0x2c
 8004242:	4618      	mov	r0, r3
 8004244:	f002 f85e 	bl	8006304 <RCCEx_PLL3_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800424e:	e008      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004256:	e004      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8004260:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004262:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10d      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800426a:	4b63      	ldr	r3, [pc, #396]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800426c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004270:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	4a5e      	ldr	r2, [pc, #376]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800427e:	430b      	orrs	r3, r1
 8004280:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x542>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800428a:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800428e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800429a:	64bb      	str	r3, [r7, #72]	; 0x48
 800429c:	2300      	movs	r3, #0
 800429e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80042a4:	460b      	mov	r3, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f000 80ba 	beq.w	8004420 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b2:	4b51      	ldr	r3, [pc, #324]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d113      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b4d      	ldr	r3, [pc, #308]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80042c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c6:	4a4c      	ldr	r2, [pc, #304]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80042d0:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
      pwrclkchanged = SET;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80042e8:	4b44      	ldr	r3, [pc, #272]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	4a43      	ldr	r2, [pc, #268]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042f4:	f7fd fea6 	bl	8002044 <HAL_GetTick>
 80042f8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042fc:	e00b      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fe:	f7fd fea1 	bl	8002044 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d903      	bls.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      {
        ret = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004314:	e005      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ed      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      }
    }

    if (ret == HAL_OK)
 8004322:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004326:	2b00      	cmp	r3, #0
 8004328:	d16a      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800432a:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800432c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800433c:	2b00      	cmp	r3, #0
 800433e:	d023      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004344:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800434c:	4293      	cmp	r3, r2
 800434e:	d01b      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x63c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004350:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004364:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800436e:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004374:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800437e:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d019      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fe56 	bl	8002044 <HAL_GetTick>
 8004398:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800439c:	e00d      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fd fe51 	bl	8002044 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043a8:	1ad2      	subs	r2, r2, r3
 80043aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d903      	bls.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
            break;
 80043b8:	e006      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80043bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ea      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if (ret == HAL_OK)
 80043c8:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10d      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80043d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043e2:	4a05      	ldr	r2, [pc, #20]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 80043e4:	430b      	orrs	r3, r1
 80043e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80043ea:	e00d      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ec:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80043f0:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 80043f4:	e008      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80043f6:	bf00      	nop
 80043f8:	46020c00 	.word	0x46020c00
 80043fc:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004404:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004408:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004410:	4bc0      	ldr	r3, [pc, #768]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004416:	4abf      	ldr	r2, [pc, #764]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004418:	f023 0304 	bic.w	r3, r3, #4
 800441c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004420:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	2300      	movs	r3, #0
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
 8004432:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d042      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x776>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800443c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004444:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004448:	d022      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x744>
 800444a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800444e:	d81b      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8004450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004454:	d011      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8004456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445a:	d815      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d019      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004464:	d110      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004466:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800446a:	3308      	adds	r3, #8
 800446c:	4618      	mov	r0, r3
 800446e:	f001 feb1 	bl	80061d4 <RCCEx_PLL2_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004478:	e00d      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447a:	4ba6      	ldr	r3, [pc, #664]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	4aa5      	ldr	r2, [pc, #660]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004484:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004486:	e006      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800448e:	e002      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8004490:	bf00      	nop
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8004494:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004496:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10d      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x76e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800449e:	4b9d      	ldr	r3, [pc, #628]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80044a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80044a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b0:	4a98      	ldr	r2, [pc, #608]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80044be:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80044ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80044d0:	2300      	movs	r3, #0
 80044d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d02d      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80044de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ea:	d00b      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80044ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f0:	d804      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fa:	d007      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004502:	e004      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8004504:	bf00      	nop
 8004506:	e002      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8004508:	bf00      	nop
 800450a:	e000      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 800450c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800450e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10d      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004516:	4b7f      	ldr	r3, [pc, #508]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004518:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800451c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004520:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	4a7a      	ldr	r2, [pc, #488]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800452a:	430b      	orrs	r3, r1
 800452c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004530:	e003      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004536:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800453a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
 8004548:	2300      	movs	r3, #0
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
 800454c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004550:	460b      	mov	r3, r1
 8004552:	4313      	orrs	r3, r2
 8004554:	d019      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004556:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800455a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800455e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004562:	d105      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004564:	4b6b      	ldr	r3, [pc, #428]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	4a6a      	ldr	r2, [pc, #424]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800456a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004570:	4b68      	ldr	r3, [pc, #416]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004576:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800457a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800457e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004582:	4a64      	ldr	r2, [pc, #400]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004584:	430b      	orrs	r3, r1
 8004586:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800458a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d00c      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80045a6:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80045a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045b8:	4956      	ldr	r1, [pc, #344]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80045c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d00c      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80045de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045ee:	4949      	ldr	r1, [pc, #292]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80045f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800460c:	460b      	mov	r3, r1
 800460e:	4313      	orrs	r3, r2
 8004610:	d00c      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004612:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004618:	f023 0218 	bic.w	r2, r3, #24
 800461c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004624:	493b      	ldr	r1, [pc, #236]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800462c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004642:	460b      	mov	r3, r1
 8004644:	4313      	orrs	r3, r2
 8004646:	d032      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x962>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800464c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004654:	d105      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004656:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	4a2e      	ldr	r2, [pc, #184]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800465c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004660:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004662:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004666:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800466a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800466e:	d108      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x936>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004670:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004674:	3308      	adds	r3, #8
 8004676:	4618      	mov	r0, r3
 8004678:	f001 fdac 	bl	80061d4 <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }
    if (ret == HAL_OK)
 8004682:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10d      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800468c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800469c:	491d      	ldr	r1, [pc, #116]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80046a4:	e003      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x962>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80046aa:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80046ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046c4:	460b      	mov	r3, r1
 80046c6:	4313      	orrs	r3, r2
 80046c8:	d03d      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80046ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046d6:	d00e      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 80046d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046dc:	d815      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80046e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e6:	d110      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x9be>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	4a09      	ldr	r2, [pc, #36]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80046ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80046f4:	e011      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046fa:	3308      	adds	r3, #8
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 fd69 	bl	80061d4 <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004708:	e007      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      default:
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004710:	e003      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8004712:	bf00      	nop
 8004714:	46020c00 	.word	0x46020c00
        break;
 8004718:	bf00      	nop
    }
    if (ret == HAL_OK)
 800471a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8004724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004728:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800472c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004734:	4915      	ldr	r1, [pc, #84]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800473c:	e003      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004742:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	e9d7 1200 	ldrd	r1, r2, [r7]
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d00c      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8004764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004768:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800476c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004774:	4905      	ldr	r1, [pc, #20]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800477c:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
}
 8004780:	4618      	mov	r0, r3
 8004782:	37d0      	adds	r7, #208	; 0xd0
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478a:	bf00      	nop
 800478c:	46020c00 	.word	0x46020c00

08004790 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004798:	4ba6      	ldr	r3, [pc, #664]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80047a2:	4ba4      	ldr	r3, [pc, #656]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80047ac:	4ba1      	ldr	r3, [pc, #644]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	3301      	adds	r3, #1
 80047b8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80047ba:	4b9e      	ldr	r3, [pc, #632]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80047c6:	4b9b      	ldr	r3, [pc, #620]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d062      	beq.n	80048ae <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	f200 8081 	bhi.w	80048f2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d024      	beq.n	8004840 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d17a      	bne.n	80048f2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b89      	ldr	r3, [pc, #548]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800481e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004822:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800482e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800483e:	e08f      	b.n	8004960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004840:	4b7c      	ldr	r3, [pc, #496]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800484c:	4b79      	ldr	r3, [pc, #484]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	0f1b      	lsrs	r3, r3, #28
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	e006      	b.n	8004866 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8004858:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800485a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	0f1b      	lsrs	r3, r3, #28
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	4a76      	ldr	r2, [pc, #472]	; (8004a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	ee07 3a90 	vmov	s15, r3
 8004888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004890:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80048a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ac:	e058      	b.n	8004960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80048bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c0:	4b5c      	ldr	r3, [pc, #368]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80048d4:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80048d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048f0:	e036      	b.n	8004960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80048f2:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80048fe:	4b4d      	ldr	r3, [pc, #308]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0f1b      	lsrs	r3, r3, #28
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	e006      	b.n	8004918 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800490a:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800490c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	0f1b      	lsrs	r3, r3, #28
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	4a49      	ldr	r2, [pc, #292]	; (8004a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800491a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004942:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004952:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800495e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004960:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d017      	beq.n	800499c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800496c:	4b31      	ldr	r3, [pc, #196]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800497e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004982:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004986:	edd7 6a07 	vldr	s13, [r7, #28]
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 2a90 	vmov	r2, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e002      	b.n	80049a2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d017      	beq.n	80049de <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80049c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d4:	ee17 2a90 	vmov	r2, s15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049f0:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	0e1b      	lsrs	r3, r3, #24
 80049f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a06:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 2a90 	vmov	r2, s15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004a1e:	e002      	b.n	8004a26 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
}
 8004a26:	bf00      	nop
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	46020c00 	.word	0x46020c00
 8004a38:	4b742400 	.word	0x4b742400
 8004a3c:	46000000 	.word	0x46000000
 8004a40:	08009088 	.word	0x08009088

08004a44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b089      	sub	sp, #36	; 0x24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004a4c:	4ba6      	ldr	r3, [pc, #664]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a54:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004a56:	4ba4      	ldr	r3, [pc, #656]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004a60:	4ba1      	ldr	r3, [pc, #644]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	0a1b      	lsrs	r3, r3, #8
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004a6e:	4b9e      	ldr	r3, [pc, #632]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004a7a:	4b9b      	ldr	r3, [pc, #620]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	08db      	lsrs	r3, r3, #3
 8004a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d062      	beq.n	8004b62 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	f200 8081 	bhi.w	8004ba6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d024      	beq.n	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d17a      	bne.n	8004ba6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b89      	ldr	r3, [pc, #548]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ad6:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004af2:	e08f      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004af4:	4b7c      	ldr	r3, [pc, #496]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004b00:	4b79      	ldr	r3, [pc, #484]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	0f1b      	lsrs	r3, r3, #28
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	e006      	b.n	8004b1a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004b0c:	4b76      	ldr	r3, [pc, #472]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	0f1b      	lsrs	r3, r3, #28
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	4a76      	ldr	r2, [pc, #472]	; (8004cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b44:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b60:	e058      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004b70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b74:	4b5c      	ldr	r3, [pc, #368]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b88:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004b8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004b90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ba4:	e036      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004ba6:	4b50      	ldr	r3, [pc, #320]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8004bb2:	4b4d      	ldr	r3, [pc, #308]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	0f1b      	lsrs	r3, r3, #28
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	e006      	b.n	8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8004bbe:	4b4a      	ldr	r3, [pc, #296]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	0f1b      	lsrs	r3, r3, #28
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	4a49      	ldr	r2, [pc, #292]	; (8004cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bf6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c12:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004c14:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d017      	beq.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c20:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c24:	0a5b      	lsrs	r3, r3, #9
 8004c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c36:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c46:	ee17 2a90 	vmov	r2, s15
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e002      	b.n	8004c56 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d017      	beq.n	8004c92 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c62:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c78:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c88:	ee17 2a90 	vmov	r2, s15
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	605a      	str	r2, [r3, #4]
 8004c90:	e002      	b.n	8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004c98:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d017      	beq.n	8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ca4:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cca:	ee17 2a90 	vmov	r2, s15
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cd2:	e002      	b.n	8004cda <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
}
 8004cda:	bf00      	nop
 8004cdc:	3724      	adds	r7, #36	; 0x24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	46020c00 	.word	0x46020c00
 8004cec:	4b742400 	.word	0x4b742400
 8004cf0:	46000000 	.word	0x46000000
 8004cf4:	08009088 	.word	0x08009088

08004cf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004d00:	4ba6      	ldr	r3, [pc, #664]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d08:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004d0a:	4ba4      	ldr	r3, [pc, #656]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004d14:	4ba1      	ldr	r3, [pc, #644]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	0a1b      	lsrs	r3, r3, #8
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	3301      	adds	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004d22:	4b9e      	ldr	r3, [pc, #632]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004d2e:	4b9b      	ldr	r3, [pc, #620]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	fb02 f303 	mul.w	r3, r2, r3
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d062      	beq.n	8004e16 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	f200 8081 	bhi.w	8004e5a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d024      	beq.n	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d17a      	bne.n	8004e5a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b89      	ldr	r3, [pc, #548]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d8a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004da6:	e08f      	b.n	8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004da8:	4b7c      	ldr	r3, [pc, #496]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004db4:	4b79      	ldr	r3, [pc, #484]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	0f1b      	lsrs	r3, r3, #28
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	e006      	b.n	8004dce <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004dc0:	4b76      	ldr	r3, [pc, #472]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	0f1b      	lsrs	r3, r3, #28
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	4a76      	ldr	r2, [pc, #472]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004df8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e14:	e058      	b.n	8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	ee07 3a90 	vmov	s15, r3
 8004e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e20:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e28:	4b5c      	ldr	r3, [pc, #368]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e38:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e3c:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e58:	e036      	b.n	8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004e5a:	4b50      	ldr	r3, [pc, #320]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004e66:	4b4d      	ldr	r3, [pc, #308]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0f1b      	lsrs	r3, r3, #28
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	e006      	b.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004e72:	4b4a      	ldr	r3, [pc, #296]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e78:	041b      	lsls	r3, r3, #16
 8004e7a:	0f1b      	lsrs	r3, r3, #28
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	4a49      	ldr	r2, [pc, #292]	; (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eaa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ec6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004ec8:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d017      	beq.n	8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ed4:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed8:	0a5b      	lsrs	r3, r3, #9
 8004eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efa:	ee17 2a90 	vmov	r2, s15
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e002      	b.n	8004f0a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004f0a:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d017      	beq.n	8004f46 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f16:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	0c1b      	lsrs	r3, r3, #16
 8004f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3c:	ee17 2a90 	vmov	r2, s15
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	e002      	b.n	8004f4c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d017      	beq.n	8004f88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f58:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	0e1b      	lsrs	r3, r3, #24
 8004f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7e:	ee17 2a90 	vmov	r2, s15
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f86:	e002      	b.n	8004f8e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	609a      	str	r2, [r3, #8]
}
 8004f8e:	bf00      	nop
 8004f90:	3724      	adds	r7, #36	; 0x24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	46020c00 	.word	0x46020c00
 8004fa0:	4b742400 	.word	0x4b742400
 8004fa4:	46000000 	.word	0x46000000
 8004fa8:	08009088 	.word	0x08009088

08004fac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08e      	sub	sp, #56	; 0x38
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fba:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	d145      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004fc2:	4bac      	ldr	r3, [pc, #688]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fcc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004fce:	4ba9      	ldr	r3, [pc, #676]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d108      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe2:	d104      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fea:	f001 b8e3 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004fee:	4ba1      	ldr	r3, [pc, #644]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffc:	d114      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005004:	d110      	bne.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005006:	4b9b      	ldr	r3, [pc, #620]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800500c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005014:	d103      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005016:	23fa      	movs	r3, #250	; 0xfa
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800501a:	f001 b8cb 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 800501e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005024:	f001 b8c6 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005028:	4b92      	ldr	r3, [pc, #584]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005034:	d107      	bne.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503c:	d103      	bne.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800503e:	4b8e      	ldr	r3, [pc, #568]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
 8005042:	f001 b8b7 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	f001 b8b3 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800504e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005052:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005056:	430b      	orrs	r3, r1
 8005058:	d151      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800505a:	4b86      	ldr	r3, [pc, #536]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800505c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005060:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005064:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d035      	beq.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2b80      	cmp	r3, #128	; 0x80
 8005070:	d841      	bhi.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	2b60      	cmp	r3, #96	; 0x60
 8005076:	d02a      	beq.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	2b60      	cmp	r3, #96	; 0x60
 800507c:	d83b      	bhi.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d009      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d835      	bhi.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	2b20      	cmp	r3, #32
 8005094:	d012      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005096:	e02e      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fb77 	bl	8004790 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050a6:	f001 b885 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050aa:	f107 0318 	add.w	r3, r7, #24
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fcc8 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050b8:	f001 b87c 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fe19 	bl	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050ca:	f001 b873 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80050ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050d4:	f001 b86e 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050d8:	4b66      	ldr	r3, [pc, #408]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e4:	d103      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80050e6:	4b65      	ldr	r3, [pc, #404]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050ea:	f001 b863 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050f2:	f001 b85f 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :
      {
        frequency = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050fa:	f001 b85b 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80050fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005102:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005106:	430b      	orrs	r3, r1
 8005108:	d165      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800510a:	4b5a      	ldr	r3, [pc, #360]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800510c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005110:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005114:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800511c:	d034      	beq.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005124:	d853      	bhi.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800512c:	d00b      	beq.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005134:	d84b      	bhi.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d016      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005142:	d009      	beq.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005144:	e043      	b.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x222>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fb20 	bl	8004790 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005154:	f001 b82e 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005158:	f107 0318 	add.w	r3, r7, #24
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fc71 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005166:	f001 b825 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800516a:	4b42      	ldr	r3, [pc, #264]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005176:	d103      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        {
          frequency = HSI48_VALUE;
 8005178:	4b41      	ldr	r3, [pc, #260]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800517c:	f001 b81a 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005184:	f001 b816 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005188:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b20      	cmp	r3, #32
 8005192:	d118      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005194:	4b37      	ldr	r3, [pc, #220]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 80051a0:	4b34      	ldr	r3, [pc, #208]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	0e1b      	lsrs	r3, r3, #24
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	e006      	b.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80051ac:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80051ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	0e1b      	lsrs	r3, r3, #24
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	4a32      	ldr	r2, [pc, #200]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80051c2:	f000 bff7 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051ca:	f000 bff3 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :

        frequency = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051d2:	f000 bfef 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80051d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051da:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80051de:	430b      	orrs	r3, r1
 80051e0:	f040 808a 	bne.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80051e4:	4b23      	ldr	r3, [pc, #140]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80051e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ee:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d16f      	bne.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80051f6:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80051f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051fc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005200:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005208:	d03e      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005210:	d85d      	bhi.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005218:	d00b      	beq.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005220:	d855      	bhi.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	2b00      	cmp	r3, #0
 8005226:	d016      	beq.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800522e:	d009      	beq.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8005230:	e04d      	b.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x322>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff faaa 	bl	8004790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005240:	f000 bfb8 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005244:	f107 0318 	add.w	r3, r7, #24
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fbfb 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005252:	f000 bfaf 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005262:	d103      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          {
            frequency = HSI48_VALUE;
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005268:	f000 bfa4 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005270:	f000 bfa0 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8005274:	46020c00 	.word	0x46020c00
 8005278:	0007a120 	.word	0x0007a120
 800527c:	00f42400 	.word	0x00f42400
 8005280:	02dc6c00 	.word	0x02dc6c00
 8005284:	08009088 	.word	0x08009088
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005288:	4bab      	ldr	r3, [pc, #684]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b20      	cmp	r3, #32
 8005292:	d118      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005294:	4ba8      	ldr	r3, [pc, #672]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80052a0:	4ba5      	ldr	r3, [pc, #660]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	0e1b      	lsrs	r3, r3, #24
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	e006      	b.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80052ac:	4ba2      	ldr	r3, [pc, #648]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	0e1b      	lsrs	r3, r3, #24
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	4aa0      	ldr	r2, [pc, #640]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80052bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80052c2:	f000 bf77 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80052ca:	f000 bf73 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        default :
        {
          frequency = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80052d2:	f000 bf6f 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052dc:	d108      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fa54 	bl	8004790 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
 80052ec:	f000 bf62 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else
    {
      frequency = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
 80052f4:	f000 bf5e 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80052f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052fc:	1e51      	subs	r1, r2, #1
 80052fe:	430b      	orrs	r3, r1
 8005300:	d136      	bne.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005302:	4b8d      	ldr	r3, [pc, #564]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005314:	f7fe fc6c 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 8005318:	6378      	str	r0, [r7, #52]	; 0x34
 800531a:	f000 bf4b 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2b01      	cmp	r3, #1
 8005322:	d104      	bne.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005324:	f7fe fb34 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005328:	6378      	str	r0, [r7, #52]	; 0x34
 800532a:	f000 bf43 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800532e:	4b82      	ldr	r3, [pc, #520]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533a:	d106      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2b02      	cmp	r3, #2
 8005340:	d103      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
    {
      frequency = HSI_VALUE;
 8005342:	4b7f      	ldr	r3, [pc, #508]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
 8005346:	f000 bf35 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800534a:	4b7b      	ldr	r3, [pc, #492]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800534c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d107      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2b03      	cmp	r3, #3
 800535c:	d104      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
    {
      frequency = LSE_VALUE;
 800535e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
 8005364:	f000 bf26 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
 800536c:	f000 bf22 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005374:	1f11      	subs	r1, r2, #4
 8005376:	430b      	orrs	r3, r1
 8005378:	d136      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800537a:	4b6f      	ldr	r3, [pc, #444]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800537c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005384:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800538c:	f7fe fc1c 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005390:	6378      	str	r0, [r7, #52]	; 0x34
 8005392:	f000 bf0f 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	2b10      	cmp	r3, #16
 800539a:	d104      	bne.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800539c:	f7fe faf8 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80053a0:	6378      	str	r0, [r7, #52]	; 0x34
 80053a2:	f000 bf07 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80053a6:	4b64      	ldr	r3, [pc, #400]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b2:	d106      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d103      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      frequency = HSI_VALUE;
 80053ba:	4b61      	ldr	r3, [pc, #388]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
 80053be:	f000 bef9 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80053c2:	4b5d      	ldr	r3, [pc, #372]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d107      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2b30      	cmp	r3, #48	; 0x30
 80053d4:	d104      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
    {
      frequency = LSE_VALUE;
 80053d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
 80053dc:	f000 beea 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	637b      	str	r3, [r7, #52]	; 0x34
 80053e4:	f000 bee6 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80053e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ec:	f1a2 0108 	sub.w	r1, r2, #8
 80053f0:	430b      	orrs	r3, r1
 80053f2:	d136      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80053f4:	4b50      	ldr	r3, [pc, #320]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005406:	f7fe fbdf 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 800540a:	6378      	str	r0, [r7, #52]	; 0x34
 800540c:	f000 bed2 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d104      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005416:	f7fe fabb 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800541a:	6378      	str	r0, [r7, #52]	; 0x34
 800541c:	f000 beca 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005420:	4b45      	ldr	r3, [pc, #276]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542c:	d106      	bne.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d103      	bne.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = HSI_VALUE;
 8005434:	4b42      	ldr	r3, [pc, #264]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
 8005438:	f000 bebc 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800543c:	4b3e      	ldr	r3, [pc, #248]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800543e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d107      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	2bc0      	cmp	r3, #192	; 0xc0
 800544e:	d104      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
    {
      frequency = LSE_VALUE;
 8005450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
 8005456:	f000 bead 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
 800545e:	f000 bea9 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005466:	f1a2 0110 	sub.w	r1, r2, #16
 800546a:	430b      	orrs	r3, r1
 800546c:	d139      	bne.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800546e:	4b32      	ldr	r3, [pc, #200]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005478:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe fba2 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005484:	6378      	str	r0, [r7, #52]	; 0x34
 8005486:	f000 be95 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005490:	d104      	bne.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005492:	f7fe fa7d 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005496:	6378      	str	r0, [r7, #52]	; 0x34
 8005498:	f000 be8c 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800549c:	4b26      	ldr	r3, [pc, #152]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a8:	d107      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b0:	d103      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HSI_VALUE;
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
 80054b6:	f000 be7d 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80054ba:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d108      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ce:	d104      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
    {
      frequency = LSE_VALUE;
 80054d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
 80054d6:	f000 be6d 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
 80054de:	f000 be69 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80054e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e6:	f1a2 0120 	sub.w	r1, r2, #32
 80054ea:	430b      	orrs	r3, r1
 80054ec:	d15f      	bne.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x602>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005500:	f7fe fb8a 	bl	8003c18 <HAL_RCC_GetPCLK3Freq>
 8005504:	6378      	str	r0, [r7, #52]	; 0x34
 8005506:	f000 be55 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2b01      	cmp	r3, #1
 800550e:	d104      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005510:	f7fe fa3e 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005514:	6378      	str	r0, [r7, #52]	; 0x34
 8005516:	f000 be4d 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005526:	d10d      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	2b02      	cmp	r3, #2
 800552c:	d10a      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HSI_VALUE;
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	f000 be3f 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8005536:	bf00      	nop
 8005538:	46020c00 	.word	0x46020c00
 800553c:	08009088 	.word	0x08009088
 8005540:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005544:	4baf      	ldr	r3, [pc, #700]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b02      	cmp	r3, #2
 8005550:	d107      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2b03      	cmp	r3, #3
 8005556:	d104      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = LSE_VALUE;
 8005558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555c:	637b      	str	r3, [r7, #52]	; 0x34
 800555e:	f000 be29 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005562:	4ba8      	ldr	r3, [pc, #672]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b20      	cmp	r3, #32
 800556c:	d11b      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	2b04      	cmp	r3, #4
 8005572:	d118      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005574:	4ba3      	ldr	r3, [pc, #652]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 8005580:	4ba0      	ldr	r3, [pc, #640]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	0e1b      	lsrs	r3, r3, #24
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	e006      	b.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800558c:	4b9d      	ldr	r3, [pc, #628]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800558e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005592:	041b      	lsls	r3, r3, #16
 8005594:	0e1b      	lsrs	r3, r3, #24
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	4a9b      	ldr	r2, [pc, #620]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800559c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
 80055a2:	f000 be07 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
 80055aa:	f000 be03 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80055ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b2:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80055b6:	430b      	orrs	r3, r1
 80055b8:	d16c      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80055ba:	4b92      	ldr	r3, [pc, #584]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80055bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80055c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d104      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80055ce:	f7fe f9df 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80055d2:	6378      	str	r0, [r7, #52]	; 0x34
 80055d4:	f000 bdee 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055de:	d108      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e0:	f107 0318 	add.w	r3, r7, #24
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fa2d 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
 80055ee:	f000 bde1 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80055f8:	f7fe facc 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 80055fc:	6378      	str	r0, [r7, #52]	; 0x34
 80055fe:	f000 bdd9 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005608:	d122      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800560a:	4b7e      	ldr	r3, [pc, #504]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d118      	bne.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005616:	4b7b      	ldr	r3, [pc, #492]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8005622:	4b78      	ldr	r3, [pc, #480]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	0e1b      	lsrs	r3, r3, #24
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	e006      	b.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 800562e:	4b75      	ldr	r3, [pc, #468]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	0e1b      	lsrs	r3, r3, #24
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	4a72      	ldr	r2, [pc, #456]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 800563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
 8005644:	f000 bdb6 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
 800564c:	f000 bdb2 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005650:	4b6c      	ldr	r3, [pc, #432]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800565c:	d107      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005664:	d103      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
    {
      frequency = HSE_VALUE;
 8005666:	4b69      	ldr	r3, [pc, #420]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	f000 bda3 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800566e:	4b65      	ldr	r3, [pc, #404]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d107      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005682:	d103      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
    {
      frequency = HSI_VALUE;
 8005684:	4b61      	ldr	r3, [pc, #388]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
 8005688:	f000 bd94 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
 8005690:	f000 bd90 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005698:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800569c:	430b      	orrs	r3, r1
 800569e:	d158      	bne.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80056a0:	4b58      	ldr	r3, [pc, #352]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80056a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d84b      	bhi.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056f1 	.word	0x080056f1
 80056bc:	080056cd 	.word	0x080056cd
 80056c0:	080056df 	.word	0x080056df
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	08005705 	.word	0x08005705
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff f85d 	bl	8004790 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056da:	f000 bd6b 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056de:	f107 030c 	add.w	r3, r7, #12
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fb08 	bl	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ec:	f000 bd62 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80056f0:	f7fe fa50 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 80056f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80056f6:	f000 bd5d 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80056fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005700:	f000 bd58 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005704:	4b3f      	ldr	r3, [pc, #252]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b20      	cmp	r3, #32
 800570e:	d118      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005710:	4b3c      	ldr	r3, [pc, #240]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 800571c:	4b39      	ldr	r3, [pc, #228]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	0e1b      	lsrs	r3, r3, #24
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	e006      	b.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8005728:	4b36      	ldr	r3, [pc, #216]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800572a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	0e1b      	lsrs	r3, r3, #24
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800573e:	f000 bd39 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005746:	f000 bd35 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800574e:	f000 bd31 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005756:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800575a:	430b      	orrs	r3, r1
 800575c:	d16d      	bne.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800575e:	4b29      	ldr	r3, [pc, #164]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005764:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005768:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005770:	d036      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005778:	d85b      	bhi.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005780:	d029      	beq.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005788:	d853      	bhi.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005790:	d013      	beq.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005798:	d84b      	bhi.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2b00      	cmp	r3, #0
 800579e:	d015      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a6:	d144      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe ffef 	bl	8004790 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057b6:	f000 bcfd 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fa9a 	bl	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057c8:	f000 bcf4 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80057cc:	f7fe f9e2 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 80057d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80057d2:	f000 bcef 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80057d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057dc:	f000 bcea 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d11e      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	0e1b      	lsrs	r3, r3, #24
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	e00c      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8005804:	46020c00 	.word	0x46020c00
 8005808:	08009088 	.word	0x08009088
 800580c:	00f42400 	.word	0x00f42400
 8005810:	4b9d      	ldr	r3, [pc, #628]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005816:	041b      	lsls	r3, r3, #16
 8005818:	0e1b      	lsrs	r3, r3, #24
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	4a9b      	ldr	r2, [pc, #620]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005826:	f000 bcc5 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800582e:	f000 bcc1 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005836:	f000 bcbd 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800583a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005842:	430b      	orrs	r3, r1
 8005844:	d14c      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005846:	4b90      	ldr	r3, [pc, #576]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800584c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005850:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe f9b6 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 800585c:	6378      	str	r0, [r7, #52]	; 0x34
 800585e:	f000 bca9 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005868:	d104      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800586a:	f7fe f891 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800586e:	6378      	str	r0, [r7, #52]	; 0x34
 8005870:	f000 bca0 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005874:	4b84      	ldr	r3, [pc, #528]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	d107      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005888:	d103      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
    {
      frequency = HSI_VALUE;
 800588a:	4b81      	ldr	r3, [pc, #516]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
 800588e:	f000 bc91 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005892:	4b7d      	ldr	r3, [pc, #500]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b20      	cmp	r3, #32
 800589c:	d11c      	bne.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058a4:	d118      	bne.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058a6:	4b78      	ldr	r3, [pc, #480]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x912>
 80058b2:	4b75      	ldr	r3, [pc, #468]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	0e1b      	lsrs	r3, r3, #24
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	e006      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80058be:	4b72      	ldr	r3, [pc, #456]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80058c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058c4:	041b      	lsls	r3, r3, #16
 80058c6:	0e1b      	lsrs	r3, r3, #24
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	4a6f      	ldr	r2, [pc, #444]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 80058ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
 80058d4:	f000 bc6e 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	637b      	str	r3, [r7, #52]	; 0x34
 80058dc:	f000 bc6a 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80058e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80058e8:	430b      	orrs	r3, r1
 80058ea:	d14c      	bne.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80058ec:	4b66      	ldr	r3, [pc, #408]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80058ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80058fe:	f7fe f963 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005902:	6378      	str	r0, [r7, #52]	; 0x34
 8005904:	f000 bc56 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590e:	d104      	bne.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005910:	f7fe f83e 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005914:	6378      	str	r0, [r7, #52]	; 0x34
 8005916:	f000 bc4d 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800591a:	4b5b      	ldr	r3, [pc, #364]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005926:	d107      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592e:	d103      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
    {
      frequency = HSI_VALUE;
 8005930:	4b57      	ldr	r3, [pc, #348]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
 8005934:	f000 bc3e 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005938:	4b53      	ldr	r3, [pc, #332]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b20      	cmp	r3, #32
 8005942:	d11c      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800594a:	d118      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800594c:	4b4e      	ldr	r3, [pc, #312]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005958:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	0e1b      	lsrs	r3, r3, #24
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	e006      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8005964:	4b48      	ldr	r3, [pc, #288]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	0e1b      	lsrs	r3, r3, #24
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	4a46      	ldr	r2, [pc, #280]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
 800597a:	f000 bc1b 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
 8005982:	f000 bc17 	b.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800598e:	430b      	orrs	r3, r1
 8005990:	d151      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005992:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005998:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800599c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	2bc0      	cmp	r3, #192	; 0xc0
 80059a2:	d024      	beq.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	2bc0      	cmp	r3, #192	; 0xc0
 80059a8:	d842      	bhi.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2b80      	cmp	r3, #128	; 0x80
 80059ae:	d00d      	beq.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	2b80      	cmp	r3, #128	; 0x80
 80059b4:	d83c      	bhi.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d011      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80059c2:	e035      	b.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80059c4:	f7fe f928 	bl	8003c18 <HAL_RCC_GetPCLK3Freq>
 80059c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80059ca:	e3f3      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059cc:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d8:	d102      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
        {
          frequency = HSI_VALUE;
 80059da:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 80059dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059de:	e3e9      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059e4:	e3e6      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80059e6:	f7fd ffd3 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 80059ea:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80059ec:	e3e2      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059ee:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d117      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059fa:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 8005a06:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0e1b      	lsrs	r3, r3, #24
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	e006      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005a12:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	0e1b      	lsrs	r3, r3, #24
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	4a1a      	ldr	r2, [pc, #104]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a28:	e3c4      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a2e:	e3c1      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      default:
      {
        frequency = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a34:	e3be      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a3a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	d14d      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005a42:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a4c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7fe f8b8 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005a58:	6378      	str	r0, [r7, #52]	; 0x34
 8005a5a:	e3ab      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a62:	d103      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a64:	f7fd ff94 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005a68:	6378      	str	r0, [r7, #52]	; 0x34
 8005a6a:	e3a3      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a80:	d108      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
    {
      frequency = HSI_VALUE;
 8005a82:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
 8005a86:	e395      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8005a88:	46020c00 	.word	0x46020c00
 8005a8c:	08009088 	.word	0x08009088
 8005a90:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005a94:	4ba4      	ldr	r3, [pc, #656]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d11b      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005aa6:	d117      	bne.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005aa8:	4b9f      	ldr	r3, [pc, #636]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005ab4:	4b9c      	ldr	r3, [pc, #624]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	0e1b      	lsrs	r3, r3, #24
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	e006      	b.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8005ac0:	4b99      	ldr	r3, [pc, #612]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005ac2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ac6:	041b      	lsls	r3, r3, #16
 8005ac8:	0e1b      	lsrs	r3, r3, #24
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	4a97      	ldr	r2, [pc, #604]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8005ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad6:	e36d      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
 8005adc:	e36a      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	d164      	bne.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005aea:	4b8f      	ldr	r3, [pc, #572]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d120      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005afc:	4b8a      	ldr	r3, [pc, #552]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d117      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b08:	4b87      	ldr	r3, [pc, #540]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 8005b14:	4b84      	ldr	r3, [pc, #528]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	e006      	b.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 8005b20:	4b81      	ldr	r3, [pc, #516]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	0e1b      	lsrs	r3, r3, #24
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	4a7f      	ldr	r2, [pc, #508]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8005b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b34:	637b      	str	r3, [r7, #52]	; 0x34
 8005b36:	e33d      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3c:	e33a      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005b3e:	4b7a      	ldr	r3, [pc, #488]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b4c:	d112      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b54:	d10e      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b56:	4b74      	ldr	r3, [pc, #464]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b64:	d102      	bne.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
      {
        frequency = LSI_VALUE / 128U;
 8005b66:	23fa      	movs	r3, #250	; 0xfa
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b6a:	e323      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005b6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b72:	e31f      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005b74:	4b6c      	ldr	r3, [pc, #432]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b80:	d106      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b88:	d102      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
    {
      frequency = HSI_VALUE;
 8005b8a:	4b69      	ldr	r3, [pc, #420]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8e:	e311      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005b90:	4b65      	ldr	r3, [pc, #404]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d107      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba4:	d103      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
    {
      frequency = LSE_VALUE;
 8005ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005baa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bac:	e302      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb2:	e2ff      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	d164      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005bc0:	4b59      	ldr	r3, [pc, #356]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bca:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d120      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005bd2:	4b55      	ldr	r3, [pc, #340]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d117      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005bde:	4b52      	ldr	r3, [pc, #328]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8005bea:	4b4f      	ldr	r3, [pc, #316]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	0e1b      	lsrs	r3, r3, #24
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	e006      	b.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 8005bf6:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	0e1b      	lsrs	r3, r3, #24
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	4a49      	ldr	r2, [pc, #292]	; (8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8005c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0c:	e2d2      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	637b      	str	r3, [r7, #52]	; 0x34
 8005c12:	e2cf      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005c14:	4b44      	ldr	r3, [pc, #272]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c22:	d112      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2a:	d10e      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c2c:	4b3e      	ldr	r3, [pc, #248]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c3a:	d102      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
      {
        frequency = LSI_VALUE / 128U;
 8005c3c:	23fa      	movs	r3, #250	; 0xfa
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c40:	e2b8      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c42:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c46:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c48:	e2b4      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005c4a:	4b37      	ldr	r3, [pc, #220]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c56:	d106      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5e:	d102      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
    {
      frequency = HSI_VALUE;
 8005c60:	4b33      	ldr	r3, [pc, #204]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
 8005c64:	e2a6      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005c66:	4b30      	ldr	r3, [pc, #192]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d107      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c7a:	d103      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
    {
      frequency = LSE_VALUE;
 8005c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
 8005c82:	e297      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
 8005c88:	e294      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c8e:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005c92:	430b      	orrs	r3, r1
 8005c94:	d14e      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005ca0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d103      	bne.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005ca8:	f7fd ff8e 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005cac:	6378      	str	r0, [r7, #52]	; 0x34
 8005cae:	e281      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cbe:	d112      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cc6:	d10e      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005cc8:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cd6:	d102      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
      {
        frequency = LSI_VALUE / 128U;
 8005cd8:	23fa      	movs	r3, #250	; 0xfa
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005cdc:	e26a      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005cde:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ce4:	e266      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf2:	d106      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cfa:	d102      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = HSI_VALUE;
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005d00:	e258      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005d02:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d107      	bne.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d16:	d103      	bne.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
    {
      frequency = LSE_VALUE;
 8005d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1e:	e249      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
 8005d24:	e246      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8005d26:	bf00      	nop
 8005d28:	46020c00 	.word	0x46020c00
 8005d2c:	08009088 	.word	0x08009088
 8005d30:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d38:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	d12d      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005d40:	4ba9      	ldr	r3, [pc, #676]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d46:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005d4c:	4ba6      	ldr	r3, [pc, #664]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d58:	d105      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
    {
      frequency = HSE_VALUE;
 8005d60:	4ba2      	ldr	r3, [pc, #648]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	e226      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe fd0c 	bl	8004790 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7c:	e21a      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d84:	d107      	bne.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d86:	f107 0318 	add.w	r3, r7, #24
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fe5a 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
 8005d94:	e20e      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9a:	e20b      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005da4:	430b      	orrs	r3, r1
 8005da6:	d156      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005da8:	4b8f      	ldr	r3, [pc, #572]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005db2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dba:	d028      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dc2:	d845      	bhi.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dca:	d013      	beq.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd2:	d83d      	bhi.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de0:	d004      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
 8005de2:	e035      	b.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005de4:	f7fd ff04 	bl	8003bf0 <HAL_RCC_GetPCLK2Freq>
 8005de8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005dea:	e1e3      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005dec:	f7fd fdd0 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005df0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005df2:	e1df      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005df4:	4b7c      	ldr	r3, [pc, #496]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e00:	d102      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI_VALUE;
 8005e02:	4b7a      	ldr	r3, [pc, #488]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e06:	e1d5      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e0c:	e1d2      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e0e:	4b76      	ldr	r3, [pc, #472]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d117      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e1a:	4b73      	ldr	r3, [pc, #460]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8005e26:	4b70      	ldr	r3, [pc, #448]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	0e1b      	lsrs	r3, r3, #24
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	e006      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8005e32:	4b6d      	ldr	r3, [pc, #436]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	0e1b      	lsrs	r3, r3, #24
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	4a6b      	ldr	r2, [pc, #428]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e48:	e1b4      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e4e:	e1b1      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e54:	e1ae      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5a:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	d156      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005e62:	4b61      	ldr	r3, [pc, #388]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e74:	d028      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e7c:	d845      	bhi.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e84:	d013      	beq.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e8c:	d83d      	bhi.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9a:	d004      	beq.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
 8005e9c:	e035      	b.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005e9e:	f7fd fe93 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005ea2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ea4:	e186      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005ea6:	f7fd fd73 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005eaa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005eac:	e182      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eae:	4b4e      	ldr	r3, [pc, #312]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eba:	d102      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
        {
          frequency = HSI_VALUE;
 8005ebc:	4b4b      	ldr	r3, [pc, #300]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ec0:	e178      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ec6:	e175      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ec8:	4b47      	ldr	r3, [pc, #284]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d117      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ed4:	4b44      	ldr	r3, [pc, #272]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
 8005ee0:	4b41      	ldr	r3, [pc, #260]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	0e1b      	lsrs	r3, r3, #24
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	e006      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xf4e>
 8005eec:	4b3e      	ldr	r3, [pc, #248]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	0e1b      	lsrs	r3, r3, #24
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	4a3d      	ldr	r2, [pc, #244]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f02:	e157      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f08:	e154      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f0e:	e151      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f14:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	d17d      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005f1c:	4b32      	ldr	r3, [pc, #200]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f22:	f003 0318 	and.w	r3, r3, #24
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	2b18      	cmp	r3, #24
 8005f2c:	d871      	bhi.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f99 	.word	0x08005f99
 8005f38:	08006013 	.word	0x08006013
 8005f3c:	08006013 	.word	0x08006013
 8005f40:	08006013 	.word	0x08006013
 8005f44:	08006013 	.word	0x08006013
 8005f48:	08006013 	.word	0x08006013
 8005f4c:	08006013 	.word	0x08006013
 8005f50:	08006013 	.word	0x08006013
 8005f54:	08005fa1 	.word	0x08005fa1
 8005f58:	08006013 	.word	0x08006013
 8005f5c:	08006013 	.word	0x08006013
 8005f60:	08006013 	.word	0x08006013
 8005f64:	08006013 	.word	0x08006013
 8005f68:	08006013 	.word	0x08006013
 8005f6c:	08006013 	.word	0x08006013
 8005f70:	08006013 	.word	0x08006013
 8005f74:	08005fa9 	.word	0x08005fa9
 8005f78:	08006013 	.word	0x08006013
 8005f7c:	08006013 	.word	0x08006013
 8005f80:	08006013 	.word	0x08006013
 8005f84:	08006013 	.word	0x08006013
 8005f88:	08006013 	.word	0x08006013
 8005f8c:	08006013 	.word	0x08006013
 8005f90:	08006013 	.word	0x08006013
 8005f94:	08005fc3 	.word	0x08005fc3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005f98:	f7fd fe3e 	bl	8003c18 <HAL_RCC_GetPCLK3Freq>
 8005f9c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f9e:	e109      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005fa0:	f7fd fcf6 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8005fa4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005fa6:	e105      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb4:	d102      	bne.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
        {
          frequency = HSI_VALUE;
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fba:	e0fb      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc0:	e0f8      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d11e      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8005fda:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	0e1b      	lsrs	r3, r3, #24
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	e00d      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 8005fe6:	bf00      	nop
 8005fe8:	46020c00 	.word	0x46020c00
 8005fec:	00f42400 	.word	0x00f42400
 8005ff0:	08009088 	.word	0x08009088
 8005ff4:	4b72      	ldr	r3, [pc, #456]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	0e1b      	lsrs	r3, r3, #24
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	4a70      	ldr	r2, [pc, #448]	; (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 8006004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800600a:	e0d3      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006010:	e0d0      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006016:	e0cd      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800601c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006020:	430b      	orrs	r3, r1
 8006022:	d155      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006024:	4b66      	ldr	r3, [pc, #408]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8006026:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800602a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800602e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006036:	d013      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800603e:	d844      	bhi.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006046:	d013      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800604e:	d83c      	bhi.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2b00      	cmp	r3, #0
 8006054:	d014      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800605c:	d014      	beq.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 800605e:	e034      	b.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006060:	f107 0318 	add.w	r3, r7, #24
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe fced 	bl	8004a44 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800606e:	e0a1      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe fb8b 	bl	8004790 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800607e:	e099      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006080:	f7fd fc86 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8006084:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006086:	e095      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006088:	4b4d      	ldr	r3, [pc, #308]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b20      	cmp	r3, #32
 8006092:	d117      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1118>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006094:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 80060a0:	4b47      	ldr	r3, [pc, #284]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	0e1b      	lsrs	r3, r3, #24
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	e006      	b.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
 80060ac:	4b44      	ldr	r3, [pc, #272]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80060ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	0e1b      	lsrs	r3, r3, #24
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	4a42      	ldr	r2, [pc, #264]	; (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 80060bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060c2:	e077      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060c8:	e074      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ce:	e071      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80060d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d4:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80060d8:	430b      	orrs	r3, r1
 80060da:	d131      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x1194>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80060dc:	4b38      	ldr	r3, [pc, #224]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80060de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80060e8:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80060ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d106      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
    {
      frequency = LSE_VALUE;
 80060fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006100:	637b      	str	r3, [r7, #52]	; 0x34
 8006102:	e057      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006104:	4b2e      	ldr	r3, [pc, #184]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8006106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800610a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800610e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006112:	d112      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611a:	d10e      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800611c:	4b28      	ldr	r3, [pc, #160]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800611e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800612a:	d102      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
      {
        frequency = LSI_VALUE / 128U;
 800612c:	23fa      	movs	r3, #250	; 0xfa
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006130:	e040      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8006132:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006138:	e03c      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	e039      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006144:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006148:	430b      	orrs	r3, r1
 800614a:	d131      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800614c:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800614e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006152:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006156:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006158:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006164:	d105      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
    {
      frequency = HSI48_VALUE;
 800616c:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
 8006170:	e020      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006172:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800617a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800617e:	d106      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006186:	d102      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006188:	4b10      	ldr	r3, [pc, #64]	; (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x1220>)
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	e012      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800618e:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619a:	d106      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a2:	d102      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
    {
      frequency = HSI_VALUE;
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
 80061a8:	e004      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
 80061ae:	e001      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3738      	adds	r7, #56	; 0x38
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	46020c00 	.word	0x46020c00
 80061c4:	08009088 	.word	0x08009088
 80061c8:	02dc6c00 	.word	0x02dc6c00
 80061cc:	016e3600 	.word	0x016e3600
 80061d0:	00f42400 	.word	0x00f42400

080061d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80061dc:	4b47      	ldr	r3, [pc, #284]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a46      	ldr	r2, [pc, #280]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 80061e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061e8:	f7fb ff2c 	bl	8002044 <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061ee:	e008      	b.n	8006202 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061f0:	f7fb ff28 	bl	8002044 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e077      	b.n	80062f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006202:	4b3e      	ldr	r3, [pc, #248]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f0      	bne.n	80061f0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800620e:	4b3b      	ldr	r3, [pc, #236]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006216:	f023 0303 	bic.w	r3, r3, #3
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6811      	ldr	r1, [r2, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6852      	ldr	r2, [r2, #4]
 8006222:	3a01      	subs	r2, #1
 8006224:	0212      	lsls	r2, r2, #8
 8006226:	430a      	orrs	r2, r1
 8006228:	4934      	ldr	r1, [pc, #208]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 800622a:	4313      	orrs	r3, r2
 800622c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800622e:	4b33      	ldr	r3, [pc, #204]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 8006230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006232:	4b33      	ldr	r3, [pc, #204]	; (8006300 <RCCEx_PLL2_Config+0x12c>)
 8006234:	4013      	ands	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6892      	ldr	r2, [r2, #8]
 800623a:	3a01      	subs	r2, #1
 800623c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	68d2      	ldr	r2, [r2, #12]
 8006244:	3a01      	subs	r2, #1
 8006246:	0252      	lsls	r2, r2, #9
 8006248:	b292      	uxth	r2, r2
 800624a:	4311      	orrs	r1, r2
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6912      	ldr	r2, [r2, #16]
 8006250:	3a01      	subs	r2, #1
 8006252:	0412      	lsls	r2, r2, #16
 8006254:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006258:	4311      	orrs	r1, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6952      	ldr	r2, [r2, #20]
 800625e:	3a01      	subs	r2, #1
 8006260:	0612      	lsls	r2, r2, #24
 8006262:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006266:	430a      	orrs	r2, r1
 8006268:	4924      	ldr	r1, [pc, #144]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 800626a:	4313      	orrs	r3, r2
 800626c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800626e:	4b23      	ldr	r3, [pc, #140]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	f023 020c 	bic.w	r2, r3, #12
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	4920      	ldr	r1, [pc, #128]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 800627c:	4313      	orrs	r3, r2
 800627e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006280:	4b1e      	ldr	r3, [pc, #120]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 8006282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	491c      	ldr	r1, [pc, #112]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 800628a:	4313      	orrs	r3, r2
 800628c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800628e:	4b1b      	ldr	r3, [pc, #108]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	4a1a      	ldr	r2, [pc, #104]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 8006294:	f023 0310 	bic.w	r3, r3, #16
 8006298:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800629a:	4b18      	ldr	r3, [pc, #96]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	69d2      	ldr	r2, [r2, #28]
 80062aa:	00d2      	lsls	r2, r2, #3
 80062ac:	4913      	ldr	r1, [pc, #76]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	4a11      	ldr	r2, [pc, #68]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 80062b8:	f043 0310 	orr.w	r3, r3, #16
 80062bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80062be:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a0e      	ldr	r2, [pc, #56]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 80062c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062c8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062ca:	f7fb febb 	bl	8002044 <HAL_GetTick>
 80062ce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062d0:	e008      	b.n	80062e4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062d2:	f7fb feb7 	bl	8002044 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e006      	b.n	80062f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <RCCEx_PLL2_Config+0x128>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0f0      	beq.n	80062d2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0

}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	46020c00 	.word	0x46020c00
 8006300:	80800000 	.word	0x80800000

08006304 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800630c:	4b47      	ldr	r3, [pc, #284]	; (800642c <RCCEx_PLL3_Config+0x128>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a46      	ldr	r2, [pc, #280]	; (800642c <RCCEx_PLL3_Config+0x128>)
 8006312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006316:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006318:	f7fb fe94 	bl	8002044 <HAL_GetTick>
 800631c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800631e:	e008      	b.n	8006332 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006320:	f7fb fe90 	bl	8002044 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e077      	b.n	8006422 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006332:	4b3e      	ldr	r3, [pc, #248]	; (800642c <RCCEx_PLL3_Config+0x128>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800633e:	4b3b      	ldr	r3, [pc, #236]	; (800642c <RCCEx_PLL3_Config+0x128>)
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006346:	f023 0303 	bic.w	r3, r3, #3
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6811      	ldr	r1, [r2, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6852      	ldr	r2, [r2, #4]
 8006352:	3a01      	subs	r2, #1
 8006354:	0212      	lsls	r2, r2, #8
 8006356:	430a      	orrs	r2, r1
 8006358:	4934      	ldr	r1, [pc, #208]	; (800642c <RCCEx_PLL3_Config+0x128>)
 800635a:	4313      	orrs	r3, r2
 800635c:	630b      	str	r3, [r1, #48]	; 0x30
 800635e:	4b33      	ldr	r3, [pc, #204]	; (800642c <RCCEx_PLL3_Config+0x128>)
 8006360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006362:	4b33      	ldr	r3, [pc, #204]	; (8006430 <RCCEx_PLL3_Config+0x12c>)
 8006364:	4013      	ands	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6892      	ldr	r2, [r2, #8]
 800636a:	3a01      	subs	r2, #1
 800636c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68d2      	ldr	r2, [r2, #12]
 8006374:	3a01      	subs	r2, #1
 8006376:	0252      	lsls	r2, r2, #9
 8006378:	b292      	uxth	r2, r2
 800637a:	4311      	orrs	r1, r2
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6912      	ldr	r2, [r2, #16]
 8006380:	3a01      	subs	r2, #1
 8006382:	0412      	lsls	r2, r2, #16
 8006384:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006388:	4311      	orrs	r1, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6952      	ldr	r2, [r2, #20]
 800638e:	3a01      	subs	r2, #1
 8006390:	0612      	lsls	r2, r2, #24
 8006392:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006396:	430a      	orrs	r2, r1
 8006398:	4924      	ldr	r1, [pc, #144]	; (800642c <RCCEx_PLL3_Config+0x128>)
 800639a:	4313      	orrs	r3, r2
 800639c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800639e:	4b23      	ldr	r3, [pc, #140]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	f023 020c 	bic.w	r2, r3, #12
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	4920      	ldr	r1, [pc, #128]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80063b0:	4b1e      	ldr	r3, [pc, #120]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	491c      	ldr	r1, [pc, #112]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80063be:	4b1b      	ldr	r3, [pc, #108]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	4a1a      	ldr	r2, [pc, #104]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063c4:	f023 0310 	bic.w	r3, r3, #16
 80063c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063ca:	4b18      	ldr	r3, [pc, #96]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	69d2      	ldr	r2, [r2, #28]
 80063da:	00d2      	lsls	r2, r2, #3
 80063dc:	4913      	ldr	r1, [pc, #76]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	4a11      	ldr	r2, [pc, #68]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063e8:	f043 0310 	orr.w	r3, r3, #16
 80063ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80063ee:	4b0f      	ldr	r3, [pc, #60]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a0e      	ldr	r2, [pc, #56]	; (800642c <RCCEx_PLL3_Config+0x128>)
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80063fa:	f7fb fe23 	bl	8002044 <HAL_GetTick>
 80063fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006400:	e008      	b.n	8006414 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006402:	f7fb fe1f 	bl	8002044 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e006      	b.n	8006422 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006414:	4b05      	ldr	r3, [pc, #20]	; (800642c <RCCEx_PLL3_Config+0x128>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0f0      	beq.n	8006402 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	46020c00 	.word	0x46020c00
 8006430:	80800000 	.word	0x80800000

08006434 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e0fb      	b.n	800663e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a7f      	ldr	r2, [pc, #508]	; (8006648 <HAL_SPI_Init+0x214>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_SPI_Init+0x26>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7d      	ldr	r2, [pc, #500]	; (800664c <HAL_SPI_Init+0x218>)
 8006456:	4293      	cmp	r3, r2
 8006458:	e000      	b.n	800645c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800645a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a78      	ldr	r2, [pc, #480]	; (8006648 <HAL_SPI_Init+0x214>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_SPI_Init+0x42>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a76      	ldr	r2, [pc, #472]	; (800664c <HAL_SPI_Init+0x218>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d105      	bne.n	8006482 <HAL_SPI_Init+0x4e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b0f      	cmp	r3, #15
 800647c:	d901      	bls.n	8006482 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e0dd      	b.n	800663e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fbf8 	bl	8006c78 <SPI_GetPacketSize>
 8006488:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a6e      	ldr	r2, [pc, #440]	; (8006648 <HAL_SPI_Init+0x214>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_SPI_Init+0x6a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a6c      	ldr	r2, [pc, #432]	; (800664c <HAL_SPI_Init+0x218>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d102      	bne.n	80064a4 <HAL_SPI_Init+0x70>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d816      	bhi.n	80064d2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064a8:	4a69      	ldr	r2, [pc, #420]	; (8006650 <HAL_SPI_Init+0x21c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00e      	beq.n	80064cc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a68      	ldr	r2, [pc, #416]	; (8006654 <HAL_SPI_Init+0x220>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d009      	beq.n	80064cc <HAL_SPI_Init+0x98>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a66      	ldr	r2, [pc, #408]	; (8006658 <HAL_SPI_Init+0x224>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d004      	beq.n	80064cc <HAL_SPI_Init+0x98>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a65      	ldr	r2, [pc, #404]	; (800665c <HAL_SPI_Init+0x228>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d104      	bne.n	80064d6 <HAL_SPI_Init+0xa2>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b10      	cmp	r3, #16
 80064d0:	d901      	bls.n	80064d6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e0b3      	b.n	800663e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fa ff08 	bl	8001300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006512:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800651c:	d119      	bne.n	8006552 <HAL_SPI_Init+0x11e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006526:	d103      	bne.n	8006530 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10c      	bne.n	8006552 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800653c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006540:	d107      	bne.n	8006552 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006550:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00f      	beq.n	800657e <HAL_SPI_Init+0x14a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b06      	cmp	r3, #6
 8006564:	d90b      	bls.n	800657e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e007      	b.n	800658e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800658c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69da      	ldr	r2, [r3, #28]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	431a      	orrs	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	ea42 0103 	orr.w	r1, r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fa:	ea42 0103 	orr.w	r1, r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	46002000 	.word	0x46002000
 800664c:	56002000 	.word	0x56002000
 8006650:	40013000 	.word	0x40013000
 8006654:	50013000 	.word	0x50013000
 8006658:	40003800 	.word	0x40003800
 800665c:	50003800 	.word	0x50003800

08006660 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08c      	sub	sp, #48	; 0x30
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3320      	adds	r3, #32
 800667a:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3330      	adds	r3, #48	; 0x30
 8006682:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <HAL_SPI_TransmitReceive+0x32>
 800668e:	2302      	movs	r3, #2
 8006690:	e21f      	b.n	8006ad2 <HAL_SPI_TransmitReceive+0x472>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800669a:	f7fb fcd3 	bl	8002044 <HAL_GetTick>
 800669e:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80066a0:	887b      	ldrh	r3, [r7, #2]
 80066a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80066a4:	887b      	ldrh	r3, [r7, #2]
 80066a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d009      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80066c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066c6:	e204      	b.n	8006ad2 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_SPI_TransmitReceive+0x7a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_SPI_TransmitReceive+0x7a>
 80066d4:	887b      	ldrh	r3, [r7, #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80066e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066ec:	e1f1      	b.n	8006ad2 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2205      	movs	r2, #5
 80066f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	887a      	ldrh	r2, [r7, #2]
 8006708:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	887a      	ldrh	r2, [r7, #2]
 8006710:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	887a      	ldrh	r2, [r7, #2]
 800671e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	887a      	ldrh	r2, [r7, #2]
 8006726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8006744:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	0c1b      	lsrs	r3, r3, #16
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	8879      	ldrh	r1, [r7, #2]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	430b      	orrs	r3, r1
 8006758:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10c      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x132>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006780:	d107      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006790:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	f240 8085 	bls.w	80068a6 <HAL_SPI_TransmitReceive+0x246>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a7b      	ldr	r2, [pc, #492]	; (8006990 <HAL_SPI_TransmitReceive+0x330>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d078      	beq.n	8006898 <HAL_SPI_TransmitReceive+0x238>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a7a      	ldr	r2, [pc, #488]	; (8006994 <HAL_SPI_TransmitReceive+0x334>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d073      	beq.n	8006898 <HAL_SPI_TransmitReceive+0x238>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a78      	ldr	r2, [pc, #480]	; (8006998 <HAL_SPI_TransmitReceive+0x338>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d06e      	beq.n	8006898 <HAL_SPI_TransmitReceive+0x238>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a77      	ldr	r2, [pc, #476]	; (800699c <HAL_SPI_TransmitReceive+0x33c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d170      	bne.n	80068a6 <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80067c4:	e068      	b.n	8006898 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d11a      	bne.n	800680a <HAL_SPI_TransmitReceive+0x1aa>
 80067d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d017      	beq.n	800680a <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6812      	ldr	r2, [r2, #0]
 80067e4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ea:	1d1a      	adds	r2, r3, #4
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006808:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	f248 0308 	movw	r3, #32776	; 0x8008
 8006814:	4013      	ands	r3, r2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01a      	beq.n	8006850 <HAL_SPI_TransmitReceive+0x1f0>
 800681a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	d017      	beq.n	8006850 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006828:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800682a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800684e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006850:	f7fb fbf8 	bl	8002044 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685c:	429a      	cmp	r2, r3
 800685e:	d803      	bhi.n	8006868 <HAL_SPI_TransmitReceive+0x208>
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006866:	d102      	bne.n	800686e <HAL_SPI_TransmitReceive+0x20e>
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	2b00      	cmp	r3, #0
 800686c:	d114      	bne.n	8006898 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 f934 	bl	8006adc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006882:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e11c      	b.n	8006ad2 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800689a:	2b00      	cmp	r3, #0
 800689c:	d193      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x166>
 800689e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d190      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80068a4:	e0ee      	b.n	8006a84 <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	2b07      	cmp	r3, #7
 80068ac:	f240 80e4 	bls.w	8006a78 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80068b0:	e066      	b.n	8006980 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d119      	bne.n	80068f4 <HAL_SPI_TransmitReceive+0x294>
 80068c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d016      	beq.n	80068f4 <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ca:	881a      	ldrh	r2, [r3, #0]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d4:	1c9a      	adds	r2, r3, #2
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d11a      	bne.n	8006938 <HAL_SPI_TransmitReceive+0x2d8>
 8006902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d017      	beq.n	8006938 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	8812      	ldrh	r2, [r2, #0]
 8006910:	b292      	uxth	r2, r2
 8006912:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006918:	1c9a      	adds	r2, r3, #2
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8006936:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006938:	f7fb fb84 	bl	8002044 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006944:	429a      	cmp	r2, r3
 8006946:	d803      	bhi.n	8006950 <HAL_SPI_TransmitReceive+0x2f0>
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800694e:	d102      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x2f6>
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	2b00      	cmp	r3, #0
 8006954:	d114      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f8c0 	bl	8006adc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800696a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e0a8      	b.n	8006ad2 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006982:	2b00      	cmp	r3, #0
 8006984:	d195      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x252>
 8006986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d192      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x252>
 800698c:	e07a      	b.n	8006a84 <HAL_SPI_TransmitReceive+0x424>
 800698e:	bf00      	nop
 8006990:	40013000 	.word	0x40013000
 8006994:	50013000 	.word	0x50013000
 8006998:	40003800 	.word	0x40003800
 800699c:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d11b      	bne.n	80069e6 <HAL_SPI_TransmitReceive+0x386>
 80069ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d018      	beq.n	80069e6 <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3320      	adds	r3, #32
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069e4:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d11d      	bne.n	8006a30 <HAL_SPI_TransmitReceive+0x3d0>
 80069f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d01a      	beq.n	8006a30 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a06:	7812      	ldrb	r2, [r2, #0]
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8006a2e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a30:	f7fb fb08 	bl	8002044 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d803      	bhi.n	8006a48 <HAL_SPI_TransmitReceive+0x3e8>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a46:	d102      	bne.n	8006a4e <HAL_SPI_TransmitReceive+0x3ee>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d114      	bne.n	8006a78 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f844 	bl	8006adc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e02c      	b.n	8006ad2 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d190      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x340>
 8006a7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d18d      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2108      	movs	r1, #8
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 f8c4 	bl	8006c1c <SPI_WaitOnFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa0:	f043 0220 	orr.w	r2, r3, #32
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f816 	bl	8006adc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e001      	b.n	8006ad2 <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 8006ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3728      	adds	r7, #40	; 0x28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop

08006adc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0208 	orr.w	r2, r2, #8
 8006afa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0210 	orr.w	r2, r2, #16
 8006b0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b3e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d014      	beq.n	8006b76 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00f      	beq.n	8006b76 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0220 	orr.w	r2, r2, #32
 8006b74:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d014      	beq.n	8006bac <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00f      	beq.n	8006bac <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b92:	f043 0204 	orr.w	r2, r3, #4
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006baa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00f      	beq.n	8006bd6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbc:	f043 0201 	orr.w	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00f      	beq.n	8006c00 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006be6:	f043 0208 	orr.w	r2, r3, #8
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bfe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c2c:	e010      	b.n	8006c50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c2e:	f7fb fa09 	bl	8002044 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d803      	bhi.n	8006c46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c44:	d102      	bne.n	8006c4c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e00f      	b.n	8006c70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	bf0c      	ite	eq
 8006c60:	2301      	moveq	r3, #1
 8006c62:	2300      	movne	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d0df      	beq.n	8006c2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	3301      	adds	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	3307      	adds	r3, #7
 8006c96:	08db      	lsrs	r3, r3, #3
 8006c98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d12e      	bne.n	8006d22 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e028      	b.n	8006d24 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0201 	bic.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006cfe:	ea42 0103 	orr.w	r1, r2, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e000      	b.n	8006d24 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
  }
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e049      	b.n	8006dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fa fc8e 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f000 fb44 	bl	80073fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d001      	beq.n	8006df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e072      	b.n	8006ede <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a35      	ldr	r2, [pc, #212]	; (8006eec <HAL_TIM_Base_Start_IT+0x10c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d040      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a34      	ldr	r2, [pc, #208]	; (8006ef0 <HAL_TIM_Base_Start_IT+0x110>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d03b      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2c:	d036      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e36:	d031      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2d      	ldr	r2, [pc, #180]	; (8006ef4 <HAL_TIM_Base_Start_IT+0x114>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d02c      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2c      	ldr	r2, [pc, #176]	; (8006ef8 <HAL_TIM_Base_Start_IT+0x118>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d027      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <HAL_TIM_Base_Start_IT+0x11c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d022      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a29      	ldr	r2, [pc, #164]	; (8006f00 <HAL_TIM_Base_Start_IT+0x120>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d01d      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a27      	ldr	r2, [pc, #156]	; (8006f04 <HAL_TIM_Base_Start_IT+0x124>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d018      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a26      	ldr	r2, [pc, #152]	; (8006f08 <HAL_TIM_Base_Start_IT+0x128>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d013      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a24      	ldr	r2, [pc, #144]	; (8006f0c <HAL_TIM_Base_Start_IT+0x12c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00e      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <HAL_TIM_Base_Start_IT+0x130>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d009      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a21      	ldr	r2, [pc, #132]	; (8006f14 <HAL_TIM_Base_Start_IT+0x134>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d004      	beq.n	8006e9c <HAL_TIM_Base_Start_IT+0xbc>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a20      	ldr	r2, [pc, #128]	; (8006f18 <HAL_TIM_Base_Start_IT+0x138>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d115      	bne.n	8006ec8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <HAL_TIM_Base_Start_IT+0x13c>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	d015      	beq.n	8006eda <HAL_TIM_Base_Start_IT+0xfa>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb4:	d011      	beq.n	8006eda <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec6:	e008      	b.n	8006eda <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e000      	b.n	8006edc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	50012c00 	.word	0x50012c00
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	50000400 	.word	0x50000400
 8006efc:	40000800 	.word	0x40000800
 8006f00:	50000800 	.word	0x50000800
 8006f04:	40000c00 	.word	0x40000c00
 8006f08:	50000c00 	.word	0x50000c00
 8006f0c:	40013400 	.word	0x40013400
 8006f10:	50013400 	.word	0x50013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	50014000 	.word	0x50014000
 8006f1c:	00010007 	.word	0x00010007

08006f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e049      	b.n	8006fc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fa fbb6 	bl	80016b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f000 fa4c 	bl	80073fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d101      	bne.n	8006fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fea:	2302      	movs	r3, #2
 8006fec:	e0ff      	b.n	80071ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b14      	cmp	r3, #20
 8006ffa:	f200 80f0 	bhi.w	80071de <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007059 	.word	0x08007059
 8007008:	080071df 	.word	0x080071df
 800700c:	080071df 	.word	0x080071df
 8007010:	080071df 	.word	0x080071df
 8007014:	08007099 	.word	0x08007099
 8007018:	080071df 	.word	0x080071df
 800701c:	080071df 	.word	0x080071df
 8007020:	080071df 	.word	0x080071df
 8007024:	080070db 	.word	0x080070db
 8007028:	080071df 	.word	0x080071df
 800702c:	080071df 	.word	0x080071df
 8007030:	080071df 	.word	0x080071df
 8007034:	0800711b 	.word	0x0800711b
 8007038:	080071df 	.word	0x080071df
 800703c:	080071df 	.word	0x080071df
 8007040:	080071df 	.word	0x080071df
 8007044:	0800715d 	.word	0x0800715d
 8007048:	080071df 	.word	0x080071df
 800704c:	080071df 	.word	0x080071df
 8007050:	080071df 	.word	0x080071df
 8007054:	0800719d 	.word	0x0800719d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fac6 	bl	80075f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0208 	orr.w	r2, r2, #8
 8007072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0204 	bic.w	r2, r2, #4
 8007082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6999      	ldr	r1, [r3, #24]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	619a      	str	r2, [r3, #24]
      break;
 8007096:	e0a5      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fb68 	bl	8007774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6999      	ldr	r1, [r3, #24]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	021a      	lsls	r2, r3, #8
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	619a      	str	r2, [r3, #24]
      break;
 80070d8:	e084      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fbf7 	bl	80078d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0208 	orr.w	r2, r2, #8
 80070f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0204 	bic.w	r2, r2, #4
 8007104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69d9      	ldr	r1, [r3, #28]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	61da      	str	r2, [r3, #28]
      break;
 8007118:	e064      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fc85 	bl	8007a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69da      	ldr	r2, [r3, #28]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69d9      	ldr	r1, [r3, #28]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	021a      	lsls	r2, r3, #8
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	61da      	str	r2, [r3, #28]
      break;
 800715a:	e043      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fd14 	bl	8007b90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0208 	orr.w	r2, r2, #8
 8007176:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0204 	bic.w	r2, r2, #4
 8007186:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800719a:	e023      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fd76 	bl	8007c94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	021a      	lsls	r2, r3, #8
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80071dc:	e002      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	75fb      	strb	r3, [r7, #23]
      break;
 80071e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop

080071f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_TIM_ConfigClockSource+0x1c>
 8007210:	2302      	movs	r3, #2
 8007212:	e0e6      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x1ea>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800723e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a67      	ldr	r2, [pc, #412]	; (80073ec <HAL_TIM_ConfigClockSource+0x1f4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	f000 80b1 	beq.w	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 8007254:	4a65      	ldr	r2, [pc, #404]	; (80073ec <HAL_TIM_ConfigClockSource+0x1f4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	f200 80b6 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 800725c:	4a64      	ldr	r2, [pc, #400]	; (80073f0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	f000 80a9 	beq.w	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 8007264:	4a62      	ldr	r2, [pc, #392]	; (80073f0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	f200 80ae 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 800726c:	4a61      	ldr	r2, [pc, #388]	; (80073f4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	f000 80a1 	beq.w	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 8007274:	4a5f      	ldr	r2, [pc, #380]	; (80073f4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	f200 80a6 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 800727c:	4a5e      	ldr	r2, [pc, #376]	; (80073f8 <HAL_TIM_ConfigClockSource+0x200>)
 800727e:	4293      	cmp	r3, r2
 8007280:	f000 8099 	beq.w	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 8007284:	4a5c      	ldr	r2, [pc, #368]	; (80073f8 <HAL_TIM_ConfigClockSource+0x200>)
 8007286:	4293      	cmp	r3, r2
 8007288:	f200 809e 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 800728c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007290:	f000 8091 	beq.w	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 8007294:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007298:	f200 8096 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 800729c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a0:	f000 8089 	beq.w	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 80072a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a8:	f200 808e 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b0:	d03e      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0x138>
 80072b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b6:	f200 8087 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072be:	f000 8086 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1d6>
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c6:	d87f      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072c8:	2b70      	cmp	r3, #112	; 0x70
 80072ca:	d01a      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0x10a>
 80072cc:	2b70      	cmp	r3, #112	; 0x70
 80072ce:	d87b      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072d0:	2b60      	cmp	r3, #96	; 0x60
 80072d2:	d050      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x17e>
 80072d4:	2b60      	cmp	r3, #96	; 0x60
 80072d6:	d877      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072d8:	2b50      	cmp	r3, #80	; 0x50
 80072da:	d03c      	beq.n	8007356 <HAL_TIM_ConfigClockSource+0x15e>
 80072dc:	2b50      	cmp	r3, #80	; 0x50
 80072de:	d873      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d058      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x19e>
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d86f      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072e8:	2b30      	cmp	r3, #48	; 0x30
 80072ea:	d064      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 80072ec:	2b30      	cmp	r3, #48	; 0x30
 80072ee:	d86b      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d060      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d867      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d05c      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 80072fc:	2b10      	cmp	r3, #16
 80072fe:	d05a      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x1be>
 8007300:	e062      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007312:	f000 fdbf 	bl	8007e94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	609a      	str	r2, [r3, #8]
      break;
 800732e:	e04f      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007340:	f000 fda8 	bl	8007e94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007352:	609a      	str	r2, [r3, #8]
      break;
 8007354:	e03c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007362:	461a      	mov	r2, r3
 8007364:	f000 fd1a 	bl	8007d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2150      	movs	r1, #80	; 0x50
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fd73 	bl	8007e5a <TIM_ITRx_SetConfig>
      break;
 8007374:	e02c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007382:	461a      	mov	r2, r3
 8007384:	f000 fd39 	bl	8007dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2160      	movs	r1, #96	; 0x60
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fd63 	bl	8007e5a <TIM_ITRx_SetConfig>
      break;
 8007394:	e01c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a2:	461a      	mov	r2, r3
 80073a4:	f000 fcfa 	bl	8007d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2140      	movs	r1, #64	; 0x40
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fd53 	bl	8007e5a <TIM_ITRx_SetConfig>
      break;
 80073b4:	e00c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	4610      	mov	r0, r2
 80073c2:	f000 fd4a 	bl	8007e5a <TIM_ITRx_SetConfig>
      break;
 80073c6:	e003      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	e000      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80073ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	00100070 	.word	0x00100070
 80073f0:	00100040 	.word	0x00100040
 80073f4:	00100030 	.word	0x00100030
 80073f8:	00100020 	.word	0x00100020

080073fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a68      	ldr	r2, [pc, #416]	; (80075b0 <TIM_Base_SetConfig+0x1b4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d02b      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a67      	ldr	r2, [pc, #412]	; (80075b4 <TIM_Base_SetConfig+0x1b8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d027      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007422:	d023      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800742a:	d01f      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a62      	ldr	r2, [pc, #392]	; (80075b8 <TIM_Base_SetConfig+0x1bc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d01b      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a61      	ldr	r2, [pc, #388]	; (80075bc <TIM_Base_SetConfig+0x1c0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d017      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a60      	ldr	r2, [pc, #384]	; (80075c0 <TIM_Base_SetConfig+0x1c4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d013      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a5f      	ldr	r2, [pc, #380]	; (80075c4 <TIM_Base_SetConfig+0x1c8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00f      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a5e      	ldr	r2, [pc, #376]	; (80075c8 <TIM_Base_SetConfig+0x1cc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d00b      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a5d      	ldr	r2, [pc, #372]	; (80075cc <TIM_Base_SetConfig+0x1d0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d007      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a5c      	ldr	r2, [pc, #368]	; (80075d0 <TIM_Base_SetConfig+0x1d4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <TIM_Base_SetConfig+0x70>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a5b      	ldr	r2, [pc, #364]	; (80075d4 <TIM_Base_SetConfig+0x1d8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d108      	bne.n	800747e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a4b      	ldr	r2, [pc, #300]	; (80075b0 <TIM_Base_SetConfig+0x1b4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d043      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a4a      	ldr	r2, [pc, #296]	; (80075b4 <TIM_Base_SetConfig+0x1b8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d03f      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007494:	d03b      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800749c:	d037      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a45      	ldr	r2, [pc, #276]	; (80075b8 <TIM_Base_SetConfig+0x1bc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d033      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a44      	ldr	r2, [pc, #272]	; (80075bc <TIM_Base_SetConfig+0x1c0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d02f      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a43      	ldr	r2, [pc, #268]	; (80075c0 <TIM_Base_SetConfig+0x1c4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d02b      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a42      	ldr	r2, [pc, #264]	; (80075c4 <TIM_Base_SetConfig+0x1c8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d027      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a41      	ldr	r2, [pc, #260]	; (80075c8 <TIM_Base_SetConfig+0x1cc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d023      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a40      	ldr	r2, [pc, #256]	; (80075cc <TIM_Base_SetConfig+0x1d0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01f      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a3f      	ldr	r2, [pc, #252]	; (80075d0 <TIM_Base_SetConfig+0x1d4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01b      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a3e      	ldr	r2, [pc, #248]	; (80075d4 <TIM_Base_SetConfig+0x1d8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d017      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a3d      	ldr	r2, [pc, #244]	; (80075d8 <TIM_Base_SetConfig+0x1dc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a3c      	ldr	r2, [pc, #240]	; (80075dc <TIM_Base_SetConfig+0x1e0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00f      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a3b      	ldr	r2, [pc, #236]	; (80075e0 <TIM_Base_SetConfig+0x1e4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a3a      	ldr	r2, [pc, #232]	; (80075e4 <TIM_Base_SetConfig+0x1e8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a39      	ldr	r2, [pc, #228]	; (80075e8 <TIM_Base_SetConfig+0x1ec>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_Base_SetConfig+0x112>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a38      	ldr	r2, [pc, #224]	; (80075ec <TIM_Base_SetConfig+0x1f0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d108      	bne.n	8007520 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1a      	ldr	r2, [pc, #104]	; (80075b0 <TIM_Base_SetConfig+0x1b4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d023      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <TIM_Base_SetConfig+0x1b8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d01f      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a1e      	ldr	r2, [pc, #120]	; (80075d0 <TIM_Base_SetConfig+0x1d4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d01b      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a1d      	ldr	r2, [pc, #116]	; (80075d4 <TIM_Base_SetConfig+0x1d8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d017      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a1c      	ldr	r2, [pc, #112]	; (80075d8 <TIM_Base_SetConfig+0x1dc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d013      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <TIM_Base_SetConfig+0x1e0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00f      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <TIM_Base_SetConfig+0x1e4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00b      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <TIM_Base_SetConfig+0x1e8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d007      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a18      	ldr	r2, [pc, #96]	; (80075e8 <TIM_Base_SetConfig+0x1ec>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_Base_SetConfig+0x198>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a17      	ldr	r2, [pc, #92]	; (80075ec <TIM_Base_SetConfig+0x1f0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d103      	bne.n	800759c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	615a      	str	r2, [r3, #20]
}
 80075a2:	bf00      	nop
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	50012c00 	.word	0x50012c00
 80075b8:	40000400 	.word	0x40000400
 80075bc:	50000400 	.word	0x50000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	50000800 	.word	0x50000800
 80075c8:	40000c00 	.word	0x40000c00
 80075cc:	50000c00 	.word	0x50000c00
 80075d0:	40013400 	.word	0x40013400
 80075d4:	50013400 	.word	0x50013400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	50014000 	.word	0x50014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	50014400 	.word	0x50014400
 80075e8:	40014800 	.word	0x40014800
 80075ec:	50014800 	.word	0x50014800

080075f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	f023 0201 	bic.w	r2, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f023 0302 	bic.w	r3, r3, #2
 800763c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a40      	ldr	r2, [pc, #256]	; (800774c <TIM_OC1_SetConfig+0x15c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d023      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a3f      	ldr	r2, [pc, #252]	; (8007750 <TIM_OC1_SetConfig+0x160>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d01f      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a3e      	ldr	r2, [pc, #248]	; (8007754 <TIM_OC1_SetConfig+0x164>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01b      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a3d      	ldr	r2, [pc, #244]	; (8007758 <TIM_OC1_SetConfig+0x168>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d017      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a3c      	ldr	r2, [pc, #240]	; (800775c <TIM_OC1_SetConfig+0x16c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d013      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a3b      	ldr	r2, [pc, #236]	; (8007760 <TIM_OC1_SetConfig+0x170>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00f      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a3a      	ldr	r2, [pc, #232]	; (8007764 <TIM_OC1_SetConfig+0x174>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00b      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a39      	ldr	r2, [pc, #228]	; (8007768 <TIM_OC1_SetConfig+0x178>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d007      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a38      	ldr	r2, [pc, #224]	; (800776c <TIM_OC1_SetConfig+0x17c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_OC1_SetConfig+0xa8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a37      	ldr	r2, [pc, #220]	; (8007770 <TIM_OC1_SetConfig+0x180>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d10c      	bne.n	80076b2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0308 	bic.w	r3, r3, #8
 800769e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 0304 	bic.w	r3, r3, #4
 80076b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a25      	ldr	r2, [pc, #148]	; (800774c <TIM_OC1_SetConfig+0x15c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d023      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a24      	ldr	r2, [pc, #144]	; (8007750 <TIM_OC1_SetConfig+0x160>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d01f      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a23      	ldr	r2, [pc, #140]	; (8007754 <TIM_OC1_SetConfig+0x164>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d01b      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a22      	ldr	r2, [pc, #136]	; (8007758 <TIM_OC1_SetConfig+0x168>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d017      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a21      	ldr	r2, [pc, #132]	; (800775c <TIM_OC1_SetConfig+0x16c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a20      	ldr	r2, [pc, #128]	; (8007760 <TIM_OC1_SetConfig+0x170>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00f      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a1f      	ldr	r2, [pc, #124]	; (8007764 <TIM_OC1_SetConfig+0x174>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00b      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a1e      	ldr	r2, [pc, #120]	; (8007768 <TIM_OC1_SetConfig+0x178>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a1d      	ldr	r2, [pc, #116]	; (800776c <TIM_OC1_SetConfig+0x17c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <TIM_OC1_SetConfig+0x112>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a1c      	ldr	r2, [pc, #112]	; (8007770 <TIM_OC1_SetConfig+0x180>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d111      	bne.n	8007726 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	621a      	str	r2, [r3, #32]
}
 8007740:	bf00      	nop
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	40012c00 	.word	0x40012c00
 8007750:	50012c00 	.word	0x50012c00
 8007754:	40013400 	.word	0x40013400
 8007758:	50013400 	.word	0x50013400
 800775c:	40014000 	.word	0x40014000
 8007760:	50014000 	.word	0x50014000
 8007764:	40014400 	.word	0x40014400
 8007768:	50014400 	.word	0x50014400
 800776c:	40014800 	.word	0x40014800
 8007770:	50014800 	.word	0x50014800

08007774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	f023 0210 	bic.w	r2, r3, #16
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0320 	bic.w	r3, r3, #32
 80077c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a36      	ldr	r2, [pc, #216]	; (80078ac <TIM_OC2_SetConfig+0x138>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00b      	beq.n	80077f0 <TIM_OC2_SetConfig+0x7c>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a35      	ldr	r2, [pc, #212]	; (80078b0 <TIM_OC2_SetConfig+0x13c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d007      	beq.n	80077f0 <TIM_OC2_SetConfig+0x7c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a34      	ldr	r2, [pc, #208]	; (80078b4 <TIM_OC2_SetConfig+0x140>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC2_SetConfig+0x7c>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a33      	ldr	r2, [pc, #204]	; (80078b8 <TIM_OC2_SetConfig+0x144>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10d      	bne.n	800780c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800780a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a27      	ldr	r2, [pc, #156]	; (80078ac <TIM_OC2_SetConfig+0x138>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d023      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a26      	ldr	r2, [pc, #152]	; (80078b0 <TIM_OC2_SetConfig+0x13c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d01f      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a25      	ldr	r2, [pc, #148]	; (80078b4 <TIM_OC2_SetConfig+0x140>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d01b      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a24      	ldr	r2, [pc, #144]	; (80078b8 <TIM_OC2_SetConfig+0x144>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d017      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a23      	ldr	r2, [pc, #140]	; (80078bc <TIM_OC2_SetConfig+0x148>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d013      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a22      	ldr	r2, [pc, #136]	; (80078c0 <TIM_OC2_SetConfig+0x14c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00f      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a21      	ldr	r2, [pc, #132]	; (80078c4 <TIM_OC2_SetConfig+0x150>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00b      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a20      	ldr	r2, [pc, #128]	; (80078c8 <TIM_OC2_SetConfig+0x154>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d007      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1f      	ldr	r2, [pc, #124]	; (80078cc <TIM_OC2_SetConfig+0x158>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d003      	beq.n	800785c <TIM_OC2_SetConfig+0xe8>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a1e      	ldr	r2, [pc, #120]	; (80078d0 <TIM_OC2_SetConfig+0x15c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d113      	bne.n	8007884 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800786a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	621a      	str	r2, [r3, #32]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40012c00 	.word	0x40012c00
 80078b0:	50012c00 	.word	0x50012c00
 80078b4:	40013400 	.word	0x40013400
 80078b8:	50013400 	.word	0x50013400
 80078bc:	40014000 	.word	0x40014000
 80078c0:	50014000 	.word	0x50014000
 80078c4:	40014400 	.word	0x40014400
 80078c8:	50014400 	.word	0x50014400
 80078cc:	40014800 	.word	0x40014800
 80078d0:	50014800 	.word	0x50014800

080078d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0303 	bic.w	r3, r3, #3
 800790e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a35      	ldr	r2, [pc, #212]	; (8007a08 <TIM_OC3_SetConfig+0x134>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00b      	beq.n	800794e <TIM_OC3_SetConfig+0x7a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a34      	ldr	r2, [pc, #208]	; (8007a0c <TIM_OC3_SetConfig+0x138>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d007      	beq.n	800794e <TIM_OC3_SetConfig+0x7a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a33      	ldr	r2, [pc, #204]	; (8007a10 <TIM_OC3_SetConfig+0x13c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d003      	beq.n	800794e <TIM_OC3_SetConfig+0x7a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a32      	ldr	r2, [pc, #200]	; (8007a14 <TIM_OC3_SetConfig+0x140>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d10d      	bne.n	800796a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a26      	ldr	r2, [pc, #152]	; (8007a08 <TIM_OC3_SetConfig+0x134>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d023      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <TIM_OC3_SetConfig+0x138>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01f      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a24      	ldr	r2, [pc, #144]	; (8007a10 <TIM_OC3_SetConfig+0x13c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01b      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a23      	ldr	r2, [pc, #140]	; (8007a14 <TIM_OC3_SetConfig+0x140>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d017      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a22      	ldr	r2, [pc, #136]	; (8007a18 <TIM_OC3_SetConfig+0x144>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d013      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a21      	ldr	r2, [pc, #132]	; (8007a1c <TIM_OC3_SetConfig+0x148>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00f      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <TIM_OC3_SetConfig+0x14c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00b      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1f      	ldr	r2, [pc, #124]	; (8007a24 <TIM_OC3_SetConfig+0x150>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d007      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1e      	ldr	r2, [pc, #120]	; (8007a28 <TIM_OC3_SetConfig+0x154>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_OC3_SetConfig+0xe6>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a1d      	ldr	r2, [pc, #116]	; (8007a2c <TIM_OC3_SetConfig+0x158>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d113      	bne.n	80079e2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	621a      	str	r2, [r3, #32]
}
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	50012c00 	.word	0x50012c00
 8007a10:	40013400 	.word	0x40013400
 8007a14:	50013400 	.word	0x50013400
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	50014000 	.word	0x50014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	50014400 	.word	0x50014400
 8007a28:	40014800 	.word	0x40014800
 8007a2c:	50014800 	.word	0x50014800

08007a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	021b      	lsls	r3, r3, #8
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	031b      	lsls	r3, r3, #12
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a36      	ldr	r2, [pc, #216]	; (8007b68 <TIM_OC4_SetConfig+0x138>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_OC4_SetConfig+0x7c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a35      	ldr	r2, [pc, #212]	; (8007b6c <TIM_OC4_SetConfig+0x13c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_OC4_SetConfig+0x7c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a34      	ldr	r2, [pc, #208]	; (8007b70 <TIM_OC4_SetConfig+0x140>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_OC4_SetConfig+0x7c>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a33      	ldr	r2, [pc, #204]	; (8007b74 <TIM_OC4_SetConfig+0x144>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d10d      	bne.n	8007ac8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	031b      	lsls	r3, r3, #12
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a27      	ldr	r2, [pc, #156]	; (8007b68 <TIM_OC4_SetConfig+0x138>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d023      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a26      	ldr	r2, [pc, #152]	; (8007b6c <TIM_OC4_SetConfig+0x13c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d01f      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a25      	ldr	r2, [pc, #148]	; (8007b70 <TIM_OC4_SetConfig+0x140>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d01b      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a24      	ldr	r2, [pc, #144]	; (8007b74 <TIM_OC4_SetConfig+0x144>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d017      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a23      	ldr	r2, [pc, #140]	; (8007b78 <TIM_OC4_SetConfig+0x148>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d013      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a22      	ldr	r2, [pc, #136]	; (8007b7c <TIM_OC4_SetConfig+0x14c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00f      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <TIM_OC4_SetConfig+0x150>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00b      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <TIM_OC4_SetConfig+0x154>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d007      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <TIM_OC4_SetConfig+0x158>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_OC4_SetConfig+0xe8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <TIM_OC4_SetConfig+0x15c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d113      	bne.n	8007b40 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	019b      	lsls	r3, r3, #6
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	019b      	lsls	r3, r3, #6
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	621a      	str	r2, [r3, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	40012c00 	.word	0x40012c00
 8007b6c:	50012c00 	.word	0x50012c00
 8007b70:	40013400 	.word	0x40013400
 8007b74:	50013400 	.word	0x50013400
 8007b78:	40014000 	.word	0x40014000
 8007b7c:	50014000 	.word	0x50014000
 8007b80:	40014400 	.word	0x40014400
 8007b84:	50014400 	.word	0x50014400
 8007b88:	40014800 	.word	0x40014800
 8007b8c:	50014800 	.word	0x50014800

08007b90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007bd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	041b      	lsls	r3, r3, #16
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <TIM_OC5_SetConfig+0xdc>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d023      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a20      	ldr	r2, [pc, #128]	; (8007c70 <TIM_OC5_SetConfig+0xe0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01f      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1f      	ldr	r2, [pc, #124]	; (8007c74 <TIM_OC5_SetConfig+0xe4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d01b      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1e      	ldr	r2, [pc, #120]	; (8007c78 <TIM_OC5_SetConfig+0xe8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d017      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a1d      	ldr	r2, [pc, #116]	; (8007c7c <TIM_OC5_SetConfig+0xec>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d013      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a1c      	ldr	r2, [pc, #112]	; (8007c80 <TIM_OC5_SetConfig+0xf0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00f      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1b      	ldr	r2, [pc, #108]	; (8007c84 <TIM_OC5_SetConfig+0xf4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00b      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1a      	ldr	r2, [pc, #104]	; (8007c88 <TIM_OC5_SetConfig+0xf8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d007      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a19      	ldr	r2, [pc, #100]	; (8007c8c <TIM_OC5_SetConfig+0xfc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d003      	beq.n	8007c32 <TIM_OC5_SetConfig+0xa2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <TIM_OC5_SetConfig+0x100>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d109      	bne.n	8007c46 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	621a      	str	r2, [r3, #32]
}
 8007c60:	bf00      	nop
 8007c62:	371c      	adds	r7, #28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	50012c00 	.word	0x50012c00
 8007c74:	40013400 	.word	0x40013400
 8007c78:	50013400 	.word	0x50013400
 8007c7c:	40014000 	.word	0x40014000
 8007c80:	50014000 	.word	0x50014000
 8007c84:	40014400 	.word	0x40014400
 8007c88:	50014400 	.word	0x50014400
 8007c8c:	40014800 	.word	0x40014800
 8007c90:	50014800 	.word	0x50014800

08007c94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	051b      	lsls	r3, r3, #20
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a22      	ldr	r2, [pc, #136]	; (8007d74 <TIM_OC6_SetConfig+0xe0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d023      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a21      	ldr	r2, [pc, #132]	; (8007d78 <TIM_OC6_SetConfig+0xe4>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d01f      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a20      	ldr	r2, [pc, #128]	; (8007d7c <TIM_OC6_SetConfig+0xe8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d01b      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a1f      	ldr	r2, [pc, #124]	; (8007d80 <TIM_OC6_SetConfig+0xec>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d017      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a1e      	ldr	r2, [pc, #120]	; (8007d84 <TIM_OC6_SetConfig+0xf0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d013      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a1d      	ldr	r2, [pc, #116]	; (8007d88 <TIM_OC6_SetConfig+0xf4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00f      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a1c      	ldr	r2, [pc, #112]	; (8007d8c <TIM_OC6_SetConfig+0xf8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00b      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a1b      	ldr	r2, [pc, #108]	; (8007d90 <TIM_OC6_SetConfig+0xfc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d007      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <TIM_OC6_SetConfig+0x100>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <TIM_OC6_SetConfig+0xa4>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a19      	ldr	r2, [pc, #100]	; (8007d98 <TIM_OC6_SetConfig+0x104>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d109      	bne.n	8007d4c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	029b      	lsls	r3, r3, #10
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	621a      	str	r2, [r3, #32]
}
 8007d66:	bf00      	nop
 8007d68:	371c      	adds	r7, #28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	40012c00 	.word	0x40012c00
 8007d78:	50012c00 	.word	0x50012c00
 8007d7c:	40013400 	.word	0x40013400
 8007d80:	50013400 	.word	0x50013400
 8007d84:	40014000 	.word	0x40014000
 8007d88:	50014000 	.word	0x50014000
 8007d8c:	40014400 	.word	0x40014400
 8007d90:	50014400 	.word	0x50014400
 8007d94:	40014800 	.word	0x40014800
 8007d98:	50014800 	.word	0x50014800

08007d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f023 0201 	bic.w	r2, r3, #1
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f023 030a 	bic.w	r3, r3, #10
 8007dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b087      	sub	sp, #28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	f023 0210 	bic.w	r2, r3, #16
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	031b      	lsls	r3, r3, #12
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	f043 0307 	orr.w	r3, r3, #7
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	609a      	str	r2, [r3, #8]
}
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	021a      	lsls	r2, r3, #8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	609a      	str	r2, [r3, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e097      	b.n	800801c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a45      	ldr	r2, [pc, #276]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00e      	beq.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a44      	ldr	r2, [pc, #272]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d009      	beq.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a42      	ldr	r2, [pc, #264]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d004      	beq.n	8007f34 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a41      	ldr	r2, [pc, #260]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2f      	ldr	r2, [pc, #188]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d040      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2e      	ldr	r2, [pc, #184]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d03b      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f80:	d036      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f8a:	d031      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a29      	ldr	r2, [pc, #164]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d02c      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a28      	ldr	r2, [pc, #160]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d027      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a26      	ldr	r2, [pc, #152]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d022      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a25      	ldr	r2, [pc, #148]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d01d      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a23      	ldr	r2, [pc, #140]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d018      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a22      	ldr	r2, [pc, #136]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d013      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a18      	ldr	r2, [pc, #96]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a17      	ldr	r2, [pc, #92]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d009      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a1b      	ldr	r2, [pc, #108]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d004      	beq.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10c      	bne.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	40012c00 	.word	0x40012c00
 800802c:	50012c00 	.word	0x50012c00
 8008030:	40013400 	.word	0x40013400
 8008034:	50013400 	.word	0x50013400
 8008038:	40000400 	.word	0x40000400
 800803c:	50000400 	.word	0x50000400
 8008040:	40000800 	.word	0x40000800
 8008044:	50000800 	.word	0x50000800
 8008048:	40000c00 	.word	0x40000c00
 800804c:	50000c00 	.word	0x50000c00
 8008050:	40014000 	.word	0x40014000
 8008054:	50014000 	.word	0x50014000

08008058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e042      	b.n	80080f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008070:	2b00      	cmp	r3, #0
 8008072:	d106      	bne.n	8008082 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7f9 fe39 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2224      	movs	r2, #36	; 0x24
 8008086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fb64 	bl	8008770 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f9c9 	bl	8008440 <UART_SetConfig>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e01b      	b.n	80080f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fbe3 	bl	80088b4 <UART_CheckIdleState>
 80080ee:	4603      	mov	r3, r0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e04a      	b.n	80081a0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008110:	2b00      	cmp	r3, #0
 8008112:	d106      	bne.n	8008122 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7f9 fde9 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2224      	movs	r2, #36	; 0x24
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0201 	bic.w	r2, r2, #1
 8008138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fb14 	bl	8008770 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f979 	bl	8008440 <UART_SetConfig>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e023      	b.n	80081a0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008176:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0208 	orr.w	r2, r2, #8
 8008186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fb8b 	bl	80088b4 <UART_CheckIdleState>
 800819e:	4603      	mov	r3, r0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d17b      	bne.n	80082ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <HAL_UART_Transmit+0x26>
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e074      	b.n	80082bc <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2221      	movs	r2, #33	; 0x21
 80081de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081e2:	f7f9 ff2f 	bl	8002044 <HAL_GetTick>
 80081e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	88fa      	ldrh	r2, [r7, #6]
 80081ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	88fa      	ldrh	r2, [r7, #6]
 80081f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008200:	d108      	bne.n	8008214 <HAL_UART_Transmit+0x6c>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800820a:	2300      	movs	r3, #0
 800820c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	61bb      	str	r3, [r7, #24]
 8008212:	e003      	b.n	800821c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008218:	2300      	movs	r3, #0
 800821a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800821c:	e030      	b.n	8008280 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2200      	movs	r2, #0
 8008226:	2180      	movs	r1, #128	; 0x80
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 fbed 	bl	8008a08 <UART_WaitOnFlagUntilTimeout>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2220      	movs	r2, #32
 8008238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e03d      	b.n	80082bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008254:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	3302      	adds	r3, #2
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	e007      	b.n	800826e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	781a      	ldrb	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3301      	adds	r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008286:	b29b      	uxth	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1c8      	bne.n	800821e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2200      	movs	r2, #0
 8008294:	2140      	movs	r1, #64	; 0x40
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fbb6 	bl	8008a08 <UART_WaitOnFlagUntilTimeout>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e006      	b.n	80082bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e000      	b.n	80082bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80082ba:	2302      	movs	r3, #2
  }
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b08f      	sub	sp, #60	; 0x3c
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <HAL_HalfDuplex_EnableTransmitter+0x16>
 80082d6:	2302      	movs	r3, #2
 80082d8:	e042      	b.n	8008360 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2224      	movs	r2, #36	; 0x24
 80082e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	f023 030c 	bic.w	r3, r3, #12
 80082fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800830a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800830e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e6      	bne.n	80082ea <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	60bb      	str	r3, [r7, #8]
   return(result);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f043 0308 	orr.w	r3, r3, #8
 8008330:	633b      	str	r3, [r7, #48]	; 0x30
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	6979      	ldr	r1, [r7, #20]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	613b      	str	r3, [r7, #16]
   return(result);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e6      	bne.n	800831c <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2220      	movs	r2, #32
 8008352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	373c      	adds	r7, #60	; 0x3c
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800836c:	b480      	push	{r7}
 800836e:	b08f      	sub	sp, #60	; 0x3c
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800837a:	2b01      	cmp	r3, #1
 800837c:	d101      	bne.n	8008382 <HAL_HalfDuplex_EnableReceiver+0x16>
 800837e:	2302      	movs	r3, #2
 8008380:	e042      	b.n	8008408 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2224      	movs	r2, #36	; 0x24
 800838e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f023 030c 	bic.w	r3, r3, #12
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b8:	e841 2300 	strex	r3, r2, [r1]
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e6      	bne.n	8008392 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f043 0304 	orr.w	r3, r3, #4
 80083d8:	633b      	str	r3, [r7, #48]	; 0x30
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	61bb      	str	r3, [r7, #24]
 80083e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6979      	ldr	r1, [r7, #20]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	613b      	str	r3, [r7, #16]
   return(result);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e6      	bne.n	80083c4 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	373c      	adds	r7, #60	; 0x3c
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008422:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800842a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	4313      	orrs	r3, r2
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
	...

08008440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008444:	b094      	sub	sp, #80	; 0x50
 8008446:	af00      	add	r7, sp, #0
 8008448:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	4b9b      	ldr	r3, [pc, #620]	; (80086c4 <UART_SetConfig+0x284>)
 8008456:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	431a      	orrs	r2, r3
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	431a      	orrs	r2, r3
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	4313      	orrs	r3, r2
 800846e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4994      	ldr	r1, [pc, #592]	; (80086c8 <UART_SetConfig+0x288>)
 8008478:	4019      	ands	r1, r3
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008480:	430b      	orrs	r3, r1
 8008482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	68d9      	ldr	r1, [r3, #12]
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	ea40 0301 	orr.w	r3, r0, r1
 800849a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b87      	ldr	r3, [pc, #540]	; (80086c4 <UART_SetConfig+0x284>)
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d009      	beq.n	80084c0 <UART_SetConfig+0x80>
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	4b86      	ldr	r3, [pc, #536]	; (80086cc <UART_SetConfig+0x28c>)
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d004      	beq.n	80084c0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	6a1a      	ldr	r2, [r3, #32]
 80084ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084bc:	4313      	orrs	r3, r2
 80084be:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80084ca:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d4:	430b      	orrs	r3, r1
 80084d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	f023 000f 	bic.w	r0, r3, #15
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	ea40 0301 	orr.w	r3, r0, r1
 80084ee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4b76      	ldr	r3, [pc, #472]	; (80086d0 <UART_SetConfig+0x290>)
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d102      	bne.n	8008500 <UART_SetConfig+0xc0>
 80084fa:	2301      	movs	r3, #1
 80084fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80084fe:	e021      	b.n	8008544 <UART_SetConfig+0x104>
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	4b73      	ldr	r3, [pc, #460]	; (80086d4 <UART_SetConfig+0x294>)
 8008506:	429a      	cmp	r2, r3
 8008508:	d102      	bne.n	8008510 <UART_SetConfig+0xd0>
 800850a:	2304      	movs	r3, #4
 800850c:	64bb      	str	r3, [r7, #72]	; 0x48
 800850e:	e019      	b.n	8008544 <UART_SetConfig+0x104>
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	4b70      	ldr	r3, [pc, #448]	; (80086d8 <UART_SetConfig+0x298>)
 8008516:	429a      	cmp	r2, r3
 8008518:	d102      	bne.n	8008520 <UART_SetConfig+0xe0>
 800851a:	2308      	movs	r3, #8
 800851c:	64bb      	str	r3, [r7, #72]	; 0x48
 800851e:	e011      	b.n	8008544 <UART_SetConfig+0x104>
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4b6d      	ldr	r3, [pc, #436]	; (80086dc <UART_SetConfig+0x29c>)
 8008526:	429a      	cmp	r2, r3
 8008528:	d102      	bne.n	8008530 <UART_SetConfig+0xf0>
 800852a:	2310      	movs	r3, #16
 800852c:	64bb      	str	r3, [r7, #72]	; 0x48
 800852e:	e009      	b.n	8008544 <UART_SetConfig+0x104>
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	4b63      	ldr	r3, [pc, #396]	; (80086c4 <UART_SetConfig+0x284>)
 8008536:	429a      	cmp	r2, r3
 8008538:	d102      	bne.n	8008540 <UART_SetConfig+0x100>
 800853a:	2320      	movs	r3, #32
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
 800853e:	e001      	b.n	8008544 <UART_SetConfig+0x104>
 8008540:	2300      	movs	r3, #0
 8008542:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	4b5e      	ldr	r3, [pc, #376]	; (80086c4 <UART_SetConfig+0x284>)
 800854a:	429a      	cmp	r2, r3
 800854c:	d004      	beq.n	8008558 <UART_SetConfig+0x118>
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b5e      	ldr	r3, [pc, #376]	; (80086cc <UART_SetConfig+0x28c>)
 8008554:	429a      	cmp	r2, r3
 8008556:	d172      	bne.n	800863e <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855a:	2200      	movs	r2, #0
 800855c:	623b      	str	r3, [r7, #32]
 800855e:	627a      	str	r2, [r7, #36]	; 0x24
 8008560:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008564:	f7fc fd22 	bl	8004fac <HAL_RCCEx_GetPeriphCLKFreq>
 8008568:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800856a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80e7 	beq.w	8008740 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	4a5a      	ldr	r2, [pc, #360]	; (80086e0 <UART_SetConfig+0x2a0>)
 8008578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800857c:	461a      	mov	r2, r3
 800857e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008580:	fbb3 f3f2 	udiv	r3, r3, r2
 8008584:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	4413      	add	r3, r2
 8008590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008592:	429a      	cmp	r2, r3
 8008594:	d305      	bcc.n	80085a2 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800859c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800859e:	429a      	cmp	r2, r3
 80085a0:	d903      	bls.n	80085aa <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80085a8:	e048      	b.n	800863c <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ac:	2200      	movs	r2, #0
 80085ae:	61bb      	str	r3, [r7, #24]
 80085b0:	61fa      	str	r2, [r7, #28]
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	4a4a      	ldr	r2, [pc, #296]	; (80086e0 <UART_SetConfig+0x2a0>)
 80085b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2200      	movs	r2, #0
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	617a      	str	r2, [r7, #20]
 80085c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80085c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80085cc:	f7f8 fa4a 	bl	8000a64 <__aeabi_uldivmod>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4610      	mov	r0, r2
 80085d6:	4619      	mov	r1, r3
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	f04f 0300 	mov.w	r3, #0
 80085e0:	020b      	lsls	r3, r1, #8
 80085e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085e6:	0202      	lsls	r2, r0, #8
 80085e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085ea:	6849      	ldr	r1, [r1, #4]
 80085ec:	0849      	lsrs	r1, r1, #1
 80085ee:	2000      	movs	r0, #0
 80085f0:	460c      	mov	r4, r1
 80085f2:	4605      	mov	r5, r0
 80085f4:	eb12 0804 	adds.w	r8, r2, r4
 80085f8:	eb43 0905 	adc.w	r9, r3, r5
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	60bb      	str	r3, [r7, #8]
 8008604:	60fa      	str	r2, [r7, #12]
 8008606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800860a:	4640      	mov	r0, r8
 800860c:	4649      	mov	r1, r9
 800860e:	f7f8 fa29 	bl	8000a64 <__aeabi_uldivmod>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4613      	mov	r3, r2
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008620:	d308      	bcc.n	8008634 <UART_SetConfig+0x1f4>
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008628:	d204      	bcs.n	8008634 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008630:	60da      	str	r2, [r3, #12]
 8008632:	e003      	b.n	800863c <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800863a:	e081      	b.n	8008740 <UART_SetConfig+0x300>
 800863c:	e080      	b.n	8008740 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008646:	d14d      	bne.n	80086e4 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800864a:	2200      	movs	r2, #0
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008654:	f7fc fcaa 	bl	8004fac <HAL_RCCEx_GetPeriphCLKFreq>
 8008658:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800865a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d06f      	beq.n	8008740 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	4a1e      	ldr	r2, [pc, #120]	; (80086e0 <UART_SetConfig+0x2a0>)
 8008666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800866a:	461a      	mov	r2, r3
 800866c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008672:	005a      	lsls	r2, r3, #1
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	441a      	add	r2, r3
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008688:	2b0f      	cmp	r3, #15
 800868a:	d916      	bls.n	80086ba <UART_SetConfig+0x27a>
 800868c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008692:	d212      	bcs.n	80086ba <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008696:	b29b      	uxth	r3, r3
 8008698:	f023 030f 	bic.w	r3, r3, #15
 800869c:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a0:	085b      	lsrs	r3, r3, #1
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f003 0307 	and.w	r3, r3, #7
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80086ac:	4313      	orrs	r3, r2
 80086ae:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80086b6:	60da      	str	r2, [r3, #12]
 80086b8:	e042      	b.n	8008740 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80086c0:	e03e      	b.n	8008740 <UART_SetConfig+0x300>
 80086c2:	bf00      	nop
 80086c4:	46002400 	.word	0x46002400
 80086c8:	cfff69f3 	.word	0xcfff69f3
 80086cc:	56002400 	.word	0x56002400
 80086d0:	40013800 	.word	0x40013800
 80086d4:	40004800 	.word	0x40004800
 80086d8:	40004c00 	.word	0x40004c00
 80086dc:	40005000 	.word	0x40005000
 80086e0:	08009248 	.word	0x08009248
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80086e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e6:	2200      	movs	r2, #0
 80086e8:	469a      	mov	sl, r3
 80086ea:	4693      	mov	fp, r2
 80086ec:	4650      	mov	r0, sl
 80086ee:	4659      	mov	r1, fp
 80086f0:	f7fc fc5c 	bl	8004fac <HAL_RCCEx_GetPeriphCLKFreq>
 80086f4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80086f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d021      	beq.n	8008740 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	4a1a      	ldr	r2, [pc, #104]	; (800876c <UART_SetConfig+0x32c>)
 8008702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008706:	461a      	mov	r2, r3
 8008708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870a:	fbb3 f2f2 	udiv	r2, r3, r2
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	085b      	lsrs	r3, r3, #1
 8008714:	441a      	add	r2, r3
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	fbb2 f3f3 	udiv	r3, r2, r3
 800871e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008722:	2b0f      	cmp	r3, #15
 8008724:	d909      	bls.n	800873a <UART_SetConfig+0x2fa>
 8008726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800872c:	d205      	bcs.n	800873a <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800872e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008730:	b29a      	uxth	r2, r3
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60da      	str	r2, [r3, #12]
 8008738:	e002      	b.n	8008740 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008742:	2201      	movs	r2, #1
 8008744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	2201      	movs	r2, #1
 800874c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	2200      	movs	r2, #0
 8008754:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	2200      	movs	r2, #0
 800875a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800875c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008760:	4618      	mov	r0, r3
 8008762:	3750      	adds	r7, #80	; 0x50
 8008764:	46bd      	mov	sp, r7
 8008766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800876a:	bf00      	nop
 800876c:	08009248 	.word	0x08009248

08008770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	430a      	orrs	r2, r1
 80087fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01a      	beq.n	8008886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800886e:	d10a      	bne.n	8008886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	605a      	str	r2, [r3, #4]
  }
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b098      	sub	sp, #96	; 0x60
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088c4:	f7f9 fbbe 	bl	8002044 <HAL_GetTick>
 80088c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0308 	and.w	r3, r3, #8
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d12f      	bne.n	8008938 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e0:	2200      	movs	r2, #0
 80088e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f88e 	bl	8008a08 <UART_WaitOnFlagUntilTimeout>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d022      	beq.n	8008938 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008906:	653b      	str	r3, [r7, #80]	; 0x50
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008910:	647b      	str	r3, [r7, #68]	; 0x44
 8008912:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800891e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e6      	bne.n	80088f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	e063      	b.n	8008a00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b04      	cmp	r3, #4
 8008944:	d149      	bne.n	80089da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008946:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800894e:	2200      	movs	r2, #0
 8008950:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f857 	bl	8008a08 <UART_WaitOnFlagUntilTimeout>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d03c      	beq.n	80089da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	623b      	str	r3, [r7, #32]
   return(result);
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008974:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897e:	633b      	str	r3, [r7, #48]	; 0x30
 8008980:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e6      	bne.n	8008960 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3308      	adds	r3, #8
 8008998:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f023 0301 	bic.w	r3, r3, #1
 80089a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3308      	adds	r3, #8
 80089b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089b2:	61fa      	str	r2, [r7, #28]
 80089b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	69b9      	ldr	r1, [r7, #24]
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	617b      	str	r3, [r7, #20]
   return(result);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e5      	bne.n	8008992 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e012      	b.n	8008a00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3758      	adds	r7, #88	; 0x58
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	4613      	mov	r3, r2
 8008a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a18:	e049      	b.n	8008aae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a20:	d045      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a22:	f7f9 fb0f 	bl	8002044 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d302      	bcc.n	8008a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e048      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d031      	beq.n	8008aae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d110      	bne.n	8008a7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2208      	movs	r2, #8
 8008a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f838 	bl	8008ad6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2208      	movs	r2, #8
 8008a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e029      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a88:	d111      	bne.n	8008aae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f81e 	bl	8008ad6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e00f      	b.n	8008ace <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69da      	ldr	r2, [r3, #28]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	bf0c      	ite	eq
 8008abe:	2301      	moveq	r3, #1
 8008ac0:	2300      	movne	r3, #0
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d0a6      	beq.n	8008a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b095      	sub	sp, #84	; 0x54
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008afc:	643b      	str	r3, [r7, #64]	; 0x40
 8008afe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b26:	f023 0301 	bic.w	r3, r3, #1
 8008b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3308      	adds	r3, #8
 8008b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e3      	bne.n	8008b10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d118      	bne.n	8008b82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f023 0310 	bic.w	r3, r3, #16
 8008b64:	647b      	str	r3, [r7, #68]	; 0x44
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6e:	61bb      	str	r3, [r7, #24]
 8008b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6979      	ldr	r1, [r7, #20]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2220      	movs	r2, #32
 8008b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b96:	bf00      	nop
 8008b98:	3754      	adds	r7, #84	; 0x54
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e027      	b.n	8008c08 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2224      	movs	r2, #36	; 0x24
 8008bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 0201 	bic.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008be6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e02d      	b.n	8008c88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2224      	movs	r2, #36	; 0x24
 8008c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0201 	bic.w	r2, r2, #1
 8008c52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f84f 	bl	8008d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d101      	bne.n	8008ca8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e02d      	b.n	8008d04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2224      	movs	r2, #36	; 0x24
 8008cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 0201 	bic.w	r2, r2, #1
 8008cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f811 	bl	8008d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d108      	bne.n	8008d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d2c:	e031      	b.n	8008d92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d2e:	2308      	movs	r3, #8
 8008d30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d32:	2308      	movs	r3, #8
 8008d34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	0e5b      	lsrs	r3, r3, #25
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	0f5b      	lsrs	r3, r3, #29
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	7b3a      	ldrb	r2, [r7, #12]
 8008d5a:	4911      	ldr	r1, [pc, #68]	; (8008da0 <UARTEx_SetNbDataToProcess+0x94>)
 8008d5c:	5c8a      	ldrb	r2, [r1, r2]
 8008d5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d62:	7b3a      	ldrb	r2, [r7, #12]
 8008d64:	490f      	ldr	r1, [pc, #60]	; (8008da4 <UARTEx_SetNbDataToProcess+0x98>)
 8008d66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	7b7a      	ldrb	r2, [r7, #13]
 8008d78:	4909      	ldr	r1, [pc, #36]	; (8008da0 <UARTEx_SetNbDataToProcess+0x94>)
 8008d7a:	5c8a      	ldrb	r2, [r1, r2]
 8008d7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d80:	7b7a      	ldrb	r2, [r7, #13]
 8008d82:	4908      	ldr	r1, [pc, #32]	; (8008da4 <UARTEx_SetNbDataToProcess+0x98>)
 8008d84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d92:	bf00      	nop
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	08009260 	.word	0x08009260
 8008da4:	08009268 	.word	0x08009268

08008da8 <memset>:
 8008da8:	4402      	add	r2, r0
 8008daa:	4603      	mov	r3, r0
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d100      	bne.n	8008db2 <memset+0xa>
 8008db0:	4770      	bx	lr
 8008db2:	f803 1b01 	strb.w	r1, [r3], #1
 8008db6:	e7f9      	b.n	8008dac <memset+0x4>

08008db8 <__libc_init_array>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4d0d      	ldr	r5, [pc, #52]	; (8008df0 <__libc_init_array+0x38>)
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	4c0d      	ldr	r4, [pc, #52]	; (8008df4 <__libc_init_array+0x3c>)
 8008dc0:	1b64      	subs	r4, r4, r5
 8008dc2:	10a4      	asrs	r4, r4, #2
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	d109      	bne.n	8008ddc <__libc_init_array+0x24>
 8008dc8:	4d0b      	ldr	r5, [pc, #44]	; (8008df8 <__libc_init_array+0x40>)
 8008dca:	2600      	movs	r6, #0
 8008dcc:	4c0b      	ldr	r4, [pc, #44]	; (8008dfc <__libc_init_array+0x44>)
 8008dce:	f000 f825 	bl	8008e1c <_init>
 8008dd2:	1b64      	subs	r4, r4, r5
 8008dd4:	10a4      	asrs	r4, r4, #2
 8008dd6:	42a6      	cmp	r6, r4
 8008dd8:	d105      	bne.n	8008de6 <__libc_init_array+0x2e>
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de0:	3601      	adds	r6, #1
 8008de2:	4798      	blx	r3
 8008de4:	e7ee      	b.n	8008dc4 <__libc_init_array+0xc>
 8008de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dea:	3601      	adds	r6, #1
 8008dec:	4798      	blx	r3
 8008dee:	e7f2      	b.n	8008dd6 <__libc_init_array+0x1e>
 8008df0:	08009278 	.word	0x08009278
 8008df4:	08009278 	.word	0x08009278
 8008df8:	08009278 	.word	0x08009278
 8008dfc:	0800927c 	.word	0x0800927c

08008e00 <memcpy>:
 8008e00:	440a      	add	r2, r1
 8008e02:	1e43      	subs	r3, r0, #1
 8008e04:	4291      	cmp	r1, r2
 8008e06:	d100      	bne.n	8008e0a <memcpy+0xa>
 8008e08:	4770      	bx	lr
 8008e0a:	b510      	push	{r4, lr}
 8008e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e10:	4291      	cmp	r1, r2
 8008e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e16:	d1f9      	bne.n	8008e0c <memcpy+0xc>
 8008e18:	bd10      	pop	{r4, pc}
	...

08008e1c <_init>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr

08008e28 <_fini>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr
