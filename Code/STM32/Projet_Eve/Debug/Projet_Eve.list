
Projet_Eve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f50  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074bc  080074bc  000174bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  080074c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000026c  2000000c  080074cd  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000278  080074cd  00020278  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014454  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b4c  00000000  00000000  000344d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ea0  00000000  00000000  00037028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b2a  00000000  00000000  00037ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002d3e7  00000000  00000000  000389f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015a2f  00000000  00000000  00065dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00116698  00000000  00000000  0007b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003c88  00000000  00000000  00191ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  00195b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08007170 	.word	0x08007170

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08007170 	.word	0x08007170

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	; 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2iz>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d215      	bcs.n	8000a4a <__aeabi_d2iz+0x36>
 8000a1e:	d511      	bpl.n	8000a44 <__aeabi_d2iz+0x30>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d912      	bls.n	8000a50 <__aeabi_d2iz+0x3c>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3e:	bf18      	it	ne
 8000a40:	4240      	negne	r0, r0
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_d2iz+0x48>
 8000a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	bf08      	it	eq
 8000a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b982 	b.w	8000d80 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	460f      	mov	r7, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d146      	bne.n	8000b32 <__udivmoddi4+0x9e>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	d95e      	bls.n	8000b68 <__udivmoddi4+0xd4>
 8000aaa:	fab2 f382 	clz	r3, r2
 8000aae:	b143      	cbz	r3, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab4:	f1c3 0220 	rsb	r2, r3, #32
 8000ab8:	409f      	lsls	r7, r3
 8000aba:	409c      	lsls	r4, r3
 8000abc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac0:	4317      	orrs	r7, r2
 8000ac2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ac6:	fa1f f58c 	uxth.w	r5, ip
 8000aca:	0c22      	lsrs	r2, r4, #16
 8000acc:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ad4:	fb01 f005 	mul.w	r0, r1, r5
 8000ad8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000adc:	4290      	cmp	r0, r2
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x5e>
 8000ae0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x5c>
 8000aea:	4290      	cmp	r0, r2
 8000aec:	f200 8134 	bhi.w	8000d58 <__udivmoddi4+0x2c4>
 8000af0:	4639      	mov	r1, r7
 8000af2:	1a12      	subs	r2, r2, r0
 8000af4:	b2a4      	uxth	r4, r4
 8000af6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000afa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b06:	42a5      	cmp	r5, r4
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x88>
 8000b0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x86>
 8000b14:	42a5      	cmp	r5, r4
 8000b16:	f200 8119 	bhi.w	8000d4c <__udivmoddi4+0x2b8>
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0x9a>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xb4>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80fc 	beq.w	8000d34 <__udivmoddi4+0x2a0>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d14c      	bne.n	8000bea <__udivmoddi4+0x156>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	f0c0 80f2 	bcc.w	8000d3a <__udivmoddi4+0x2a6>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f240 80ef 	bls.w	8000d3a <__udivmoddi4+0x2a6>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0x9a>
 8000b62:	e9c6 4700 	strd	r4, r7, [r6]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xd8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f382 	clz	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f040 809f 	bne.w	8000cb4 <__udivmoddi4+0x220>
 8000b76:	1a8a      	subs	r2, r1, r2
 8000b78:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7c:	fa1f f78c 	uxth.w	r7, ip
 8000b80:	2101      	movs	r1, #1
 8000b82:	fbb2 f5fe 	udiv	r5, r2, lr
 8000b86:	fb0e 2015 	mls	r0, lr, r5, r2
 8000b8a:	0c22      	lsrs	r2, r4, #16
 8000b8c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b90:	fb07 f005 	mul.w	r0, r7, r5
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d90f      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000b98:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba0:	bf2c      	ite	cs
 8000ba2:	f04f 0901 	movcs.w	r9, #1
 8000ba6:	f04f 0900 	movcc.w	r9, #0
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d903      	bls.n	8000bb6 <__udivmoddi4+0x122>
 8000bae:	f1b9 0f00 	cmp.w	r9, #0
 8000bb2:	f000 80ce 	beq.w	8000d52 <__udivmoddi4+0x2be>
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	1a12      	subs	r2, r2, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc0:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bc4:	fb00 f707 	mul.w	r7, r0, r7
 8000bc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x14e>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x14c>
 8000bda:	42a7      	cmp	r7, r4
 8000bdc:	f200 80b3 	bhi.w	8000d46 <__udivmoddi4+0x2b2>
 8000be0:	4610      	mov	r0, r2
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be8:	e79c      	b.n	8000b24 <__udivmoddi4+0x90>
 8000bea:	f1c1 0420 	rsb	r4, r1, #32
 8000bee:	408b      	lsls	r3, r1
 8000bf0:	fa05 fc01 	lsl.w	ip, r5, r1
 8000bf4:	fa22 f704 	lsr.w	r7, r2, r4
 8000bf8:	40e5      	lsrs	r5, r4
 8000bfa:	408a      	lsls	r2, r1
 8000bfc:	431f      	orrs	r7, r3
 8000bfe:	fa20 f304 	lsr.w	r3, r0, r4
 8000c02:	4088      	lsls	r0, r1
 8000c04:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c08:	ea43 030c 	orr.w	r3, r3, ip
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c14:	fbb5 fef8 	udiv	lr, r5, r8
 8000c18:	fb08 551e 	mls	r5, r8, lr, r5
 8000c1c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a9      	cmp	r9, r5
 8000c26:	d90e      	bls.n	8000c46 <__udivmoddi4+0x1b2>
 8000c28:	197d      	adds	r5, r7, r5
 8000c2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c2e:	bf2c      	ite	cs
 8000c30:	f04f 0b01 	movcs.w	fp, #1
 8000c34:	f04f 0b00 	movcc.w	fp, #0
 8000c38:	45a9      	cmp	r9, r5
 8000c3a:	d903      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c3c:	f1bb 0f00 	cmp.w	fp, #0
 8000c40:	f000 808d 	beq.w	8000d5e <__udivmoddi4+0x2ca>
 8000c44:	46d6      	mov	lr, sl
 8000c46:	eba5 0509 	sub.w	r5, r5, r9
 8000c4a:	fa1f f983 	uxth.w	r9, r3
 8000c4e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000c52:	fb08 5513 	mls	r5, r8, r3, r5
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000c5e:	45ac      	cmp	ip, r5
 8000c60:	d906      	bls.n	8000c70 <__udivmoddi4+0x1dc>
 8000c62:	197d      	adds	r5, r7, r5
 8000c64:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c68:	d201      	bcs.n	8000c6e <__udivmoddi4+0x1da>
 8000c6a:	45ac      	cmp	ip, r5
 8000c6c:	d87e      	bhi.n	8000d6c <__udivmoddi4+0x2d8>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c74:	eba5 050c 	sub.w	r5, r5, ip
 8000c78:	fba3 9802 	umull	r9, r8, r3, r2
 8000c7c:	4545      	cmp	r5, r8
 8000c7e:	46ce      	mov	lr, r9
 8000c80:	46c4      	mov	ip, r8
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0x1f6>
 8000c84:	d106      	bne.n	8000c94 <__udivmoddi4+0x200>
 8000c86:	4548      	cmp	r0, r9
 8000c88:	d204      	bcs.n	8000c94 <__udivmoddi4+0x200>
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c90:	eb68 0c07 	sbc.w	ip, r8, r7
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d06f      	beq.n	8000d78 <__udivmoddi4+0x2e4>
 8000c98:	ebb0 020e 	subs.w	r2, r0, lr
 8000c9c:	eb65 050c 	sbc.w	r5, r5, ip
 8000ca0:	40ca      	lsrs	r2, r1
 8000ca2:	fa05 f404 	lsl.w	r4, r5, r4
 8000ca6:	40cd      	lsrs	r5, r1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	4314      	orrs	r4, r2
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 4500 	strd	r4, r5, [r6]
 8000cb2:	e73c      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	4099      	lsls	r1, r3
 8000cbe:	409c      	lsls	r4, r3
 8000cc0:	40d5      	lsrs	r5, r2
 8000cc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cca:	fa1f f78c 	uxth.w	r7, ip
 8000cce:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cde:	fb00 f507 	mul.w	r5, r0, r7
 8000ce2:	428d      	cmp	r5, r1
 8000ce4:	d90e      	bls.n	8000d04 <__udivmoddi4+0x270>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	428d      	cmp	r5, r1
 8000cfa:	d902      	bls.n	8000d02 <__udivmoddi4+0x26e>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	d031      	beq.n	8000d66 <__udivmoddi4+0x2d2>
 8000d02:	4640      	mov	r0, r8
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5fe 	udiv	r5, r1, lr
 8000d0c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f107 	mul.w	r1, r5, r7
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x298>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d201      	bcs.n	8000d2a <__udivmoddi4+0x296>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d823      	bhi.n	8000d72 <__udivmoddi4+0x2de>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a52      	subs	r2, r2, r1
 8000d2e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d32:	e726      	b.n	8000b82 <__udivmoddi4+0xee>
 8000d34:	4631      	mov	r1, r6
 8000d36:	4630      	mov	r0, r6
 8000d38:	e6f9      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000d3a:	1a84      	subs	r4, r0, r2
 8000d3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d40:	2001      	movs	r0, #1
 8000d42:	4617      	mov	r7, r2
 8000d44:	e70b      	b.n	8000b5e <__udivmoddi4+0xca>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e74a      	b.n	8000be2 <__udivmoddi4+0x14e>
 8000d4c:	4464      	add	r4, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	e6e4      	b.n	8000b1c <__udivmoddi4+0x88>
 8000d52:	3d02      	subs	r5, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d58:	3902      	subs	r1, #2
 8000d5a:	4462      	add	r2, ip
 8000d5c:	e6c9      	b.n	8000af2 <__udivmoddi4+0x5e>
 8000d5e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d62:	443d      	add	r5, r7
 8000d64:	e76f      	b.n	8000c46 <__udivmoddi4+0x1b2>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	e7cb      	b.n	8000d04 <__udivmoddi4+0x270>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	443d      	add	r5, r7
 8000d70:	e77e      	b.n	8000c70 <__udivmoddi4+0x1dc>
 8000d72:	3d02      	subs	r5, #2
 8000d74:	4462      	add	r2, ip
 8000d76:	e7d9      	b.n	8000d2c <__udivmoddi4+0x298>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e6d7      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, size_t data_blk_size)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d90:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000d94:	6019      	str	r1, [r3, #0]
 8000d96:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d9a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000da4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000da8:	4602      	mov	r2, r0
 8000daa:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000dac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000db0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <dyn2_crc+0xd4>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	4611      	mov	r1, r2
 8000dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f006 f9c8 	bl	8007154 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000dca:	e031      	b.n	8000e30 <dyn2_crc+0xac>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000dcc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dd0:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000dde:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8000de2:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000de6:	6809      	ldr	r1, [r1, #0]
 8000de8:	440b      	add	r3, r1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4053      	eors	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000df8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dfc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	f8b7 1214 	ldrh.w	r1, [r7, #532]	; 0x214
 8000e0a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e12:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4053      	eors	r3, r2
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e20:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e24:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8000e26:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000e30:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000e34:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000e38:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d8c4      	bhi.n	8000dcc <dyn2_crc+0x48>
	}
	return crc_accum;
 8000e42:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e46:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e4a:	881b      	ldrh	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08007188 	.word	0x08007188

08000e5c <dyn2_append_crc>:
uint8_t* dyn2_append_crc(uint8_t* instruction,uint16_t bufferSize){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
		return NULL;
	}

	memcpy(instruction_sent, instruction, bufferSize);
	*/
	unsigned short crc = dyn2_crc(0, instruction, bufferSize - 2);
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff ff87 	bl	8000d84 <dyn2_crc>
 8000e76:	4603      	mov	r3, r0
 8000e78:	81fb      	strh	r3, [r7, #14]
	unsigned char crc_l = crc & 0x00FF;
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	737b      	strb	r3, [r7, #13]
	unsigned char crc_h = (crc >> 8) & 0x00FF;
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	733b      	strb	r3, [r7, #12]

	instruction[bufferSize - 2] = crc_l;
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	7b7a      	ldrb	r2, [r7, #13]
 8000e90:	701a      	strb	r2, [r3, #0]
	instruction[bufferSize - 1] = crc_h;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	7b3a      	ldrb	r2, [r7, #12]
 8000e9c:	701a      	strb	r2, [r3, #0]

	return instruction;
 8000e9e:	687b      	ldr	r3, [r7, #4]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <dyn2_send>:
	// Send the string through UART
	HAL_UART_Transmit(&huart4, (uint8_t*)arrayString, strlen(arrayString), HAL_MAX_DELAY);
}

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
int dyn2_send(uint8_t* buffer,uint16_t size){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]

	//dyn2_debug_sendArrayAsString(buffer_crc, size); // for debuging purposes

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <dyn2_send+0x3c>)
 8000eb6:	f005 fbaf 	bl	8006618 <HAL_HalfDuplex_EnableTransmitter>

	HAL_UART_Transmit(&huart1, buffer, size, TIMEOUT);
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <dyn2_send+0x3c>)
 8000ec2:	f005 fb1b 	bl	80064fc <HAL_UART_Transmit>
	// Wait until UART transmission is complete
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000ec6:	bf00      	nop
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <dyn2_send+0x3c>)
 8000eca:	f005 fc4d 	bl	8006768 <HAL_UART_GetState>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b20      	cmp	r3, #32
 8000ed2:	d1f9      	bne.n	8000ec8 <dyn2_send+0x20>
	HAL_HalfDuplex_EnableReceiver(&huart1);
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <dyn2_send+0x3c>)
 8000ed6:	f005 fbf3 	bl	80066c0 <HAL_HalfDuplex_EnableReceiver>

	return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200001e0 	.word	0x200001e0

08000ee8 <dyn2_led>:
	uint16_t size = (uint16_t) NbOfElements(Dynamixel_PING);

	dyn2_send(Dynamixel_PING,size);
}
// Status 1 : Led ON, status 0 : Led OFF
int dyn2_led(MOTOR motor,int status){
 8000ee8:	b084      	sub	sp, #16
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	f107 0c20 	add.w	ip, r7, #32
 8000ef4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//			/*débutparam, address 65:*/ ,0x41,0x00
//			/*value in the address*/,0x01
//			/*on calcule le CRC après */,0x00,0x00};
	uint8_t DYN2_LED[13];
	// HEADER
	DYN2_LED[0] = HEADER_1;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <dyn2_led+0xb4>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	703b      	strb	r3, [r7, #0]
	DYN2_LED[1] = HEADER_2;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <dyn2_led+0xb8>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	707b      	strb	r3, [r7, #1]
	DYN2_LED[2] = HEADER_3;
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <dyn2_led+0xbc>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	70bb      	strb	r3, [r7, #2]
	DYN2_LED[3] = HEADER_4;
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <dyn2_led+0xc0>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	70fb      	strb	r3, [r7, #3]
	// ID
	DYN2_LED[4]= motor.id;
 8000f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	713b      	strb	r3, [r7, #4]
	// LENGTH
	DYN2_LED[5]= NbOfElements(DYN2_LED)- 7; // tkt ca marche
 8000f18:	2306      	movs	r3, #6
 8000f1a:	717b      	strb	r3, [r7, #5]
	DYN2_LED[6]= 0x00;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	71bb      	strb	r3, [r7, #6]
	// INSTRUCTION
	DYN2_LED[7]= WRITE;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <dyn2_led+0xc4>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	71fb      	strb	r3, [r7, #7]
	// PARAMETERS
	// ADDRRESS

	if (motor.model==XL320) {
 8000f26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d102      	bne.n	8000f34 <dyn2_led+0x4c>
		DYN2_LED[8]= XL320_ADDRESS_LED;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <dyn2_led+0xc8>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	723b      	strb	r3, [r7, #8]
	}
	if (motor.model==XL430) {
 8000f34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <dyn2_led+0x5a>
		DYN2_LED[8]= XL430_ADDRESS_LED;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <dyn2_led+0xcc>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	723b      	strb	r3, [r7, #8]
	}
	DYN2_LED[9]= 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	727b      	strb	r3, [r7, #9]
	// VALUE
	switch(status){
 8000f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <dyn2_led+0x70>
 8000f4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d004      	beq.n	8000f60 <dyn2_led+0x78>
 8000f56:	e007      	b.n	8000f68 <dyn2_led+0x80>
	case 0:
		DYN2_LED[10]=LED_OFF;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <dyn2_led+0xd0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	72bb      	strb	r3, [r7, #10]
		break;
 8000f5e:	e006      	b.n	8000f6e <dyn2_led+0x86>
	case 1:
		DYN2_LED[10]=LED_ON;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <dyn2_led+0xd4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	72bb      	strb	r3, [r7, #10]
		break;
 8000f66:	e002      	b.n	8000f6e <dyn2_led+0x86>
	default :
		return ERROR_LED_VALUE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <dyn2_led+0xd8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	e00e      	b.n	8000f8c <dyn2_led+0xa4>
	}
	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_LED);
 8000f6e:	230d      	movs	r3, #13
 8000f70:	82fb      	strh	r3, [r7, #22]
	uint8_t* DYN2_LED_CRC = dyn2_append_crc(DYN2_LED,size);
 8000f72:	8afa      	ldrh	r2, [r7, #22]
 8000f74:	463b      	mov	r3, r7
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff6f 	bl	8000e5c <dyn2_append_crc>
 8000f7e:	6138      	str	r0, [r7, #16]

	dyn2_send(DYN2_LED_CRC,size);
 8000f80:	8afb      	ldrh	r3, [r7, #22]
 8000f82:	4619      	mov	r1, r3
 8000f84:	6938      	ldr	r0, [r7, #16]
 8000f86:	f7ff ff8f 	bl	8000ea8 <dyn2_send>

	return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f96:	b004      	add	sp, #16
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0800739b 	.word	0x0800739b
 8000fa0:	0800739c 	.word	0x0800739c
 8000fa4:	0800739d 	.word	0x0800739d
 8000fa8:	0800739e 	.word	0x0800739e
 8000fac:	0800739a 	.word	0x0800739a
 8000fb0:	080073a3 	.word	0x080073a3
 8000fb4:	080073a0 	.word	0x080073a0
 8000fb8:	080073b3 	.word	0x080073b3
 8000fbc:	080073b1 	.word	0x080073b1
 8000fc0:	080073a8 	.word	0x080073a8

08000fc4 <dyn2_torque>:

// TORQUE_ON => writing in EEPROM is IMPOSSIBLE and the motor can rotate, TORQUE_OFF =>
int dyn2_torque(MOTOR motor,int mode){
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	f107 0c20 	add.w	ip, r7, #32
 8000fd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t DYN2_TORQUE[13];
	// HEADER
	DYN2_TORQUE[0] = HEADER_1;
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <dyn2_torque+0xb4>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	703b      	strb	r3, [r7, #0]
	DYN2_TORQUE[1] = HEADER_2;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <dyn2_torque+0xb8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	707b      	strb	r3, [r7, #1]
	DYN2_TORQUE[2] = HEADER_3;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <dyn2_torque+0xbc>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	70bb      	strb	r3, [r7, #2]
	DYN2_TORQUE[3] = HEADER_4;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <dyn2_torque+0xc0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	70fb      	strb	r3, [r7, #3]
	// ID
	DYN2_TORQUE[4]= motor.id;
 8000fec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	713b      	strb	r3, [r7, #4]
	// LENGTH
	DYN2_TORQUE[5]= NbOfElements(DYN2_TORQUE)- 7; // tkt ça marche
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	717b      	strb	r3, [r7, #5]
	DYN2_TORQUE[6]= 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	71bb      	strb	r3, [r7, #6]
	// INSTRUCTION
	DYN2_TORQUE[7]= WRITE;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <dyn2_torque+0xc4>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	71fb      	strb	r3, [r7, #7]
	// PARAMETERS
	// ADDRRESS
	if (motor.model == XL430) {
 8001002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <dyn2_torque+0x4c>
		DYN2_TORQUE[8]= XL430_ADDRESS_TORQUE;
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <dyn2_torque+0xc8>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	723b      	strb	r3, [r7, #8]
	}
	if (motor.model == XL320) {
 8001010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d102      	bne.n	800101e <dyn2_torque+0x5a>
		DYN2_TORQUE[8]= XL320_ADDRESS_TORQUE;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <dyn2_torque+0xcc>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	723b      	strb	r3, [r7, #8]
	}
	DYN2_TORQUE[9]= 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	727b      	strb	r3, [r7, #9]
	// VALUE
	switch(mode){
 8001022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <dyn2_torque+0x70>
 800102a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d004      	beq.n	800103c <dyn2_torque+0x78>
 8001032:	e007      	b.n	8001044 <dyn2_torque+0x80>
	case 0:
		DYN2_TORQUE[10]=TORQUE_OFF;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <dyn2_torque+0xd0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	72bb      	strb	r3, [r7, #10]
		break;
 800103a:	e006      	b.n	800104a <dyn2_torque+0x86>
	case 1:
		DYN2_TORQUE[10]=TORQUE_ON;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <dyn2_torque+0xd4>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	72bb      	strb	r3, [r7, #10]
		break;
 8001042:	e002      	b.n	800104a <dyn2_torque+0x86>
	default :
		return ERROR_TORQUE_VALUE;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <dyn2_torque+0xd8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	e00e      	b.n	8001068 <dyn2_torque+0xa4>
	}

	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_TORQUE);
 800104a:	230d      	movs	r3, #13
 800104c:	82fb      	strh	r3, [r7, #22]
	uint8_t* DYN2_TORQUE_CRC = dyn2_append_crc(DYN2_TORQUE,size);
 800104e:	8afa      	ldrh	r2, [r7, #22]
 8001050:	463b      	mov	r3, r7
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff01 	bl	8000e5c <dyn2_append_crc>
 800105a:	6138      	str	r0, [r7, #16]

	dyn2_send(DYN2_TORQUE_CRC,size);
 800105c:	8afb      	ldrh	r3, [r7, #22]
 800105e:	4619      	mov	r1, r3
 8001060:	6938      	ldr	r0, [r7, #16]
 8001062:	f7ff ff21 	bl	8000ea8 <dyn2_send>
	return 0;
 8001066:	2300      	movs	r3, #0

}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001072:	b004      	add	sp, #16
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	0800739b 	.word	0x0800739b
 800107c:	0800739c 	.word	0x0800739c
 8001080:	0800739d 	.word	0x0800739d
 8001084:	0800739e 	.word	0x0800739e
 8001088:	0800739a 	.word	0x0800739a
 800108c:	0800739f 	.word	0x0800739f
 8001090:	080073a2 	.word	0x080073a2
 8001094:	080073b2 	.word	0x080073b2
 8001098:	080073b0 	.word	0x080073b0
 800109c:	080073ac 	.word	0x080073ac

080010a0 <dyn2_position>:

void dyn2_position(MOTOR motor,float angleInDeg) {
 80010a0:	b084      	sub	sp, #16
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b090      	sub	sp, #64	; 0x40
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80010ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010b0:	ed87 0a01 	vstr	s0, [r7, #4]
	if (motor.model == XL430) {
 80010b4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d15a      	bne.n	8001172 <dyn2_position+0xd2>
		// Value range: 0 to 4095
		uint8_t DYN2_POSITION[16];
		// HEADER
		DYN2_POSITION[0] = HEADER_1;
 80010bc:	4b5e      	ldr	r3, [pc, #376]	; (8001238 <dyn2_position+0x198>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	763b      	strb	r3, [r7, #24]
		DYN2_POSITION[1] = HEADER_2;
 80010c2:	4b5e      	ldr	r3, [pc, #376]	; (800123c <dyn2_position+0x19c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	767b      	strb	r3, [r7, #25]
		DYN2_POSITION[2] = HEADER_3;
 80010c8:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <dyn2_position+0x1a0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	76bb      	strb	r3, [r7, #26]
		DYN2_POSITION[3] = HEADER_4;
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <dyn2_position+0x1a4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	76fb      	strb	r3, [r7, #27]
		// ID
		DYN2_POSITION[4]= motor.id;
 80010d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	773b      	strb	r3, [r7, #28]
		// LENGTH
		DYN2_POSITION[5]= NbOfElements(DYN2_POSITION)- 7; // tkt ca marche
 80010dc:	2309      	movs	r3, #9
 80010de:	777b      	strb	r3, [r7, #29]
		DYN2_POSITION[6]= 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	77bb      	strb	r3, [r7, #30]
		// INSTRUCTION
		DYN2_POSITION[7]= WRITE;
 80010e4:	4b58      	ldr	r3, [pc, #352]	; (8001248 <dyn2_position+0x1a8>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	77fb      	strb	r3, [r7, #31]
		// PARAMETERS
		// VALUE

		DYN2_POSITION[8]= XL430_ADDRESS_POSITION;
 80010ea:	4b58      	ldr	r3, [pc, #352]	; (800124c <dyn2_position+0x1ac>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f887 3020 	strb.w	r3, [r7, #32]
		DYN2_POSITION[9]= 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if(angleInDeg>360){
 80010f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fc:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001250 <dyn2_position+0x1b0>
 8001100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	dd01      	ble.n	800110e <dyn2_position+0x6e>
			angleInDeg = 360;
 800110a:	4b52      	ldr	r3, [pc, #328]	; (8001254 <dyn2_position+0x1b4>)
 800110c:	607b      	str	r3, [r7, #4]
		}
		int Angle_Value =(int) (angleInDeg/0.088);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fa16 	bl	8000540 <__aeabi_f2d>
 8001114:	a344      	add	r3, pc, #272	; (adr r3, 8001228 <dyn2_position+0x188>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fb93 	bl	8000844 <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fc75 	bl	8000a14 <__aeabi_d2iz>
 800112a:	4603      	mov	r3, r0
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c

		DYN2_POSITION[10] =  Angle_Value & 0xFF;
 800112e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		DYN2_POSITION[11] = (Angle_Value >> 8) & 0xFF;
 8001136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001138:	121b      	asrs	r3, r3, #8
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		DYN2_POSITION[12] = (Angle_Value >> 16) & 0xFF;
 8001140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001142:	141b      	asrs	r3, r3, #16
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DYN2_POSITION[13] = (Angle_Value >> 24) & 0xFF;
 800114a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800114c:	0e1b      	lsrs	r3, r3, #24
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		// SENDING
		uint16_t size = (uint16_t) NbOfElements(DYN2_POSITION);
 8001154:	2310      	movs	r3, #16
 8001156:	877b      	strh	r3, [r7, #58]	; 0x3a
		uint8_t* DYN2_POSITION_CRC = dyn2_append_crc(DYN2_POSITION,size);
 8001158:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fe7b 	bl	8000e5c <dyn2_append_crc>
 8001166:	6378      	str	r0, [r7, #52]	; 0x34

		dyn2_send(DYN2_POSITION_CRC,size);
 8001168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800116a:	4619      	mov	r1, r3
 800116c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800116e:	f7ff fe9b 	bl	8000ea8 <dyn2_send>
	}
	if (motor.model == XL320) {
 8001172:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001176:	2b01      	cmp	r3, #1
 8001178:	d14c      	bne.n	8001214 <dyn2_position+0x174>
		// Value range: 0 to 1023
		uint8_t DYN2_POSITION[14];
		// HEADER
		DYN2_POSITION[0] = HEADER_1;
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <dyn2_position+0x198>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	723b      	strb	r3, [r7, #8]
		DYN2_POSITION[1] = HEADER_2;
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <dyn2_position+0x19c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	727b      	strb	r3, [r7, #9]
		DYN2_POSITION[2] = HEADER_3;
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <dyn2_position+0x1a0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	72bb      	strb	r3, [r7, #10]
		DYN2_POSITION[3] = HEADER_4;
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <dyn2_position+0x1a4>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	72fb      	strb	r3, [r7, #11]
		// ID
		DYN2_POSITION[4]= motor.id;
 8001192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001196:	b2db      	uxtb	r3, r3
 8001198:	733b      	strb	r3, [r7, #12]
		// LENGTH
		DYN2_POSITION[5]= NbOfElements(DYN2_POSITION)- 7; // tkt ca marche
 800119a:	2307      	movs	r3, #7
 800119c:	737b      	strb	r3, [r7, #13]
		DYN2_POSITION[6]= 0x00;
 800119e:	2300      	movs	r3, #0
 80011a0:	73bb      	strb	r3, [r7, #14]
		// INSTRUCTION
		DYN2_POSITION[7]= WRITE;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <dyn2_position+0x1a8>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	73fb      	strb	r3, [r7, #15]
		// PARAMETERS
		// ADDRRESS

		// VALUE

		DYN2_POSITION[8]= XL320_ADDRESS_POSITION;
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <dyn2_position+0x1b8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	743b      	strb	r3, [r7, #16]
		DYN2_POSITION[9]= 0x00;
 80011ae:	2300      	movs	r3, #0
 80011b0:	747b      	strb	r3, [r7, #17]
		if(angleInDeg>300){
 80011b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800125c <dyn2_position+0x1bc>
 80011ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	dd01      	ble.n	80011c8 <dyn2_position+0x128>
			angleInDeg = 300;
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <dyn2_position+0x1c0>)
 80011c6:	607b      	str	r3, [r7, #4]
		}
		int Angle_Value =(int) (angleInDeg/0.29);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff f9b9 	bl	8000540 <__aeabi_f2d>
 80011ce:	a318      	add	r3, pc, #96	; (adr r3, 8001230 <dyn2_position+0x190>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fb36 	bl	8000844 <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fc18 	bl	8000a14 <__aeabi_d2iz>
 80011e4:	4603      	mov	r3, r0
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30


		DYN2_POSITION[10] = (Angle_Value >> 8) & 0xFF;
 80011e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ea:	121b      	asrs	r3, r3, #8
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	74bb      	strb	r3, [r7, #18]
		DYN2_POSITION[11] = Angle_Value & 0xFF;
 80011f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	74fb      	strb	r3, [r7, #19]
		// SENDING
		uint16_t size = (uint16_t) NbOfElements(DYN2_POSITION);
 80011f6:	230e      	movs	r3, #14
 80011f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t* DYN2_POSITION_CRC = dyn2_append_crc(DYN2_POSITION,size);
 80011fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fe2a 	bl	8000e5c <dyn2_append_crc>
 8001208:	62b8      	str	r0, [r7, #40]	; 0x28

		dyn2_send(DYN2_POSITION_CRC,size);
 800120a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800120c:	4619      	mov	r1, r3
 800120e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001210:	f7ff fe4a 	bl	8000ea8 <dyn2_send>
	}

}
 8001214:	bf00      	nop
 8001216:	3740      	adds	r7, #64	; 0x40
 8001218:	46bd      	mov	sp, r7
 800121a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800121e:	b004      	add	sp, #16
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	020c49ba 	.word	0x020c49ba
 800122c:	3fb6872b 	.word	0x3fb6872b
 8001230:	28f5c28f 	.word	0x28f5c28f
 8001234:	3fd28f5c 	.word	0x3fd28f5c
 8001238:	0800739b 	.word	0x0800739b
 800123c:	0800739c 	.word	0x0800739c
 8001240:	0800739d 	.word	0x0800739d
 8001244:	0800739e 	.word	0x0800739e
 8001248:	0800739a 	.word	0x0800739a
 800124c:	080073a1 	.word	0x080073a1
 8001250:	43b40000 	.word	0x43b40000
 8001254:	43b40000 	.word	0x43b40000
 8001258:	080073a4 	.word	0x080073a4
 800125c:	43960000 	.word	0x43960000
 8001260:	43960000 	.word	0x43960000

08001264 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <MX_GPIO_Init+0x134>)
 800127c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001280:	4a45      	ldr	r2, [pc, #276]	; (8001398 <MX_GPIO_Init+0x134>)
 8001282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001286:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <MX_GPIO_Init+0x134>)
 800128c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <MX_GPIO_Init+0x134>)
 800129a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800129e:	4a3e      	ldr	r2, [pc, #248]	; (8001398 <MX_GPIO_Init+0x134>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012a8:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <MX_GPIO_Init+0x134>)
 80012aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <MX_GPIO_Init+0x134>)
 80012b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012bc:	4a36      	ldr	r2, [pc, #216]	; (8001398 <MX_GPIO_Init+0x134>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <MX_GPIO_Init+0x134>)
 80012c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <MX_GPIO_Init+0x134>)
 80012d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <MX_GPIO_Init+0x134>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <MX_GPIO_Init+0x134>)
 80012e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_CSN1_Pin|GPIO_CSN1C7_Pin|GPIO_CSN1C8_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80012f8:	4828      	ldr	r0, [pc, #160]	; (800139c <MX_GPIO_Init+0x138>)
 80012fa:	f000 fff1 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001304:	4826      	ldr	r0, [pc, #152]	; (80013a0 <MX_GPIO_Init+0x13c>)
 8001306:	f000 ffeb 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FDC_1_Pin|FDC_4_Pin|FDC_5_Pin|FDC_2_Pin;
 800130a:	23f0      	movs	r3, #240	; 0xf0
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4820      	ldr	r0, [pc, #128]	; (80013a0 <MX_GPIO_Init+0x13c>)
 800131e:	f000 fe07 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = FDC_3_Pin|FDC_8_Pin|USR_BTN_2_Pin|USR_BTN_3_Pin
 8001322:	f641 4330 	movw	r3, #7216	; 0x1c30
 8001326:	617b      	str	r3, [r7, #20]
                          |USR_BTN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <MX_GPIO_Init+0x138>)
 8001338:	f000 fdfa 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FDC_7_Pin|FDC_6_Pin;
 800133c:	2303      	movs	r3, #3
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <MX_GPIO_Init+0x140>)
 8001350:	f000 fdee 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_CSN1_Pin|GPIO_CSN1C7_Pin|GPIO_CSN1C8_Pin;
 8001354:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <MX_GPIO_Init+0x138>)
 800136e:	f000 fddf 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin;
 8001372:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_GPIO_Init+0x13c>)
 800138c:	f000 fdd0 	bl	8001f30 <HAL_GPIO_Init>

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	46020c00 	.word	0x46020c00
 800139c:	42020800 	.word	0x42020800
 80013a0:	42020000 	.word	0x42020000
 80013a4:	42020400 	.word	0x42020400

080013a8 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 ffaf 	bl	8002310 <HAL_ICACHE_ConfigAssociativityMode>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80013b8:	f000 f8c1 	bl	800153e <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80013bc:	f000 ffc8 	bl	8002350 <HAL_ICACHE_Enable>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80013c6:	f000 f8ba 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ce      	sub	sp, #312	; 0x138
 80013d4:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f000 fc1f 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f867 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013de:	f7ff ff41 	bl	8001264 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013e2:	f000 fa9d 	bl	8001920 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 80013e6:	f7ff ffdf 	bl	80013a8 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80013ea:	f000 fa03 	bl	80017f4 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80013ee:	f000 fa4b 	bl	8001888 <MX_UART4_Init>
  MX_SPI2_Init();
 80013f2:	f000 f8a9 	bl	8001548 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  MOTOR XL430_1 = {
 80013f6:	2300      	movs	r3, #0
 80013f8:	703b      	strb	r3, [r7, #0]
 80013fa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4a25      	ldr	r2, [pc, #148]	; (8001498 <main+0xc8>)
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	4611      	mov	r1, r2
 8001408:	2294      	movs	r2, #148	; 0x94
 800140a:	4618      	mov	r0, r3
 800140c:	f005 fea2 	bl	8007154 <memcpy>
 8001410:	2301      	movs	r3, #1
 8001412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
       .model = XL430,
       .baudrate = 57600,
       .uart = huart1, // Assuming huart4 is already defined elsewhere
       .id = 1
   };
  dyn2_torque(XL430_1, TORQUE_ON);
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <main+0xcc>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	9324      	str	r3, [sp, #144]	; 0x90
 800141c:	4668      	mov	r0, sp
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2290      	movs	r2, #144	; 0x90
 8001424:	4619      	mov	r1, r3
 8001426:	f005 fe95 	bl	8007154 <memcpy>
 800142a:	463b      	mov	r3, r7
 800142c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142e:	f7ff fdc9 	bl	8000fc4 <dyn2_torque>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  dyn2_led(XL430_1,LED_ON);
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <main+0xd0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	9324      	str	r3, [sp, #144]	; 0x90
 8001438:	4668      	mov	r0, sp
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2290      	movs	r2, #144	; 0x90
 8001440:	4619      	mov	r1, r3
 8001442:	f005 fe87 	bl	8007154 <memcpy>
 8001446:	463b      	mov	r3, r7
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	f7ff fd4d 	bl	8000ee8 <dyn2_led>
	  dyn2_position(XL430_1,0);
 800144e:	4668      	mov	r0, sp
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	2290      	movs	r2, #144	; 0x90
 8001456:	4619      	mov	r1, r3
 8001458:	f005 fe7c 	bl	8007154 <memcpy>
 800145c:	463b      	mov	r3, r7
 800145e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001460:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80014a4 <main+0xd4>
 8001464:	f7ff fe1c 	bl	80010a0 <dyn2_position>
	  HAL_Delay(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146c:	f000 fc58 	bl	8001d20 <HAL_Delay>
	  dyn2_led(XL430_1,LED_OFF);
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <main+0xd8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	9324      	str	r3, [sp, #144]	; 0x90
 8001476:	4668      	mov	r0, sp
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2290      	movs	r2, #144	; 0x90
 800147e:	4619      	mov	r1, r3
 8001480:	f005 fe68 	bl	8007154 <memcpy>
 8001484:	463b      	mov	r3, r7
 8001486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001488:	f7ff fd2e 	bl	8000ee8 <dyn2_led>
	  //dyn2_position(XL430_1,180);

	  HAL_Delay(1000);
 800148c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001490:	f000 fc46 	bl	8001d20 <HAL_Delay>
	  dyn2_led(XL430_1,LED_ON);
 8001494:	e7cd      	b.n	8001432 <main+0x62>
 8001496:	bf00      	nop
 8001498:	200001e0 	.word	0x200001e0
 800149c:	080073b0 	.word	0x080073b0
 80014a0:	080073b1 	.word	0x080073b1
 80014a4:	00000000 	.word	0x00000000
 80014a8:	080073b3 	.word	0x080073b3

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b09e      	sub	sp, #120	; 0x78
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	2260      	movs	r2, #96	; 0x60
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f005 fe1e 	bl	80070fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 ff4d 	bl	8002370 <HAL_PWREx_ControlVoltageScaling>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014dc:	f000 f82f 	bl	800153e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014e0:	2310      	movs	r3, #16
 80014e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014e4:	2301      	movs	r3, #1
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014e8:	2310      	movs	r3, #16
 80014ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80014ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 ffc4 	bl	8002488 <HAL_RCC_OscConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001506:	f000 f81a 	bl	800153e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150a:	231f      	movs	r3, #31
 800150c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fe8a 	bl	8003240 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001532:	f000 f804 	bl	800153e <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3778      	adds	r7, #120	; 0x78
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001542:	b672      	cpsid	i
}
 8001544:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0x8>

08001548 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001558:	4b31      	ldr	r3, [pc, #196]	; (8001620 <MX_SPI2_Init+0xd8>)
 800155a:	4a32      	ldr	r2, [pc, #200]	; (8001624 <MX_SPI2_Init+0xdc>)
 800155c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <MX_SPI2_Init+0xd8>)
 8001560:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001564:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <MX_SPI2_Init+0xd8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800156c:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <MX_SPI2_Init+0xd8>)
 800156e:	2207      	movs	r2, #7
 8001570:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <MX_SPI2_Init+0xd8>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_SPI2_Init+0xd8>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <MX_SPI2_Init+0xd8>)
 8001580:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001584:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <MX_SPI2_Init+0xd8>)
 8001588:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800158c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <MX_SPI2_Init+0xd8>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <MX_SPI2_Init+0xd8>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <MX_SPI2_Init+0xd8>)
 800159c:	2200      	movs	r2, #0
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015a2:	2207      	movs	r2, #7
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <MX_SPI2_Init+0xd8>)
 80015e6:	f004 fd6f 	bl	80060c8 <HAL_SPI_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 80015f0:	f7ff ffa5 	bl	800153e <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80015f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_SPI2_Init+0xd8>)
 8001608:	f004 fe8f 	bl	800632a <HAL_SPIEx_SetConfigAutonomousMode>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 8001612:	f7ff ff94 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000028 	.word	0x20000028
 8001624:	40003800 	.word	0x40003800

08001628 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0b8      	sub	sp, #224	; 0xe0
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	22b8      	movs	r2, #184	; 0xb8
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f005 fd57 	bl	80070fc <memset>
  if(spiHandle->Instance==SPI2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_SPI_MspInit+0xc8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d147      	bne.n	80016e8 <HAL_SPI_MspInit+0xc0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4618      	mov	r0, r3
 8001672:	f002 f9b5 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800167c:	f7ff ff5f 	bl	800153e <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_SPI_MspInit+0xcc>)
 8001682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001686:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <HAL_SPI_MspInit+0xcc>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_SPI_MspInit+0xcc>)
 8001692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_SPI_MspInit+0xcc>)
 80016a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a4:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_SPI_MspInit+0xcc>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_SPI_MspInit+0xcc>)
 80016b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016bc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d6:	2305      	movs	r3, #5
 80016d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016e0:	4619      	mov	r1, r3
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_SPI_MspInit+0xd0>)
 80016e4:	f000 fc24 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016e8:	bf00      	nop
 80016ea:	37e0      	adds	r7, #224	; 0xe0
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40003800 	.word	0x40003800
 80016f4:	46020c00 	.word	0x46020c00
 80016f8:	42020400 	.word	0x42020400

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_MspInit+0x30>)
 8001704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001708:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_MspInit+0x30>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_MspInit+0x30>)
 8001714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	46020c00 	.word	0x46020c00

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler+0x4>

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 fab0 	bl	8001ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <SystemInit+0x68>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <SystemInit+0x68>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <SystemInit+0x6c>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <SystemInit+0x6c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <SystemInit+0x6c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <SystemInit+0x6c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <SystemInit+0x6c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <SystemInit+0x6c>)
 80017b6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017ba:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <SystemInit+0x6c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <SystemInit+0x6c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <SystemInit+0x6c>)
 80017cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <SystemInit+0x6c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SystemInit+0x68>)
 80017da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017de:	609a      	str	r2, [r3, #8]
  #endif
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00
 80017f0:	46020c00 	.word	0x46020c00

080017f4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 80017fa:	4a21      	ldr	r2, [pc, #132]	; (8001880 <MX_LPUART1_UART_Init+0x8c>)
 80017fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 8001800:	4a20      	ldr	r2, [pc, #128]	; (8001884 <MX_LPUART1_UART_Init+0x90>)
 8001802:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 8001818:	220c      	movs	r2, #12
 800181a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 8001830:	2200      	movs	r2, #0
 8001832:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 8001836:	f004 fdb9 	bl	80063ac <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001840:	f7ff fe7d 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 8001848:	f005 fb8e 	bl	8006f68 <HAL_UARTEx_SetTxFifoThreshold>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001852:	f7ff fe74 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 800185a:	f005 fbc3 	bl	8006fe4 <HAL_UARTEx_SetRxFifoThreshold>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001864:	f7ff fe6b 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_LPUART1_UART_Init+0x88>)
 800186a:	f005 fb44 	bl	8006ef6 <HAL_UARTEx_DisableFifoMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001874:	f7ff fe63 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200000b8 	.word	0x200000b8
 8001880:	46002400 	.word	0x46002400
 8001884:	00033324 	.word	0x00033324

08001888 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_UART4_Init+0x90>)
 800188e:	4a23      	ldr	r2, [pc, #140]	; (800191c <MX_UART4_Init+0x94>)
 8001890:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_UART4_Init+0x90>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_UART4_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_UART4_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_UART4_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_UART4_Init+0x90>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_UART4_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_UART4_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_UART4_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_UART4_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_UART4_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_UART4_Init+0x90>)
 80018d2:	f004 fd6b 	bl	80063ac <HAL_UART_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80018dc:	f7ff fe2f 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_UART4_Init+0x90>)
 80018e4:	f005 fb40 	bl	8006f68 <HAL_UARTEx_SetTxFifoThreshold>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80018ee:	f7ff fe26 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <MX_UART4_Init+0x90>)
 80018f6:	f005 fb75 	bl	8006fe4 <HAL_UARTEx_SetRxFifoThreshold>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001900:	f7ff fe1d 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_UART4_Init+0x90>)
 8001906:	f005 faf6 	bl	8006ef6 <HAL_UARTEx_DisableFifoMode>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001910:	f7ff fe15 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2000014c 	.word	0x2000014c
 800191c:	40004c00 	.word	0x40004c00

08001920 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 8001926:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <MX_USART1_UART_Init+0x94>)
 8001928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 800192c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001968:	4811      	ldr	r0, [pc, #68]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 800196a:	f004 fd6f 	bl	800644c <HAL_HalfDuplex_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001974:	f7ff fde3 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001978:	2100      	movs	r1, #0
 800197a:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 800197c:	f005 faf4 	bl	8006f68 <HAL_UARTEx_SetTxFifoThreshold>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001986:	f7ff fdda 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800198a:	2100      	movs	r1, #0
 800198c:	4808      	ldr	r0, [pc, #32]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 800198e:	f005 fb29 	bl	8006fe4 <HAL_UARTEx_SetRxFifoThreshold>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001998:	f7ff fdd1 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800199c:	4804      	ldr	r0, [pc, #16]	; (80019b0 <MX_USART1_UART_Init+0x90>)
 800199e:	f005 faaa 	bl	8006ef6 <HAL_UARTEx_DisableFifoMode>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019a8:	f7ff fdc9 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200001e0 	.word	0x200001e0
 80019b4:	40013800 	.word	0x40013800

080019b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0bc      	sub	sp, #240	; 0xf0
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	22b8      	movs	r2, #184	; 0xb8
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 fb8f 	bl	80070fc <memset>
  if(uartHandle->Instance==LPUART1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a71      	ldr	r2, [pc, #452]	; (8001ba8 <HAL_UART_MspInit+0x1f0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d146      	bne.n	8001a76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019e8:	f04f 0220 	mov.w	r2, #32
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 ffee 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a0a:	f7ff fd98 	bl	800153e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001a10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a14:	4a65      	ldr	r2, [pc, #404]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001a20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a32:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a3c:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = Rasp_RX_Pin|Rasp_TX_Pin;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a62:	2308      	movs	r3, #8
 8001a64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4850      	ldr	r0, [pc, #320]	; (8001bb0 <HAL_UART_MspInit+0x1f8>)
 8001a70:	f000 fa5e 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a74:	e094      	b.n	8001ba0 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==UART4)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <HAL_UART_MspInit+0x1fc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d145      	bne.n	8001b0c <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a80:	f04f 0208 	mov.w	r2, #8
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f001 ffa3 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001aa0:	f7ff fd4d 	bl	800153e <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001aa4:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aaa:	4a40      	ldr	r2, [pc, #256]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ab0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001ab4:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac8:	4a38      	ldr	r2, [pc, #224]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ST_LINK_TX_Pin|ST_LINK_RX_Pin;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001af8:	2308      	movs	r3, #8
 8001afa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b02:	4619      	mov	r1, r3
 8001b04:	482c      	ldr	r0, [pc, #176]	; (8001bb8 <HAL_UART_MspInit+0x200>)
 8001b06:	f000 fa13 	bl	8001f30 <HAL_GPIO_Init>
}
 8001b0a:	e049      	b.n	8001ba0 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2a      	ldr	r2, [pc, #168]	; (8001bbc <HAL_UART_MspInit+0x204>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d144      	bne.n	8001ba0 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b16:	f04f 0201 	mov.w	r2, #1
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b22:	2300      	movs	r3, #0
 8001b24:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 ff58 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001b36:	f7ff fd02 	bl	800153e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001b3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b40:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b46:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001b4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b5e:	4a13      	ldr	r2, [pc, #76]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_UART_MspInit+0x1f4>)
 8001b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servos_Pin;
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7c:	2312      	movs	r3, #18
 8001b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b8e:	2307      	movs	r3, #7
 8001b90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(Servos_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <HAL_UART_MspInit+0x208>)
 8001b9c:	f000 f9c8 	bl	8001f30 <HAL_GPIO_Init>
}
 8001ba0:	bf00      	nop
 8001ba2:	37f0      	adds	r7, #240	; 0xf0
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	46002400 	.word	0x46002400
 8001bac:	46020c00 	.word	0x46020c00
 8001bb0:	42020800 	.word	0x42020800
 8001bb4:	40004c00 	.word	0x40004c00
 8001bb8:	42020000 	.word	0x42020000
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	42020400 	.word	0x42020400

08001bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bc8:	f7ff fddc 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	; (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	; (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bf2:	f005 fa8b 	bl	800710c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff fbeb 	bl	80013d0 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   r0, =_estack
 8001bfc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000009 	.word	0x20000009
  ldr r2, =_sidata
 8001c08:	080074c4 	.word	0x080074c4
  ldr r2, =_sbss
 8001c0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c10:	20000278 	.word	0x20000278

08001c14 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_Init+0x4c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_Init+0x4c>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f94f 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c2e:	f001 fcf9 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_Init+0x50>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	490b      	ldr	r1, [pc, #44]	; (8001c6c <HAL_Init+0x54>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_Init+0x58>)
 8001c46:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c48:	200f      	movs	r0, #15
 8001c4a:	f000 f813 	bl	8001c74 <HAL_InitTick>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e002      	b.n	8001c5e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c58:	f7ff fd50 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40022000 	.word	0x40022000
 8001c68:	46020c00 	.word	0x46020c00
 8001c6c:	080073b4 	.word	0x080073b4
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_InitTick+0x60>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e021      	b.n	8001ccc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_InitTick+0x64>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_InitTick+0x60>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f939 	bl	8001f16 <HAL_SYSTICK_Config>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00e      	b.n	8001ccc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b0f      	cmp	r3, #15
 8001cb2:	d80a      	bhi.n	8001cca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f000 f911 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <HAL_InitTick+0x68>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x20>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_IncTick+0x24>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <HAL_IncTick+0x24>)
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000274 	.word	0x20000274

08001d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_GetTick+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000274 	.word	0x20000274

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff ffee 	bl	8001d08 <HAL_GetTick>
 8001d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d005      	beq.n	8001d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_Delay+0x44>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d46:	bf00      	nop
 8001d48:	f7ff ffde 	bl	8001d08 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d8f7      	bhi.n	8001d48 <HAL_Delay+0x28>
  {
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008

08001d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d84:	4013      	ands	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff47 	bl	8001d68 <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff5e 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff90 	bl	8001e20 <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5f 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffb2 	bl	8001e88 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f42:	e1ba      	b.n	80022ba <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 81aa 	beq.w	80022b4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a55      	ldr	r2, [pc, #340]	; (80020b8 <HAL_GPIO_Init+0x188>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d15d      	bne.n	8002024 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001f98:	4a48      	ldr	r2, [pc, #288]	; (80020bc <HAL_GPIO_Init+0x18c>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fa0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001fa2:	4a46      	ldr	r2, [pc, #280]	; (80020bc <HAL_GPIO_Init+0x18c>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220b      	movs	r2, #11
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69f9      	ldr	r1, [r7, #28]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	4013      	ands	r3, r2
 800200a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2202      	movs	r2, #2
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	4313      	orrs	r3, r2
 800201a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e067      	b.n	80020f4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x104>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b12      	cmp	r3, #18
 8002032:	d145      	bne.n	80020c0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	4013      	ands	r3, r2
 8002056:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 020f 	and.w	r2, r3, #15
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	4313      	orrs	r3, r2
 8002070:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69f9      	ldr	r1, [r7, #28]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	4013      	ands	r3, r2
 8002096:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e01e      	b.n	80020f4 <HAL_GPIO_Init+0x1c4>
 80020b6:	bf00      	nop
 80020b8:	46020000 	.word	0x46020000
 80020bc:	0800740c 	.word	0x0800740c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d00b      	beq.n	8002114 <HAL_GPIO_Init+0x1e4>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	2b11      	cmp	r3, #17
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b12      	cmp	r3, #18
 8002112:	d130      	bne.n	8002176 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	4013      	ands	r3, r2
 800212a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	4313      	orrs	r3, r2
 800213c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800214a:	2201      	movs	r2, #1
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	4013      	ands	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 0201 	and.w	r2, r3, #1
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	4313      	orrs	r3, r2
 800216e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d017      	beq.n	80021ae <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	4013      	ands	r3, r2
 8002194:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07c      	beq.n	80022b4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021ba:	4a47      	ldr	r2, [pc, #284]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3318      	adds	r3, #24
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	4013      	ands	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0a9a      	lsrs	r2, r3, #10
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <HAL_GPIO_Init+0x3ac>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	4093      	lsls	r3, r2
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80021f6:	4938      	ldr	r1, [pc, #224]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3318      	adds	r3, #24
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002204:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	4013      	ands	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	4013      	ands	r3, r2
 800223c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002252:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 800225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	4013      	ands	r3, r2
 8002268:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800227e:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	4013      	ands	r3, r2
 8002296:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_GPIO_Init+0x3a8>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f ae3d 	bne.w	8001f44 <HAL_GPIO_Init+0x14>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	3724      	adds	r7, #36	; 0x24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	46022000 	.word	0x46022000
 80022dc:	002f7f7f 	.word	0x002f7f7f

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e007      	b.n	800233e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0204 	bic.w	r2, r3, #4
 8002336:	4905      	ldr	r1, [pc, #20]	; (800234c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40030400 	.word	0x40030400

08002350 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_ICACHE_Enable+0x1c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_ICACHE_Enable+0x1c>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40030400 	.word	0x40030400

08002370 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002380:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	d10b      	bne.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002390:	d905      	bls.n	800239e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002392:	4b33      	ldr	r3, [pc, #204]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4a32      	ldr	r2, [pc, #200]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e057      	b.n	8002452 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d90a      	bls.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	4a2a      	ldr	r2, [pc, #168]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	60d3      	str	r3, [r2, #12]
 80023be:	e007      	b.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80023c8:	4925      	ldr	r1, [pc, #148]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	2232      	movs	r2, #50	; 0x32
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	4a21      	ldr	r2, [pc, #132]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	3301      	adds	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80023ee:	e002      	b.n	80023f6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f3      	bne.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01b      	beq.n	8002446 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a15      	ldr	r2, [pc, #84]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	2232      	movs	r2, #50	; 0x32
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	3301      	adds	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800242c:	e002      	b.n	8002434 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3b01      	subs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f3      	bne.n	800242e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e000      	b.n	8002452 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	46020800 	.word	0x46020800
 8002464:	20000000 	.word	0x20000000
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_PWREx_GetVoltageRange+0x18>)
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	46020800 	.word	0x46020800

08002488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f000 bec8 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a2:	4b99      	ldr	r3, [pc, #612]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ac:	4b96      	ldr	r3, [pc, #600]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 816c 	beq.w	800279c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <HAL_RCC_OscConfig+0x52>
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	f040 80de 	bne.w	800268e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	f040 80da 	bne.w	800268e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f000 bea5 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ec:	4b86      	ldr	r3, [pc, #536]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_RCC_OscConfig+0x7a>
 80024f8:	4b83      	ldr	r3, [pc, #524]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002500:	e005      	b.n	800250e <HAL_RCC_OscConfig+0x86>
 8002502:	4b81      	ldr	r3, [pc, #516]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800250e:	4293      	cmp	r3, r2
 8002510:	d255      	bcs.n	80025be <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	4618      	mov	r0, r3
 800251e:	f001 f9d9 	bl	80038d4 <RCC_SetFlashLatencyFromMSIRange>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	f000 be82 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002534:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002538:	6093      	str	r3, [r2, #8]
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	4970      	ldr	r1, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002548:	4313      	orrs	r3, r2
 800254a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002554:	d309      	bcc.n	800256a <HAL_RCC_OscConfig+0xe2>
 8002556:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f023 021f 	bic.w	r2, r3, #31
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4969      	ldr	r1, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002564:	4313      	orrs	r3, r2
 8002566:	60cb      	str	r3, [r1, #12]
 8002568:	e07e      	b.n	8002668 <HAL_RCC_OscConfig+0x1e0>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	da0a      	bge.n	8002588 <HAL_RCC_OscConfig+0x100>
 8002572:	4b65      	ldr	r3, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	015b      	lsls	r3, r3, #5
 8002580:	4961      	ldr	r1, [pc, #388]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002582:	4313      	orrs	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
 8002586:	e06f      	b.n	8002668 <HAL_RCC_OscConfig+0x1e0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002590:	d30a      	bcc.n	80025a8 <HAL_RCC_OscConfig+0x120>
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	4959      	ldr	r1, [pc, #356]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
 80025a6:	e05f      	b.n	8002668 <HAL_RCC_OscConfig+0x1e0>
 80025a8:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	03db      	lsls	r3, r3, #15
 80025b6:	4954      	ldr	r1, [pc, #336]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60cb      	str	r3, [r1, #12]
 80025bc:	e054      	b.n	8002668 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80025be:	4b52      	ldr	r3, [pc, #328]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4a51      	ldr	r2, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025c8:	6093      	str	r3, [r2, #8]
 80025ca:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	494c      	ldr	r1, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80025e4:	d309      	bcc.n	80025fa <HAL_RCC_OscConfig+0x172>
 80025e6:	4b48      	ldr	r3, [pc, #288]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 021f 	bic.w	r2, r3, #31
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4945      	ldr	r1, [pc, #276]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
 80025f8:	e028      	b.n	800264c <HAL_RCC_OscConfig+0x1c4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da0a      	bge.n	8002618 <HAL_RCC_OscConfig+0x190>
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	015b      	lsls	r3, r3, #5
 8002610:	493d      	ldr	r1, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002612:	4313      	orrs	r3, r2
 8002614:	60cb      	str	r3, [r1, #12]
 8002616:	e019      	b.n	800264c <HAL_RCC_OscConfig+0x1c4>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002620:	d30a      	bcc.n	8002638 <HAL_RCC_OscConfig+0x1b0>
 8002622:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002632:	4313      	orrs	r3, r2
 8002634:	60cb      	str	r3, [r1, #12]
 8002636:	e009      	b.n	800264c <HAL_RCC_OscConfig+0x1c4>
 8002638:	4b33      	ldr	r3, [pc, #204]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	03db      	lsls	r3, r3, #15
 8002646:	4930      	ldr	r1, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002648:	4313      	orrs	r3, r2
 800264a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	4618      	mov	r0, r3
 8002658:	f001 f93c 	bl	80038d4 <RCC_SetFlashLatencyFromMSIRange>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	f000 bde5 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002668:	f001 f8de 	bl	8003828 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_OscConfig+0x284>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff faff 	bl	8001c74 <HAL_InitTick>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800267c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 808a 	beq.w	800279a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800268a:	f000 bdd2 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d066      	beq.n	8002764 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026a2:	f7ff fb31 	bl	8001d08 <HAL_GetTick>
 80026a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80026a8:	e009      	b.n	80026be <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026aa:	f7ff fb2d 	bl	8001d08 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d902      	bls.n	80026be <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f000 bdba 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ef      	beq.n	80026aa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026d4:	6093      	str	r3, [r2, #8]
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	4909      	ldr	r1, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80026f0:	d30e      	bcc.n	8002710 <HAL_RCC_OscConfig+0x288>
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 021f 	bic.w	r2, r3, #31
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4902      	ldr	r1, [pc, #8]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002700:	4313      	orrs	r3, r2
 8002702:	60cb      	str	r3, [r1, #12]
 8002704:	e04a      	b.n	800279c <HAL_RCC_OscConfig+0x314>
 8002706:	bf00      	nop
 8002708:	46020c00 	.word	0x46020c00
 800270c:	20000004 	.word	0x20000004
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	da0a      	bge.n	800272e <HAL_RCC_OscConfig+0x2a6>
 8002718:	4b98      	ldr	r3, [pc, #608]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	015b      	lsls	r3, r3, #5
 8002726:	4995      	ldr	r1, [pc, #596]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	60cb      	str	r3, [r1, #12]
 800272c:	e036      	b.n	800279c <HAL_RCC_OscConfig+0x314>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d30a      	bcc.n	800274e <HAL_RCC_OscConfig+0x2c6>
 8002738:	4b90      	ldr	r3, [pc, #576]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	029b      	lsls	r3, r3, #10
 8002746:	498d      	ldr	r1, [pc, #564]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	60cb      	str	r3, [r1, #12]
 800274c:	e026      	b.n	800279c <HAL_RCC_OscConfig+0x314>
 800274e:	4b8b      	ldr	r3, [pc, #556]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	03db      	lsls	r3, r3, #15
 800275c:	4987      	ldr	r1, [pc, #540]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60cb      	str	r3, [r1, #12]
 8002762:	e01b      	b.n	800279c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002764:	4b85      	ldr	r3, [pc, #532]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a84      	ldr	r2, [pc, #528]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002770:	f7ff faca 	bl	8001d08 <HAL_GetTick>
 8002774:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002776:	e009      	b.n	800278c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002778:	f7ff fac6 	bl	8001d08 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	f000 bd53 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800278c:	4b7b      	ldr	r3, [pc, #492]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ef      	bne.n	8002778 <HAL_RCC_OscConfig+0x2f0>
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800279a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 808b 	beq.w	80028c0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_OscConfig+0x334>
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d109      	bne.n	80027ca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d17d      	bne.n	80028c0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f000 bd34 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x35a>
 80027d4:	4b69      	ldr	r3, [pc, #420]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a68      	ldr	r2, [pc, #416]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e041      	b.n	8002866 <HAL_RCC_OscConfig+0x3de>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ea:	d112      	bne.n	8002812 <HAL_RCC_OscConfig+0x38a>
 80027ec:	4b63      	ldr	r3, [pc, #396]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a62      	ldr	r2, [pc, #392]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b60      	ldr	r3, [pc, #384]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5f      	ldr	r2, [pc, #380]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b5d      	ldr	r3, [pc, #372]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a5c      	ldr	r2, [pc, #368]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e029      	b.n	8002866 <HAL_RCC_OscConfig+0x3de>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800281a:	d112      	bne.n	8002842 <HAL_RCC_OscConfig+0x3ba>
 800281c:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a56      	ldr	r2, [pc, #344]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b54      	ldr	r3, [pc, #336]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a53      	ldr	r2, [pc, #332]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800282e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e011      	b.n	8002866 <HAL_RCC_OscConfig+0x3de>
 8002842:	4b4e      	ldr	r3, [pc, #312]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a4d      	ldr	r2, [pc, #308]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b4b      	ldr	r3, [pc, #300]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a4a      	ldr	r2, [pc, #296]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b48      	ldr	r3, [pc, #288]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a47      	ldr	r2, [pc, #284]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002860:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002864:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d014      	beq.n	8002898 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800286e:	f7ff fa4b 	bl	8001d08 <HAL_GetTick>
 8002872:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002874:	e009      	b.n	800288a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002876:	f7ff fa47 	bl	8001d08 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b64      	cmp	r3, #100	; 0x64
 8002882:	d902      	bls.n	800288a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	f000 bcd4 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288a:	4b3c      	ldr	r3, [pc, #240]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0ef      	beq.n	8002876 <HAL_RCC_OscConfig+0x3ee>
 8002896:	e013      	b.n	80028c0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002898:	f7ff fa36 	bl	8001d08 <HAL_GetTick>
 800289c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800289e:	e009      	b.n	80028b4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff fa32 	bl	8001d08 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d902      	bls.n	80028b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	f000 bcbf 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028b4:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ef      	bne.n	80028a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05f      	beq.n	800298c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x456>
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d114      	bne.n	8002902 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d111      	bne.n	8002902 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f000 bca3 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80028ec:	4b23      	ldr	r3, [pc, #140]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	4920      	ldr	r1, [pc, #128]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002900:	e044      	b.n	800298c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d024      	beq.n	8002954 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002914:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002916:	f7ff f9f7 	bl	8001d08 <HAL_GetTick>
 800291a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800291c:	e009      	b.n	8002932 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291e:	f7ff f9f3 	bl	8001d08 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d902      	bls.n	8002932 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	f000 bc80 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ef      	beq.n	800291e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	041b      	lsls	r3, r3, #16
 800294c:	490b      	ldr	r1, [pc, #44]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	610b      	str	r3, [r1, #16]
 8002952:	e01b      	b.n	800298c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_OscConfig+0x4f4>)
 800295a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800295e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002960:	f7ff f9d2 	bl	8001d08 <HAL_GetTick>
 8002964:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7ff f9ce 	bl	8001d08 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d904      	bls.n	8002980 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	f000 bc5b 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
 800297c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002980:	4baf      	ldr	r3, [pc, #700]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ed      	bne.n	8002968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80c8 	beq.w	8002b2a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a0:	4ba7      	ldr	r3, [pc, #668]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 80029a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d111      	bne.n	80029d2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	4ba4      	ldr	r3, [pc, #656]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b4:	4aa2      	ldr	r2, [pc, #648]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029be:	4ba0      	ldr	r3, [pc, #640]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 80029c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029d2:	4b9c      	ldr	r3, [pc, #624]	; (8002c44 <HAL_RCC_OscConfig+0x7bc>)
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d119      	bne.n	8002a12 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80029de:	4b99      	ldr	r3, [pc, #612]	; (8002c44 <HAL_RCC_OscConfig+0x7bc>)
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	4a98      	ldr	r2, [pc, #608]	; (8002c44 <HAL_RCC_OscConfig+0x7bc>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ea:	f7ff f98d 	bl	8001d08 <HAL_GetTick>
 80029ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029f0:	e009      	b.n	8002a06 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f2:	f7ff f989 	bl	8001d08 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d902      	bls.n	8002a06 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f000 bc16 	b.w	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a06:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCC_OscConfig+0x7bc>)
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0ef      	beq.n	80029f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d05f      	beq.n	8002ada <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002a1a:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a20:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d037      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e3f4      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a52:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a58:	4a79      	ldr	r2, [pc, #484]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002a5a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002a62:	f7ff f951 	bl	8001d08 <HAL_GetTick>
 8002a66:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7ff f94d 	bl	8001d08 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e3da      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a7c:	4b70      	ldr	r3, [pc, #448]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ef      	bne.n	8002a6a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a90:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4969      	ldr	r1, [pc, #420]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002aa0:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aa6:	4a66      	ldr	r2, [pc, #408]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002aa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002ab0:	f7ff f92a 	bl	8001d08 <HAL_GetTick>
 8002ab4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7ff f926 	bl	8001d08 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e3b3      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ef      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x630>
 8002ad8:	e01b      	b.n	8002b12 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002ada:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ae0:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002ae2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002aea:	f7ff f90d 	bl	8001d08 <HAL_GetTick>
 8002aee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af2:	f7ff f909 	bl	8001d08 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e396      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b04:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1ef      	bne.n	8002af2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b12:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b20:	4a47      	ldr	r2, [pc, #284]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8111 	beq.w	8002d5a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d111      	bne.n	8002b70 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b52:	4a3b      	ldr	r2, [pc, #236]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b5c:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b70:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_RCC_OscConfig+0x7bc>)
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b7c:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <HAL_RCC_OscConfig+0x7bc>)
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	4a30      	ldr	r2, [pc, #192]	; (8002c44 <HAL_RCC_OscConfig+0x7bc>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b88:	f7ff f8be 	bl	8001d08 <HAL_GetTick>
 8002b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7ff f8ba 	bl	8001d08 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e347      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ba2:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_RCC_OscConfig+0x7bc>)
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01f      	beq.n	8002bfa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d010      	beq.n	8002be8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002bce:	f043 0304 	orr.w	r3, r3, #4
 8002bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bdc:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002be6:	e018      	b.n	8002c1a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bf8:	e00f      	b.n	8002c1a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c00:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x7b8>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d057      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002c22:	f7ff f871 	bl	8001d08 <HAL_GetTick>
 8002c26:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c28:	e00e      	b.n	8002c48 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7ff f86d 	bl	8001d08 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d905      	bls.n	8002c48 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e2f8      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
 8002c40:	46020c00 	.word	0x46020c00
 8002c44:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c48:	4b9c      	ldr	r3, [pc, #624]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0e9      	beq.n	8002c2a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01b      	beq.n	8002c9a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c62:	4b96      	ldr	r3, [pc, #600]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c68:	4a94      	ldr	r2, [pc, #592]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7ff f848 	bl	8001d08 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e2d3      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c8a:	4b8c      	ldr	r3, [pc, #560]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ed      	beq.n	8002c74 <HAL_RCC_OscConfig+0x7ec>
 8002c98:	e053      	b.n	8002d42 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c9a:	4b88      	ldr	r3, [pc, #544]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca0:	4a86      	ldr	r2, [pc, #536]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7ff f82c 	bl	8001d08 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e2b7      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cc2:	4b7e      	ldr	r3, [pc, #504]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ed      	bne.n	8002cac <HAL_RCC_OscConfig+0x824>
 8002cd0:	e037      	b.n	8002d42 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002cd2:	f7ff f819 	bl	8001d08 <HAL_GetTick>
 8002cd6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7ff f815 	bl	8001d08 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e2a0      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf0:	4b72      	ldr	r3, [pc, #456]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ed      	bne.n	8002cda <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002cfe:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01a      	beq.n	8002d42 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d0c:	4b6b      	ldr	r3, [pc, #428]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d12:	4a6a      	ldr	r2, [pc, #424]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe fff3 	bl	8001d08 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e27e      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d34:	4b61      	ldr	r3, [pc, #388]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ed      	bne.n	8002d1e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d42:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	4b5c      	ldr	r3, [pc, #368]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d50:	4a5a      	ldr	r2, [pc, #360]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d036      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d019      	beq.n	8002da2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002d6e:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d78:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d7a:	f7fe ffc5 	bl	8001d08 <HAL_GetTick>
 8002d7e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d82:	f7fe ffc1 	bl	8001d08 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e24e      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d94:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x8fa>
 8002da0:	e018      	b.n	8002dd4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002da2:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a45      	ldr	r2, [pc, #276]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002dae:	f7fe ffab 	bl	8001d08 <HAL_GetTick>
 8002db2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db6:	f7fe ffa7 	bl	8001d08 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e234      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002dc8:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d036      	beq.n	8002e4e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d019      	beq.n	8002e1c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002de8:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a33      	ldr	r2, [pc, #204]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002df4:	f7fe ff88 	bl	8001d08 <HAL_GetTick>
 8002df8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002dfc:	f7fe ff84 	bl	8001d08 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e211      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x974>
 8002e1a:	e018      	b.n	8002e4e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e28:	f7fe ff6e 	bl	8001d08 <HAL_GetTick>
 8002e2c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002e30:	f7fe ff6a 	bl	8001d08 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e1f7      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d07f      	beq.n	8002f5a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d062      	beq.n	8002f28 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e6c:	6093      	str	r3, [r2, #8]
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	4910      	ldr	r1, [pc, #64]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e88:	d309      	bcc.n	8002e9e <HAL_RCC_OscConfig+0xa16>
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f023 021f 	bic.w	r2, r3, #31
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4909      	ldr	r1, [pc, #36]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60cb      	str	r3, [r1, #12]
 8002e9c:	e02a      	b.n	8002ef4 <HAL_RCC_OscConfig+0xa6c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da0c      	bge.n	8002ec0 <HAL_RCC_OscConfig+0xa38>
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	015b      	lsls	r3, r3, #5
 8002eb4:	4901      	ldr	r1, [pc, #4]	; (8002ebc <HAL_RCC_OscConfig+0xa34>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60cb      	str	r3, [r1, #12]
 8002eba:	e01b      	b.n	8002ef4 <HAL_RCC_OscConfig+0xa6c>
 8002ebc:	46020c00 	.word	0x46020c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d30a      	bcc.n	8002ee0 <HAL_RCC_OscConfig+0xa58>
 8002eca:	4ba1      	ldr	r3, [pc, #644]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	499d      	ldr	r1, [pc, #628]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60cb      	str	r3, [r1, #12]
 8002ede:	e009      	b.n	8002ef4 <HAL_RCC_OscConfig+0xa6c>
 8002ee0:	4b9b      	ldr	r3, [pc, #620]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	03db      	lsls	r3, r3, #15
 8002eee:	4998      	ldr	r1, [pc, #608]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002ef4:	4b96      	ldr	r3, [pc, #600]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a95      	ldr	r2, [pc, #596]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002efa:	f043 0310 	orr.w	r3, r3, #16
 8002efe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f00:	f7fe ff02 	bl	8001d08 <HAL_GetTick>
 8002f04:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f08:	f7fe fefe 	bl	8001d08 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e18b      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0xa80>
 8002f26:	e018      	b.n	8002f5a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002f28:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a88      	ldr	r2, [pc, #544]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002f2e:	f023 0310 	bic.w	r3, r3, #16
 8002f32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f34:	f7fe fee8 	bl	8001d08 <HAL_GetTick>
 8002f38:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f3c:	f7fe fee4 	bl	8001d08 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e171      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f4e:	4b80      	ldr	r3, [pc, #512]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8166 	beq.w	8003230 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6a:	4b79      	ldr	r3, [pc, #484]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	f000 80f2 	beq.w	800315c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	f040 80c5 	bne.w	800310c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a72      	ldr	r2, [pc, #456]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f8e:	f7fe febb 	bl	8001d08 <HAL_GetTick>
 8002f92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe feb7 	bl	8001d08 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e144      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002fa8:	4b69      	ldr	r3, [pc, #420]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb4:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d111      	bne.n	8002fe6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b63      	ldr	r3, [pc, #396]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc8:	4a61      	ldr	r2, [pc, #388]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002fd2:	4b5f      	ldr	r3, [pc, #380]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8002fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_RCC_OscConfig+0xccc>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002ffa:	4b56      	ldr	r3, [pc, #344]	; (8003154 <HAL_RCC_OscConfig+0xccc>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4a55      	ldr	r2, [pc, #340]	; (8003154 <HAL_RCC_OscConfig+0xccc>)
 8003000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003004:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003006:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800301a:	3a01      	subs	r2, #1
 800301c:	0212      	lsls	r2, r2, #8
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003024:	430a      	orrs	r2, r1
 8003026:	494a      	ldr	r1, [pc, #296]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003028:	4313      	orrs	r3, r2
 800302a:	628b      	str	r3, [r1, #40]	; 0x28
 800302c:	4b48      	ldr	r3, [pc, #288]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 800302e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_RCC_OscConfig+0xcd0>)
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003038:	3a01      	subs	r2, #1
 800303a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003042:	3a01      	subs	r2, #1
 8003044:	0252      	lsls	r2, r2, #9
 8003046:	b292      	uxth	r2, r2
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800304e:	3a01      	subs	r2, #1
 8003050:	0412      	lsls	r2, r2, #16
 8003052:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800305c:	3a01      	subs	r2, #1
 800305e:	0612      	lsls	r2, r2, #24
 8003060:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003064:	430a      	orrs	r2, r1
 8003066:	493a      	ldr	r1, [pc, #232]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800306c:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	4a37      	ldr	r2, [pc, #220]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003072:	f023 0310 	bic.w	r3, r3, #16
 8003076:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	4a34      	ldr	r2, [pc, #208]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003082:	4b33      	ldr	r3, [pc, #204]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	4a32      	ldr	r2, [pc, #200]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003088:	f043 0310 	orr.w	r3, r3, #16
 800308c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	f023 020c 	bic.w	r2, r3, #12
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	492d      	ldr	r1, [pc, #180]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 800309c:	4313      	orrs	r3, r2
 800309e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80030a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80030a8:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_OscConfig+0xccc>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a29      	ldr	r2, [pc, #164]	; (8003154 <HAL_RCC_OscConfig+0xccc>)
 80030ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80030b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c2:	4a23      	ldr	r2, [pc, #140]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 80030d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 80030de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80030e4:	f7fe fe10 	bl	8001d08 <HAL_GetTick>
 80030e8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fe0c 	bl	8001d08 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e099      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0xc64>
 800310a:	e091      	b.n	8003230 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003118:	f7fe fdf6 	bl	8001d08 <HAL_GetTick>
 800311c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fdf2 	bl	8001d08 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e07f      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	4a03      	ldr	r2, [pc, #12]	; (8003150 <HAL_RCC_OscConfig+0xcc8>)
 8003144:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003148:	f023 0303 	bic.w	r3, r3, #3
 800314c:	6293      	str	r3, [r2, #40]	; 0x28
 800314e:	e06f      	b.n	8003230 <HAL_RCC_OscConfig+0xda8>
 8003150:	46020c00 	.word	0x46020c00
 8003154:	46020800 	.word	0x46020800
 8003158:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800315c:	4b37      	ldr	r3, [pc, #220]	; (800323c <HAL_RCC_OscConfig+0xdb4>)
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_RCC_OscConfig+0xdb4>)
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	2b01      	cmp	r3, #1
 800316e:	d039      	beq.n	80031e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0203 	and.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d132      	bne.n	80031e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d129      	bne.n	80031e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d122      	bne.n	80031e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	0a5b      	lsrs	r3, r3, #9
 80031b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031cc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e024      	b.n	8003232 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_RCC_OscConfig+0xdb4>)
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d01a      	beq.n	8003230 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <HAL_RCC_OscConfig+0xdb4>)
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	4a0f      	ldr	r2, [pc, #60]	; (800323c <HAL_RCC_OscConfig+0xdb4>)
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fe fd7f 	bl	8001d08 <HAL_GetTick>
 800320a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800320c:	bf00      	nop
 800320e:	f7fe fd7b 	bl	8001d08 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	4293      	cmp	r3, r2
 8003218:	d0f9      	beq.n	800320e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	4a07      	ldr	r2, [pc, #28]	; (800323c <HAL_RCC_OscConfig+0xdb4>)
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_OscConfig+0xdb4>)
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_RCC_OscConfig+0xdb4>)
 800322a:	f043 0310 	orr.w	r3, r3, #16
 800322e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3738      	adds	r7, #56	; 0x38
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	46020c00 	.word	0x46020c00

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e1d9      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b9b      	ldr	r3, [pc, #620]	; (80034c4 <HAL_RCC_ClockConfig+0x284>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d910      	bls.n	8003284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b98      	ldr	r3, [pc, #608]	; (80034c4 <HAL_RCC_ClockConfig+0x284>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 020f 	bic.w	r2, r3, #15
 800326a:	4996      	ldr	r1, [pc, #600]	; (80034c4 <HAL_RCC_ClockConfig+0x284>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b94      	ldr	r3, [pc, #592]	; (80034c4 <HAL_RCC_ClockConfig+0x284>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e1c1      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800329c:	429a      	cmp	r2, r3
 800329e:	d908      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80032a0:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	4986      	ldr	r1, [pc, #536]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d909      	bls.n	80032e4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80032d0:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	497a      	ldr	r1, [pc, #488]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	4b74      	ldr	r3, [pc, #464]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d908      	bls.n	8003312 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	496e      	ldr	r1, [pc, #440]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 800330e:	4313      	orrs	r3, r2
 8003310:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d010      	beq.n	8003340 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	4b69      	ldr	r3, [pc, #420]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	429a      	cmp	r2, r3
 800332c:	d908      	bls.n	8003340 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800332e:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f023 020f 	bic.w	r2, r3, #15
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4963      	ldr	r1, [pc, #396]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 800333c:	4313      	orrs	r3, r2
 800333e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80d2 	beq.w	80034f2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d143      	bne.n	80033e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b5b      	ldr	r3, [pc, #364]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d110      	bne.n	800338a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b57      	ldr	r3, [pc, #348]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	4a56      	ldr	r2, [pc, #344]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800338a:	f7fe fcbd 	bl	8001d08 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003390:	4b4e      	ldr	r3, [pc, #312]	; (80034cc <HAL_RCC_ClockConfig+0x28c>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00f      	beq.n	80033bc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800339e:	f7fe fcb3 	bl	8001d08 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e12b      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80033b0:	4b46      	ldr	r3, [pc, #280]	; (80034cc <HAL_RCC_ClockConfig+0x28c>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80033c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c8:	4a3f      	ldr	r2, [pc, #252]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80033ca:	f023 0304 	bic.w	r3, r3, #4
 80033ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80033d2:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d121      	bne.n	8003422 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e112      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d115      	bne.n	8003422 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e106      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0fa      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0f2      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4926      	ldr	r1, [pc, #152]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 8003430:	4313      	orrs	r3, r2
 8003432:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003434:	f7fe fc68 	bl	8001d08 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d112      	bne.n	8003468 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003442:	e00a      	b.n	800345a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f7fe fc60 	bl	8001d08 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0d6      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d1ee      	bne.n	8003444 <HAL_RCC_ClockConfig+0x204>
 8003466:	e044      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d112      	bne.n	8003496 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003472:	f7fe fc49 	bl	8001d08 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0bf      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b08      	cmp	r3, #8
 8003492:	d1ee      	bne.n	8003472 <HAL_RCC_ClockConfig+0x232>
 8003494:	e02d      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d123      	bne.n	80034e6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7fe fc32 	bl	8001d08 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0a8      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <HAL_RCC_ClockConfig+0x288>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x260>
 80034c2:	e016      	b.n	80034f2 <HAL_RCC_ClockConfig+0x2b2>
 80034c4:	40022000 	.word	0x40022000
 80034c8:	46020c00 	.word	0x46020c00
 80034cc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d0:	f7fe fc1a 	bl	8001d08 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e090      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e6:	4b4a      	ldr	r3, [pc, #296]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d1ee      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	4b43      	ldr	r3, [pc, #268]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	429a      	cmp	r2, r3
 800350c:	d208      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800350e:	4b40      	ldr	r3, [pc, #256]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 020f 	bic.w	r2, r3, #15
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	493d      	ldr	r1, [pc, #244]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b3c      	ldr	r3, [pc, #240]	; (8003614 <HAL_RCC_ClockConfig+0x3d4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d210      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_RCC_ClockConfig+0x3d4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 020f 	bic.w	r2, r3, #15
 8003536:	4937      	ldr	r1, [pc, #220]	; (8003614 <HAL_RCC_ClockConfig+0x3d4>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b35      	ldr	r3, [pc, #212]	; (8003614 <HAL_RCC_ClockConfig+0x3d4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e05b      	b.n	8003608 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003568:	429a      	cmp	r2, r3
 800356a:	d208      	bcs.n	800357e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4925      	ldr	r1, [pc, #148]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003598:	429a      	cmp	r2, r3
 800359a:	d209      	bcs.n	80035b0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800359c:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4919      	ldr	r1, [pc, #100]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d208      	bcs.n	80035de <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	490d      	ldr	r1, [pc, #52]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80035de:	f000 f821 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x3d0>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	490a      	ldr	r1, [pc, #40]	; (8003618 <HAL_RCC_ClockConfig+0x3d8>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	4a09      	ldr	r2, [pc, #36]	; (800361c <HAL_RCC_ClockConfig+0x3dc>)
 80035f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x3e0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fb39 	bl	8001c74 <HAL_InitTick>
 8003602:	4603      	mov	r3, r0
 8003604:	73fb      	strb	r3, [r7, #15]

  return status;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	46020c00 	.word	0x46020c00
 8003614:	40022000 	.word	0x40022000
 8003618:	080073b4 	.word	0x080073b4
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b08b      	sub	sp, #44	; 0x2c
 8003628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4b78      	ldr	r3, [pc, #480]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363c:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x34>
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d121      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d11e      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003658:	4b6e      	ldr	r3, [pc, #440]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003664:	4b6b      	ldr	r3, [pc, #428]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800366a:	0b1b      	lsrs	r3, r3, #12
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e005      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003674:	4b67      	ldr	r3, [pc, #412]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	0f1b      	lsrs	r3, r3, #28
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003680:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003688:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d110      	bne.n	80036b2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003694:	e00d      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003696:	4b5f      	ldr	r3, [pc, #380]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d102      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036a2:	4b5e      	ldr	r3, [pc, #376]	; (800381c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80036a4:	623b      	str	r3, [r7, #32]
 80036a6:	e004      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ae:	4b5b      	ldr	r3, [pc, #364]	; (800381c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80036b0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	f040 80a5 	bne.w	8003804 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80036ba:	4b56      	ldr	r3, [pc, #344]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80036c4:	4b53      	ldr	r3, [pc, #332]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80036d2:	4b50      	ldr	r3, [pc, #320]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80036de:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	08db      	lsrs	r3, r3, #3
 80036e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d003      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0xe4>
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d022      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x128>
 8003706:	e043      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003820 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371a:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800372a:	ed97 6a01 	vldr	s12, [r7, #4]
 800372e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8003824 <HAL_RCC_GetSysClockFreq+0x200>
 8003732:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003736:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800373a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800374a:	e046      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003756:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003820 <HAL_RCC_GetSysClockFreq+0x1fc>
 800375a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800376e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003772:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8003824 <HAL_RCC_GetSysClockFreq+0x200>
 8003776:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800377a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800377e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003782:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800378e:	e024      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037b8:	ed97 6a01 	vldr	s12, [r7, #4]
 80037bc:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003824 <HAL_RCC_GetSysClockFreq+0x200>
 80037c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037d8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	0e1b      	lsrs	r3, r3, #24
 80037e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e4:	3301      	adds	r3, #1
 80037e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80037f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fe:	ee17 3a90 	vmov	r3, s15
 8003802:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003804:	6a3b      	ldr	r3, [r7, #32]
}
 8003806:	4618      	mov	r0, r3
 8003808:	372c      	adds	r7, #44	; 0x2c
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	46020c00 	.word	0x46020c00
 8003818:	080073cc 	.word	0x080073cc
 800381c:	00f42400 	.word	0x00f42400
 8003820:	4b742400 	.word	0x4b742400
 8003824:	46000000 	.word	0x46000000

08003828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800382c:	f7ff fefa 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_RCC_GetHCLKFreq+0x28>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	4906      	ldr	r1, [pc, #24]	; (8003854 <HAL_RCC_GetHCLKFreq+0x2c>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <HAL_RCC_GetHCLKFreq+0x30>)
 8003844:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <HAL_RCC_GetHCLKFreq+0x30>)
 8003848:	681b      	ldr	r3, [r3, #0]
}
 800384a:	4618      	mov	r0, r3
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	46020c00 	.word	0x46020c00
 8003854:	080073b4 	.word	0x080073b4
 8003858:	20000000 	.word	0x20000000

0800385c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003860:	f7ff ffe2 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003864:	4602      	mov	r2, r0
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	4903      	ldr	r1, [pc, #12]	; (8003880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003878:	4618      	mov	r0, r3
 800387a:	bd80      	pop	{r7, pc}
 800387c:	46020c00 	.word	0x46020c00
 8003880:	080073c4 	.word	0x080073c4

08003884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003888:	f7ff ffce 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 800388c:	4602      	mov	r2, r0
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	4903      	ldr	r1, [pc, #12]	; (80038a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800389a:	5ccb      	ldrb	r3, [r1, r3]
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	46020c00 	.word	0x46020c00
 80038a8:	080073c4 	.word	0x080073c4

080038ac <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80038b0:	f7ff ffba 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK3Freq+0x20>)
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4903      	ldr	r1, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	46020c00 	.word	0x46020c00
 80038d0:	080073c4 	.word	0x080073c4

080038d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038dc:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038ea:	f7fe fdbf 	bl	800246c <HAL_PWREx_GetVoltageRange>
 80038ee:	6178      	str	r0, [r7, #20]
 80038f0:	e019      	b.n	8003926 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f8:	4a37      	ldr	r2, [pc, #220]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038fa:	f043 0304 	orr.w	r3, r3, #4
 80038fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003902:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003910:	f7fe fdac 	bl	800246c <HAL_PWREx_GetVoltageRange>
 8003914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391c:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800391e:	f023 0304 	bic.w	r3, r3, #4
 8003922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800392c:	d003      	beq.n	8003936 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003934:	d109      	bne.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393c:	d202      	bcs.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800393e:	2301      	movs	r3, #1
 8003940:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003942:	e033      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003948:	e030      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003950:	d208      	bcs.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d102      	bne.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800395a:	2303      	movs	r3, #3
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e025      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e035      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396a:	d90f      	bls.n	800398c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003978:	d902      	bls.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e015      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003980:	2301      	movs	r3, #1
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	e012      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	e00f      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003992:	d109      	bne.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d102      	bne.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800399c:	2301      	movs	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	e004      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80039a2:	2302      	movs	r3, #2
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e001      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80039a8:	2301      	movs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 020f 	bic.w	r2, r3, #15
 80039b4:	4909      	ldr	r1, [pc, #36]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	46020c00 	.word	0x46020c00
 80039dc:	40022000 	.word	0x40022000

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b0b4      	sub	sp, #208	; 0xd0
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f2:	2300      	movs	r3, #0
 80039f4:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f002 0401 	and.w	r4, r2, #1
 8003a04:	2500      	movs	r5, #0
 8003a06:	ea54 0305 	orrs.w	r3, r4, r5
 8003a0a:	d00b      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003a0c:	4bc4      	ldr	r3, [pc, #784]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a12:	f023 0103 	bic.w	r1, r3, #3
 8003a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	4ac0      	ldr	r2, [pc, #768]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f002 0804 	and.w	r8, r2, #4
 8003a30:	f04f 0900 	mov.w	r9, #0
 8003a34:	ea58 0309 	orrs.w	r3, r8, r9
 8003a38:	d00b      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003a3a:	4bb9      	ldr	r3, [pc, #740]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	4ab5      	ldr	r2, [pc, #724]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f002 0a08 	and.w	sl, r2, #8
 8003a5e:	f04f 0b00 	mov.w	fp, #0
 8003a62:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a66:	d00b      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003a68:	4bad      	ldr	r3, [pc, #692]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	4aa9      	ldr	r2, [pc, #676]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f002 0310 	and.w	r3, r2, #16
 8003a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003aa0:	4b9f      	ldr	r3, [pc, #636]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	4a9b      	ldr	r2, [pc, #620]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f002 0320 	and.w	r3, r2, #32
 8003ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ace:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003ad8:	4b91      	ldr	r3, [pc, #580]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ade:	f023 0107 	bic.w	r1, r3, #7
 8003ae2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae8:	4a8d      	ldr	r2, [pc, #564]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003aea:	430b      	orrs	r3, r1
 8003aec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003afc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b06:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b10:	4b83      	ldr	r3, [pc, #524]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b16:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003b1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b20:	4a7f      	ldr	r2, [pc, #508]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b48:	4b75      	ldr	r3, [pc, #468]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b58:	4a71      	ldr	r2, [pc, #452]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003b80:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b90:	4a63      	ldr	r2, [pc, #396]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b92:	430b      	orrs	r3, r1
 8003b94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003bae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bbe:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003bc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a55      	ldr	r2, [pc, #340]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003be6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bf6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003bfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	4a47      	ldr	r2, [pc, #284]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c16:	2300      	movs	r3, #0
 8003c18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003c24:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c2a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003c2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c34:	4a3a      	ldr	r2, [pc, #232]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c36:	430b      	orrs	r3, r1
 8003c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003c3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c48:	673b      	str	r3, [r7, #112]	; 0x70
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	677b      	str	r3, [r7, #116]	; 0x74
 8003c4e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c52:	460b      	mov	r3, r1
 8003c54:	4313      	orrs	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003c58:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c68:	4a2d      	ldr	r2, [pc, #180]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c7e:	2300      	movs	r3, #0
 8003c80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d04f      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c94:	2b80      	cmp	r3, #128	; 0x80
 8003c96:	d02d      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d827      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003c9c:	2b60      	cmp	r3, #96	; 0x60
 8003c9e:	d02b      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003ca0:	2b60      	cmp	r3, #96	; 0x60
 8003ca2:	d823      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d006      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d81f      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d011      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003cb4:	e01a      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cc2:	e01a      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cc8:	3308      	adds	r3, #8
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 f8cc 	bl	8005e68 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cd6:	e010      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cdc:	332c      	adds	r3, #44	; 0x2c
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f002 f95a 	bl	8005f98 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cea:	e006      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x31a>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 8003cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfa:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d110      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d08:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003d0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d14:	4a02      	ldr	r2, [pc, #8]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d16:	430b      	orrs	r3, r1
 8003d18:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d1c:	e006      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003d1e:	bf00      	nop
 8003d20:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003d28:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003d2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d38:	663b      	str	r3, [r7, #96]	; 0x60
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d046      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003d48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d50:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d54:	d028      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003d56:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d5a:	d821      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d60:	d022      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d66:	d81b      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003d68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d6c:	d01c      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003d6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d72:	d815      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d78:	d008      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7e:	d80f      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d011      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d00e      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003d8a:	e009      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d90:	3308      	adds	r3, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 f868 	bl	8005e68 <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003d9e:	e004      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        break;
 8003da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003daa:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003db2:	4bb6      	ldr	r3, [pc, #728]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003db8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc4:	4ab1      	ldr	r2, [pc, #708]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dcc:	e003      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dce:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003dd2:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003de2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003de4:	2300      	movs	r3, #0
 8003de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003dec:	460b      	mov	r3, r1
 8003dee:	4313      	orrs	r3, r2
 8003df0:	d03e      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003df2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d81d      	bhi.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8003dfe:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e43 	.word	0x08003e43
 8003e08:	08003e19 	.word	0x08003e19
 8003e0c:	08003e27 	.word	0x08003e27
 8003e10:	08003e43 	.word	0x08003e43
 8003e14:	08003e43 	.word	0x08003e43
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e18:	4b9c      	ldr	r3, [pc, #624]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	4a9b      	ldr	r2, [pc, #620]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e22:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003e24:	e00e      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e2a:	332c      	adds	r3, #44	; 0x2c
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f002 f8b3 	bl	8005f98 <RCCEx_PLL3_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003e38:	e004      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x464>
        break;
 8003e42:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e44:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003e4c:	4b8f      	ldr	r3, [pc, #572]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003e4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e52:	f023 0107 	bic.w	r1, r3, #7
 8003e56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5e:	4a8b      	ldr	r2, [pc, #556]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003e60:	430b      	orrs	r3, r1
 8003e62:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003e66:	e003      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003e6c:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e7e:	2300      	movs	r3, #0
 8003e80:	657b      	str	r3, [r7, #84]	; 0x54
 8003e82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	d04a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003e8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e98:	d028      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003e9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e9e:	d821      	bhi.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea4:	d024      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003eaa:	d81b      	bhi.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb6:	d815      	bhi.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01b      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d110      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ec2:	4b72      	ldr	r3, [pc, #456]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	4a71      	ldr	r2, [pc, #452]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003ece:	e012      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ed4:	332c      	adds	r3, #44	; 0x2c
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 f85e 	bl	8005f98 <RCCEx_PLL3_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003eea:	e004      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8003eec:	bf00      	nop
 8003eee:	e002      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8003ef4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003ef6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10d      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f04:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	4a5e      	ldr	r2, [pc, #376]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003f12:	430b      	orrs	r3, r1
 8003f14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f18:	e003      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x542>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003f1e:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f30:	2300      	movs	r3, #0
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f000 80ba 	beq.w	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d113      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f54:	4b4d      	ldr	r3, [pc, #308]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5a:	4a4c      	ldr	r2, [pc, #304]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f64:	4b49      	ldr	r3, [pc, #292]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
      pwrclkchanged = SET;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003f7c:	4b44      	ldr	r3, [pc, #272]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	4a43      	ldr	r2, [pc, #268]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f88:	f7fd febe 	bl	8001d08 <HAL_GetTick>
 8003f8c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f90:	e00b      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fd feb9 	bl	8001d08 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d903      	bls.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      {
        ret = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003fa8:	e005      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ed      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      }
    }

    if (ret == HAL_OK)
 8003fb6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d16a      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fbe:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003fcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d023      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8003fd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fd8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01b      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x63c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fe4:	4b29      	ldr	r3, [pc, #164]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ff8:	4a24      	ldr	r2, [pc, #144]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004008:	4a20      	ldr	r2, [pc, #128]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004018:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800401c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d019      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x67c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fe6e 	bl	8001d08 <HAL_GetTick>
 800402c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004030:	e00d      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fd fe69 	bl	8001d08 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800403c:	1ad2      	subs	r2, r2, r3
 800403e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004042:	429a      	cmp	r2, r3
 8004044:	d903      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
            break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x67c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ea      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if (ret == HAL_OK)
 800405c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800406a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800406e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004072:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004076:	4a05      	ldr	r2, [pc, #20]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8004078:	430b      	orrs	r3, r1
 800407a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800407e:	e00d      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004080:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004084:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8004088:	e008      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800408a:	bf00      	nop
 800408c:	46020c00 	.word	0x46020c00
 8004090:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004098:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800409c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d107      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a4:	4bc0      	ldr	r3, [pc, #768]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	4abf      	ldr	r2, [pc, #764]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80040ac:	f023 0304 	bic.w	r3, r3, #4
 80040b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80040b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80040c0:	643b      	str	r3, [r7, #64]	; 0x40
 80040c2:	2300      	movs	r3, #0
 80040c4:	647b      	str	r3, [r7, #68]	; 0x44
 80040c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80040ca:	460b      	mov	r3, r1
 80040cc:	4313      	orrs	r3, r2
 80040ce:	d042      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x776>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80040d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040dc:	d022      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x744>
 80040de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040e2:	d81b      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x73c>
 80040e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e8:	d011      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x72e>
 80040ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ee:	d815      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x73c>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d019      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80040f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f8:	d110      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040fe:	3308      	adds	r3, #8
 8004100:	4618      	mov	r0, r3
 8004102:	f001 feb1 	bl	8005e68 <RCCEx_PLL2_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 800410c:	e00d      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410e:	4ba6      	ldr	r3, [pc, #664]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	4aa5      	ldr	r2, [pc, #660]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004118:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800411a:	e006      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004122:	e002      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8004128:	bf00      	nop
    }
    if (ret == HAL_OK)
 800412a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x76e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004132:	4b9d      	ldr	r3, [pc, #628]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004138:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800413c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004144:	4a98      	ldr	r2, [pc, #608]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004146:	430b      	orrs	r3, r1
 8004148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x776>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004152:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004156:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
 8004164:	2300      	movs	r3, #0
 8004166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004168:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d02d      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004172:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417e:	d00b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004184:	d804      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418e:	d007      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8004198:	bf00      	nop
 800419a:	e002      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 80041a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041a2:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80041aa:	4b7f      	ldr	r3, [pc, #508]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80041ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	4a7a      	ldr	r2, [pc, #488]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80041be:	430b      	orrs	r3, r1
 80041c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80041ca:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80041ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
 80041dc:	2300      	movs	r3, #0
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
 80041e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80041e4:	460b      	mov	r3, r1
 80041e6:	4313      	orrs	r3, r2
 80041e8:	d019      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80041ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f6:	d105      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041f8:	4b6b      	ldr	r3, [pc, #428]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	4a6a      	ldr	r2, [pc, #424]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004204:	4b68      	ldr	r3, [pc, #416]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004206:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800420a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800420e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004216:	4a64      	ldr	r2, [pc, #400]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004218:	430b      	orrs	r3, r1
 800421a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800421e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
 800422c:	2300      	movs	r3, #0
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004230:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004234:	460b      	mov	r3, r1
 8004236:	4313      	orrs	r3, r2
 8004238:	d00c      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800423a:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004244:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004248:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800424c:	4956      	ldr	r1, [pc, #344]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004260:	623b      	str	r3, [r7, #32]
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d00c      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004270:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004276:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800427a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800427e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004282:	4949      	ldr	r1, [pc, #292]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800428a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042a0:	460b      	mov	r3, r1
 80042a2:	4313      	orrs	r3, r2
 80042a4:	d00c      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80042a6:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80042a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042ac:	f023 0218 	bic.w	r2, r3, #24
 80042b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042b8:	493b      	ldr	r1, [pc, #236]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042d6:	460b      	mov	r3, r1
 80042d8:	4313      	orrs	r3, r2
 80042da:	d032      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x962>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80042dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e8:	d105      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ea:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	4a2e      	ldr	r2, [pc, #184]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80042f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80042f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004302:	d108      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x936>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004308:	3308      	adds	r3, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fdac 	bl	8005e68 <RCCEx_PLL2_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }
    if (ret == HAL_OK)
 8004316:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x95a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800431e:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004320:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004328:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800432c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004330:	491d      	ldr	r1, [pc, #116]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004338:	e003      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x962>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800433e:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004342:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d03d      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800435e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800436a:	d00e      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800436c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004370:	d815      	bhi.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004376:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800437a:	d110      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x9be>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004386:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004388:	e011      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800438a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800438e:	3308      	adds	r3, #8
 8004390:	4618      	mov	r0, r3
 8004392:	f001 fd69 	bl	8005e68 <RCCEx_PLL2_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800439c:	e007      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      default:
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 80043a6:	bf00      	nop
 80043a8:	46020c00 	.word	0x46020c00
        break;
 80043ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80043ae:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10d      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80043b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c8:	4915      	ldr	r1, [pc, #84]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80043d6:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80043da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043f0:	460b      	mov	r3, r1
 80043f2:	4313      	orrs	r3, r2
 80043f4:	d00c      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80043f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043fc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004408:	4905      	ldr	r1, [pc, #20]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004410:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
}
 8004414:	4618      	mov	r0, r3
 8004416:	37d0      	adds	r7, #208	; 0xd0
 8004418:	46bd      	mov	sp, r7
 800441a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441e:	bf00      	nop
 8004420:	46020c00 	.word	0x46020c00

08004424 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800442c:	4ba6      	ldr	r3, [pc, #664]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800442e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004434:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004436:	4ba4      	ldr	r3, [pc, #656]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004440:	4ba1      	ldr	r3, [pc, #644]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	3301      	adds	r3, #1
 800444c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800444e:	4b9e      	ldr	r3, [pc, #632]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800445a:	4b9b      	ldr	r3, [pc, #620]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	08db      	lsrs	r3, r3, #3
 8004460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d062      	beq.n	8004542 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b03      	cmp	r3, #3
 8004480:	f200 8081 	bhi.w	8004586 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d024      	beq.n	80044d4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d17a      	bne.n	8004586 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	4b89      	ldr	r3, [pc, #548]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80044b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b6:	eddf 5a86 	vldr	s11, [pc, #536]	; 80046d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80044ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80044c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044d2:	e08f      	b.n	80045f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80044d4:	4b7c      	ldr	r3, [pc, #496]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80044e0:	4b79      	ldr	r3, [pc, #484]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	0f1b      	lsrs	r3, r3, #28
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	e006      	b.n	80044fa <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80044ec:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	0f1b      	lsrs	r3, r3, #28
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	4a76      	ldr	r2, [pc, #472]	; (80046d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80044fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004500:	ee07 3a90 	vmov	s15, r3
 8004504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004520:	ed97 6a02 	vldr	s12, [r7, #8]
 8004524:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80046d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004534:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004540:	e058      	b.n	80045f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004554:	4b5c      	ldr	r3, [pc, #368]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004564:	ed97 6a02 	vldr	s12, [r7, #8]
 8004568:	eddf 5a59 	vldr	s11, [pc, #356]	; 80046d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800456c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004570:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004578:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800457c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004580:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004584:	e036      	b.n	80045f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004586:	4b50      	ldr	r3, [pc, #320]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8004592:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0f1b      	lsrs	r3, r3, #28
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	e006      	b.n	80045ac <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800459e:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	0f1b      	lsrs	r3, r3, #28
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	4a49      	ldr	r2, [pc, #292]	; (80046d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80045ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80046d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80045f4:	4b34      	ldr	r3, [pc, #208]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d017      	beq.n	8004630 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004600:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	0a5b      	lsrs	r3, r3, #9
 8004606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004616:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800461a:	edd7 6a07 	vldr	s13, [r7, #28]
 800461e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004626:	ee17 2a90 	vmov	r2, s15
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e002      	b.n	8004636 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d017      	beq.n	8004672 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004642:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004658:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800465c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004668:	ee17 2a90 	vmov	r2, s15
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	605a      	str	r2, [r3, #4]
 8004670:	e002      	b.n	8004678 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d017      	beq.n	80046b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004688:	0e1b      	lsrs	r3, r3, #24
 800468a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800469a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800469e:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046aa:	ee17 2a90 	vmov	r2, s15
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80046b2:	e002      	b.n	80046ba <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]
}
 80046ba:	bf00      	nop
 80046bc:	3724      	adds	r7, #36	; 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	46020c00 	.word	0x46020c00
 80046cc:	4b742400 	.word	0x4b742400
 80046d0:	46000000 	.word	0x46000000
 80046d4:	080073cc 	.word	0x080073cc

080046d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	; 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80046e0:	4ba6      	ldr	r3, [pc, #664]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80046ea:	4ba4      	ldr	r3, [pc, #656]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80046f4:	4ba1      	ldr	r3, [pc, #644]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	0a1b      	lsrs	r3, r3, #8
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	3301      	adds	r3, #1
 8004700:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004702:	4b9e      	ldr	r3, [pc, #632]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800470e:	4b9b      	ldr	r3, [pc, #620]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	08db      	lsrs	r3, r3, #3
 8004714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d062      	beq.n	80047f6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b03      	cmp	r3, #3
 8004734:	f200 8081 	bhi.w	800483a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d024      	beq.n	8004788 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d17a      	bne.n	800483a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004756:	4b89      	ldr	r3, [pc, #548]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004766:	ed97 6a02 	vldr	s12, [r7, #8]
 800476a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800476e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004772:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004786:	e08f      	b.n	80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004788:	4b7c      	ldr	r3, [pc, #496]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004794:	4b79      	ldr	r3, [pc, #484]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	0f1b      	lsrs	r3, r3, #28
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	e006      	b.n	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80047a0:	4b76      	ldr	r3, [pc, #472]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	0f1b      	lsrs	r3, r3, #28
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	4a76      	ldr	r2, [pc, #472]	; (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80047b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80047dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80047ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047f4:	e058      	b.n	80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004800:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004808:	4b5c      	ldr	r3, [pc, #368]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004818:	ed97 6a02 	vldr	s12, [r7, #8]
 800481c:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004820:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004824:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004834:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004838:	e036      	b.n	80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800483a:	4b50      	ldr	r3, [pc, #320]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8004846:	4b4d      	ldr	r3, [pc, #308]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0f1b      	lsrs	r3, r3, #28
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	e006      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8004852:	4b4a      	ldr	r3, [pc, #296]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	0f1b      	lsrs	r3, r3, #28
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	4a49      	ldr	r2, [pc, #292]	; (8004988 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004886:	ed97 6a02 	vldr	s12, [r7, #8]
 800488a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800488e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80048a8:	4b34      	ldr	r3, [pc, #208]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d017      	beq.n	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80048b4:	4b31      	ldr	r3, [pc, #196]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	0a5b      	lsrs	r3, r3, #9
 80048ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80048c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80048ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048da:	ee17 2a90 	vmov	r2, s15
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e002      	b.n	80048ea <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d017      	beq.n	8004926 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80048f6:	4b21      	ldr	r3, [pc, #132]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	0c1b      	lsrs	r3, r3, #16
 80048fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800490c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004910:	edd7 6a07 	vldr	s13, [r7, #28]
 8004914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491c:	ee17 2a90 	vmov	r2, s15
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	605a      	str	r2, [r3, #4]
 8004924:	e002      	b.n	800492c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800492c:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d017      	beq.n	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004938:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	0e1b      	lsrs	r3, r3, #24
 800493e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800494a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800494e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004952:	edd7 6a07 	vldr	s13, [r7, #28]
 8004956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495e:	ee17 2a90 	vmov	r2, s15
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004966:	e002      	b.n	800496e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
}
 800496e:	bf00      	nop
 8004970:	3724      	adds	r7, #36	; 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	46020c00 	.word	0x46020c00
 8004980:	4b742400 	.word	0x4b742400
 8004984:	46000000 	.word	0x46000000
 8004988:	080073cc 	.word	0x080073cc

0800498c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	; 0x24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004994:	4ba6      	ldr	r3, [pc, #664]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800499e:	4ba4      	ldr	r3, [pc, #656]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80049a8:	4ba1      	ldr	r3, [pc, #644]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	3301      	adds	r3, #1
 80049b4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80049b6:	4b9e      	ldr	r3, [pc, #632]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80049c2:	4b9b      	ldr	r3, [pc, #620]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d062      	beq.n	8004aaa <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	f200 8081 	bhi.w	8004aee <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d024      	beq.n	8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d17a      	bne.n	8004aee <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0a:	4b89      	ldr	r3, [pc, #548]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a1e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004a3a:	e08f      	b.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004a3c:	4b7c      	ldr	r3, [pc, #496]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004a48:	4b79      	ldr	r3, [pc, #484]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	0f1b      	lsrs	r3, r3, #28
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	e006      	b.n	8004a62 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004a54:	4b76      	ldr	r3, [pc, #472]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	0f1b      	lsrs	r3, r3, #28
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	4a76      	ldr	r2, [pc, #472]	; (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a88:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a8c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aa8:	e058      	b.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abc:	4b5c      	ldr	r3, [pc, #368]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac4:	ee07 3a90 	vmov	s15, r3
 8004ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004acc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ad0:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aec:	e036      	b.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004aee:	4b50      	ldr	r3, [pc, #320]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004afa:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0f1b      	lsrs	r3, r3, #28
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	e006      	b.n	8004b14 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004b06:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	0f1b      	lsrs	r3, r3, #28
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	4a49      	ldr	r2, [pc, #292]	; (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	ee07 3a90 	vmov	s15, r3
 8004b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b3e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b5a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004b5c:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d017      	beq.n	8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b68:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	0a5b      	lsrs	r3, r3, #9
 8004b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004b7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8e:	ee17 2a90 	vmov	r2, s15
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e002      	b.n	8004b9e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d017      	beq.n	8004bda <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004baa:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	ee17 2a90 	vmov	r2, s15
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	605a      	str	r2, [r3, #4]
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004be0:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d017      	beq.n	8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c02:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c12:	ee17 2a90 	vmov	r2, s15
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c1a:	e002      	b.n	8004c22 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	609a      	str	r2, [r3, #8]
}
 8004c22:	bf00      	nop
 8004c24:	3724      	adds	r7, #36	; 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	46020c00 	.word	0x46020c00
 8004c34:	4b742400 	.word	0x4b742400
 8004c38:	46000000 	.word	0x46000000
 8004c3c:	080073cc 	.word	0x080073cc

08004c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08e      	sub	sp, #56	; 0x38
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004c52:	430b      	orrs	r3, r1
 8004c54:	d145      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004c56:	4bac      	ldr	r3, [pc, #688]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004c62:	4ba9      	ldr	r3, [pc, #676]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d108      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c76:	d104      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7e:	f001 b8e3 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004c82:	4ba1      	ldr	r3, [pc, #644]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c90:	d114      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c98:	d110      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c9a:	4b9b      	ldr	r3, [pc, #620]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ca8:	d103      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004caa:	23fa      	movs	r3, #250	; 0xfa
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004cae:	f001 b8cb 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8004cb2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004cb8:	f001 b8c6 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004cbc:	4b92      	ldr	r3, [pc, #584]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc8:	d107      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd0:	d103      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004cd2:	4b8e      	ldr	r3, [pc, #568]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd6:	f001 b8b7 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cde:	f001 b8b3 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004cea:	430b      	orrs	r3, r1
 8004cec:	d151      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004cee:	4b86      	ldr	r3, [pc, #536]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004cf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004cf4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004cf8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	d035      	beq.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d841      	bhi.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2b60      	cmp	r3, #96	; 0x60
 8004d0a:	d02a      	beq.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	2b60      	cmp	r3, #96	; 0x60
 8004d10:	d83b      	bhi.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d009      	beq.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d835      	bhi.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00c      	beq.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d012      	beq.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004d2a:	e02e      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fb77 	bl	8004424 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d3a:	f001 b885 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d3e:	f107 0318 	add.w	r3, r7, #24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fcc8 	bl	80046d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d4c:	f001 b87c 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d50:	f107 030c 	add.w	r3, r7, #12
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fe19 	bl	800498c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d5e:	f001 b873 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d68:	f001 b86e 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d6c:	4b66      	ldr	r3, [pc, #408]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d78:	d103      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004d7a:	4b65      	ldr	r3, [pc, #404]	; (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d7e:	f001 b863 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d86:	f001 b85f 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :
      {
        frequency = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d8e:	f001 b85b 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d96:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	d165      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004d9e:	4b5a      	ldr	r3, [pc, #360]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004da4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004db0:	d034      	beq.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004db8:	d853      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc0:	d00b      	beq.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc8:	d84b      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d016      	beq.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd6:	d009      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004dd8:	e043      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fb20 	bl	8004424 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004de8:	f001 b82e 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dec:	f107 0318 	add.w	r3, r7, #24
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fc71 	bl	80046d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dfa:	f001 b825 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004dfe:	4b42      	ldr	r3, [pc, #264]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0a:	d103      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        {
          frequency = HSI48_VALUE;
 8004e0c:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e10:	f001 b81a 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e18:	f001 b816 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e1c:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d118      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e28:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 8004e34:	4b34      	ldr	r3, [pc, #208]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	0e1b      	lsrs	r3, r3, #24
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	e006      	b.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004e40:	4b31      	ldr	r3, [pc, #196]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e46:	041b      	lsls	r3, r3, #16
 8004e48:	0e1b      	lsrs	r3, r3, #24
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	4a32      	ldr	r2, [pc, #200]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e56:	f000 bff7 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e5e:	f000 bff3 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :

        frequency = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e66:	f000 bfef 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6e:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004e72:	430b      	orrs	r3, r1
 8004e74:	f040 808a 	bne.w	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004e78:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e82:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d16f      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e90:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004e9c:	d03e      	beq.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ea4:	d85d      	bhi.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eac:	d00b      	beq.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb4:	d855      	bhi.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d016      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec2:	d009      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8004ec4:	e04d      	b.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff faaa 	bl	8004424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004ed4:	f000 bfb8 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed8:	f107 0318 	add.w	r3, r7, #24
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fbfb 	bl	80046d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004ee6:	f000 bfaf 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef6:	d103      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          {
            frequency = HSI48_VALUE;
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004efc:	f000 bfa4 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004f04:	f000 bfa0 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004f08:	46020c00 	.word	0x46020c00
 8004f0c:	0007a120 	.word	0x0007a120
 8004f10:	00f42400 	.word	0x00f42400
 8004f14:	02dc6c00 	.word	0x02dc6c00
 8004f18:	080073cc 	.word	0x080073cc
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f1c:	4bab      	ldr	r3, [pc, #684]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d118      	bne.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f28:	4ba8      	ldr	r3, [pc, #672]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8004f34:	4ba5      	ldr	r3, [pc, #660]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	0e1b      	lsrs	r3, r3, #24
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	e006      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004f40:	4ba2      	ldr	r3, [pc, #648]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	0e1b      	lsrs	r3, r3, #24
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	4aa0      	ldr	r2, [pc, #640]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004f56:	f000 bf77 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004f5e:	f000 bf73 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        default :
        {
          frequency = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004f66:	f000 bf6f 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f70:	d108      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fa54 	bl	8004424 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f80:	f000 bf62 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else
    {
      frequency = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34
 8004f88:	f000 bf5e 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f90:	1e51      	subs	r1, r2, #1
 8004f92:	430b      	orrs	r3, r1
 8004f94:	d136      	bne.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004f96:	4b8d      	ldr	r3, [pc, #564]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fe fc6c 	bl	8003884 <HAL_RCC_GetPCLK2Freq>
 8004fac:	6378      	str	r0, [r7, #52]	; 0x34
 8004fae:	f000 bf4b 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d104      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fb8:	f7fe fb34 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8004fbc:	6378      	str	r0, [r7, #52]	; 0x34
 8004fbe:	f000 bf43 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004fc2:	4b82      	ldr	r3, [pc, #520]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fce:	d106      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d103      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
    {
      frequency = HSI_VALUE;
 8004fd6:	4b7f      	ldr	r3, [pc, #508]	; (80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fda:	f000 bf35 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004fde:	4b7b      	ldr	r3, [pc, #492]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d107      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d104      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
    {
      frequency = LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff8:	f000 bf26 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8005000:	f000 bf22 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005008:	1f11      	subs	r1, r2, #4
 800500a:	430b      	orrs	r3, r1
 800500c:	d136      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800500e:	4b6f      	ldr	r3, [pc, #444]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005014:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005018:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005020:	f7fe fc1c 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8005024:	6378      	str	r0, [r7, #52]	; 0x34
 8005026:	f000 bf0f 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2b10      	cmp	r3, #16
 800502e:	d104      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005030:	f7fe faf8 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005034:	6378      	str	r0, [r7, #52]	; 0x34
 8005036:	f000 bf07 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800503a:	4b64      	ldr	r3, [pc, #400]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005046:	d106      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	2b20      	cmp	r3, #32
 800504c:	d103      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      frequency = HSI_VALUE;
 800504e:	4b61      	ldr	r3, [pc, #388]	; (80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
 8005052:	f000 bef9 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005056:	4b5d      	ldr	r3, [pc, #372]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d107      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	2b30      	cmp	r3, #48	; 0x30
 8005068:	d104      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
    {
      frequency = LSE_VALUE;
 800506a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506e:	637b      	str	r3, [r7, #52]	; 0x34
 8005070:	f000 beea 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
 8005078:	f000 bee6 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800507c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005080:	f1a2 0108 	sub.w	r1, r2, #8
 8005084:	430b      	orrs	r3, r1
 8005086:	d136      	bne.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005088:	4b50      	ldr	r3, [pc, #320]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800508a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800508e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005092:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800509a:	f7fe fbdf 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 800509e:	6378      	str	r0, [r7, #52]	; 0x34
 80050a0:	f000 bed2 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d104      	bne.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050aa:	f7fe fabb 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80050ae:	6378      	str	r0, [r7, #52]	; 0x34
 80050b0:	f000 beca 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80050b4:	4b45      	ldr	r3, [pc, #276]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d106      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d103      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = HSI_VALUE;
 80050c8:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34
 80050cc:	f000 bebc 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80050d0:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d107      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	2bc0      	cmp	r3, #192	; 0xc0
 80050e2:	d104      	bne.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
    {
      frequency = LSE_VALUE;
 80050e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	f000 bead 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
 80050f2:	f000 bea9 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80050f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fa:	f1a2 0110 	sub.w	r1, r2, #16
 80050fe:	430b      	orrs	r3, r1
 8005100:	d139      	bne.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005102:	4b32      	ldr	r3, [pc, #200]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fe fba2 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8005118:	6378      	str	r0, [r7, #52]	; 0x34
 800511a:	f000 be95 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005124:	d104      	bne.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005126:	f7fe fa7d 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 800512a:	6378      	str	r0, [r7, #52]	; 0x34
 800512c:	f000 be8c 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005130:	4b26      	ldr	r3, [pc, #152]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800513c:	d107      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005144:	d103      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HSI_VALUE;
 8005146:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005148:	637b      	str	r3, [r7, #52]	; 0x34
 800514a:	f000 be7d 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800514e:	4b1f      	ldr	r3, [pc, #124]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d108      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005162:	d104      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
    {
      frequency = LSE_VALUE;
 8005164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
 800516a:	f000 be6d 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
 8005172:	f000 be69 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800517a:	f1a2 0120 	sub.w	r1, r2, #32
 800517e:	430b      	orrs	r3, r1
 8005180:	d15f      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005182:	4b12      	ldr	r3, [pc, #72]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005194:	f7fe fb8a 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 8005198:	6378      	str	r0, [r7, #52]	; 0x34
 800519a:	f000 be55 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d104      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051a4:	f7fe fa3e 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80051a8:	6378      	str	r0, [r7, #52]	; 0x34
 80051aa:	f000 be4d 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d10d      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d10a      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HSI_VALUE;
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80051c4:	637b      	str	r3, [r7, #52]	; 0x34
 80051c6:	f000 be3f 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80051ca:	bf00      	nop
 80051cc:	46020c00 	.word	0x46020c00
 80051d0:	080073cc 	.word	0x080073cc
 80051d4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80051d8:	4baf      	ldr	r3, [pc, #700]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80051da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d107      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d104      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = LSE_VALUE;
 80051ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
 80051f2:	f000 be29 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80051f6:	4ba8      	ldr	r3, [pc, #672]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d11b      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2b04      	cmp	r3, #4
 8005206:	d118      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005208:	4ba3      	ldr	r3, [pc, #652]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 8005214:	4ba0      	ldr	r3, [pc, #640]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	0e1b      	lsrs	r3, r3, #24
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	e006      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005220:	4b9d      	ldr	r3, [pc, #628]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005226:	041b      	lsls	r3, r3, #16
 8005228:	0e1b      	lsrs	r3, r3, #24
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	4a9b      	ldr	r2, [pc, #620]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8005230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
 8005236:	f000 be07 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
 800523e:	f000 be03 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005246:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800524a:	430b      	orrs	r3, r1
 800524c:	d16c      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800524e:	4b92      	ldr	r3, [pc, #584]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005254:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005258:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005260:	d104      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005262:	f7fe f9df 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005266:	6378      	str	r0, [r7, #52]	; 0x34
 8005268:	f000 bdee 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005272:	d108      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005274:	f107 0318 	add.w	r3, r7, #24
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff fa2d 	bl	80046d8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	f000 bde1 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800528c:	f7fe facc 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8005290:	6378      	str	r0, [r7, #52]	; 0x34
 8005292:	f000 bdd9 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800529c:	d122      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800529e:	4b7e      	ldr	r3, [pc, #504]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d118      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052aa:	4b7b      	ldr	r3, [pc, #492]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80052b6:	4b78      	ldr	r3, [pc, #480]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	0e1b      	lsrs	r3, r3, #24
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	e006      	b.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 80052c2:	4b75      	ldr	r3, [pc, #468]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80052c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	0e1b      	lsrs	r3, r3, #24
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	4a72      	ldr	r2, [pc, #456]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80052d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d6:	637b      	str	r3, [r7, #52]	; 0x34
 80052d8:	f000 bdb6 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	637b      	str	r3, [r7, #52]	; 0x34
 80052e0:	f000 bdb2 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80052e4:	4b6c      	ldr	r3, [pc, #432]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f0:	d107      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052f8:	d103      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
    {
      frequency = HSE_VALUE;
 80052fa:	4b69      	ldr	r3, [pc, #420]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
 80052fe:	f000 bda3 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005302:	4b65      	ldr	r3, [pc, #404]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530e:	d107      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005316:	d103      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
    {
      frequency = HSI_VALUE;
 8005318:	4b61      	ldr	r3, [pc, #388]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	f000 bd94 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
 8005324:	f000 bd90 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800532c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005330:	430b      	orrs	r3, r1
 8005332:	d158      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005334:	4b58      	ldr	r3, [pc, #352]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	2b04      	cmp	r3, #4
 8005344:	d84b      	bhi.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8005346:	a201      	add	r2, pc, #4	; (adr r2, 800534c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005385 	.word	0x08005385
 8005350:	08005361 	.word	0x08005361
 8005354:	08005373 	.word	0x08005373
 8005358:	0800538f 	.word	0x0800538f
 800535c:	08005399 	.word	0x08005399
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff f85d 	bl	8004424 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800536e:	f000 bd6b 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005372:	f107 030c 	add.w	r3, r7, #12
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fb08 	bl	800498c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005380:	f000 bd62 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005384:	f7fe fa50 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8005388:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800538a:	f000 bd5d 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800538e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005394:	f000 bd58 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005398:	4b3f      	ldr	r3, [pc, #252]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d118      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053a4:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 80053b0:	4b39      	ldr	r3, [pc, #228]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	0e1b      	lsrs	r3, r3, #24
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	e006      	b.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80053be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	0e1b      	lsrs	r3, r3, #24
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	4a34      	ldr	r2, [pc, #208]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80053cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80053d2:	f000 bd39 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053da:	f000 bd35 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053e2:	f000 bd31 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80053e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ea:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80053ee:	430b      	orrs	r3, r1
 80053f0:	d16d      	bne.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80053f2:	4b29      	ldr	r3, [pc, #164]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80053f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053f8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005404:	d036      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800540c:	d85b      	bhi.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005414:	d029      	beq.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800541c:	d853      	bhi.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005424:	d013      	beq.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800542c:	d84b      	bhi.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	2b00      	cmp	r3, #0
 8005432:	d015      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543a:	d144      	bne.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800543c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe ffef 	bl	8004424 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800544a:	f000 bcfd 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800544e:	f107 030c 	add.w	r3, r7, #12
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fa9a 	bl	800498c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800545c:	f000 bcf4 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005460:	f7fe f9e2 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8005464:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005466:	f000 bcef 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800546a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005470:	f000 bcea 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005474:	4b08      	ldr	r3, [pc, #32]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b20      	cmp	r3, #32
 800547e:	d11e      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800548c:	4b02      	ldr	r3, [pc, #8]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	0e1b      	lsrs	r3, r3, #24
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	e00c      	b.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8005498:	46020c00 	.word	0x46020c00
 800549c:	080073cc 	.word	0x080073cc
 80054a0:	00f42400 	.word	0x00f42400
 80054a4:	4b9d      	ldr	r3, [pc, #628]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80054a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	0e1b      	lsrs	r3, r3, #24
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	4a9b      	ldr	r2, [pc, #620]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 80054b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054ba:	f000 bcc5 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054c2:	f000 bcc1 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ca:	f000 bcbd 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80054ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80054d6:	430b      	orrs	r3, r1
 80054d8:	d14c      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80054da:	4b90      	ldr	r3, [pc, #576]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80054dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80054ec:	f7fe f9b6 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 80054f0:	6378      	str	r0, [r7, #52]	; 0x34
 80054f2:	f000 bca9 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fc:	d104      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fe f891 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005502:	6378      	str	r0, [r7, #52]	; 0x34
 8005504:	f000 bca0 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005508:	4b84      	ldr	r3, [pc, #528]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005514:	d107      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551c:	d103      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
    {
      frequency = HSI_VALUE;
 800551e:	4b81      	ldr	r3, [pc, #516]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
 8005522:	f000 bc91 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005526:	4b7d      	ldr	r3, [pc, #500]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b20      	cmp	r3, #32
 8005530:	d11c      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005538:	d118      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800553a:	4b78      	ldr	r3, [pc, #480]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
 8005546:	4b75      	ldr	r3, [pc, #468]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0e1b      	lsrs	r3, r3, #24
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8005552:	4b72      	ldr	r3, [pc, #456]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	0e1b      	lsrs	r3, r3, #24
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	4a6f      	ldr	r2, [pc, #444]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005566:	637b      	str	r3, [r7, #52]	; 0x34
 8005568:	f000 bc6e 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
 8005570:	f000 bc6a 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005578:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800557c:	430b      	orrs	r3, r1
 800557e:	d14c      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005580:	4b66      	ldr	r3, [pc, #408]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005586:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800558a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005592:	f7fe f963 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8005596:	6378      	str	r0, [r7, #52]	; 0x34
 8005598:	f000 bc56 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a2:	d104      	bne.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80055a4:	f7fe f83e 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80055a8:	6378      	str	r0, [r7, #52]	; 0x34
 80055aa:	f000 bc4d 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80055ae:	4b5b      	ldr	r3, [pc, #364]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ba:	d107      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c2:	d103      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
    {
      frequency = HSI_VALUE;
 80055c4:	4b57      	ldr	r3, [pc, #348]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
 80055c8:	f000 bc3e 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80055cc:	4b53      	ldr	r3, [pc, #332]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d11c      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055de:	d118      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055e0:	4b4e      	ldr	r3, [pc, #312]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	0e1b      	lsrs	r3, r3, #24
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	e006      	b.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80055f8:	4b48      	ldr	r3, [pc, #288]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80055fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	0e1b      	lsrs	r3, r3, #24
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	4a46      	ldr	r2, [pc, #280]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	f000 bc1b 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
 8005616:	f000 bc17 	b.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800561a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800561e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005622:	430b      	orrs	r3, r1
 8005624:	d151      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005626:	4b3d      	ldr	r3, [pc, #244]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800562c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005630:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	2bc0      	cmp	r3, #192	; 0xc0
 8005636:	d024      	beq.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2bc0      	cmp	r3, #192	; 0xc0
 800563c:	d842      	bhi.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	2b80      	cmp	r3, #128	; 0x80
 8005642:	d00d      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	2b80      	cmp	r3, #128	; 0x80
 8005648:	d83c      	bhi.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d011      	beq.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8005656:	e035      	b.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005658:	f7fe f928 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 800565c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800565e:	e3f3      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005660:	4b2e      	ldr	r3, [pc, #184]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566c:	d102      	bne.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
        {
          frequency = HSI_VALUE;
 800566e:	4b2d      	ldr	r3, [pc, #180]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005672:	e3e9      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005678:	e3e6      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800567a:	f7fd ffd3 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 800567e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005680:	e3e2      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005682:	4b26      	ldr	r3, [pc, #152]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b20      	cmp	r3, #32
 800568c:	d117      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800568e:	4b23      	ldr	r3, [pc, #140]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800569a:	4b20      	ldr	r3, [pc, #128]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	0e1b      	lsrs	r3, r3, #24
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	e006      	b.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80056a6:	4b1d      	ldr	r3, [pc, #116]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80056a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056ac:	041b      	lsls	r3, r3, #16
 80056ae:	0e1b      	lsrs	r3, r3, #24
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 80056b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056bc:	e3c4      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056c2:	e3c1      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      default:
      {
        frequency = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056c8:	e3be      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80056ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ce:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80056d2:	430b      	orrs	r3, r1
 80056d4:	d14d      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80056d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80056e8:	f7fe f8b8 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 80056ec:	6378      	str	r0, [r7, #52]	; 0x34
 80056ee:	e3ab      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f6:	d103      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056f8:	f7fd ff94 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80056fc:	6378      	str	r0, [r7, #52]	; 0x34
 80056fe:	e3a3      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	d10c      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005714:	d108      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
    {
      frequency = HSI_VALUE;
 8005716:	4b03      	ldr	r3, [pc, #12]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
 800571a:	e395      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800571c:	46020c00 	.word	0x46020c00
 8005720:	080073cc 	.word	0x080073cc
 8005724:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005728:	4ba4      	ldr	r3, [pc, #656]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b20      	cmp	r3, #32
 8005732:	d11b      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800573a:	d117      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800573c:	4b9f      	ldr	r3, [pc, #636]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005748:	4b9c      	ldr	r3, [pc, #624]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	0e1b      	lsrs	r3, r3, #24
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	e006      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8005754:	4b99      	ldr	r3, [pc, #612]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	0e1b      	lsrs	r3, r3, #24
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	4a97      	ldr	r2, [pc, #604]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	e36d      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
 8005770:	e36a      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005776:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800577a:	430b      	orrs	r3, r1
 800577c:	d164      	bne.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800577e:	4b8f      	ldr	r3, [pc, #572]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005788:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	2b00      	cmp	r3, #0
 800578e:	d120      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005790:	4b8a      	ldr	r3, [pc, #552]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b20      	cmp	r3, #32
 800579a:	d117      	bne.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800579c:	4b87      	ldr	r3, [pc, #540]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 80057a8:	4b84      	ldr	r3, [pc, #528]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	0e1b      	lsrs	r3, r3, #24
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	e006      	b.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 80057b4:	4b81      	ldr	r3, [pc, #516]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80057b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	0e1b      	lsrs	r3, r3, #24
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	4a7f      	ldr	r2, [pc, #508]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 80057c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ca:	e33d      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	637b      	str	r3, [r7, #52]	; 0x34
 80057d0:	e33a      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80057d2:	4b7a      	ldr	r3, [pc, #488]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80057d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e0:	d112      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e8:	d10e      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057ea:	4b74      	ldr	r3, [pc, #464]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80057ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f8:	d102      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
      {
        frequency = LSI_VALUE / 128U;
 80057fa:	23fa      	movs	r3, #250	; 0xfa
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057fe:	e323      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005800:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005804:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005806:	e31f      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005808:	4b6c      	ldr	r3, [pc, #432]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005814:	d106      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581c:	d102      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
    {
      frequency = HSI_VALUE;
 800581e:	4b69      	ldr	r3, [pc, #420]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
 8005822:	e311      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005824:	4b65      	ldr	r3, [pc, #404]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b02      	cmp	r3, #2
 8005830:	d107      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005838:	d103      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
    {
      frequency = LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
 8005840:	e302      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
 8005846:	e2ff      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005850:	430b      	orrs	r3, r1
 8005852:	d164      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800585a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800585e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	2b00      	cmp	r3, #0
 8005864:	d120      	bne.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005866:	4b55      	ldr	r3, [pc, #340]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b20      	cmp	r3, #32
 8005870:	d117      	bne.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005872:	4b52      	ldr	r3, [pc, #328]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 800587e:	4b4f      	ldr	r3, [pc, #316]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	0e1b      	lsrs	r3, r3, #24
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	e006      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 800588a:	4b4c      	ldr	r3, [pc, #304]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800588c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	0e1b      	lsrs	r3, r3, #24
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	4a49      	ldr	r2, [pc, #292]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800589a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
 80058a0:	e2d2      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34
 80058a6:	e2cf      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80058a8:	4b44      	ldr	r3, [pc, #272]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80058aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b6:	d112      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058be:	d10e      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058c0:	4b3e      	ldr	r3, [pc, #248]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80058c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ce:	d102      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
      {
        frequency = LSI_VALUE / 128U;
 80058d0:	23fa      	movs	r3, #250	; 0xfa
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058d4:	e2b8      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 80058d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80058da:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058dc:	e2b4      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ea:	d106      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f2:	d102      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
    {
      frequency = HSI_VALUE;
 80058f4:	4b33      	ldr	r3, [pc, #204]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058f6:	637b      	str	r3, [r7, #52]	; 0x34
 80058f8:	e2a6      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80058fa:	4b30      	ldr	r3, [pc, #192]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80058fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d107      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800590e:	d103      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
    {
      frequency = LSE_VALUE;
 8005910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
 8005916:	e297      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
 800591c:	e294      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800591e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005922:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005926:	430b      	orrs	r3, r1
 8005928:	d14e      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800592a:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800592c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005930:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005934:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800593c:	f7fd ff8e 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8005940:	6378      	str	r0, [r7, #52]	; 0x34
 8005942:	e281      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005944:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800594a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005952:	d112      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800595a:	d10e      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800595c:	4b17      	ldr	r3, [pc, #92]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800595e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800596a:	d102      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
      {
        frequency = LSI_VALUE / 128U;
 800596c:	23fa      	movs	r3, #250	; 0xfa
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005970:	e26a      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005972:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005978:	e266      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005986:	d106      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800598e:	d102      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = HSI_VALUE;
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
 8005994:	e258      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d107      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80059aa:	d103      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
    {
      frequency = LSE_VALUE;
 80059ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
 80059b2:	e249      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
 80059b8:	e246      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80059ba:	bf00      	nop
 80059bc:	46020c00 	.word	0x46020c00
 80059c0:	080073cc 	.word	0x080073cc
 80059c4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80059c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059cc:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80059d0:	430b      	orrs	r3, r1
 80059d2:	d12d      	bne.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80059d4:	4ba9      	ldr	r3, [pc, #676]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059da:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80059de:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80059e0:	4ba6      	ldr	r3, [pc, #664]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ec:	d105      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
    {
      frequency = HSE_VALUE;
 80059f4:	4ba2      	ldr	r3, [pc, #648]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
 80059f8:	e226      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a00:	d107      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fd0c 	bl	8004424 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a10:	e21a      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a18:	d107      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a1a:	f107 0318 	add.w	r3, r7, #24
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fe5a 	bl	80046d8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
 8005a28:	e20e      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2e:	e20b      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a34:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	d156      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005a3c:	4b8f      	ldr	r3, [pc, #572]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a4e:	d028      	beq.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a56:	d845      	bhi.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a5e:	d013      	beq.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a66:	d83d      	bhi.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d004      	beq.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a74:	d004      	beq.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
 8005a76:	e035      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005a78:	f7fd ff04 	bl	8003884 <HAL_RCC_GetPCLK2Freq>
 8005a7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005a7e:	e1e3      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005a80:	f7fd fdd0 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005a84:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005a86:	e1df      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a88:	4b7c      	ldr	r3, [pc, #496]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a94:	d102      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI_VALUE;
 8005a96:	4b7a      	ldr	r3, [pc, #488]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a9a:	e1d5      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aa0:	e1d2      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d117      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005aae:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8005aba:	4b70      	ldr	r3, [pc, #448]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	e006      	b.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8005ac6:	4b6d      	ldr	r3, [pc, #436]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	0e1b      	lsrs	r3, r3, #24
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	4a6b      	ldr	r2, [pc, #428]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005adc:	e1b4      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae2:	e1b1      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae8:	e1ae      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aee:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005af2:	430b      	orrs	r3, r1
 8005af4:	d156      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005af6:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b08:	d028      	beq.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b10:	d845      	bhi.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b18:	d013      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b20:	d83d      	bhi.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2e:	d004      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
 8005b30:	e035      	b.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005b32:	f7fd fe93 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8005b36:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005b38:	e186      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005b3a:	f7fd fd73 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005b3e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005b40:	e182      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
        {
          frequency = HSI_VALUE;
 8005b50:	4b4b      	ldr	r3, [pc, #300]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b54:	e178      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b5a:	e175      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b5c:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d117      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b68:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
 8005b74:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	e006      	b.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0xf4e>
 8005b80:	4b3e      	ldr	r3, [pc, #248]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	0e1b      	lsrs	r3, r3, #24
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	4a3d      	ldr	r2, [pc, #244]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b96:	e157      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b9c:	e154      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ba2:	e151      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba8:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005bac:	430b      	orrs	r3, r1
 8005bae:	d17d      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005bb0:	4b32      	ldr	r3, [pc, #200]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bb6:	f003 0318 	and.w	r3, r3, #24
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2b18      	cmp	r3, #24
 8005bc0:	d871      	bhi.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005c2d 	.word	0x08005c2d
 8005bcc:	08005ca7 	.word	0x08005ca7
 8005bd0:	08005ca7 	.word	0x08005ca7
 8005bd4:	08005ca7 	.word	0x08005ca7
 8005bd8:	08005ca7 	.word	0x08005ca7
 8005bdc:	08005ca7 	.word	0x08005ca7
 8005be0:	08005ca7 	.word	0x08005ca7
 8005be4:	08005ca7 	.word	0x08005ca7
 8005be8:	08005c35 	.word	0x08005c35
 8005bec:	08005ca7 	.word	0x08005ca7
 8005bf0:	08005ca7 	.word	0x08005ca7
 8005bf4:	08005ca7 	.word	0x08005ca7
 8005bf8:	08005ca7 	.word	0x08005ca7
 8005bfc:	08005ca7 	.word	0x08005ca7
 8005c00:	08005ca7 	.word	0x08005ca7
 8005c04:	08005ca7 	.word	0x08005ca7
 8005c08:	08005c3d 	.word	0x08005c3d
 8005c0c:	08005ca7 	.word	0x08005ca7
 8005c10:	08005ca7 	.word	0x08005ca7
 8005c14:	08005ca7 	.word	0x08005ca7
 8005c18:	08005ca7 	.word	0x08005ca7
 8005c1c:	08005ca7 	.word	0x08005ca7
 8005c20:	08005ca7 	.word	0x08005ca7
 8005c24:	08005ca7 	.word	0x08005ca7
 8005c28:	08005c57 	.word	0x08005c57
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005c2c:	f7fd fe3e 	bl	80038ac <HAL_RCC_GetPCLK3Freq>
 8005c30:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c32:	e109      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c34:	f7fd fcf6 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005c38:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c3a:	e105      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c48:	d102      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
        {
          frequency = HSI_VALUE;
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c4e:	e0fb      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c54:	e0f8      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d11e      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8005c6e:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	0e1b      	lsrs	r3, r3, #24
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	e00d      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 8005c7a:	bf00      	nop
 8005c7c:	46020c00 	.word	0x46020c00
 8005c80:	00f42400 	.word	0x00f42400
 8005c84:	080073cc 	.word	0x080073cc
 8005c88:	4b72      	ldr	r3, [pc, #456]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	0e1b      	lsrs	r3, r3, #24
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	4a70      	ldr	r2, [pc, #448]	; (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c9e:	e0d3      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ca4:	e0d0      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005caa:	e0cd      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb0:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	d155      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005cb8:	4b66      	ldr	r3, [pc, #408]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005cba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cca:	d013      	beq.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cd2:	d844      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cda:	d013      	beq.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ce2:	d83c      	bhi.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d014      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf0:	d014      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 8005cf2:	e034      	b.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cf4:	f107 0318 	add.w	r3, r7, #24
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe fced 	bl	80046d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d02:	e0a1      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe fb8b 	bl	8004424 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d12:	e099      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005d14:	f7fd fc86 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005d18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d1a:	e095      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d1c:	4b4d      	ldr	r3, [pc, #308]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d117      	bne.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1118>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d28:	4b4a      	ldr	r3, [pc, #296]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 8005d34:	4b47      	ldr	r3, [pc, #284]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	0e1b      	lsrs	r3, r3, #24
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	e006      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
 8005d40:	4b44      	ldr	r3, [pc, #272]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d46:	041b      	lsls	r3, r3, #16
 8005d48:	0e1b      	lsrs	r3, r3, #24
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	4a42      	ldr	r2, [pc, #264]	; (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 8005d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d56:	e077      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d5c:	e074      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d62:	e071      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d68:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	d131      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1194>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005d70:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005d7c:	4b35      	ldr	r3, [pc, #212]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d106      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
    {
      frequency = LSE_VALUE;
 8005d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
 8005d96:	e057      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005d98:	4b2e      	ldr	r3, [pc, #184]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da6:	d112      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dae:	d10e      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005db0:	4b28      	ldr	r3, [pc, #160]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbe:	d102      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
      {
        frequency = LSI_VALUE / 128U;
 8005dc0:	23fa      	movs	r3, #250	; 0xfa
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dc4:	e040      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005dc6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dcc:	e03c      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd2:	e039      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	d131      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005de0:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005de2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005de6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005dec:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df8:	d105      	bne.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
    {
      frequency = HSI48_VALUE;
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 8005e02:	637b      	str	r3, [r7, #52]	; 0x34
 8005e04:	e020      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005e06:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e12:	d106      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d102      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>)
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e20:	e012      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005e22:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2e:	d106      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e36:	d102      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
    {
      frequency = HSI_VALUE;
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3c:	e004      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
 8005e42:	e001      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3738      	adds	r7, #56	; 0x38
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	46020c00 	.word	0x46020c00
 8005e58:	080073cc 	.word	0x080073cc
 8005e5c:	02dc6c00 	.word	0x02dc6c00
 8005e60:	016e3600 	.word	0x016e3600
 8005e64:	00f42400 	.word	0x00f42400

08005e68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005e70:	4b47      	ldr	r3, [pc, #284]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a46      	ldr	r2, [pc, #280]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005e76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e7c:	f7fb ff44 	bl	8001d08 <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e82:	e008      	b.n	8005e96 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e84:	f7fb ff40 	bl	8001d08 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e077      	b.n	8005f86 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e96:	4b3e      	ldr	r3, [pc, #248]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f0      	bne.n	8005e84 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005ea2:	4b3b      	ldr	r3, [pc, #236]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005eaa:	f023 0303 	bic.w	r3, r3, #3
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6811      	ldr	r1, [r2, #0]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6852      	ldr	r2, [r2, #4]
 8005eb6:	3a01      	subs	r2, #1
 8005eb8:	0212      	lsls	r2, r2, #8
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	4934      	ldr	r1, [pc, #208]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005ec2:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec6:	4b33      	ldr	r3, [pc, #204]	; (8005f94 <RCCEx_PLL2_Config+0x12c>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6892      	ldr	r2, [r2, #8]
 8005ece:	3a01      	subs	r2, #1
 8005ed0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	68d2      	ldr	r2, [r2, #12]
 8005ed8:	3a01      	subs	r2, #1
 8005eda:	0252      	lsls	r2, r2, #9
 8005edc:	b292      	uxth	r2, r2
 8005ede:	4311      	orrs	r1, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6912      	ldr	r2, [r2, #16]
 8005ee4:	3a01      	subs	r2, #1
 8005ee6:	0412      	lsls	r2, r2, #16
 8005ee8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005eec:	4311      	orrs	r1, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6952      	ldr	r2, [r2, #20]
 8005ef2:	3a01      	subs	r2, #1
 8005ef4:	0612      	lsls	r2, r2, #24
 8005ef6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005efa:	430a      	orrs	r2, r1
 8005efc:	4924      	ldr	r1, [pc, #144]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005f02:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	f023 020c 	bic.w	r2, r3, #12
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	4920      	ldr	r1, [pc, #128]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005f14:	4b1e      	ldr	r3, [pc, #120]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	491c      	ldr	r1, [pc, #112]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005f22:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	4a1a      	ldr	r2, [pc, #104]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f28:	f023 0310 	bic.w	r3, r3, #16
 8005f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f2e:	4b18      	ldr	r3, [pc, #96]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	69d2      	ldr	r2, [r2, #28]
 8005f3e:	00d2      	lsls	r2, r2, #3
 8005f40:	4913      	ldr	r1, [pc, #76]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005f46:	4b12      	ldr	r3, [pc, #72]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	4a11      	ldr	r2, [pc, #68]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f4c:	f043 0310 	orr.w	r3, r3, #16
 8005f50:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005f52:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a0e      	ldr	r2, [pc, #56]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f5c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f5e:	f7fb fed3 	bl	8001d08 <HAL_GetTick>
 8005f62:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f64:	e008      	b.n	8005f78 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f66:	f7fb fecf 	bl	8001d08 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e006      	b.n	8005f86 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <RCCEx_PLL2_Config+0x128>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0

}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	46020c00 	.word	0x46020c00
 8005f94:	80800000 	.word	0x80800000

08005f98 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005fa0:	4b47      	ldr	r3, [pc, #284]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a46      	ldr	r2, [pc, #280]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8005fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005faa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fac:	f7fb feac 	bl	8001d08 <HAL_GetTick>
 8005fb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fb2:	e008      	b.n	8005fc6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fb4:	f7fb fea8 	bl	8001d08 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e077      	b.n	80060b6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005fd2:	4b3b      	ldr	r3, [pc, #236]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6811      	ldr	r1, [r2, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6852      	ldr	r2, [r2, #4]
 8005fe6:	3a01      	subs	r2, #1
 8005fe8:	0212      	lsls	r2, r2, #8
 8005fea:	430a      	orrs	r2, r1
 8005fec:	4934      	ldr	r1, [pc, #208]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	630b      	str	r3, [r1, #48]	; 0x30
 8005ff2:	4b33      	ldr	r3, [pc, #204]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8005ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff6:	4b33      	ldr	r3, [pc, #204]	; (80060c4 <RCCEx_PLL3_Config+0x12c>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6892      	ldr	r2, [r2, #8]
 8005ffe:	3a01      	subs	r2, #1
 8006000:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68d2      	ldr	r2, [r2, #12]
 8006008:	3a01      	subs	r2, #1
 800600a:	0252      	lsls	r2, r2, #9
 800600c:	b292      	uxth	r2, r2
 800600e:	4311      	orrs	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6912      	ldr	r2, [r2, #16]
 8006014:	3a01      	subs	r2, #1
 8006016:	0412      	lsls	r2, r2, #16
 8006018:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800601c:	4311      	orrs	r1, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6952      	ldr	r2, [r2, #20]
 8006022:	3a01      	subs	r2, #1
 8006024:	0612      	lsls	r2, r2, #24
 8006026:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800602a:	430a      	orrs	r2, r1
 800602c:	4924      	ldr	r1, [pc, #144]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 800602e:	4313      	orrs	r3, r2
 8006030:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006032:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f023 020c 	bic.w	r2, r3, #12
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	4920      	ldr	r1, [pc, #128]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006040:	4313      	orrs	r3, r2
 8006042:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006044:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	491c      	ldr	r1, [pc, #112]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 800604e:	4313      	orrs	r3, r2
 8006050:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006052:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	4a1a      	ldr	r2, [pc, #104]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800605e:	4b18      	ldr	r3, [pc, #96]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006066:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	69d2      	ldr	r2, [r2, #28]
 800606e:	00d2      	lsls	r2, r2, #3
 8006070:	4913      	ldr	r1, [pc, #76]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006072:	4313      	orrs	r3, r2
 8006074:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006076:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	4a11      	ldr	r2, [pc, #68]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 800607c:	f043 0310 	orr.w	r3, r3, #16
 8006080:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a0e      	ldr	r2, [pc, #56]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 8006088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800608e:	f7fb fe3b 	bl	8001d08 <HAL_GetTick>
 8006092:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006094:	e008      	b.n	80060a8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006096:	f7fb fe37 	bl	8001d08 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e006      	b.n	80060b6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <RCCEx_PLL3_Config+0x128>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	46020c00 	.word	0x46020c00
 80060c4:	80800000 	.word	0x80800000

080060c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e0fb      	b.n	80062d2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a7f      	ldr	r2, [pc, #508]	; (80062dc <HAL_SPI_Init+0x214>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_SPI_Init+0x26>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a7d      	ldr	r2, [pc, #500]	; (80062e0 <HAL_SPI_Init+0x218>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	e000      	b.n	80060f0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80060ee:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a78      	ldr	r2, [pc, #480]	; (80062dc <HAL_SPI_Init+0x214>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d004      	beq.n	800610a <HAL_SPI_Init+0x42>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a76      	ldr	r2, [pc, #472]	; (80062e0 <HAL_SPI_Init+0x218>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d105      	bne.n	8006116 <HAL_SPI_Init+0x4e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b0f      	cmp	r3, #15
 8006110:	d901      	bls.n	8006116 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0dd      	b.n	80062d2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f8ec 	bl	80062f4 <SPI_GetPacketSize>
 800611c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a6e      	ldr	r2, [pc, #440]	; (80062dc <HAL_SPI_Init+0x214>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_SPI_Init+0x6a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a6c      	ldr	r2, [pc, #432]	; (80062e0 <HAL_SPI_Init+0x218>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d102      	bne.n	8006138 <HAL_SPI_Init+0x70>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b08      	cmp	r3, #8
 8006136:	d816      	bhi.n	8006166 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800613c:	4a69      	ldr	r2, [pc, #420]	; (80062e4 <HAL_SPI_Init+0x21c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00e      	beq.n	8006160 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a68      	ldr	r2, [pc, #416]	; (80062e8 <HAL_SPI_Init+0x220>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d009      	beq.n	8006160 <HAL_SPI_Init+0x98>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a66      	ldr	r2, [pc, #408]	; (80062ec <HAL_SPI_Init+0x224>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d004      	beq.n	8006160 <HAL_SPI_Init+0x98>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a65      	ldr	r2, [pc, #404]	; (80062f0 <HAL_SPI_Init+0x228>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d104      	bne.n	800616a <HAL_SPI_Init+0xa2>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b10      	cmp	r3, #16
 8006164:	d901      	bls.n	800616a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e0b3      	b.n	80062d2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb fa52 	bl	8001628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80061a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061b0:	d119      	bne.n	80061e6 <HAL_SPI_Init+0x11e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ba:	d103      	bne.n	80061c4 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10c      	bne.n	80061e6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80061d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061d4:	d107      	bne.n	80061e6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00f      	beq.n	8006212 <HAL_SPI_Init+0x14a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b06      	cmp	r3, #6
 80061f8:	d90b      	bls.n	8006212 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e007      	b.n	8006222 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69da      	ldr	r2, [r3, #28]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	431a      	orrs	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	ea42 0103 	orr.w	r1, r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628e:	ea42 0103 	orr.w	r1, r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	46002000 	.word	0x46002000
 80062e0:	56002000 	.word	0x56002000
 80062e4:	40013000 	.word	0x40013000
 80062e8:	50013000 	.word	0x50013000
 80062ec:	40003800 	.word	0x40003800
 80062f0:	50003800 	.word	0x50003800

080062f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	3301      	adds	r3, #1
 800630c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	3307      	adds	r3, #7
 8006312:	08db      	lsrs	r3, r3, #3
 8006314:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	fb02 f303 	mul.w	r3, r2, r3
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	d12e      	bne.n	800639e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800634a:	2302      	movs	r3, #2
 800634c:	e028      	b.n	80063a0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2202      	movs	r2, #2
 800635a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800637a:	ea42 0103 	orr.w	r1, r2, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	e000      	b.n	80063a0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
  }
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e042      	b.n	8006444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fb faf1 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2224      	movs	r2, #36	; 0x24
 80063da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fb64 	bl	8006ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f9c9 	bl	8006794 <UART_SetConfig>
 8006402:	4603      	mov	r3, r0
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e01b      	b.n	8006444 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800641a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800642a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fbe3 	bl	8006c08 <UART_CheckIdleState>
 8006442:	4603      	mov	r3, r0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e04a      	b.n	80064f4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fb faa1 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2224      	movs	r2, #36	; 0x24
 800647a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fb14 	bl	8006ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f979 	bl	8006794 <UART_SetConfig>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e023      	b.n	80064f4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80064ca:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fb8b 	bl	8006c08 <UART_CheckIdleState>
 80064f2:	4603      	mov	r3, r0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	2b20      	cmp	r3, #32
 8006514:	d17b      	bne.n	800660e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <HAL_UART_Transmit+0x26>
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e074      	b.n	8006610 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2221      	movs	r2, #33	; 0x21
 8006532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006536:	f7fb fbe7 	bl	8001d08 <HAL_GetTick>
 800653a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006554:	d108      	bne.n	8006568 <HAL_UART_Transmit+0x6c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	e003      	b.n	8006570 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006570:	e030      	b.n	80065d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	2180      	movs	r1, #128	; 0x80
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fbed 	bl	8006d5c <UART_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e03d      	b.n	8006610 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	3302      	adds	r3, #2
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e007      	b.n	80065c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	3301      	adds	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1c8      	bne.n	8006572 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2200      	movs	r2, #0
 80065e8:	2140      	movs	r1, #64	; 0x40
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fbb6 	bl	8006d5c <UART_WaitOnFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e006      	b.n	8006610 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b08f      	sub	sp, #60	; 0x3c
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800662a:	2302      	movs	r3, #2
 800662c:	e042      	b.n	80066b4 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2224      	movs	r2, #36	; 0x24
 800663a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	61fb      	str	r3, [r7, #28]
   return(result);
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f023 030c 	bic.w	r3, r3, #12
 8006652:	637b      	str	r3, [r7, #52]	; 0x34
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800665e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e6      	bne.n	800663e <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	60bb      	str	r3, [r7, #8]
   return(result);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f043 0308 	orr.w	r3, r3, #8
 8006684:	633b      	str	r3, [r7, #48]	; 0x30
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6979      	ldr	r1, [r7, #20]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	613b      	str	r3, [r7, #16]
   return(result);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e6      	bne.n	8006670 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	373c      	adds	r7, #60	; 0x3c
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b08f      	sub	sp, #60	; 0x3c
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_HalfDuplex_EnableReceiver+0x16>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e042      	b.n	800675c <HAL_HalfDuplex_EnableReceiver+0x9c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2224      	movs	r2, #36	; 0x24
 80066e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f023 030c 	bic.w	r3, r3, #12
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006706:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800670a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	60bb      	str	r3, [r7, #8]
   return(result);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f043 0304 	orr.w	r3, r3, #4
 800672c:	633b      	str	r3, [r7, #48]	; 0x30
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6979      	ldr	r1, [r7, #20]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	613b      	str	r3, [r7, #16]
   return(result);
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e6      	bne.n	8006718 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	373c      	adds	r7, #60	; 0x3c
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4313      	orrs	r3, r2
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006798:	b094      	sub	sp, #80	; 0x50
 800679a:	af00      	add	r7, sp, #0
 800679c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b9b      	ldr	r3, [pc, #620]	; (8006a18 <UART_SetConfig+0x284>)
 80067aa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4994      	ldr	r1, [pc, #592]	; (8006a1c <UART_SetConfig+0x288>)
 80067cc:	4019      	ands	r1, r3
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	430b      	orrs	r3, r1
 80067d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	68d9      	ldr	r1, [r3, #12]
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	ea40 0301 	orr.w	r3, r0, r1
 80067ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b87      	ldr	r3, [pc, #540]	; (8006a18 <UART_SetConfig+0x284>)
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d009      	beq.n	8006814 <UART_SetConfig+0x80>
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	4b86      	ldr	r3, [pc, #536]	; (8006a20 <UART_SetConfig+0x28c>)
 8006806:	429a      	cmp	r2, r3
 8006808:	d004      	beq.n	8006814 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006810:	4313      	orrs	r3, r2
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800681e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006828:	430b      	orrs	r3, r1
 800682a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	f023 000f 	bic.w	r0, r3, #15
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	ea40 0301 	orr.w	r3, r0, r1
 8006842:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4b76      	ldr	r3, [pc, #472]	; (8006a24 <UART_SetConfig+0x290>)
 800684a:	429a      	cmp	r2, r3
 800684c:	d102      	bne.n	8006854 <UART_SetConfig+0xc0>
 800684e:	2301      	movs	r3, #1
 8006850:	64bb      	str	r3, [r7, #72]	; 0x48
 8006852:	e021      	b.n	8006898 <UART_SetConfig+0x104>
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	4b73      	ldr	r3, [pc, #460]	; (8006a28 <UART_SetConfig+0x294>)
 800685a:	429a      	cmp	r2, r3
 800685c:	d102      	bne.n	8006864 <UART_SetConfig+0xd0>
 800685e:	2304      	movs	r3, #4
 8006860:	64bb      	str	r3, [r7, #72]	; 0x48
 8006862:	e019      	b.n	8006898 <UART_SetConfig+0x104>
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4b70      	ldr	r3, [pc, #448]	; (8006a2c <UART_SetConfig+0x298>)
 800686a:	429a      	cmp	r2, r3
 800686c:	d102      	bne.n	8006874 <UART_SetConfig+0xe0>
 800686e:	2308      	movs	r3, #8
 8006870:	64bb      	str	r3, [r7, #72]	; 0x48
 8006872:	e011      	b.n	8006898 <UART_SetConfig+0x104>
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	4b6d      	ldr	r3, [pc, #436]	; (8006a30 <UART_SetConfig+0x29c>)
 800687a:	429a      	cmp	r2, r3
 800687c:	d102      	bne.n	8006884 <UART_SetConfig+0xf0>
 800687e:	2310      	movs	r3, #16
 8006880:	64bb      	str	r3, [r7, #72]	; 0x48
 8006882:	e009      	b.n	8006898 <UART_SetConfig+0x104>
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4b63      	ldr	r3, [pc, #396]	; (8006a18 <UART_SetConfig+0x284>)
 800688a:	429a      	cmp	r2, r3
 800688c:	d102      	bne.n	8006894 <UART_SetConfig+0x100>
 800688e:	2320      	movs	r3, #32
 8006890:	64bb      	str	r3, [r7, #72]	; 0x48
 8006892:	e001      	b.n	8006898 <UART_SetConfig+0x104>
 8006894:	2300      	movs	r3, #0
 8006896:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4b5e      	ldr	r3, [pc, #376]	; (8006a18 <UART_SetConfig+0x284>)
 800689e:	429a      	cmp	r2, r3
 80068a0:	d004      	beq.n	80068ac <UART_SetConfig+0x118>
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b5e      	ldr	r3, [pc, #376]	; (8006a20 <UART_SetConfig+0x28c>)
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d172      	bne.n	8006992 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80068ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ae:	2200      	movs	r2, #0
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	627a      	str	r2, [r7, #36]	; 0x24
 80068b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80068b8:	f7fe f9c2 	bl	8004c40 <HAL_RCCEx_GetPeriphCLKFreq>
 80068bc:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80068be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80e7 	beq.w	8006a94 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	4a5a      	ldr	r2, [pc, #360]	; (8006a34 <UART_SetConfig+0x2a0>)
 80068cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	4413      	add	r3, r2
 80068e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d305      	bcc.n	80068f6 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d903      	bls.n	80068fe <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80068fc:	e048      	b.n	8006990 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006900:	2200      	movs	r2, #0
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	61fa      	str	r2, [r7, #28]
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	4a4a      	ldr	r2, [pc, #296]	; (8006a34 <UART_SetConfig+0x2a0>)
 800690c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006910:	b29b      	uxth	r3, r3
 8006912:	2200      	movs	r2, #0
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	617a      	str	r2, [r7, #20]
 8006918:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800691c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006920:	f7fa f8a0 	bl	8000a64 <__aeabi_uldivmod>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4610      	mov	r0, r2
 800692a:	4619      	mov	r1, r3
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	020b      	lsls	r3, r1, #8
 8006936:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800693a:	0202      	lsls	r2, r0, #8
 800693c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800693e:	6849      	ldr	r1, [r1, #4]
 8006940:	0849      	lsrs	r1, r1, #1
 8006942:	2000      	movs	r0, #0
 8006944:	460c      	mov	r4, r1
 8006946:	4605      	mov	r5, r0
 8006948:	eb12 0804 	adds.w	r8, r2, r4
 800694c:	eb43 0905 	adc.w	r9, r3, r5
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	60bb      	str	r3, [r7, #8]
 8006958:	60fa      	str	r2, [r7, #12]
 800695a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f87f 	bl	8000a64 <__aeabi_uldivmod>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4613      	mov	r3, r2
 800696c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800696e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006974:	d308      	bcc.n	8006988 <UART_SetConfig+0x1f4>
 8006976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697c:	d204      	bcs.n	8006988 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	e003      	b.n	8006990 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800698e:	e081      	b.n	8006a94 <UART_SetConfig+0x300>
 8006990:	e080      	b.n	8006a94 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699a:	d14d      	bne.n	8006a38 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800699c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699e:	2200      	movs	r2, #0
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069a8:	f7fe f94a 	bl	8004c40 <HAL_RCCEx_GetPeriphCLKFreq>
 80069ac:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d06f      	beq.n	8006a94 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <UART_SetConfig+0x2a0>)
 80069ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069be:	461a      	mov	r2, r3
 80069c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c6:	005a      	lsls	r2, r3, #1
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	085b      	lsrs	r3, r3, #1
 80069ce:	441a      	add	r2, r3
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069dc:	2b0f      	cmp	r3, #15
 80069de:	d916      	bls.n	8006a0e <UART_SetConfig+0x27a>
 80069e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e6:	d212      	bcs.n	8006a0e <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f023 030f 	bic.w	r3, r3, #15
 80069f0:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006a00:	4313      	orrs	r3, r2
 8006a02:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006a0a:	60da      	str	r2, [r3, #12]
 8006a0c:	e042      	b.n	8006a94 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a14:	e03e      	b.n	8006a94 <UART_SetConfig+0x300>
 8006a16:	bf00      	nop
 8006a18:	46002400 	.word	0x46002400
 8006a1c:	cfff69f3 	.word	0xcfff69f3
 8006a20:	56002400 	.word	0x56002400
 8006a24:	40013800 	.word	0x40013800
 8006a28:	40004800 	.word	0x40004800
 8006a2c:	40004c00 	.word	0x40004c00
 8006a30:	40005000 	.word	0x40005000
 8006a34:	0800748c 	.word	0x0800748c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	469a      	mov	sl, r3
 8006a3e:	4693      	mov	fp, r2
 8006a40:	4650      	mov	r0, sl
 8006a42:	4659      	mov	r1, fp
 8006a44:	f7fe f8fc 	bl	8004c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a48:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d021      	beq.n	8006a94 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <UART_SetConfig+0x32c>)
 8006a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	441a      	add	r2, r3
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a76:	2b0f      	cmp	r3, #15
 8006a78:	d909      	bls.n	8006a8e <UART_SetConfig+0x2fa>
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a80:	d205      	bcs.n	8006a8e <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60da      	str	r2, [r3, #12]
 8006a8c:	e002      	b.n	8006a94 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	2200      	movs	r2, #0
 8006aae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3750      	adds	r7, #80	; 0x50
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006abe:	bf00      	nop
 8006ac0:	0800748c 	.word	0x0800748c

08006ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00a      	beq.n	8006b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01a      	beq.n	8006bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc2:	d10a      	bne.n	8006bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	605a      	str	r2, [r3, #4]
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b098      	sub	sp, #96	; 0x60
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c18:	f7fb f876 	bl	8001d08 <HAL_GetTick>
 8006c1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d12f      	bne.n	8006c8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c34:	2200      	movs	r2, #0
 8006c36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f88e 	bl	8006d5c <UART_WaitOnFlagUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d022      	beq.n	8006c8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c64:	647b      	str	r3, [r7, #68]	; 0x44
 8006c66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e6      	bne.n	8006c46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e063      	b.n	8006d54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d149      	bne.n	8006d2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f857 	bl	8006d5c <UART_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d03c      	beq.n	8006d2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8006cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e6      	bne.n	8006cb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3308      	adds	r3, #8
 8006cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3308      	adds	r3, #8
 8006d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d06:	61fa      	str	r2, [r7, #28]
 8006d08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	69b9      	ldr	r1, [r7, #24]
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	617b      	str	r3, [r7, #20]
   return(result);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e012      	b.n	8006d54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3758      	adds	r7, #88	; 0x58
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d6c:	e049      	b.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d045      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fa ffc7 	bl	8001d08 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e048      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d031      	beq.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d110      	bne.n	8006dce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2208      	movs	r2, #8
 8006db2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f838 	bl	8006e2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e029      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ddc:	d111      	bne.n	8006e02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f81e 	bl	8006e2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e00f      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	bf0c      	ite	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	2300      	movne	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d0a6      	beq.n	8006d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b095      	sub	sp, #84	; 0x54
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e50:	643b      	str	r3, [r7, #64]	; 0x40
 8006e52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e6      	bne.n	8006e32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e3      	bne.n	8006e64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d118      	bne.n	8006ed6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f023 0310 	bic.w	r3, r3, #16
 8006eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6979      	ldr	r1, [r7, #20]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e6      	bne.n	8006ea4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006eea:	bf00      	nop
 8006eec:	3754      	adds	r7, #84	; 0x54
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e027      	b.n	8006f5c <HAL_UARTEx_DisableFifoMode+0x66>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2224      	movs	r2, #36	; 0x24
 8006f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e02d      	b.n	8006fdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2224      	movs	r2, #36	; 0x24
 8006f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f84f 	bl	8007060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e02d      	b.n	8007058 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2224      	movs	r2, #36	; 0x24
 8007008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f811 	bl	8007060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800706c:	2b00      	cmp	r3, #0
 800706e:	d108      	bne.n	8007082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007080:	e031      	b.n	80070e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007082:	2308      	movs	r3, #8
 8007084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007086:	2308      	movs	r3, #8
 8007088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	0e5b      	lsrs	r3, r3, #25
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	0f5b      	lsrs	r3, r3, #29
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	7b3a      	ldrb	r2, [r7, #12]
 80070ae:	4911      	ldr	r1, [pc, #68]	; (80070f4 <UARTEx_SetNbDataToProcess+0x94>)
 80070b0:	5c8a      	ldrb	r2, [r1, r2]
 80070b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070b6:	7b3a      	ldrb	r2, [r7, #12]
 80070b8:	490f      	ldr	r1, [pc, #60]	; (80070f8 <UARTEx_SetNbDataToProcess+0x98>)
 80070ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	7b7a      	ldrb	r2, [r7, #13]
 80070cc:	4909      	ldr	r1, [pc, #36]	; (80070f4 <UARTEx_SetNbDataToProcess+0x94>)
 80070ce:	5c8a      	ldrb	r2, [r1, r2]
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070d4:	7b7a      	ldrb	r2, [r7, #13]
 80070d6:	4908      	ldr	r1, [pc, #32]	; (80070f8 <UARTEx_SetNbDataToProcess+0x98>)
 80070d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070da:	fb93 f3f2 	sdiv	r3, r3, r2
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	080074a4 	.word	0x080074a4
 80070f8:	080074ac 	.word	0x080074ac

080070fc <memset>:
 80070fc:	4402      	add	r2, r0
 80070fe:	4603      	mov	r3, r0
 8007100:	4293      	cmp	r3, r2
 8007102:	d100      	bne.n	8007106 <memset+0xa>
 8007104:	4770      	bx	lr
 8007106:	f803 1b01 	strb.w	r1, [r3], #1
 800710a:	e7f9      	b.n	8007100 <memset+0x4>

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4d0d      	ldr	r5, [pc, #52]	; (8007144 <__libc_init_array+0x38>)
 8007110:	2600      	movs	r6, #0
 8007112:	4c0d      	ldr	r4, [pc, #52]	; (8007148 <__libc_init_array+0x3c>)
 8007114:	1b64      	subs	r4, r4, r5
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	42a6      	cmp	r6, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	4d0b      	ldr	r5, [pc, #44]	; (800714c <__libc_init_array+0x40>)
 800711e:	2600      	movs	r6, #0
 8007120:	4c0b      	ldr	r4, [pc, #44]	; (8007150 <__libc_init_array+0x44>)
 8007122:	f000 f825 	bl	8007170 <_init>
 8007126:	1b64      	subs	r4, r4, r5
 8007128:	10a4      	asrs	r4, r4, #2
 800712a:	42a6      	cmp	r6, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f855 3b04 	ldr.w	r3, [r5], #4
 8007134:	3601      	adds	r6, #1
 8007136:	4798      	blx	r3
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f855 3b04 	ldr.w	r3, [r5], #4
 800713e:	3601      	adds	r6, #1
 8007140:	4798      	blx	r3
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	080074bc 	.word	0x080074bc
 8007148:	080074bc 	.word	0x080074bc
 800714c:	080074bc 	.word	0x080074bc
 8007150:	080074c0 	.word	0x080074c0

08007154 <memcpy>:
 8007154:	440a      	add	r2, r1
 8007156:	1e43      	subs	r3, r0, #1
 8007158:	4291      	cmp	r1, r2
 800715a:	d100      	bne.n	800715e <memcpy+0xa>
 800715c:	4770      	bx	lr
 800715e:	b510      	push	{r4, lr}
 8007160:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007164:	4291      	cmp	r1, r2
 8007166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800716a:	d1f9      	bne.n	8007160 <memcpy+0xc>
 800716c:	bd10      	pop	{r4, pc}
	...

08007170 <_init>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	bf00      	nop
 8007174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007176:	bc08      	pop	{r3}
 8007178:	469e      	mov	lr, r3
 800717a:	4770      	bx	lr

0800717c <_fini>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	bf00      	nop
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr
