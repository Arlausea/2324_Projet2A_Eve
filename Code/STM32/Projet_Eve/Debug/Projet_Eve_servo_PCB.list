
Projet_Eve_servo_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000694c  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08006b84  08006b84  00016b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08006ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  2000000c  08006ed5  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e8  08006ed5  000201e8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fd22  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000227b  00000000  00000000  0002fda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000c70  00000000  00000000  00032020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002c2ae  00000000  00000000  00032c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013026  00000000  00000000  0005ef3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00111055  00000000  00000000  00071f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000971  00000000  00000000  00182fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000032c0  00000000  00000000  0018392c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  00186bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08006b6c 	.word	0x08006b6c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08006b6c 	.word	0x08006b6c

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	; 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2iz>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d215      	bcs.n	8000a4a <__aeabi_d2iz+0x36>
 8000a1e:	d511      	bpl.n	8000a44 <__aeabi_d2iz+0x30>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d912      	bls.n	8000a50 <__aeabi_d2iz+0x3c>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3e:	bf18      	it	ne
 8000a40:	4240      	negne	r0, r0
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_d2iz+0x48>
 8000a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	bf08      	it	eq
 8000a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b982 	b.w	8000d80 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a98:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	460f      	mov	r7, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d146      	bne.n	8000b32 <__udivmoddi4+0x9e>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	d95e      	bls.n	8000b68 <__udivmoddi4+0xd4>
 8000aaa:	fab2 f382 	clz	r3, r2
 8000aae:	b143      	cbz	r3, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab4:	f1c3 0220 	rsb	r2, r3, #32
 8000ab8:	409f      	lsls	r7, r3
 8000aba:	409c      	lsls	r4, r3
 8000abc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac0:	4317      	orrs	r7, r2
 8000ac2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ac6:	fa1f f58c 	uxth.w	r5, ip
 8000aca:	0c22      	lsrs	r2, r4, #16
 8000acc:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ad4:	fb01 f005 	mul.w	r0, r1, r5
 8000ad8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000adc:	4290      	cmp	r0, r2
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x5e>
 8000ae0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae8:	d202      	bcs.n	8000af0 <__udivmoddi4+0x5c>
 8000aea:	4290      	cmp	r0, r2
 8000aec:	f200 8134 	bhi.w	8000d58 <__udivmoddi4+0x2c4>
 8000af0:	4639      	mov	r1, r7
 8000af2:	1a12      	subs	r2, r2, r0
 8000af4:	b2a4      	uxth	r4, r4
 8000af6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000afa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b06:	42a5      	cmp	r5, r4
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x88>
 8000b0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x86>
 8000b14:	42a5      	cmp	r5, r4
 8000b16:	f200 8119 	bhi.w	8000d4c <__udivmoddi4+0x2b8>
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0x9a>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xb4>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80fc 	beq.w	8000d34 <__udivmoddi4+0x2a0>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d14c      	bne.n	8000bea <__udivmoddi4+0x156>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	f0c0 80f2 	bcc.w	8000d3a <__udivmoddi4+0x2a6>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f240 80ef 	bls.w	8000d3a <__udivmoddi4+0x2a6>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0x9a>
 8000b62:	e9c6 4700 	strd	r4, r7, [r6]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xd8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f382 	clz	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f040 809f 	bne.w	8000cb4 <__udivmoddi4+0x220>
 8000b76:	1a8a      	subs	r2, r1, r2
 8000b78:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7c:	fa1f f78c 	uxth.w	r7, ip
 8000b80:	2101      	movs	r1, #1
 8000b82:	fbb2 f5fe 	udiv	r5, r2, lr
 8000b86:	fb0e 2015 	mls	r0, lr, r5, r2
 8000b8a:	0c22      	lsrs	r2, r4, #16
 8000b8c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b90:	fb07 f005 	mul.w	r0, r7, r5
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d90f      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000b98:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba0:	bf2c      	ite	cs
 8000ba2:	f04f 0901 	movcs.w	r9, #1
 8000ba6:	f04f 0900 	movcc.w	r9, #0
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d903      	bls.n	8000bb6 <__udivmoddi4+0x122>
 8000bae:	f1b9 0f00 	cmp.w	r9, #0
 8000bb2:	f000 80ce 	beq.w	8000d52 <__udivmoddi4+0x2be>
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	1a12      	subs	r2, r2, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc0:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bc4:	fb00 f707 	mul.w	r7, r0, r7
 8000bc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x14e>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x14c>
 8000bda:	42a7      	cmp	r7, r4
 8000bdc:	f200 80b3 	bhi.w	8000d46 <__udivmoddi4+0x2b2>
 8000be0:	4610      	mov	r0, r2
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be8:	e79c      	b.n	8000b24 <__udivmoddi4+0x90>
 8000bea:	f1c1 0420 	rsb	r4, r1, #32
 8000bee:	408b      	lsls	r3, r1
 8000bf0:	fa05 fc01 	lsl.w	ip, r5, r1
 8000bf4:	fa22 f704 	lsr.w	r7, r2, r4
 8000bf8:	40e5      	lsrs	r5, r4
 8000bfa:	408a      	lsls	r2, r1
 8000bfc:	431f      	orrs	r7, r3
 8000bfe:	fa20 f304 	lsr.w	r3, r0, r4
 8000c02:	4088      	lsls	r0, r1
 8000c04:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c08:	ea43 030c 	orr.w	r3, r3, ip
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c14:	fbb5 fef8 	udiv	lr, r5, r8
 8000c18:	fb08 551e 	mls	r5, r8, lr, r5
 8000c1c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a9      	cmp	r9, r5
 8000c26:	d90e      	bls.n	8000c46 <__udivmoddi4+0x1b2>
 8000c28:	197d      	adds	r5, r7, r5
 8000c2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c2e:	bf2c      	ite	cs
 8000c30:	f04f 0b01 	movcs.w	fp, #1
 8000c34:	f04f 0b00 	movcc.w	fp, #0
 8000c38:	45a9      	cmp	r9, r5
 8000c3a:	d903      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c3c:	f1bb 0f00 	cmp.w	fp, #0
 8000c40:	f000 808d 	beq.w	8000d5e <__udivmoddi4+0x2ca>
 8000c44:	46d6      	mov	lr, sl
 8000c46:	eba5 0509 	sub.w	r5, r5, r9
 8000c4a:	fa1f f983 	uxth.w	r9, r3
 8000c4e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000c52:	fb08 5513 	mls	r5, r8, r3, r5
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000c5e:	45ac      	cmp	ip, r5
 8000c60:	d906      	bls.n	8000c70 <__udivmoddi4+0x1dc>
 8000c62:	197d      	adds	r5, r7, r5
 8000c64:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c68:	d201      	bcs.n	8000c6e <__udivmoddi4+0x1da>
 8000c6a:	45ac      	cmp	ip, r5
 8000c6c:	d87e      	bhi.n	8000d6c <__udivmoddi4+0x2d8>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c74:	eba5 050c 	sub.w	r5, r5, ip
 8000c78:	fba3 9802 	umull	r9, r8, r3, r2
 8000c7c:	4545      	cmp	r5, r8
 8000c7e:	46ce      	mov	lr, r9
 8000c80:	46c4      	mov	ip, r8
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0x1f6>
 8000c84:	d106      	bne.n	8000c94 <__udivmoddi4+0x200>
 8000c86:	4548      	cmp	r0, r9
 8000c88:	d204      	bcs.n	8000c94 <__udivmoddi4+0x200>
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c90:	eb68 0c07 	sbc.w	ip, r8, r7
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d06f      	beq.n	8000d78 <__udivmoddi4+0x2e4>
 8000c98:	ebb0 020e 	subs.w	r2, r0, lr
 8000c9c:	eb65 050c 	sbc.w	r5, r5, ip
 8000ca0:	40ca      	lsrs	r2, r1
 8000ca2:	fa05 f404 	lsl.w	r4, r5, r4
 8000ca6:	40cd      	lsrs	r5, r1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	4314      	orrs	r4, r2
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 4500 	strd	r4, r5, [r6]
 8000cb2:	e73c      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	4099      	lsls	r1, r3
 8000cbe:	409c      	lsls	r4, r3
 8000cc0:	40d5      	lsrs	r5, r2
 8000cc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cca:	fa1f f78c 	uxth.w	r7, ip
 8000cce:	fbb5 f0fe 	udiv	r0, r5, lr
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cde:	fb00 f507 	mul.w	r5, r0, r7
 8000ce2:	428d      	cmp	r5, r1
 8000ce4:	d90e      	bls.n	8000d04 <__udivmoddi4+0x270>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	428d      	cmp	r5, r1
 8000cfa:	d902      	bls.n	8000d02 <__udivmoddi4+0x26e>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	d031      	beq.n	8000d66 <__udivmoddi4+0x2d2>
 8000d02:	4640      	mov	r0, r8
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5fe 	udiv	r5, r1, lr
 8000d0c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f107 	mul.w	r1, r5, r7
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x298>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d201      	bcs.n	8000d2a <__udivmoddi4+0x296>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d823      	bhi.n	8000d72 <__udivmoddi4+0x2de>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a52      	subs	r2, r2, r1
 8000d2e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d32:	e726      	b.n	8000b82 <__udivmoddi4+0xee>
 8000d34:	4631      	mov	r1, r6
 8000d36:	4630      	mov	r0, r6
 8000d38:	e6f9      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000d3a:	1a84      	subs	r4, r0, r2
 8000d3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d40:	2001      	movs	r0, #1
 8000d42:	4617      	mov	r7, r2
 8000d44:	e70b      	b.n	8000b5e <__udivmoddi4+0xca>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e74a      	b.n	8000be2 <__udivmoddi4+0x14e>
 8000d4c:	4464      	add	r4, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	e6e4      	b.n	8000b1c <__udivmoddi4+0x88>
 8000d52:	3d02      	subs	r5, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d58:	3902      	subs	r1, #2
 8000d5a:	4462      	add	r2, ip
 8000d5c:	e6c9      	b.n	8000af2 <__udivmoddi4+0x5e>
 8000d5e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d62:	443d      	add	r5, r7
 8000d64:	e76f      	b.n	8000c46 <__udivmoddi4+0x1b2>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	e7cb      	b.n	8000d04 <__udivmoddi4+0x270>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	443d      	add	r5, r7
 8000d70:	e77e      	b.n	8000c70 <__udivmoddi4+0x1dc>
 8000d72:	3d02      	subs	r5, #2
 8000d74:	4462      	add	r2, ip
 8000d76:	e7d9      	b.n	8000d2c <__udivmoddi4+0x298>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e6d7      	b.n	8000b2e <__udivmoddi4+0x9a>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, size_t data_blk_size)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d90:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000d94:	6019      	str	r1, [r3, #0]
 8000d96:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d9a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000da4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000da8:	4602      	mov	r2, r0
 8000daa:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000dac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000db0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <dyn2_crc+0xd4>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	4611      	mov	r1, r2
 8000dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f005 fec6 	bl	8006b50 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000dca:	e031      	b.n	8000e30 <dyn2_crc+0xac>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000dcc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dd0:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000dde:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8000de2:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000de6:	6809      	ldr	r1, [r1, #0]
 8000de8:	440b      	add	r3, r1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4053      	eors	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000df8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dfc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	f8b7 1214 	ldrh.w	r1, [r7, #532]	; 0x214
 8000e0a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e12:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4053      	eors	r3, r2
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e20:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e24:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8000e26:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000e30:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000e34:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000e38:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d8c4      	bhi.n	8000dcc <dyn2_crc+0x48>
	}
	return crc_accum;
 8000e42:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000e46:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e4a:	881b      	ldrh	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08006b84 	.word	0x08006b84

08000e5c <dyn2_append_crc>:
uint8_t* dyn2_append_crc(uint8_t* instruction,uint16_t bufferSize){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
		return NULL;
	}

	memcpy(instruction_sent, instruction, bufferSize);
	*/
	unsigned short crc = dyn2_crc(0, instruction, bufferSize - 2);
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff ff87 	bl	8000d84 <dyn2_crc>
 8000e76:	4603      	mov	r3, r0
 8000e78:	81fb      	strh	r3, [r7, #14]
	unsigned char crc_l = crc & 0x00FF;
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	737b      	strb	r3, [r7, #13]
	unsigned char crc_h = (crc >> 8) & 0x00FF;
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	733b      	strb	r3, [r7, #12]

	instruction[bufferSize - 2] = crc_l;
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	7b7a      	ldrb	r2, [r7, #13]
 8000e90:	701a      	strb	r2, [r3, #0]
	instruction[bufferSize - 1] = crc_h;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	7b3a      	ldrb	r2, [r7, #12]
 8000e9c:	701a      	strb	r2, [r3, #0]

	return instruction;
 8000e9e:	687b      	ldr	r3, [r7, #4]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <dyn2_send>:
	// Send the string through UART
	HAL_UART_Transmit(&huart4, (uint8_t*)arrayString, strlen(arrayString), HAL_MAX_DELAY);
}

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
int dyn2_send(uint8_t* buffer,uint16_t size){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]

	//dyn2_debug_sendArrayAsString(buffer_crc, size); // for debuging purposes

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <dyn2_send+0x3c>)
 8000eb6:	f005 f8ad 	bl	8006014 <HAL_HalfDuplex_EnableTransmitter>

	HAL_UART_Transmit(&huart1, buffer, size, TIMEOUT);
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <dyn2_send+0x3c>)
 8000ec2:	f005 f819 	bl	8005ef8 <HAL_UART_Transmit>
	// Wait until UART transmission is complete
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000ec6:	bf00      	nop
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <dyn2_send+0x3c>)
 8000eca:	f005 f94b 	bl	8006164 <HAL_UART_GetState>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b20      	cmp	r3, #32
 8000ed2:	d1f9      	bne.n	8000ec8 <dyn2_send+0x20>
	HAL_HalfDuplex_EnableReceiver(&huart1);
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <dyn2_send+0x3c>)
 8000ed6:	f005 f8f1 	bl	80060bc <HAL_HalfDuplex_EnableReceiver>

	return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000150 	.word	0x20000150

08000ee8 <dyn2_led>:
	uint16_t size = (uint16_t) NbOfElements(Dynamixel_PING);

	dyn2_send(Dynamixel_PING,size);
}
// Status 1 : Led ON, status 0 : Led OFF
int dyn2_led(uint8_t id,int status){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
//			/*débutparam, address 65:*/ ,0x41,0x00
//			/*value in the address*/,0x01
//			/*on calcule le CRC après */,0x00,0x00};
	uint8_t DYN2_LED[13];
	// HEADER
	DYN2_LED[0] = HEADER_1;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <dyn2_led+0x8c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	723b      	strb	r3, [r7, #8]
	DYN2_LED[1] = HEADER_2;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <dyn2_led+0x90>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	727b      	strb	r3, [r7, #9]
	DYN2_LED[2] = HEADER_3;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <dyn2_led+0x94>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	72bb      	strb	r3, [r7, #10]
	DYN2_LED[3] = HEADER_4;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <dyn2_led+0x98>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	72fb      	strb	r3, [r7, #11]
	// ID
	DYN2_LED[4]= id;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	733b      	strb	r3, [r7, #12]
	// LENGTH
	DYN2_LED[5]= NbOfElements(DYN2_LED)- 7; // tkt ca marche
 8000f10:	2306      	movs	r3, #6
 8000f12:	737b      	strb	r3, [r7, #13]
	DYN2_LED[6]= 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73bb      	strb	r3, [r7, #14]
	// INSTRUCTION
	DYN2_LED[7]= WRITE;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <dyn2_led+0x9c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	73fb      	strb	r3, [r7, #15]
	// PARAMETERS
	// ADDRRESS
	DYN2_LED[8]= ADDRESS_LED;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <dyn2_led+0xa0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	743b      	strb	r3, [r7, #16]
	DYN2_LED[9]= 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	747b      	strb	r3, [r7, #17]
	// VALUE
	switch(status){
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <dyn2_led+0x4e>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d004      	beq.n	8000f3e <dyn2_led+0x56>
 8000f34:	e007      	b.n	8000f46 <dyn2_led+0x5e>
	case 0:
		DYN2_LED[10]=LED_OFF;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <dyn2_led+0xa4>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	74bb      	strb	r3, [r7, #18]
		break;
 8000f3c:	e006      	b.n	8000f4c <dyn2_led+0x64>
	case 1:
		DYN2_LED[10]=LED_ON;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <dyn2_led+0xa8>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	74bb      	strb	r3, [r7, #18]
		break;
 8000f44:	e002      	b.n	8000f4c <dyn2_led+0x64>
	default :
		return ERROR_LED_VALUE;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <dyn2_led+0xac>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	e00f      	b.n	8000f6c <dyn2_led+0x84>
	}
	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_LED);
 8000f4c:	230d      	movs	r3, #13
 8000f4e:	83fb      	strh	r3, [r7, #30]
	uint8_t* DYN2_LED_CRC = dyn2_append_crc(DYN2_LED,size);
 8000f50:	8bfa      	ldrh	r2, [r7, #30]
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff7f 	bl	8000e5c <dyn2_append_crc>
 8000f5e:	61b8      	str	r0, [r7, #24]

	dyn2_send(DYN2_LED_CRC,size);
 8000f60:	8bfb      	ldrh	r3, [r7, #30]
 8000f62:	4619      	mov	r1, r3
 8000f64:	69b8      	ldr	r0, [r7, #24]
 8000f66:	f7ff ff9f 	bl	8000ea8 <dyn2_send>

	return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08006da9 	.word	0x08006da9
 8000f78:	08006daa 	.word	0x08006daa
 8000f7c:	08006dab 	.word	0x08006dab
 8000f80:	08006dac 	.word	0x08006dac
 8000f84:	08006da8 	.word	0x08006da8
 8000f88:	08006dae 	.word	0x08006dae
 8000f8c:	08006dbb 	.word	0x08006dbb
 8000f90:	08006db9 	.word	0x08006db9
 8000f94:	08006db0 	.word	0x08006db0

08000f98 <dyn2_torque>:

// TORQUE_ON => writing in EEPROM is IMPOSSIBLE and the motor can rotate, TORQUE_OFF =>
int dyn2_torque(uint8_t ID,int mode){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
	uint8_t DYN2_TORQUE[13];
	// HEADER
	DYN2_TORQUE[0] = HEADER_1;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <dyn2_torque+0x8c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	723b      	strb	r3, [r7, #8]
	DYN2_TORQUE[1] = HEADER_2;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <dyn2_torque+0x90>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	727b      	strb	r3, [r7, #9]
	DYN2_TORQUE[2] = HEADER_3;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <dyn2_torque+0x94>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	72bb      	strb	r3, [r7, #10]
	DYN2_TORQUE[3] = HEADER_4;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <dyn2_torque+0x98>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	72fb      	strb	r3, [r7, #11]
	// ID
	DYN2_TORQUE[4]= ID;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	733b      	strb	r3, [r7, #12]
	// LENGTH
	DYN2_TORQUE[5]= NbOfElements(DYN2_TORQUE)- 7; // tkt ca marche
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	737b      	strb	r3, [r7, #13]
	DYN2_TORQUE[6]= 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73bb      	strb	r3, [r7, #14]
	// INSTRUCTION
	DYN2_TORQUE[7]= WRITE;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <dyn2_torque+0x9c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	73fb      	strb	r3, [r7, #15]
	// PARAMETERS
	// ADDRRESS
	DYN2_TORQUE[8]= ADDRESS_TORQUE;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <dyn2_torque+0xa0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	743b      	strb	r3, [r7, #16]
	DYN2_TORQUE[9]= 0x00;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	747b      	strb	r3, [r7, #17]
	// VALUE
	switch(mode){
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <dyn2_torque+0x4e>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d004      	beq.n	8000fee <dyn2_torque+0x56>
 8000fe4:	e007      	b.n	8000ff6 <dyn2_torque+0x5e>
	case 0:
		DYN2_TORQUE[10]=TORQUE_OFF;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <dyn2_torque+0xa4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	74bb      	strb	r3, [r7, #18]
		break;
 8000fec:	e006      	b.n	8000ffc <dyn2_torque+0x64>
	case 1:
		DYN2_TORQUE[10]=TORQUE_ON;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <dyn2_torque+0xa8>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	74bb      	strb	r3, [r7, #18]
		break;
 8000ff4:	e002      	b.n	8000ffc <dyn2_torque+0x64>
	default :
		return ERROR_TORQUE_VALUE;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <dyn2_torque+0xac>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	e00f      	b.n	800101c <dyn2_torque+0x84>
	}

	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_TORQUE);
 8000ffc:	230d      	movs	r3, #13
 8000ffe:	83fb      	strh	r3, [r7, #30]
	uint8_t* DYN2_TORQUE_CRC = dyn2_append_crc(DYN2_TORQUE,size);
 8001000:	8bfa      	ldrh	r2, [r7, #30]
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff27 	bl	8000e5c <dyn2_append_crc>
 800100e:	61b8      	str	r0, [r7, #24]

	dyn2_send(DYN2_TORQUE_CRC,size);
 8001010:	8bfb      	ldrh	r3, [r7, #30]
 8001012:	4619      	mov	r1, r3
 8001014:	69b8      	ldr	r0, [r7, #24]
 8001016:	f7ff ff47 	bl	8000ea8 <dyn2_send>
	return 0;
 800101a:	2300      	movs	r3, #0

}
 800101c:	4618      	mov	r0, r3
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08006da9 	.word	0x08006da9
 8001028:	08006daa 	.word	0x08006daa
 800102c:	08006dab 	.word	0x08006dab
 8001030:	08006dac 	.word	0x08006dac
 8001034:	08006da8 	.word	0x08006da8
 8001038:	08006dad 	.word	0x08006dad
 800103c:	08006dba 	.word	0x08006dba
 8001040:	08006db8 	.word	0x08006db8
 8001044:	08006db4 	.word	0x08006db4

08001048 <dyn2_position>:

void dyn2_position(uint8_t ID,float angleInDeg) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	ed87 0a00 	vstr	s0, [r7]
 8001054:	71fb      	strb	r3, [r7, #7]
	// Value range: 0 to 4095
	uint8_t DYN2_POSITION[16];
	// HEADER
	DYN2_POSITION[0] = HEADER_1;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <dyn2_position+0xb0>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	733b      	strb	r3, [r7, #12]
	DYN2_POSITION[1] = HEADER_2;
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <dyn2_position+0xb4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	737b      	strb	r3, [r7, #13]
	DYN2_POSITION[2] = HEADER_3;
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <dyn2_position+0xb8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	73bb      	strb	r3, [r7, #14]
	DYN2_POSITION[3] = HEADER_4;
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <dyn2_position+0xbc>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	73fb      	strb	r3, [r7, #15]
	// ID
	DYN2_POSITION[4]= ID;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	743b      	strb	r3, [r7, #16]
	// LENGTH
	DYN2_POSITION[5]= NbOfElements(DYN2_POSITION)- 7; // tkt ca marche
 8001072:	2309      	movs	r3, #9
 8001074:	747b      	strb	r3, [r7, #17]
	DYN2_POSITION[6]= 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	74bb      	strb	r3, [r7, #18]
	// INSTRUCTION
	DYN2_POSITION[7]= WRITE;
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <dyn2_position+0xc0>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	74fb      	strb	r3, [r7, #19]
	// PARAMETERS
	// ADDRRESS
	DYN2_POSITION[8]= ADDRESS_POSITION;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <dyn2_position+0xc4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	753b      	strb	r3, [r7, #20]
	DYN2_POSITION[9]= 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	757b      	strb	r3, [r7, #21]
	// VALUE
	if(angleInDeg>360){
 800108a:	edd7 7a00 	vldr	s15, [r7]
 800108e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001110 <dyn2_position+0xc8>
 8001092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109a:	dd01      	ble.n	80010a0 <dyn2_position+0x58>
		angleInDeg = 360;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <dyn2_position+0xcc>)
 800109e:	603b      	str	r3, [r7, #0]
	}
	int Angle_Value =(int) (angleInDeg/0.088);
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f7ff fa4d 	bl	8000540 <__aeabi_f2d>
 80010a6:	a312      	add	r3, pc, #72	; (adr r3, 80010f0 <dyn2_position+0xa8>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff fbca 	bl	8000844 <__aeabi_ddiv>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fcac 	bl	8000a14 <__aeabi_d2iz>
 80010bc:	4603      	mov	r3, r0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24

	DYN2_POSITION[10]=TORQUE_OFF;
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <dyn2_position+0xd0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	75bb      	strb	r3, [r7, #22]


	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_POSITION);
 80010c6:	2310      	movs	r3, #16
 80010c8:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t* DYN2_POSITION_CRC = dyn2_append_crc(DYN2_POSITION,size);
 80010ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fec2 	bl	8000e5c <dyn2_append_crc>
 80010d8:	61f8      	str	r0, [r7, #28]

	dyn2_send(DYN2_POSITION_CRC,size);
 80010da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010dc:	4619      	mov	r1, r3
 80010de:	69f8      	ldr	r0, [r7, #28]
 80010e0:	f7ff fee2 	bl	8000ea8 <dyn2_send>

//	uint8_t Dynamixel_ChangePosition_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x09, 0x00,/*type instruction, ici write*/0x03
//			/*débutparam, address 116:*/ ,0x74,0x00
//			/*value in the address :2048*/,0x00,0x08,0x00,0x00
//			/*CRC*/				,0xCA,0x89};
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	f3af 8000 	nop.w
 80010f0:	020c49ba 	.word	0x020c49ba
 80010f4:	3fb6872b 	.word	0x3fb6872b
 80010f8:	08006da9 	.word	0x08006da9
 80010fc:	08006daa 	.word	0x08006daa
 8001100:	08006dab 	.word	0x08006dab
 8001104:	08006dac 	.word	0x08006dac
 8001108:	08006da8 	.word	0x08006da8
 800110c:	08006daf 	.word	0x08006daf
 8001110:	43b40000 	.word	0x43b40000
 8001114:	43b40000 	.word	0x43b40000
 8001118:	08006dba 	.word	0x08006dba

0800111c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	4b50      	ldr	r3, [pc, #320]	; (8001274 <MX_GPIO_Init+0x158>)
 8001134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001138:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <MX_GPIO_Init+0x158>)
 800113a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <MX_GPIO_Init+0x158>)
 8001144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	4b48      	ldr	r3, [pc, #288]	; (8001274 <MX_GPIO_Init+0x158>)
 8001152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001156:	4a47      	ldr	r2, [pc, #284]	; (8001274 <MX_GPIO_Init+0x158>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001160:	4b44      	ldr	r3, [pc, #272]	; (8001274 <MX_GPIO_Init+0x158>)
 8001162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <MX_GPIO_Init+0x158>)
 8001170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001174:	4a3f      	ldr	r2, [pc, #252]	; (8001274 <MX_GPIO_Init+0x158>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <MX_GPIO_Init+0x158>)
 8001180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <MX_GPIO_Init+0x158>)
 800118e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001192:	4a38      	ldr	r2, [pc, #224]	; (8001274 <MX_GPIO_Init+0x158>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <MX_GPIO_Init+0x158>)
 800119e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_CSN1_Pin|GPIO_CSN1C7_Pin|GPIO_CSN1C8_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80011b0:	4831      	ldr	r0, [pc, #196]	; (8001278 <MX_GPIO_Init+0x15c>)
 80011b2:	f000 ff05 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80011bc:	482f      	ldr	r0, [pc, #188]	; (800127c <MX_GPIO_Init+0x160>)
 80011be:	f000 feff 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FDC_1_Pin|FDC_4_Pin|FDC_5_Pin|FDC_2_Pin;
 80011c2:	23f0      	movs	r3, #240	; 0xf0
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4829      	ldr	r0, [pc, #164]	; (800127c <MX_GPIO_Init+0x160>)
 80011d6:	f000 fd1b 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = FDC_3_Pin|FDC_8_Pin|USR_BTN_2_Pin|USR_BTN_3_Pin
 80011da:	f641 4330 	movw	r3, #7216	; 0x1c30
 80011de:	617b      	str	r3, [r7, #20]
                          |USR_BTN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4822      	ldr	r0, [pc, #136]	; (8001278 <MX_GPIO_Init+0x15c>)
 80011f0:	f000 fd0e 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FDC_7_Pin|FDC_6_Pin;
 80011f4:	2303      	movs	r3, #3
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	481e      	ldr	r0, [pc, #120]	; (8001280 <MX_GPIO_Init+0x164>)
 8001208:	f000 fd02 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800120c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121e:	2305      	movs	r3, #5
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4815      	ldr	r0, [pc, #84]	; (8001280 <MX_GPIO_Init+0x164>)
 800122a:	f000 fcf1 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_CSN1_Pin|GPIO_CSN1C7_Pin|GPIO_CSN1C8_Pin;
 800122e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_GPIO_Init+0x15c>)
 8001248:	f000 fce2 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin|USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin;
 800124c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_GPIO_Init+0x160>)
 8001266:	f000 fcd3 	bl	8001c10 <HAL_GPIO_Init>

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	46020c00 	.word	0x46020c00
 8001278:	42020800 	.word	0x42020800
 800127c:	42020000 	.word	0x42020000
 8001280:	42020400 	.word	0x42020400

08001284 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001288:	2000      	movs	r0, #0
 800128a:	f000 feb1 	bl	8001ff0 <HAL_ICACHE_ConfigAssociativityMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001294:	f000 f89d 	bl	80013d2 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001298:	f000 feca 	bl	8002030 <HAL_ICACHE_Enable>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80012a2:	f000 f896 	bl	80013d2 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 fb21 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f843 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff ff2f 	bl	800111c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012be:	f000 f99f 	bl	8001600 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 80012c2:	f7ff ffdf 	bl	8001284 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80012c6:	f000 f905 	bl	80014d4 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 80012ca:	f000 f94d 	bl	8001568 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t ID = 0x01;
 80012ce:	2301      	movs	r3, #1
 80012d0:	71fb      	strb	r3, [r7, #7]
  dyn2_torque(ID,TORQUE_ON);
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <main+0x80>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe5b 	bl	8000f98 <dyn2_torque>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dyn2_led(ID,LED_ON);
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <main+0x84>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fdfb 	bl	8000ee8 <dyn2_led>
	  dyn2_position(ID,180);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001334 <main+0x88>
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fea5 	bl	8001048 <dyn2_position>
	  HAL_Delay(1000);
 80012fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001302:	f000 fb7d 	bl	8001a00 <HAL_Delay>
	  dyn2_led(ID,LED_OFF);
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <main+0x8c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fde9 	bl	8000ee8 <dyn2_led>
	  dyn2_position(ID,0);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800133c <main+0x90>
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fe93 	bl	8001048 <dyn2_position>

	  HAL_Delay(1000);
 8001322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001326:	f000 fb6b 	bl	8001a00 <HAL_Delay>
	  dyn2_led(ID,LED_ON);
 800132a:	e7da      	b.n	80012e2 <main+0x36>
 800132c:	08006db8 	.word	0x08006db8
 8001330:	08006db9 	.word	0x08006db9
 8001334:	43340000 	.word	0x43340000
 8001338:	08006dbb 	.word	0x08006dbb
 800133c:	00000000 	.word	0x00000000

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b09e      	sub	sp, #120	; 0x78
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2260      	movs	r2, #96	; 0x60
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f005 fbd2 	bl	8006af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001364:	2000      	movs	r0, #0
 8001366:	f000 fe73 	bl	8002050 <HAL_PWREx_ControlVoltageScaling>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001370:	f000 f82f 	bl	80013d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001374:	2310      	movs	r3, #16
 8001376:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800137c:	2310      	movs	r3, #16
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f000 feea 	bl	8002168 <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800139a:	f000 f81a 	bl	80013d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	231f      	movs	r3, #31
 80013a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 fdb0 	bl	8002f20 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013c6:	f000 f804 	bl	80013d2 <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3778      	adds	r7, #120	; 0x78
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d6:	b672      	cpsid	i
}
 80013d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013da:	e7fe      	b.n	80013da <Error_Handler+0x8>

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_MspInit+0x30>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_MspInit+0x30>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_MspInit+0x30>)
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	46020c00 	.word	0x46020c00

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145c:	f000 fab0 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <SystemInit+0x68>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <SystemInit+0x68>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <SystemInit+0x6c>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <SystemInit+0x6c>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <SystemInit+0x6c>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <SystemInit+0x6c>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <SystemInit+0x6c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <SystemInit+0x6c>)
 8001496:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800149a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800149e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <SystemInit+0x6c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <SystemInit+0x6c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <SystemInit+0x6c>)
 80014ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <SystemInit+0x6c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SystemInit+0x68>)
 80014ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014be:	609a      	str	r2, [r3, #8]
  #endif
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	46020c00 	.word	0x46020c00

080014d4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 80014da:	4a21      	ldr	r2, [pc, #132]	; (8001560 <MX_LPUART1_UART_Init+0x8c>)
 80014dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 80014e0:	4a20      	ldr	r2, [pc, #128]	; (8001564 <MX_LPUART1_UART_Init+0x90>)
 80014e2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 80014f8:	220c      	movs	r2, #12
 80014fa:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 800150a:	2200      	movs	r2, #0
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 8001510:	2200      	movs	r2, #0
 8001512:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001514:	4811      	ldr	r0, [pc, #68]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 8001516:	f004 fc47 	bl	8005da8 <HAL_UART_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001520:	f7ff ff57 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001524:	2100      	movs	r1, #0
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 8001528:	f005 fa1c 	bl	8006964 <HAL_UARTEx_SetTxFifoThreshold>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001532:	f7ff ff4e 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001536:	2100      	movs	r1, #0
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 800153a:	f005 fa51 	bl	80069e0 <HAL_UARTEx_SetRxFifoThreshold>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001544:	f7ff ff45 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_LPUART1_UART_Init+0x88>)
 800154a:	f005 f9d2 	bl	80068f2 <HAL_UARTEx_DisableFifoMode>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001554:	f7ff ff3d 	bl	80013d2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000028 	.word	0x20000028
 8001560:	46002400 	.word	0x46002400
 8001564:	00033324 	.word	0x00033324

08001568 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_UART4_Init+0x90>)
 800156e:	4a23      	ldr	r2, [pc, #140]	; (80015fc <MX_UART4_Init+0x94>)
 8001570:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_UART4_Init+0x90>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_UART4_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_UART4_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_UART4_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_UART4_Init+0x90>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_UART4_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_UART4_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_UART4_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_UART4_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_UART4_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	; (80015f8 <MX_UART4_Init+0x90>)
 80015b2:	f004 fbf9 	bl	8005da8 <HAL_UART_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015bc:	f7ff ff09 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_UART4_Init+0x90>)
 80015c4:	f005 f9ce 	bl	8006964 <HAL_UARTEx_SetTxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f7ff ff00 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <MX_UART4_Init+0x90>)
 80015d6:	f005 fa03 	bl	80069e0 <HAL_UARTEx_SetRxFifoThreshold>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f7ff fef7 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_UART4_Init+0x90>)
 80015e6:	f005 f984 	bl	80068f2 <HAL_UARTEx_DisableFifoMode>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f7ff feef 	bl	80013d2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000bc 	.word	0x200000bc
 80015fc:	40004c00 	.word	0x40004c00

08001600 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_USART1_UART_Init+0x90>)
 8001606:	4a23      	ldr	r2, [pc, #140]	; (8001694 <MX_USART1_UART_Init+0x94>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_USART1_UART_Init+0x90>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_USART1_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_USART1_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_USART1_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_USART1_UART_Init+0x90>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_USART1_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_USART1_UART_Init+0x90>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_USART1_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_USART1_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_USART1_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001648:	4811      	ldr	r0, [pc, #68]	; (8001690 <MX_USART1_UART_Init+0x90>)
 800164a:	f004 fbfd 	bl	8005e48 <HAL_HalfDuplex_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001654:	f7ff febd 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_USART1_UART_Init+0x90>)
 800165c:	f005 f982 	bl	8006964 <HAL_UARTEx_SetTxFifoThreshold>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001666:	f7ff feb4 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <MX_USART1_UART_Init+0x90>)
 800166e:	f005 f9b7 	bl	80069e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001678:	f7ff feab 	bl	80013d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_USART1_UART_Init+0x90>)
 800167e:	f005 f938 	bl	80068f2 <HAL_UARTEx_DisableFifoMode>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001688:	f7ff fea3 	bl	80013d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000150 	.word	0x20000150
 8001694:	40013800 	.word	0x40013800

08001698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0bc      	sub	sp, #240	; 0xf0
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b0:	f107 0320 	add.w	r3, r7, #32
 80016b4:	22b8      	movs	r2, #184	; 0xb8
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f005 fa1d 	bl	8006af8 <memset>
  if(uartHandle->Instance==LPUART1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a71      	ldr	r2, [pc, #452]	; (8001888 <HAL_UART_MspInit+0x1f0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d146      	bne.n	8001756 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016c8:	f04f 0220 	mov.w	r2, #32
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 ffee 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016ea:	f7ff fe72 	bl	80013d2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_UART_MspInit+0x1f4>)
 80016f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016f4:	4a65      	ldr	r2, [pc, #404]	; (800188c <HAL_UART_MspInit+0x1f4>)
 80016f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001700:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800170e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001712:	4a5e      	ldr	r2, [pc, #376]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800171c:	4b5b      	ldr	r3, [pc, #364]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800171e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = Rasp_RX_Pin|Rasp_TX_Pin;
 800172a:	2303      	movs	r3, #3
 800172c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001742:	2308      	movs	r3, #8
 8001744:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800174c:	4619      	mov	r1, r3
 800174e:	4850      	ldr	r0, [pc, #320]	; (8001890 <HAL_UART_MspInit+0x1f8>)
 8001750:	f000 fa5e 	bl	8001c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001754:	e094      	b.n	8001880 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==UART4)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_UART_MspInit+0x1fc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d145      	bne.n	80017ec <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001760:	f04f 0208 	mov.w	r2, #8
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800176c:	2300      	movs	r3, #0
 800176e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	4618      	mov	r0, r3
 8001776:	f001 ffa3 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001780:	f7ff fe27 	bl	80013d2 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001784:	4b41      	ldr	r3, [pc, #260]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800178a:	4a40      	ldr	r2, [pc, #256]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800178c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001790:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001794:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800179a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_UART_MspInit+0x1f4>)
 80017a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a8:	4a38      	ldr	r2, [pc, #224]	; (800188c <HAL_UART_MspInit+0x1f4>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017b2:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_UART_MspInit+0x1f4>)
 80017b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ST_LINK_TX_Pin|ST_LINK_RX_Pin;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017d8:	2308      	movs	r3, #8
 80017da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017e2:	4619      	mov	r1, r3
 80017e4:	482c      	ldr	r0, [pc, #176]	; (8001898 <HAL_UART_MspInit+0x200>)
 80017e6:	f000 fa13 	bl	8001c10 <HAL_GPIO_Init>
}
 80017ea:	e049      	b.n	8001880 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <HAL_UART_MspInit+0x204>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d144      	bne.n	8001880 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017f6:	f04f 0201 	mov.w	r2, #1
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001802:	2300      	movs	r3, #0
 8001804:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	4618      	mov	r0, r3
 800180c:	f001 ff58 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001816:	f7ff fddc 	bl	80013d2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800181c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001826:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800182c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800183a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_UART_MspInit+0x1f4>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_UART_MspInit+0x1f4>)
 800184a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servos_Pin;
 8001856:	2340      	movs	r3, #64	; 0x40
 8001858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185c:	2312      	movs	r3, #18
 800185e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001862:	2301      	movs	r3, #1
 8001864:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800186e:	2307      	movs	r3, #7
 8001870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(Servos_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001878:	4619      	mov	r1, r3
 800187a:	4809      	ldr	r0, [pc, #36]	; (80018a0 <HAL_UART_MspInit+0x208>)
 800187c:	f000 f9c8 	bl	8001c10 <HAL_GPIO_Init>
}
 8001880:	bf00      	nop
 8001882:	37f0      	adds	r7, #240	; 0xf0
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	46002400 	.word	0x46002400
 800188c:	46020c00 	.word	0x46020c00
 8001890:	42020800 	.word	0x42020800
 8001894:	40004c00 	.word	0x40004c00
 8001898:	42020000 	.word	0x42020000
 800189c:	40013800 	.word	0x40013800
 80018a0:	42020400 	.word	0x42020400

080018a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a8:	f7ff fddc 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	; (80018e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <LoopForever+0xe>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	; (80018f0 <LoopForever+0x16>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018d2:	f005 f919 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d6:	f7ff fce9 	bl	80012ac <main>

080018da <LoopForever>:

LoopForever:
    b LoopForever
 80018da:	e7fe      	b.n	80018da <LoopForever>
  ldr   r0, =_estack
 80018dc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	20000009 	.word	0x20000009
  ldr r2, =_sidata
 80018e8:	08006ecc 	.word	0x08006ecc
  ldr r2, =_sbss
 80018ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018f0:	200001e8 	.word	0x200001e8

080018f4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_Init+0x4c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_Init+0x4c>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 f94f 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800190e:	f001 fcf9 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8001912:	4602      	mov	r2, r0
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_Init+0x50>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	490b      	ldr	r1, [pc, #44]	; (800194c <HAL_Init+0x54>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_Init+0x58>)
 8001926:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001928:	200f      	movs	r0, #15
 800192a:	f000 f813 	bl	8001954 <HAL_InitTick>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e002      	b.n	800193e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fd50 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	46020c00 	.word	0x46020c00
 800194c:	08006dbc 	.word	0x08006dbc
 8001950:	20000000 	.word	0x20000000

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_InitTick+0x60>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e021      	b.n	80019ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_InitTick+0x64>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_InitTick+0x60>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f939 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 f911 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_InitTick+0x68>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008
 80019e4:	200001e4 	.word	0x200001e4

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200001e4 	.word	0x200001e4

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008

08001a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	; (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff8e 	bl	8001aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff47 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff5e 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff90 	bl	8001b00 <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5f 	bl	8001aac <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffb2 	bl	8001b68 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c22:	e1ba      	b.n	8001f9a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 81aa 	beq.w	8001f94 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a55      	ldr	r2, [pc, #340]	; (8001d98 <HAL_GPIO_Init+0x188>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d15d      	bne.n	8001d04 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0201 	and.w	r2, r3, #1
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001c78:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <HAL_GPIO_Init+0x18c>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c80:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001c82:	4a46      	ldr	r2, [pc, #280]	; (8001d9c <HAL_GPIO_Init+0x18c>)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	3208      	adds	r2, #8
 8001c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220b      	movs	r2, #11
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	08da      	lsrs	r2, r3, #3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	3208      	adds	r2, #8
 8001cce:	69f9      	ldr	r1, [r7, #28]
 8001cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e067      	b.n	8001dd4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x104>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b12      	cmp	r3, #18
 8001d12:	d145      	bne.n	8001da0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69f9      	ldr	r1, [r7, #28]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e01e      	b.n	8001dd4 <HAL_GPIO_Init+0x1c4>
 8001d96:	bf00      	nop
 8001d98:	46020000 	.word	0x46020000
 8001d9c:	08006e14 	.word	0x08006e14
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d00b      	beq.n	8001df4 <HAL_GPIO_Init+0x1e4>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d007      	beq.n	8001df4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de8:	2b11      	cmp	r3, #17
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b12      	cmp	r3, #18
 8001df2:	d130      	bne.n	8001e56 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 0201 	and.w	r2, r3, #1
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d017      	beq.n	8001e8e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d07c      	beq.n	8001f94 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e9a:	4a47      	ldr	r2, [pc, #284]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3318      	adds	r3, #24
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0a9a      	lsrs	r2, r3, #10
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_GPIO_Init+0x3ac>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	f002 0203 	and.w	r2, r2, #3
 8001ecc:	00d2      	lsls	r2, r2, #3
 8001ece:	4093      	lsls	r3, r2
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ed6:	4938      	ldr	r1, [pc, #224]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	3318      	adds	r3, #24
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001f08:	4a2b      	ldr	r2, [pc, #172]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001f5e:	4a16      	ldr	r2, [pc, #88]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_GPIO_Init+0x3a8>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3301      	adds	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f47f ae3d 	bne.w	8001c24 <HAL_GPIO_Init+0x14>
  }
}
 8001faa:	bf00      	nop
 8001fac:	bf00      	nop
 8001fae:	3724      	adds	r7, #36	; 0x24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	46022000 	.word	0x46022000
 8001fbc:	002f7f7f 	.word	0x002f7f7f

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e007      	b.n	800201e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0204 	bic.w	r2, r3, #4
 8002016:	4905      	ldr	r1, [pc, #20]	; (800202c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40030400 	.word	0x40030400

08002030 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_ICACHE_Enable+0x1c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_ICACHE_Enable+0x1c>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40030400 	.word	0x40030400

08002050 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002058:	4b39      	ldr	r3, [pc, #228]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002060:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	d10b      	bne.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d905      	bls.n	800207e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002072:	4b33      	ldr	r3, [pc, #204]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4a32      	ldr	r2, [pc, #200]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e057      	b.n	8002132 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002088:	d90a      	bls.n	80020a0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4313      	orrs	r3, r2
 8002096:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	60d3      	str	r3, [r2, #12]
 800209e:	e007      	b.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80020a8:	4925      	ldr	r1, [pc, #148]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a24      	ldr	r2, [pc, #144]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	2232      	movs	r2, #50	; 0x32
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	3301      	adds	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80020ce:	e002      	b.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0x98>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f3      	bne.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01b      	beq.n	8002126 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a15      	ldr	r2, [pc, #84]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	2232      	movs	r2, #50	; 0x32
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	099b      	lsrs	r3, r3, #6
 8002108:	3301      	adds	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800210c:	e002      	b.n	8002114 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f3      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e000      	b.n	8002132 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	46020800 	.word	0x46020800
 8002144:	20000000 	.word	0x20000000
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_PWREx_GetVoltageRange+0x18>)
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	46020800 	.word	0x46020800

08002168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f000 bec8 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002182:	4b99      	ldr	r3, [pc, #612]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800218c:	4b96      	ldr	r3, [pc, #600]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 816c 	beq.w	800247c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_RCC_OscConfig+0x52>
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	f040 80de 	bne.w	800236e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	f040 80da 	bne.w	800236e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f000 bea5 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021cc:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <HAL_RCC_OscConfig+0x7a>
 80021d8:	4b83      	ldr	r3, [pc, #524]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80021e0:	e005      	b.n	80021ee <HAL_RCC_OscConfig+0x86>
 80021e2:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80021e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d255      	bcs.n	800229e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 f9d9 	bl	80035b4 <RCC_SetFlashLatencyFromMSIRange>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	f000 be82 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4a75      	ldr	r2, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	4b73      	ldr	r3, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	4970      	ldr	r1, [pc, #448]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002234:	d309      	bcc.n	800224a <HAL_RCC_OscConfig+0xe2>
 8002236:	4b6c      	ldr	r3, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f023 021f 	bic.w	r2, r3, #31
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4969      	ldr	r1, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002244:	4313      	orrs	r3, r2
 8002246:	60cb      	str	r3, [r1, #12]
 8002248:	e07e      	b.n	8002348 <HAL_RCC_OscConfig+0x1e0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	da0a      	bge.n	8002268 <HAL_RCC_OscConfig+0x100>
 8002252:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	015b      	lsls	r3, r3, #5
 8002260:	4961      	ldr	r1, [pc, #388]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002262:	4313      	orrs	r3, r2
 8002264:	60cb      	str	r3, [r1, #12]
 8002266:	e06f      	b.n	8002348 <HAL_RCC_OscConfig+0x1e0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002270:	d30a      	bcc.n	8002288 <HAL_RCC_OscConfig+0x120>
 8002272:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	029b      	lsls	r3, r3, #10
 8002280:	4959      	ldr	r1, [pc, #356]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002282:	4313      	orrs	r3, r2
 8002284:	60cb      	str	r3, [r1, #12]
 8002286:	e05f      	b.n	8002348 <HAL_RCC_OscConfig+0x1e0>
 8002288:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	03db      	lsls	r3, r3, #15
 8002296:	4954      	ldr	r1, [pc, #336]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002298:	4313      	orrs	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
 800229c:	e054      	b.n	8002348 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800229e:	4b52      	ldr	r3, [pc, #328]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4a51      	ldr	r2, [pc, #324]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a8:	6093      	str	r3, [r2, #8]
 80022aa:	4b4f      	ldr	r3, [pc, #316]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	494c      	ldr	r1, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80022c4:	d309      	bcc.n	80022da <HAL_RCC_OscConfig+0x172>
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f023 021f 	bic.w	r2, r3, #31
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4945      	ldr	r1, [pc, #276]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
 80022d8:	e028      	b.n	800232c <HAL_RCC_OscConfig+0x1c4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da0a      	bge.n	80022f8 <HAL_RCC_OscConfig+0x190>
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	015b      	lsls	r3, r3, #5
 80022f0:	493d      	ldr	r1, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60cb      	str	r3, [r1, #12]
 80022f6:	e019      	b.n	800232c <HAL_RCC_OscConfig+0x1c4>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d30a      	bcc.n	8002318 <HAL_RCC_OscConfig+0x1b0>
 8002302:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002312:	4313      	orrs	r3, r2
 8002314:	60cb      	str	r3, [r1, #12]
 8002316:	e009      	b.n	800232c <HAL_RCC_OscConfig+0x1c4>
 8002318:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	03db      	lsls	r3, r3, #15
 8002326:	4930      	ldr	r1, [pc, #192]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002328:	4313      	orrs	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	4618      	mov	r0, r3
 8002338:	f001 f93c 	bl	80035b4 <RCC_SetFlashLatencyFromMSIRange>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f000 bde5 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002348:	f001 f8de 	bl	8003508 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x284>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff faff 	bl	8001954 <HAL_InitTick>
 8002356:	4603      	mov	r3, r0
 8002358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800235c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 808a 	beq.w	800247a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800236a:	f000 bdd2 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d066      	beq.n	8002444 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002382:	f7ff fb31 	bl	80019e8 <HAL_GetTick>
 8002386:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002388:	e009      	b.n	800239e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238a:	f7ff fb2d 	bl	80019e8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d902      	bls.n	800239e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	f000 bdba 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0ef      	beq.n	800238a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b4:	6093      	str	r3, [r2, #8]
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	4909      	ldr	r1, [pc, #36]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80023d0:	d30e      	bcc.n	80023f0 <HAL_RCC_OscConfig+0x288>
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 021f 	bic.w	r2, r3, #31
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4902      	ldr	r1, [pc, #8]	; (80023e8 <HAL_RCC_OscConfig+0x280>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
 80023e4:	e04a      	b.n	800247c <HAL_RCC_OscConfig+0x314>
 80023e6:	bf00      	nop
 80023e8:	46020c00 	.word	0x46020c00
 80023ec:	20000004 	.word	0x20000004
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da0a      	bge.n	800240e <HAL_RCC_OscConfig+0x2a6>
 80023f8:	4b98      	ldr	r3, [pc, #608]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	015b      	lsls	r3, r3, #5
 8002406:	4995      	ldr	r1, [pc, #596]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
 800240c:	e036      	b.n	800247c <HAL_RCC_OscConfig+0x314>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002416:	d30a      	bcc.n	800242e <HAL_RCC_OscConfig+0x2c6>
 8002418:	4b90      	ldr	r3, [pc, #576]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	029b      	lsls	r3, r3, #10
 8002426:	498d      	ldr	r1, [pc, #564]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
 800242c:	e026      	b.n	800247c <HAL_RCC_OscConfig+0x314>
 800242e:	4b8b      	ldr	r3, [pc, #556]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	03db      	lsls	r3, r3, #15
 800243c:	4987      	ldr	r1, [pc, #540]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
 8002442:	e01b      	b.n	800247c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002444:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a84      	ldr	r2, [pc, #528]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002450:	f7ff faca 	bl	80019e8 <HAL_GetTick>
 8002454:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002456:	e009      	b.n	800246c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002458:	f7ff fac6 	bl	80019e8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d902      	bls.n	800246c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	f000 bd53 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800246c:	4b7b      	ldr	r3, [pc, #492]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ef      	bne.n	8002458 <HAL_RCC_OscConfig+0x2f0>
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800247a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 808b 	beq.w	80025a0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	2b08      	cmp	r3, #8
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x334>
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d109      	bne.n	80024aa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	2b03      	cmp	r3, #3
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d17d      	bne.n	80025a0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f000 bd34 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x35a>
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e041      	b.n	8002546 <HAL_RCC_OscConfig+0x3de>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ca:	d112      	bne.n	80024f2 <HAL_RCC_OscConfig+0x38a>
 80024cc:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a62      	ldr	r2, [pc, #392]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b60      	ldr	r3, [pc, #384]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5f      	ldr	r2, [pc, #380]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5c      	ldr	r2, [pc, #368]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e029      	b.n	8002546 <HAL_RCC_OscConfig+0x3de>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80024fa:	d112      	bne.n	8002522 <HAL_RCC_OscConfig+0x3ba>
 80024fc:	4b57      	ldr	r3, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b54      	ldr	r3, [pc, #336]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a53      	ldr	r2, [pc, #332]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800250e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b51      	ldr	r3, [pc, #324]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a50      	ldr	r2, [pc, #320]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e011      	b.n	8002546 <HAL_RCC_OscConfig+0x3de>
 8002522:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a4d      	ldr	r2, [pc, #308]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a4a      	ldr	r2, [pc, #296]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002540:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002544:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d014      	beq.n	8002578 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800254e:	f7ff fa4b 	bl	80019e8 <HAL_GetTick>
 8002552:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002554:	e009      	b.n	800256a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002556:	f7ff fa47 	bl	80019e8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d902      	bls.n	800256a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	f000 bcd4 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ef      	beq.n	8002556 <HAL_RCC_OscConfig+0x3ee>
 8002576:	e013      	b.n	80025a0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002578:	f7ff fa36 	bl	80019e8 <HAL_GetTick>
 800257c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800257e:	e009      	b.n	8002594 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fa32 	bl	80019e8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d902      	bls.n	8002594 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	f000 bcbf 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ef      	bne.n	8002580 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05f      	beq.n	800266c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x456>
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d114      	bne.n	80025e2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d111      	bne.n	80025e2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f000 bca3 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	4920      	ldr	r1, [pc, #128]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80025e0:	e044      	b.n	800266c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d024      	beq.n	8002634 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80025f6:	f7ff f9f7 	bl	80019e8 <HAL_GetTick>
 80025fa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fc:	e009      	b.n	8002612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7ff f9f3 	bl	80019e8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d902      	bls.n	8002612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	f000 bc80 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ef      	beq.n	80025fe <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	041b      	lsls	r3, r3, #16
 800262c:	490b      	ldr	r1, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	610b      	str	r3, [r1, #16]
 8002632:	e01b      	b.n	800266c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <HAL_RCC_OscConfig+0x4f4>)
 800263a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800263e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002640:	f7ff f9d2 	bl	80019e8 <HAL_GetTick>
 8002644:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002648:	f7ff f9ce 	bl	80019e8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d904      	bls.n	8002660 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	f000 bc5b 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
 800265c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002660:	4baf      	ldr	r3, [pc, #700]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ed      	bne.n	8002648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80c8 	beq.w	800280a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002680:	4ba7      	ldr	r3, [pc, #668]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d111      	bne.n	80026b2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4ba4      	ldr	r3, [pc, #656]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002694:	4aa2      	ldr	r2, [pc, #648]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800269e:	4ba0      	ldr	r3, [pc, #640]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026b2:	4b9c      	ldr	r3, [pc, #624]	; (8002924 <HAL_RCC_OscConfig+0x7bc>)
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d119      	bne.n	80026f2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80026be:	4b99      	ldr	r3, [pc, #612]	; (8002924 <HAL_RCC_OscConfig+0x7bc>)
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	4a98      	ldr	r2, [pc, #608]	; (8002924 <HAL_RCC_OscConfig+0x7bc>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7ff f98d 	bl	80019e8 <HAL_GetTick>
 80026ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7ff f989 	bl	80019e8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d902      	bls.n	80026e6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	f000 bc16 	b.w	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80026e6:	4b8f      	ldr	r3, [pc, #572]	; (8002924 <HAL_RCC_OscConfig+0x7bc>)
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ef      	beq.n	80026d2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d05f      	beq.n	80027ba <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80026fa:	4b89      	ldr	r3, [pc, #548]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80026fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002700:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	429a      	cmp	r2, r3
 800270e:	d037      	beq.n	8002780 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e3f4      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01b      	beq.n	800276a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002732:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002738:	4a79      	ldr	r2, [pc, #484]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 800273a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800273e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002742:	f7ff f951 	bl	80019e8 <HAL_GetTick>
 8002746:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7ff f94d 	bl	80019e8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b05      	cmp	r3, #5
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e3da      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800275c:	4b70      	ldr	r3, [pc, #448]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 800275e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ef      	bne.n	800274a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800276a:	4b6d      	ldr	r3, [pc, #436]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 800276c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002770:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4969      	ldr	r1, [pc, #420]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002780:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002786:	4a66      	ldr	r2, [pc, #408]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002788:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800278c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002790:	f7ff f92a 	bl	80019e8 <HAL_GetTick>
 8002794:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7ff f926 	bl	80019e8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e3b3      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027aa:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80027ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <HAL_RCC_OscConfig+0x630>
 80027b8:	e01b      	b.n	80027f2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80027ba:	4b59      	ldr	r3, [pc, #356]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80027bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027c0:	4a57      	ldr	r2, [pc, #348]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80027c2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80027c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80027ca:	f7ff f90d 	bl	80019e8 <HAL_GetTick>
 80027ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d2:	f7ff f909 	bl	80019e8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e396      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027e4:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80027e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ef      	bne.n	80027d2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002800:	4a47      	ldr	r2, [pc, #284]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002802:	f023 0304 	bic.w	r3, r3, #4
 8002806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8111 	beq.w	8002a3a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b40      	ldr	r3, [pc, #256]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d111      	bne.n	8002850 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282c:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 800282e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002832:	4a3b      	ldr	r2, [pc, #236]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800283c:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_RCC_OscConfig+0x7bc>)
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d118      	bne.n	800288e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCC_OscConfig+0x7bc>)
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	4a30      	ldr	r2, [pc, #192]	; (8002924 <HAL_RCC_OscConfig+0x7bc>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002868:	f7ff f8be 	bl	80019e8 <HAL_GetTick>
 800286c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7ff f8ba 	bl	80019e8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e347      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <HAL_RCC_OscConfig+0x7bc>)
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01f      	beq.n	80028da <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028bc:	4a18      	ldr	r2, [pc, #96]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028c6:	e018      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028c8:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ce:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028d8:	e00f      	b.n	80028fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028e0:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <HAL_RCC_OscConfig+0x7b8>)
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d057      	beq.n	80029b2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002902:	f7ff f871 	bl	80019e8 <HAL_GetTick>
 8002906:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	e00e      	b.n	8002928 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7ff f86d 	bl	80019e8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d905      	bls.n	8002928 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e2f8      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
 8002920:	46020c00 	.word	0x46020c00
 8002924:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002928:	4b9c      	ldr	r3, [pc, #624]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 800292a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0e9      	beq.n	800290a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01b      	beq.n	800297a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002942:	4b96      	ldr	r3, [pc, #600]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002948:	4a94      	ldr	r2, [pc, #592]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 800294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7ff f848 	bl	80019e8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e2d3      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800296a:	4b8c      	ldr	r3, [pc, #560]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 800296c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ed      	beq.n	8002954 <HAL_RCC_OscConfig+0x7ec>
 8002978:	e053      	b.n	8002a22 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800297a:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 800297c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002980:	4a86      	ldr	r2, [pc, #536]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002986:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7ff f82c 	bl	80019e8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e2b7      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80029a2:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 80029a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ed      	bne.n	800298c <HAL_RCC_OscConfig+0x824>
 80029b0:	e037      	b.n	8002a22 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80029b2:	f7ff f819 	bl	80019e8 <HAL_GetTick>
 80029b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7ff f815 	bl	80019e8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e2a0      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d0:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 80029d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ed      	bne.n	80029ba <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80029de:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 80029e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01a      	beq.n	8002a22 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029ec:	4b6b      	ldr	r3, [pc, #428]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 80029ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029f2:	4a6a      	ldr	r2, [pc, #424]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 80029f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fff3 	bl	80019e8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e27e      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a14:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1ed      	bne.n	80029fe <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2a:	4b5c      	ldr	r3, [pc, #368]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	4a5a      	ldr	r2, [pc, #360]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d036      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002a4e:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a58:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002a5a:	f7fe ffc5 	bl	80019e8 <HAL_GetTick>
 8002a5e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a62:	f7fe ffc1 	bl	80019e8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e24e      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002a74:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x8fa>
 8002a80:	e018      	b.n	8002ab4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002a82:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a45      	ldr	r2, [pc, #276]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a8c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002a8e:	f7fe ffab 	bl	80019e8 <HAL_GetTick>
 8002a92:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a96:	f7fe ffa7 	bl	80019e8 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e234      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d036      	beq.n	8002b2e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d019      	beq.n	8002afc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002ac8:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a33      	ldr	r2, [pc, #204]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ad4:	f7fe ff88 	bl	80019e8 <HAL_GetTick>
 8002ad8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002adc:	f7fe ff84 	bl	80019e8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e211      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002aee:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x974>
 8002afa:	e018      	b.n	8002b2e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b08:	f7fe ff6e 	bl	80019e8 <HAL_GetTick>
 8002b0c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002b10:	f7fe ff6a 	bl	80019e8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1f7      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d07f      	beq.n	8002c3a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d062      	beq.n	8002c08 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b4c:	6093      	str	r3, [r2, #8]
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	4910      	ldr	r1, [pc, #64]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002b68:	d309      	bcc.n	8002b7e <HAL_RCC_OscConfig+0xa16>
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 021f 	bic.w	r2, r3, #31
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4909      	ldr	r1, [pc, #36]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
 8002b7c:	e02a      	b.n	8002bd4 <HAL_RCC_OscConfig+0xa6c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	da0c      	bge.n	8002ba0 <HAL_RCC_OscConfig+0xa38>
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	015b      	lsls	r3, r3, #5
 8002b94:	4901      	ldr	r1, [pc, #4]	; (8002b9c <HAL_RCC_OscConfig+0xa34>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60cb      	str	r3, [r1, #12]
 8002b9a:	e01b      	b.n	8002bd4 <HAL_RCC_OscConfig+0xa6c>
 8002b9c:	46020c00 	.word	0x46020c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d30a      	bcc.n	8002bc0 <HAL_RCC_OscConfig+0xa58>
 8002baa:	4ba1      	ldr	r3, [pc, #644]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	029b      	lsls	r3, r3, #10
 8002bb8:	499d      	ldr	r1, [pc, #628]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60cb      	str	r3, [r1, #12]
 8002bbe:	e009      	b.n	8002bd4 <HAL_RCC_OscConfig+0xa6c>
 8002bc0:	4b9b      	ldr	r3, [pc, #620]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	03db      	lsls	r3, r3, #15
 8002bce:	4998      	ldr	r1, [pc, #608]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002bd4:	4b96      	ldr	r3, [pc, #600]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a95      	ldr	r2, [pc, #596]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002bda:	f043 0310 	orr.w	r3, r3, #16
 8002bde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002be0:	f7fe ff02 	bl	80019e8 <HAL_GetTick>
 8002be4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002be8:	f7fe fefe 	bl	80019e8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e18b      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002bfa:	4b8d      	ldr	r3, [pc, #564]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xa80>
 8002c06:	e018      	b.n	8002c3a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002c08:	4b89      	ldr	r3, [pc, #548]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a88      	ldr	r2, [pc, #544]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002c0e:	f023 0310 	bic.w	r3, r3, #16
 8002c12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c14:	f7fe fee8 	bl	80019e8 <HAL_GetTick>
 8002c18:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002c1c:	f7fe fee4 	bl	80019e8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e171      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002c2e:	4b80      	ldr	r3, [pc, #512]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8166 	beq.w	8002f10 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4a:	4b79      	ldr	r3, [pc, #484]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	f000 80f2 	beq.w	8002e3c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	f040 80c5 	bne.w	8002dec <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b73      	ldr	r3, [pc, #460]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a72      	ldr	r2, [pc, #456]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c6e:	f7fe febb 	bl	80019e8 <HAL_GetTick>
 8002c72:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7fe feb7 	bl	80019e8 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e144      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002c88:	4b69      	ldr	r3, [pc, #420]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d111      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca8:	4a61      	ldr	r2, [pc, #388]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002cb2:	4b5f      	ldr	r3, [pc, #380]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002cc6:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <HAL_RCC_OscConfig+0xccc>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002cda:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <HAL_RCC_OscConfig+0xccc>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4a55      	ldr	r2, [pc, #340]	; (8002e34 <HAL_RCC_OscConfig+0xccc>)
 8002ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002ce6:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cee:	f023 0303 	bic.w	r3, r3, #3
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cfa:	3a01      	subs	r2, #1
 8002cfc:	0212      	lsls	r2, r2, #8
 8002cfe:	4311      	orrs	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d04:	430a      	orrs	r2, r1
 8002d06:	494a      	ldr	r1, [pc, #296]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	628b      	str	r3, [r1, #40]	; 0x28
 8002d0c:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d10:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <HAL_RCC_OscConfig+0xcd0>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d22:	3a01      	subs	r2, #1
 8002d24:	0252      	lsls	r2, r2, #9
 8002d26:	b292      	uxth	r2, r2
 8002d28:	4311      	orrs	r1, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d2e:	3a01      	subs	r2, #1
 8002d30:	0412      	lsls	r2, r2, #16
 8002d32:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0612      	lsls	r2, r2, #24
 8002d40:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002d44:	430a      	orrs	r2, r1
 8002d46:	493a      	ldr	r1, [pc, #232]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002d4c:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d52:	f023 0310 	bic.w	r3, r3, #16
 8002d56:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d68:	f043 0310 	orr.w	r3, r3, #16
 8002d6c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002d6e:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	f023 020c 	bic.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	492d      	ldr	r1, [pc, #180]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002d80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002d88:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0xccc>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a29      	ldr	r2, [pc, #164]	; (8002e34 <HAL_RCC_OscConfig+0xccc>)
 8002d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d92:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002d94:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da2:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002dc4:	f7fe fe10 	bl	80019e8 <HAL_GetTick>
 8002dc8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fe0c 	bl	80019e8 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e099      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0xc64>
 8002dea:	e091      	b.n	8002f10 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002df8:	f7fe fdf6 	bl	80019e8 <HAL_GetTick>
 8002dfc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fdf2 	bl	80019e8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <HAL_RCC_OscConfig+0xcc8>)
 8002e24:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002e28:	f023 0303 	bic.w	r3, r3, #3
 8002e2c:	6293      	str	r3, [r2, #40]	; 0x28
 8002e2e:	e06f      	b.n	8002f10 <HAL_RCC_OscConfig+0xda8>
 8002e30:	46020c00 	.word	0x46020c00
 8002e34:	46020800 	.word	0x46020800
 8002e38:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002e3c:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <HAL_RCC_OscConfig+0xdb4>)
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCC_OscConfig+0xdb4>)
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d039      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0203 	and.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d132      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d129      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d122      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e88:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d11a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	0a5b      	lsrs	r3, r3, #9
 8002e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	0c1b      	lsrs	r3, r3, #16
 8002ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d108      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	0e1b      	lsrs	r3, r3, #24
 8002eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e024      	b.n	8002f12 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_RCC_OscConfig+0xdb4>)
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d01a      	beq.n	8002f10 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_RCC_OscConfig+0xdb4>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	4a0f      	ldr	r2, [pc, #60]	; (8002f1c <HAL_RCC_OscConfig+0xdb4>)
 8002ee0:	f023 0310 	bic.w	r3, r3, #16
 8002ee4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fd7f 	bl	80019e8 <HAL_GetTick>
 8002eea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002eec:	bf00      	nop
 8002eee:	f7fe fd7b 	bl	80019e8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d0f9      	beq.n	8002eee <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_RCC_OscConfig+0xdb4>)
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_OscConfig+0xdb4>)
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_RCC_OscConfig+0xdb4>)
 8002f0a:	f043 0310 	orr.w	r3, r3, #16
 8002f0e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3738      	adds	r7, #56	; 0x38
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	46020c00 	.word	0x46020c00

08002f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e1d9      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f34:	4b9b      	ldr	r3, [pc, #620]	; (80031a4 <HAL_RCC_ClockConfig+0x284>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d910      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b98      	ldr	r3, [pc, #608]	; (80031a4 <HAL_RCC_ClockConfig+0x284>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 020f 	bic.w	r2, r3, #15
 8002f4a:	4996      	ldr	r1, [pc, #600]	; (80031a4 <HAL_RCC_ClockConfig+0x284>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <HAL_RCC_ClockConfig+0x284>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e1c1      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	4b8c      	ldr	r3, [pc, #560]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d908      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002f80:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	4986      	ldr	r1, [pc, #536]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	4b81      	ldr	r3, [pc, #516]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d909      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002fb0:	4b7d      	ldr	r3, [pc, #500]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	497a      	ldr	r1, [pc, #488]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	4b74      	ldr	r3, [pc, #464]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d908      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4b71      	ldr	r3, [pc, #452]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	496e      	ldr	r1, [pc, #440]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	4b69      	ldr	r3, [pc, #420]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	429a      	cmp	r2, r3
 800300c:	d908      	bls.n	8003020 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800300e:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 020f 	bic.w	r2, r3, #15
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4963      	ldr	r1, [pc, #396]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 800301c:	4313      	orrs	r3, r2
 800301e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80d2 	beq.w	80031d2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d143      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 800303c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d110      	bne.n	800306a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003048:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 800304a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304e:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800306a:	f7fe fcbd 	bl	80019e8 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003070:	4b4e      	ldr	r3, [pc, #312]	; (80031ac <HAL_RCC_ClockConfig+0x28c>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00f      	beq.n	800309c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800307e:	f7fe fcb3 	bl	80019e8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e12b      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003090:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_RCC_ClockConfig+0x28c>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a8:	4a3f      	ldr	r2, [pc, #252]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d121      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e112      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e106      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0fa      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f2:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0f2      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4926      	ldr	r1, [pc, #152]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8003110:	4313      	orrs	r3, r2
 8003112:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003114:	f7fe fc68 	bl	80019e8 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d112      	bne.n	8003148 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe fc60 	bl	80019e8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0d6      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d1ee      	bne.n	8003124 <HAL_RCC_ClockConfig+0x204>
 8003146:	e044      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d112      	bne.n	8003176 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003152:	f7fe fc49 	bl	80019e8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e0bf      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d1ee      	bne.n	8003152 <HAL_RCC_ClockConfig+0x232>
 8003174:	e02d      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d123      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fe fc32 	bl	80019e8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0a8      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <HAL_RCC_ClockConfig+0x288>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ee      	bne.n	8003180 <HAL_RCC_ClockConfig+0x260>
 80031a2:	e016      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2b2>
 80031a4:	40022000 	.word	0x40022000
 80031a8:	46020c00 	.word	0x46020c00
 80031ac:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fe fc1a 	bl	80019e8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e090      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d1ee      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d208      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80031ee:	4b40      	ldr	r3, [pc, #256]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f023 020f 	bic.w	r2, r3, #15
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	493d      	ldr	r1, [pc, #244]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <HAL_RCC_ClockConfig+0x3d4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d210      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_ClockConfig+0x3d4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	4937      	ldr	r1, [pc, #220]	; (80032f4 <HAL_RCC_ClockConfig+0x3d4>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <HAL_RCC_ClockConfig+0x3d4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e05b      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003248:	429a      	cmp	r2, r3
 800324a:	d208      	bcs.n	800325e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4925      	ldr	r1, [pc, #148]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003278:	429a      	cmp	r2, r3
 800327a:	d209      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	4919      	ldr	r1, [pc, #100]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d208      	bcs.n	80032be <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	490d      	ldr	r1, [pc, #52]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_RCC_ClockConfig+0x3d0>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	490a      	ldr	r1, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x3d8>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x3dc>)
 80032d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x3e0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fb39 	bl	8001954 <HAL_InitTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73fb      	strb	r3, [r7, #15]

  return status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	46020c00 	.word	0x46020c00
 80032f4:	40022000 	.word	0x40022000
 80032f8:	08006dbc 	.word	0x08006dbc
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4b78      	ldr	r3, [pc, #480]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800331c:	4b75      	ldr	r3, [pc, #468]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d121      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d11e      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003338:	4b6e      	ldr	r3, [pc, #440]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003344:	4b6b      	ldr	r3, [pc, #428]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800334a:	0b1b      	lsrs	r3, r3, #12
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
 8003352:	e005      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003354:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	0f1b      	lsrs	r3, r3, #28
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003360:	4a65      	ldr	r2, [pc, #404]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d110      	bne.n	8003392 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003374:	e00d      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003376:	4b5f      	ldr	r3, [pc, #380]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b04      	cmp	r3, #4
 8003380:	d102      	bne.n	8003388 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003382:	4b5e      	ldr	r3, [pc, #376]	; (80034fc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003384:	623b      	str	r3, [r7, #32]
 8003386:	e004      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b08      	cmp	r3, #8
 800338c:	d101      	bne.n	8003392 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800338e:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003390:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	f040 80a5 	bne.w	80034e4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80033a4:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80033b2:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80033be:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	08db      	lsrs	r3, r3, #3
 80033c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d003      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xe4>
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d022      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x128>
 80033e6:	e043      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003500 <HAL_RCC_GetSysClockFreq+0x1fc>
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800340a:	ed97 6a01 	vldr	s12, [r7, #4]
 800340e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8003504 <HAL_RCC_GetSysClockFreq+0x200>
 8003412:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003416:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800341a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800342a:	e046      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003500 <HAL_RCC_GetSysClockFreq+0x1fc>
 800343a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800344e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003452:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8003504 <HAL_RCC_GetSysClockFreq+0x200>
 8003456:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800345e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800346e:	e024      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003484:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800348a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003498:	ed97 6a01 	vldr	s12, [r7, #4]
 800349c:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003504 <HAL_RCC_GetSysClockFreq+0x200>
 80034a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034b8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	0e1b      	lsrs	r3, r3, #24
 80034c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034c4:	3301      	adds	r3, #1
 80034c6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80034d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034de:	ee17 3a90 	vmov	r3, s15
 80034e2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	372c      	adds	r7, #44	; 0x2c
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	46020c00 	.word	0x46020c00
 80034f8:	08006dd4 	.word	0x08006dd4
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	4b742400 	.word	0x4b742400
 8003504:	46000000 	.word	0x46000000

08003508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800350c:	f7ff fefa 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCC_GetHCLKFreq+0x28>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	4906      	ldr	r1, [pc, #24]	; (8003534 <HAL_RCC_GetHCLKFreq+0x2c>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a05      	ldr	r2, [pc, #20]	; (8003538 <HAL_RCC_GetHCLKFreq+0x30>)
 8003524:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <HAL_RCC_GetHCLKFreq+0x30>)
 8003528:	681b      	ldr	r3, [r3, #0]
}
 800352a:	4618      	mov	r0, r3
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	46020c00 	.word	0x46020c00
 8003534:	08006dbc 	.word	0x08006dbc
 8003538:	20000000 	.word	0x20000000

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003540:	f7ff ffe2 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	46020c00 	.word	0x46020c00
 8003560:	08006dcc 	.word	0x08006dcc

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003568:	f7ff ffce 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	46020c00 	.word	0x46020c00
 8003588:	08006dcc 	.word	0x08006dcc

0800358c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003590:	f7ff ffba 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetPCLK3Freq+0x20>)
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	46020c00 	.word	0x46020c00
 80035b0:	08006dcc 	.word	0x08006dcc

080035b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035bc:	4b3e      	ldr	r3, [pc, #248]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035ca:	f7fe fdbf 	bl	800214c <HAL_PWREx_GetVoltageRange>
 80035ce:	6178      	str	r0, [r7, #20]
 80035d0:	e019      	b.n	8003606 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d8:	4a37      	ldr	r2, [pc, #220]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80035e2:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035f0:	f7fe fdac 	bl	800214c <HAL_PWREx_GetVoltageRange>
 80035f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fc:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035fe:	f023 0304 	bic.w	r3, r3, #4
 8003602:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800360c:	d003      	beq.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003614:	d109      	bne.n	800362a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800361c:	d202      	bcs.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800361e:	2301      	movs	r3, #1
 8003620:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003622:	e033      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003628:	e030      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003630:	d208      	bcs.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d102      	bne.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800363a:	2303      	movs	r3, #3
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	e025      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e035      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364a:	d90f      	bls.n	800366c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003658:	d902      	bls.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e015      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003660:	2301      	movs	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e012      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e00f      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003672:	d109      	bne.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d102      	bne.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800367c:	2301      	movs	r3, #1
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e004      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003682:	2302      	movs	r3, #2
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e001      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003688:	2301      	movs	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 020f 	bic.w	r2, r3, #15
 8003694:	4909      	ldr	r1, [pc, #36]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d001      	beq.n	80036ae <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	46020c00 	.word	0x46020c00
 80036bc:	40022000 	.word	0x40022000

080036c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80036c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c4:	b0b4      	sub	sp, #208	; 0xd0
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f002 0401 	and.w	r4, r2, #1
 80036e4:	2500      	movs	r5, #0
 80036e6:	ea54 0305 	orrs.w	r3, r4, r5
 80036ea:	d00b      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80036ec:	4bc4      	ldr	r3, [pc, #784]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80036ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f2:	f023 0103 	bic.w	r1, r3, #3
 80036f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	4ac0      	ldr	r2, [pc, #768]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80036fe:	430b      	orrs	r3, r1
 8003700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f002 0804 	and.w	r8, r2, #4
 8003710:	f04f 0900 	mov.w	r9, #0
 8003714:	ea58 0309 	orrs.w	r3, r8, r9
 8003718:	d00b      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800371a:	4bb9      	ldr	r3, [pc, #740]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800371c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003720:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	4ab5      	ldr	r2, [pc, #724]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800372c:	430b      	orrs	r3, r1
 800372e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f002 0a08 	and.w	sl, r2, #8
 800373e:	f04f 0b00 	mov.w	fp, #0
 8003742:	ea5a 030b 	orrs.w	r3, sl, fp
 8003746:	d00b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003748:	4bad      	ldr	r3, [pc, #692]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800374a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800374e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4aa9      	ldr	r2, [pc, #676]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800375a:	430b      	orrs	r3, r1
 800375c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f002 0310 	and.w	r3, r2, #16
 800376c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003776:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d00b      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003780:	4b9f      	ldr	r3, [pc, #636]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003786:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800378a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	4a9b      	ldr	r2, [pc, #620]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003792:	430b      	orrs	r3, r1
 8003794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f002 0320 	and.w	r3, r2, #32
 80037a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037b2:	460b      	mov	r3, r1
 80037b4:	4313      	orrs	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80037b8:	4b91      	ldr	r3, [pc, #580]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037be:	f023 0107 	bic.w	r1, r3, #7
 80037c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	4a8d      	ldr	r2, [pc, #564]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80037dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80037e6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d00b      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80037f0:	4b83      	ldr	r3, [pc, #524]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80037f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80037fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003800:	4a7f      	ldr	r2, [pc, #508]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003802:	430b      	orrs	r3, r1
 8003804:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800381e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003822:	460b      	mov	r3, r1
 8003824:	4313      	orrs	r3, r2
 8003826:	d00b      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003828:	4b75      	ldr	r3, [pc, #468]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800382a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800382e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003832:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003838:	4a71      	ldr	r2, [pc, #452]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800383a:	430b      	orrs	r3, r1
 800383c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800384c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003856:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800385a:	460b      	mov	r3, r1
 800385c:	4313      	orrs	r3, r2
 800385e:	d00b      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003860:	4b67      	ldr	r3, [pc, #412]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003866:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800386a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800386e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003870:	4a63      	ldr	r2, [pc, #396]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003872:	430b      	orrs	r3, r1
 8003874:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003878:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800388e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003892:	460b      	mov	r3, r1
 8003894:	4313      	orrs	r3, r2
 8003896:	d00b      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003898:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800389a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800389e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80038a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4a55      	ldr	r2, [pc, #340]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038aa:	430b      	orrs	r3, r1
 80038ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80038bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80038d0:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80038da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	4a47      	ldr	r2, [pc, #284]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80038f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038f6:	2300      	movs	r3, #0
 80038f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80038fe:	460b      	mov	r3, r1
 8003900:	4313      	orrs	r3, r2
 8003902:	d00b      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003904:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800390a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800390e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003914:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003916:	430b      	orrs	r3, r1
 8003918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800391c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003928:	673b      	str	r3, [r7, #112]	; 0x70
 800392a:	2300      	movs	r3, #0
 800392c:	677b      	str	r3, [r7, #116]	; 0x74
 800392e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003932:	460b      	mov	r3, r1
 8003934:	4313      	orrs	r3, r2
 8003936:	d00b      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800393a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800393e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003948:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800394a:	430b      	orrs	r3, r1
 800394c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003950:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800395c:	66bb      	str	r3, [r7, #104]	; 0x68
 800395e:	2300      	movs	r3, #0
 8003960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003962:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d04f      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800396c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003974:	2b80      	cmp	r3, #128	; 0x80
 8003976:	d02d      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d827      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800397c:	2b60      	cmp	r3, #96	; 0x60
 800397e:	d02b      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003980:	2b60      	cmp	r3, #96	; 0x60
 8003982:	d823      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d006      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	d81f      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d011      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003994:	e01a      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003996:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039a2:	e01a      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039a8:	3308      	adds	r3, #8
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 f8cc 	bl	8005b48 <RCCEx_PLL2_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039b6:	e010      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x31a>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039bc:	332c      	adds	r3, #44	; 0x2c
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 f95a 	bl	8005c78 <RCCEx_PLL3_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039ca:	e006      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x31a>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 80039d2:	e002      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x31a>
        break;
 80039d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039da:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d110      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80039e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80039e8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80039ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f4:	4a02      	ldr	r2, [pc, #8]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80039fe:	bf00      	nop
 8003a00:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003a08:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a18:	663b      	str	r3, [r7, #96]	; 0x60
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a1e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d046      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003a28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a30:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003a34:	d028      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003a36:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003a3a:	d821      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a40:	d022      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a46:	d81b      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a4c:	d01c      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a52:	d815      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a58:	d008      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5e:	d80f      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d011      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a68:	d00e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003a6a:	e009      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a70:	3308      	adds	r3, #8
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 f868 	bl	8005b48 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003a7e:	e004      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        break;
 8003a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10d      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a92:	4bb6      	ldr	r3, [pc, #728]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa4:	4ab1      	ldr	r2, [pc, #708]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003aac:	e003      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003ab2:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003ab6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003ac2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003acc:	460b      	mov	r3, r1
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	d03e      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003ad2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d81d      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b23 	.word	0x08003b23
 8003ae8:	08003af9 	.word	0x08003af9
 8003aec:	08003b07 	.word	0x08003b07
 8003af0:	08003b23 	.word	0x08003b23
 8003af4:	08003b23 	.word	0x08003b23
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003af8:	4b9c      	ldr	r3, [pc, #624]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	4a9b      	ldr	r2, [pc, #620]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b02:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003b04:	e00e      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b0a:	332c      	adds	r3, #44	; 0x2c
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f002 f8b3 	bl	8005c78 <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003b18:	e004      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x464>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x464>
        break;
 8003b22:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003b24:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003b2c:	4b8f      	ldr	r3, [pc, #572]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003b2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b32:	f023 0107 	bic.w	r1, r3, #7
 8003b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3e:	4a8b      	ldr	r2, [pc, #556]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x490>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003b4c:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003b50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b5e:	2300      	movs	r3, #0
 8003b60:	657b      	str	r3, [r7, #84]	; 0x54
 8003b62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d04a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b78:	d028      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003b7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b7e:	d821      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b84:	d024      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003b86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b8a:	d81b      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b90:	d00e      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b96:	d815      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01b      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d110      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ba2:	4b72      	ldr	r3, [pc, #456]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	4a71      	ldr	r2, [pc, #452]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003bae:	e012      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bb4:	332c      	adds	r3, #44	; 0x2c
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f002 f85e 	bl	8005c78 <RCCEx_PLL3_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003bca:	e004      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8003bcc:	bf00      	nop
 8003bce:	e002      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8003bd0:	bf00      	nop
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x516>
        break;
 8003bd4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003bd6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10d      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x53a>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	4a5e      	ldr	r2, [pc, #376]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bf8:	e003      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x542>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003bfe:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c10:	2300      	movs	r3, #0
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f000 80ba 	beq.w	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c26:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d113      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c34:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3a:	4a4c      	ldr	r2, [pc, #304]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c44:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
      pwrclkchanged = SET;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c5c:	4b44      	ldr	r3, [pc, #272]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	4a43      	ldr	r2, [pc, #268]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c68:	f7fd febe 	bl	80019e8 <HAL_GetTick>
 8003c6c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c70:	e00b      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c72:	f7fd feb9 	bl	80019e8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d903      	bls.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      {
        ret = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003c88:	e005      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0ed      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      }
    }

    if (ret == HAL_OK)
 8003c96:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d16a      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003cac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d023      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8003cb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003cb8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d01b      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x63c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd2:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cd8:	4a24      	ldr	r2, [pc, #144]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce2:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ce8:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf2:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003cf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cf8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d019      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x67c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd fe6e 	bl	80019e8 <HAL_GetTick>
 8003d0c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d10:	e00d      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fd fe69 	bl	80019e8 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d1c:	1ad2      	subs	r2, r2, r3
 8003d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d903      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
            break;
 8003d2c:	e006      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x67c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ea      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if (ret == HAL_OK)
 8003d3c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d5e:	e00d      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d60:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003d64:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8003d68:	e008      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003d6a:	bf00      	nop
 8003d6c:	46020c00 	.word	0x46020c00
 8003d70:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003d78:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d7c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d84:	4bc0      	ldr	r3, [pc, #768]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8a:	4abf      	ldr	r2, [pc, #764]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003d94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
 8003da2:	2300      	movs	r3, #0
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
 8003da6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003daa:	460b      	mov	r3, r1
 8003dac:	4313      	orrs	r3, r2
 8003dae:	d042      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x776>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003db0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dbc:	d022      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8003dbe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003dc2:	d81b      	bhi.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8003dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc8:	d011      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8003dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dce:	d815      	bhi.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x73c>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d019      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003dd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd8:	d110      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dde:	3308      	adds	r3, #8
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 feb1 	bl	8005b48 <RCCEx_PLL2_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003dec:	e00d      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dee:	4ba6      	ldr	r3, [pc, #664]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	4aa5      	ldr	r2, [pc, #660]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003dfa:	e006      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003e02:	e002      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x74a>
        break;
 8003e08:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e0a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10d      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x76e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003e12:	4b9d      	ldr	r3, [pc, #628]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e18:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e24:	4a98      	ldr	r2, [pc, #608]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x776>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003e32:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e44:	2300      	movs	r3, #0
 8003e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e48:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	d02d      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003e52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	d00b      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e64:	d804      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d007      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8003e76:	e004      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
        break;
 8003e80:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e82:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10d      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9c:	4a7a      	ldr	r2, [pc, #488]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003eaa:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003eba:	633b      	str	r3, [r7, #48]	; 0x30
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d019      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x83e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003eca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x824>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ed8:	4b6b      	ldr	r3, [pc, #428]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	4a6a      	ldr	r2, [pc, #424]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee2:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003ee4:	4b68      	ldr	r3, [pc, #416]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003ee6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003eea:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003eee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef6:	4a64      	ldr	r2, [pc, #400]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003efe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003f1a:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f2c:	4956      	ldr	r1, [pc, #344]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
 8003f46:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d00c      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003f50:	4b4d      	ldr	r3, [pc, #308]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f62:	4949      	ldr	r1, [pc, #292]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f80:	460b      	mov	r3, r1
 8003f82:	4313      	orrs	r3, r2
 8003f84:	d00c      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003f86:	4b40      	ldr	r3, [pc, #256]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f8c:	f023 0218 	bic.w	r2, r3, #24
 8003f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f98:	493b      	ldr	r1, [pc, #236]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	d032      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x962>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003fbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc8:	d105      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x916>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fca:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	4a2e      	ldr	r2, [pc, #184]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003fd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fe2:	d108      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x936>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fe8:	3308      	adds	r3, #8
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 fdac 	bl	8005b48 <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }
    if (ret == HAL_OK)
 8003ff6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10d      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x95a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003ffe:	4b22      	ldr	r3, [pc, #136]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004000:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004008:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800400c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004010:	491d      	ldr	r1, [pc, #116]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x962>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800401e:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004038:	460b      	mov	r3, r1
 800403a:	4313      	orrs	r3, r2
 800403c:	d03d      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800403e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800404a:	d00e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800404c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004050:	d815      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004056:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800405a:	d110      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x9be>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004066:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004068:	e011      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800406a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800406e:	3308      	adds	r3, #8
 8004070:	4618      	mov	r0, r3
 8004072:	f001 fd69 	bl	8005b48 <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800407c:	e007      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x9ce>
      default:
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
        break;
 8004084:	e003      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8004086:	bf00      	nop
 8004088:	46020c00 	.word	0x46020c00
        break;
 800408c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800408e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004096:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8004098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a8:	4915      	ldr	r1, [pc, #84]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80040b6:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80040ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	2300      	movs	r3, #0
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040d0:	460b      	mov	r3, r1
 80040d2:	4313      	orrs	r3, r2
 80040d4:	d00c      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80040d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040dc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80040e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040e8:	4905      	ldr	r1, [pc, #20]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80040f0:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	37d0      	adds	r7, #208	; 0xd0
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	46020c00 	.word	0x46020c00

08004104 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800410c:	4ba6      	ldr	r3, [pc, #664]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004114:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004116:	4ba4      	ldr	r3, [pc, #656]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004120:	4ba1      	ldr	r3, [pc, #644]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	3301      	adds	r3, #1
 800412c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800412e:	4b9e      	ldr	r3, [pc, #632]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800413a:	4b9b      	ldr	r3, [pc, #620]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	08db      	lsrs	r3, r3, #3
 8004140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d062      	beq.n	8004222 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b03      	cmp	r3, #3
 8004160:	f200 8081 	bhi.w	8004266 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d024      	beq.n	80041b4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d17a      	bne.n	8004266 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800417e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004182:	4b89      	ldr	r3, [pc, #548]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004192:	ed97 6a02 	vldr	s12, [r7, #8]
 8004196:	eddf 5a86 	vldr	s11, [pc, #536]	; 80043b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800419a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800419e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041b2:	e08f      	b.n	80042d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80041b4:	4b7c      	ldr	r3, [pc, #496]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80041c0:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	0f1b      	lsrs	r3, r3, #28
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	e006      	b.n	80041da <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80041cc:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	0f1b      	lsrs	r3, r3, #28
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	4a76      	ldr	r2, [pc, #472]	; (80043b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80041dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004200:	ed97 6a02 	vldr	s12, [r7, #8]
 8004204:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80043b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004210:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004214:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004220:	e058      	b.n	80042d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004234:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423c:	ee07 3a90 	vmov	s15, r3
 8004240:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004244:	ed97 6a02 	vldr	s12, [r7, #8]
 8004248:	eddf 5a59 	vldr	s11, [pc, #356]	; 80043b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800424c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004250:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004254:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004258:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800425c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004260:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004264:	e036      	b.n	80042d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004266:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8004272:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0f1b      	lsrs	r3, r3, #28
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	e006      	b.n	800428c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800427e:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	0f1b      	lsrs	r3, r3, #28
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	4a49      	ldr	r2, [pc, #292]	; (80043b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800428e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	ee07 3a90 	vmov	s15, r3
 80042a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042b6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80043b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80042ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80042ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042d2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80042d4:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d017      	beq.n	8004310 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80042e0:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	0a5b      	lsrs	r3, r3, #9
 80042e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80042f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80042fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80042fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 2a90 	vmov	r2, s15
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004322:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004338:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800433c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004348:	ee17 2a90 	vmov	r2, s15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	e002      	b.n	8004358 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d017      	beq.n	8004394 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800437a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800437e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438a:	ee17 2a90 	vmov	r2, s15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004392:	e002      	b.n	800439a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
}
 800439a:	bf00      	nop
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	46020c00 	.word	0x46020c00
 80043ac:	4b742400 	.word	0x4b742400
 80043b0:	46000000 	.word	0x46000000
 80043b4:	08006dd4 	.word	0x08006dd4

080043b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b089      	sub	sp, #36	; 0x24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80043c0:	4ba6      	ldr	r3, [pc, #664]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80043ca:	4ba4      	ldr	r3, [pc, #656]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80043d4:	4ba1      	ldr	r3, [pc, #644]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	0a1b      	lsrs	r3, r3, #8
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	3301      	adds	r3, #1
 80043e0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80043e2:	4b9e      	ldr	r3, [pc, #632]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80043ee:	4b9b      	ldr	r3, [pc, #620]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	08db      	lsrs	r3, r3, #3
 80043f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d062      	beq.n	80044d6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b03      	cmp	r3, #3
 8004414:	f200 8081 	bhi.w	800451a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d024      	beq.n	8004468 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d17a      	bne.n	800451a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004436:	4b89      	ldr	r3, [pc, #548]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004446:	ed97 6a02 	vldr	s12, [r7, #8]
 800444a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800444e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004452:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800445a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800445e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004466:	e08f      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004468:	4b7c      	ldr	r3, [pc, #496]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004474:	4b79      	ldr	r3, [pc, #484]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	0f1b      	lsrs	r3, r3, #28
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	e006      	b.n	800448e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004480:	4b76      	ldr	r3, [pc, #472]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	0f1b      	lsrs	r3, r3, #28
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	4a76      	ldr	r2, [pc, #472]	; (8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80044bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80044cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044d4:	e058      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	ee07 3a90 	vmov	s15, r3
 80044dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80044e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e8:	4b5c      	ldr	r3, [pc, #368]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80044f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80044fc:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004500:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004504:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004508:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004514:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004518:	e036      	b.n	8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800451a:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8004526:	4b4d      	ldr	r3, [pc, #308]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0f1b      	lsrs	r3, r3, #28
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8004532:	4b4a      	ldr	r3, [pc, #296]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	0f1b      	lsrs	r3, r3, #28
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	4a49      	ldr	r2, [pc, #292]	; (8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	ee07 3a90 	vmov	s15, r3
 8004554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a02 	vldr	s12, [r7, #8]
 800456a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004586:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004588:	4b34      	ldr	r3, [pc, #208]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d017      	beq.n	80045c4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004594:	4b31      	ldr	r3, [pc, #196]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	0a5b      	lsrs	r3, r3, #9
 800459a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80045a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ba:	ee17 2a90 	vmov	r2, s15
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e002      	b.n	80045ca <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d017      	beq.n	8004606 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045d6:	4b21      	ldr	r3, [pc, #132]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80045e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fc:	ee17 2a90 	vmov	r2, s15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	e002      	b.n	800460c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d017      	beq.n	8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004618:	4b10      	ldr	r3, [pc, #64]	; (800465c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800461a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461c:	0e1b      	lsrs	r3, r3, #24
 800461e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800462a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800462e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004632:	edd7 6a07 	vldr	s13, [r7, #28]
 8004636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463e:	ee17 2a90 	vmov	r2, s15
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004646:	e002      	b.n	800464e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
}
 800464e:	bf00      	nop
 8004650:	3724      	adds	r7, #36	; 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	46020c00 	.word	0x46020c00
 8004660:	4b742400 	.word	0x4b742400
 8004664:	46000000 	.word	0x46000000
 8004668:	08006dd4 	.word	0x08006dd4

0800466c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004674:	4ba6      	ldr	r3, [pc, #664]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800467e:	4ba4      	ldr	r3, [pc, #656]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004688:	4ba1      	ldr	r3, [pc, #644]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	3301      	adds	r3, #1
 8004694:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004696:	4b9e      	ldr	r3, [pc, #632]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80046a2:	4b9b      	ldr	r3, [pc, #620]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d062      	beq.n	800478a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	f200 8081 	bhi.w	80047ce <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d024      	beq.n	800471c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d17a      	bne.n	80047ce <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b89      	ldr	r3, [pc, #548]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80046fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046fe:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800470a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800471a:	e08f      	b.n	800483c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800471c:	4b7c      	ldr	r3, [pc, #496]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004728:	4b79      	ldr	r3, [pc, #484]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	0f1b      	lsrs	r3, r3, #28
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	e006      	b.n	8004742 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004734:	4b76      	ldr	r3, [pc, #472]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	0f1b      	lsrs	r3, r3, #28
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	4a76      	ldr	r2, [pc, #472]	; (800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	ee07 3a90 	vmov	s15, r3
 8004764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004768:	ed97 6a02 	vldr	s12, [r7, #8]
 800476c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004784:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004788:	e058      	b.n	800483c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004794:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479c:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80047ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80047b0:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80047b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80047bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047cc:	e036      	b.n	800483c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80047ce:	4b50      	ldr	r3, [pc, #320]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80047da:	4b4d      	ldr	r3, [pc, #308]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0f1b      	lsrs	r3, r3, #28
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	e006      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80047e6:	4b4a      	ldr	r3, [pc, #296]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	0f1b      	lsrs	r3, r3, #28
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	4a49      	ldr	r2, [pc, #292]	; (800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80047f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a02 	vldr	s12, [r7, #8]
 800481e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800483a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800483c:	4b34      	ldr	r3, [pc, #208]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d017      	beq.n	8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004848:	4b31      	ldr	r3, [pc, #196]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	0a5b      	lsrs	r3, r3, #9
 800484e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800485a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800485e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004862:	edd7 6a07 	vldr	s13, [r7, #28]
 8004866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486e:	ee17 2a90 	vmov	r2, s15
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e002      	b.n	800487e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d017      	beq.n	80048ba <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800488a:	4b21      	ldr	r3, [pc, #132]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800489c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b0:	ee17 2a90 	vmov	r2, s15
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d017      	beq.n	80048fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d0:	0e1b      	lsrs	r3, r3, #24
 80048d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80048de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f2:	ee17 2a90 	vmov	r2, s15
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048fa:	e002      	b.n	8004902 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
}
 8004902:	bf00      	nop
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	46020c00 	.word	0x46020c00
 8004914:	4b742400 	.word	0x4b742400
 8004918:	46000000 	.word	0x46000000
 800491c:	08006dd4 	.word	0x08006dd4

08004920 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08e      	sub	sp, #56	; 0x38
 8004924:	af00      	add	r7, sp, #0
 8004926:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800492a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800492e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004932:	430b      	orrs	r3, r1
 8004934:	d145      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004936:	4bac      	ldr	r3, [pc, #688]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800493c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004940:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004942:	4ba9      	ldr	r3, [pc, #676]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d108      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004956:	d104      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
 800495e:	f001 b8e3 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004962:	4ba1      	ldr	r3, [pc, #644]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004970:	d114      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004978:	d110      	bne.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800497a:	4b9b      	ldr	r3, [pc, #620]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800497c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004988:	d103      	bne.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800498a:	23fa      	movs	r3, #250	; 0xfa
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800498e:	f001 b8cb 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8004992:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004998:	f001 b8c6 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800499c:	4b92      	ldr	r3, [pc, #584]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049a8:	d107      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b0:	d103      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80049b2:	4b8e      	ldr	r3, [pc, #568]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049b4:	637b      	str	r3, [r7, #52]	; 0x34
 80049b6:	f001 b8b7 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
 80049be:	f001 b8b3 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80049c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80049ca:	430b      	orrs	r3, r1
 80049cc:	d151      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80049ce:	4b86      	ldr	r3, [pc, #536]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80049d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049d4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d035      	beq.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d841      	bhi.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d02a      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	2b60      	cmp	r3, #96	; 0x60
 80049f0:	d83b      	bhi.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d009      	beq.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d835      	bhi.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	d012      	beq.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004a0a:	e02e      	b.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fb77 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a1a:	f001 b885 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a1e:	f107 0318 	add.w	r3, r7, #24
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fcc8 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a2c:	f001 b87c 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fe19 	bl	800466c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a3e:	f001 b873 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a42:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a48:	f001 b86e 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a4c:	4b66      	ldr	r3, [pc, #408]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a58:	d103      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004a5a:	4b65      	ldr	r3, [pc, #404]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a5e:	f001 b863 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a66:	f001 b85f 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :
      {
        frequency = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a6e:	f001 b85b 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a76:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	d165      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004a7e:	4b5a      	ldr	r3, [pc, #360]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a84:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a90:	d034      	beq.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a98:	d853      	bhi.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa0:	d00b      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa8:	d84b      	bhi.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d016      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab6:	d009      	beq.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004ab8:	e043      	b.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fb20 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ac8:	f001 b82e 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004acc:	f107 0318 	add.w	r3, r7, #24
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fc71 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ada:	f001 b825 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004ade:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aea:	d103      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        {
          frequency = HSI48_VALUE;
 8004aec:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004af0:	f001 b81a 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004af8:	f001 b816 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004afc:	4b3a      	ldr	r3, [pc, #232]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d118      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b08:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 8004b14:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	0e1b      	lsrs	r3, r3, #24
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	e006      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004b20:	4b31      	ldr	r3, [pc, #196]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	4a32      	ldr	r2, [pc, #200]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b36:	f000 bff7 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b3e:	f000 bff3 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default :

        frequency = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b46:	f000 bfef 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4e:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004b52:	430b      	orrs	r3, r1
 8004b54:	f040 808a 	bne.w	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004b5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d16f      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b70:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004b74:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b7c:	d03e      	beq.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b84:	d85d      	bhi.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b94:	d855      	bhi.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d016      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8004ba4:	e04d      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff faaa 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004bb4:	f000 bfb8 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb8:	f107 0318 	add.w	r3, r7, #24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fbfb 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004bc6:	f000 bfaf 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	d103      	bne.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
          {
            frequency = HSI48_VALUE;
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004bdc:	f000 bfa4 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004be4:	f000 bfa0 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004be8:	46020c00 	.word	0x46020c00
 8004bec:	0007a120 	.word	0x0007a120
 8004bf0:	00f42400 	.word	0x00f42400
 8004bf4:	02dc6c00 	.word	0x02dc6c00
 8004bf8:	08006dd4 	.word	0x08006dd4
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004bfc:	4bab      	ldr	r3, [pc, #684]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d118      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c08:	4ba8      	ldr	r3, [pc, #672]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8004c14:	4ba5      	ldr	r3, [pc, #660]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	e006      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004c20:	4ba2      	ldr	r3, [pc, #648]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	4aa0      	ldr	r2, [pc, #640]	; (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004c36:	f000 bf77 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
            frequency = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004c3e:	f000 bf73 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
        default :
        {
          frequency = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004c46:	f000 bf6f 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c50:	d108      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fa54 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c60:	f000 bf62 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else
    {
      frequency = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
 8004c68:	f000 bf5e 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c70:	1e51      	subs	r1, r2, #1
 8004c72:	430b      	orrs	r3, r1
 8004c74:	d136      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004c76:	4b8d      	ldr	r3, [pc, #564]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fe fc6c 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004c8c:	6378      	str	r0, [r7, #52]	; 0x34
 8004c8e:	f000 bf4b 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d104      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c98:	f7fe fb34 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004c9c:	6378      	str	r0, [r7, #52]	; 0x34
 8004c9e:	f000 bf43 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004ca2:	4b82      	ldr	r3, [pc, #520]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cae:	d106      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d103      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
    {
      frequency = HSI_VALUE;
 8004cb6:	4b7f      	ldr	r3, [pc, #508]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	f000 bf35 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004cbe:	4b7b      	ldr	r3, [pc, #492]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d107      	bne.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d104      	bne.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
    {
      frequency = LSE_VALUE;
 8004cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	f000 bf26 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce0:	f000 bf22 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce8:	1f11      	subs	r1, r2, #4
 8004cea:	430b      	orrs	r3, r1
 8004cec:	d136      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004cee:	4b6f      	ldr	r3, [pc, #444]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cf8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d104      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7fe fc1c 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004d04:	6378      	str	r0, [r7, #52]	; 0x34
 8004d06:	f000 bf0f 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d104      	bne.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d10:	f7fe faf8 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004d14:	6378      	str	r0, [r7, #52]	; 0x34
 8004d16:	f000 bf07 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004d1a:	4b64      	ldr	r3, [pc, #400]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d26:	d106      	bne.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d103      	bne.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      frequency = HSI_VALUE;
 8004d2e:	4b61      	ldr	r3, [pc, #388]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
 8004d32:	f000 bef9 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004d36:	4b5d      	ldr	r3, [pc, #372]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d107      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2b30      	cmp	r3, #48	; 0x30
 8004d48:	d104      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
    {
      frequency = LSE_VALUE;
 8004d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d50:	f000 beea 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
 8004d58:	f000 bee6 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d60:	f1a2 0108 	sub.w	r1, r2, #8
 8004d64:	430b      	orrs	r3, r1
 8004d66:	d136      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004d68:	4b50      	ldr	r3, [pc, #320]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d7a:	f7fe fbdf 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004d7e:	6378      	str	r0, [r7, #52]	; 0x34
 8004d80:	f000 bed2 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d104      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d8a:	f7fe fabb 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004d8e:	6378      	str	r0, [r7, #52]	; 0x34
 8004d90:	f000 beca 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004d94:	4b45      	ldr	r3, [pc, #276]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da0:	d106      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b80      	cmp	r3, #128	; 0x80
 8004da6:	d103      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = HSI_VALUE;
 8004da8:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dac:	f000 bebc 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004db0:	4b3e      	ldr	r3, [pc, #248]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d107      	bne.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	2bc0      	cmp	r3, #192	; 0xc0
 8004dc2:	d104      	bne.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
    {
      frequency = LSE_VALUE;
 8004dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	f000 bead 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd2:	f000 bea9 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dda:	f1a2 0110 	sub.w	r1, r2, #16
 8004dde:	430b      	orrs	r3, r1
 8004de0:	d139      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004de2:	4b32      	ldr	r3, [pc, #200]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004df4:	f7fe fba2 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004df8:	6378      	str	r0, [r7, #52]	; 0x34
 8004dfa:	f000 be95 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e04:	d104      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e06:	f7fe fa7d 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004e0a:	6378      	str	r0, [r7, #52]	; 0x34
 8004e0c:	f000 be8c 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004e10:	4b26      	ldr	r3, [pc, #152]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d107      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e24:	d103      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HSI_VALUE;
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2a:	f000 be7d 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004e2e:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d108      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e42:	d104      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
    {
      frequency = LSE_VALUE;
 8004e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4a:	f000 be6d 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
 8004e52:	f000 be69 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5a:	f1a2 0120 	sub.w	r1, r2, #32
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	d15f      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004e62:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004e74:	f7fe fb8a 	bl	800358c <HAL_RCC_GetPCLK3Freq>
 8004e78:	6378      	str	r0, [r7, #52]	; 0x34
 8004e7a:	f000 be55 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d104      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e84:	f7fe fa3e 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004e88:	6378      	str	r0, [r7, #52]	; 0x34
 8004e8a:	f000 be4d 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9a:	d10d      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HSI_VALUE;
 8004ea2:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea6:	f000 be3f 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8004eaa:	bf00      	nop
 8004eac:	46020c00 	.word	0x46020c00
 8004eb0:	08006dd4 	.word	0x08006dd4
 8004eb4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004eb8:	4baf      	ldr	r3, [pc, #700]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d104      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = LSE_VALUE;
 8004ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed2:	f000 be29 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004ed6:	4ba8      	ldr	r3, [pc, #672]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d11b      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d118      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ee8:	4ba3      	ldr	r3, [pc, #652]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 8004ef4:	4ba0      	ldr	r3, [pc, #640]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	0e1b      	lsrs	r3, r3, #24
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	e006      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8004f00:	4b9d      	ldr	r3, [pc, #628]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	0e1b      	lsrs	r3, r3, #24
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	4a9b      	ldr	r2, [pc, #620]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8004f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
 8004f16:	f000 be07 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1e:	f000 be03 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f26:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	d16c      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004f2e:	4b92      	ldr	r3, [pc, #584]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f34:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004f38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f40:	d104      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f42:	f7fe f9df 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004f46:	6378      	str	r0, [r7, #52]	; 0x34
 8004f48:	f000 bdee 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d108      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f54:	f107 0318 	add.w	r3, r7, #24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fa2d 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
 8004f62:	f000 bde1 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004f6c:	f7fe facc 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8004f70:	6378      	str	r0, [r7, #52]	; 0x34
 8004f72:	f000 bdd9 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004f7c:	d122      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f7e:	4b7e      	ldr	r3, [pc, #504]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d118      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f8a:	4b7b      	ldr	r3, [pc, #492]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8004f96:	4b78      	ldr	r3, [pc, #480]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	0e1b      	lsrs	r3, r3, #24
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	e006      	b.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8004fa2:	4b75      	ldr	r3, [pc, #468]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	0e1b      	lsrs	r3, r3, #24
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	4a72      	ldr	r2, [pc, #456]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8004fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb8:	f000 bdb6 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc0:	f000 bdb2 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004fc4:	4b6c      	ldr	r3, [pc, #432]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fd8:	d103      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
    {
      frequency = HSE_VALUE;
 8004fda:	4b69      	ldr	r3, [pc, #420]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fde:	f000 bda3 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004fe2:	4b65      	ldr	r3, [pc, #404]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fee:	d107      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff6:	d103      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
    {
      frequency = HSI_VALUE;
 8004ff8:	4b61      	ldr	r3, [pc, #388]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffc:	f000 bd94 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
 8005004:	f000 bd90 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800500c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005010:	430b      	orrs	r3, r1
 8005012:	d158      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005014:	4b58      	ldr	r3, [pc, #352]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005016:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	2b04      	cmp	r3, #4
 8005024:	d84b      	bhi.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005065 	.word	0x08005065
 8005030:	08005041 	.word	0x08005041
 8005034:	08005053 	.word	0x08005053
 8005038:	0800506f 	.word	0x0800506f
 800503c:	08005079 	.word	0x08005079
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff f85d 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800504e:	f000 bd6b 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fb08 	bl	800466c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005060:	f000 bd62 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005064:	f7fe fa50 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8005068:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800506a:	f000 bd5d 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800506e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005074:	f000 bd58 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005078:	4b3f      	ldr	r3, [pc, #252]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b20      	cmp	r3, #32
 8005082:	d118      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005084:	4b3c      	ldr	r3, [pc, #240]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	0e1b      	lsrs	r3, r3, #24
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	e006      	b.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800509e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	4a34      	ldr	r2, [pc, #208]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 80050ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050b2:	f000 bd39 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050ba:	f000 bd35 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050c2:	f000 bd31 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80050c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ca:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80050ce:	430b      	orrs	r3, r1
 80050d0:	d16d      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80050d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050e4:	d036      	beq.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050ec:	d85b      	bhi.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050f4:	d029      	beq.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050fc:	d853      	bhi.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005104:	d013      	beq.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800510c:	d84b      	bhi.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511a:	d144      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800511c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe ffef 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800512a:	f000 bcfd 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fa9a 	bl	800466c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800513c:	f000 bcf4 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005140:	f7fe f9e2 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8005144:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005146:	f000 bcef 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800514a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005150:	f000 bcea 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005154:	4b08      	ldr	r3, [pc, #32]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b20      	cmp	r3, #32
 800515e:	d11e      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800516c:	4b02      	ldr	r3, [pc, #8]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	0e1b      	lsrs	r3, r3, #24
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	e00c      	b.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8005178:	46020c00 	.word	0x46020c00
 800517c:	08006dd4 	.word	0x08006dd4
 8005180:	00f42400 	.word	0x00f42400
 8005184:	4b9d      	ldr	r3, [pc, #628]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	0e1b      	lsrs	r3, r3, #24
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	4a9b      	ldr	r2, [pc, #620]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800519a:	f000 bcc5 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051a2:	f000 bcc1 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051aa:	f000 bcbd 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80051ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051b2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80051b6:	430b      	orrs	r3, r1
 80051b8:	d14c      	bne.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80051ba:	4b90      	ldr	r3, [pc, #576]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80051bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fe f9b6 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 80051d0:	6378      	str	r0, [r7, #52]	; 0x34
 80051d2:	f000 bca9 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051dc:	d104      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051de:	f7fe f891 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80051e2:	6378      	str	r0, [r7, #52]	; 0x34
 80051e4:	f000 bca0 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80051e8:	4b84      	ldr	r3, [pc, #528]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f4:	d107      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fc:	d103      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
    {
      frequency = HSI_VALUE;
 80051fe:	4b81      	ldr	r3, [pc, #516]	; (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
 8005202:	f000 bc91 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005206:	4b7d      	ldr	r3, [pc, #500]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b20      	cmp	r3, #32
 8005210:	d11c      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005218:	d118      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800521a:	4b78      	ldr	r3, [pc, #480]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
 8005226:	4b75      	ldr	r3, [pc, #468]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	0e1b      	lsrs	r3, r3, #24
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	e006      	b.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8005232:	4b72      	ldr	r3, [pc, #456]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	0e1b      	lsrs	r3, r3, #24
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	4a6f      	ldr	r2, [pc, #444]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
 8005248:	f000 bc6e 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	637b      	str	r3, [r7, #52]	; 0x34
 8005250:	f000 bc6a 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005258:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800525c:	430b      	orrs	r3, r1
 800525e:	d14c      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005260:	4b66      	ldr	r3, [pc, #408]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005266:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800526a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005272:	f7fe f963 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8005276:	6378      	str	r0, [r7, #52]	; 0x34
 8005278:	f000 bc56 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005282:	d104      	bne.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005284:	f7fe f83e 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8005288:	6378      	str	r0, [r7, #52]	; 0x34
 800528a:	f000 bc4d 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800528e:	4b5b      	ldr	r3, [pc, #364]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529a:	d107      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a2:	d103      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
    {
      frequency = HSI_VALUE;
 80052a4:	4b57      	ldr	r3, [pc, #348]	; (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
 80052a8:	f000 bc3e 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80052ac:	4b53      	ldr	r3, [pc, #332]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d11c      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052be:	d118      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052c0:	4b4e      	ldr	r3, [pc, #312]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80052cc:	4b4b      	ldr	r3, [pc, #300]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	0e1b      	lsrs	r3, r3, #24
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	e006      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80052d8:	4b48      	ldr	r3, [pc, #288]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80052da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	0e1b      	lsrs	r3, r3, #24
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	4a46      	ldr	r2, [pc, #280]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 80052e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
 80052ee:	f000 bc1b 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	f000 bc17 	b.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80052fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052fe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005302:	430b      	orrs	r3, r1
 8005304:	d151      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005306:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800530c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005310:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	2bc0      	cmp	r3, #192	; 0xc0
 8005316:	d024      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2bc0      	cmp	r3, #192	; 0xc0
 800531c:	d842      	bhi.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2b80      	cmp	r3, #128	; 0x80
 8005322:	d00d      	beq.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	2b80      	cmp	r3, #128	; 0x80
 8005328:	d83c      	bhi.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d011      	beq.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8005336:	e035      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005338:	f7fe f928 	bl	800358c <HAL_RCC_GetPCLK3Freq>
 800533c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800533e:	e3f3      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005340:	4b2e      	ldr	r3, [pc, #184]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534c:	d102      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
        {
          frequency = HSI_VALUE;
 800534e:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005352:	e3e9      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005358:	e3e6      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800535a:	f7fd ffd3 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 800535e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005360:	e3e2      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005362:	4b26      	ldr	r3, [pc, #152]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d117      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800536e:	4b23      	ldr	r3, [pc, #140]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
 800537a:	4b20      	ldr	r3, [pc, #128]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	0e1b      	lsrs	r3, r3, #24
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	0e1b      	lsrs	r3, r3, #24
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800539c:	e3c4      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053a2:	e3c1      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      default:
      {
        frequency = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053a8:	e3be      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80053aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ae:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80053b2:	430b      	orrs	r3, r1
 80053b4:	d14d      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80053b6:	4b11      	ldr	r3, [pc, #68]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80053b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fe f8b8 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 80053cc:	6378      	str	r0, [r7, #52]	; 0x34
 80053ce:	e3ab      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d6:	d103      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053d8:	f7fd ff94 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80053dc:	6378      	str	r0, [r7, #52]	; 0x34
 80053de:	e3a3      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ec:	d10c      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f4:	d108      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
    {
      frequency = HSI_VALUE;
 80053f6:	4b03      	ldr	r3, [pc, #12]	; (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>)
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
 80053fa:	e395      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80053fc:	46020c00 	.word	0x46020c00
 8005400:	08006dd4 	.word	0x08006dd4
 8005404:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005408:	4ba4      	ldr	r3, [pc, #656]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b20      	cmp	r3, #32
 8005412:	d11b      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800541a:	d117      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800541c:	4b9f      	ldr	r3, [pc, #636]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005428:	4b9c      	ldr	r3, [pc, #624]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	0e1b      	lsrs	r3, r3, #24
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	e006      	b.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8005434:	4b99      	ldr	r3, [pc, #612]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	0e1b      	lsrs	r3, r3, #24
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	4a97      	ldr	r2, [pc, #604]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 8005444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
 800544a:	e36d      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	637b      	str	r3, [r7, #52]	; 0x34
 8005450:	e36a      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005456:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800545a:	430b      	orrs	r3, r1
 800545c:	d164      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800545e:	4b8f      	ldr	r3, [pc, #572]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005468:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2b00      	cmp	r3, #0
 800546e:	d120      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005470:	4b8a      	ldr	r3, [pc, #552]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b20      	cmp	r3, #32
 800547a:	d117      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800547c:	4b87      	ldr	r3, [pc, #540]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xb74>
 8005488:	4b84      	ldr	r3, [pc, #528]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	0e1b      	lsrs	r3, r3, #24
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	e006      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
 8005494:	4b81      	ldr	r3, [pc, #516]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	0e1b      	lsrs	r3, r3, #24
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	4a7f      	ldr	r2, [pc, #508]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 80054a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
 80054aa:	e33d      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
 80054b0:	e33a      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80054b2:	4b7a      	ldr	r3, [pc, #488]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80054b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054c0:	d112      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c8:	d10e      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054ca:	4b74      	ldr	r3, [pc, #464]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80054cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d8:	d102      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
      {
        frequency = LSI_VALUE / 128U;
 80054da:	23fa      	movs	r3, #250	; 0xfa
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054de:	e323      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 80054e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054e6:	e31f      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80054e8:	4b6c      	ldr	r3, [pc, #432]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f4:	d106      	bne.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fc:	d102      	bne.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
    {
      frequency = HSI_VALUE;
 80054fe:	4b69      	ldr	r3, [pc, #420]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
 8005502:	e311      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005504:	4b65      	ldr	r3, [pc, #404]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b02      	cmp	r3, #2
 8005510:	d107      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005518:	d103      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
    {
      frequency = LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
 8005520:	e302      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
 8005526:	e2ff      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800552c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005530:	430b      	orrs	r3, r1
 8005532:	d164      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005534:	4b59      	ldr	r3, [pc, #356]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800553a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800553e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	2b00      	cmp	r3, #0
 8005544:	d120      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005546:	4b55      	ldr	r3, [pc, #340]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d117      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005552:	4b52      	ldr	r3, [pc, #328]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 800555e:	4b4f      	ldr	r3, [pc, #316]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	0e1b      	lsrs	r3, r3, #24
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	e006      	b.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
 800556a:	4b4c      	ldr	r3, [pc, #304]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800556c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005570:	041b      	lsls	r3, r3, #16
 8005572:	0e1b      	lsrs	r3, r3, #24
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	4a49      	ldr	r2, [pc, #292]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>)
 800557a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
 8005580:	e2d2      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
 8005586:	e2cf      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005588:	4b44      	ldr	r3, [pc, #272]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800558a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800558e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005596:	d112      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559e:	d10e      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80055a0:	4b3e      	ldr	r3, [pc, #248]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80055a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ae:	d102      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
      {
        frequency = LSI_VALUE / 128U;
 80055b0:	23fa      	movs	r3, #250	; 0xfa
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80055b4:	e2b8      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 80055b6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80055bc:	e2b4      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80055be:	4b37      	ldr	r3, [pc, #220]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ca:	d106      	bne.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d2:	d102      	bne.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
    {
      frequency = HSI_VALUE;
 80055d4:	4b33      	ldr	r3, [pc, #204]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80055d6:	637b      	str	r3, [r7, #52]	; 0x34
 80055d8:	e2a6      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80055da:	4b30      	ldr	r3, [pc, #192]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 80055dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d107      	bne.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ee:	d103      	bne.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
    {
      frequency = LSE_VALUE;
 80055f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
 80055f6:	e297      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
 80055fc:	e294      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80055fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005602:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005606:	430b      	orrs	r3, r1
 8005608:	d14e      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800560a:	4b24      	ldr	r3, [pc, #144]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800560c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005610:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005614:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b00      	cmp	r3, #0
 800561a:	d103      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800561c:	f7fd ff8e 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8005620:	6378      	str	r0, [r7, #52]	; 0x34
 8005622:	e281      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800562a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800562e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005632:	d112      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800563a:	d10e      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800563e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564a:	d102      	bne.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
      {
        frequency = LSI_VALUE / 128U;
 800564c:	23fa      	movs	r3, #250	; 0xfa
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005650:	e26a      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005652:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005658:	e266      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800565a:	4b10      	ldr	r3, [pc, #64]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d106      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800566e:	d102      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = HSI_VALUE;
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
 8005674:	e258      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xd7c>)
 8005678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d107      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800568a:	d103      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
    {
      frequency = LSE_VALUE;
 800568c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
 8005692:	e249      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	637b      	str	r3, [r7, #52]	; 0x34
 8005698:	e246      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800569a:	bf00      	nop
 800569c:	46020c00 	.word	0x46020c00
 80056a0:	08006dd4 	.word	0x08006dd4
 80056a4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80056a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ac:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80056b0:	430b      	orrs	r3, r1
 80056b2:	d12d      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80056b4:	4ba9      	ldr	r3, [pc, #676]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80056b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ba:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80056be:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80056c0:	4ba6      	ldr	r3, [pc, #664]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056cc:	d105      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
    {
      frequency = HSE_VALUE;
 80056d4:	4ba2      	ldr	r3, [pc, #648]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
 80056d8:	e226      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056e0:	d107      	bne.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fd0c 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
 80056f0:	e21a      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056f8:	d107      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0xdea>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056fa:	f107 0318 	add.w	r3, r7, #24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fe5a 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
 8005708:	e20e      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
 800570e:	e20b      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005714:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005718:	430b      	orrs	r3, r1
 800571a:	d156      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800571c:	4b8f      	ldr	r3, [pc, #572]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800571e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005722:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800572e:	d028      	beq.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005736:	d845      	bhi.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800573e:	d013      	beq.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005746:	d83d      	bhi.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005754:	d004      	beq.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
 8005756:	e035      	b.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005758:	f7fd ff04 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 800575c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800575e:	e1e3      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005760:	f7fd fdd0 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8005764:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005766:	e1df      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005768:	4b7c      	ldr	r3, [pc, #496]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005774:	d102      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI_VALUE;
 8005776:	4b7a      	ldr	r3, [pc, #488]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800577a:	e1d5      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005780:	e1d2      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005782:	4b76      	ldr	r3, [pc, #472]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d117      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800578e:	4b73      	ldr	r3, [pc, #460]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800579a:	4b70      	ldr	r3, [pc, #448]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	0e1b      	lsrs	r3, r3, #24
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	e006      	b.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80057a6:	4b6d      	ldr	r3, [pc, #436]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80057a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	0e1b      	lsrs	r3, r3, #24
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	4a6b      	ldr	r2, [pc, #428]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80057b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057bc:	e1b4      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057c2:	e1b1      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057c8:	e1ae      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80057ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ce:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80057d2:	430b      	orrs	r3, r1
 80057d4:	d156      	bne.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80057d6:	4b61      	ldr	r3, [pc, #388]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80057d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057e8:	d028      	beq.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057f0:	d845      	bhi.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057f8:	d013      	beq.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005800:	d83d      	bhi.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	2b00      	cmp	r3, #0
 8005806:	d004      	beq.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580e:	d004      	beq.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0xefa>
 8005810:	e035      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005812:	f7fd fe93 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8005816:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005818:	e186      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800581a:	f7fd fd73 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 800581e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005820:	e182      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005822:	4b4e      	ldr	r3, [pc, #312]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d102      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0xf16>
        {
          frequency = HSI_VALUE;
 8005830:	4b4b      	ldr	r3, [pc, #300]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005834:	e178      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800583a:	e175      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800583c:	4b47      	ldr	r3, [pc, #284]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b20      	cmp	r3, #32
 8005846:	d117      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005848:	4b44      	ldr	r3, [pc, #272]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
 8005854:	4b41      	ldr	r3, [pc, #260]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	0e1b      	lsrs	r3, r3, #24
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	e006      	b.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0xf4e>
 8005860:	4b3e      	ldr	r3, [pc, #248]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005866:	041b      	lsls	r3, r3, #16
 8005868:	0e1b      	lsrs	r3, r3, #24
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	4a3d      	ldr	r2, [pc, #244]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005876:	e157      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800587c:	e154      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005882:	e151      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005888:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800588c:	430b      	orrs	r3, r1
 800588e:	d17d      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005890:	4b32      	ldr	r3, [pc, #200]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005896:	f003 0318 	and.w	r3, r3, #24
 800589a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2b18      	cmp	r3, #24
 80058a0:	d871      	bhi.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	0800590d 	.word	0x0800590d
 80058ac:	08005987 	.word	0x08005987
 80058b0:	08005987 	.word	0x08005987
 80058b4:	08005987 	.word	0x08005987
 80058b8:	08005987 	.word	0x08005987
 80058bc:	08005987 	.word	0x08005987
 80058c0:	08005987 	.word	0x08005987
 80058c4:	08005987 	.word	0x08005987
 80058c8:	08005915 	.word	0x08005915
 80058cc:	08005987 	.word	0x08005987
 80058d0:	08005987 	.word	0x08005987
 80058d4:	08005987 	.word	0x08005987
 80058d8:	08005987 	.word	0x08005987
 80058dc:	08005987 	.word	0x08005987
 80058e0:	08005987 	.word	0x08005987
 80058e4:	08005987 	.word	0x08005987
 80058e8:	0800591d 	.word	0x0800591d
 80058ec:	08005987 	.word	0x08005987
 80058f0:	08005987 	.word	0x08005987
 80058f4:	08005987 	.word	0x08005987
 80058f8:	08005987 	.word	0x08005987
 80058fc:	08005987 	.word	0x08005987
 8005900:	08005987 	.word	0x08005987
 8005904:	08005987 	.word	0x08005987
 8005908:	08005937 	.word	0x08005937
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800590c:	f7fd fe3e 	bl	800358c <HAL_RCC_GetPCLK3Freq>
 8005910:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005912:	e109      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005914:	f7fd fcf6 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8005918:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800591a:	e105      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800591c:	4b0f      	ldr	r3, [pc, #60]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d102      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
        {
          frequency = HSI_VALUE;
 800592a:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800592e:	e0fb      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005934:	e0f8      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005936:	4b09      	ldr	r3, [pc, #36]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	d11e      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800594e:	4b03      	ldr	r3, [pc, #12]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	0e1b      	lsrs	r3, r3, #24
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	e00d      	b.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x1056>
 800595a:	bf00      	nop
 800595c:	46020c00 	.word	0x46020c00
 8005960:	00f42400 	.word	0x00f42400
 8005964:	08006dd4 	.word	0x08006dd4
 8005968:	4b72      	ldr	r3, [pc, #456]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800596a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	0e1b      	lsrs	r3, r3, #24
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	4a70      	ldr	r2, [pc, #448]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 8005978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800597e:	e0d3      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005984:	e0d0      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800598a:	e0cd      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800598c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005990:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005994:	430b      	orrs	r3, r1
 8005996:	d155      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005998:	4b66      	ldr	r3, [pc, #408]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 800599a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800599e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80059a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059aa:	d013      	beq.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059b2:	d844      	bhi.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ba:	d013      	beq.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059c2:	d83c      	bhi.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d014      	beq.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d0:	d014      	beq.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 80059d2:	e034      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x111e>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059d4:	f107 0318 	add.w	r3, r7, #24
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fe fced 	bl	80043b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059e2:	e0a1      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe fb8b 	bl	8004104 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059f2:	e099      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80059f4:	f7fd fc86 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80059f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80059fa:	e095      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059fc:	4b4d      	ldr	r3, [pc, #308]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d117      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1118>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a08:	4b4a      	ldr	r3, [pc, #296]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1100>
 8005a14:	4b47      	ldr	r3, [pc, #284]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	e006      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
 8005a20:	4b44      	ldr	r3, [pc, #272]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	0e1b      	lsrs	r3, r3, #24
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	4a42      	ldr	r2, [pc, #264]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>)
 8005a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a36:	e077      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a3c:	e074      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>

      default:

        frequency = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a42:	e071      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a48:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	d131      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1194>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005a50:	4b38      	ldr	r3, [pc, #224]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005a5c:	4b35      	ldr	r3, [pc, #212]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d106      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
    {
      frequency = LSE_VALUE;
 8005a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	e057      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005a78:	4b2e      	ldr	r3, [pc, #184]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a86:	d112      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a8e:	d10e      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x118e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a90:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a9e:	d102      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1186>
      {
        frequency = LSI_VALUE / 128U;
 8005aa0:	23fa      	movs	r3, #250	; 0xfa
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aa4:	e040      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
      else
      {
        frequency = LSI_VALUE;
 8005aa6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005aaa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aac:	e03c      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab2:	e039      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ab8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005abc:	430b      	orrs	r3, r1
 8005abe:	d131      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1204>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005ac2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ac6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005acc:	4b19      	ldr	r3, [pc, #100]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d102      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
    {
      frequency = HSI48_VALUE;
 8005ae0:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x121c>)
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae4:	e020      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005ae6:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af2:	d106      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afa:	d102      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005afc:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>)
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
 8005b00:	e012      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0e:	d106      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	d102      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
    {
      frequency = HSI_VALUE;
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1c:	e004      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
 8005b22:	e001      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3738      	adds	r7, #56	; 0x38
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	46020c00 	.word	0x46020c00
 8005b38:	08006dd4 	.word	0x08006dd4
 8005b3c:	02dc6c00 	.word	0x02dc6c00
 8005b40:	016e3600 	.word	0x016e3600
 8005b44:	00f42400 	.word	0x00f42400

08005b48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005b50:	4b47      	ldr	r3, [pc, #284]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a46      	ldr	r2, [pc, #280]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005b56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b5a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b5c:	f7fb ff44 	bl	80019e8 <HAL_GetTick>
 8005b60:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b62:	e008      	b.n	8005b76 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b64:	f7fb ff40 	bl	80019e8 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e077      	b.n	8005c66 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b76:	4b3e      	ldr	r3, [pc, #248]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005b82:	4b3b      	ldr	r3, [pc, #236]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6852      	ldr	r2, [r2, #4]
 8005b96:	3a01      	subs	r2, #1
 8005b98:	0212      	lsls	r2, r2, #8
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	4934      	ldr	r1, [pc, #208]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005ba2:	4b33      	ldr	r3, [pc, #204]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ba6:	4b33      	ldr	r3, [pc, #204]	; (8005c74 <RCCEx_PLL2_Config+0x12c>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6892      	ldr	r2, [r2, #8]
 8005bae:	3a01      	subs	r2, #1
 8005bb0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68d2      	ldr	r2, [r2, #12]
 8005bb8:	3a01      	subs	r2, #1
 8005bba:	0252      	lsls	r2, r2, #9
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	4311      	orrs	r1, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6912      	ldr	r2, [r2, #16]
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	0412      	lsls	r2, r2, #16
 8005bc8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005bcc:	4311      	orrs	r1, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6952      	ldr	r2, [r2, #20]
 8005bd2:	3a01      	subs	r2, #1
 8005bd4:	0612      	lsls	r2, r2, #24
 8005bd6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	4924      	ldr	r1, [pc, #144]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005be2:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	f023 020c 	bic.w	r2, r3, #12
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	4920      	ldr	r1, [pc, #128]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005bf4:	4b1e      	ldr	r3, [pc, #120]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	491c      	ldr	r1, [pc, #112]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005c02:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	4a1a      	ldr	r2, [pc, #104]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c08:	f023 0310 	bic.w	r3, r3, #16
 8005c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c0e:	4b18      	ldr	r3, [pc, #96]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	69d2      	ldr	r2, [r2, #28]
 8005c1e:	00d2      	lsls	r2, r2, #3
 8005c20:	4913      	ldr	r1, [pc, #76]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005c26:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	4a11      	ldr	r2, [pc, #68]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c2c:	f043 0310 	orr.w	r3, r3, #16
 8005c30:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005c32:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a0e      	ldr	r2, [pc, #56]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c3c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c3e:	f7fb fed3 	bl	80019e8 <HAL_GetTick>
 8005c42:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c44:	e008      	b.n	8005c58 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c46:	f7fb fecf 	bl	80019e8 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e006      	b.n	8005c66 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <RCCEx_PLL2_Config+0x128>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0

}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	46020c00 	.word	0x46020c00
 8005c74:	80800000 	.word	0x80800000

08005c78 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005c80:	4b47      	ldr	r3, [pc, #284]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a46      	ldr	r2, [pc, #280]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c8c:	f7fb feac 	bl	80019e8 <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c92:	e008      	b.n	8005ca6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c94:	f7fb fea8 	bl	80019e8 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e077      	b.n	8005d96 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ca6:	4b3e      	ldr	r3, [pc, #248]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005cb2:	4b3b      	ldr	r3, [pc, #236]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6811      	ldr	r1, [r2, #0]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6852      	ldr	r2, [r2, #4]
 8005cc6:	3a01      	subs	r2, #1
 8005cc8:	0212      	lsls	r2, r2, #8
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	4934      	ldr	r1, [pc, #208]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	630b      	str	r3, [r1, #48]	; 0x30
 8005cd2:	4b33      	ldr	r3, [pc, #204]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd6:	4b33      	ldr	r3, [pc, #204]	; (8005da4 <RCCEx_PLL3_Config+0x12c>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6892      	ldr	r2, [r2, #8]
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	68d2      	ldr	r2, [r2, #12]
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	0252      	lsls	r2, r2, #9
 8005cec:	b292      	uxth	r2, r2
 8005cee:	4311      	orrs	r1, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6912      	ldr	r2, [r2, #16]
 8005cf4:	3a01      	subs	r2, #1
 8005cf6:	0412      	lsls	r2, r2, #16
 8005cf8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005cfc:	4311      	orrs	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6952      	ldr	r2, [r2, #20]
 8005d02:	3a01      	subs	r2, #1
 8005d04:	0612      	lsls	r2, r2, #24
 8005d06:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	4924      	ldr	r1, [pc, #144]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005d12:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	f023 020c 	bic.w	r2, r3, #12
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	4920      	ldr	r1, [pc, #128]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005d24:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	491c      	ldr	r1, [pc, #112]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005d32:	4b1b      	ldr	r3, [pc, #108]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d38:	f023 0310 	bic.w	r3, r3, #16
 8005d3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	69d2      	ldr	r2, [r2, #28]
 8005d4e:	00d2      	lsls	r2, r2, #3
 8005d50:	4913      	ldr	r1, [pc, #76]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	4a11      	ldr	r2, [pc, #68]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d5c:	f043 0310 	orr.w	r3, r3, #16
 8005d60:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005d62:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a0e      	ldr	r2, [pc, #56]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d6e:	f7fb fe3b 	bl	80019e8 <HAL_GetTick>
 8005d72:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d74:	e008      	b.n	8005d88 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d76:	f7fb fe37 	bl	80019e8 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e006      	b.n	8005d96 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <RCCEx_PLL3_Config+0x128>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	46020c00 	.word	0x46020c00
 8005da4:	80800000 	.word	0x80800000

08005da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e042      	b.n	8005e40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb fc63 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2224      	movs	r2, #36	; 0x24
 8005dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fb64 	bl	80064c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f9c9 	bl	8006190 <UART_SetConfig>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e01b      	b.n	8005e40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fbe3 	bl	8006604 <UART_CheckIdleState>
 8005e3e:	4603      	mov	r3, r0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e04a      	b.n	8005ef0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fb fc13 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2224      	movs	r2, #36	; 0x24
 8005e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fb14 	bl	80064c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f979 	bl	8006190 <UART_SetConfig>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e023      	b.n	8005ef0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005ec6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0208 	orr.w	r2, r2, #8
 8005ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fb8b 	bl	8006604 <UART_CheckIdleState>
 8005eee:	4603      	mov	r3, r0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	4613      	mov	r3, r2
 8005f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d17b      	bne.n	800600a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_UART_Transmit+0x26>
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e074      	b.n	800600c <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2221      	movs	r2, #33	; 0x21
 8005f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f32:	f7fb fd59 	bl	80019e8 <HAL_GetTick>
 8005f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f50:	d108      	bne.n	8005f64 <HAL_UART_Transmit+0x6c>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d104      	bne.n	8005f64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e003      	b.n	8005f6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f6c:	e030      	b.n	8005fd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2200      	movs	r2, #0
 8005f76:	2180      	movs	r1, #128	; 0x80
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fbed 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e03d      	b.n	800600c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fa4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	3302      	adds	r3, #2
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	e007      	b.n	8005fbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1c8      	bne.n	8005f6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2140      	movs	r1, #64	; 0x40
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fbb6 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e006      	b.n	800600c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e000      	b.n	800600c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800600a:	2302      	movs	r3, #2
  }
}
 800600c:	4618      	mov	r0, r3
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b08f      	sub	sp, #60	; 0x3c
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8006026:	2302      	movs	r3, #2
 8006028:	e042      	b.n	80060b0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2224      	movs	r2, #36	; 0x24
 8006036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	61fb      	str	r3, [r7, #28]
   return(result);
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f023 030c 	bic.w	r3, r3, #12
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800605e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e6      	bne.n	800603a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60bb      	str	r3, [r7, #8]
   return(result);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f043 0308 	orr.w	r3, r3, #8
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6979      	ldr	r1, [r7, #20]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	613b      	str	r3, [r7, #16]
   return(result);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	373c      	adds	r7, #60	; 0x3c
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b08f      	sub	sp, #60	; 0x3c
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_HalfDuplex_EnableReceiver+0x16>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e042      	b.n	8006158 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2224      	movs	r2, #36	; 0x24
 80060de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f023 030c 	bic.w	r3, r3, #12
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006102:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e6      	bne.n	80060e2 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	60bb      	str	r3, [r7, #8]
   return(result);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f043 0304 	orr.w	r3, r3, #4
 8006128:	633b      	str	r3, [r7, #48]	; 0x30
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6979      	ldr	r1, [r7, #20]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	613b      	str	r3, [r7, #16]
   return(result);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e6      	bne.n	8006114 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	373c      	adds	r7, #60	; 0x3c
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4313      	orrs	r3, r2
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006194:	b094      	sub	sp, #80	; 0x50
 8006196:	af00      	add	r7, sp, #0
 8006198:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b9b      	ldr	r3, [pc, #620]	; (8006414 <UART_SetConfig+0x284>)
 80061a6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	431a      	orrs	r2, r3
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	4313      	orrs	r3, r2
 80061be:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4994      	ldr	r1, [pc, #592]	; (8006418 <UART_SetConfig+0x288>)
 80061c8:	4019      	ands	r1, r3
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	68d9      	ldr	r1, [r3, #12]
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	ea40 0301 	orr.w	r3, r0, r1
 80061ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b87      	ldr	r3, [pc, #540]	; (8006414 <UART_SetConfig+0x284>)
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d009      	beq.n	8006210 <UART_SetConfig+0x80>
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b86      	ldr	r3, [pc, #536]	; (800641c <UART_SetConfig+0x28c>)
 8006202:	429a      	cmp	r2, r3
 8006204:	d004      	beq.n	8006210 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620c:	4313      	orrs	r3, r2
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800621a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006224:	430b      	orrs	r3, r1
 8006226:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	f023 000f 	bic.w	r0, r3, #15
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	ea40 0301 	orr.w	r3, r0, r1
 800623e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b76      	ldr	r3, [pc, #472]	; (8006420 <UART_SetConfig+0x290>)
 8006246:	429a      	cmp	r2, r3
 8006248:	d102      	bne.n	8006250 <UART_SetConfig+0xc0>
 800624a:	2301      	movs	r3, #1
 800624c:	64bb      	str	r3, [r7, #72]	; 0x48
 800624e:	e021      	b.n	8006294 <UART_SetConfig+0x104>
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b73      	ldr	r3, [pc, #460]	; (8006424 <UART_SetConfig+0x294>)
 8006256:	429a      	cmp	r2, r3
 8006258:	d102      	bne.n	8006260 <UART_SetConfig+0xd0>
 800625a:	2304      	movs	r3, #4
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
 800625e:	e019      	b.n	8006294 <UART_SetConfig+0x104>
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b70      	ldr	r3, [pc, #448]	; (8006428 <UART_SetConfig+0x298>)
 8006266:	429a      	cmp	r2, r3
 8006268:	d102      	bne.n	8006270 <UART_SetConfig+0xe0>
 800626a:	2308      	movs	r3, #8
 800626c:	64bb      	str	r3, [r7, #72]	; 0x48
 800626e:	e011      	b.n	8006294 <UART_SetConfig+0x104>
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	4b6d      	ldr	r3, [pc, #436]	; (800642c <UART_SetConfig+0x29c>)
 8006276:	429a      	cmp	r2, r3
 8006278:	d102      	bne.n	8006280 <UART_SetConfig+0xf0>
 800627a:	2310      	movs	r3, #16
 800627c:	64bb      	str	r3, [r7, #72]	; 0x48
 800627e:	e009      	b.n	8006294 <UART_SetConfig+0x104>
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4b63      	ldr	r3, [pc, #396]	; (8006414 <UART_SetConfig+0x284>)
 8006286:	429a      	cmp	r2, r3
 8006288:	d102      	bne.n	8006290 <UART_SetConfig+0x100>
 800628a:	2320      	movs	r3, #32
 800628c:	64bb      	str	r3, [r7, #72]	; 0x48
 800628e:	e001      	b.n	8006294 <UART_SetConfig+0x104>
 8006290:	2300      	movs	r3, #0
 8006292:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b5e      	ldr	r3, [pc, #376]	; (8006414 <UART_SetConfig+0x284>)
 800629a:	429a      	cmp	r2, r3
 800629c:	d004      	beq.n	80062a8 <UART_SetConfig+0x118>
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b5e      	ldr	r3, [pc, #376]	; (800641c <UART_SetConfig+0x28c>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d172      	bne.n	800638e <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80062a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062aa:	2200      	movs	r2, #0
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	627a      	str	r2, [r7, #36]	; 0x24
 80062b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80062b4:	f7fe fb34 	bl	8004920 <HAL_RCCEx_GetPeriphCLKFreq>
 80062b8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80e7 	beq.w	8006490 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	4a5a      	ldr	r2, [pc, #360]	; (8006430 <UART_SetConfig+0x2a0>)
 80062c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062cc:	461a      	mov	r2, r3
 80062ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062d4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d305      	bcc.n	80062f2 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d903      	bls.n	80062fa <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80062f8:	e048      	b.n	800638c <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fc:	2200      	movs	r2, #0
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	61fa      	str	r2, [r7, #28]
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	4a4a      	ldr	r2, [pc, #296]	; (8006430 <UART_SetConfig+0x2a0>)
 8006308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800630c:	b29b      	uxth	r3, r3
 800630e:	2200      	movs	r2, #0
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	617a      	str	r2, [r7, #20]
 8006314:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800631c:	f7fa fba2 	bl	8000a64 <__aeabi_uldivmod>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4610      	mov	r0, r2
 8006326:	4619      	mov	r1, r3
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	020b      	lsls	r3, r1, #8
 8006332:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006336:	0202      	lsls	r2, r0, #8
 8006338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800633a:	6849      	ldr	r1, [r1, #4]
 800633c:	0849      	lsrs	r1, r1, #1
 800633e:	2000      	movs	r0, #0
 8006340:	460c      	mov	r4, r1
 8006342:	4605      	mov	r5, r0
 8006344:	eb12 0804 	adds.w	r8, r2, r4
 8006348:	eb43 0905 	adc.w	r9, r3, r5
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	60fa      	str	r2, [r7, #12]
 8006356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	f7fa fb81 	bl	8000a64 <__aeabi_uldivmod>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4613      	mov	r3, r2
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800636a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006370:	d308      	bcc.n	8006384 <UART_SetConfig+0x1f4>
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006378:	d204      	bcs.n	8006384 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006380:	60da      	str	r2, [r3, #12]
 8006382:	e003      	b.n	800638c <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800638a:	e081      	b.n	8006490 <UART_SetConfig+0x300>
 800638c:	e080      	b.n	8006490 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006396:	d14d      	bne.n	8006434 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800639a:	2200      	movs	r2, #0
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063a4:	f7fe fabc 	bl	8004920 <HAL_RCCEx_GetPeriphCLKFreq>
 80063a8:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d06f      	beq.n	8006490 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <UART_SetConfig+0x2a0>)
 80063b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063be:	fbb3 f3f2 	udiv	r3, r3, r2
 80063c2:	005a      	lsls	r2, r3, #1
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	441a      	add	r2, r3
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d8:	2b0f      	cmp	r3, #15
 80063da:	d916      	bls.n	800640a <UART_SetConfig+0x27a>
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d212      	bcs.n	800640a <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f023 030f 	bic.w	r3, r3, #15
 80063ec:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80063fc:	4313      	orrs	r3, r2
 80063fe:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006406:	60da      	str	r2, [r3, #12]
 8006408:	e042      	b.n	8006490 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006410:	e03e      	b.n	8006490 <UART_SetConfig+0x300>
 8006412:	bf00      	nop
 8006414:	46002400 	.word	0x46002400
 8006418:	cfff69f3 	.word	0xcfff69f3
 800641c:	56002400 	.word	0x56002400
 8006420:	40013800 	.word	0x40013800
 8006424:	40004800 	.word	0x40004800
 8006428:	40004c00 	.word	0x40004c00
 800642c:	40005000 	.word	0x40005000
 8006430:	08006e94 	.word	0x08006e94
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006436:	2200      	movs	r2, #0
 8006438:	469a      	mov	sl, r3
 800643a:	4693      	mov	fp, r2
 800643c:	4650      	mov	r0, sl
 800643e:	4659      	mov	r1, fp
 8006440:	f7fe fa6e 	bl	8004920 <HAL_RCCEx_GetPeriphCLKFreq>
 8006444:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d021      	beq.n	8006490 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <UART_SetConfig+0x32c>)
 8006452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006456:	461a      	mov	r2, r3
 8006458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645a:	fbb3 f2f2 	udiv	r2, r3, r2
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	441a      	add	r2, r3
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	fbb2 f3f3 	udiv	r3, r2, r3
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006472:	2b0f      	cmp	r3, #15
 8006474:	d909      	bls.n	800648a <UART_SetConfig+0x2fa>
 8006476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647c:	d205      	bcs.n	800648a <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	b29a      	uxth	r2, r3
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60da      	str	r2, [r3, #12]
 8006488:	e002      	b.n	8006490 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	2201      	movs	r2, #1
 8006494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	2201      	movs	r2, #1
 800649c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2200      	movs	r2, #0
 80064a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	2200      	movs	r2, #0
 80064aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3750      	adds	r7, #80	; 0x50
 80064b4:	46bd      	mov	sp, r7
 80064b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ba:	bf00      	nop
 80064bc:	08006e94 	.word	0x08006e94

080064c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01a      	beq.n	80065d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065be:	d10a      	bne.n	80065d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
  }
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b098      	sub	sp, #96	; 0x60
 8006608:	af02      	add	r7, sp, #8
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006614:	f7fb f9e8 	bl	80019e8 <HAL_GetTick>
 8006618:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b08      	cmp	r3, #8
 8006626:	d12f      	bne.n	8006688 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006630:	2200      	movs	r2, #0
 8006632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f88e 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d022      	beq.n	8006688 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006656:	653b      	str	r3, [r7, #80]	; 0x50
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006660:	647b      	str	r3, [r7, #68]	; 0x44
 8006662:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800666e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e6      	bne.n	8006642 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e063      	b.n	8006750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b04      	cmp	r3, #4
 8006694:	d149      	bne.n	800672a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006696:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800669e:	2200      	movs	r2, #0
 80066a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f857 	bl	8006758 <UART_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d03c      	beq.n	800672a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	623b      	str	r3, [r7, #32]
   return(result);
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ce:	633b      	str	r3, [r7, #48]	; 0x30
 80066d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e6      	bne.n	80066b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006702:	61fa      	str	r2, [r7, #28]
 8006704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	69b9      	ldr	r1, [r7, #24]
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	617b      	str	r3, [r7, #20]
   return(result);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e012      	b.n	8006750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3758      	adds	r7, #88	; 0x58
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006768:	e049      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d045      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006772:	f7fb f939 	bl	80019e8 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <UART_WaitOnFlagUntilTimeout+0x30>
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e048      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d031      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d110      	bne.n	80067ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2208      	movs	r2, #8
 80067ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f838 	bl	8006826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2208      	movs	r2, #8
 80067ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e029      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d8:	d111      	bne.n	80067fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f81e 	bl	8006826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e00f      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	bf0c      	ite	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	2300      	movne	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	429a      	cmp	r2, r3
 800681a:	d0a6      	beq.n	800676a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006826:	b480      	push	{r7}
 8006828:	b095      	sub	sp, #84	; 0x54
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	643b      	str	r3, [r7, #64]	; 0x40
 800684e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e6      	bne.n	800682e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3308      	adds	r3, #8
 8006866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	64bb      	str	r3, [r7, #72]	; 0x48
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e3      	bne.n	8006860 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d118      	bne.n	80068d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f023 0310 	bic.w	r3, r3, #16
 80068b4:	647b      	str	r3, [r7, #68]	; 0x44
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6979      	ldr	r1, [r7, #20]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	613b      	str	r3, [r7, #16]
   return(result);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e6      	bne.n	80068a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80068e6:	bf00      	nop
 80068e8:	3754      	adds	r7, #84	; 0x54
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_UARTEx_DisableFifoMode+0x16>
 8006904:	2302      	movs	r3, #2
 8006906:	e027      	b.n	8006958 <HAL_UARTEx_DisableFifoMode+0x66>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2224      	movs	r2, #36	; 0x24
 8006914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0201 	bic.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006936:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006978:	2302      	movs	r3, #2
 800697a:	e02d      	b.n	80069d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2224      	movs	r2, #36	; 0x24
 8006988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0201 	bic.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f84f 	bl	8006a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e02d      	b.n	8006a54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2224      	movs	r2, #36	; 0x24
 8006a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0201 	bic.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f811 	bl	8006a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d108      	bne.n	8006a7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a7c:	e031      	b.n	8006ae2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a7e:	2308      	movs	r3, #8
 8006a80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a82:	2308      	movs	r3, #8
 8006a84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	0e5b      	lsrs	r3, r3, #25
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	0f5b      	lsrs	r3, r3, #29
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	7b3a      	ldrb	r2, [r7, #12]
 8006aaa:	4911      	ldr	r1, [pc, #68]	; (8006af0 <UARTEx_SetNbDataToProcess+0x94>)
 8006aac:	5c8a      	ldrb	r2, [r1, r2]
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ab2:	7b3a      	ldrb	r2, [r7, #12]
 8006ab4:	490f      	ldr	r1, [pc, #60]	; (8006af4 <UARTEx_SetNbDataToProcess+0x98>)
 8006ab6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	7b7a      	ldrb	r2, [r7, #13]
 8006ac8:	4909      	ldr	r1, [pc, #36]	; (8006af0 <UARTEx_SetNbDataToProcess+0x94>)
 8006aca:	5c8a      	ldrb	r2, [r1, r2]
 8006acc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ad0:	7b7a      	ldrb	r2, [r7, #13]
 8006ad2:	4908      	ldr	r1, [pc, #32]	; (8006af4 <UARTEx_SetNbDataToProcess+0x98>)
 8006ad4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ad6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	08006eac 	.word	0x08006eac
 8006af4:	08006eb4 	.word	0x08006eb4

08006af8 <memset>:
 8006af8:	4402      	add	r2, r0
 8006afa:	4603      	mov	r3, r0
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d100      	bne.n	8006b02 <memset+0xa>
 8006b00:	4770      	bx	lr
 8006b02:	f803 1b01 	strb.w	r1, [r3], #1
 8006b06:	e7f9      	b.n	8006afc <memset+0x4>

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4d0d      	ldr	r5, [pc, #52]	; (8006b40 <__libc_init_array+0x38>)
 8006b0c:	2600      	movs	r6, #0
 8006b0e:	4c0d      	ldr	r4, [pc, #52]	; (8006b44 <__libc_init_array+0x3c>)
 8006b10:	1b64      	subs	r4, r4, r5
 8006b12:	10a4      	asrs	r4, r4, #2
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	4d0b      	ldr	r5, [pc, #44]	; (8006b48 <__libc_init_array+0x40>)
 8006b1a:	2600      	movs	r6, #0
 8006b1c:	4c0b      	ldr	r4, [pc, #44]	; (8006b4c <__libc_init_array+0x44>)
 8006b1e:	f000 f825 	bl	8006b6c <_init>
 8006b22:	1b64      	subs	r4, r4, r5
 8006b24:	10a4      	asrs	r4, r4, #2
 8006b26:	42a6      	cmp	r6, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b30:	3601      	adds	r6, #1
 8006b32:	4798      	blx	r3
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3a:	3601      	adds	r6, #1
 8006b3c:	4798      	blx	r3
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	08006ec4 	.word	0x08006ec4
 8006b44:	08006ec4 	.word	0x08006ec4
 8006b48:	08006ec4 	.word	0x08006ec4
 8006b4c:	08006ec8 	.word	0x08006ec8

08006b50 <memcpy>:
 8006b50:	440a      	add	r2, r1
 8006b52:	1e43      	subs	r3, r0, #1
 8006b54:	4291      	cmp	r1, r2
 8006b56:	d100      	bne.n	8006b5a <memcpy+0xa>
 8006b58:	4770      	bx	lr
 8006b5a:	b510      	push	{r4, lr}
 8006b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b60:	4291      	cmp	r1, r2
 8006b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b66:	d1f9      	bne.n	8006b5c <memcpy+0xc>
 8006b68:	bd10      	pop	{r4, pc}
	...

08006b6c <_init>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr

08006b78 <_fini>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	bf00      	nop
 8006b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7e:	bc08      	pop	{r3}
 8006b80:	469e      	mov	lr, r3
 8006b82:	4770      	bx	lr
