
NUCLEO-G474RET6-Stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000657c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f0  080068f0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068f8  080068f8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  2000005c  0800695c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800695c  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d10  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f3c  00000000  00000000  00036ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e73  00000000  00000000  0003afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003939  00000000  00000000  0003be2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017427  00000000  00000000  0003f764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe33a  00000000  00000000  00056b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e0  00000000  00000000  00154ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0015a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006744 	.word	0x08006744

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08006744 	.word	0x08006744

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	; 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2iz>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008a4:	d215      	bcs.n	80008d2 <__aeabi_d2iz+0x36>
 80008a6:	d511      	bpl.n	80008cc <__aeabi_d2iz+0x30>
 80008a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b0:	d912      	bls.n	80008d8 <__aeabi_d2iz+0x3c>
 80008b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008c2:	fa23 f002 	lsr.w	r0, r3, r2
 80008c6:	bf18      	it	ne
 80008c8:	4240      	negne	r0, r0
 80008ca:	4770      	bx	lr
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	4770      	bx	lr
 80008d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008d6:	d105      	bne.n	80008e4 <__aeabi_d2iz+0x48>
 80008d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008dc:	bf08      	it	eq
 80008de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 b970 	b.w	8000be4 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9e08      	ldr	r6, [sp, #32]
 8000922:	460d      	mov	r5, r1
 8000924:	4604      	mov	r4, r0
 8000926:	460f      	mov	r7, r1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d14a      	bne.n	80009c2 <__udivmoddi4+0xa6>
 800092c:	428a      	cmp	r2, r1
 800092e:	4694      	mov	ip, r2
 8000930:	d965      	bls.n	80009fe <__udivmoddi4+0xe2>
 8000932:	fab2 f382 	clz	r3, r2
 8000936:	b143      	cbz	r3, 800094a <__udivmoddi4+0x2e>
 8000938:	fa02 fc03 	lsl.w	ip, r2, r3
 800093c:	f1c3 0220 	rsb	r2, r3, #32
 8000940:	409f      	lsls	r7, r3
 8000942:	fa20 f202 	lsr.w	r2, r0, r2
 8000946:	4317      	orrs	r7, r2
 8000948:	409c      	lsls	r4, r3
 800094a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800094e:	fa1f f58c 	uxth.w	r5, ip
 8000952:	fbb7 f1fe 	udiv	r1, r7, lr
 8000956:	0c22      	lsrs	r2, r4, #16
 8000958:	fb0e 7711 	mls	r7, lr, r1, r7
 800095c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000960:	fb01 f005 	mul.w	r0, r1, r5
 8000964:	4290      	cmp	r0, r2
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x62>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000970:	f080 811c 	bcs.w	8000bac <__udivmoddi4+0x290>
 8000974:	4290      	cmp	r0, r2
 8000976:	f240 8119 	bls.w	8000bac <__udivmoddi4+0x290>
 800097a:	3902      	subs	r1, #2
 800097c:	4462      	add	r2, ip
 800097e:	1a12      	subs	r2, r2, r0
 8000980:	b2a4      	uxth	r4, r4
 8000982:	fbb2 f0fe 	udiv	r0, r2, lr
 8000986:	fb0e 2210 	mls	r2, lr, r0, r2
 800098a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800098e:	fb00 f505 	mul.w	r5, r0, r5
 8000992:	42a5      	cmp	r5, r4
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x90>
 8000996:	eb1c 0404 	adds.w	r4, ip, r4
 800099a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800099e:	f080 8107 	bcs.w	8000bb0 <__udivmoddi4+0x294>
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	f240 8104 	bls.w	8000bb0 <__udivmoddi4+0x294>
 80009a8:	4464      	add	r4, ip
 80009aa:	3802      	subs	r0, #2
 80009ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	2100      	movs	r1, #0
 80009b4:	b11e      	cbz	r6, 80009be <__udivmoddi4+0xa2>
 80009b6:	40dc      	lsrs	r4, r3
 80009b8:	2300      	movs	r3, #0
 80009ba:	e9c6 4300 	strd	r4, r3, [r6]
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0xbc>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80ed 	beq.w	8000ba6 <__udivmoddi4+0x28a>
 80009cc:	2100      	movs	r1, #0
 80009ce:	e9c6 0500 	strd	r0, r5, [r6]
 80009d2:	4608      	mov	r0, r1
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	fab3 f183 	clz	r1, r3
 80009dc:	2900      	cmp	r1, #0
 80009de:	d149      	bne.n	8000a74 <__udivmoddi4+0x158>
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d302      	bcc.n	80009ea <__udivmoddi4+0xce>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	f200 80f8 	bhi.w	8000bda <__udivmoddi4+0x2be>
 80009ea:	1a84      	subs	r4, r0, r2
 80009ec:	eb65 0203 	sbc.w	r2, r5, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	4617      	mov	r7, r2
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d0e2      	beq.n	80009be <__udivmoddi4+0xa2>
 80009f8:	e9c6 4700 	strd	r4, r7, [r6]
 80009fc:	e7df      	b.n	80009be <__udivmoddi4+0xa2>
 80009fe:	b902      	cbnz	r2, 8000a02 <__udivmoddi4+0xe6>
 8000a00:	deff      	udf	#255	; 0xff
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 8090 	bne.w	8000b2c <__udivmoddi4+0x210>
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	2101      	movs	r1, #1
 8000a18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a20:	0c22      	lsrs	r2, r4, #16
 8000a22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a26:	fb0e f005 	mul.w	r0, lr, r5
 8000a2a:	4290      	cmp	r0, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x124>
 8000a2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a32:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x122>
 8000a38:	4290      	cmp	r0, r2
 8000a3a:	f200 80cb 	bhi.w	8000bd4 <__udivmoddi4+0x2b8>
 8000a3e:	4645      	mov	r5, r8
 8000a40:	1a12      	subs	r2, r2, r0
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a48:	fb07 2210 	mls	r2, r7, r0, r2
 8000a4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a50:	fb0e fe00 	mul.w	lr, lr, r0
 8000a54:	45a6      	cmp	lr, r4
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x14e>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x14c>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f200 80bb 	bhi.w	8000bde <__udivmoddi4+0x2c2>
 8000a68:	4610      	mov	r0, r2
 8000a6a:	eba4 040e 	sub.w	r4, r4, lr
 8000a6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a72:	e79f      	b.n	80009b4 <__udivmoddi4+0x98>
 8000a74:	f1c1 0720 	rsb	r7, r1, #32
 8000a78:	408b      	lsls	r3, r1
 8000a7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a82:	fa05 f401 	lsl.w	r4, r5, r1
 8000a86:	fa20 f307 	lsr.w	r3, r0, r7
 8000a8a:	40fd      	lsrs	r5, r7
 8000a8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a90:	4323      	orrs	r3, r4
 8000a92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a96:	fa1f fe8c 	uxth.w	lr, ip
 8000a9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a9e:	0c1c      	lsrs	r4, r3, #16
 8000aa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa4:	fb08 f50e 	mul.w	r5, r8, lr
 8000aa8:	42a5      	cmp	r5, r4
 8000aaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000aae:	fa00 f001 	lsl.w	r0, r0, r1
 8000ab2:	d90b      	bls.n	8000acc <__udivmoddi4+0x1b0>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000abc:	f080 8088 	bcs.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	f240 8085 	bls.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aca:	4464      	add	r4, ip
 8000acc:	1b64      	subs	r4, r4, r5
 8000ace:	b29d      	uxth	r5, r3
 8000ad0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ad4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ad8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000adc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x1da>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000aec:	d26c      	bcs.n	8000bc8 <__udivmoddi4+0x2ac>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	d96a      	bls.n	8000bc8 <__udivmoddi4+0x2ac>
 8000af2:	3b02      	subs	r3, #2
 8000af4:	4464      	add	r4, ip
 8000af6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000afa:	fba3 9502 	umull	r9, r5, r3, r2
 8000afe:	eba4 040e 	sub.w	r4, r4, lr
 8000b02:	42ac      	cmp	r4, r5
 8000b04:	46c8      	mov	r8, r9
 8000b06:	46ae      	mov	lr, r5
 8000b08:	d356      	bcc.n	8000bb8 <__udivmoddi4+0x29c>
 8000b0a:	d053      	beq.n	8000bb4 <__udivmoddi4+0x298>
 8000b0c:	b156      	cbz	r6, 8000b24 <__udivmoddi4+0x208>
 8000b0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b12:	eb64 040e 	sbc.w	r4, r4, lr
 8000b16:	fa04 f707 	lsl.w	r7, r4, r7
 8000b1a:	40ca      	lsrs	r2, r1
 8000b1c:	40cc      	lsrs	r4, r1
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	e9c6 7400 	strd	r7, r4, [r6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	f1c3 0120 	rsb	r1, r3, #32
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	fa20 f201 	lsr.w	r2, r0, r1
 8000b38:	fa25 f101 	lsr.w	r1, r5, r1
 8000b3c:	409d      	lsls	r5, r3
 8000b3e:	432a      	orrs	r2, r5
 8000b40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b50:	0c11      	lsrs	r1, r2, #16
 8000b52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b56:	fb00 f50e 	mul.w	r5, r0, lr
 8000b5a:	428d      	cmp	r5, r1
 8000b5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x258>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b6a:	d22f      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b6c:	428d      	cmp	r5, r1
 8000b6e:	d92d      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000b70:	3802      	subs	r0, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	1b49      	subs	r1, r1, r5
 8000b76:	b292      	uxth	r2, r2
 8000b78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b84:	fb05 f10e 	mul.w	r1, r5, lr
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x282>
 8000b8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b90:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b94:	d216      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b96:	4291      	cmp	r1, r2
 8000b98:	d914      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b9a:	3d02      	subs	r5, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a52      	subs	r2, r2, r1
 8000ba0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ba4:	e738      	b.n	8000a18 <__udivmoddi4+0xfc>
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	4630      	mov	r0, r6
 8000baa:	e708      	b.n	80009be <__udivmoddi4+0xa2>
 8000bac:	4639      	mov	r1, r7
 8000bae:	e6e6      	b.n	800097e <__udivmoddi4+0x62>
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	e6fb      	b.n	80009ac <__udivmoddi4+0x90>
 8000bb4:	4548      	cmp	r0, r9
 8000bb6:	d2a9      	bcs.n	8000b0c <__udivmoddi4+0x1f0>
 8000bb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	e7a3      	b.n	8000b0c <__udivmoddi4+0x1f0>
 8000bc4:	4645      	mov	r5, r8
 8000bc6:	e7ea      	b.n	8000b9e <__udivmoddi4+0x282>
 8000bc8:	462b      	mov	r3, r5
 8000bca:	e794      	b.n	8000af6 <__udivmoddi4+0x1da>
 8000bcc:	4640      	mov	r0, r8
 8000bce:	e7d1      	b.n	8000b74 <__udivmoddi4+0x258>
 8000bd0:	46d0      	mov	r8, sl
 8000bd2:	e77b      	b.n	8000acc <__udivmoddi4+0x1b0>
 8000bd4:	3d02      	subs	r5, #2
 8000bd6:	4462      	add	r2, ip
 8000bd8:	e732      	b.n	8000a40 <__udivmoddi4+0x124>
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e70a      	b.n	80009f4 <__udivmoddi4+0xd8>
 8000bde:	4464      	add	r4, ip
 8000be0:	3802      	subs	r0, #2
 8000be2:	e742      	b.n	8000a6a <__udivmoddi4+0x14e>

08000be4 <__aeabi_idiv0>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b55      	ldr	r3, [pc, #340]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c16:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a4e      	ldr	r2, [pc, #312]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b4c      	ldr	r3, [pc, #304]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b49      	ldr	r3, [pc, #292]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a48      	ldr	r2, [pc, #288]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b46      	ldr	r3, [pc, #280]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a42      	ldr	r2, [pc, #264]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <MX_GPIO_Init+0x16c>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nCS_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 faa6 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_ENN_GPIO_Port, DRV_ENN_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2110      	movs	r1, #16
 8000c70:	4839      	ldr	r0, [pc, #228]	; (8000d58 <MX_GPIO_Init+0x170>)
 8000c72:	f001 faa1 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_Pin|CAP_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000c7c:	4837      	ldr	r0, [pc, #220]	; (8000d5c <MX_GPIO_Init+0x174>)
 8000c7e:	f001 fa9b 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	482f      	ldr	r0, [pc, #188]	; (8000d58 <MX_GPIO_Init+0x170>)
 8000c9a:	f001 f8f3 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|nCS_Pin;
 8000c9e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f001 f8e3 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV_ENN_Pin;
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_ENN_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4820      	ldr	r0, [pc, #128]	; (8000d58 <MX_GPIO_Init+0x170>)
 8000cd6:	f001 f8d5 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481a      	ldr	r0, [pc, #104]	; (8000d5c <MX_GPIO_Init+0x174>)
 8000cf4:	f001 f8c6 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Switch_Pin;
 8000cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4812      	ldr	r0, [pc, #72]	; (8000d58 <MX_GPIO_Init+0x170>)
 8000d0e:	f001 f8b9 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAP_Pin;
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAP_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_GPIO_Init+0x174>)
 8000d2a:	f001 f8ab 	bl	8001e84 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_GPIO_Init+0x178>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <MX_GPIO_Init+0x178>)
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2028      	movs	r0, #40	; 0x28
 8000d40:	f001 f86b 	bl	8001e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d44:	2028      	movs	r0, #40	; 0x28
 8000d46:	f001 f882 	bl	8001e4e <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	40010000 	.word	0x40010000

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f000 fee8 	bl	8001b3e <HAL_Init>
  Stepper stepper1;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f85f 	bl	8000e30 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f7ff ff39 	bl	8000be8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d76:	f000 fa11 	bl	800119c <MX_TIM1_Init>
  MX_SPI3_Init();
 8000d7a:	f000 f8a7 	bl	8000ecc <MX_SPI3_Init>
  MX_TIM2_Init();
 8000d7e:	f000 faa3 	bl	80012c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d82:	f000 fd5d 	bl	8001840 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d86:	f000 fda7 	bl	80018d8 <MX_USART3_UART_Init>
	/*HAL_UART_Transmit(&huart3, (uint8_t *)"*********************\r\n", 23, 100);
	HAL_UART_Transmit(&huart3, (uint8_t *)"* TMC2590 Test Code *\r\n", 23, 100);
	HAL_UART_Transmit(&huart3, (uint8_t *)"*********************\r\n", 23, 100);
	 */

  int order = 20;
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmc2590_Init(&htmc2590, &hspi3, nCS_GPIO_Port, nCS_Pin, DRV_ENN_GPIO_Port, DRV_ENN_Pin);
 8000d8e:	2310      	movs	r3, #16
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <main+0xb4>)
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d9e:	491f      	ldr	r1, [pc, #124]	; (8000e1c <main+0xb8>)
 8000da0:	481f      	ldr	r0, [pc, #124]	; (8000e20 <main+0xbc>)
 8000da2:	f000 fb59 	bl	8001458 <tmc2590_Init>
  	//HAL_UART_Transmit(&huart3,"debut\r\n", strlen("debut\r\n"), HAL_MAX_DELAY);

  	//fonction d'init


  	stepper_Init(&stepper1);
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f920 	bl	8000ff0 <stepper_Init>
  	HAL_Delay(1000);
 8000db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db4:	f000 ff34 	bl	8001c20 <HAL_Delay>
  	stepper1.angularPositionMax = 180;
 8000db8:	23b4      	movs	r3, #180	; 0xb4
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24

  		//tmc2590_dumpRegister(&htmc2590);  //Report doesn't work - Fail to turn if ON

  		 //code for stepper that advances 90 degrees (works)

  		sendOrderStepper(order,&stepper1);
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dc4:	f000 fc30 	bl	8001628 <sendOrderStepper>
  		HAL_Delay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f000 ff28 	bl	8001c20 <HAL_Delay>
  		stepper1.angularPosition += order;
 8000dd0:	6a3a      	ldr	r2, [r7, #32]
 8000dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd4:	4413      	add	r3, r2
 8000dd6:	623b      	str	r3, [r7, #32]

  		HAL_UART_Transmit(&huart2, (uint8_t *)"test 2\r\n", strlen("test 2\r\n"), HAL_MAX_DELAY);
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ddc:	2208      	movs	r2, #8
 8000dde:	4911      	ldr	r1, [pc, #68]	; (8000e24 <main+0xc0>)
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <main+0xc4>)
 8000de2:	f004 f9c1 	bl	8005168 <HAL_UART_Transmit>

  		//voir la position

		position_angular_1 = stepper1.angularPosition;
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
		sprintf(message, "%d \r\n", position_angular_1);
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dee:	490f      	ldr	r1, [pc, #60]	; (8000e2c <main+0xc8>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f005 f803 	bl	8005dfc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)message ,strlen(message) , HAL_MAX_DELAY);
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fa11 	bl	8000220 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	1d39      	adds	r1, r7, #4
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <main+0xc4>)
 8000e0a:	f004 f9ad 	bl	8005168 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000e0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e12:	f000 ff05 	bl	8001c20 <HAL_Delay>
  	{
 8000e16:	e7d1      	b.n	8000dbc <main+0x58>
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	20000078 	.word	0x20000078
 8000e20:	20000178 	.word	0x20000178
 8000e24:	0800675c 	.word	0x0800675c
 8000e28:	200001bc 	.word	0x200001bc
 8000e2c:	08006768 	.word	0x08006768

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b094      	sub	sp, #80	; 0x50
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2238      	movs	r2, #56	; 0x38
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f004 fffc 	bl	8005e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f001 f9ec 	bl	8002230 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e60:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	2303      	movs	r3, #3
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000e6a:	2306      	movs	r3, #6
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e6e:	2355      	movs	r3, #85	; 0x55
 8000e70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7e:	f107 0318 	add.w	r3, r7, #24
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fa88 	bl	8002398 <HAL_RCC_OscConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e8e:	f000 f818 	bl	8000ec2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e92:	230f      	movs	r3, #15
 8000e94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e96:	2303      	movs	r3, #3
 8000e98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fd8c 	bl	80029c8 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000eb6:	f000 f804 	bl	8000ec2 <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	; 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec6:	b672      	cpsid	i
}
 8000ec8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000eca:	e7fe      	b.n	8000eca <Error_Handler+0x8>

08000ecc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <MX_SPI3_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000ee6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000f02:	2238      	movs	r2, #56	; 0x38
 8000f04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000f26:	2208      	movs	r2, #8
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_SPI3_Init+0x74>)
 8000f2c:	f002 f9b6 	bl	800329c <HAL_SPI_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f7ff ffc4 	bl	8000ec2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000078 	.word	0x20000078
 8000f44:	40003c00 	.word	0x40003c00

08000f48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <HAL_SPI_MspInit+0x9c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d137      	bne.n	8000fda <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_SPI_MspInit+0xa0>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <HAL_SPI_MspInit+0xa0>)
 8000f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_SPI_MspInit+0xa0>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_SPI_MspInit+0xa0>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <HAL_SPI_MspInit+0xa0>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_SPI_MspInit+0xa0>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f9a:	2318      	movs	r3, #24
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000faa:	2306      	movs	r3, #6
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <HAL_SPI_MspInit+0xa4>)
 8000fb6:	f000 ff65 	bl	8001e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fca:	2306      	movs	r3, #6
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_SPI_MspInit+0xa4>)
 8000fd6:	f000 ff55 	bl	8001e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40003c00 	.word	0x40003c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000400 	.word	0x48000400

08000ff0 <stepper_Init>:
#include "stdio.h"
#include "tim.h"
#include "stepper.h"


void stepper_Init(Stepper * stepper){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	//char message[20]; 		// we create a tab to stock caracters

	int inputOrder = 10; // 10 degrees for each iteration
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	60fb      	str	r3, [r7, #12]
	//int polarity = (inputOrder > 0);

	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) { // sensor not activate
 8000ffc:	e007      	b.n	800100e <stepper_Init+0x1e>
		sendOrderStepper( inputOrder, stepper);
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f000 fb11 	bl	8001628 <sendOrderStepper>
		HAL_Delay(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f000 fe09 	bl	8001c20 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) { // sensor not activate
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <stepper_Init+0x50>)
 8001012:	f001 f8b9 	bl	8002188 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <stepper_Init+0xe>
	    }

	stepper->angularPosition = 0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]

	HAL_Delay(3000);
 8001022:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001026:	f000 fdfb 	bl	8001c20 <HAL_Delay>
	sprintf(message, "%d \r\n", position_init);
	HAL_UART_Transmit(&huart2, (uint8_t *)message ,strlen(message) , 1000);
	HAL_Delay(1000);
	*/

	HAL_UART_Transmit(&huart2, (uint8_t *)"test 1\r\n", strlen("test 1\r\n"), HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102e:	2208      	movs	r2, #8
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <stepper_Init+0x54>)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <stepper_Init+0x58>)
 8001034:	f004 f898 	bl	8005168 <HAL_UART_Transmit>

	return;
 8001038:	bf00      	nop

	//il faut faire en sorte de changer la polarité

}
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	48000400 	.word	0x48000400
 8001044:	08006770 	.word	0x08006770
 8001048:	200001bc 	.word	0x200001bc

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_MspInit+0x44>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_MspInit+0x44>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6613      	str	r3, [r2, #96]	; 0x60
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_MspInit+0x44>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_MspInit+0x44>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	6593      	str	r3, [r2, #88]	; 0x58
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x44>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001082:	f001 f979 	bl	8002378 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 fd80 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM2_IRQHandler+0x10>)
 80010ee:	f002 fe1e 	bl	8003d2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000012c 	.word	0x2000012c

080010fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001100:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001104:	f001 f870 	bl	80021e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f004 fe86 	bl	8005e4c <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20020000 	.word	0x20020000
 800116c:	00000400 	.word	0x00000400
 8001170:	200000dc 	.word	0x200000dc
 8001174:	20000428 	.word	0x20000428

08001178 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b098      	sub	sp, #96	; 0x60
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2234      	movs	r2, #52	; 0x34
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 fe37 	bl	8005e3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <MX_TIM1_Init+0x124>)
 80011d0:	4a3c      	ldr	r2, [pc, #240]	; (80012c4 <MX_TIM1_Init+0x128>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000;
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <MX_TIM1_Init+0x124>)
 80011d6:	f244 2268 	movw	r2, #17000	; 0x4268
 80011da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <MX_TIM1_Init+0x124>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80011e2:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <MX_TIM1_Init+0x124>)
 80011e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <MX_TIM1_Init+0x124>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <MX_TIM1_Init+0x124>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <MX_TIM1_Init+0x124>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011fc:	4830      	ldr	r0, [pc, #192]	; (80012c0 <MX_TIM1_Init+0x124>)
 80011fe:	f002 fd3f 	bl	8003c80 <HAL_TIM_PWM_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001208:	f7ff fe5b 	bl	8000ec2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001218:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800121c:	4619      	mov	r1, r3
 800121e:	4828      	ldr	r0, [pc, #160]	; (80012c0 <MX_TIM1_Init+0x124>)
 8001220:	f003 fdc4 	bl	8004dac <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800122a:	f7ff fe4a 	bl	8000ec2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122e:	2360      	movs	r3, #96	; 0x60
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 8001232:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001238:	2300      	movs	r3, #0
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	481a      	ldr	r0, [pc, #104]	; (80012c0 <MX_TIM1_Init+0x124>)
 8001256:	f002 fee9 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001260:	f7ff fe2f 	bl	8000ec2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800128a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_TIM1_Init+0x124>)
 80012a2:	f003 fe19 	bl	8004ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012ac:	f7ff fe09 	bl	8000ec2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM1_Init+0x124>)
 80012b2:	f000 f899 	bl	80013e8 <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3760      	adds	r7, #96	; 0x60
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000e0 	.word	0x200000e0
 80012c4:	40012c00 	.word	0x40012c00

080012c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM2_Init+0x94>)
 80012e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM2_Init+0x94>)
 80012f0:	22aa      	movs	r2, #170	; 0xaa
 80012f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_TIM2_Init+0x94>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_TIM2_Init+0x94>)
 80012fc:	2214      	movs	r2, #20
 80012fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_TIM2_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_TIM2_Init+0x94>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_TIM2_Init+0x94>)
 800130e:	f002 fbe7 	bl	8003ae0 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001318:	f7ff fdd3 	bl	8000ec2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_TIM2_Init+0x94>)
 800132a:	f002 ff93 	bl	8004254 <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001334:	f7ff fdc5 	bl	8000ec2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_TIM2_Init+0x94>)
 8001346:	f003 fd31 	bl	8004dac <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001350:	f7ff fdb7 	bl	8000ec2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000012c 	.word	0x2000012c

08001360 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_TIM_PWM_MspInit+0x38>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10b      	bne.n	800138a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_TIM_PWM_MspInit+0x3c>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <HAL_TIM_PWM_MspInit+0x3c>)
 8001378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137c:	6613      	str	r3, [r2, #96]	; 0x60
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_TIM_PWM_MspInit+0x3c>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b0:	d113      	bne.n	80013da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_TIM_Base_MspInit+0x44>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_TIM_Base_MspInit+0x44>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6593      	str	r3, [r2, #88]	; 0x58
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_TIM_Base_MspInit+0x44>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	201c      	movs	r0, #28
 80013d0:	f000 fd23 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d4:	201c      	movs	r0, #28
 80013d6:	f000 fd3a 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_TIM_MspPostInit+0x68>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d11d      	bne.n	8001446 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_TIM_MspPostInit+0x6c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_TIM_MspPostInit+0x6c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_TIM_MspPostInit+0x6c>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_STEP_Pin;
 8001422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001426:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001434:	2306      	movs	r3, #6
 8001436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_STEP_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f000 fd1f 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40012c00 	.word	0x40012c00
 8001454:	40021000 	.word	0x40021000

08001458 <tmc2590_Init>:
		176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,201,202,203,204,205,206,
		207,207,208,209,210,211,212,212,213,214,215,215,216,217,218,218,219,220,220,221,222,223,223,224,225,225,226,226,227,228,228,229,
		229,230,231,231,232,232,233,233,234,234,235,235,236,236,237,237,238,238,238,239,239,240,240,240,241,241,241,242,242,242,243,243,
		243,244,244,244,244,245,245,245,245,246,246,246,246,246,247,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,248};

void tmc2590_Init(TMC2590_HandleTypeDef *phtmc2590, SPI_HandleTypeDef *hspi, GPIO_TypeDef *gpioPortNCS, uint16_t gpioPinNCS, GPIO_TypeDef *gpioPortDrvEnN, uint16_t gpioPinDrvEnN){
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	807b      	strh	r3, [r7, #2]
	uint8_t pData[3];
	phtmc2590->hspi = hspi;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	601a      	str	r2, [r3, #0]
	phtmc2590->gpioPinNCS = gpioPinNCS;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	809a      	strh	r2, [r3, #4]
	phtmc2590->gpioPortNCS = gpioPortNCS;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]
	phtmc2590->gpioPinDrvEnN = gpioPinDrvEnN;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800147c:	819a      	strh	r2, [r3, #12]
	phtmc2590->gpioPortDrvEnN = gpioPortDrvEnN;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a3a      	ldr	r2, [r7, #32]
 8001482:	611a      	str	r2, [r3, #16]

	tmc2590_SetPowerEnable(phtmc2590, SET);
 8001484:	2101      	movs	r1, #1
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f868 	bl	800155c <tmc2590_SetPowerEnable>
	tmc2590_SetnCS(phtmc2590, SET);
 800148c:	2101      	movs	r1, #1
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f852 	bl	8001538 <tmc2590_SetnCS>

	phtmc2590->drvCtrlRegister 			= 0x00000; // No Current
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
	phtmc2590->chopConfRegister			= 0b10011000000000001111; // 100 10
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4a22      	ldr	r2, [pc, #136]	; (8001528 <tmc2590_Init+0xd0>)
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
	phtmc2590->smartEnRegister 			= 0b10100000000000000000; // 101 0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
	phtmc2590->stallGuardCtrlRegister 	= 0b11000000000000011111;//0xD001F; // 110 1---- 11111
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a20      	ldr	r2, [pc, #128]	; (800152c <tmc2590_Init+0xd4>)
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
	phtmc2590->drvConfRegister 			= 0b11100000011110110000;//0xE0480; // 1110 0000 0100 1000 0000
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <tmc2590_Init+0xd8>)
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30

	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->drvCtrlRegister);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4619      	mov	r1, r3
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f886 	bl	80015cc <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80014c0:	2103      	movs	r1, #3
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f85f 	bl	8001586 <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->chopConfRegister);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 f87c 	bl	80015cc <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80014d4:	2103      	movs	r1, #3
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f855 	bl	8001586 <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->smartEnRegister);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	4619      	mov	r1, r3
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f872 	bl	80015cc <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80014e8:	2103      	movs	r1, #3
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f84b 	bl	8001586 <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->stallGuardCtrlRegister);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	4619      	mov	r1, r3
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f868 	bl	80015cc <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 80014fc:	2103      	movs	r1, #3
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f841 	bl	8001586 <tmc2590_TransmitReceive>
	tmc2590_SetTxBufferInt32(phtmc2590, phtmc2590->drvConfRegister);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4619      	mov	r1, r3
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 f85e 	bl	80015cc <tmc2590_SetTxBufferInt32>
	tmc2590_TransmitReceive(phtmc2590, TMC2590_CMD_SIZE);
 8001510:	2103      	movs	r1, #3
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f837 	bl	8001586 <tmc2590_TransmitReceive>

	HAL_TIM_Base_Start_IT(&htim2);
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <tmc2590_Init+0xdc>)
 800151a:	f002 fb39 	bl	8003b90 <HAL_TIM_Base_Start_IT>

}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	0009800f 	.word	0x0009800f
 800152c:	000c001f 	.word	0x000c001f
 8001530:	000e07b0 	.word	0x000e07b0
 8001534:	2000012c 	.word	0x2000012c

08001538 <tmc2590_SetnCS>:

void tmc2590_SetnCS(TMC2590_HandleTypeDef *phtmc2590, FlagStatus status){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(phtmc2590->gpioPortNCS, phtmc2590->gpioPinNCS, status);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6898      	ldr	r0, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	889b      	ldrh	r3, [r3, #4]
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	4619      	mov	r1, r3
 8001550:	f000 fe32 	bl	80021b8 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <tmc2590_SetPowerEnable>:

void tmc2590_SetPowerEnable(TMC2590_HandleTypeDef *phtmc2590, FlagStatus status){
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(phtmc2590->gpioPortDrvEnN, phtmc2590->gpioPinDrvEnN, 1-status);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6918      	ldr	r0, [r3, #16]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	8999      	ldrh	r1, [r3, #12]
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	f1c3 0301 	rsb	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	f000 fe1d 	bl	80021b8 <HAL_GPIO_WritePin>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <tmc2590_TransmitReceive>:


HAL_StatusTypeDef tmc2590_TransmitReceive(TMC2590_HandleTypeDef *phtmc2590, int size){
 8001586:	b590      	push	{r4, r7, lr}
 8001588:	b087      	sub	sp, #28
 800158a:	af02      	add	r7, sp, #8
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	tmc2590_SetnCS(phtmc2590, RESET);
 8001590:	2100      	movs	r1, #0
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffd0 	bl	8001538 <tmc2590_SetnCS>
	status = HAL_SPI_TransmitReceive(phtmc2590->hspi, phtmc2590->spiTxBuffer, phtmc2590->spiRxBuffer, size, HAL_MAX_DELAY);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f103 0114 	add.w	r1, r3, #20
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f103 021a 	add.w	r2, r3, #26
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80015b0:	9400      	str	r4, [sp, #0]
 80015b2:	f001 ff1e 	bl	80033f2 <HAL_SPI_TransmitReceive>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
	tmc2590_SetnCS(phtmc2590, SET);
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffbb 	bl	8001538 <tmc2590_SetnCS>
	}
	else{

	}

	return status;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}

080015cc <tmc2590_SetTxBufferInt32>:

void tmc2590_SetTxBuffer(TMC2590_HandleTypeDef *phtmc2590, uint8_t *pData, int size){
	memcpy(phtmc2590->spiTxBuffer, pData, size);
}

void tmc2590_SetTxBufferInt32(TMC2590_HandleTypeDef *phtmc2590, uint32_t data){
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	phtmc2590->spiTxBuffer[0] = (data >> 16) & 0xFF;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	0c1b      	lsrs	r3, r3, #16
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	751a      	strb	r2, [r3, #20]
	phtmc2590->spiTxBuffer[1] = (data >> 8) & 0xFF;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	755a      	strb	r2, [r3, #21]
	phtmc2590->spiTxBuffer[2] = (data >> 0) & 0xFF;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	759a      	strb	r2, [r3, #22]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_TIM_PeriodElapsedCallback>:

}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d102      	bne.n	8001618 <HAL_TIM_PeriodElapsedCallback+0x18>
		perioedElapsed_IT = 1;
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
	}
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	200001ac 	.word	0x200001ac

08001628 <sendOrderStepper>:

int sendOrderStepper(int inputOrder, Stepper * stepper){
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
	/*
	 * We need to put in input how much we want to turn in degrees and what stepper we want to move
	 * For the moment, we have only one stepper but witch nCS signal, we will be able to change with
	 * stepper we want to communicate
	 */
	int polarity = (inputOrder>0);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	bfcc      	ite	gt
 8001638:	2301      	movgt	r3, #1
 800163a:	2300      	movle	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	613b      	str	r3, [r7, #16]
	int order = (int) abs(inputOrder)*142.2;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	bfb8      	it	lt
 8001646:	425b      	neglt	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f8bd 	bl	80007c8 <__aeabi_i2d>
 800164e:	a37a      	add	r3, pc, #488	; (adr r3, 8001838 <sendOrderStepper+0x210>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe fe3c 	bl	80002d0 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff f91c 	bl	800089c <__aeabi_d2iz>
 8001664:	4603      	mov	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]
	int indice = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
	stepper->angularPosition += inputOrder;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	441a      	add	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	609a      	str	r2, [r3, #8]
	if (stepper->angularPosition >= stepper->angularPositionMax){
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	f2c0 80ba 	blt.w	80017fa <sendOrderStepper+0x1d2>
		stepper->angularPosition -= inputOrder;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	1ad2      	subs	r2, r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	609a      	str	r2, [r3, #8]
		return 0;
 8001692:	2300      	movs	r3, #0
 8001694:	e0b7      	b.n	8001806 <sendOrderStepper+0x1de>
	}
	while (indice != order){
		uint32_t stateInterruption = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8001696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169a:	485d      	ldr	r0, [pc, #372]	; (8001810 <sendOrderStepper+0x1e8>)
 800169c:	f000 fd74 	bl	8002188 <HAL_GPIO_ReadPin>
 80016a0:	4603      	mov	r3, r0
 80016a2:	60bb      	str	r3, [r7, #8]
		if (stateInterruption != 0 && !polarity){
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <sendOrderStepper+0x8c>
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <sendOrderStepper+0x8c>
			return 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e0a8      	b.n	8001806 <sendOrderStepper+0x1de>
		}

		if(perioedElapsed_IT){
 80016b4:	4b57      	ldr	r3, [pc, #348]	; (8001814 <sendOrderStepper+0x1ec>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 809e 	beq.w	80017fa <sendOrderStepper+0x1d2>
				if(index_sin_loop < 256){
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <sendOrderStepper+0x1f0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	dc15      	bgt.n	80016f2 <sendOrderStepper+0xca>
					currentCoilA = sinTable[index_sin_loop];
 80016c6:	4b54      	ldr	r3, [pc, #336]	; (8001818 <sendOrderStepper+0x1f0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a54      	ldr	r2, [pc, #336]	; (800181c <sendOrderStepper+0x1f4>)
 80016cc:	5cd2      	ldrb	r2, [r2, r3]
 80016ce:	4b54      	ldr	r3, [pc, #336]	; (8001820 <sendOrderStepper+0x1f8>)
 80016d0:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[256-index_sin_loop];
 80016d2:	4b51      	ldr	r3, [pc, #324]	; (8001818 <sendOrderStepper+0x1f0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80016da:	4a50      	ldr	r2, [pc, #320]	; (800181c <sendOrderStepper+0x1f4>)
 80016dc:	5cd2      	ldrb	r2, [r2, r3]
 80016de:	4b51      	ldr	r3, [pc, #324]	; (8001824 <sendOrderStepper+0x1fc>)
 80016e0:	701a      	strb	r2, [r3, #0]
					polarityCoilA = polarity;
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b50      	ldr	r3, [pc, #320]	; (8001828 <sendOrderStepper+0x200>)
 80016e8:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 1;
 80016ea:	4b50      	ldr	r3, [pc, #320]	; (800182c <sendOrderStepper+0x204>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e056      	b.n	80017a0 <sendOrderStepper+0x178>
				}
				else if(index_sin_loop < 512){
 80016f2:	4b49      	ldr	r3, [pc, #292]	; (8001818 <sendOrderStepper+0x1f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fa:	da17      	bge.n	800172c <sendOrderStepper+0x104>
					currentCoilA = sinTable[512-index_sin_loop];
 80016fc:	4b46      	ldr	r3, [pc, #280]	; (8001818 <sendOrderStepper+0x1f0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001704:	4a45      	ldr	r2, [pc, #276]	; (800181c <sendOrderStepper+0x1f4>)
 8001706:	5cd2      	ldrb	r2, [r2, r3]
 8001708:	4b45      	ldr	r3, [pc, #276]	; (8001820 <sendOrderStepper+0x1f8>)
 800170a:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[index_sin_loop-256];
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <sendOrderStepper+0x1f0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001714:	4a41      	ldr	r2, [pc, #260]	; (800181c <sendOrderStepper+0x1f4>)
 8001716:	5cd2      	ldrb	r2, [r2, r3]
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <sendOrderStepper+0x1fc>)
 800171a:	701a      	strb	r2, [r3, #0]
					polarityCoilA = polarity;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b41      	ldr	r3, [pc, #260]	; (8001828 <sendOrderStepper+0x200>)
 8001722:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 0;
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <sendOrderStepper+0x204>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e039      	b.n	80017a0 <sendOrderStepper+0x178>
				}
				else if(index_sin_loop < 768){
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <sendOrderStepper+0x1f0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001734:	da1a      	bge.n	800176c <sendOrderStepper+0x144>
					currentCoilA = sinTable[index_sin_loop-512];
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <sendOrderStepper+0x1f0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800173e:	4a37      	ldr	r2, [pc, #220]	; (800181c <sendOrderStepper+0x1f4>)
 8001740:	5cd2      	ldrb	r2, [r2, r3]
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <sendOrderStepper+0x1f8>)
 8001744:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[768-index_sin_loop];
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <sendOrderStepper+0x1f0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f5c3 7340 	rsb	r3, r3, #768	; 0x300
 800174e:	4a33      	ldr	r2, [pc, #204]	; (800181c <sendOrderStepper+0x1f4>)
 8001750:	5cd2      	ldrb	r2, [r2, r3]
 8001752:	4b34      	ldr	r3, [pc, #208]	; (8001824 <sendOrderStepper+0x1fc>)
 8001754:	701a      	strb	r2, [r3, #0]
					polarityCoilA = 1 - polarity;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f1c3 0301 	rsb	r3, r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <sendOrderStepper+0x200>)
 8001762:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 0;
 8001764:	4b31      	ldr	r3, [pc, #196]	; (800182c <sendOrderStepper+0x204>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e019      	b.n	80017a0 <sendOrderStepper+0x178>
				}
				else{
					currentCoilA = sinTable[1024-index_sin_loop];
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <sendOrderStepper+0x1f0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001774:	4a29      	ldr	r2, [pc, #164]	; (800181c <sendOrderStepper+0x1f4>)
 8001776:	5cd2      	ldrb	r2, [r2, r3]
 8001778:	4b29      	ldr	r3, [pc, #164]	; (8001820 <sendOrderStepper+0x1f8>)
 800177a:	701a      	strb	r2, [r3, #0]
					currentCoilB = sinTable[index_sin_loop-768];
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <sendOrderStepper+0x1f0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8001784:	4a25      	ldr	r2, [pc, #148]	; (800181c <sendOrderStepper+0x1f4>)
 8001786:	5cd2      	ldrb	r2, [r2, r3]
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <sendOrderStepper+0x1fc>)
 800178a:	701a      	strb	r2, [r3, #0]
					polarityCoilA = 1 - polarity;
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f1c3 0301 	rsb	r3, r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <sendOrderStepper+0x200>)
 8001798:	701a      	strb	r2, [r3, #0]
					polarityCoilB = 1;
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <sendOrderStepper+0x204>)
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
				}
				index_sin_loop = (index_sin_loop+1)%1024;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <sendOrderStepper+0x1f0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	425a      	negs	r2, r3
 80017a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017b0:	bf58      	it	pl
 80017b2:	4253      	negpl	r3, r2
 80017b4:	4a18      	ldr	r2, [pc, #96]	; (8001818 <sendOrderStepper+0x1f0>)
 80017b6:	6013      	str	r3, [r2, #0]
				indice++;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]

				drvCtrlCommand = (polarityCoilA << 17) | (currentCoilA << 9) | (polarityCoilB << 8) | (currentCoilB << 0);
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <sendOrderStepper+0x200>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	045a      	lsls	r2, r3, #17
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <sendOrderStepper+0x1f8>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	431a      	orrs	r2, r3
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <sendOrderStepper+0x204>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4313      	orrs	r3, r2
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <sendOrderStepper+0x1fc>)
 80017d6:	7812      	ldrb	r2, [r2, #0]
 80017d8:	4313      	orrs	r3, r2
 80017da:	461a      	mov	r2, r3
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <sendOrderStepper+0x208>)
 80017de:	601a      	str	r2, [r3, #0]
				tmc2590_SetTxBufferInt32(&htmc2590, drvCtrlCommand);
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <sendOrderStepper+0x208>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4813      	ldr	r0, [pc, #76]	; (8001834 <sendOrderStepper+0x20c>)
 80017e8:	f7ff fef0 	bl	80015cc <tmc2590_SetTxBufferInt32>
				tmc2590_TransmitReceive(&htmc2590, TMC2590_CMD_SIZE);
 80017ec:	2103      	movs	r1, #3
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <sendOrderStepper+0x20c>)
 80017f0:	f7ff fec9 	bl	8001586 <tmc2590_TransmitReceive>
				perioedElapsed_IT = 0;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <sendOrderStepper+0x1ec>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
	while (indice != order){
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	429a      	cmp	r2, r3
 8001800:	f47f af49 	bne.w	8001696 <sendOrderStepper+0x6e>
			}
	}
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	48000800 	.word	0x48000800
 8001814:	200001ac 	.word	0x200001ac
 8001818:	200001b0 	.word	0x200001b0
 800181c:	08006794 	.word	0x08006794
 8001820:	200001b4 	.word	0x200001b4
 8001824:	200001b5 	.word	0x200001b5
 8001828:	200001b6 	.word	0x200001b6
 800182c:	200001b7 	.word	0x200001b7
 8001830:	200001b8 	.word	0x200001b8
 8001834:	20000178 	.word	0x20000178
 8001838:	66666666 	.word	0x66666666
 800183c:	4061c666 	.word	0x4061c666

08001840 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <MX_USART2_UART_Init+0x94>)
 8001848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001888:	4811      	ldr	r0, [pc, #68]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800188a:	f003 fc1d 	bl	80050c8 <HAL_UART_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001894:	f7ff fb15 	bl	8000ec2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001898:	2100      	movs	r1, #0
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 800189c:	f004 f9e4 	bl	8005c68 <HAL_UARTEx_SetTxFifoThreshold>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018a6:	f7ff fb0c 	bl	8000ec2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018aa:	2100      	movs	r1, #0
 80018ac:	4808      	ldr	r0, [pc, #32]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 80018ae:	f004 fa19 	bl	8005ce4 <HAL_UARTEx_SetRxFifoThreshold>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018b8:	f7ff fb03 	bl	8000ec2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_USART2_UART_Init+0x90>)
 80018be:	f004 f99a 	bl	8005bf6 <HAL_UARTEx_DisableFifoMode>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018c8:	f7ff fafb 	bl	8000ec2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200001bc 	.word	0x200001bc
 80018d4:	40004400 	.word	0x40004400

080018d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <MX_USART3_UART_Init+0x94>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_USART3_UART_Init+0x90>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_USART3_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_USART3_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001922:	f003 fbd1 	bl	80050c8 <HAL_UART_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800192c:	f7ff fac9 	bl	8000ec2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001934:	f004 f998 	bl	8005c68 <HAL_UARTEx_SetTxFifoThreshold>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800193e:	f7ff fac0 	bl	8000ec2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	4808      	ldr	r0, [pc, #32]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001946:	f004 f9cd 	bl	8005ce4 <HAL_UARTEx_SetRxFifoThreshold>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001950:	f7ff fab7 	bl	8000ec2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_USART3_UART_Init+0x90>)
 8001956:	f004 f94e 	bl	8005bf6 <HAL_UARTEx_DisableFifoMode>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001960:	f7ff faaf 	bl	8000ec2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000024c 	.word	0x2000024c
 800196c:	40004800 	.word	0x40004800

08001970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b0a2      	sub	sp, #136	; 0x88
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0320 	add.w	r3, r7, #32
 800198c:	2254      	movs	r2, #84	; 0x54
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f004 fa53 	bl	8005e3c <memset>
  if(uartHandle->Instance==USART2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a4f      	ldr	r2, [pc, #316]	; (8001ad8 <HAL_UART_MspInit+0x168>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d13a      	bne.n	8001a16 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 fa27 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b8:	f7ff fa83 	bl	8000ec2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019bc:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_UART_MspInit+0x16c>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a46      	ldr	r2, [pc, #280]	; (8001adc <HAL_UART_MspInit+0x16c>)
 80019c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
 80019c8:	4b44      	ldr	r3, [pc, #272]	; (8001adc <HAL_UART_MspInit+0x16c>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b41      	ldr	r3, [pc, #260]	; (8001adc <HAL_UART_MspInit+0x16c>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	4a40      	ldr	r2, [pc, #256]	; (8001adc <HAL_UART_MspInit+0x16c>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e0:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <HAL_UART_MspInit+0x16c>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80019ec:	f248 0304 	movw	r3, #32772	; 0x8004
 80019f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a00:	2307      	movs	r3, #7
 8001a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f000 fa38 	bl	8001e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a14:	e05c      	b.n	8001ad0 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART3)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <HAL_UART_MspInit+0x170>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d157      	bne.n	8001ad0 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a20:	2304      	movs	r3, #4
 8001a22:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 f9e7 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_UART_MspInit+0xcc>
      Error_Handler();
 8001a38:	f7ff fa43 	bl	8000ec2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a46:	6593      	str	r3, [r2, #88]	; 0x58
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_UART_MspInit+0x16c>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a88:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a98:	2307      	movs	r3, #7
 8001a9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <HAL_UART_MspInit+0x174>)
 8001aa6:	f000 f9ed 	bl	8001e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001abe:	2307      	movs	r3, #7
 8001ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <HAL_UART_MspInit+0x178>)
 8001acc:	f000 f9da 	bl	8001e84 <HAL_GPIO_Init>
}
 8001ad0:	bf00      	nop
 8001ad2:	3788      	adds	r7, #136	; 0x88
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40004800 	.word	0x40004800
 8001ae4:	48000800 	.word	0x48000800
 8001ae8:	48000400 	.word	0x48000400

08001aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopForever+0xe>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopForever+0x16>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b16:	f7ff fb2f 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f004 f99d 	bl	8005e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b1e:	f7ff f921 	bl	8000d64 <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   r0, =_estack
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b30:	08006900 	.word	0x08006900
  ldr r2, =_sbss
 8001b34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b38:	20000428 	.word	0x20000428

08001b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_2_IRQHandler>

08001b3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 f95b 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f80e 	bl	8001b70 <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	e001      	b.n	8001b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b60:	f7ff fa74 	bl	800104c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b64:	79fb      	ldrb	r3, [r7, #7]

}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_InitTick+0x68>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d022      	beq.n	8001bca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_InitTick+0x6c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_InitTick+0x68>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f966 	bl	8001e6a <HAL_SYSTICK_Config>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10f      	bne.n	8001bc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	d809      	bhi.n	8001bbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001baa:	2200      	movs	r2, #0
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bb2:	f000 f932 	bl	8001e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_InitTick+0x70>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e004      	b.n	8001bce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e001      	b.n	8001bce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_IncTick+0x1c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_IncTick+0x20>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <HAL_IncTick+0x1c>)
 8001bf4:	6013      	str	r3, [r2, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	200002dc 	.word	0x200002dc
 8001c04:	20000008 	.word	0x20000008

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200002dc 	.word	0x200002dc

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff ffee 	bl	8001c08 <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c38:	d004      	beq.n	8001c44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_Delay+0x40>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c44:	bf00      	nop
 8001c46:	f7ff ffdf 	bl	8001c08 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d8f7      	bhi.n	8001c46 <HAL_Delay+0x26>
  {
  }
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000008 	.word	0x20000008

08001c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4907      	ldr	r1, [pc, #28]	; (8001d00 <__NVIC_EnableIRQ+0x38>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff29 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff40 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff90 	bl	8001d58 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5f 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff33 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa4 	bl	8001dc0 <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e92:	e15a      	b.n	800214a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 814c 	beq.w	8002144 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d005      	beq.n	8001ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d130      	bne.n	8001f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efa:	2201      	movs	r2, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f003 0201 	and.w	r2, r3, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d017      	beq.n	8001f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d123      	bne.n	8001fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0203 	and.w	r2, r3, #3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80a6 	beq.w	8002144 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <HAL_GPIO_Init+0x2e4>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	4a5a      	ldr	r2, [pc, #360]	; (8002168 <HAL_GPIO_Init+0x2e4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6613      	str	r3, [r2, #96]	; 0x60
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HAL_GPIO_Init+0x2e4>)
 8002006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002010:	4a56      	ldr	r2, [pc, #344]	; (800216c <HAL_GPIO_Init+0x2e8>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800203a:	d01f      	beq.n	800207c <HAL_GPIO_Init+0x1f8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d019      	beq.n	8002078 <HAL_GPIO_Init+0x1f4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x1f0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <HAL_GPIO_Init+0x2f4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1ec>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_GPIO_Init+0x2f8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1e8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_GPIO_Init+0x2fc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1e4>
 8002064:	2305      	movs	r3, #5
 8002066:	e00a      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 8002068:	2306      	movs	r3, #6
 800206a:	e008      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 800206c:	2304      	movs	r3, #4
 800206e:	e006      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 8002070:	2303      	movs	r3, #3
 8002072:	e004      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 8002074:	2302      	movs	r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_GPIO_Init+0x1fa>
 800207c:	2300      	movs	r3, #0
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208e:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_GPIO_Init+0x2e8>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_GPIO_Init+0x300>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c0:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_GPIO_Init+0x300>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x300>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ea:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_GPIO_Init+0x300>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_GPIO_Init+0x300>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002114:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_GPIO_Init+0x300>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x300>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_GPIO_Init+0x300>)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	f47f ae9d 	bne.w	8001e94 <HAL_GPIO_Init+0x10>
  }
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40021000 	.word	0x40021000
 800216c:	40010000 	.word	0x40010000
 8002170:	48000400 	.word	0x48000400
 8002174:	48000800 	.word	0x48000800
 8002178:	48000c00 	.word	0x48000c00
 800217c:	48001000 	.word	0x48001000
 8002180:	48001400 	.word	0x48001400
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f806 	bl	8002218 <HAL_GPIO_EXTI_Callback>
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40010400 	.word	0x40010400

08002218 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d141      	bne.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800223e:	4b4b      	ldr	r3, [pc, #300]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224a:	d131      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800224c:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002252:	4a46      	ldr	r2, [pc, #280]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002264:	4a41      	ldr	r2, [pc, #260]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800226c:	4b40      	ldr	r3, [pc, #256]	; (8002370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2232      	movs	r2, #50	; 0x32
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002282:	e002      	b.n	800228a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3b01      	subs	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228a:	4b38      	ldr	r3, [pc, #224]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002296:	d102      	bne.n	800229e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f2      	bne.n	8002284 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022aa:	d158      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e057      	b.n	8002360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022b6:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022c0:	e04d      	b.n	800235e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c8:	d141      	bne.n	800234e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ca:	4b28      	ldr	r3, [pc, #160]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d131      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022de:	4a23      	ldr	r2, [pc, #140]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022f0:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2232      	movs	r2, #50	; 0x32
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	4a1c      	ldr	r2, [pc, #112]	; (8002374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	3301      	adds	r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230e:	e002      	b.n	8002316 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3b01      	subs	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d102      	bne.n	800232a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f2      	bne.n	8002310 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d112      	bne.n	800235e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e011      	b.n	8002360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800234c:	e007      	b.n	800235e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40007000 	.word	0x40007000
 8002370:	20000000 	.word	0x20000000
 8002374:	431bde83 	.word	0x431bde83

08002378 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002386:	6093      	str	r3, [r2, #8]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000

08002398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e306      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d075      	beq.n	80024a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b6:	4b97      	ldr	r3, [pc, #604]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c0:	4b94      	ldr	r3, [pc, #592]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3e>
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d002      	beq.n	80023dc <HAL_RCC_OscConfig+0x44>
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d10b      	bne.n	80023f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	4b8d      	ldr	r3, [pc, #564]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05b      	beq.n	80024a0 <HAL_RCC_OscConfig+0x108>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d157      	bne.n	80024a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e2e1      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x74>
 80023fe:	4b85      	ldr	r3, [pc, #532]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a84      	ldr	r2, [pc, #528]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xb0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x98>
 8002416:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7e      	ldr	r2, [pc, #504]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b7c      	ldr	r3, [pc, #496]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7b      	ldr	r2, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xb0>
 8002430:	4b78      	ldr	r3, [pc, #480]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a77      	ldr	r2, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b75      	ldr	r3, [pc, #468]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a74      	ldr	r2, [pc, #464]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff fbda 	bl	8001c08 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff fbd6 	bl	8001c08 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e2a6      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246a:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xc0>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7ff fbc6 	bl	8001c08 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fbc2 	bl	8001c08 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e292      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002492:	4b60      	ldr	r3, [pc, #384]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0xe8>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d075      	beq.n	800259a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ae:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b8:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_OscConfig+0x136>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_OscConfig+0x13c>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d11f      	bne.n	8002514 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d4:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_OscConfig+0x154>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e265      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b49      	ldr	r3, [pc, #292]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	4946      	ldr	r1, [pc, #280]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002500:	4b45      	ldr	r3, [pc, #276]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fb33 	bl	8001b70 <HAL_InitTick>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d043      	beq.n	8002598 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e251      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d023      	beq.n	8002564 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251c:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a3c      	ldr	r2, [pc, #240]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7ff fb6e 	bl	8001c08 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002530:	f7ff fb6a 	bl	8001c08 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e23a      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002542:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	061b      	lsls	r3, r3, #24
 800255c:	492d      	ldr	r1, [pc, #180]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
 8002562:	e01a      	b.n	800259a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 800256a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff fb4a 	bl	8001c08 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002578:	f7ff fb46 	bl	8001c08 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e216      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1e0>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d041      	beq.n	800262a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7ff fb23 	bl	8001c08 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c6:	f7ff fb1f 	bl	8001c08 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1ef      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0ef      	beq.n	80025c6 <HAL_RCC_OscConfig+0x22e>
 80025e6:	e020      	b.n	800262a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_OscConfig+0x27c>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff fb06 	bl	8001c08 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025fe:	e00d      	b.n	800261c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff fb02 	bl	8001c08 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d906      	bls.n	800261c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1d2      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	4b8c      	ldr	r3, [pc, #560]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ea      	bne.n	8002600 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80a6 	beq.w	8002784 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x2b4>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x2b6>
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	4b7f      	ldr	r3, [pc, #508]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	4a7e      	ldr	r2, [pc, #504]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
 800265e:	4b7c      	ldr	r3, [pc, #496]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266e:	4b79      	ldr	r3, [pc, #484]	; (8002854 <HAL_RCC_OscConfig+0x4bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800267a:	4b76      	ldr	r3, [pc, #472]	; (8002854 <HAL_RCC_OscConfig+0x4bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a75      	ldr	r2, [pc, #468]	; (8002854 <HAL_RCC_OscConfig+0x4bc>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7ff fabf 	bl	8001c08 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7ff fabb 	bl	8001c08 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e18b      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a0:	4b6c      	ldr	r3, [pc, #432]	; (8002854 <HAL_RCC_OscConfig+0x4bc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d108      	bne.n	80026c6 <HAL_RCC_OscConfig+0x32e>
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026c4:	e024      	b.n	8002710 <HAL_RCC_OscConfig+0x378>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d110      	bne.n	80026f0 <HAL_RCC_OscConfig+0x358>
 80026ce:	4b60      	ldr	r3, [pc, #384]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	4a5e      	ldr	r2, [pc, #376]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_OscConfig+0x378>
 80026f0:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a56      	ldr	r2, [pc, #344]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d016      	beq.n	8002746 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7ff fa76 	bl	8001c08 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7ff fa72 	bl	8001c08 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e140      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ed      	beq.n	8002720 <HAL_RCC_OscConfig+0x388>
 8002744:	e015      	b.n	8002772 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7ff fa5f 	bl	8001c08 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff fa5b 	bl	8001c08 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e129      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002764:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ed      	bne.n	800274e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002772:	7ffb      	ldrb	r3, [r7, #31]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002782:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d03c      	beq.n	800280a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002798:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 800279a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279e:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7ff fa2e 	bl	8001c08 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b0:	f7ff fa2a 	bl	8001c08 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0fa      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80027c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <HAL_RCC_OscConfig+0x418>
 80027d0:	e01b      	b.n	800280a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80027d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7ff fa11 	bl	8001c08 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ea:	f7ff fa0d 	bl	8001c08 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0dd      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 80027fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80d1 	beq.w	80029b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b0c      	cmp	r3, #12
 800281e:	f000 808b 	beq.w	8002938 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d15e      	bne.n	80028e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a08      	ldr	r2, [pc, #32]	; (8002850 <HAL_RCC_OscConfig+0x4b8>)
 8002830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7ff f9e7 	bl	8001c08 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283c:	e00c      	b.n	8002858 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283e:	f7ff f9e3 	bl	8001c08 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d905      	bls.n	8002858 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0b3      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ec      	bne.n	800283e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	4b56      	ldr	r3, [pc, #344]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b56      	ldr	r3, [pc, #344]	; (80029c4 <HAL_RCC_OscConfig+0x62c>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6a11      	ldr	r1, [r2, #32]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002874:	3a01      	subs	r2, #1
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	4311      	orrs	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800287e:	0212      	lsls	r2, r2, #8
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002886:	0852      	lsrs	r2, r2, #1
 8002888:	3a01      	subs	r2, #1
 800288a:	0552      	lsls	r2, r2, #21
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002892:	0852      	lsrs	r2, r2, #1
 8002894:	3a01      	subs	r2, #1
 8002896:	0652      	lsls	r2, r2, #25
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800289e:	06d2      	lsls	r2, r2, #27
 80028a0:	430a      	orrs	r2, r1
 80028a2:	4947      	ldr	r1, [pc, #284]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	4b45      	ldr	r3, [pc, #276]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a44      	ldr	r2, [pc, #272]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b4:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a41      	ldr	r2, [pc, #260]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff f9a2 	bl	8001c08 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7ff f99e 	bl	8001c08 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e06e      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x530>
 80028e6:	e066      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a2e      	ldr	r2, [pc, #184]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002906:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7ff f97a 	bl	8001c08 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7ff f976 	bl	8001c08 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e046      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x580>
 8002936:	e03e      	b.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e039      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_RCC_OscConfig+0x628>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	429a      	cmp	r2, r3
 8002956:	d12c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	3b01      	subs	r3, #1
 8002964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d123      	bne.n	80029b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11b      	bne.n	80029b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d113      	bne.n	80029b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	3b01      	subs	r3, #1
 80029ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	019f800c 	.word	0x019f800c

080029c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e11e      	b.n	8002c1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b91      	ldr	r3, [pc, #580]	; (8002c28 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b8e      	ldr	r3, [pc, #568]	; (8002c28 <HAL_RCC_ClockConfig+0x260>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 020f 	bic.w	r2, r3, #15
 80029f6:	498c      	ldr	r1, [pc, #560]	; (8002c28 <HAL_RCC_ClockConfig+0x260>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b8a      	ldr	r3, [pc, #552]	; (8002c28 <HAL_RCC_ClockConfig+0x260>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e106      	b.n	8002c1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d073      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d129      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a24:	4b81      	ldr	r3, [pc, #516]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0f4      	b.n	8002c1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a34:	f000 f99e 	bl	8002d74 <RCC_GetSysClockFreqFromPLLSource>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4a7c      	ldr	r2, [pc, #496]	; (8002c30 <HAL_RCC_ClockConfig+0x268>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d93f      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a42:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d033      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d12f      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a62:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6a:	4a70      	ldr	r2, [pc, #448]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e024      	b.n	8002ac2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a80:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0c6      	b.n	8002c1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a90:	4b66      	ldr	r3, [pc, #408]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0be      	b.n	8002c1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002aa0:	f000 f8ce 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4a61      	ldr	r2, [pc, #388]	; (8002c30 <HAL_RCC_ClockConfig+0x268>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d909      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aae:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ab6:	4a5d      	ldr	r2, [pc, #372]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b5a      	ldr	r3, [pc, #360]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4957      	ldr	r1, [pc, #348]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad4:	f7ff f898 	bl	8001c08 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7ff f894 	bl	8001c08 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e095      	b.n	8002c1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b4e      	ldr	r3, [pc, #312]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d023      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a42      	ldr	r2, [pc, #264]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b3c:	4a3b      	ldr	r2, [pc, #236]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002b3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4936      	ldr	r1, [pc, #216]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d105      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b5e:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4a32      	ldr	r2, [pc, #200]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d21d      	bcs.n	8002bb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_RCC_ClockConfig+0x260>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 020f 	bic.w	r2, r3, #15
 8002b80:	4929      	ldr	r1, [pc, #164]	; (8002c28 <HAL_RCC_ClockConfig+0x260>)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b88:	f7ff f83e 	bl	8001c08 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7ff f83a 	bl	8001c08 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e03b      	b.n	8002c1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1ed      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4917      	ldr	r1, [pc, #92]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	490f      	ldr	r1, [pc, #60]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bf2:	f000 f825 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_RCC_ClockConfig+0x264>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	490c      	ldr	r1, [pc, #48]	; (8002c34 <HAL_RCC_ClockConfig+0x26c>)
 8002c04:	5ccb      	ldrb	r3, [r1, r3]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x270>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_RCC_ClockConfig+0x274>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe ffaa 	bl	8001b70 <HAL_InitTick>
 8002c1c:	4603      	mov	r3, r0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	04c4b400 	.word	0x04c4b400
 8002c34:	0800677c 	.word	0x0800677c
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	20000004 	.word	0x20000004

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d102      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c52:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	e047      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d102      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e03e      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d136      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d10c      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c94:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c9e:	68d2      	ldr	r2, [r2, #12]
 8002ca0:	0a12      	lsrs	r2, r2, #8
 8002ca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
      break;
 8002cac:	e00c      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	0a12      	lsrs	r2, r2, #8
 8002cbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]
      break;
 8002cc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0e5b      	lsrs	r3, r3, #25
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e001      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ce8:	693b      	ldr	r3, [r7, #16]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	016e3600 	.word	0x016e3600

08002d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d20:	f7ff fff0 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	0800678c 	.word	0x0800678c

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d4c:	f7ff ffda 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4904      	ldr	r1, [pc, #16]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	0800678c 	.word	0x0800678c

08002d74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d10c      	bne.n	8002db2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002da2:	68d2      	ldr	r2, [r2, #12]
 8002da4:	0a12      	lsrs	r2, r2, #8
 8002da6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	617b      	str	r3, [r7, #20]
    break;
 8002db0:	e00c      	b.n	8002dcc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	0a12      	lsrs	r2, r2, #8
 8002dc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    break;
 8002dca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0e5b      	lsrs	r3, r3, #25
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002de6:	687b      	ldr	r3, [r7, #4]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40021000 	.word	0x40021000
 8002df8:	016e3600 	.word	0x016e3600
 8002dfc:	00f42400 	.word	0x00f42400

08002e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e08:	2300      	movs	r3, #0
 8002e0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8098 	beq.w	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	4a3f      	ldr	r2, [pc, #252]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a39      	ldr	r2, [pc, #228]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e56:	f7fe fed7 	bl	8001c08 <HAL_GetTick>
 8002e5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e5c:	e009      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fe fed3 	bl	8001c08 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d902      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	74fb      	strb	r3, [r7, #19]
        break;
 8002e70:	e005      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ef      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d159      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e84:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01e      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d019      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eaa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ecc:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe fe93 	bl	8001c08 <HAL_GetTick>
 8002ee2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee4:	e00b      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe fe8f 	bl	8001c08 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d902      	bls.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	74fb      	strb	r3, [r7, #19]
            break;
 8002efc:	e006      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ec      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10b      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f28:	e008      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	74bb      	strb	r3, [r7, #18]
 8002f2e:	e005      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f3c:	7c7b      	ldrb	r3, [r7, #17]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f42:	4ba7      	ldr	r3, [pc, #668]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	4aa6      	ldr	r2, [pc, #664]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f5a:	4ba1      	ldr	r3, [pc, #644]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f023 0203 	bic.w	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	499d      	ldr	r1, [pc, #628]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f7c:	4b98      	ldr	r3, [pc, #608]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f023 020c 	bic.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	4995      	ldr	r1, [pc, #596]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f9e:	4b90      	ldr	r3, [pc, #576]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	498c      	ldr	r1, [pc, #560]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fc0:	4b87      	ldr	r3, [pc, #540]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	4984      	ldr	r1, [pc, #528]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fe2:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	497b      	ldr	r1, [pc, #492]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003004:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	4973      	ldr	r1, [pc, #460]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003026:	4b6e      	ldr	r3, [pc, #440]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	496a      	ldr	r1, [pc, #424]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003048:	4b65      	ldr	r3, [pc, #404]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4962      	ldr	r1, [pc, #392]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800306a:	4b5d      	ldr	r3, [pc, #372]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	4959      	ldr	r1, [pc, #356]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800308c:	4b54      	ldr	r3, [pc, #336]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	4951      	ldr	r1, [pc, #324]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ae:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	4948      	ldr	r1, [pc, #288]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4940      	ldr	r1, [pc, #256]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d105      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f0:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	4932      	ldr	r1, [pc, #200]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003126:	d105      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003132:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	4924      	ldr	r1, [pc, #144]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315e:	d105      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800316a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	4916      	ldr	r1, [pc, #88]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003196:	d105      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d019      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ce:	d109      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4a02      	ldr	r2, [pc, #8]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031da:	60d3      	str	r3, [r2, #12]
 80031dc:	e002      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d015      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031f0:	4b29      	ldr	r3, [pc, #164]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	4926      	ldr	r1, [pc, #152]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320e:	d105      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a20      	ldr	r2, [pc, #128]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	4918      	ldr	r1, [pc, #96]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d105      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	490a      	ldr	r1, [pc, #40]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800327e:	d105      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a04      	ldr	r2, [pc, #16]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800328a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800328c:	7cbb      	ldrb	r3, [r7, #18]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e09d      	b.n	80033ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032be:	d009      	beq.n	80032d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
 80032c6:	e005      	b.n	80032d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fe2a 	bl	8000f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003314:	d902      	bls.n	800331c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e002      	b.n	8003322 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800331c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003320:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800332a:	d007      	beq.n	800333c <HAL_SPI_Init+0xa0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003334:	d002      	beq.n	800333c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	ea42 0103 	orr.w	r1, r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	f003 0204 	and.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033b8:	ea42 0103 	orr.w	r1, r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b08a      	sub	sp, #40	; 0x28
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003400:	2301      	movs	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x26>
 8003414:	2302      	movs	r3, #2
 8003416:	e1fb      	b.n	8003810 <HAL_SPI_TransmitReceive+0x41e>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003420:	f7fe fbf2 	bl	8001c08 <HAL_GetTick>
 8003424:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800342c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800343c:	7efb      	ldrb	r3, [r7, #27]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d00e      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x6e>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003448:	d106      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x66>
 8003452:	7efb      	ldrb	r3, [r7, #27]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d003      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003458:	2302      	movs	r3, #2
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800345e:	e1cd      	b.n	80037fc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x80>
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003478:	e1c0      	b.n	80037fc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b04      	cmp	r3, #4
 8003484:	d003      	beq.n	800348e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2205      	movs	r2, #5
 800348a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	887a      	ldrh	r2, [r7, #2]
 800349e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	887a      	ldrh	r2, [r7, #2]
 80034a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	887a      	ldrh	r2, [r7, #2]
 80034ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d0:	d802      	bhi.n	80034d8 <HAL_SPI_TransmitReceive+0xe6>
 80034d2:	8a3b      	ldrh	r3, [r7, #16]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d908      	bls.n	80034ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	e007      	b.n	80034fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d007      	beq.n	8003518 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003520:	d97c      	bls.n	800361c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x13e>
 800352a:	8a7b      	ldrh	r3, [r7, #18]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d169      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	881a      	ldrh	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	1c9a      	adds	r2, r3, #2
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003554:	e056      	b.n	8003604 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b02      	cmp	r3, #2
 8003562:	d11b      	bne.n	800359c <HAL_SPI_TransmitReceive+0x1aa>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d016      	beq.n	800359c <HAL_SPI_TransmitReceive+0x1aa>
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	2b01      	cmp	r3, #1
 8003572:	d113      	bne.n	800359c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	881a      	ldrh	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	1c9a      	adds	r2, r3, #2
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d11c      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x1f2>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	b292      	uxth	r2, r2
 80035c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035e0:	2301      	movs	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035e4:	f7fe fb10 	bl	8001c08 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d807      	bhi.n	8003604 <HAL_SPI_TransmitReceive+0x212>
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fa:	d003      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003602:	e0fb      	b.n	80037fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1a3      	bne.n	8003556 <HAL_SPI_TransmitReceive+0x164>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d19d      	bne.n	8003556 <HAL_SPI_TransmitReceive+0x164>
 800361a:	e0df      	b.n	80037dc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_SPI_TransmitReceive+0x23a>
 8003624:	8a7b      	ldrh	r3, [r7, #18]
 8003626:	2b01      	cmp	r3, #1
 8003628:	f040 80cb 	bne.w	80037c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d912      	bls.n	800365c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	881a      	ldrh	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	1c9a      	adds	r2, r3, #2
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b02      	subs	r3, #2
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	87da      	strh	r2, [r3, #62]	; 0x3e
 800365a:	e0b2      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003682:	e09e      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d134      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x30a>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02f      	beq.n	80036fc <HAL_SPI_TransmitReceive+0x30a>
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d12c      	bne.n	80036fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d912      	bls.n	80036d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	881a      	ldrh	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	1c9a      	adds	r2, r3, #2
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b02      	subs	r3, #2
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036d0:	e012      	b.n	80036f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d148      	bne.n	800379c <HAL_SPI_TransmitReceive+0x3aa>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d042      	beq.n	800379c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d923      	bls.n	800376a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	b292      	uxth	r2, r2
 800372e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	1c9a      	adds	r2, r3, #2
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b02      	subs	r3, #2
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d81f      	bhi.n	8003798 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	e016      	b.n	8003798 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f103 020c 	add.w	r2, r3, #12
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003798:	2301      	movs	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800379c:	f7fe fa34 	bl	8001c08 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d803      	bhi.n	80037b4 <HAL_SPI_TransmitReceive+0x3c2>
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b2:	d102      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x3c8>
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037c0:	e01c      	b.n	80037fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f af5b 	bne.w	8003684 <HAL_SPI_TransmitReceive+0x292>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f47f af54 	bne.w	8003684 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f937 	bl	8003a54 <SPI_EndRxTxTransaction>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	661a      	str	r2, [r3, #96]	; 0x60
 80037f8:	e000      	b.n	80037fc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80037fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800380c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003810:	4618      	mov	r0, r3
 8003812:	3728      	adds	r7, #40	; 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003828:	f7fe f9ee 	bl	8001c08 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4413      	add	r3, r2
 8003836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003838:	f7fe f9e6 	bl	8001c08 <HAL_GetTick>
 800383c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	015b      	lsls	r3, r3, #5
 8003844:	0d1b      	lsrs	r3, r3, #20
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384e:	e054      	b.n	80038fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003856:	d050      	beq.n	80038fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003858:	f7fe f9d6 	bl	8001c08 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	429a      	cmp	r2, r3
 8003866:	d902      	bls.n	800386e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d13d      	bne.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800387c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003886:	d111      	bne.n	80038ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003890:	d004      	beq.n	800389c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d107      	bne.n	80038ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b4:	d10f      	bne.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e017      	b.n	800391a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d19b      	bne.n	8003850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000000 	.word	0x20000000

08003928 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800393a:	f7fe f965 	bl	8001c08 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	4413      	add	r3, r2
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800394a:	f7fe f95d 	bl	8001c08 <HAL_GetTick>
 800394e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00da      	lsls	r2, r3, #3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	0d1b      	lsrs	r3, r3, #20
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003970:	e060      	b.n	8003a34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003978:	d107      	bne.n	800398a <SPI_WaitFifoStateUntilTimeout+0x62>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d104      	bne.n	800398a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003988:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003990:	d050      	beq.n	8003a34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003992:	f7fe f939 	bl	8001c08 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	429a      	cmp	r2, r3
 80039a0:	d902      	bls.n	80039a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d13d      	bne.n	8003a24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c0:	d111      	bne.n	80039e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ca:	d004      	beq.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d4:	d107      	bne.n	80039e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ee:	d10f      	bne.n	8003a10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e010      	b.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d196      	bne.n	8003972 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3728      	adds	r7, #40	; 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000000 	.word	0x20000000

08003a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7ff ff5b 	bl	8003928 <SPI_WaitFifoStateUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e027      	b.n	8003ad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff fec0 	bl	8003818 <SPI_WaitFlagStateUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e014      	b.n	8003ad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff ff34 	bl	8003928 <SPI_WaitFifoStateUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e000      	b.n	8003ad8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e049      	b.n	8003b86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fc4a 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f000 fcd6 	bl	80044d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d001      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e054      	b.n	8003c52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a26      	ldr	r2, [pc, #152]	; (8003c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x80>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd2:	d01d      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x80>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d018      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x80>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <HAL_TIM_Base_Start_IT+0xd8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x80>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <HAL_TIM_Base_Start_IT+0xdc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x80>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <HAL_TIM_Base_Start_IT+0xe0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x80>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1c      	ldr	r2, [pc, #112]	; (8003c74 <HAL_TIM_Base_Start_IT+0xe4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x80>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <HAL_TIM_Base_Start_IT+0xe8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d115      	bne.n	8003c3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_TIM_Base_Start_IT+0xec>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d015      	beq.n	8003c4e <HAL_TIM_Base_Start_IT+0xbe>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d011      	beq.n	8003c4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3a:	e008      	b.n	8003c4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e000      	b.n	8003c50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40013400 	.word	0x40013400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40015000 	.word	0x40015000
 8003c7c:	00010007 	.word	0x00010007

08003c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e049      	b.n	8003d26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd fb5a 	bl	8001360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f000 fc06 	bl	80044d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d122      	bne.n	8003d8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d11b      	bne.n	8003d8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f06f 0202 	mvn.w	r2, #2
 8003d5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fb8f 	bl	8004494 <HAL_TIM_IC_CaptureCallback>
 8003d76:	e005      	b.n	8003d84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fb81 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fb92 	bl	80044a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d122      	bne.n	8003dde <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d11b      	bne.n	8003dde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f06f 0204 	mvn.w	r2, #4
 8003dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fb65 	bl	8004494 <HAL_TIM_IC_CaptureCallback>
 8003dca:	e005      	b.n	8003dd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fb57 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fb68 	bl	80044a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d122      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d11b      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f06f 0208 	mvn.w	r2, #8
 8003e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2204      	movs	r2, #4
 8003e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fb3b 	bl	8004494 <HAL_TIM_IC_CaptureCallback>
 8003e1e:	e005      	b.n	8003e2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fb2d 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fb3e 	bl	80044a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d122      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d11b      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f06f 0210 	mvn.w	r2, #16
 8003e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fb11 	bl	8004494 <HAL_TIM_IC_CaptureCallback>
 8003e72:	e005      	b.n	8003e80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb03 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fb14 	bl	80044a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10e      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f06f 0201 	mvn.w	r2, #1
 8003eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd fba7 	bl	8001600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
 8003ebe:	d10e      	bne.n	8003ede <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d107      	bne.n	8003ede <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f001 f8b9 	bl	8005050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eec:	d10e      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d107      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f001 f8ac 	bl	8005064 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d10e      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d107      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fac2 	bl	80044bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d10e      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d107      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0220 	mvn.w	r2, #32
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f001 f86c 	bl	800503c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f72:	d10f      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f82:	d107      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f001 f872 	bl	8005078 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 f864 	bl	800508c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fe2:	d107      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f001 f856 	bl	80050a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ffe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004002:	d10f      	bne.n	8004024 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800400e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f001 f848 	bl	80050b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004046:	2302      	movs	r3, #2
 8004048:	e0ff      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b14      	cmp	r3, #20
 8004056:	f200 80f0 	bhi.w	800423a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	080040b5 	.word	0x080040b5
 8004064:	0800423b 	.word	0x0800423b
 8004068:	0800423b 	.word	0x0800423b
 800406c:	0800423b 	.word	0x0800423b
 8004070:	080040f5 	.word	0x080040f5
 8004074:	0800423b 	.word	0x0800423b
 8004078:	0800423b 	.word	0x0800423b
 800407c:	0800423b 	.word	0x0800423b
 8004080:	08004137 	.word	0x08004137
 8004084:	0800423b 	.word	0x0800423b
 8004088:	0800423b 	.word	0x0800423b
 800408c:	0800423b 	.word	0x0800423b
 8004090:	08004177 	.word	0x08004177
 8004094:	0800423b 	.word	0x0800423b
 8004098:	0800423b 	.word	0x0800423b
 800409c:	0800423b 	.word	0x0800423b
 80040a0:	080041b9 	.word	0x080041b9
 80040a4:	0800423b 	.word	0x0800423b
 80040a8:	0800423b 	.word	0x0800423b
 80040ac:	0800423b 	.word	0x0800423b
 80040b0:	080041f9 	.word	0x080041f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fab0 	bl	8004620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0208 	orr.w	r2, r2, #8
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	619a      	str	r2, [r3, #24]
      break;
 80040f2:	e0a5      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb2a 	bl	8004754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	619a      	str	r2, [r3, #24]
      break;
 8004134:	e084      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fb9d 	bl	800487c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0208 	orr.w	r2, r2, #8
 8004150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
      break;
 8004174:	e064      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fc0f 	bl	80049a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69d9      	ldr	r1, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	021a      	lsls	r2, r3, #8
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	61da      	str	r2, [r3, #28]
      break;
 80041b6:	e043      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fc82 	bl	8004ac8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0208 	orr.w	r2, r2, #8
 80041d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80041f6:	e023      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fccc 	bl	8004b9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004212:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004222:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	021a      	lsls	r2, r3, #8
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004238:	e002      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
      break;
 800423e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop

08004254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_TIM_ConfigClockSource+0x1c>
 800426c:	2302      	movs	r3, #2
 800426e:	e0f6      	b.n	800445e <HAL_TIM_ConfigClockSource+0x20a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800428e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6f      	ldr	r2, [pc, #444]	; (8004468 <HAL_TIM_ConfigClockSource+0x214>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f000 80c1 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 80042b0:	4a6d      	ldr	r2, [pc, #436]	; (8004468 <HAL_TIM_ConfigClockSource+0x214>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f200 80c6 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 80042b8:	4a6c      	ldr	r2, [pc, #432]	; (800446c <HAL_TIM_ConfigClockSource+0x218>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f000 80b9 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 80042c0:	4a6a      	ldr	r2, [pc, #424]	; (800446c <HAL_TIM_ConfigClockSource+0x218>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f200 80be 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 80042c8:	4a69      	ldr	r2, [pc, #420]	; (8004470 <HAL_TIM_ConfigClockSource+0x21c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	f000 80b1 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 80042d0:	4a67      	ldr	r2, [pc, #412]	; (8004470 <HAL_TIM_ConfigClockSource+0x21c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f200 80b6 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 80042d8:	4a66      	ldr	r2, [pc, #408]	; (8004474 <HAL_TIM_ConfigClockSource+0x220>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f000 80a9 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 80042e0:	4a64      	ldr	r2, [pc, #400]	; (8004474 <HAL_TIM_ConfigClockSource+0x220>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f200 80ae 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 80042e8:	4a63      	ldr	r2, [pc, #396]	; (8004478 <HAL_TIM_ConfigClockSource+0x224>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	f000 80a1 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 80042f0:	4a61      	ldr	r2, [pc, #388]	; (8004478 <HAL_TIM_ConfigClockSource+0x224>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	f200 80a6 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 80042f8:	4a60      	ldr	r2, [pc, #384]	; (800447c <HAL_TIM_ConfigClockSource+0x228>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	f000 8099 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 8004300:	4a5e      	ldr	r2, [pc, #376]	; (800447c <HAL_TIM_ConfigClockSource+0x228>)
 8004302:	4293      	cmp	r3, r2
 8004304:	f200 809e 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 8004308:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800430c:	f000 8091 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 8004310:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004314:	f200 8096 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 8004318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431c:	f000 8089 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 8004320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004324:	f200 808e 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d03e      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0x158>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	f200 8087 	bhi.w	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	f000 8086 	beq.w	800444a <HAL_TIM_ConfigClockSource+0x1f6>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d87f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 8004344:	2b70      	cmp	r3, #112	; 0x70
 8004346:	d01a      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x12a>
 8004348:	2b70      	cmp	r3, #112	; 0x70
 800434a:	d87b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 800434c:	2b60      	cmp	r3, #96	; 0x60
 800434e:	d050      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x19e>
 8004350:	2b60      	cmp	r3, #96	; 0x60
 8004352:	d877      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 8004354:	2b50      	cmp	r3, #80	; 0x50
 8004356:	d03c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x17e>
 8004358:	2b50      	cmp	r3, #80	; 0x50
 800435a:	d873      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d058      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x1be>
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d86f      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 8004364:	2b30      	cmp	r3, #48	; 0x30
 8004366:	d064      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d86b      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d060      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d867      	bhi.n	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 8004378:	2b10      	cmp	r3, #16
 800437a:	d05a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x1de>
 800437c:	e062      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f000 fced 	bl	8004d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
      break;
 80043aa:	e04f      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f000 fcd6 	bl	8004d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ce:	609a      	str	r2, [r3, #8]
      break;
 80043d0:	e03c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	461a      	mov	r2, r3
 80043e0:	f000 fc48 	bl	8004c74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2150      	movs	r1, #80	; 0x50
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fca1 	bl	8004d32 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e02c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	461a      	mov	r2, r3
 8004400:	f000 fc67 	bl	8004cd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2160      	movs	r1, #96	; 0x60
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fc91 	bl	8004d32 <TIM_ITRx_SetConfig>
      break;
 8004410:	e01c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	461a      	mov	r2, r3
 8004420:	f000 fc28 	bl	8004c74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	; 0x40
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fc81 	bl	8004d32 <TIM_ITRx_SetConfig>
      break;
 8004430:	e00c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 fc78 	bl	8004d32 <TIM_ITRx_SetConfig>
      break;
 8004442:	e003      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      break;
 8004448:	e000      	b.n	800444c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800444a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	00100070 	.word	0x00100070
 800446c:	00100060 	.word	0x00100060
 8004470:	00100050 	.word	0x00100050
 8004474:	00100040 	.word	0x00100040
 8004478:	00100030 	.word	0x00100030
 800447c:	00100020 	.word	0x00100020

08004480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a46      	ldr	r2, [pc, #280]	; (80045fc <TIM_Base_SetConfig+0x12c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d017      	beq.n	8004518 <TIM_Base_SetConfig+0x48>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d013      	beq.n	8004518 <TIM_Base_SetConfig+0x48>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a43      	ldr	r2, [pc, #268]	; (8004600 <TIM_Base_SetConfig+0x130>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00f      	beq.n	8004518 <TIM_Base_SetConfig+0x48>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a42      	ldr	r2, [pc, #264]	; (8004604 <TIM_Base_SetConfig+0x134>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <TIM_Base_SetConfig+0x48>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a41      	ldr	r2, [pc, #260]	; (8004608 <TIM_Base_SetConfig+0x138>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <TIM_Base_SetConfig+0x48>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a40      	ldr	r2, [pc, #256]	; (800460c <TIM_Base_SetConfig+0x13c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_Base_SetConfig+0x48>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3f      	ldr	r2, [pc, #252]	; (8004610 <TIM_Base_SetConfig+0x140>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a33      	ldr	r2, [pc, #204]	; (80045fc <TIM_Base_SetConfig+0x12c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d023      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	d01f      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a30      	ldr	r2, [pc, #192]	; (8004600 <TIM_Base_SetConfig+0x130>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01b      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2f      	ldr	r2, [pc, #188]	; (8004604 <TIM_Base_SetConfig+0x134>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d017      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2e      	ldr	r2, [pc, #184]	; (8004608 <TIM_Base_SetConfig+0x138>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2d      	ldr	r2, [pc, #180]	; (800460c <TIM_Base_SetConfig+0x13c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00f      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <TIM_Base_SetConfig+0x144>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00b      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2c      	ldr	r2, [pc, #176]	; (8004618 <TIM_Base_SetConfig+0x148>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2b      	ldr	r2, [pc, #172]	; (800461c <TIM_Base_SetConfig+0x14c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_Base_SetConfig+0xaa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a26      	ldr	r2, [pc, #152]	; (8004610 <TIM_Base_SetConfig+0x140>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d108      	bne.n	800458c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <TIM_Base_SetConfig+0x12c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <TIM_Base_SetConfig+0x110>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <TIM_Base_SetConfig+0x13c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00f      	beq.n	80045e0 <TIM_Base_SetConfig+0x110>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a14      	ldr	r2, [pc, #80]	; (8004614 <TIM_Base_SetConfig+0x144>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00b      	beq.n	80045e0 <TIM_Base_SetConfig+0x110>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <TIM_Base_SetConfig+0x148>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d007      	beq.n	80045e0 <TIM_Base_SetConfig+0x110>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a12      	ldr	r2, [pc, #72]	; (800461c <TIM_Base_SetConfig+0x14c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x110>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a0d      	ldr	r2, [pc, #52]	; (8004610 <TIM_Base_SetConfig+0x140>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d103      	bne.n	80045e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	615a      	str	r2, [r3, #20]
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40015000 	.word	0x40015000
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 0302 	bic.w	r3, r3, #2
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a30      	ldr	r2, [pc, #192]	; (800473c <TIM_OC1_SetConfig+0x11c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <TIM_OC1_SetConfig+0x88>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a2f      	ldr	r2, [pc, #188]	; (8004740 <TIM_OC1_SetConfig+0x120>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00f      	beq.n	80046a8 <TIM_OC1_SetConfig+0x88>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a2e      	ldr	r2, [pc, #184]	; (8004744 <TIM_OC1_SetConfig+0x124>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_OC1_SetConfig+0x88>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <TIM_OC1_SetConfig+0x128>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_OC1_SetConfig+0x88>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <TIM_OC1_SetConfig+0x12c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_OC1_SetConfig+0x88>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a2b      	ldr	r2, [pc, #172]	; (8004750 <TIM_OC1_SetConfig+0x130>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d10c      	bne.n	80046c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0308 	bic.w	r3, r3, #8
 80046ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1d      	ldr	r2, [pc, #116]	; (800473c <TIM_OC1_SetConfig+0x11c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <TIM_OC1_SetConfig+0xd2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <TIM_OC1_SetConfig+0x120>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00f      	beq.n	80046f2 <TIM_OC1_SetConfig+0xd2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a1b      	ldr	r2, [pc, #108]	; (8004744 <TIM_OC1_SetConfig+0x124>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <TIM_OC1_SetConfig+0xd2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <TIM_OC1_SetConfig+0x128>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_OC1_SetConfig+0xd2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <TIM_OC1_SetConfig+0x12c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_OC1_SetConfig+0xd2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <TIM_OC1_SetConfig+0x130>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d111      	bne.n	8004716 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40013400 	.word	0x40013400
 8004744:	40014000 	.word	0x40014000
 8004748:	40014400 	.word	0x40014400
 800474c:	40014800 	.word	0x40014800
 8004750:	40015000 	.word	0x40015000

08004754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0210 	bic.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0320 	bic.w	r3, r3, #32
 80047a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a2c      	ldr	r2, [pc, #176]	; (8004864 <TIM_OC2_SetConfig+0x110>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_OC2_SetConfig+0x74>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a2b      	ldr	r2, [pc, #172]	; (8004868 <TIM_OC2_SetConfig+0x114>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_OC2_SetConfig+0x74>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2a      	ldr	r2, [pc, #168]	; (800486c <TIM_OC2_SetConfig+0x118>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10d      	bne.n	80047e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <TIM_OC2_SetConfig+0x110>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <TIM_OC2_SetConfig+0xc0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <TIM_OC2_SetConfig+0x114>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_OC2_SetConfig+0xc0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <TIM_OC2_SetConfig+0x11c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_OC2_SetConfig+0xc0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <TIM_OC2_SetConfig+0x120>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_OC2_SetConfig+0xc0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <TIM_OC2_SetConfig+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_OC2_SetConfig+0xc0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a17      	ldr	r2, [pc, #92]	; (800486c <TIM_OC2_SetConfig+0x118>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d113      	bne.n	800483c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800481a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40013400 	.word	0x40013400
 800486c:	40015000 	.word	0x40015000
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800

0800487c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2b      	ldr	r2, [pc, #172]	; (8004988 <TIM_OC3_SetConfig+0x10c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_OC3_SetConfig+0x72>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2a      	ldr	r2, [pc, #168]	; (800498c <TIM_OC3_SetConfig+0x110>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_OC3_SetConfig+0x72>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a29      	ldr	r2, [pc, #164]	; (8004990 <TIM_OC3_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d10d      	bne.n	800490a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <TIM_OC3_SetConfig+0x10c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_OC3_SetConfig+0xbe>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1d      	ldr	r2, [pc, #116]	; (800498c <TIM_OC3_SetConfig+0x110>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_OC3_SetConfig+0xbe>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <TIM_OC3_SetConfig+0x118>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_OC3_SetConfig+0xbe>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <TIM_OC3_SetConfig+0x11c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_OC3_SetConfig+0xbe>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1b      	ldr	r2, [pc, #108]	; (800499c <TIM_OC3_SetConfig+0x120>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_OC3_SetConfig+0xbe>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a16      	ldr	r2, [pc, #88]	; (8004990 <TIM_OC3_SetConfig+0x114>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d113      	bne.n	8004962 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40015000 	.word	0x40015000
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800

080049a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	031b      	lsls	r3, r3, #12
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a2c      	ldr	r2, [pc, #176]	; (8004ab0 <TIM_OC4_SetConfig+0x110>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d007      	beq.n	8004a14 <TIM_OC4_SetConfig+0x74>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <TIM_OC4_SetConfig+0x114>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d003      	beq.n	8004a14 <TIM_OC4_SetConfig+0x74>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <TIM_OC4_SetConfig+0x118>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d10d      	bne.n	8004a30 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	031b      	lsls	r3, r3, #12
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <TIM_OC4_SetConfig+0x110>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d013      	beq.n	8004a60 <TIM_OC4_SetConfig+0xc0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <TIM_OC4_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00f      	beq.n	8004a60 <TIM_OC4_SetConfig+0xc0>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <TIM_OC4_SetConfig+0x11c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00b      	beq.n	8004a60 <TIM_OC4_SetConfig+0xc0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <TIM_OC4_SetConfig+0x120>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <TIM_OC4_SetConfig+0xc0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <TIM_OC4_SetConfig+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_OC4_SetConfig+0xc0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <TIM_OC4_SetConfig+0x118>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d113      	bne.n	8004a88 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	019b      	lsls	r3, r3, #6
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40013400 	.word	0x40013400
 8004ab8:	40015000 	.word	0x40015000
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	40014800 	.word	0x40014800

08004ac8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <TIM_OC5_SetConfig+0xbc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <TIM_OC5_SetConfig+0x82>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <TIM_OC5_SetConfig+0xc0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00f      	beq.n	8004b4a <TIM_OC5_SetConfig+0x82>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <TIM_OC5_SetConfig+0xc4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <TIM_OC5_SetConfig+0x82>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <TIM_OC5_SetConfig+0xc8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <TIM_OC5_SetConfig+0x82>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <TIM_OC5_SetConfig+0xcc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d003      	beq.n	8004b4a <TIM_OC5_SetConfig+0x82>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <TIM_OC5_SetConfig+0xd0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d109      	bne.n	8004b5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	621a      	str	r2, [r3, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800
 8004b98:	40015000 	.word	0x40015000

08004b9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	051b      	lsls	r3, r3, #20
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a1a      	ldr	r2, [pc, #104]	; (8004c5c <TIM_OC6_SetConfig+0xc0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <TIM_OC6_SetConfig+0x84>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <TIM_OC6_SetConfig+0xc4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00f      	beq.n	8004c20 <TIM_OC6_SetConfig+0x84>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <TIM_OC6_SetConfig+0xc8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <TIM_OC6_SetConfig+0x84>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <TIM_OC6_SetConfig+0xcc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <TIM_OC6_SetConfig+0x84>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <TIM_OC6_SetConfig+0xd0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC6_SetConfig+0x84>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <TIM_OC6_SetConfig+0xd4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d109      	bne.n	8004c34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	029b      	lsls	r3, r3, #10
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800
 8004c70:	40015000 	.word	0x40015000

08004c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f023 0201 	bic.w	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f023 030a 	bic.w	r3, r3, #10
 8004cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b087      	sub	sp, #28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0210 	bic.w	r2, r3, #16
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f043 0307 	orr.w	r3, r3, #7
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	609a      	str	r2, [r3, #8]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	021a      	lsls	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e074      	b.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a34      	ldr	r2, [pc, #208]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a33      	ldr	r2, [pc, #204]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a31      	ldr	r2, [pc, #196]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a21      	ldr	r2, [pc, #132]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e44:	d01d      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10c      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40013400 	.word	0x40013400
 8004ec4:	40015000 	.word	0x40015000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40014000 	.word	0x40014000

08004ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e096      	b.n	8005022 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2f      	ldr	r2, [pc, #188]	; (8005030 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d106      	bne.n	8004f9a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a24      	ldr	r2, [pc, #144]	; (8005030 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a22      	ldr	r2, [pc, #136]	; (8005034 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a21      	ldr	r2, [pc, #132]	; (8005038 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d12b      	bne.n	8005010 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	051b      	lsls	r3, r3, #20
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a11      	ldr	r2, [pc, #68]	; (8005030 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d106      	bne.n	8005010 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40013400 	.word	0x40013400
 8005038:	40015000 	.word	0x40015000

0800503c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e042      	b.n	8005160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fc fc3f 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2224      	movs	r2, #36	; 0x24
 80050f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f8c2 	bl	8005294 <UART_SetConfig>
 8005110:	4603      	mov	r3, r0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e022      	b.n	8005160 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fbb2 	bl	800588c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fc39 	bl	80059d0 <UART_CheckIdleState>
 800515e:	4603      	mov	r3, r0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800517e:	2b20      	cmp	r3, #32
 8005180:	f040 8083 	bne.w	800528a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <HAL_UART_Transmit+0x28>
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e07b      	b.n	800528c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Transmit+0x3a>
 800519e:	2302      	movs	r3, #2
 80051a0:	e074      	b.n	800528c <HAL_UART_Transmit+0x124>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2221      	movs	r2, #33	; 0x21
 80051b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ba:	f7fc fd25 	bl	8001c08 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d108      	bne.n	80051ec <HAL_UART_Transmit+0x84>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e003      	b.n	80051f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80051fc:	e02c      	b.n	8005258 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fc2c 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e039      	b.n	800528c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	3302      	adds	r3, #2
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e007      	b.n	8005246 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1cc      	bne.n	80051fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2200      	movs	r2, #0
 800526c:	2140      	movs	r1, #64	; 0x40
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fbf9 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e006      	b.n	800528c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005298:	b08c      	sub	sp, #48	; 0x30
 800529a:	af00      	add	r7, sp, #0
 800529c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4baa      	ldr	r3, [pc, #680]	; (800556c <UART_SetConfig+0x2d8>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a9f      	ldr	r2, [pc, #636]	; (8005570 <UART_SetConfig+0x2dc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052fc:	4313      	orrs	r3, r2
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800530a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005314:	430b      	orrs	r3, r1
 8005316:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	f023 010f 	bic.w	r1, r3, #15
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a90      	ldr	r2, [pc, #576]	; (8005574 <UART_SetConfig+0x2e0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d125      	bne.n	8005384 <UART_SetConfig+0xf0>
 8005338:	4b8f      	ldr	r3, [pc, #572]	; (8005578 <UART_SetConfig+0x2e4>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b03      	cmp	r3, #3
 8005344:	d81a      	bhi.n	800537c <UART_SetConfig+0xe8>
 8005346:	a201      	add	r2, pc, #4	; (adr r2, 800534c <UART_SetConfig+0xb8>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	0800535d 	.word	0x0800535d
 8005350:	0800536d 	.word	0x0800536d
 8005354:	08005365 	.word	0x08005365
 8005358:	08005375 	.word	0x08005375
 800535c:	2301      	movs	r3, #1
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005362:	e116      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005364:	2302      	movs	r3, #2
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536a:	e112      	b.n	8005592 <UART_SetConfig+0x2fe>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005372:	e10e      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537a:	e10a      	b.n	8005592 <UART_SetConfig+0x2fe>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005382:	e106      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a7c      	ldr	r2, [pc, #496]	; (800557c <UART_SetConfig+0x2e8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d138      	bne.n	8005400 <UART_SetConfig+0x16c>
 800538e:	4b7a      	ldr	r3, [pc, #488]	; (8005578 <UART_SetConfig+0x2e4>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	2b0c      	cmp	r3, #12
 800539a:	d82d      	bhi.n	80053f8 <UART_SetConfig+0x164>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0x110>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053d9 	.word	0x080053d9
 80053a8:	080053f9 	.word	0x080053f9
 80053ac:	080053f9 	.word	0x080053f9
 80053b0:	080053f9 	.word	0x080053f9
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	080053f9 	.word	0x080053f9
 80053bc:	080053f9 	.word	0x080053f9
 80053c0:	080053f9 	.word	0x080053f9
 80053c4:	080053e1 	.word	0x080053e1
 80053c8:	080053f9 	.word	0x080053f9
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	080053f1 	.word	0x080053f1
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053de:	e0d8      	b.n	8005592 <UART_SetConfig+0x2fe>
 80053e0:	2302      	movs	r3, #2
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e6:	e0d4      	b.n	8005592 <UART_SetConfig+0x2fe>
 80053e8:	2304      	movs	r3, #4
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ee:	e0d0      	b.n	8005592 <UART_SetConfig+0x2fe>
 80053f0:	2308      	movs	r3, #8
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053f6:	e0cc      	b.n	8005592 <UART_SetConfig+0x2fe>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053fe:	e0c8      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <UART_SetConfig+0x2ec>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d125      	bne.n	8005456 <UART_SetConfig+0x1c2>
 800540a:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <UART_SetConfig+0x2e4>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005414:	2b30      	cmp	r3, #48	; 0x30
 8005416:	d016      	beq.n	8005446 <UART_SetConfig+0x1b2>
 8005418:	2b30      	cmp	r3, #48	; 0x30
 800541a:	d818      	bhi.n	800544e <UART_SetConfig+0x1ba>
 800541c:	2b20      	cmp	r3, #32
 800541e:	d00a      	beq.n	8005436 <UART_SetConfig+0x1a2>
 8005420:	2b20      	cmp	r3, #32
 8005422:	d814      	bhi.n	800544e <UART_SetConfig+0x1ba>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <UART_SetConfig+0x19a>
 8005428:	2b10      	cmp	r3, #16
 800542a:	d008      	beq.n	800543e <UART_SetConfig+0x1aa>
 800542c:	e00f      	b.n	800544e <UART_SetConfig+0x1ba>
 800542e:	2300      	movs	r3, #0
 8005430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005434:	e0ad      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005436:	2302      	movs	r3, #2
 8005438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543c:	e0a9      	b.n	8005592 <UART_SetConfig+0x2fe>
 800543e:	2304      	movs	r3, #4
 8005440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005444:	e0a5      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005446:	2308      	movs	r3, #8
 8005448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544c:	e0a1      	b.n	8005592 <UART_SetConfig+0x2fe>
 800544e:	2310      	movs	r3, #16
 8005450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005454:	e09d      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a4a      	ldr	r2, [pc, #296]	; (8005584 <UART_SetConfig+0x2f0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d125      	bne.n	80054ac <UART_SetConfig+0x218>
 8005460:	4b45      	ldr	r3, [pc, #276]	; (8005578 <UART_SetConfig+0x2e4>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800546a:	2bc0      	cmp	r3, #192	; 0xc0
 800546c:	d016      	beq.n	800549c <UART_SetConfig+0x208>
 800546e:	2bc0      	cmp	r3, #192	; 0xc0
 8005470:	d818      	bhi.n	80054a4 <UART_SetConfig+0x210>
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d00a      	beq.n	800548c <UART_SetConfig+0x1f8>
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d814      	bhi.n	80054a4 <UART_SetConfig+0x210>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <UART_SetConfig+0x1f0>
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d008      	beq.n	8005494 <UART_SetConfig+0x200>
 8005482:	e00f      	b.n	80054a4 <UART_SetConfig+0x210>
 8005484:	2300      	movs	r3, #0
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800548a:	e082      	b.n	8005592 <UART_SetConfig+0x2fe>
 800548c:	2302      	movs	r3, #2
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005492:	e07e      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549a:	e07a      	b.n	8005592 <UART_SetConfig+0x2fe>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a2:	e076      	b.n	8005592 <UART_SetConfig+0x2fe>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054aa:	e072      	b.n	8005592 <UART_SetConfig+0x2fe>
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a35      	ldr	r2, [pc, #212]	; (8005588 <UART_SetConfig+0x2f4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d12a      	bne.n	800550c <UART_SetConfig+0x278>
 80054b6:	4b30      	ldr	r3, [pc, #192]	; (8005578 <UART_SetConfig+0x2e4>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c4:	d01a      	beq.n	80054fc <UART_SetConfig+0x268>
 80054c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ca:	d81b      	bhi.n	8005504 <UART_SetConfig+0x270>
 80054cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d0:	d00c      	beq.n	80054ec <UART_SetConfig+0x258>
 80054d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d6:	d815      	bhi.n	8005504 <UART_SetConfig+0x270>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <UART_SetConfig+0x250>
 80054dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e0:	d008      	beq.n	80054f4 <UART_SetConfig+0x260>
 80054e2:	e00f      	b.n	8005504 <UART_SetConfig+0x270>
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ea:	e052      	b.n	8005592 <UART_SetConfig+0x2fe>
 80054ec:	2302      	movs	r3, #2
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f2:	e04e      	b.n	8005592 <UART_SetConfig+0x2fe>
 80054f4:	2304      	movs	r3, #4
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054fa:	e04a      	b.n	8005592 <UART_SetConfig+0x2fe>
 80054fc:	2308      	movs	r3, #8
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005502:	e046      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005504:	2310      	movs	r3, #16
 8005506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800550a:	e042      	b.n	8005592 <UART_SetConfig+0x2fe>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a17      	ldr	r2, [pc, #92]	; (8005570 <UART_SetConfig+0x2dc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d13a      	bne.n	800558c <UART_SetConfig+0x2f8>
 8005516:	4b18      	ldr	r3, [pc, #96]	; (8005578 <UART_SetConfig+0x2e4>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005524:	d01a      	beq.n	800555c <UART_SetConfig+0x2c8>
 8005526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800552a:	d81b      	bhi.n	8005564 <UART_SetConfig+0x2d0>
 800552c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005530:	d00c      	beq.n	800554c <UART_SetConfig+0x2b8>
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005536:	d815      	bhi.n	8005564 <UART_SetConfig+0x2d0>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <UART_SetConfig+0x2b0>
 800553c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005540:	d008      	beq.n	8005554 <UART_SetConfig+0x2c0>
 8005542:	e00f      	b.n	8005564 <UART_SetConfig+0x2d0>
 8005544:	2300      	movs	r3, #0
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554a:	e022      	b.n	8005592 <UART_SetConfig+0x2fe>
 800554c:	2302      	movs	r3, #2
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005552:	e01e      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005554:	2304      	movs	r3, #4
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555a:	e01a      	b.n	8005592 <UART_SetConfig+0x2fe>
 800555c:	2308      	movs	r3, #8
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005562:	e016      	b.n	8005592 <UART_SetConfig+0x2fe>
 8005564:	2310      	movs	r3, #16
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800556a:	e012      	b.n	8005592 <UART_SetConfig+0x2fe>
 800556c:	cfff69f3 	.word	0xcfff69f3
 8005570:	40008000 	.word	0x40008000
 8005574:	40013800 	.word	0x40013800
 8005578:	40021000 	.word	0x40021000
 800557c:	40004400 	.word	0x40004400
 8005580:	40004800 	.word	0x40004800
 8005584:	40004c00 	.word	0x40004c00
 8005588:	40005000 	.word	0x40005000
 800558c:	2310      	movs	r3, #16
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4aae      	ldr	r2, [pc, #696]	; (8005850 <UART_SetConfig+0x5bc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	f040 8097 	bne.w	80056cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800559e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d823      	bhi.n	80055ee <UART_SetConfig+0x35a>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <UART_SetConfig+0x318>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055d1 	.word	0x080055d1
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055df 	.word	0x080055df
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055ef 	.word	0x080055ef
 80055c8:	080055ef 	.word	0x080055ef
 80055cc:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d0:	f7fd fba4 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 80055d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055d6:	e010      	b.n	80055fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b9e      	ldr	r3, [pc, #632]	; (8005854 <UART_SetConfig+0x5c0>)
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fd fb2f 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 80055e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055e4:	e009      	b.n	80055fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055ec:	e005      	b.n	80055fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8130 	beq.w	8005862 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	4a94      	ldr	r2, [pc, #592]	; (8005858 <UART_SetConfig+0x5c4>)
 8005608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800560c:	461a      	mov	r2, r3
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	fbb3 f3f2 	udiv	r3, r3, r2
 8005614:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	4413      	add	r3, r2
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	429a      	cmp	r2, r3
 8005624:	d305      	bcc.n	8005632 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	429a      	cmp	r2, r3
 8005630:	d903      	bls.n	800563a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005638:	e113      	b.n	8005862 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	2200      	movs	r2, #0
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	60fa      	str	r2, [r7, #12]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	4a84      	ldr	r2, [pc, #528]	; (8005858 <UART_SetConfig+0x5c4>)
 8005648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800564c:	b29b      	uxth	r3, r3
 800564e:	2200      	movs	r2, #0
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005658:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800565c:	f7fb f946 	bl	80008ec <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4610      	mov	r0, r2
 8005666:	4619      	mov	r1, r3
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	020b      	lsls	r3, r1, #8
 8005672:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005676:	0202      	lsls	r2, r0, #8
 8005678:	6979      	ldr	r1, [r7, #20]
 800567a:	6849      	ldr	r1, [r1, #4]
 800567c:	0849      	lsrs	r1, r1, #1
 800567e:	2000      	movs	r0, #0
 8005680:	460c      	mov	r4, r1
 8005682:	4605      	mov	r5, r0
 8005684:	eb12 0804 	adds.w	r8, r2, r4
 8005688:	eb43 0905 	adc.w	r9, r3, r5
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	469a      	mov	sl, r3
 8005694:	4693      	mov	fp, r2
 8005696:	4652      	mov	r2, sl
 8005698:	465b      	mov	r3, fp
 800569a:	4640      	mov	r0, r8
 800569c:	4649      	mov	r1, r9
 800569e:	f7fb f925 	bl	80008ec <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4613      	mov	r3, r2
 80056a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b0:	d308      	bcc.n	80056c4 <UART_SetConfig+0x430>
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b8:	d204      	bcs.n	80056c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a3a      	ldr	r2, [r7, #32]
 80056c0:	60da      	str	r2, [r3, #12]
 80056c2:	e0ce      	b.n	8005862 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056ca:	e0ca      	b.n	8005862 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d4:	d166      	bne.n	80057a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80056d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d827      	bhi.n	800572e <UART_SetConfig+0x49a>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x450>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005719 	.word	0x08005719
 80056f0:	0800572f 	.word	0x0800572f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	0800572f 	.word	0x0800572f
 8005700:	0800572f 	.word	0x0800572f
 8005704:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7fd fb08 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 800570c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800570e:	e014      	b.n	800573a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fd fb1a 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8005714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005716:	e010      	b.n	800573a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b4e      	ldr	r3, [pc, #312]	; (8005854 <UART_SetConfig+0x5c0>)
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800571c:	e00d      	b.n	800573a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7fd fa8f 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005724:	e009      	b.n	800573a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800572c:	e005      	b.n	800573a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8090 	beq.w	8005862 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	4a44      	ldr	r2, [pc, #272]	; (8005858 <UART_SetConfig+0x5c4>)
 8005748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800574c:	461a      	mov	r2, r3
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	fbb3 f3f2 	udiv	r3, r3, r2
 8005754:	005a      	lsls	r2, r3, #1
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	441a      	add	r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	2b0f      	cmp	r3, #15
 800576c:	d916      	bls.n	800579c <UART_SetConfig+0x508>
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005774:	d212      	bcs.n	800579c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f023 030f 	bic.w	r3, r3, #15
 800577e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	b29b      	uxth	r3, r3
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	b29a      	uxth	r2, r3
 800578c:	8bfb      	ldrh	r3, [r7, #30]
 800578e:	4313      	orrs	r3, r2
 8005790:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	8bfa      	ldrh	r2, [r7, #30]
 8005798:	60da      	str	r2, [r3, #12]
 800579a:	e062      	b.n	8005862 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057a2:	e05e      	b.n	8005862 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d828      	bhi.n	80057fe <UART_SetConfig+0x56a>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0x520>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057d9 	.word	0x080057d9
 80057b8:	080057e1 	.word	0x080057e1
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	080057ff 	.word	0x080057ff
 80057c4:	080057ef 	.word	0x080057ef
 80057c8:	080057ff 	.word	0x080057ff
 80057cc:	080057ff 	.word	0x080057ff
 80057d0:	080057ff 	.word	0x080057ff
 80057d4:	080057f7 	.word	0x080057f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d8:	f7fd faa0 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 80057dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057de:	e014      	b.n	800580a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e0:	f7fd fab2 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057e6:	e010      	b.n	800580a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e8:	4b1a      	ldr	r3, [pc, #104]	; (8005854 <UART_SetConfig+0x5c0>)
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057ec:	e00d      	b.n	800580a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ee:	f7fd fa27 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 80057f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057f4:	e009      	b.n	800580a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057fc:	e005      	b.n	800580a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005808:	bf00      	nop
    }

    if (pclk != 0U)
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d028      	beq.n	8005862 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	4a10      	ldr	r2, [pc, #64]	; (8005858 <UART_SetConfig+0x5c4>)
 8005816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800581a:	461a      	mov	r2, r3
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	441a      	add	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	d910      	bls.n	800585c <UART_SetConfig+0x5c8>
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005840:	d20c      	bcs.n	800585c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	b29a      	uxth	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60da      	str	r2, [r3, #12]
 800584c:	e009      	b.n	8005862 <UART_SetConfig+0x5ce>
 800584e:	bf00      	nop
 8005850:	40008000 	.word	0x40008000
 8005854:	00f42400 	.word	0x00f42400
 8005858:	08006894 	.word	0x08006894
      }
      else
      {
        ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2201      	movs	r2, #1
 8005866:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2201      	movs	r2, #1
 800586e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2200      	movs	r2, #0
 800587c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800587e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005882:	4618      	mov	r0, r3
 8005884:	3730      	adds	r7, #48	; 0x30
 8005886:	46bd      	mov	sp, r7
 8005888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800588c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01a      	beq.n	80059a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598a:	d10a      	bne.n	80059a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	605a      	str	r2, [r3, #4]
  }
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059e0:	f7fc f912 	bl	8001c08 <HAL_GetTick>
 80059e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d10e      	bne.n	8005a12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f82f 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e025      	b.n	8005a5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d10e      	bne.n	8005a3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f819 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e00f      	b.n	8005a5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b09c      	sub	sp, #112	; 0x70
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	e0a9      	b.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7e:	f000 80a5 	beq.w	8005bcc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fc f8c1 	bl	8001c08 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d140      	bne.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aac:	667b      	str	r3, [r7, #100]	; 0x64
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005abe:	e841 2300 	strex	r3, r2, [r1]
 8005ac2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1e6      	bne.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aea:	64ba      	str	r2, [r7, #72]	; 0x48
 8005aec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e069      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d051      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b36:	d149      	bne.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
 8005b62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e6      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	613b      	str	r3, [r7, #16]
   return(result);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b94:	623a      	str	r2, [r7, #32]
 8005b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	69f9      	ldr	r1, [r7, #28]
 8005b9a:	6a3a      	ldr	r2, [r7, #32]
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e5      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e010      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	f43f af46 	beq.w	8005a78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3770      	adds	r7, #112	; 0x70
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UARTEx_DisableFifoMode+0x16>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e027      	b.n	8005c5c <HAL_UARTEx_DisableFifoMode+0x66>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2224      	movs	r2, #36	; 0x24
 8005c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e02d      	b.n	8005cdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f84f 	bl	8005d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e02d      	b.n	8005d58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	; 0x24
 8005d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f811 	bl	8005d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d108      	bne.n	8005d82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d80:	e031      	b.n	8005de6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d82:	2308      	movs	r3, #8
 8005d84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d86:	2308      	movs	r3, #8
 8005d88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	0e5b      	lsrs	r3, r3, #25
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	0f5b      	lsrs	r3, r3, #29
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005daa:	7bbb      	ldrb	r3, [r7, #14]
 8005dac:	7b3a      	ldrb	r2, [r7, #12]
 8005dae:	4911      	ldr	r1, [pc, #68]	; (8005df4 <UARTEx_SetNbDataToProcess+0x94>)
 8005db0:	5c8a      	ldrb	r2, [r1, r2]
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005db6:	7b3a      	ldrb	r2, [r7, #12]
 8005db8:	490f      	ldr	r1, [pc, #60]	; (8005df8 <UARTEx_SetNbDataToProcess+0x98>)
 8005dba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	7b7a      	ldrb	r2, [r7, #13]
 8005dcc:	4909      	ldr	r1, [pc, #36]	; (8005df4 <UARTEx_SetNbDataToProcess+0x94>)
 8005dce:	5c8a      	ldrb	r2, [r1, r2]
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dd4:	7b7a      	ldrb	r2, [r7, #13]
 8005dd6:	4908      	ldr	r1, [pc, #32]	; (8005df8 <UARTEx_SetNbDataToProcess+0x98>)
 8005dd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	080068ac 	.word	0x080068ac
 8005df8:	080068b4 	.word	0x080068b4

08005dfc <siprintf>:
 8005dfc:	b40e      	push	{r1, r2, r3}
 8005dfe:	b500      	push	{lr}
 8005e00:	b09c      	sub	sp, #112	; 0x70
 8005e02:	ab1d      	add	r3, sp, #116	; 0x74
 8005e04:	9002      	str	r0, [sp, #8]
 8005e06:	9006      	str	r0, [sp, #24]
 8005e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e0c:	4809      	ldr	r0, [pc, #36]	; (8005e34 <siprintf+0x38>)
 8005e0e:	9107      	str	r1, [sp, #28]
 8005e10:	9104      	str	r1, [sp, #16]
 8005e12:	4909      	ldr	r1, [pc, #36]	; (8005e38 <siprintf+0x3c>)
 8005e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e18:	9105      	str	r1, [sp, #20]
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	a902      	add	r1, sp, #8
 8005e20:	f000 f8a8 	bl	8005f74 <_svfiprintf_r>
 8005e24:	9b02      	ldr	r3, [sp, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	b01c      	add	sp, #112	; 0x70
 8005e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e30:	b003      	add	sp, #12
 8005e32:	4770      	bx	lr
 8005e34:	20000058 	.word	0x20000058
 8005e38:	ffff0208 	.word	0xffff0208

08005e3c <memset>:
 8005e3c:	4402      	add	r2, r0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d100      	bne.n	8005e46 <memset+0xa>
 8005e44:	4770      	bx	lr
 8005e46:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4a:	e7f9      	b.n	8005e40 <memset+0x4>

08005e4c <__errno>:
 8005e4c:	4b01      	ldr	r3, [pc, #4]	; (8005e54 <__errno+0x8>)
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000058 	.word	0x20000058

08005e58 <__libc_init_array>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4d0d      	ldr	r5, [pc, #52]	; (8005e90 <__libc_init_array+0x38>)
 8005e5c:	4c0d      	ldr	r4, [pc, #52]	; (8005e94 <__libc_init_array+0x3c>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	2600      	movs	r6, #0
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	d109      	bne.n	8005e7c <__libc_init_array+0x24>
 8005e68:	4d0b      	ldr	r5, [pc, #44]	; (8005e98 <__libc_init_array+0x40>)
 8005e6a:	4c0c      	ldr	r4, [pc, #48]	; (8005e9c <__libc_init_array+0x44>)
 8005e6c:	f000 fc6a 	bl	8006744 <_init>
 8005e70:	1b64      	subs	r4, r4, r5
 8005e72:	10a4      	asrs	r4, r4, #2
 8005e74:	2600      	movs	r6, #0
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	d105      	bne.n	8005e86 <__libc_init_array+0x2e>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e80:	4798      	blx	r3
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7ee      	b.n	8005e64 <__libc_init_array+0xc>
 8005e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8a:	4798      	blx	r3
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	e7f2      	b.n	8005e76 <__libc_init_array+0x1e>
 8005e90:	080068f8 	.word	0x080068f8
 8005e94:	080068f8 	.word	0x080068f8
 8005e98:	080068f8 	.word	0x080068f8
 8005e9c:	080068fc 	.word	0x080068fc

08005ea0 <__retarget_lock_acquire_recursive>:
 8005ea0:	4770      	bx	lr

08005ea2 <__retarget_lock_release_recursive>:
 8005ea2:	4770      	bx	lr

08005ea4 <memcpy>:
 8005ea4:	440a      	add	r2, r1
 8005ea6:	4291      	cmp	r1, r2
 8005ea8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005eac:	d100      	bne.n	8005eb0 <memcpy+0xc>
 8005eae:	4770      	bx	lr
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	d1f9      	bne.n	8005eb2 <memcpy+0xe>
 8005ebe:	bd10      	pop	{r4, pc}

08005ec0 <__ssputs_r>:
 8005ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	688e      	ldr	r6, [r1, #8]
 8005ec6:	461f      	mov	r7, r3
 8005ec8:	42be      	cmp	r6, r7
 8005eca:	680b      	ldr	r3, [r1, #0]
 8005ecc:	4682      	mov	sl, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	4690      	mov	r8, r2
 8005ed2:	d82c      	bhi.n	8005f2e <__ssputs_r+0x6e>
 8005ed4:	898a      	ldrh	r2, [r1, #12]
 8005ed6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005eda:	d026      	beq.n	8005f2a <__ssputs_r+0x6a>
 8005edc:	6965      	ldr	r5, [r4, #20]
 8005ede:	6909      	ldr	r1, [r1, #16]
 8005ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ee4:	eba3 0901 	sub.w	r9, r3, r1
 8005ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eec:	1c7b      	adds	r3, r7, #1
 8005eee:	444b      	add	r3, r9
 8005ef0:	106d      	asrs	r5, r5, #1
 8005ef2:	429d      	cmp	r5, r3
 8005ef4:	bf38      	it	cc
 8005ef6:	461d      	movcc	r5, r3
 8005ef8:	0553      	lsls	r3, r2, #21
 8005efa:	d527      	bpl.n	8005f4c <__ssputs_r+0x8c>
 8005efc:	4629      	mov	r1, r5
 8005efe:	f000 f957 	bl	80061b0 <_malloc_r>
 8005f02:	4606      	mov	r6, r0
 8005f04:	b360      	cbz	r0, 8005f60 <__ssputs_r+0xa0>
 8005f06:	6921      	ldr	r1, [r4, #16]
 8005f08:	464a      	mov	r2, r9
 8005f0a:	f7ff ffcb 	bl	8005ea4 <memcpy>
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	6126      	str	r6, [r4, #16]
 8005f1c:	6165      	str	r5, [r4, #20]
 8005f1e:	444e      	add	r6, r9
 8005f20:	eba5 0509 	sub.w	r5, r5, r9
 8005f24:	6026      	str	r6, [r4, #0]
 8005f26:	60a5      	str	r5, [r4, #8]
 8005f28:	463e      	mov	r6, r7
 8005f2a:	42be      	cmp	r6, r7
 8005f2c:	d900      	bls.n	8005f30 <__ssputs_r+0x70>
 8005f2e:	463e      	mov	r6, r7
 8005f30:	6820      	ldr	r0, [r4, #0]
 8005f32:	4632      	mov	r2, r6
 8005f34:	4641      	mov	r1, r8
 8005f36:	f000 fb86 	bl	8006646 <memmove>
 8005f3a:	68a3      	ldr	r3, [r4, #8]
 8005f3c:	1b9b      	subs	r3, r3, r6
 8005f3e:	60a3      	str	r3, [r4, #8]
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	4433      	add	r3, r6
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	2000      	movs	r0, #0
 8005f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4c:	462a      	mov	r2, r5
 8005f4e:	f000 fb4b 	bl	80065e8 <_realloc_r>
 8005f52:	4606      	mov	r6, r0
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d1e0      	bne.n	8005f1a <__ssputs_r+0x5a>
 8005f58:	6921      	ldr	r1, [r4, #16]
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	f000 fb9e 	bl	800669c <_free_r>
 8005f60:	230c      	movs	r3, #12
 8005f62:	f8ca 3000 	str.w	r3, [sl]
 8005f66:	89a3      	ldrh	r3, [r4, #12]
 8005f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f72:	e7e9      	b.n	8005f48 <__ssputs_r+0x88>

08005f74 <_svfiprintf_r>:
 8005f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	4698      	mov	r8, r3
 8005f7a:	898b      	ldrh	r3, [r1, #12]
 8005f7c:	061b      	lsls	r3, r3, #24
 8005f7e:	b09d      	sub	sp, #116	; 0x74
 8005f80:	4607      	mov	r7, r0
 8005f82:	460d      	mov	r5, r1
 8005f84:	4614      	mov	r4, r2
 8005f86:	d50e      	bpl.n	8005fa6 <_svfiprintf_r+0x32>
 8005f88:	690b      	ldr	r3, [r1, #16]
 8005f8a:	b963      	cbnz	r3, 8005fa6 <_svfiprintf_r+0x32>
 8005f8c:	2140      	movs	r1, #64	; 0x40
 8005f8e:	f000 f90f 	bl	80061b0 <_malloc_r>
 8005f92:	6028      	str	r0, [r5, #0]
 8005f94:	6128      	str	r0, [r5, #16]
 8005f96:	b920      	cbnz	r0, 8005fa2 <_svfiprintf_r+0x2e>
 8005f98:	230c      	movs	r3, #12
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa0:	e0d0      	b.n	8006144 <_svfiprintf_r+0x1d0>
 8005fa2:	2340      	movs	r3, #64	; 0x40
 8005fa4:	616b      	str	r3, [r5, #20]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8005faa:	2320      	movs	r3, #32
 8005fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fb4:	2330      	movs	r3, #48	; 0x30
 8005fb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800615c <_svfiprintf_r+0x1e8>
 8005fba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fbe:	f04f 0901 	mov.w	r9, #1
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	469a      	mov	sl, r3
 8005fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fca:	b10a      	cbz	r2, 8005fd0 <_svfiprintf_r+0x5c>
 8005fcc:	2a25      	cmp	r2, #37	; 0x25
 8005fce:	d1f9      	bne.n	8005fc4 <_svfiprintf_r+0x50>
 8005fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8005fd4:	d00b      	beq.n	8005fee <_svfiprintf_r+0x7a>
 8005fd6:	465b      	mov	r3, fp
 8005fd8:	4622      	mov	r2, r4
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f7ff ff6f 	bl	8005ec0 <__ssputs_r>
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f000 80a9 	beq.w	800613a <_svfiprintf_r+0x1c6>
 8005fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fea:	445a      	add	r2, fp
 8005fec:	9209      	str	r2, [sp, #36]	; 0x24
 8005fee:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80a1 	beq.w	800613a <_svfiprintf_r+0x1c6>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006002:	f10a 0a01 	add.w	sl, sl, #1
 8006006:	9304      	str	r3, [sp, #16]
 8006008:	9307      	str	r3, [sp, #28]
 800600a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800600e:	931a      	str	r3, [sp, #104]	; 0x68
 8006010:	4654      	mov	r4, sl
 8006012:	2205      	movs	r2, #5
 8006014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006018:	4850      	ldr	r0, [pc, #320]	; (800615c <_svfiprintf_r+0x1e8>)
 800601a:	f7fa f909 	bl	8000230 <memchr>
 800601e:	9a04      	ldr	r2, [sp, #16]
 8006020:	b9d8      	cbnz	r0, 800605a <_svfiprintf_r+0xe6>
 8006022:	06d0      	lsls	r0, r2, #27
 8006024:	bf44      	itt	mi
 8006026:	2320      	movmi	r3, #32
 8006028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800602c:	0711      	lsls	r1, r2, #28
 800602e:	bf44      	itt	mi
 8006030:	232b      	movmi	r3, #43	; 0x2b
 8006032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006036:	f89a 3000 	ldrb.w	r3, [sl]
 800603a:	2b2a      	cmp	r3, #42	; 0x2a
 800603c:	d015      	beq.n	800606a <_svfiprintf_r+0xf6>
 800603e:	9a07      	ldr	r2, [sp, #28]
 8006040:	4654      	mov	r4, sl
 8006042:	2000      	movs	r0, #0
 8006044:	f04f 0c0a 	mov.w	ip, #10
 8006048:	4621      	mov	r1, r4
 800604a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800604e:	3b30      	subs	r3, #48	; 0x30
 8006050:	2b09      	cmp	r3, #9
 8006052:	d94d      	bls.n	80060f0 <_svfiprintf_r+0x17c>
 8006054:	b1b0      	cbz	r0, 8006084 <_svfiprintf_r+0x110>
 8006056:	9207      	str	r2, [sp, #28]
 8006058:	e014      	b.n	8006084 <_svfiprintf_r+0x110>
 800605a:	eba0 0308 	sub.w	r3, r0, r8
 800605e:	fa09 f303 	lsl.w	r3, r9, r3
 8006062:	4313      	orrs	r3, r2
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	46a2      	mov	sl, r4
 8006068:	e7d2      	b.n	8006010 <_svfiprintf_r+0x9c>
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	1d19      	adds	r1, r3, #4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	9103      	str	r1, [sp, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfbb      	ittet	lt
 8006076:	425b      	neglt	r3, r3
 8006078:	f042 0202 	orrlt.w	r2, r2, #2
 800607c:	9307      	strge	r3, [sp, #28]
 800607e:	9307      	strlt	r3, [sp, #28]
 8006080:	bfb8      	it	lt
 8006082:	9204      	strlt	r2, [sp, #16]
 8006084:	7823      	ldrb	r3, [r4, #0]
 8006086:	2b2e      	cmp	r3, #46	; 0x2e
 8006088:	d10c      	bne.n	80060a4 <_svfiprintf_r+0x130>
 800608a:	7863      	ldrb	r3, [r4, #1]
 800608c:	2b2a      	cmp	r3, #42	; 0x2a
 800608e:	d134      	bne.n	80060fa <_svfiprintf_r+0x186>
 8006090:	9b03      	ldr	r3, [sp, #12]
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	9203      	str	r2, [sp, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	bfb8      	it	lt
 800609c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80060a0:	3402      	adds	r4, #2
 80060a2:	9305      	str	r3, [sp, #20]
 80060a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800616c <_svfiprintf_r+0x1f8>
 80060a8:	7821      	ldrb	r1, [r4, #0]
 80060aa:	2203      	movs	r2, #3
 80060ac:	4650      	mov	r0, sl
 80060ae:	f7fa f8bf 	bl	8000230 <memchr>
 80060b2:	b138      	cbz	r0, 80060c4 <_svfiprintf_r+0x150>
 80060b4:	9b04      	ldr	r3, [sp, #16]
 80060b6:	eba0 000a 	sub.w	r0, r0, sl
 80060ba:	2240      	movs	r2, #64	; 0x40
 80060bc:	4082      	lsls	r2, r0
 80060be:	4313      	orrs	r3, r2
 80060c0:	3401      	adds	r4, #1
 80060c2:	9304      	str	r3, [sp, #16]
 80060c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c8:	4825      	ldr	r0, [pc, #148]	; (8006160 <_svfiprintf_r+0x1ec>)
 80060ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ce:	2206      	movs	r2, #6
 80060d0:	f7fa f8ae 	bl	8000230 <memchr>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d038      	beq.n	800614a <_svfiprintf_r+0x1d6>
 80060d8:	4b22      	ldr	r3, [pc, #136]	; (8006164 <_svfiprintf_r+0x1f0>)
 80060da:	bb1b      	cbnz	r3, 8006124 <_svfiprintf_r+0x1b0>
 80060dc:	9b03      	ldr	r3, [sp, #12]
 80060de:	3307      	adds	r3, #7
 80060e0:	f023 0307 	bic.w	r3, r3, #7
 80060e4:	3308      	adds	r3, #8
 80060e6:	9303      	str	r3, [sp, #12]
 80060e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ea:	4433      	add	r3, r6
 80060ec:	9309      	str	r3, [sp, #36]	; 0x24
 80060ee:	e768      	b.n	8005fc2 <_svfiprintf_r+0x4e>
 80060f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80060f4:	460c      	mov	r4, r1
 80060f6:	2001      	movs	r0, #1
 80060f8:	e7a6      	b.n	8006048 <_svfiprintf_r+0xd4>
 80060fa:	2300      	movs	r3, #0
 80060fc:	3401      	adds	r4, #1
 80060fe:	9305      	str	r3, [sp, #20]
 8006100:	4619      	mov	r1, r3
 8006102:	f04f 0c0a 	mov.w	ip, #10
 8006106:	4620      	mov	r0, r4
 8006108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800610c:	3a30      	subs	r2, #48	; 0x30
 800610e:	2a09      	cmp	r2, #9
 8006110:	d903      	bls.n	800611a <_svfiprintf_r+0x1a6>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0c6      	beq.n	80060a4 <_svfiprintf_r+0x130>
 8006116:	9105      	str	r1, [sp, #20]
 8006118:	e7c4      	b.n	80060a4 <_svfiprintf_r+0x130>
 800611a:	fb0c 2101 	mla	r1, ip, r1, r2
 800611e:	4604      	mov	r4, r0
 8006120:	2301      	movs	r3, #1
 8006122:	e7f0      	b.n	8006106 <_svfiprintf_r+0x192>
 8006124:	ab03      	add	r3, sp, #12
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	462a      	mov	r2, r5
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <_svfiprintf_r+0x1f4>)
 800612c:	a904      	add	r1, sp, #16
 800612e:	4638      	mov	r0, r7
 8006130:	f3af 8000 	nop.w
 8006134:	1c42      	adds	r2, r0, #1
 8006136:	4606      	mov	r6, r0
 8006138:	d1d6      	bne.n	80060e8 <_svfiprintf_r+0x174>
 800613a:	89ab      	ldrh	r3, [r5, #12]
 800613c:	065b      	lsls	r3, r3, #25
 800613e:	f53f af2d 	bmi.w	8005f9c <_svfiprintf_r+0x28>
 8006142:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006144:	b01d      	add	sp, #116	; 0x74
 8006146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614a:	ab03      	add	r3, sp, #12
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	462a      	mov	r2, r5
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <_svfiprintf_r+0x1f4>)
 8006152:	a904      	add	r1, sp, #16
 8006154:	4638      	mov	r0, r7
 8006156:	f000 f919 	bl	800638c <_printf_i>
 800615a:	e7eb      	b.n	8006134 <_svfiprintf_r+0x1c0>
 800615c:	080068bc 	.word	0x080068bc
 8006160:	080068c6 	.word	0x080068c6
 8006164:	00000000 	.word	0x00000000
 8006168:	08005ec1 	.word	0x08005ec1
 800616c:	080068c2 	.word	0x080068c2

08006170 <sbrk_aligned>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4e0e      	ldr	r6, [pc, #56]	; (80061ac <sbrk_aligned+0x3c>)
 8006174:	460c      	mov	r4, r1
 8006176:	6831      	ldr	r1, [r6, #0]
 8006178:	4605      	mov	r5, r0
 800617a:	b911      	cbnz	r1, 8006182 <sbrk_aligned+0x12>
 800617c:	f000 fa7e 	bl	800667c <_sbrk_r>
 8006180:	6030      	str	r0, [r6, #0]
 8006182:	4621      	mov	r1, r4
 8006184:	4628      	mov	r0, r5
 8006186:	f000 fa79 	bl	800667c <_sbrk_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d00a      	beq.n	80061a4 <sbrk_aligned+0x34>
 800618e:	1cc4      	adds	r4, r0, #3
 8006190:	f024 0403 	bic.w	r4, r4, #3
 8006194:	42a0      	cmp	r0, r4
 8006196:	d007      	beq.n	80061a8 <sbrk_aligned+0x38>
 8006198:	1a21      	subs	r1, r4, r0
 800619a:	4628      	mov	r0, r5
 800619c:	f000 fa6e 	bl	800667c <_sbrk_r>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d101      	bne.n	80061a8 <sbrk_aligned+0x38>
 80061a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80061a8:	4620      	mov	r0, r4
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	20000420 	.word	0x20000420

080061b0 <_malloc_r>:
 80061b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b4:	1ccd      	adds	r5, r1, #3
 80061b6:	f025 0503 	bic.w	r5, r5, #3
 80061ba:	3508      	adds	r5, #8
 80061bc:	2d0c      	cmp	r5, #12
 80061be:	bf38      	it	cc
 80061c0:	250c      	movcc	r5, #12
 80061c2:	2d00      	cmp	r5, #0
 80061c4:	4607      	mov	r7, r0
 80061c6:	db01      	blt.n	80061cc <_malloc_r+0x1c>
 80061c8:	42a9      	cmp	r1, r5
 80061ca:	d905      	bls.n	80061d8 <_malloc_r+0x28>
 80061cc:	230c      	movs	r3, #12
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	2600      	movs	r6, #0
 80061d2:	4630      	mov	r0, r6
 80061d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062ac <_malloc_r+0xfc>
 80061dc:	f000 f9f8 	bl	80065d0 <__malloc_lock>
 80061e0:	f8d8 3000 	ldr.w	r3, [r8]
 80061e4:	461c      	mov	r4, r3
 80061e6:	bb5c      	cbnz	r4, 8006240 <_malloc_r+0x90>
 80061e8:	4629      	mov	r1, r5
 80061ea:	4638      	mov	r0, r7
 80061ec:	f7ff ffc0 	bl	8006170 <sbrk_aligned>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	4604      	mov	r4, r0
 80061f4:	d155      	bne.n	80062a2 <_malloc_r+0xf2>
 80061f6:	f8d8 4000 	ldr.w	r4, [r8]
 80061fa:	4626      	mov	r6, r4
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	d145      	bne.n	800628c <_malloc_r+0xdc>
 8006200:	2c00      	cmp	r4, #0
 8006202:	d048      	beq.n	8006296 <_malloc_r+0xe6>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	4631      	mov	r1, r6
 8006208:	4638      	mov	r0, r7
 800620a:	eb04 0903 	add.w	r9, r4, r3
 800620e:	f000 fa35 	bl	800667c <_sbrk_r>
 8006212:	4581      	cmp	r9, r0
 8006214:	d13f      	bne.n	8006296 <_malloc_r+0xe6>
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	1a6d      	subs	r5, r5, r1
 800621a:	4629      	mov	r1, r5
 800621c:	4638      	mov	r0, r7
 800621e:	f7ff ffa7 	bl	8006170 <sbrk_aligned>
 8006222:	3001      	adds	r0, #1
 8006224:	d037      	beq.n	8006296 <_malloc_r+0xe6>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	442b      	add	r3, r5
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	f8d8 3000 	ldr.w	r3, [r8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d038      	beq.n	80062a6 <_malloc_r+0xf6>
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	42a2      	cmp	r2, r4
 8006238:	d12b      	bne.n	8006292 <_malloc_r+0xe2>
 800623a:	2200      	movs	r2, #0
 800623c:	605a      	str	r2, [r3, #4]
 800623e:	e00f      	b.n	8006260 <_malloc_r+0xb0>
 8006240:	6822      	ldr	r2, [r4, #0]
 8006242:	1b52      	subs	r2, r2, r5
 8006244:	d41f      	bmi.n	8006286 <_malloc_r+0xd6>
 8006246:	2a0b      	cmp	r2, #11
 8006248:	d917      	bls.n	800627a <_malloc_r+0xca>
 800624a:	1961      	adds	r1, r4, r5
 800624c:	42a3      	cmp	r3, r4
 800624e:	6025      	str	r5, [r4, #0]
 8006250:	bf18      	it	ne
 8006252:	6059      	strne	r1, [r3, #4]
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	bf08      	it	eq
 8006258:	f8c8 1000 	streq.w	r1, [r8]
 800625c:	5162      	str	r2, [r4, r5]
 800625e:	604b      	str	r3, [r1, #4]
 8006260:	4638      	mov	r0, r7
 8006262:	f104 060b 	add.w	r6, r4, #11
 8006266:	f000 f9b9 	bl	80065dc <__malloc_unlock>
 800626a:	f026 0607 	bic.w	r6, r6, #7
 800626e:	1d23      	adds	r3, r4, #4
 8006270:	1af2      	subs	r2, r6, r3
 8006272:	d0ae      	beq.n	80061d2 <_malloc_r+0x22>
 8006274:	1b9b      	subs	r3, r3, r6
 8006276:	50a3      	str	r3, [r4, r2]
 8006278:	e7ab      	b.n	80061d2 <_malloc_r+0x22>
 800627a:	42a3      	cmp	r3, r4
 800627c:	6862      	ldr	r2, [r4, #4]
 800627e:	d1dd      	bne.n	800623c <_malloc_r+0x8c>
 8006280:	f8c8 2000 	str.w	r2, [r8]
 8006284:	e7ec      	b.n	8006260 <_malloc_r+0xb0>
 8006286:	4623      	mov	r3, r4
 8006288:	6864      	ldr	r4, [r4, #4]
 800628a:	e7ac      	b.n	80061e6 <_malloc_r+0x36>
 800628c:	4634      	mov	r4, r6
 800628e:	6876      	ldr	r6, [r6, #4]
 8006290:	e7b4      	b.n	80061fc <_malloc_r+0x4c>
 8006292:	4613      	mov	r3, r2
 8006294:	e7cc      	b.n	8006230 <_malloc_r+0x80>
 8006296:	230c      	movs	r3, #12
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	4638      	mov	r0, r7
 800629c:	f000 f99e 	bl	80065dc <__malloc_unlock>
 80062a0:	e797      	b.n	80061d2 <_malloc_r+0x22>
 80062a2:	6025      	str	r5, [r4, #0]
 80062a4:	e7dc      	b.n	8006260 <_malloc_r+0xb0>
 80062a6:	605b      	str	r3, [r3, #4]
 80062a8:	deff      	udf	#255	; 0xff
 80062aa:	bf00      	nop
 80062ac:	2000041c 	.word	0x2000041c

080062b0 <_printf_common>:
 80062b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b4:	4616      	mov	r6, r2
 80062b6:	4699      	mov	r9, r3
 80062b8:	688a      	ldr	r2, [r1, #8]
 80062ba:	690b      	ldr	r3, [r1, #16]
 80062bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062c0:	4293      	cmp	r3, r2
 80062c2:	bfb8      	it	lt
 80062c4:	4613      	movlt	r3, r2
 80062c6:	6033      	str	r3, [r6, #0]
 80062c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062cc:	4607      	mov	r7, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	b10a      	cbz	r2, 80062d6 <_printf_common+0x26>
 80062d2:	3301      	adds	r3, #1
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	0699      	lsls	r1, r3, #26
 80062da:	bf42      	ittt	mi
 80062dc:	6833      	ldrmi	r3, [r6, #0]
 80062de:	3302      	addmi	r3, #2
 80062e0:	6033      	strmi	r3, [r6, #0]
 80062e2:	6825      	ldr	r5, [r4, #0]
 80062e4:	f015 0506 	ands.w	r5, r5, #6
 80062e8:	d106      	bne.n	80062f8 <_printf_common+0x48>
 80062ea:	f104 0a19 	add.w	sl, r4, #25
 80062ee:	68e3      	ldr	r3, [r4, #12]
 80062f0:	6832      	ldr	r2, [r6, #0]
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	42ab      	cmp	r3, r5
 80062f6:	dc26      	bgt.n	8006346 <_printf_common+0x96>
 80062f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062fc:	1e13      	subs	r3, r2, #0
 80062fe:	6822      	ldr	r2, [r4, #0]
 8006300:	bf18      	it	ne
 8006302:	2301      	movne	r3, #1
 8006304:	0692      	lsls	r2, r2, #26
 8006306:	d42b      	bmi.n	8006360 <_printf_common+0xb0>
 8006308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800630c:	4649      	mov	r1, r9
 800630e:	4638      	mov	r0, r7
 8006310:	47c0      	blx	r8
 8006312:	3001      	adds	r0, #1
 8006314:	d01e      	beq.n	8006354 <_printf_common+0xa4>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	f003 0306 	and.w	r3, r3, #6
 800631e:	2b04      	cmp	r3, #4
 8006320:	bf02      	ittt	eq
 8006322:	68e5      	ldreq	r5, [r4, #12]
 8006324:	6833      	ldreq	r3, [r6, #0]
 8006326:	1aed      	subeq	r5, r5, r3
 8006328:	68a3      	ldr	r3, [r4, #8]
 800632a:	bf0c      	ite	eq
 800632c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006330:	2500      	movne	r5, #0
 8006332:	4293      	cmp	r3, r2
 8006334:	bfc4      	itt	gt
 8006336:	1a9b      	subgt	r3, r3, r2
 8006338:	18ed      	addgt	r5, r5, r3
 800633a:	2600      	movs	r6, #0
 800633c:	341a      	adds	r4, #26
 800633e:	42b5      	cmp	r5, r6
 8006340:	d11a      	bne.n	8006378 <_printf_common+0xc8>
 8006342:	2000      	movs	r0, #0
 8006344:	e008      	b.n	8006358 <_printf_common+0xa8>
 8006346:	2301      	movs	r3, #1
 8006348:	4652      	mov	r2, sl
 800634a:	4649      	mov	r1, r9
 800634c:	4638      	mov	r0, r7
 800634e:	47c0      	blx	r8
 8006350:	3001      	adds	r0, #1
 8006352:	d103      	bne.n	800635c <_printf_common+0xac>
 8006354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635c:	3501      	adds	r5, #1
 800635e:	e7c6      	b.n	80062ee <_printf_common+0x3e>
 8006360:	18e1      	adds	r1, r4, r3
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	2030      	movs	r0, #48	; 0x30
 8006366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800636a:	4422      	add	r2, r4
 800636c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006374:	3302      	adds	r3, #2
 8006376:	e7c7      	b.n	8006308 <_printf_common+0x58>
 8006378:	2301      	movs	r3, #1
 800637a:	4622      	mov	r2, r4
 800637c:	4649      	mov	r1, r9
 800637e:	4638      	mov	r0, r7
 8006380:	47c0      	blx	r8
 8006382:	3001      	adds	r0, #1
 8006384:	d0e6      	beq.n	8006354 <_printf_common+0xa4>
 8006386:	3601      	adds	r6, #1
 8006388:	e7d9      	b.n	800633e <_printf_common+0x8e>
	...

0800638c <_printf_i>:
 800638c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	7e0f      	ldrb	r7, [r1, #24]
 8006392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006394:	2f78      	cmp	r7, #120	; 0x78
 8006396:	4691      	mov	r9, r2
 8006398:	4680      	mov	r8, r0
 800639a:	460c      	mov	r4, r1
 800639c:	469a      	mov	sl, r3
 800639e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063a2:	d807      	bhi.n	80063b4 <_printf_i+0x28>
 80063a4:	2f62      	cmp	r7, #98	; 0x62
 80063a6:	d80a      	bhi.n	80063be <_printf_i+0x32>
 80063a8:	2f00      	cmp	r7, #0
 80063aa:	f000 80d4 	beq.w	8006556 <_printf_i+0x1ca>
 80063ae:	2f58      	cmp	r7, #88	; 0x58
 80063b0:	f000 80c0 	beq.w	8006534 <_printf_i+0x1a8>
 80063b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063bc:	e03a      	b.n	8006434 <_printf_i+0xa8>
 80063be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063c2:	2b15      	cmp	r3, #21
 80063c4:	d8f6      	bhi.n	80063b4 <_printf_i+0x28>
 80063c6:	a101      	add	r1, pc, #4	; (adr r1, 80063cc <_printf_i+0x40>)
 80063c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063cc:	08006425 	.word	0x08006425
 80063d0:	08006439 	.word	0x08006439
 80063d4:	080063b5 	.word	0x080063b5
 80063d8:	080063b5 	.word	0x080063b5
 80063dc:	080063b5 	.word	0x080063b5
 80063e0:	080063b5 	.word	0x080063b5
 80063e4:	08006439 	.word	0x08006439
 80063e8:	080063b5 	.word	0x080063b5
 80063ec:	080063b5 	.word	0x080063b5
 80063f0:	080063b5 	.word	0x080063b5
 80063f4:	080063b5 	.word	0x080063b5
 80063f8:	0800653d 	.word	0x0800653d
 80063fc:	08006465 	.word	0x08006465
 8006400:	080064f7 	.word	0x080064f7
 8006404:	080063b5 	.word	0x080063b5
 8006408:	080063b5 	.word	0x080063b5
 800640c:	0800655f 	.word	0x0800655f
 8006410:	080063b5 	.word	0x080063b5
 8006414:	08006465 	.word	0x08006465
 8006418:	080063b5 	.word	0x080063b5
 800641c:	080063b5 	.word	0x080063b5
 8006420:	080064ff 	.word	0x080064ff
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	1d1a      	adds	r2, r3, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	602a      	str	r2, [r5, #0]
 800642c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006434:	2301      	movs	r3, #1
 8006436:	e09f      	b.n	8006578 <_printf_i+0x1ec>
 8006438:	6820      	ldr	r0, [r4, #0]
 800643a:	682b      	ldr	r3, [r5, #0]
 800643c:	0607      	lsls	r7, r0, #24
 800643e:	f103 0104 	add.w	r1, r3, #4
 8006442:	6029      	str	r1, [r5, #0]
 8006444:	d501      	bpl.n	800644a <_printf_i+0xbe>
 8006446:	681e      	ldr	r6, [r3, #0]
 8006448:	e003      	b.n	8006452 <_printf_i+0xc6>
 800644a:	0646      	lsls	r6, r0, #25
 800644c:	d5fb      	bpl.n	8006446 <_printf_i+0xba>
 800644e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006452:	2e00      	cmp	r6, #0
 8006454:	da03      	bge.n	800645e <_printf_i+0xd2>
 8006456:	232d      	movs	r3, #45	; 0x2d
 8006458:	4276      	negs	r6, r6
 800645a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800645e:	485a      	ldr	r0, [pc, #360]	; (80065c8 <_printf_i+0x23c>)
 8006460:	230a      	movs	r3, #10
 8006462:	e012      	b.n	800648a <_printf_i+0xfe>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	1d19      	adds	r1, r3, #4
 800646a:	6029      	str	r1, [r5, #0]
 800646c:	0605      	lsls	r5, r0, #24
 800646e:	d501      	bpl.n	8006474 <_printf_i+0xe8>
 8006470:	681e      	ldr	r6, [r3, #0]
 8006472:	e002      	b.n	800647a <_printf_i+0xee>
 8006474:	0641      	lsls	r1, r0, #25
 8006476:	d5fb      	bpl.n	8006470 <_printf_i+0xe4>
 8006478:	881e      	ldrh	r6, [r3, #0]
 800647a:	4853      	ldr	r0, [pc, #332]	; (80065c8 <_printf_i+0x23c>)
 800647c:	2f6f      	cmp	r7, #111	; 0x6f
 800647e:	bf0c      	ite	eq
 8006480:	2308      	moveq	r3, #8
 8006482:	230a      	movne	r3, #10
 8006484:	2100      	movs	r1, #0
 8006486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800648a:	6865      	ldr	r5, [r4, #4]
 800648c:	60a5      	str	r5, [r4, #8]
 800648e:	2d00      	cmp	r5, #0
 8006490:	bfa2      	ittt	ge
 8006492:	6821      	ldrge	r1, [r4, #0]
 8006494:	f021 0104 	bicge.w	r1, r1, #4
 8006498:	6021      	strge	r1, [r4, #0]
 800649a:	b90e      	cbnz	r6, 80064a0 <_printf_i+0x114>
 800649c:	2d00      	cmp	r5, #0
 800649e:	d04b      	beq.n	8006538 <_printf_i+0x1ac>
 80064a0:	4615      	mov	r5, r2
 80064a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80064a6:	fb03 6711 	mls	r7, r3, r1, r6
 80064aa:	5dc7      	ldrb	r7, [r0, r7]
 80064ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064b0:	4637      	mov	r7, r6
 80064b2:	42bb      	cmp	r3, r7
 80064b4:	460e      	mov	r6, r1
 80064b6:	d9f4      	bls.n	80064a2 <_printf_i+0x116>
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d10b      	bne.n	80064d4 <_printf_i+0x148>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	07de      	lsls	r6, r3, #31
 80064c0:	d508      	bpl.n	80064d4 <_printf_i+0x148>
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	6861      	ldr	r1, [r4, #4]
 80064c6:	4299      	cmp	r1, r3
 80064c8:	bfde      	ittt	le
 80064ca:	2330      	movle	r3, #48	; 0x30
 80064cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80064d4:	1b52      	subs	r2, r2, r5
 80064d6:	6122      	str	r2, [r4, #16]
 80064d8:	f8cd a000 	str.w	sl, [sp]
 80064dc:	464b      	mov	r3, r9
 80064de:	aa03      	add	r2, sp, #12
 80064e0:	4621      	mov	r1, r4
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7ff fee4 	bl	80062b0 <_printf_common>
 80064e8:	3001      	adds	r0, #1
 80064ea:	d14a      	bne.n	8006582 <_printf_i+0x1f6>
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f0:	b004      	add	sp, #16
 80064f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	f043 0320 	orr.w	r3, r3, #32
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	4833      	ldr	r0, [pc, #204]	; (80065cc <_printf_i+0x240>)
 8006500:	2778      	movs	r7, #120	; 0x78
 8006502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	6829      	ldr	r1, [r5, #0]
 800650a:	061f      	lsls	r7, r3, #24
 800650c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006510:	d402      	bmi.n	8006518 <_printf_i+0x18c>
 8006512:	065f      	lsls	r7, r3, #25
 8006514:	bf48      	it	mi
 8006516:	b2b6      	uxthmi	r6, r6
 8006518:	07df      	lsls	r7, r3, #31
 800651a:	bf48      	it	mi
 800651c:	f043 0320 	orrmi.w	r3, r3, #32
 8006520:	6029      	str	r1, [r5, #0]
 8006522:	bf48      	it	mi
 8006524:	6023      	strmi	r3, [r4, #0]
 8006526:	b91e      	cbnz	r6, 8006530 <_printf_i+0x1a4>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	f023 0320 	bic.w	r3, r3, #32
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	2310      	movs	r3, #16
 8006532:	e7a7      	b.n	8006484 <_printf_i+0xf8>
 8006534:	4824      	ldr	r0, [pc, #144]	; (80065c8 <_printf_i+0x23c>)
 8006536:	e7e4      	b.n	8006502 <_printf_i+0x176>
 8006538:	4615      	mov	r5, r2
 800653a:	e7bd      	b.n	80064b8 <_printf_i+0x12c>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	6826      	ldr	r6, [r4, #0]
 8006540:	6961      	ldr	r1, [r4, #20]
 8006542:	1d18      	adds	r0, r3, #4
 8006544:	6028      	str	r0, [r5, #0]
 8006546:	0635      	lsls	r5, r6, #24
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	d501      	bpl.n	8006550 <_printf_i+0x1c4>
 800654c:	6019      	str	r1, [r3, #0]
 800654e:	e002      	b.n	8006556 <_printf_i+0x1ca>
 8006550:	0670      	lsls	r0, r6, #25
 8006552:	d5fb      	bpl.n	800654c <_printf_i+0x1c0>
 8006554:	8019      	strh	r1, [r3, #0]
 8006556:	2300      	movs	r3, #0
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	4615      	mov	r5, r2
 800655c:	e7bc      	b.n	80064d8 <_printf_i+0x14c>
 800655e:	682b      	ldr	r3, [r5, #0]
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	602a      	str	r2, [r5, #0]
 8006564:	681d      	ldr	r5, [r3, #0]
 8006566:	6862      	ldr	r2, [r4, #4]
 8006568:	2100      	movs	r1, #0
 800656a:	4628      	mov	r0, r5
 800656c:	f7f9 fe60 	bl	8000230 <memchr>
 8006570:	b108      	cbz	r0, 8006576 <_printf_i+0x1ea>
 8006572:	1b40      	subs	r0, r0, r5
 8006574:	6060      	str	r0, [r4, #4]
 8006576:	6863      	ldr	r3, [r4, #4]
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	2300      	movs	r3, #0
 800657c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006580:	e7aa      	b.n	80064d8 <_printf_i+0x14c>
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	462a      	mov	r2, r5
 8006586:	4649      	mov	r1, r9
 8006588:	4640      	mov	r0, r8
 800658a:	47d0      	blx	sl
 800658c:	3001      	adds	r0, #1
 800658e:	d0ad      	beq.n	80064ec <_printf_i+0x160>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	079b      	lsls	r3, r3, #30
 8006594:	d413      	bmi.n	80065be <_printf_i+0x232>
 8006596:	68e0      	ldr	r0, [r4, #12]
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	4298      	cmp	r0, r3
 800659c:	bfb8      	it	lt
 800659e:	4618      	movlt	r0, r3
 80065a0:	e7a6      	b.n	80064f0 <_printf_i+0x164>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4632      	mov	r2, r6
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	47d0      	blx	sl
 80065ac:	3001      	adds	r0, #1
 80065ae:	d09d      	beq.n	80064ec <_printf_i+0x160>
 80065b0:	3501      	adds	r5, #1
 80065b2:	68e3      	ldr	r3, [r4, #12]
 80065b4:	9903      	ldr	r1, [sp, #12]
 80065b6:	1a5b      	subs	r3, r3, r1
 80065b8:	42ab      	cmp	r3, r5
 80065ba:	dcf2      	bgt.n	80065a2 <_printf_i+0x216>
 80065bc:	e7eb      	b.n	8006596 <_printf_i+0x20a>
 80065be:	2500      	movs	r5, #0
 80065c0:	f104 0619 	add.w	r6, r4, #25
 80065c4:	e7f5      	b.n	80065b2 <_printf_i+0x226>
 80065c6:	bf00      	nop
 80065c8:	080068cd 	.word	0x080068cd
 80065cc:	080068de 	.word	0x080068de

080065d0 <__malloc_lock>:
 80065d0:	4801      	ldr	r0, [pc, #4]	; (80065d8 <__malloc_lock+0x8>)
 80065d2:	f7ff bc65 	b.w	8005ea0 <__retarget_lock_acquire_recursive>
 80065d6:	bf00      	nop
 80065d8:	20000418 	.word	0x20000418

080065dc <__malloc_unlock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	; (80065e4 <__malloc_unlock+0x8>)
 80065de:	f7ff bc60 	b.w	8005ea2 <__retarget_lock_release_recursive>
 80065e2:	bf00      	nop
 80065e4:	20000418 	.word	0x20000418

080065e8 <_realloc_r>:
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ec:	4680      	mov	r8, r0
 80065ee:	4614      	mov	r4, r2
 80065f0:	460e      	mov	r6, r1
 80065f2:	b921      	cbnz	r1, 80065fe <_realloc_r+0x16>
 80065f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f8:	4611      	mov	r1, r2
 80065fa:	f7ff bdd9 	b.w	80061b0 <_malloc_r>
 80065fe:	b92a      	cbnz	r2, 800660c <_realloc_r+0x24>
 8006600:	f000 f84c 	bl	800669c <_free_r>
 8006604:	4625      	mov	r5, r4
 8006606:	4628      	mov	r0, r5
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	f000 f892 	bl	8006734 <_malloc_usable_size_r>
 8006610:	4284      	cmp	r4, r0
 8006612:	4607      	mov	r7, r0
 8006614:	d802      	bhi.n	800661c <_realloc_r+0x34>
 8006616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800661a:	d812      	bhi.n	8006642 <_realloc_r+0x5a>
 800661c:	4621      	mov	r1, r4
 800661e:	4640      	mov	r0, r8
 8006620:	f7ff fdc6 	bl	80061b0 <_malloc_r>
 8006624:	4605      	mov	r5, r0
 8006626:	2800      	cmp	r0, #0
 8006628:	d0ed      	beq.n	8006606 <_realloc_r+0x1e>
 800662a:	42bc      	cmp	r4, r7
 800662c:	4622      	mov	r2, r4
 800662e:	4631      	mov	r1, r6
 8006630:	bf28      	it	cs
 8006632:	463a      	movcs	r2, r7
 8006634:	f7ff fc36 	bl	8005ea4 <memcpy>
 8006638:	4631      	mov	r1, r6
 800663a:	4640      	mov	r0, r8
 800663c:	f000 f82e 	bl	800669c <_free_r>
 8006640:	e7e1      	b.n	8006606 <_realloc_r+0x1e>
 8006642:	4635      	mov	r5, r6
 8006644:	e7df      	b.n	8006606 <_realloc_r+0x1e>

08006646 <memmove>:
 8006646:	4288      	cmp	r0, r1
 8006648:	b510      	push	{r4, lr}
 800664a:	eb01 0402 	add.w	r4, r1, r2
 800664e:	d902      	bls.n	8006656 <memmove+0x10>
 8006650:	4284      	cmp	r4, r0
 8006652:	4623      	mov	r3, r4
 8006654:	d807      	bhi.n	8006666 <memmove+0x20>
 8006656:	1e43      	subs	r3, r0, #1
 8006658:	42a1      	cmp	r1, r4
 800665a:	d008      	beq.n	800666e <memmove+0x28>
 800665c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006660:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006664:	e7f8      	b.n	8006658 <memmove+0x12>
 8006666:	4402      	add	r2, r0
 8006668:	4601      	mov	r1, r0
 800666a:	428a      	cmp	r2, r1
 800666c:	d100      	bne.n	8006670 <memmove+0x2a>
 800666e:	bd10      	pop	{r4, pc}
 8006670:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006674:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006678:	e7f7      	b.n	800666a <memmove+0x24>
	...

0800667c <_sbrk_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d06      	ldr	r5, [pc, #24]	; (8006698 <_sbrk_r+0x1c>)
 8006680:	2300      	movs	r3, #0
 8006682:	4604      	mov	r4, r0
 8006684:	4608      	mov	r0, r1
 8006686:	602b      	str	r3, [r5, #0]
 8006688:	f7fa fd40 	bl	800110c <_sbrk>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_sbrk_r+0x1a>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	b103      	cbz	r3, 8006696 <_sbrk_r+0x1a>
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	20000424 	.word	0x20000424

0800669c <_free_r>:
 800669c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800669e:	2900      	cmp	r1, #0
 80066a0:	d044      	beq.n	800672c <_free_r+0x90>
 80066a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a6:	9001      	str	r0, [sp, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f1a1 0404 	sub.w	r4, r1, #4
 80066ae:	bfb8      	it	lt
 80066b0:	18e4      	addlt	r4, r4, r3
 80066b2:	f7ff ff8d 	bl	80065d0 <__malloc_lock>
 80066b6:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <_free_r+0x94>)
 80066b8:	9801      	ldr	r0, [sp, #4]
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	b933      	cbnz	r3, 80066cc <_free_r+0x30>
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	6014      	str	r4, [r2, #0]
 80066c2:	b003      	add	sp, #12
 80066c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066c8:	f7ff bf88 	b.w	80065dc <__malloc_unlock>
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	d908      	bls.n	80066e2 <_free_r+0x46>
 80066d0:	6825      	ldr	r5, [r4, #0]
 80066d2:	1961      	adds	r1, r4, r5
 80066d4:	428b      	cmp	r3, r1
 80066d6:	bf01      	itttt	eq
 80066d8:	6819      	ldreq	r1, [r3, #0]
 80066da:	685b      	ldreq	r3, [r3, #4]
 80066dc:	1949      	addeq	r1, r1, r5
 80066de:	6021      	streq	r1, [r4, #0]
 80066e0:	e7ed      	b.n	80066be <_free_r+0x22>
 80066e2:	461a      	mov	r2, r3
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	b10b      	cbz	r3, 80066ec <_free_r+0x50>
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	d9fa      	bls.n	80066e2 <_free_r+0x46>
 80066ec:	6811      	ldr	r1, [r2, #0]
 80066ee:	1855      	adds	r5, r2, r1
 80066f0:	42a5      	cmp	r5, r4
 80066f2:	d10b      	bne.n	800670c <_free_r+0x70>
 80066f4:	6824      	ldr	r4, [r4, #0]
 80066f6:	4421      	add	r1, r4
 80066f8:	1854      	adds	r4, r2, r1
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	6011      	str	r1, [r2, #0]
 80066fe:	d1e0      	bne.n	80066c2 <_free_r+0x26>
 8006700:	681c      	ldr	r4, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	6053      	str	r3, [r2, #4]
 8006706:	440c      	add	r4, r1
 8006708:	6014      	str	r4, [r2, #0]
 800670a:	e7da      	b.n	80066c2 <_free_r+0x26>
 800670c:	d902      	bls.n	8006714 <_free_r+0x78>
 800670e:	230c      	movs	r3, #12
 8006710:	6003      	str	r3, [r0, #0]
 8006712:	e7d6      	b.n	80066c2 <_free_r+0x26>
 8006714:	6825      	ldr	r5, [r4, #0]
 8006716:	1961      	adds	r1, r4, r5
 8006718:	428b      	cmp	r3, r1
 800671a:	bf04      	itt	eq
 800671c:	6819      	ldreq	r1, [r3, #0]
 800671e:	685b      	ldreq	r3, [r3, #4]
 8006720:	6063      	str	r3, [r4, #4]
 8006722:	bf04      	itt	eq
 8006724:	1949      	addeq	r1, r1, r5
 8006726:	6021      	streq	r1, [r4, #0]
 8006728:	6054      	str	r4, [r2, #4]
 800672a:	e7ca      	b.n	80066c2 <_free_r+0x26>
 800672c:	b003      	add	sp, #12
 800672e:	bd30      	pop	{r4, r5, pc}
 8006730:	2000041c 	.word	0x2000041c

08006734 <_malloc_usable_size_r>:
 8006734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006738:	1f18      	subs	r0, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	bfbc      	itt	lt
 800673e:	580b      	ldrlt	r3, [r1, r0]
 8006740:	18c0      	addlt	r0, r0, r3
 8006742:	4770      	bx	lr

08006744 <_init>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr

08006750 <_fini>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr
