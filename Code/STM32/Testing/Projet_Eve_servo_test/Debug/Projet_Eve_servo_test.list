
Projet_Eve_servo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  08006900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000294  24000060  08006960  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002f4  08006960  000202f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010dc1  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000231e  00000000  00000000  00030e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b10  00000000  00000000  000331b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000086c  00000000  00000000  00033cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002fce5  00000000  00000000  0003452c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010c9e  00000000  00000000  00064211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001331c7  00000000  00000000  00074eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003170  00000000  00000000  001a8078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001ab1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006630 	.word	0x08006630

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08006630 	.word	0x08006630

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, size_t data_blk_size)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006a8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80006ac:	6019      	str	r1, [r3, #0]
 80006ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006b2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006bc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006c0:	4602      	mov	r2, r0
 80006c2:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 80006c4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80006cc:	4a28      	ldr	r2, [pc, #160]	; (8000770 <dyn2_crc+0xd4>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	4611      	mov	r1, r2
 80006d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d6:	461a      	mov	r2, r3
 80006d8:	f005 fc16 	bl	8005f08 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 80006dc:	2300      	movs	r3, #0
 80006de:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80006e2:	e031      	b.n	8000748 <dyn2_crc+0xac>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80006e4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006e8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80006f6:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80006fa:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 80006fe:	6809      	ldr	r1, [r1, #0]
 8000700:	440b      	add	r3, r1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b29b      	uxth	r3, r3
 8000706:	4053      	eors	r3, r2
 8000708:	b29b      	uxth	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000710:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000714:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	f8b7 1214 	ldrh.w	r1, [r7, #532]	; 0x214
 8000722:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000726:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800072a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4053      	eors	r3, r2
 8000732:	b21a      	sxth	r2, r3
 8000734:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000738:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800073c:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800073e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000742:	3301      	adds	r3, #1
 8000744:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000748:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 800074c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000750:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d8c4      	bhi.n	80006e4 <dyn2_crc+0x48>
	}
	return crc_accum;
 800075a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800075e:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000762:	881b      	ldrh	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	08006648 	.word	0x08006648

08000774 <dyn2_append_crc>:
uint8_t* dyn2_append_crc(uint8_t* instruction,uint16_t bufferSize){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
		return NULL;
	}

	memcpy(instruction_sent, instruction, bufferSize);
	*/
	unsigned short crc = dyn2_crc(0, instruction, bufferSize - 2);
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	3b02      	subs	r3, #2
 8000784:	461a      	mov	r2, r3
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff ff87 	bl	800069c <dyn2_crc>
 800078e:	4603      	mov	r3, r0
 8000790:	81fb      	strh	r3, [r7, #14]
	unsigned char crc_l = crc & 0x00FF;
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	737b      	strb	r3, [r7, #13]
	unsigned char crc_h = (crc >> 8) & 0x00FF;
 8000796:	89fb      	ldrh	r3, [r7, #14]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	b29b      	uxth	r3, r3
 800079c:	733b      	strb	r3, [r7, #12]

	instruction[bufferSize - 2] = crc_l;
 800079e:	887b      	ldrh	r3, [r7, #2]
 80007a0:	3b02      	subs	r3, #2
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	7b7a      	ldrb	r2, [r7, #13]
 80007a8:	701a      	strb	r2, [r3, #0]
	instruction[bufferSize - 1] = crc_h;
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	7b3a      	ldrb	r2, [r7, #12]
 80007b4:	701a      	strb	r2, [r3, #0]

	return instruction;
 80007b6:	687b      	ldr	r3, [r7, #4]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <dyn2_debug_sendArrayAsString>:

void dyn2_debug_sendArrayAsString(uint8_t* array, int size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09e      	sub	sp, #120	; 0x78
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	// Convert array to a string
	char arrayString[100];  // Adjust the size according to your needs
	int index = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	677b      	str	r3, [r7, #116]	; 0x74

	for (int i = 0; i < size; i++) {
 80007ce:	2300      	movs	r3, #0
 80007d0:	673b      	str	r3, [r7, #112]	; 0x70
 80007d2:	e012      	b.n	80007fa <dyn2_debug_sendArrayAsString+0x3a>
		// Convert each element to a string and append to arrayString
		index += sprintf(&arrayString[index], "%d\t", array[i]);
 80007d4:	f107 020c 	add.w	r2, r7, #12
 80007d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007da:	18d0      	adds	r0, r2, r3
 80007dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4916      	ldr	r1, [pc, #88]	; (8000840 <dyn2_debug_sendArrayAsString+0x80>)
 80007e8:	f005 fb2a 	bl	8005e40 <siprintf>
 80007ec:	4602      	mov	r2, r0
 80007ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007f0:	4413      	add	r3, r2
 80007f2:	677b      	str	r3, [r7, #116]	; 0x74
	for (int i = 0; i < size; i++) {
 80007f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007f6:	3301      	adds	r3, #1
 80007f8:	673b      	str	r3, [r7, #112]	; 0x70
 80007fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dbe8      	blt.n	80007d4 <dyn2_debug_sendArrayAsString+0x14>
	}

	// Add a newline character at the end
	index += sprintf(&arrayString[index], "\n");
 8000802:	f107 020c 	add.w	r2, r7, #12
 8000806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000808:	4413      	add	r3, r2
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <dyn2_debug_sendArrayAsString+0x84>)
 800080c:	4618      	mov	r0, r3
 800080e:	f005 fb17 	bl	8005e40 <siprintf>
 8000812:	4602      	mov	r2, r0
 8000814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000816:	4413      	add	r3, r2
 8000818:	677b      	str	r3, [r7, #116]	; 0x74

	// Send the string through UART
	HAL_UART_Transmit(&huart3, (uint8_t*)arrayString, strlen(arrayString), HAL_MAX_DELAY);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fd66 	bl	80002f0 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f107 010c 	add.w	r1, r7, #12
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <dyn2_debug_sendArrayAsString+0x88>)
 8000832:	f003 feb3 	bl	800459c <HAL_UART_Transmit>
}
 8000836:	bf00      	nop
 8000838:	3778      	adds	r7, #120	; 0x78
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	08006848 	.word	0x08006848
 8000844:	0800684c 	.word	0x0800684c
 8000848:	24000114 	.word	0x24000114

0800084c <dyn2_send>:

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
int dyn2_send(uint8_t* buffer,uint16_t size){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]

	//dyn2_debug_sendArrayAsString(buffer_crc, size); // for debuging purposes

	HAL_HalfDuplex_EnableTransmitter(&huart4);
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <dyn2_send+0x3c>)
 800085a:	f003 fff5 	bl	8004848 <HAL_HalfDuplex_EnableTransmitter>

	HAL_UART_Transmit(&huart4, buffer, size, TIMEOUT);
 800085e:	887a      	ldrh	r2, [r7, #2]
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	4808      	ldr	r0, [pc, #32]	; (8000888 <dyn2_send+0x3c>)
 8000866:	f003 fe99 	bl	800459c <HAL_UART_Transmit>
	// Wait until UART transmission is complete
	while (HAL_UART_GetState(&huart4) != HAL_UART_STATE_READY);
 800086a:	bf00      	nop
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <dyn2_send+0x3c>)
 800086e:	f004 f893 	bl	8004998 <HAL_UART_GetState>
 8000872:	4603      	mov	r3, r0
 8000874:	2b20      	cmp	r3, #32
 8000876:	d1f9      	bne.n	800086c <dyn2_send+0x20>
	HAL_HalfDuplex_EnableReceiver(&huart4);
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <dyn2_send+0x3c>)
 800087a:	f004 f839 	bl	80048f0 <HAL_HalfDuplex_EnableReceiver>

	return 0;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24000080 	.word	0x24000080

0800088c <dyn2_read>:

uint8_t* dyn2_read(uint8_t ID,uint8_t address,int NParam) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	603a      	str	r2, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	460b      	mov	r3, r1
 800089a:	71bb      	strb	r3, [r7, #6]


    // Vérification que l'ID n'est pas le Broadcast ID
    if (ID == 0xFE) {
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2bfe      	cmp	r3, #254	; 0xfe
 80008a0:	d102      	bne.n	80008a8 <dyn2_read+0x1c>
        // Gérer le cas du Broadcast ID (ID 254)
        return 0xFFFFFFFF; // Valeur d'erreur
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e03a      	b.n	800091e <dyn2_read+0x92>
    }

    // Préparer l'instruction de lecture
    uint8_t tx_buffer[12] = {
 80008a8:	23ff      	movs	r3, #255	; 0xff
 80008aa:	723b      	strb	r3, [r7, #8]
 80008ac:	23ff      	movs	r3, #255	; 0xff
 80008ae:	727b      	strb	r3, [r7, #9]
 80008b0:	23fd      	movs	r3, #253	; 0xfd
 80008b2:	72bb      	strb	r3, [r7, #10]
 80008b4:	2300      	movs	r3, #0
 80008b6:	72fb      	strb	r3, [r7, #11]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	733b      	strb	r3, [r7, #12]
 80008bc:	2307      	movs	r3, #7
 80008be:	737b      	strb	r3, [r7, #13]
 80008c0:	2300      	movs	r3, #0
 80008c2:	73bb      	strb	r3, [r7, #14]
 80008c4:	2302      	movs	r3, #2
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	743b      	strb	r3, [r7, #16]
 80008cc:	2300      	movs	r3, #0
 80008ce:	747b      	strb	r3, [r7, #17]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	74bb      	strb	r3, [r7, #18]
 80008d6:	2300      	movs	r3, #0
 80008d8:	74fb      	strb	r3, [r7, #19]
        0x02,        			// Instruction(0x02 pour Read
		address,0x00, 			// adress of the value to be read
		NParam,0x00			// data length don't know how it works
    };

	uint16_t size = (uint16_t) NbOfElements(tx_buffer);
 80008da:	230c      	movs	r3, #12
 80008dc:	83fb      	strh	r3, [r7, #30]

    uint8_t* buffer = (uint8_t *)malloc((size + 1) * sizeof(uint8_t)); // Dynamically allocate memory + 1 because there is the error Byte
 80008de:	8bfb      	ldrh	r3, [r7, #30]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 f9f8 	bl	8005cd8 <malloc>
 80008e8:	4603      	mov	r3, r0
 80008ea:	61bb      	str	r3, [r7, #24]
    if (buffer == NULL) {
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <dyn2_read+0x6a>
        // Handle memory allocation failure
        return NULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e013      	b.n	800091e <dyn2_read+0x92>
    }
	uint8_t* DYN2_read_CRC = dyn2_append_crc(tx_buffer,size);
 80008f6:	8bfa      	ldrh	r2, [r7, #30]
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff38 	bl	8000774 <dyn2_append_crc>
 8000904:	6178      	str	r0, [r7, #20]

	dyn2_send(DYN2_read_CRC,size);
 8000906:	8bfb      	ldrh	r3, [r7, #30]
 8000908:	4619      	mov	r1, r3
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff ff9e 	bl	800084c <dyn2_send>

    HAL_UART_Receive(&huart4, buffer, size, TIMEOUT); // Assuming TIMEOUT is defined elsewhere
 8000910:	8bfa      	ldrh	r2, [r7, #30]
 8000912:	2364      	movs	r3, #100	; 0x64
 8000914:	69b9      	ldr	r1, [r7, #24]
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <dyn2_read+0x9c>)
 8000918:	f003 fece 	bl	80046b8 <HAL_UART_Receive>
    return buffer;
 800091c:	69bb      	ldr	r3, [r7, #24]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	24000080 	.word	0x24000080

0800092c <dyn2_led>:
	uint16_t size = (uint16_t) NbOfElements(Dynamixel_PING);

	dyn2_send(Dynamixel_PING,size);
}
// Status 1 : Led ON, status 0 : Led OFF
int dyn2_led(MOTOR motor,int status){
 800092c:	b084      	sub	sp, #16
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	f107 0c20 	add.w	ip, r7, #32
 8000938:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//			/*débutparam, address 65:*/ ,0x41,0x00
//			/*value in the address*/,0x01
//			/*on calcule le CRC après */,0x00,0x00};
	uint8_t DYN2_LED[13];
	// HEADER
	DYN2_LED[0] = HEADER_1;
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <dyn2_led+0xb4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	703b      	strb	r3, [r7, #0]
	DYN2_LED[1] = HEADER_2;
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <dyn2_led+0xb8>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	707b      	strb	r3, [r7, #1]
	DYN2_LED[2] = HEADER_3;
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <dyn2_led+0xbc>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	70bb      	strb	r3, [r7, #2]
	DYN2_LED[3] = HEADER_4;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <dyn2_led+0xc0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	70fb      	strb	r3, [r7, #3]
	// ID
	DYN2_LED[4]= motor.id;
 8000954:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000958:	b2db      	uxtb	r3, r3
 800095a:	713b      	strb	r3, [r7, #4]
	// LENGTH
	DYN2_LED[5]= NbOfElements(DYN2_LED)- 7; // tkt ca marche
 800095c:	2306      	movs	r3, #6
 800095e:	717b      	strb	r3, [r7, #5]
	DYN2_LED[6]= 0x00;
 8000960:	2300      	movs	r3, #0
 8000962:	71bb      	strb	r3, [r7, #6]
	// INSTRUCTION
	DYN2_LED[7]= WRITE;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <dyn2_led+0xc4>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	71fb      	strb	r3, [r7, #7]
	// PARAMETERS
	// ADDRRESS

	if (motor.model==XL320) {
 800096a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <dyn2_led+0x4c>
		DYN2_LED[8]= XL320_ADDRESS_LED;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <dyn2_led+0xc8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	723b      	strb	r3, [r7, #8]
	}
	if (motor.model==XL430) {
 8000978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <dyn2_led+0x5a>
		DYN2_LED[8]= XL430_ADDRESS_LED;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <dyn2_led+0xcc>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	723b      	strb	r3, [r7, #8]
	}
	DYN2_LED[9]= 0x00;
 8000986:	2300      	movs	r3, #0
 8000988:	727b      	strb	r3, [r7, #9]
	// VALUE
	switch(status){
 800098a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d004      	beq.n	800099c <dyn2_led+0x70>
 8000992:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000996:	2b01      	cmp	r3, #1
 8000998:	d004      	beq.n	80009a4 <dyn2_led+0x78>
 800099a:	e007      	b.n	80009ac <dyn2_led+0x80>
	case 0:
		DYN2_LED[10]=LED_OFF;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <dyn2_led+0xd0>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	72bb      	strb	r3, [r7, #10]
		break;
 80009a2:	e006      	b.n	80009b2 <dyn2_led+0x86>
	case 1:
		DYN2_LED[10]=LED_ON;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <dyn2_led+0xd4>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	72bb      	strb	r3, [r7, #10]
		break;
 80009aa:	e002      	b.n	80009b2 <dyn2_led+0x86>
	default :
		return ERROR_LED_VALUE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <dyn2_led+0xd8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	e00e      	b.n	80009d0 <dyn2_led+0xa4>
	}
	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_LED);
 80009b2:	230d      	movs	r3, #13
 80009b4:	82fb      	strh	r3, [r7, #22]
	uint8_t* DYN2_LED_CRC = dyn2_append_crc(DYN2_LED,size);
 80009b6:	8afa      	ldrh	r2, [r7, #22]
 80009b8:	463b      	mov	r3, r7
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fed9 	bl	8000774 <dyn2_append_crc>
 80009c2:	6138      	str	r0, [r7, #16]

	dyn2_send(DYN2_LED_CRC,size);
 80009c4:	8afb      	ldrh	r3, [r7, #22]
 80009c6:	4619      	mov	r1, r3
 80009c8:	6938      	ldr	r0, [r7, #16]
 80009ca:	f7ff ff3f 	bl	800084c <dyn2_send>

	return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009da:	b004      	add	sp, #16
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	0800686d 	.word	0x0800686d
 80009e4:	0800686e 	.word	0x0800686e
 80009e8:	0800686f 	.word	0x0800686f
 80009ec:	08006870 	.word	0x08006870
 80009f0:	0800686c 	.word	0x0800686c
 80009f4:	08006874 	.word	0x08006874
 80009f8:	08006872 	.word	0x08006872
 80009fc:	08006883 	.word	0x08006883
 8000a00:	08006881 	.word	0x08006881
 8000a04:	08006878 	.word	0x08006878

08000a08 <dyn2_torque>:

// TORQUE_ON => writing in EEPROM is IMPOSSIBLE and the motor can rotate, TORQUE_OFF =>
int dyn2_torque(MOTOR motor,int mode){
 8000a08:	b084      	sub	sp, #16
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	f107 0c20 	add.w	ip, r7, #32
 8000a14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t DYN2_TORQUE[13];
	// HEADER
	DYN2_TORQUE[0] = HEADER_1;
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <dyn2_torque+0xb4>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	703b      	strb	r3, [r7, #0]
	DYN2_TORQUE[1] = HEADER_2;
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <dyn2_torque+0xb8>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	707b      	strb	r3, [r7, #1]
	DYN2_TORQUE[2] = HEADER_3;
 8000a24:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <dyn2_torque+0xbc>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	70bb      	strb	r3, [r7, #2]
	DYN2_TORQUE[3] = HEADER_4;
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <dyn2_torque+0xc0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	70fb      	strb	r3, [r7, #3]
	// ID
	DYN2_TORQUE[4]= motor.id;
 8000a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	713b      	strb	r3, [r7, #4]
	// LENGTH
	DYN2_TORQUE[5]= NbOfElements(DYN2_TORQUE)- 7; // tkt ça marche
 8000a38:	2306      	movs	r3, #6
 8000a3a:	717b      	strb	r3, [r7, #5]
	DYN2_TORQUE[6]= 0x00;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71bb      	strb	r3, [r7, #6]
	// INSTRUCTION
	DYN2_TORQUE[7]= WRITE;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <dyn2_torque+0xc4>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	71fb      	strb	r3, [r7, #7]
	// PARAMETERS
	// ADDRRESS
	if (motor.model == XL430) {
 8000a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <dyn2_torque+0x4c>
		DYN2_TORQUE[8]= XL430_ADDRESS_TORQUE;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <dyn2_torque+0xc8>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	723b      	strb	r3, [r7, #8]
	}
	if (motor.model == XL320) {
 8000a54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d102      	bne.n	8000a62 <dyn2_torque+0x5a>
		DYN2_TORQUE[8]= XL320_ADDRESS_TORQUE;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <dyn2_torque+0xcc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	723b      	strb	r3, [r7, #8]
	}
	DYN2_TORQUE[9]= 0x00;
 8000a62:	2300      	movs	r3, #0
 8000a64:	727b      	strb	r3, [r7, #9]
	// VALUE
	switch(mode){
 8000a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d004      	beq.n	8000a78 <dyn2_torque+0x70>
 8000a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d004      	beq.n	8000a80 <dyn2_torque+0x78>
 8000a76:	e007      	b.n	8000a88 <dyn2_torque+0x80>
	case 0:
		DYN2_TORQUE[10]=TORQUE_OFF;
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <dyn2_torque+0xd0>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	72bb      	strb	r3, [r7, #10]
		break;
 8000a7e:	e006      	b.n	8000a8e <dyn2_torque+0x86>
	case 1:
		DYN2_TORQUE[10]=TORQUE_ON;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <dyn2_torque+0xd4>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	72bb      	strb	r3, [r7, #10]
		break;
 8000a86:	e002      	b.n	8000a8e <dyn2_torque+0x86>
	default :
		return ERROR_TORQUE_VALUE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <dyn2_torque+0xd8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	e00e      	b.n	8000aac <dyn2_torque+0xa4>
	}

	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_TORQUE);
 8000a8e:	230d      	movs	r3, #13
 8000a90:	82fb      	strh	r3, [r7, #22]
	uint8_t* DYN2_TORQUE_CRC = dyn2_append_crc(DYN2_TORQUE,size);
 8000a92:	8afa      	ldrh	r2, [r7, #22]
 8000a94:	463b      	mov	r3, r7
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fe6b 	bl	8000774 <dyn2_append_crc>
 8000a9e:	6138      	str	r0, [r7, #16]

	dyn2_send(DYN2_TORQUE_CRC,size);
 8000aa0:	8afb      	ldrh	r3, [r7, #22]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6938      	ldr	r0, [r7, #16]
 8000aa6:	f7ff fed1 	bl	800084c <dyn2_send>
	return 0;
 8000aaa:	2300      	movs	r3, #0

}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ab6:	b004      	add	sp, #16
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	0800686d 	.word	0x0800686d
 8000ac0:	0800686e 	.word	0x0800686e
 8000ac4:	0800686f 	.word	0x0800686f
 8000ac8:	08006870 	.word	0x08006870
 8000acc:	0800686c 	.word	0x0800686c
 8000ad0:	08006871 	.word	0x08006871
 8000ad4:	08006873 	.word	0x08006873
 8000ad8:	08006882 	.word	0x08006882
 8000adc:	08006880 	.word	0x08006880
 8000ae0:	0800687c 	.word	0x0800687c

08000ae4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000b28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_GPIO_Init+0x6c>)
 8000b38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]

}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	58024400 	.word	0x58024400

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0f8      	sub	sp, #480	; 0x1e0
 8000b58:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5a:	f000 fb85 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5e:	f000 f887 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b62:	f7ff ffbf 	bl	8000ae4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b66:	f000 fa3b 	bl	8000fe0 <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000b6a:	f000 f9ed 	bl	8000f48 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  MOTOR XL430_1 = {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8000b74:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b7c:	4a36      	ldr	r2, [pc, #216]	; (8000c58 <main+0x104>)
 8000b7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b82:	4611      	mov	r1, r2
 8000b84:	2294      	movs	r2, #148	; 0x94
 8000b86:	4618      	mov	r0, r3
 8000b88:	f005 f9be 	bl	8005f08 <memcpy>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
      .baudrate = 57600,
      .uart = huart4, // Assuming huart4 is already defined elsewhere
      .id = 1
  };

  MOTOR XL320_1 = {
 8000b92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000b96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000ba2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <main+0x108>)
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000bae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000bb2:	4a29      	ldr	r2, [pc, #164]	; (8000c58 <main+0x104>)
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	2294      	movs	r2, #148	; 0x94
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f005 f9a4 	bl	8005f08 <memcpy>
 8000bc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000bc4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      .model = XL320,
      .baudrate = 1000000,
      .uart = huart4, // Assuming huart4 is already defined elsewhere
      .id = 1
  };
  dyn2_torque(XL430_1,TORQUE_ON);
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <main+0x10c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	9324      	str	r3, [sp, #144]	; 0x90
 8000bd4:	4668      	mov	r0, sp
 8000bd6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bda:	2290      	movs	r2, #144	; 0x90
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f005 f993 	bl	8005f08 <memcpy>
 8000be2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be8:	f7ff ff0e 	bl	8000a08 <dyn2_torque>
  uint8_t* buffer = dyn2_read(1, XL430_ADDRESS_LED,1);
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <main+0x110>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff fe49 	bl	800088c <dyn2_read>
 8000bfa:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
  dyn2_debug_sendArrayAsString(buffer, 13);
 8000bfe:	210d      	movs	r1, #13
 8000c00:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8000c04:	f7ff fddc 	bl	80007c0 <dyn2_debug_sendArrayAsString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  dyn2_led(XL430_1,LED_ON);
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <main+0x114>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	9324      	str	r3, [sp, #144]	; 0x90
 8000c0e:	4668      	mov	r0, sp
 8000c10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c14:	2290      	movs	r2, #144	; 0x90
 8000c16:	4619      	mov	r1, r3
 8000c18:	f005 f976 	bl	8005f08 <memcpy>
 8000c1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c22:	f7ff fe83 	bl	800092c <dyn2_led>
	  //dyn2_position(XL430_1,90);
	  HAL_Delay(1000);
 8000c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2a:	f000 fbaf 	bl	800138c <HAL_Delay>
	  dyn2_led(XL430_1,LED_OFF);
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <main+0x118>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	9324      	str	r3, [sp, #144]	; 0x90
 8000c34:	4668      	mov	r0, sp
 8000c36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c3a:	2290      	movs	r2, #144	; 0x90
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f005 f963 	bl	8005f08 <memcpy>
 8000c42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c48:	f7ff fe70 	bl	800092c <dyn2_led>
	  //dyn2_position(XL430_1,0);

	  HAL_Delay(1000);
 8000c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c50:	f000 fb9c 	bl	800138c <HAL_Delay>
	  dyn2_led(XL430_1,LED_ON);
 8000c54:	e7d8      	b.n	8000c08 <main+0xb4>
 8000c56:	bf00      	nop
 8000c58:	24000080 	.word	0x24000080
 8000c5c:	000f4240 	.word	0x000f4240
 8000c60:	08006880 	.word	0x08006880
 8000c64:	08006872 	.word	0x08006872
 8000c68:	08006881 	.word	0x08006881
 8000c6c:	08006883 	.word	0x08006883

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b09c      	sub	sp, #112	; 0x70
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	224c      	movs	r2, #76	; 0x4c
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f005 f8fe 	bl	8005e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2220      	movs	r2, #32
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f005 f8f8 	bl	8005e80 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <SystemClock_Config+0xe0>)
 8000c92:	f04f 32ff 	mov.w	r2, #4294967295
 8000c96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f000 fe2e 	bl	80018fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <SystemClock_Config+0xe4>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <SystemClock_Config+0xe4>)
 8000caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <SystemClock_Config+0xe4>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cbc:	bf00      	nop
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <SystemClock_Config+0xe4>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cca:	d1f8      	bne.n	8000cbe <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ce2:	2318      	movs	r3, #24
 8000ce4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cea:	2304      	movs	r3, #4
 8000cec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fe54 	bl	80019b0 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d0e:	f000 f823 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	233f      	movs	r3, #63	; 0x3f
 8000d14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2303      	movs	r3, #3
 8000d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2102      	movs	r1, #2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fa6c 	bl	8002214 <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000d42:	f000 f809 	bl	8000d58 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3770      	adds	r7, #112	; 0x70
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58024800 	.word	0x58024800

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x30>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x30>)
 8000d7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	58024400 	.word	0x58024400

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 fab2 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f005 f848 	bl	8005eb0 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24100000 	.word	0x24100000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	2400007c 	.word	0x2400007c
 8000e54:	240002f8 	.word	0x240002f8

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <SystemInit+0xd0>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a31      	ldr	r2, [pc, #196]	; (8000f28 <SystemInit+0xd0>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <SystemInit+0xd4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d807      	bhi.n	8000e88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <SystemInit+0xd4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	4a2a      	ldr	r2, [pc, #168]	; (8000f2c <SystemInit+0xd4>)
 8000e82:	f043 0303 	orr.w	r3, r3, #3
 8000e86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <SystemInit+0xd8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a28      	ldr	r2, [pc, #160]	; (8000f30 <SystemInit+0xd8>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <SystemInit+0xd8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <SystemInit+0xd8>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4924      	ldr	r1, [pc, #144]	; (8000f30 <SystemInit+0xd8>)
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <SystemInit+0xdc>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <SystemInit+0xd4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <SystemInit+0xd4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 030f 	bic.w	r3, r3, #15
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <SystemInit+0xd4>)
 8000ebc:	f043 0303 	orr.w	r3, r3, #3
 8000ec0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <SystemInit+0xd8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <SystemInit+0xd8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <SystemInit+0xd8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <SystemInit+0xd8>)
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <SystemInit+0xe0>)
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <SystemInit+0xd8>)
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <SystemInit+0xe4>)
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <SystemInit+0xd8>)
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <SystemInit+0xe8>)
 8000ee4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <SystemInit+0xd8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <SystemInit+0xd8>)
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <SystemInit+0xe8>)
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <SystemInit+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <SystemInit+0xd8>)
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <SystemInit+0xe8>)
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <SystemInit+0xd8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <SystemInit+0xd8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <SystemInit+0xd8>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <SystemInit+0xd8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <SystemInit+0xec>)
 8000f18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00
 8000f2c:	52002000 	.word	0x52002000
 8000f30:	58024400 	.word	0x58024400
 8000f34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f38:	02020200 	.word	0x02020200
 8000f3c:	01ff0000 	.word	0x01ff0000
 8000f40:	01010280 	.word	0x01010280
 8000f44:	52004000 	.word	0x52004000

08000f48 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <MX_UART4_Init+0x94>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f54:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000f92:	f003 faab 	bl	80044ec <HAL_HalfDuplex_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f9c:	f7ff fedc 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000fa4:	f004 fdcd 	bl	8005b42 <HAL_UARTEx_SetTxFifoThreshold>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000fae:	f7ff fed3 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000fb6:	f004 fe02 	bl	8005bbe <HAL_UARTEx_SetRxFifoThreshold>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000fc0:	f7ff feca 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_UART4_Init+0x90>)
 8000fc6:	f004 fd83 	bl	8005ad0 <HAL_UARTEx_DisableFifoMode>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000fd0:	f7ff fec2 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	24000080 	.word	0x24000080
 8000fdc:	40004c00 	.word	0x40004c00

08000fe0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000fe6:	4a23      	ldr	r2, [pc, #140]	; (8001074 <MX_USART3_UART_Init+0x94>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_USART3_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800102a:	f003 fa5f 	bl	80044ec <HAL_HalfDuplex_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001034:	f7ff fe90 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800103c:	f004 fd81 	bl	8005b42 <HAL_UARTEx_SetTxFifoThreshold>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001046:	f7ff fe87 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104a:	2100      	movs	r1, #0
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800104e:	f004 fdb6 	bl	8005bbe <HAL_UARTEx_SetRxFifoThreshold>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001058:	f7ff fe7e 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_USART3_UART_Init+0x90>)
 800105e:	f004 fd37 	bl	8005ad0 <HAL_UARTEx_DisableFifoMode>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001068:	f7ff fe76 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	24000114 	.word	0x24000114
 8001074:	40004800 	.word	0x40004800

08001078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0bc      	sub	sp, #240	; 0xf0
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	22c0      	movs	r2, #192	; 0xc0
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f004 fef1 	bl	8005e80 <memset>
  if(uartHandle->Instance==UART4)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a58      	ldr	r2, [pc, #352]	; (8001204 <HAL_UART_MspInit+0x18c>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d146      	bne.n	8001136 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80010a8:	f04f 0202 	mov.w	r2, #2
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fc34 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010ca:	f7ff fe45 	bl	8000d58 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010ce:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <HAL_UART_MspInit+0x190>)
 80010d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010d4:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <HAL_UART_MspInit+0x190>)
 80010d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010da:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010de:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <HAL_UART_MspInit+0x190>)
 80010e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ec:	4b46      	ldr	r3, [pc, #280]	; (8001208 <HAL_UART_MspInit+0x190>)
 80010ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f2:	4a45      	ldr	r2, [pc, #276]	; (8001208 <HAL_UART_MspInit+0x190>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010fc:	4b42      	ldr	r3, [pc, #264]	; (8001208 <HAL_UART_MspInit+0x190>)
 80010fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001110:	2312      	movs	r3, #18
 8001112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001116:	2301      	movs	r3, #1
 8001118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001122:	2308      	movs	r3, #8
 8001124:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001128:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800112c:	4619      	mov	r1, r3
 800112e:	4837      	ldr	r0, [pc, #220]	; (800120c <HAL_UART_MspInit+0x194>)
 8001130:	f000 fa34 	bl	800159c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001134:	e061      	b.n	80011fa <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a35      	ldr	r2, [pc, #212]	; (8001210 <HAL_UART_MspInit+0x198>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d15c      	bne.n	80011fa <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001140:	f04f 0202 	mov.w	r2, #2
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fbe8 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001162:	f7ff fdf9 	bl	8000d58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_UART_MspInit+0x190>)
 8001168:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800116c:	4a26      	ldr	r2, [pc, #152]	; (8001208 <HAL_UART_MspInit+0x190>)
 800116e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001172:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_UART_MspInit+0x190>)
 8001178:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800117c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_UART_MspInit+0x190>)
 8001186:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800118a:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <HAL_UART_MspInit+0x190>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_UART_MspInit+0x190>)
 8001196:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 80011a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011aa:	2312      	movs	r3, #18
 80011ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011bc:	2307      	movs	r3, #7
 80011be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011c6:	4619      	mov	r1, r3
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <HAL_UART_MspInit+0x194>)
 80011ca:	f000 f9e7 	bl	800159c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 80011ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e8:	2307      	movs	r3, #7
 80011ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_UART_MspInit+0x194>)
 80011f6:	f000 f9d1 	bl	800159c <HAL_GPIO_Init>
}
 80011fa:	bf00      	nop
 80011fc:	37f0      	adds	r7, #240	; 0xf0
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40004c00 	.word	0x40004c00
 8001208:	58024400 	.word	0x58024400
 800120c:	58020c00 	.word	0x58020c00
 8001210:	40004800 	.word	0x40004800

08001214 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800124c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001218:	f7ff fe1e 	bl	8000e58 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800121e:	490d      	ldr	r1, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001234:	4c0a      	ldr	r4, [pc, #40]	; (8001260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001242:	f004 fe3b 	bl	8005ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001246:	f7ff fc85 	bl	8000b54 <main>
  bx  lr
 800124a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001250:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001254:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001258:	08006900 	.word	0x08006900
  ldr r2, =_sbss
 800125c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001260:	240002f4 	.word	0x240002f4

08001264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126e:	2003      	movs	r0, #3
 8001270:	f000 f962 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001274:	f001 f984 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 8001278:	4602      	mov	r2, r0
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_Init+0x68>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	4913      	ldr	r1, [pc, #76]	; (80012d4 <HAL_Init+0x6c>)
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_Init+0x68>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_Init+0x6c>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <HAL_Init+0x70>)
 80012aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_Init+0x74>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f814 	bl	80012e0 <HAL_InitTick>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e002      	b.n	80012c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012c2:	f7ff fd4f 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	58024400 	.word	0x58024400
 80012d4:	08006884 	.word	0x08006884
 80012d8:	24000004 	.word	0x24000004
 80012dc:	24000000 	.word	0x24000000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_InitTick+0x60>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e021      	b.n	8001338 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_InitTick+0x64>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_InitTick+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f939 	bl	8001582 <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f911 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x68>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2400000c 	.word	0x2400000c
 8001344:	24000000 	.word	0x24000000
 8001348:	24000008 	.word	0x24000008

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2400000c 	.word	0x2400000c
 8001370:	240001a8 	.word	0x240001a8

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	240001a8 	.word	0x240001a8

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2400000c 	.word	0x2400000c

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <__NVIC_SetPriorityGrouping+0x40>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x40>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	05fa0000 	.word	0x05fa0000

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff47 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5e 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff90 	bl	800148c <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5f 	bl	8001438 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb2 	bl	80014f4 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015aa:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <HAL_GPIO_Init+0x234>)
 80015ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015ae:	e194      	b.n	80018da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8186 	beq.w	80018d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d005      	beq.n	80015e0 <HAL_GPIO_Init+0x44>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d130      	bne.n	8001642 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001616:	2201      	movs	r2, #1
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f003 0201 	and.w	r2, r3, #1
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b03      	cmp	r3, #3
 800164c:	d017      	beq.n	800167e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d123      	bne.n	80016d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	08da      	lsrs	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3208      	adds	r2, #8
 8001692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	69b9      	ldr	r1, [r7, #24]
 80016ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0203 	and.w	r2, r3, #3
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80e0 	beq.w	80018d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_GPIO_Init+0x238>)
 8001716:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800171a:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <HAL_GPIO_Init+0x238>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_GPIO_Init+0x238>)
 8001726:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001732:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <HAL_GPIO_Init+0x23c>)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a20      	ldr	r2, [pc, #128]	; (80017dc <HAL_GPIO_Init+0x240>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d052      	beq.n	8001804 <HAL_GPIO_Init+0x268>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_GPIO_Init+0x244>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d031      	beq.n	80017ca <HAL_GPIO_Init+0x22e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_GPIO_Init+0x248>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d02b      	beq.n	80017c6 <HAL_GPIO_Init+0x22a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_GPIO_Init+0x24c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d025      	beq.n	80017c2 <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_GPIO_Init+0x250>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01f      	beq.n	80017be <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_GPIO_Init+0x254>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <HAL_GPIO_Init+0x258>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_GPIO_Init+0x25c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a18      	ldr	r2, [pc, #96]	; (80017fc <HAL_GPIO_Init+0x260>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a17      	ldr	r2, [pc, #92]	; (8001800 <HAL_GPIO_Init+0x264>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x20e>
 80017a6:	2309      	movs	r3, #9
 80017a8:	e02d      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017aa:	230a      	movs	r3, #10
 80017ac:	e02b      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017ae:	2308      	movs	r3, #8
 80017b0:	e029      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017b2:	2307      	movs	r3, #7
 80017b4:	e027      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e025      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e023      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017be:	2304      	movs	r3, #4
 80017c0:	e021      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e01f      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e01d      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e01b      	b.n	8001806 <HAL_GPIO_Init+0x26a>
 80017ce:	bf00      	nop
 80017d0:	58000080 	.word	0x58000080
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58000400 	.word	0x58000400
 80017dc:	58020000 	.word	0x58020000
 80017e0:	58020400 	.word	0x58020400
 80017e4:	58020800 	.word	0x58020800
 80017e8:	58020c00 	.word	0x58020c00
 80017ec:	58021000 	.word	0x58021000
 80017f0:	58021400 	.word	0x58021400
 80017f4:	58021800 	.word	0x58021800
 80017f8:	58021c00 	.word	0x58021c00
 80017fc:	58022000 	.word	0x58022000
 8001800:	58022400 	.word	0x58022400
 8001804:	2300      	movs	r3, #0
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001816:	4938      	ldr	r1, [pc, #224]	; (80018f8 <HAL_GPIO_Init+0x35c>)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800184a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3301      	adds	r3, #1
 80018d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f47f ae63 	bne.w	80015b0 <HAL_GPIO_Init+0x14>
  }
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3724      	adds	r7, #36	; 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	58000400 	.word	0x58000400

080018fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	2b06      	cmp	r3, #6
 800190e:	d00a      	beq.n	8001926 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d001      	beq.n	8001922 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e040      	b.n	80019a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e03e      	b.n	80019a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800192e:	491f      	ldr	r1, [pc, #124]	; (80019ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4313      	orrs	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001936:	f7ff fd1d 	bl	8001374 <HAL_GetTick>
 800193a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800193c:	e009      	b.n	8001952 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800193e:	f7ff fd19 	bl	8001374 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800194c:	d901      	bls.n	8001952 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e028      	b.n	80019a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800195e:	d1ee      	bne.n	800193e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b1e      	cmp	r3, #30
 8001964:	d008      	beq.n	8001978 <HAL_PWREx_ConfigSupply+0x7c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b2e      	cmp	r3, #46	; 0x2e
 800196a:	d005      	beq.n	8001978 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b1d      	cmp	r3, #29
 8001970:	d002      	beq.n	8001978 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b2d      	cmp	r3, #45	; 0x2d
 8001976:	d114      	bne.n	80019a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001978:	f7ff fcfc 	bl	8001374 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800197e:	e009      	b.n	8001994 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001980:	f7ff fcf8 	bl	8001374 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800198e:	d901      	bls.n	8001994 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e007      	b.n	80019a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d1ee      	bne.n	8001980 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	58024800 	.word	0x58024800

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	; 0x30
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	f000 bc1f 	b.w	8002202 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80b3 	beq.w	8001b38 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d2:	4b95      	ldr	r3, [pc, #596]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019dc:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d007      	beq.n	80019f8 <HAL_RCC_OscConfig+0x48>
 80019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ea:	2b18      	cmp	r3, #24
 80019ec:	d112      	bne.n	8001a14 <HAL_RCC_OscConfig+0x64>
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d10d      	bne.n	8001a14 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	4b8b      	ldr	r3, [pc, #556]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8098 	beq.w	8001b36 <HAL_RCC_OscConfig+0x186>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 8093 	bne.w	8001b36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e3f6      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_OscConfig+0x7c>
 8001a1e:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a81      	ldr	r2, [pc, #516]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e058      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d112      	bne.n	8001a5a <HAL_RCC_OscConfig+0xaa>
 8001a34:	4b7c      	ldr	r3, [pc, #496]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a7b      	ldr	r2, [pc, #492]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a78      	ldr	r2, [pc, #480]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b76      	ldr	r3, [pc, #472]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a75      	ldr	r2, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e041      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a62:	d112      	bne.n	8001a8a <HAL_RCC_OscConfig+0xda>
 8001a64:	4b70      	ldr	r3, [pc, #448]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6f      	ldr	r2, [pc, #444]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6c      	ldr	r2, [pc, #432]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a69      	ldr	r2, [pc, #420]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e029      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001a92:	d112      	bne.n	8001aba <HAL_RCC_OscConfig+0x10a>
 8001a94:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a63      	ldr	r2, [pc, #396]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a60      	ldr	r2, [pc, #384]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a5d      	ldr	r2, [pc, #372]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e011      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
 8001aba:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b58      	ldr	r3, [pc, #352]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a57      	ldr	r2, [pc, #348]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001ad8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001adc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d013      	beq.n	8001b0e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fc45 	bl	8001374 <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aee:	f7ff fc41 	bl	8001374 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b64      	cmp	r3, #100	; 0x64
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e380      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x13e>
 8001b0c:	e014      	b.n	8001b38 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fc31 	bl	8001374 <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b16:	f7ff fc2d 	bl	8001374 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b64      	cmp	r3, #100	; 0x64
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e36c      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b28:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x166>
 8001b34:	e000      	b.n	8001b38 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 808c 	beq.w	8001c5e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b46:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b4e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1bc>
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	2b18      	cmp	r3, #24
 8001b60:	d137      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x222>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d132      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1d4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e33e      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0219 	bic.w	r2, r3, #25
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4925      	ldr	r1, [pc, #148]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fbed 	bl	8001374 <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fbe9 	bl	8001374 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e328      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	4917      	ldr	r1, [pc, #92]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd0:	e045      	b.n	8001c5e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d028      	beq.n	8001c2c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0219 	bic.w	r2, r3, #25
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	4910      	ldr	r1, [pc, #64]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff fbc2 	bl	8001374 <HAL_GetTick>
 8001bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fbbe 	bl	8001374 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e2fd      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	061b      	lsls	r3, r3, #24
 8001c20:	4901      	ldr	r1, [pc, #4]	; (8001c28 <HAL_RCC_OscConfig+0x278>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
 8001c26:	e01a      	b.n	8001c5e <HAL_RCC_OscConfig+0x2ae>
 8001c28:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2c:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a96      	ldr	r2, [pc, #600]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff fb9c 	bl	8001374 <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff fb98 	bl	8001374 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e2d7      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c52:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d06a      	beq.n	8001d40 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6a:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c74:	4b85      	ldr	r3, [pc, #532]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d007      	beq.n	8001c90 <HAL_RCC_OscConfig+0x2e0>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b18      	cmp	r3, #24
 8001c84:	d11b      	bne.n	8001cbe <HAL_RCC_OscConfig+0x30e>
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d116      	bne.n	8001cbe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c90:	4b7e      	ldr	r3, [pc, #504]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2f8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b80      	cmp	r3, #128	; 0x80
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e2ac      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ca8:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	4975      	ldr	r1, [pc, #468]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cbc:	e040      	b.n	8001d40 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d023      	beq.n	8001d0e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cc6:	4b71      	ldr	r3, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a70      	ldr	r2, [pc, #448]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fb4f 	bl	8001374 <HAL_GetTick>
 8001cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cda:	f7ff fb4b 	bl	8001374 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e28a      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cec:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	4961      	ldr	r1, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
 8001d0c:	e018      	b.n	8001d40 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a5e      	ldr	r2, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fb2b 	bl	8001374 <HAL_GetTick>
 8001d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d22:	f7ff fb27 	bl	8001374 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e266      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d34:	4b55      	ldr	r3, [pc, #340]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d036      	beq.n	8001dba <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d019      	beq.n	8001d88 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d54:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff fb08 	bl	8001374 <HAL_GetTick>
 8001d64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fb04 	bl	8001374 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e243      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d7a:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x3b8>
 8001d86:	e018      	b.n	8001dba <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d88:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8c:	4a3f      	ldr	r2, [pc, #252]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff faee 	bl	8001374 <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff faea 	bl	8001374 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e229      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d036      	beq.n	8001e34 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d019      	beq.n	8001e02 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dce:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dda:	f7ff facb 	bl	8001374 <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de2:	f7ff fac7 	bl	8001374 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e206      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x432>
 8001e00:	e018      	b.n	8001e34 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fab1 	bl	8001374 <HAL_GetTick>
 8001e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e16:	f7ff faad 	bl	8001374 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1ec      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80af 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_RCC_OscConfig+0x4e0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x4e0>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e4e:	f7ff fa91 	bl	8001374 <HAL_GetTick>
 8001e52:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff fa8d 	bl	8001374 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b64      	cmp	r3, #100	; 0x64
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1cc      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x4e0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4e4>
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a02      	ldr	r2, [pc, #8]	; (8001e8c <HAL_RCC_OscConfig+0x4dc>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
 8001e88:	e05b      	b.n	8001f42 <HAL_RCC_OscConfig+0x592>
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58024800 	.word	0x58024800
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d112      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x512>
 8001e9c:	4b9d      	ldr	r3, [pc, #628]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a9c      	ldr	r2, [pc, #624]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	4b9a      	ldr	r3, [pc, #616]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a99      	ldr	r2, [pc, #612]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	4b97      	ldr	r3, [pc, #604]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	4a96      	ldr	r2, [pc, #600]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec0:	e03f      	b.n	8001f42 <HAL_RCC_OscConfig+0x592>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d112      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x540>
 8001eca:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	4a91      	ldr	r2, [pc, #580]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed6:	4b8f      	ldr	r3, [pc, #572]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	4a8e      	ldr	r2, [pc, #568]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee2:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a8b      	ldr	r2, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	e028      	b.n	8001f42 <HAL_RCC_OscConfig+0x592>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b85      	cmp	r3, #133	; 0x85
 8001ef6:	d112      	bne.n	8001f1e <HAL_RCC_OscConfig+0x56e>
 8001ef8:	4b86      	ldr	r3, [pc, #536]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a85      	ldr	r2, [pc, #532]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	4b83      	ldr	r3, [pc, #524]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a82      	ldr	r2, [pc, #520]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	4b80      	ldr	r3, [pc, #512]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a7f      	ldr	r2, [pc, #508]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	e011      	b.n	8001f42 <HAL_RCC_OscConfig+0x592>
 8001f1e:	4b7d      	ldr	r3, [pc, #500]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a7c      	ldr	r2, [pc, #496]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2a:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a79      	ldr	r2, [pc, #484]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	4b77      	ldr	r3, [pc, #476]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a76      	ldr	r2, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fa13 	bl	8001374 <HAL_GetTick>
 8001f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff fa0f 	bl	8001374 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e14c      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ee      	beq.n	8001f52 <HAL_RCC_OscConfig+0x5a2>
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7ff f9fd 	bl	8001374 <HAL_GetTick>
 8001f7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff f9f9 	bl	8001374 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e136      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f94:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 812b 	beq.w	8002200 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001faa:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fb2:	2b18      	cmp	r3, #24
 8001fb4:	f000 80bb 	beq.w	800212e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	f040 8095 	bne.w	80020ec <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b54      	ldr	r3, [pc, #336]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a53      	ldr	r2, [pc, #332]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff f9d1 	bl	8001374 <HAL_GetTick>
 8001fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff f9cd 	bl	8001374 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e10c      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff4:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8001ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff8:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCC_OscConfig+0x768>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	430a      	orrs	r2, r1
 8002008:	4942      	ldr	r1, [pc, #264]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 800200a:	4313      	orrs	r3, r2
 800200c:	628b      	str	r3, [r1, #40]	; 0x28
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	3b01      	subs	r3, #1
 8002014:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	3b01      	subs	r3, #1
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	b29b      	uxth	r3, r3
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002028:	3b01      	subs	r3, #1
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	3b01      	subs	r3, #1
 8002038:	061b      	lsls	r3, r3, #24
 800203a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800203e:	4935      	ldr	r1, [pc, #212]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002040:	4313      	orrs	r3, r2
 8002042:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002044:	4b33      	ldr	r3, [pc, #204]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_RCC_OscConfig+0x76c>)
 8002056:	4013      	ands	r3, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800205c:	00d2      	lsls	r2, r2, #3
 800205e:	492d      	ldr	r1, [pc, #180]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002060:	4313      	orrs	r3, r2
 8002062:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f023 020c 	bic.w	r2, r3, #12
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	4928      	ldr	r1, [pc, #160]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002072:	4313      	orrs	r3, r2
 8002074:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	f023 0202 	bic.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4924      	ldr	r1, [pc, #144]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002084:	4313      	orrs	r3, r2
 8002086:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	4a21      	ldr	r2, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 800209a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a15      	ldr	r2, [pc, #84]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff f956 	bl	8001374 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f952 	bl	8001374 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e091      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x71c>
 80020ea:	e089      	b.n	8002200 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_RCC_OscConfig+0x764>)
 80020f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7ff f93c 	bl	8001374 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020fe:	e00f      	b.n	8002120 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff f938 	bl	8001374 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d908      	bls.n	8002120 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e077      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
 8002112:	bf00      	nop
 8002114:	58024400 	.word	0x58024400
 8002118:	fffffc0c 	.word	0xfffffc0c
 800211c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002120:	4b3a      	ldr	r3, [pc, #232]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e9      	bne.n	8002100 <HAL_RCC_OscConfig+0x750>
 800212c:	e068      	b.n	8002200 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b01      	cmp	r3, #1
 8002140:	d031      	beq.n	80021a6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d12a      	bne.n	80021a6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d122      	bne.n	80021a6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d11a      	bne.n	80021a6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	0a5b      	lsrs	r3, r3, #9
 8002174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d111      	bne.n	80021a6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d108      	bne.n	80021a6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	0e1b      	lsrs	r3, r3, #24
 8002198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e02b      	b.n	8002202 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021b4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d01f      	beq.n	8002200 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	4a11      	ldr	r2, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021cc:	f7ff f8d2 	bl	8001374 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021d2:	bf00      	nop
 80021d4:	f7ff f8ce 	bl	8001374 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	4293      	cmp	r3, r2
 80021de:	d0f9      	beq.n	80021d4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 80021e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_OscConfig+0x860>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	4907      	ldr	r1, [pc, #28]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_RCC_OscConfig+0x85c>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	58024400 	.word	0x58024400
 8002210:	ffff0007 	.word	0xffff0007

08002214 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e19c      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b8a      	ldr	r3, [pc, #552]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d910      	bls.n	8002258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b87      	ldr	r3, [pc, #540]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 020f 	bic.w	r2, r3, #15
 800223e:	4985      	ldr	r1, [pc, #532]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b83      	ldr	r3, [pc, #524]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e184      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d010      	beq.n	8002286 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002270:	429a      	cmp	r2, r3
 8002272:	d908      	bls.n	8002286 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002274:	4b78      	ldr	r3, [pc, #480]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	4975      	ldr	r1, [pc, #468]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002282:	4313      	orrs	r3, r2
 8002284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	4b70      	ldr	r3, [pc, #448]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800229e:	429a      	cmp	r2, r3
 80022a0:	d908      	bls.n	80022b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022a2:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	496a      	ldr	r1, [pc, #424]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d908      	bls.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	495e      	ldr	r1, [pc, #376]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d908      	bls.n	8002310 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022fe:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4953      	ldr	r1, [pc, #332]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800230c:	4313      	orrs	r3, r2
 800230e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d010      	beq.n	800233e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b4d      	ldr	r3, [pc, #308]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	429a      	cmp	r2, r3
 800232a:	d908      	bls.n	800233e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f023 020f 	bic.w	r2, r3, #15
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4947      	ldr	r1, [pc, #284]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800233a:	4313      	orrs	r3, r2
 800233c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d055      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800234a:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4940      	ldr	r1, [pc, #256]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002358:	4313      	orrs	r3, r2
 800235a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d107      	bne.n	8002374 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002364:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d121      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0f6      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d107      	bne.n	800238c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d115      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0ea      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002394:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0de      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d6      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b4:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f023 0207 	bic.w	r2, r3, #7
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4925      	ldr	r1, [pc, #148]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c6:	f7fe ffd5 	bl	8001374 <HAL_GetTick>
 80023ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ce:	f7fe ffd1 	bl	8001374 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0be      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d1eb      	bne.n	80023ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	429a      	cmp	r2, r3
 8002410:	d208      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f023 020f 	bic.w	r2, r3, #15
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002420:	4313      	orrs	r3, r2
 8002422:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d214      	bcs.n	800245c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 020f 	bic.w	r2, r3, #15
 800243a:	4906      	ldr	r1, [pc, #24]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e086      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
 8002454:	52002000 	.word	0x52002000
 8002458:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d010      	beq.n	800248a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	4b3f      	ldr	r3, [pc, #252]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002474:	429a      	cmp	r2, r3
 8002476:	d208      	bcs.n	800248a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002478:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4939      	ldr	r1, [pc, #228]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 8002486:	4313      	orrs	r3, r2
 8002488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d208      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	492e      	ldr	r1, [pc, #184]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d208      	bcs.n	80024e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	4922      	ldr	r1, [pc, #136]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fe:	429a      	cmp	r2, r3
 8002500:	d208      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4917      	ldr	r1, [pc, #92]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 8002510:	4313      	orrs	r3, r2
 8002512:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002514:	f000 f834 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	4912      	ldr	r1, [pc, #72]	; (8002570 <HAL_RCC_ClockConfig+0x35c>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
 8002530:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_RCC_ClockConfig+0x35c>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x360>)
 800254a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_RCC_ClockConfig+0x364>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_RCC_ClockConfig+0x368>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fec2 	bl	80012e0 <HAL_InitTick>
 800255c:	4603      	mov	r3, r0
 800255e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	58024400 	.word	0x58024400
 8002570:	08006884 	.word	0x08006884
 8002574:	24000004 	.word	0x24000004
 8002578:	24000000 	.word	0x24000000
 800257c:	24000008 	.word	0x24000008

08002580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002586:	4bb3      	ldr	r3, [pc, #716]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800258e:	2b18      	cmp	r3, #24
 8002590:	f200 8155 	bhi.w	800283e <HAL_RCC_GetSysClockFreq+0x2be>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	08002601 	.word	0x08002601
 80025a0:	0800283f 	.word	0x0800283f
 80025a4:	0800283f 	.word	0x0800283f
 80025a8:	0800283f 	.word	0x0800283f
 80025ac:	0800283f 	.word	0x0800283f
 80025b0:	0800283f 	.word	0x0800283f
 80025b4:	0800283f 	.word	0x0800283f
 80025b8:	0800283f 	.word	0x0800283f
 80025bc:	08002627 	.word	0x08002627
 80025c0:	0800283f 	.word	0x0800283f
 80025c4:	0800283f 	.word	0x0800283f
 80025c8:	0800283f 	.word	0x0800283f
 80025cc:	0800283f 	.word	0x0800283f
 80025d0:	0800283f 	.word	0x0800283f
 80025d4:	0800283f 	.word	0x0800283f
 80025d8:	0800283f 	.word	0x0800283f
 80025dc:	0800262d 	.word	0x0800262d
 80025e0:	0800283f 	.word	0x0800283f
 80025e4:	0800283f 	.word	0x0800283f
 80025e8:	0800283f 	.word	0x0800283f
 80025ec:	0800283f 	.word	0x0800283f
 80025f0:	0800283f 	.word	0x0800283f
 80025f4:	0800283f 	.word	0x0800283f
 80025f8:	0800283f 	.word	0x0800283f
 80025fc:	08002633 	.word	0x08002633
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002600:	4b94      	ldr	r3, [pc, #592]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800260c:	4b91      	ldr	r3, [pc, #580]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	4a90      	ldr	r2, [pc, #576]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800261e:	e111      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002620:	4b8d      	ldr	r3, [pc, #564]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002622:	61bb      	str	r3, [r7, #24]
      break;
 8002624:	e10e      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002626:	4b8d      	ldr	r3, [pc, #564]	; (800285c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002628:	61bb      	str	r3, [r7, #24]
      break;
 800262a:	e10b      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800262c:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800262e:	61bb      	str	r3, [r7, #24]
      break;
 8002630:	e108      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002632:	4b88      	ldr	r3, [pc, #544]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800263c:	4b85      	ldr	r3, [pc, #532]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002646:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002648:	4b82      	ldr	r3, [pc, #520]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002652:	4b80      	ldr	r3, [pc, #512]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80e1 	beq.w	8002838 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b02      	cmp	r3, #2
 800267a:	f000 8083 	beq.w	8002784 <HAL_RCC_GetSysClockFreq+0x204>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b02      	cmp	r3, #2
 8002682:	f200 80a1 	bhi.w	80027c8 <HAL_RCC_GetSysClockFreq+0x248>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x114>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d056      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002692:	e099      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002694:	4b6f      	ldr	r3, [pc, #444]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02d      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026a0:	4b6c      	ldr	r3, [pc, #432]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	4a6b      	ldr	r2, [pc, #428]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ca:	4b62      	ldr	r3, [pc, #392]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026da:	ed97 6a02 	vldr	s12, [r7, #8]
 80026de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026fa:	e087      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002706:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002868 <HAL_RCC_GetSysClockFreq+0x2e8>
 800270a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270e:	4b51      	ldr	r3, [pc, #324]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002722:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002864 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800273e:	e065      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800286c <HAL_RCC_GetSysClockFreq+0x2ec>
 800274e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002752:	4b40      	ldr	r3, [pc, #256]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002762:	ed97 6a02 	vldr	s12, [r7, #8]
 8002766:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002864 <HAL_RCC_GetSysClockFreq+0x2e4>
 800276a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002782:	e043      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002870 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027c6:	e021      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800286c <HAL_RCC_GetSysClockFreq+0x2ec>
 80027d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002864 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800280a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	0a5b      	lsrs	r3, r3, #9
 8002812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002816:	3301      	adds	r3, #1
 8002818:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002824:	edd7 6a07 	vldr	s13, [r7, #28]
 8002828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800282c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002830:	ee17 3a90 	vmov	r3, s15
 8002834:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002836:	e005      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
      break;
 800283c:	e002      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002840:	61bb      	str	r3, [r7, #24]
      break;
 8002842:	bf00      	nop
  }

  return sysclockfreq;
 8002844:	69bb      	ldr	r3, [r7, #24]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	58024400 	.word	0x58024400
 8002858:	03d09000 	.word	0x03d09000
 800285c:	003d0900 	.word	0x003d0900
 8002860:	007a1200 	.word	0x007a1200
 8002864:	46000000 	.word	0x46000000
 8002868:	4c742400 	.word	0x4c742400
 800286c:	4a742400 	.word	0x4a742400
 8002870:	4af42400 	.word	0x4af42400

08002874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800287a:	f7ff fe81 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 800287e:	4602      	mov	r2, r0
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	490f      	ldr	r1, [pc, #60]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800288c:	5ccb      	ldrb	r3, [r1, r3]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_GetHCLKFreq+0x58>)
 80028b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_RCC_GetHCLKFreq+0x58>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	58024400 	.word	0x58024400
 80028c8:	08006884 	.word	0x08006884
 80028cc:	24000004 	.word	0x24000004
 80028d0:	24000000 	.word	0x24000000

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80028d8:	f7ff ffcc 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4904      	ldr	r1, [pc, #16]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	58024400 	.word	0x58024400
 80028fc:	08006884 	.word	0x08006884

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002904:	f7ff ffb6 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	58024400 	.word	0x58024400
 8002928:	08006884 	.word	0x08006884

0800292c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800292c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002930:	b0c8      	sub	sp, #288	; 0x120
 8002932:	af00      	add	r7, sp, #0
 8002934:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002938:	2300      	movs	r3, #0
 800293a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800293e:	2300      	movs	r3, #0
 8002940:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002950:	2500      	movs	r5, #0
 8002952:	ea54 0305 	orrs.w	r3, r4, r5
 8002956:	d049      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800295c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002962:	d02f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002964:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002968:	d828      	bhi.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800296a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296e:	d01a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002974:	d822      	bhi.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800297a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297e:	d007      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002980:	e01c      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002982:	4ba7      	ldr	r3, [pc, #668]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	4aa6      	ldr	r2, [pc, #664]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800298e:	e01a      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002994:	3308      	adds	r3, #8
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f001 fc43 	bl	8004224 <RCCEx_PLL2_Config>
 800299e:	4603      	mov	r3, r0
 80029a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029a4:	e00f      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80029a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029aa:	3328      	adds	r3, #40	; 0x28
 80029ac:	2102      	movs	r1, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 fcea 	bl	8004388 <RCCEx_PLL3_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029ba:	e004      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029c2:	e000      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80029c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10a      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029ce:	4b94      	ldr	r3, [pc, #592]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80029d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029dc:	4a90      	ldr	r2, [pc, #576]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029de:	430b      	orrs	r3, r1
 80029e0:	6513      	str	r3, [r2, #80]	; 0x50
 80029e2:	e003      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80029f8:	f04f 0900 	mov.w	r9, #0
 80029fc:	ea58 0309 	orrs.w	r3, r8, r9
 8002a00:	d047      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d82a      	bhi.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a0c:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a29 	.word	0x08002a29
 8002a18:	08002a37 	.word	0x08002a37
 8002a1c:	08002a4d 	.word	0x08002a4d
 8002a20:	08002a6b 	.word	0x08002a6b
 8002a24:	08002a6b 	.word	0x08002a6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a28:	4b7d      	ldr	r3, [pc, #500]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a7c      	ldr	r2, [pc, #496]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a34:	e01a      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 fbf0 	bl	8004224 <RCCEx_PLL2_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a4a:	e00f      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a50:	3328      	adds	r3, #40	; 0x28
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 fc97 	bl	8004388 <RCCEx_PLL3_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a60:	e004      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	f023 0107 	bic.w	r1, r3, #7
 8002a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	4a67      	ldr	r2, [pc, #412]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6513      	str	r3, [r2, #80]	; 0x50
 8002a88:	e003      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002a9e:	f04f 0b00 	mov.w	fp, #0
 8002aa2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002aa6:	d054      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ab2:	d036      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002ab4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ab8:	d82f      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	d032      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac4:	d829      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ac8:	d02f      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002aca:	2bc0      	cmp	r3, #192	; 0xc0
 8002acc:	d825      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d018      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002ad2:	2b80      	cmp	r3, #128	; 0x80
 8002ad4:	d821      	bhi.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d007      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002ade:	e01c      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002aec:	e01e      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002af2:	3308      	adds	r3, #8
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fb94 	bl	8004224 <RCCEx_PLL2_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b02:	e013      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b08:	3328      	adds	r3, #40	; 0x28
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f001 fc3b 	bl	8004388 <RCCEx_PLL3_Config>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b18:	e008      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b20:	e004      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002b22:	bf00      	nop
 8002b24:	e002      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002b34:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	4a37      	ldr	r2, [pc, #220]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6513      	str	r3, [r2, #80]	; 0x50
 8002b48:	e003      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002b5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	d05c      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b7c:	d03b      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b7e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b82:	d834      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b88:	d037      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8e:	d82e      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002b90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b94:	d033      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b96:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b9a:	d828      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d822      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb0:	d007      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002bb2:	e01c      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002bc0:	e01e      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fb2a 	bl	8004224 <RCCEx_PLL2_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002bd6:	e013      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bdc:	3328      	adds	r3, #40	; 0x28
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 fbd1 	bl	8004388 <RCCEx_PLL3_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002bec:	e008      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bf4:	e004      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	4a02      	ldr	r2, [pc, #8]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6513      	str	r3, [r2, #80]	; 0x50
 8002c1c:	e006      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002c1e:	bf00      	nop
 8002c20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002c42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002c46:	460b      	mov	r3, r1
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	d03a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	2b30      	cmp	r3, #48	; 0x30
 8002c54:	d01f      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002c56:	2b30      	cmp	r3, #48	; 0x30
 8002c58:	d819      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d00c      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d815      	bhi.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d019      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d111      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6a:	4bae      	ldr	r3, [pc, #696]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	4aad      	ldr	r2, [pc, #692]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002c76:	e011      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	2102      	movs	r1, #2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 facf 	bl	8004224 <RCCEx_PLL2_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002c8c:	e006      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c94:	e002      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ca4:	4b9f      	ldr	r3, [pc, #636]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	4a9c      	ldr	r2, [pc, #624]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb8:	e003      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002cce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002cd8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	d051      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cec:	d035      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf2:	d82e      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002cf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cf8:	d031      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002cfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cfe:	d828      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d04:	d01a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	d822      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d14:	d007      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002d16:	e01c      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d18:	4b82      	ldr	r3, [pc, #520]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	4a81      	ldr	r2, [pc, #516]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d24:	e01c      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 fa78 	bl	8004224 <RCCEx_PLL2_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d3a:	e011      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d40:	3328      	adds	r3, #40	; 0x28
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 fb1f 	bl	8004388 <RCCEx_PLL3_Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d50:	e006      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d58:	e002      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d68:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d76:	4a6b      	ldr	r2, [pc, #428]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6513      	str	r3, [r2, #80]	; 0x50
 8002d7c:	e003      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002d9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002da0:	460b      	mov	r3, r1
 8002da2:	4313      	orrs	r3, r2
 8002da4:	d053      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db0:	d033      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db6:	d82c      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002db8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dbc:	d02f      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dc2:	d826      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dc8:	d02b      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002dca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dce:	d820      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd4:	d012      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dda:	d81a      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d022      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d115      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dea:	3308      	adds	r3, #8
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fa18 	bl	8004224 <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dfa:	e015      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e00:	3328      	adds	r3, #40	; 0x28
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fabf 	bl	8004388 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e10:	e00a      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e18:	e006      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002e1a:	bf00      	nop
 8002e1c:	e004      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e30:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e34:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e3e:	4a39      	ldr	r2, [pc, #228]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6513      	str	r3, [r2, #80]	; 0x50
 8002e44:	e003      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	d060      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e76:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002e7a:	d039      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002e7c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002e80:	d832      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e86:	d035      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e8c:	d82c      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e92:	d031      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d826      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e9e:	d02d      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002ea0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ea4:	d820      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eaa:	d012      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb0:	d81a      	bhi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d024      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eba:	d115      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f9ad 	bl	8004224 <RCCEx_PLL2_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ed0:	e017      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed6:	3328      	adds	r3, #40	; 0x28
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 fa54 	bl	8004388 <RCCEx_PLL3_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ee6:	e00c      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002eee:	e008      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ef0:	bf00      	nop
 8002ef2:	e006      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ef4:	bf00      	nop
 8002ef6:	e004      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002ef8:	bf00      	nop
 8002efa:	e002      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002efc:	bf00      	nop
 8002efe:	e000      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10e      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f1a:	4a02      	ldr	r2, [pc, #8]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f20:	e006      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002f22:	bf00      	nop
 8002f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	d037      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f5a:	d00e      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f60:	d816      	bhi.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d018      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f6a:	d111      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f6c:	4bc4      	ldr	r3, [pc, #784]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	4ac3      	ldr	r2, [pc, #780]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f78:	e00f      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7e:	3308      	adds	r3, #8
 8002f80:	2101      	movs	r1, #1
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 f94e 	bl	8004224 <RCCEx_PLL2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f8e:	e004      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f96:	e000      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fa2:	4bb7      	ldr	r3, [pc, #732]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb0:	4ab3      	ldr	r2, [pc, #716]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	6513      	str	r3, [r2, #80]	; 0x50
 8002fb6:	e003      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002fd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	d039      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d81c      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	0800302d 	.word	0x0800302d
 8002ff4:	08003001 	.word	0x08003001
 8002ff8:	0800300f 	.word	0x0800300f
 8002ffc:	0800302d 	.word	0x0800302d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003000:	4b9f      	ldr	r3, [pc, #636]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4a9e      	ldr	r2, [pc, #632]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800300c:	e00f      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800300e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003012:	3308      	adds	r3, #8
 8003014:	2102      	movs	r1, #2
 8003016:	4618      	mov	r0, r3
 8003018:	f001 f904 	bl	8004224 <RCCEx_PLL2_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003022:	e004      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800302c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003036:	4b92      	ldr	r3, [pc, #584]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	f023 0103 	bic.w	r1, r3, #3
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	4a8e      	ldr	r2, [pc, #568]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003046:	430b      	orrs	r3, r1
 8003048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304a:	e003      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003050:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800306a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800306e:	460b      	mov	r3, r1
 8003070:	4313      	orrs	r3, r2
 8003072:	f000 8099 	beq.w	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003076:	4b83      	ldr	r3, [pc, #524]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a82      	ldr	r2, [pc, #520]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003080:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003082:	f7fe f977 	bl	8001374 <HAL_GetTick>
 8003086:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800308a:	e00b      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308c:	f7fe f972 	bl	8001374 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b64      	cmp	r3, #100	; 0x64
 800309a:	d903      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030a2:	e005      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030a4:	4b77      	ldr	r3, [pc, #476]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ed      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80030b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d173      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030b8:	4b71      	ldr	r3, [pc, #452]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030c4:	4053      	eors	r3, r2
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d015      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ce:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030da:	4b69      	ldr	r3, [pc, #420]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030e6:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80030f2:	4a63      	ldr	r2, [pc, #396]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80030fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003106:	d118      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe f934 	bl	8001374 <HAL_GetTick>
 800310c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003110:	e00d      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe f92f 	bl	8001374 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800311c:	1ad2      	subs	r2, r2, r3
 800311e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003122:	429a      	cmp	r2, r3
 8003124:	d903      	bls.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800312c:	e005      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800312e:	4b54      	ldr	r3, [pc, #336]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0eb      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800313a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800313e:	2b00      	cmp	r3, #0
 8003140:	d129      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003146:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003152:	d10e      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800315c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003160:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003164:	091a      	lsrs	r2, r3, #4
 8003166:	4b48      	ldr	r3, [pc, #288]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003168:	4013      	ands	r3, r2
 800316a:	4a45      	ldr	r2, [pc, #276]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800316c:	430b      	orrs	r3, r1
 800316e:	6113      	str	r3, [r2, #16]
 8003170:	e005      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	4a42      	ldr	r2, [pc, #264]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003178:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800317c:	6113      	str	r3, [r2, #16]
 800317e:	4b40      	ldr	r3, [pc, #256]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003180:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800318a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318e:	4a3c      	ldr	r2, [pc, #240]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003190:	430b      	orrs	r3, r1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	e008      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003196:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800319a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800319e:	e003      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f002 0301 	and.w	r3, r2, #1
 80031b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f000 8090 	beq.w	80032ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80031ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d2:	2b28      	cmp	r3, #40	; 0x28
 80031d4:	d870      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	080032c1 	.word	0x080032c1
 80031e0:	080032b9 	.word	0x080032b9
 80031e4:	080032b9 	.word	0x080032b9
 80031e8:	080032b9 	.word	0x080032b9
 80031ec:	080032b9 	.word	0x080032b9
 80031f0:	080032b9 	.word	0x080032b9
 80031f4:	080032b9 	.word	0x080032b9
 80031f8:	080032b9 	.word	0x080032b9
 80031fc:	0800328d 	.word	0x0800328d
 8003200:	080032b9 	.word	0x080032b9
 8003204:	080032b9 	.word	0x080032b9
 8003208:	080032b9 	.word	0x080032b9
 800320c:	080032b9 	.word	0x080032b9
 8003210:	080032b9 	.word	0x080032b9
 8003214:	080032b9 	.word	0x080032b9
 8003218:	080032b9 	.word	0x080032b9
 800321c:	080032a3 	.word	0x080032a3
 8003220:	080032b9 	.word	0x080032b9
 8003224:	080032b9 	.word	0x080032b9
 8003228:	080032b9 	.word	0x080032b9
 800322c:	080032b9 	.word	0x080032b9
 8003230:	080032b9 	.word	0x080032b9
 8003234:	080032b9 	.word	0x080032b9
 8003238:	080032b9 	.word	0x080032b9
 800323c:	080032c1 	.word	0x080032c1
 8003240:	080032b9 	.word	0x080032b9
 8003244:	080032b9 	.word	0x080032b9
 8003248:	080032b9 	.word	0x080032b9
 800324c:	080032b9 	.word	0x080032b9
 8003250:	080032b9 	.word	0x080032b9
 8003254:	080032b9 	.word	0x080032b9
 8003258:	080032b9 	.word	0x080032b9
 800325c:	080032c1 	.word	0x080032c1
 8003260:	080032b9 	.word	0x080032b9
 8003264:	080032b9 	.word	0x080032b9
 8003268:	080032b9 	.word	0x080032b9
 800326c:	080032b9 	.word	0x080032b9
 8003270:	080032b9 	.word	0x080032b9
 8003274:	080032b9 	.word	0x080032b9
 8003278:	080032b9 	.word	0x080032b9
 800327c:	080032c1 	.word	0x080032c1
 8003280:	58024400 	.word	0x58024400
 8003284:	58024800 	.word	0x58024800
 8003288:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800328c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003290:	3308      	adds	r3, #8
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f000 ffc5 	bl	8004224 <RCCEx_PLL2_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032a0:	e00f      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a6:	3328      	adds	r3, #40	; 0x28
 80032a8:	2101      	movs	r1, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 f86c 	bl	8004388 <RCCEx_PLL3_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032b6:	e004      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032be:	e000      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80032c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032ca:	4bc0      	ldr	r3, [pc, #768]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80032d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032da:	4abc      	ldr	r2, [pc, #752]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	6553      	str	r3, [r2, #84]	; 0x54
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	f002 0302 	and.w	r3, r2, #2
 80032f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032fa:	2300      	movs	r3, #0
 80032fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003300:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003304:	460b      	mov	r3, r1
 8003306:	4313      	orrs	r3, r2
 8003308:	d043      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800330a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003312:	2b05      	cmp	r3, #5
 8003314:	d824      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	08003369 	.word	0x08003369
 8003320:	08003335 	.word	0x08003335
 8003324:	0800334b 	.word	0x0800334b
 8003328:	08003369 	.word	0x08003369
 800332c:	08003369 	.word	0x08003369
 8003330:	08003369 	.word	0x08003369
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003338:	3308      	adds	r3, #8
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f000 ff71 	bl	8004224 <RCCEx_PLL2_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003348:	e00f      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800334a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334e:	3328      	adds	r3, #40	; 0x28
 8003350:	2101      	movs	r1, #1
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f818 	bl	8004388 <RCCEx_PLL3_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800335e:	e004      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003366:	e000      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003372:	4b96      	ldr	r3, [pc, #600]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	f023 0107 	bic.w	r1, r3, #7
 800337a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003382:	4a92      	ldr	r2, [pc, #584]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003384:	430b      	orrs	r3, r1
 8003386:	6553      	str	r3, [r2, #84]	; 0x54
 8003388:	e003      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800338e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f002 0304 	and.w	r3, r2, #4
 800339e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	d043      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80033b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d824      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	08003411 	.word	0x08003411
 80033c8:	080033dd 	.word	0x080033dd
 80033cc:	080033f3 	.word	0x080033f3
 80033d0:	08003411 	.word	0x08003411
 80033d4:	08003411 	.word	0x08003411
 80033d8:	08003411 	.word	0x08003411
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e0:	3308      	adds	r3, #8
 80033e2:	2101      	movs	r1, #1
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 ff1d 	bl	8004224 <RCCEx_PLL2_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80033f0:	e00f      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f6:	3328      	adds	r3, #40	; 0x28
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 ffc4 	bl	8004388 <RCCEx_PLL3_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003406:	e004      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800340e:	e000      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003412:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800341a:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	f023 0107 	bic.w	r1, r3, #7
 8003422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342a:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800342c:	430b      	orrs	r3, r1
 800342e:	6593      	str	r3, [r2, #88]	; 0x58
 8003430:	e003      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003436:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800343a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f002 0320 	and.w	r3, r2, #32
 8003446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800344a:	2300      	movs	r3, #0
 800344c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003454:	460b      	mov	r3, r1
 8003456:	4313      	orrs	r3, r2
 8003458:	d055      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003466:	d033      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346c:	d82c      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d02f      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003478:	d826      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800347a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800347e:	d02b      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003480:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003484:	d820      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348a:	d012      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800348c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003490:	d81a      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d022      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800349a:	d115      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800349c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a0:	3308      	adds	r3, #8
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 febd 	bl	8004224 <RCCEx_PLL2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034b0:	e015      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b6:	3328      	adds	r3, #40	; 0x28
 80034b8:	2102      	movs	r1, #2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 ff64 	bl	8004388 <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034c6:	e00a      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034ce:	e006      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80034d0:	bf00      	nop
 80034d2:	e004      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80034d4:	bf00      	nop
 80034d6:	e002      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80034d8:	bf00      	nop
 80034da:	e000      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80034dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80034ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f6:	4a35      	ldr	r2, [pc, #212]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6553      	str	r3, [r2, #84]	; 0x54
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003502:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800351c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003520:	460b      	mov	r3, r1
 8003522:	4313      	orrs	r3, r2
 8003524:	d058      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800352e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003532:	d033      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003534:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003538:	d82c      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d02f      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d826      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800354a:	d02b      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800354c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003550:	d820      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003556:	d012      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800355c:	d81a      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d022      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003566:	d115      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356c:	3308      	adds	r3, #8
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fe57 	bl	8004224 <RCCEx_PLL2_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800357c:	e015      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800357e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003582:	3328      	adds	r3, #40	; 0x28
 8003584:	2102      	movs	r1, #2
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fefe 	bl	8004388 <RCCEx_PLL3_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003592:	e00a      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800359a:	e006      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800359c:	bf00      	nop
 800359e:	e004      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80035a0:	bf00      	nop
 80035a2:	e002      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80035a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10e      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80035ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035c2:	4a02      	ldr	r2, [pc, #8]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6593      	str	r3, [r2, #88]	; 0x58
 80035c8:	e006      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80035ca:	bf00      	nop
 80035cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80035e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	d055      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003600:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003604:	d033      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003606:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800360a:	d82c      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800360c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003610:	d02f      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003616:	d826      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003618:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800361c:	d02b      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800361e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003622:	d820      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003628:	d012      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800362a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362e:	d81a      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d022      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003638:	d115      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363e:	3308      	adds	r3, #8
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fdee 	bl	8004224 <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800364e:	e015      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003654:	3328      	adds	r3, #40	; 0x28
 8003656:	2102      	movs	r1, #2
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fe95 	bl	8004388 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003664:	e00a      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800366e:	bf00      	nop
 8003670:	e004      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003672:	bf00      	nop
 8003674:	e002      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800367a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003684:	4ba1      	ldr	r3, [pc, #644]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800368c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003690:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003694:	4a9d      	ldr	r2, [pc, #628]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003696:	430b      	orrs	r3, r1
 8003698:	6593      	str	r3, [r2, #88]	; 0x58
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f002 0308 	and.w	r3, r2, #8
 80036b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d01e      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80036c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d6:	3328      	adds	r3, #40	; 0x28
 80036d8:	2102      	movs	r1, #2
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fe54 	bl	8004388 <RCCEx_PLL3_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80036ec:	4b87      	ldr	r3, [pc, #540]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036fc:	4a83      	ldr	r2, [pc, #524]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036fe:	430b      	orrs	r3, r1
 8003700:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f002 0310 	and.w	r3, r2, #16
 800370e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003718:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800371c:	460b      	mov	r3, r1
 800371e:	4313      	orrs	r3, r2
 8003720:	d01e      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003726:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372e:	d10c      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003734:	3328      	adds	r3, #40	; 0x28
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fe25 	bl	8004388 <RCCEx_PLL3_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800374a:	4b70      	ldr	r3, [pc, #448]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003756:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800375a:	4a6c      	ldr	r2, [pc, #432]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800375c:	430b      	orrs	r3, r1
 800375e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800376c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003776:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d03e      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003784:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800378c:	d022      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800378e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003792:	d81b      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379c:	d00b      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800379e:	e015      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a4:	3308      	adds	r3, #8
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fd3b 	bl	8004224 <RCCEx_PLL2_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037b4:	e00f      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ba:	3328      	adds	r3, #40	; 0x28
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fde2 	bl	8004388 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037ca:	e004      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037de:	4b4b      	ldr	r3, [pc, #300]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80037e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037ee:	4a47      	ldr	r2, [pc, #284]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6593      	str	r3, [r2, #88]	; 0x58
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800380a:	67bb      	str	r3, [r7, #120]	; 0x78
 800380c:	2300      	movs	r3, #0
 800380e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003810:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003814:	460b      	mov	r3, r1
 8003816:	4313      	orrs	r3, r2
 8003818:	d03b      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800381a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003826:	d01f      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800382c:	d818      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800382e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003832:	d003      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003838:	d007      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800383a:	e011      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383c:	4b33      	ldr	r3, [pc, #204]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4a32      	ldr	r2, [pc, #200]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003848:	e00f      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800384a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384e:	3328      	adds	r3, #40	; 0x28
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fd98 	bl	8004388 <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800385e:	e004      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800387a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	4a22      	ldr	r2, [pc, #136]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6553      	str	r3, [r2, #84]	; 0x54
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800388e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800389e:	673b      	str	r3, [r7, #112]	; 0x70
 80038a0:	2300      	movs	r3, #0
 80038a2:	677b      	str	r3, [r7, #116]	; 0x74
 80038a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d034      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d007      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80038be:	e011      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a11      	ldr	r2, [pc, #68]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038cc:	e00e      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d2:	3308      	adds	r3, #8
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fca4 	bl	8004224 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10d      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003902:	4a02      	ldr	r2, [pc, #8]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003904:	430b      	orrs	r3, r1
 8003906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003908:	e006      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800390a:	bf00      	nop
 800390c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003914:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003924:	66bb      	str	r3, [r7, #104]	; 0x68
 8003926:	2300      	movs	r3, #0
 8003928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800392a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800392e:	460b      	mov	r3, r1
 8003930:	4313      	orrs	r3, r2
 8003932:	d00c      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003938:	3328      	adds	r3, #40	; 0x28
 800393a:	2102      	movs	r1, #2
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fd23 	bl	8004388 <RCCEx_PLL3_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800394e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800395a:	663b      	str	r3, [r7, #96]	; 0x60
 800395c:	2300      	movs	r3, #0
 800395e:	667b      	str	r3, [r7, #100]	; 0x64
 8003960:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d038      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003976:	d018      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397c:	d811      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800397e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003982:	d014      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003988:	d80b      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d011      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d106      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003994:	4bc3      	ldr	r3, [pc, #780]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4ac2      	ldr	r2, [pc, #776]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039a0:	e008      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039a8:	e004      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80039b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039bc:	4bb9      	ldr	r3, [pc, #740]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	4ab5      	ldr	r2, [pc, #724]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039ce:	430b      	orrs	r3, r1
 80039d0:	6553      	str	r3, [r2, #84]	; 0x54
 80039d2:	e003      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80039e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ea:	2300      	movs	r3, #0
 80039ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d009      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039f8:	4baa      	ldr	r3, [pc, #680]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a06:	4aa7      	ldr	r2, [pc, #668]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003a18:	653b      	str	r3, [r7, #80]	; 0x50
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a28:	4b9e      	ldr	r3, [pc, #632]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a9b      	ldr	r2, [pc, #620]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003a58:	4b92      	ldr	r3, [pc, #584]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a66:	4a8f      	ldr	r2, [pc, #572]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003a82:	460b      	mov	r3, r1
 8003a84:	4313      	orrs	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a88:	4b86      	ldr	r3, [pc, #536]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	4a85      	ldr	r2, [pc, #532]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a92:	6113      	str	r3, [r2, #16]
 8003a94:	4b83      	ldr	r3, [pc, #524]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a96:	6919      	ldr	r1, [r3, #16]
 8003a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003aa0:	4a80      	ldr	r2, [pc, #512]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003abc:	460b      	mov	r3, r1
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ac2:	4b78      	ldr	r3, [pc, #480]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	4a74      	ldr	r2, [pc, #464]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003aec:	460b      	mov	r3, r1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003af2:	4b6c      	ldr	r3, [pc, #432]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	4a68      	ldr	r2, [pc, #416]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	2100      	movs	r1, #0
 8003b12:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	d011      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b28:	3308      	adds	r3, #8
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fb79 	bl	8004224 <RCCEx_PLL2_Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003b38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	2100      	movs	r1, #0
 8003b52:	6239      	str	r1, [r7, #32]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	d011      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b68:	3308      	adds	r3, #8
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fb59 	bl	8004224 <RCCEx_PLL2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003b78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	2100      	movs	r1, #0
 8003b92:	61b9      	str	r1, [r7, #24]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	d011      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	3308      	adds	r3, #8
 8003baa:	2102      	movs	r1, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fb39 	bl	8004224 <RCCEx_PLL2_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003bb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6139      	str	r1, [r7, #16]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d011      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be8:	3328      	adds	r3, #40	; 0x28
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fbcb 	bl	8004388 <RCCEx_PLL3_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	2100      	movs	r1, #0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	d011      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c28:	3328      	adds	r3, #40	; 0x28
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fbab 	bl	8004388 <RCCEx_PLL3_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	2100      	movs	r1, #0
 8003c52:	6039      	str	r1, [r7, #0]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	d011      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c68:	3328      	adds	r3, #40	; 0x28
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fb8b 	bl	8004388 <RCCEx_PLL3_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003c88:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca2:	bf00      	nop
 8003ca4:	58024400 	.word	0x58024400

08003ca8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003cac:	f7fe fde2 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4904      	ldr	r1, [pc, #16]	; (8003cd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	58024400 	.word	0x58024400
 8003cd0:	08006884 	.word	0x08006884

08003cd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cdc:	4ba1      	ldr	r3, [pc, #644]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ce6:	4b9f      	ldr	r3, [pc, #636]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	0b1b      	lsrs	r3, r3, #12
 8003cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003cf2:	4b9c      	ldr	r3, [pc, #624]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003cfe:	4b99      	ldr	r3, [pc, #612]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	08db      	lsrs	r3, r3, #3
 8003d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	fb02 f303 	mul.w	r3, r2, r3
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8111 	beq.w	8003f44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f000 8083 	beq.w	8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	f200 80a1 	bhi.w	8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d056      	beq.n	8003dec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003d3e:	e099      	b.n	8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d40:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02d      	beq.n	8003da8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d4c:	4b85      	ldr	r3, [pc, #532]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	08db      	lsrs	r3, r3, #3
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	4a84      	ldr	r2, [pc, #528]	; (8003f68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b7b      	ldr	r3, [pc, #492]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003da6:	e087      	b.n	8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dea:	e065      	b.n	8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e2e:	e043      	b.n	8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b48      	ldr	r3, [pc, #288]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e72:	e021      	b.n	8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003eb8:	4b2a      	ldr	r3, [pc, #168]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	0a5b      	lsrs	r3, r3, #9
 8003ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ede:	ee17 2a90 	vmov	r2, s15
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef0:	ee07 3a90 	vmov	s15, r3
 8003ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0c:	ee17 2a90 	vmov	r2, s15
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003f14:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	0e1b      	lsrs	r3, r3, #24
 8003f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f3a:	ee17 2a90 	vmov	r2, s15
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f42:	e008      	b.n	8003f56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	609a      	str	r2, [r3, #8]
}
 8003f56:	bf00      	nop
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
 8003f68:	03d09000 	.word	0x03d09000
 8003f6c:	46000000 	.word	0x46000000
 8003f70:	4c742400 	.word	0x4c742400
 8003f74:	4a742400 	.word	0x4a742400
 8003f78:	4af42400 	.word	0x4af42400

08003f7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f84:	4ba1      	ldr	r3, [pc, #644]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f8e:	4b9f      	ldr	r3, [pc, #636]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	0d1b      	lsrs	r3, r3, #20
 8003f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f9a:	4b9c      	ldr	r3, [pc, #624]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003fa6:	4b99      	ldr	r3, [pc, #612]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	08db      	lsrs	r3, r3, #3
 8003fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8111 	beq.w	80041ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	f000 8083 	beq.w	80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	f200 80a1 	bhi.w	800411c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d056      	beq.n	8004094 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003fe6:	e099      	b.n	800411c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe8:	4b88      	ldr	r3, [pc, #544]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d02d      	beq.n	8004050 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ff4:	4b85      	ldr	r3, [pc, #532]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	08db      	lsrs	r3, r3, #3
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	4a84      	ldr	r2, [pc, #528]	; (8004210 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
 8004004:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401e:	4b7b      	ldr	r3, [pc, #492]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004032:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800404e:	e087      	b.n	8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004218 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800405e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004062:	4b6a      	ldr	r3, [pc, #424]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004072:	ed97 6a03 	vldr	s12, [r7, #12]
 8004076:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800407a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004092:	e065      	b.n	8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800421c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a6:	4b59      	ldr	r3, [pc, #356]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040d6:	e043      	b.n	8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004220 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ea:	4b48      	ldr	r3, [pc, #288]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800411a:	e021      	b.n	8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800421c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412e:	4b37      	ldr	r3, [pc, #220]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004142:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800415e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004160:	4b2a      	ldr	r3, [pc, #168]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	0a5b      	lsrs	r3, r3, #9
 8004166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800417a:	edd7 6a07 	vldr	s13, [r7, #28]
 800417e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004186:	ee17 2a90 	vmov	r2, s15
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800418e:	4b1f      	ldr	r3, [pc, #124]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	0c1b      	lsrs	r3, r3, #16
 8004194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b4:	ee17 2a90 	vmov	r2, s15
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80041bc:	4b13      	ldr	r3, [pc, #76]	; (800420c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	0e1b      	lsrs	r3, r3, #24
 80041c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e2:	ee17 2a90 	vmov	r2, s15
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80041ea:	e008      	b.n	80041fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	609a      	str	r2, [r3, #8]
}
 80041fe:	bf00      	nop
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	58024400 	.word	0x58024400
 8004210:	03d09000 	.word	0x03d09000
 8004214:	46000000 	.word	0x46000000
 8004218:	4c742400 	.word	0x4c742400
 800421c:	4a742400 	.word	0x4a742400
 8004220:	4af42400 	.word	0x4af42400

08004224 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004232:	4b53      	ldr	r3, [pc, #332]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b03      	cmp	r3, #3
 800423c:	d101      	bne.n	8004242 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e099      	b.n	8004376 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004242:	4b4f      	ldr	r3, [pc, #316]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a4e      	ldr	r2, [pc, #312]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004248:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800424c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424e:	f7fd f891 	bl	8001374 <HAL_GetTick>
 8004252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004254:	e008      	b.n	8004268 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004256:	f7fd f88d 	bl	8001374 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e086      	b.n	8004376 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004268:	4b45      	ldr	r3, [pc, #276]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004274:	4b42      	ldr	r3, [pc, #264]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	031b      	lsls	r3, r3, #12
 8004282:	493f      	ldr	r1, [pc, #252]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	628b      	str	r3, [r1, #40]	; 0x28
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	3b01      	subs	r3, #1
 800428e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	3b01      	subs	r3, #1
 8004298:	025b      	lsls	r3, r3, #9
 800429a:	b29b      	uxth	r3, r3
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042b8:	4931      	ldr	r1, [pc, #196]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042be:	4b30      	ldr	r3, [pc, #192]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	492d      	ldr	r1, [pc, #180]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80042d0:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	f023 0220 	bic.w	r2, r3, #32
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	4928      	ldr	r1, [pc, #160]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042e2:	4b27      	ldr	r3, [pc, #156]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	4a26      	ldr	r2, [pc, #152]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042e8:	f023 0310 	bic.w	r3, r3, #16
 80042ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <RCCEx_PLL2_Config+0x160>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	69d2      	ldr	r2, [r2, #28]
 80042fa:	00d2      	lsls	r2, r2, #3
 80042fc:	4920      	ldr	r1, [pc, #128]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004302:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004308:	f043 0310 	orr.w	r3, r3, #16
 800430c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 800431a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800431e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004320:	e00f      	b.n	8004342 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d106      	bne.n	8004336 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	4a14      	ldr	r2, [pc, #80]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 800432e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004332:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004334:	e005      	b.n	8004342 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	4a11      	ldr	r2, [pc, #68]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 800433c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004340:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 8004348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800434c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434e:	f7fd f811 	bl	8001374 <HAL_GetTick>
 8004352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004354:	e008      	b.n	8004368 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004356:	f7fd f80d 	bl	8001374 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e006      	b.n	8004376 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <RCCEx_PLL2_Config+0x15c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
 8004384:	ffff0007 	.word	0xffff0007

08004388 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004396:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d101      	bne.n	80043a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e099      	b.n	80044da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043a6:	4b4f      	ldr	r3, [pc, #316]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a4e      	ldr	r2, [pc, #312]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b2:	f7fc ffdf 	bl	8001374 <HAL_GetTick>
 80043b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043b8:	e008      	b.n	80043cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043ba:	f7fc ffdb 	bl	8001374 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e086      	b.n	80044da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043cc:	4b45      	ldr	r3, [pc, #276]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f0      	bne.n	80043ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80043d8:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	051b      	lsls	r3, r3, #20
 80043e6:	493f      	ldr	r1, [pc, #252]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	628b      	str	r3, [r1, #40]	; 0x28
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	b29b      	uxth	r3, r3
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	3b01      	subs	r3, #1
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	3b01      	subs	r3, #1
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800441c:	4931      	ldr	r1, [pc, #196]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	492d      	ldr	r1, [pc, #180]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004430:	4313      	orrs	r3, r2
 8004432:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4928      	ldr	r1, [pc, #160]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 800444c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004456:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <RCCEx_PLL3_Config+0x160>)
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	69d2      	ldr	r2, [r2, #28]
 800445e:	00d2      	lsls	r2, r2, #3
 8004460:	4920      	ldr	r1, [pc, #128]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004462:	4313      	orrs	r3, r2
 8004464:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 800447e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004482:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004484:	e00f      	b.n	80044a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d106      	bne.n	800449a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 8004492:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004498:	e005      	b.n	80044a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80044a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80044ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b2:	f7fc ff5f 	bl	8001374 <HAL_GetTick>
 80044b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044b8:	e008      	b.n	80044cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044ba:	f7fc ff5b 	bl	8001374 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e006      	b.n	80044da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <RCCEx_PLL3_Config+0x15c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	58024400 	.word	0x58024400
 80044e8:	ffff0007 	.word	0xffff0007

080044ec <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e04a      	b.n	8004594 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fc fdb1 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2224      	movs	r2, #36	; 0x24
 800451a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fa48 	bl	80049c4 <UART_SetConfig>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e02a      	b.n	8004594 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f001 f8a8 	bl	800569c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800456a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f001 f927 	bl	80057e0 <UART_CheckIdleState>
 8004592:	4603      	mov	r3, r0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d17b      	bne.n	80046ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_UART_Transmit+0x26>
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e074      	b.n	80046b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2221      	movs	r2, #33	; 0x21
 80045d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fc fecd 	bl	8001374 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f4:	d108      	bne.n	8004608 <HAL_UART_Transmit+0x6c>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	e003      	b.n	8004610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004610:	e030      	b.n	8004674 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2200      	movs	r2, #0
 800461a:	2180      	movs	r1, #128	; 0x80
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f001 f989 	bl	8005934 <UART_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e03d      	b.n	80046b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004648:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	3302      	adds	r3, #2
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e007      	b.n	8004662 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3301      	adds	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1c8      	bne.n	8004612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2200      	movs	r2, #0
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f001 f952 	bl	8005934 <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e006      	b.n	80046b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	f040 80b5 	bne.w	800483e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_UART_Receive+0x28>
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0ad      	b.n	8004840 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2222      	movs	r2, #34	; 0x22
 80046f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fa:	f7fc fe3b 	bl	8001374 <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d10e      	bne.n	8004738 <HAL_UART_Receive+0x80>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <HAL_UART_Receive+0x76>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800472c:	e02d      	b.n	800478a <HAL_UART_Receive+0xd2>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	22ff      	movs	r2, #255	; 0xff
 8004732:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004736:	e028      	b.n	800478a <HAL_UART_Receive+0xd2>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <HAL_UART_Receive+0xa4>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <HAL_UART_Receive+0x9a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	22ff      	movs	r2, #255	; 0xff
 800474c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004750:	e01b      	b.n	800478a <HAL_UART_Receive+0xd2>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	227f      	movs	r2, #127	; 0x7f
 8004756:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800475a:	e016      	b.n	800478a <HAL_UART_Receive+0xd2>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004764:	d10d      	bne.n	8004782 <HAL_UART_Receive+0xca>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <HAL_UART_Receive+0xc0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	227f      	movs	r2, #127	; 0x7f
 8004772:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004776:	e008      	b.n	800478a <HAL_UART_Receive+0xd2>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	223f      	movs	r2, #63	; 0x3f
 800477c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004780:	e003      	b.n	800478a <HAL_UART_Receive+0xd2>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004790:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d108      	bne.n	80047ae <HAL_UART_Receive+0xf6>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	e003      	b.n	80047b6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047b6:	e036      	b.n	8004826 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2200      	movs	r2, #0
 80047c0:	2120      	movs	r1, #32
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f001 f8b6 	bl	8005934 <UART_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e032      	b.n	8004840 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10c      	bne.n	80047fa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	8a7b      	ldrh	r3, [r7, #18]
 80047ea:	4013      	ands	r3, r2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	3302      	adds	r3, #2
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	e00c      	b.n	8004814 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	b2da      	uxtb	r2, r3
 8004802:	8a7b      	ldrh	r3, [r7, #18]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	4013      	ands	r3, r2
 8004808:	b2da      	uxtb	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1c2      	bne.n	80047b8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b08f      	sub	sp, #60	; 0x3c
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800485a:	2302      	movs	r3, #2
 800485c:	e042      	b.n	80048e4 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2224      	movs	r2, #36	; 0x24
 800486a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	61fb      	str	r3, [r7, #28]
   return(result);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f023 030c 	bic.w	r3, r3, #12
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488e:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f043 0308 	orr.w	r3, r3, #8
 80048b4:	633b      	str	r3, [r7, #48]	; 0x30
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6979      	ldr	r1, [r7, #20]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	613b      	str	r3, [r7, #16]
   return(result);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	373c      	adds	r7, #60	; 0x3c
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b08f      	sub	sp, #60	; 0x3c
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_HalfDuplex_EnableReceiver+0x16>
 8004902:	2302      	movs	r3, #2
 8004904:	e042      	b.n	800498c <HAL_HalfDuplex_EnableReceiver+0x9c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2224      	movs	r2, #36	; 0x24
 8004912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	61fb      	str	r3, [r7, #28]
   return(result);
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f023 030c 	bic.w	r3, r3, #12
 800492a:	637b      	str	r3, [r7, #52]	; 0x34
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004936:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	60bb      	str	r3, [r7, #8]
   return(result);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6979      	ldr	r1, [r7, #20]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	613b      	str	r3, [r7, #16]
   return(result);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e6      	bne.n	8004948 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	373c      	adds	r7, #60	; 0x3c
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ae:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4313      	orrs	r3, r2
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b092      	sub	sp, #72	; 0x48
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	431a      	orrs	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4bbe      	ldr	r3, [pc, #760]	; (8004cec <UART_SetConfig+0x328>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4ab3      	ldr	r2, [pc, #716]	; (8004cf0 <UART_SetConfig+0x32c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	4baf      	ldr	r3, [pc, #700]	; (8004cf4 <UART_SetConfig+0x330>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	f023 010f 	bic.w	r1, r3, #15
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4aa6      	ldr	r2, [pc, #664]	; (8004cf8 <UART_SetConfig+0x334>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d177      	bne.n	8004b54 <UART_SetConfig+0x190>
 8004a64:	4ba5      	ldr	r3, [pc, #660]	; (8004cfc <UART_SetConfig+0x338>)
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6c:	2b28      	cmp	r3, #40	; 0x28
 8004a6e:	d86d      	bhi.n	8004b4c <UART_SetConfig+0x188>
 8004a70:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <UART_SetConfig+0xb4>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004b1d 	.word	0x08004b1d
 8004a7c:	08004b4d 	.word	0x08004b4d
 8004a80:	08004b4d 	.word	0x08004b4d
 8004a84:	08004b4d 	.word	0x08004b4d
 8004a88:	08004b4d 	.word	0x08004b4d
 8004a8c:	08004b4d 	.word	0x08004b4d
 8004a90:	08004b4d 	.word	0x08004b4d
 8004a94:	08004b4d 	.word	0x08004b4d
 8004a98:	08004b25 	.word	0x08004b25
 8004a9c:	08004b4d 	.word	0x08004b4d
 8004aa0:	08004b4d 	.word	0x08004b4d
 8004aa4:	08004b4d 	.word	0x08004b4d
 8004aa8:	08004b4d 	.word	0x08004b4d
 8004aac:	08004b4d 	.word	0x08004b4d
 8004ab0:	08004b4d 	.word	0x08004b4d
 8004ab4:	08004b4d 	.word	0x08004b4d
 8004ab8:	08004b2d 	.word	0x08004b2d
 8004abc:	08004b4d 	.word	0x08004b4d
 8004ac0:	08004b4d 	.word	0x08004b4d
 8004ac4:	08004b4d 	.word	0x08004b4d
 8004ac8:	08004b4d 	.word	0x08004b4d
 8004acc:	08004b4d 	.word	0x08004b4d
 8004ad0:	08004b4d 	.word	0x08004b4d
 8004ad4:	08004b4d 	.word	0x08004b4d
 8004ad8:	08004b35 	.word	0x08004b35
 8004adc:	08004b4d 	.word	0x08004b4d
 8004ae0:	08004b4d 	.word	0x08004b4d
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004b4d 	.word	0x08004b4d
 8004aec:	08004b4d 	.word	0x08004b4d
 8004af0:	08004b4d 	.word	0x08004b4d
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b3d 	.word	0x08004b3d
 8004afc:	08004b4d 	.word	0x08004b4d
 8004b00:	08004b4d 	.word	0x08004b4d
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b4d 	.word	0x08004b4d
 8004b0c:	08004b4d 	.word	0x08004b4d
 8004b10:	08004b4d 	.word	0x08004b4d
 8004b14:	08004b4d 	.word	0x08004b4d
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b22:	e326      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b24:	2304      	movs	r3, #4
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2a:	e322      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b32:	e31e      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3a:	e31a      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b42:	e316      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b44:	2340      	movs	r3, #64	; 0x40
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4a:	e312      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b52:	e30e      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a69      	ldr	r2, [pc, #420]	; (8004d00 <UART_SetConfig+0x33c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d130      	bne.n	8004bc0 <UART_SetConfig+0x1fc>
 8004b5e:	4b67      	ldr	r3, [pc, #412]	; (8004cfc <UART_SetConfig+0x338>)
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d826      	bhi.n	8004bb8 <UART_SetConfig+0x1f4>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <UART_SetConfig+0x1ac>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004b89 	.word	0x08004b89
 8004b74:	08004b91 	.word	0x08004b91
 8004b78:	08004b99 	.word	0x08004b99
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8e:	e2f0      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b90:	2304      	movs	r3, #4
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b96:	e2ec      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004b98:	2308      	movs	r3, #8
 8004b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9e:	e2e8      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ba6:	e2e4      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ba8:	2320      	movs	r3, #32
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bae:	e2e0      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004bb0:	2340      	movs	r3, #64	; 0x40
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bb6:	e2dc      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bbe:	e2d8      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a4f      	ldr	r2, [pc, #316]	; (8004d04 <UART_SetConfig+0x340>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d130      	bne.n	8004c2c <UART_SetConfig+0x268>
 8004bca:	4b4c      	ldr	r3, [pc, #304]	; (8004cfc <UART_SetConfig+0x338>)
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d826      	bhi.n	8004c24 <UART_SetConfig+0x260>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0x218>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004bf5 	.word	0x08004bf5
 8004be0:	08004bfd 	.word	0x08004bfd
 8004be4:	08004c05 	.word	0x08004c05
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c1d 	.word	0x08004c1d
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfa:	e2ba      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c02:	e2b6      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0a:	e2b2      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c12:	e2ae      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c14:	2320      	movs	r3, #32
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1a:	e2aa      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c1c:	2340      	movs	r3, #64	; 0x40
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c22:	e2a6      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2a:	e2a2      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a35      	ldr	r2, [pc, #212]	; (8004d08 <UART_SetConfig+0x344>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d130      	bne.n	8004c98 <UART_SetConfig+0x2d4>
 8004c36:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <UART_SetConfig+0x338>)
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d826      	bhi.n	8004c90 <UART_SetConfig+0x2cc>
 8004c42:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <UART_SetConfig+0x284>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c61 	.word	0x08004c61
 8004c4c:	08004c69 	.word	0x08004c69
 8004c50:	08004c71 	.word	0x08004c71
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c66:	e284      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6e:	e280      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c76:	e27c      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7e:	e278      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c80:	2320      	movs	r3, #32
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c86:	e274      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8e:	e270      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c96:	e26c      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <UART_SetConfig+0x348>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d142      	bne.n	8004d28 <UART_SetConfig+0x364>
 8004ca2:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <UART_SetConfig+0x338>)
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d838      	bhi.n	8004d20 <UART_SetConfig+0x35c>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x2f0>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004ccd 	.word	0x08004ccd
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	08004cdd 	.word	0x08004cdd
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004d11 	.word	0x08004d11
 8004cc8:	08004d19 	.word	0x08004d19
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd2:	e24e      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e24a      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e246      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e242      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004cec:	cfff69f3 	.word	0xcfff69f3
 8004cf0:	58000c00 	.word	0x58000c00
 8004cf4:	11fff4ff 	.word	0x11fff4ff
 8004cf8:	40011000 	.word	0x40011000
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	40004400 	.word	0x40004400
 8004d04:	40004800 	.word	0x40004800
 8004d08:	40004c00 	.word	0x40004c00
 8004d0c:	40005000 	.word	0x40005000
 8004d10:	2320      	movs	r3, #32
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d16:	e22c      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004d18:	2340      	movs	r3, #64	; 0x40
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1e:	e228      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d26:	e224      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4ab1      	ldr	r2, [pc, #708]	; (8004ff4 <UART_SetConfig+0x630>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d176      	bne.n	8004e20 <UART_SetConfig+0x45c>
 8004d32:	4bb1      	ldr	r3, [pc, #708]	; (8004ff8 <UART_SetConfig+0x634>)
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d3a:	2b28      	cmp	r3, #40	; 0x28
 8004d3c:	d86c      	bhi.n	8004e18 <UART_SetConfig+0x454>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x380>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004de9 	.word	0x08004de9
 8004d48:	08004e19 	.word	0x08004e19
 8004d4c:	08004e19 	.word	0x08004e19
 8004d50:	08004e19 	.word	0x08004e19
 8004d54:	08004e19 	.word	0x08004e19
 8004d58:	08004e19 	.word	0x08004e19
 8004d5c:	08004e19 	.word	0x08004e19
 8004d60:	08004e19 	.word	0x08004e19
 8004d64:	08004df1 	.word	0x08004df1
 8004d68:	08004e19 	.word	0x08004e19
 8004d6c:	08004e19 	.word	0x08004e19
 8004d70:	08004e19 	.word	0x08004e19
 8004d74:	08004e19 	.word	0x08004e19
 8004d78:	08004e19 	.word	0x08004e19
 8004d7c:	08004e19 	.word	0x08004e19
 8004d80:	08004e19 	.word	0x08004e19
 8004d84:	08004df9 	.word	0x08004df9
 8004d88:	08004e19 	.word	0x08004e19
 8004d8c:	08004e19 	.word	0x08004e19
 8004d90:	08004e19 	.word	0x08004e19
 8004d94:	08004e19 	.word	0x08004e19
 8004d98:	08004e19 	.word	0x08004e19
 8004d9c:	08004e19 	.word	0x08004e19
 8004da0:	08004e19 	.word	0x08004e19
 8004da4:	08004e01 	.word	0x08004e01
 8004da8:	08004e19 	.word	0x08004e19
 8004dac:	08004e19 	.word	0x08004e19
 8004db0:	08004e19 	.word	0x08004e19
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08004e19 	.word	0x08004e19
 8004dbc:	08004e19 	.word	0x08004e19
 8004dc0:	08004e19 	.word	0x08004e19
 8004dc4:	08004e09 	.word	0x08004e09
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004e19 	.word	0x08004e19
 8004dd4:	08004e19 	.word	0x08004e19
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e1c0      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004df0:	2304      	movs	r3, #4
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df6:	e1bc      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfe:	e1b8      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e00:	2310      	movs	r3, #16
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e06:	e1b4      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e08:	2320      	movs	r3, #32
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0e:	e1b0      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e10:	2340      	movs	r3, #64	; 0x40
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e16:	e1ac      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1e:	e1a8      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a75      	ldr	r2, [pc, #468]	; (8004ffc <UART_SetConfig+0x638>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d130      	bne.n	8004e8c <UART_SetConfig+0x4c8>
 8004e2a:	4b73      	ldr	r3, [pc, #460]	; (8004ff8 <UART_SetConfig+0x634>)
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d826      	bhi.n	8004e84 <UART_SetConfig+0x4c0>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <UART_SetConfig+0x478>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	08004e65 	.word	0x08004e65
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e75 	.word	0x08004e75
 8004e50:	08004e7d 	.word	0x08004e7d
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5a:	e18a      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e62:	e186      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e64:	2308      	movs	r3, #8
 8004e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e6a:	e182      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e72:	e17e      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e74:	2320      	movs	r3, #32
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7a:	e17a      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e7c:	2340      	movs	r3, #64	; 0x40
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e82:	e176      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8a:	e172      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a5b      	ldr	r2, [pc, #364]	; (8005000 <UART_SetConfig+0x63c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d130      	bne.n	8004ef8 <UART_SetConfig+0x534>
 8004e96:	4b58      	ldr	r3, [pc, #352]	; (8004ff8 <UART_SetConfig+0x634>)
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d826      	bhi.n	8004ef0 <UART_SetConfig+0x52c>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <UART_SetConfig+0x4e4>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004ec1 	.word	0x08004ec1
 8004eac:	08004ec9 	.word	0x08004ec9
 8004eb0:	08004ed1 	.word	0x08004ed1
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e154      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ece:	e150      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed6:	e14c      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e148      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e144      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ee8:	2340      	movs	r3, #64	; 0x40
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e140      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef6:	e13c      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a41      	ldr	r2, [pc, #260]	; (8005004 <UART_SetConfig+0x640>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	f040 8082 	bne.w	8005008 <UART_SetConfig+0x644>
 8004f04:	4b3c      	ldr	r3, [pc, #240]	; (8004ff8 <UART_SetConfig+0x634>)
 8004f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f0c:	2b28      	cmp	r3, #40	; 0x28
 8004f0e:	d86d      	bhi.n	8004fec <UART_SetConfig+0x628>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x554>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004fbd 	.word	0x08004fbd
 8004f1c:	08004fed 	.word	0x08004fed
 8004f20:	08004fed 	.word	0x08004fed
 8004f24:	08004fed 	.word	0x08004fed
 8004f28:	08004fed 	.word	0x08004fed
 8004f2c:	08004fed 	.word	0x08004fed
 8004f30:	08004fed 	.word	0x08004fed
 8004f34:	08004fed 	.word	0x08004fed
 8004f38:	08004fc5 	.word	0x08004fc5
 8004f3c:	08004fed 	.word	0x08004fed
 8004f40:	08004fed 	.word	0x08004fed
 8004f44:	08004fed 	.word	0x08004fed
 8004f48:	08004fed 	.word	0x08004fed
 8004f4c:	08004fed 	.word	0x08004fed
 8004f50:	08004fed 	.word	0x08004fed
 8004f54:	08004fed 	.word	0x08004fed
 8004f58:	08004fcd 	.word	0x08004fcd
 8004f5c:	08004fed 	.word	0x08004fed
 8004f60:	08004fed 	.word	0x08004fed
 8004f64:	08004fed 	.word	0x08004fed
 8004f68:	08004fed 	.word	0x08004fed
 8004f6c:	08004fed 	.word	0x08004fed
 8004f70:	08004fed 	.word	0x08004fed
 8004f74:	08004fed 	.word	0x08004fed
 8004f78:	08004fd5 	.word	0x08004fd5
 8004f7c:	08004fed 	.word	0x08004fed
 8004f80:	08004fed 	.word	0x08004fed
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	08004fed 	.word	0x08004fed
 8004f90:	08004fed 	.word	0x08004fed
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08004fdd 	.word	0x08004fdd
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fed 	.word	0x08004fed
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004fed 	.word	0x08004fed
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fed 	.word	0x08004fed
 8004fb4:	08004fed 	.word	0x08004fed
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e0d6      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e0d2      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e0ce      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e0ca      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004fdc:	2320      	movs	r3, #32
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe2:	e0c6      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fea:	e0c2      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff2:	e0be      	b.n	8005172 <UART_SetConfig+0x7ae>
 8004ff4:	40011400 	.word	0x40011400
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	40007800 	.word	0x40007800
 8005000:	40007c00 	.word	0x40007c00
 8005004:	40011800 	.word	0x40011800
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4aad      	ldr	r2, [pc, #692]	; (80052c4 <UART_SetConfig+0x900>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d176      	bne.n	8005100 <UART_SetConfig+0x73c>
 8005012:	4bad      	ldr	r3, [pc, #692]	; (80052c8 <UART_SetConfig+0x904>)
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800501a:	2b28      	cmp	r3, #40	; 0x28
 800501c:	d86c      	bhi.n	80050f8 <UART_SetConfig+0x734>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x660>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	080050c9 	.word	0x080050c9
 8005028:	080050f9 	.word	0x080050f9
 800502c:	080050f9 	.word	0x080050f9
 8005030:	080050f9 	.word	0x080050f9
 8005034:	080050f9 	.word	0x080050f9
 8005038:	080050f9 	.word	0x080050f9
 800503c:	080050f9 	.word	0x080050f9
 8005040:	080050f9 	.word	0x080050f9
 8005044:	080050d1 	.word	0x080050d1
 8005048:	080050f9 	.word	0x080050f9
 800504c:	080050f9 	.word	0x080050f9
 8005050:	080050f9 	.word	0x080050f9
 8005054:	080050f9 	.word	0x080050f9
 8005058:	080050f9 	.word	0x080050f9
 800505c:	080050f9 	.word	0x080050f9
 8005060:	080050f9 	.word	0x080050f9
 8005064:	080050d9 	.word	0x080050d9
 8005068:	080050f9 	.word	0x080050f9
 800506c:	080050f9 	.word	0x080050f9
 8005070:	080050f9 	.word	0x080050f9
 8005074:	080050f9 	.word	0x080050f9
 8005078:	080050f9 	.word	0x080050f9
 800507c:	080050f9 	.word	0x080050f9
 8005080:	080050f9 	.word	0x080050f9
 8005084:	080050e1 	.word	0x080050e1
 8005088:	080050f9 	.word	0x080050f9
 800508c:	080050f9 	.word	0x080050f9
 8005090:	080050f9 	.word	0x080050f9
 8005094:	080050f9 	.word	0x080050f9
 8005098:	080050f9 	.word	0x080050f9
 800509c:	080050f9 	.word	0x080050f9
 80050a0:	080050f9 	.word	0x080050f9
 80050a4:	080050e9 	.word	0x080050e9
 80050a8:	080050f9 	.word	0x080050f9
 80050ac:	080050f9 	.word	0x080050f9
 80050b0:	080050f9 	.word	0x080050f9
 80050b4:	080050f9 	.word	0x080050f9
 80050b8:	080050f9 	.word	0x080050f9
 80050bc:	080050f9 	.word	0x080050f9
 80050c0:	080050f9 	.word	0x080050f9
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ce:	e050      	b.n	8005172 <UART_SetConfig+0x7ae>
 80050d0:	2304      	movs	r3, #4
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d6:	e04c      	b.n	8005172 <UART_SetConfig+0x7ae>
 80050d8:	2308      	movs	r3, #8
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e048      	b.n	8005172 <UART_SetConfig+0x7ae>
 80050e0:	2310      	movs	r3, #16
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e044      	b.n	8005172 <UART_SetConfig+0x7ae>
 80050e8:	2320      	movs	r3, #32
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e040      	b.n	8005172 <UART_SetConfig+0x7ae>
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e03c      	b.n	8005172 <UART_SetConfig+0x7ae>
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e038      	b.n	8005172 <UART_SetConfig+0x7ae>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a71      	ldr	r2, [pc, #452]	; (80052cc <UART_SetConfig+0x908>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d130      	bne.n	800516c <UART_SetConfig+0x7a8>
 800510a:	4b6f      	ldr	r3, [pc, #444]	; (80052c8 <UART_SetConfig+0x904>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b05      	cmp	r3, #5
 8005114:	d826      	bhi.n	8005164 <UART_SetConfig+0x7a0>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x758>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005135 	.word	0x08005135
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005145 	.word	0x08005145
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	2302      	movs	r3, #2
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513a:	e01a      	b.n	8005172 <UART_SetConfig+0x7ae>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005142:	e016      	b.n	8005172 <UART_SetConfig+0x7ae>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e012      	b.n	8005172 <UART_SetConfig+0x7ae>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005152:	e00e      	b.n	8005172 <UART_SetConfig+0x7ae>
 8005154:	2320      	movs	r3, #32
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e00a      	b.n	8005172 <UART_SetConfig+0x7ae>
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e006      	b.n	8005172 <UART_SetConfig+0x7ae>
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e002      	b.n	8005172 <UART_SetConfig+0x7ae>
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a55      	ldr	r2, [pc, #340]	; (80052cc <UART_SetConfig+0x908>)
 8005178:	4293      	cmp	r3, r2
 800517a:	f040 80f8 	bne.w	800536e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800517e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005182:	2b20      	cmp	r3, #32
 8005184:	dc46      	bgt.n	8005214 <UART_SetConfig+0x850>
 8005186:	2b02      	cmp	r3, #2
 8005188:	db75      	blt.n	8005276 <UART_SetConfig+0x8b2>
 800518a:	3b02      	subs	r3, #2
 800518c:	2b1e      	cmp	r3, #30
 800518e:	d872      	bhi.n	8005276 <UART_SetConfig+0x8b2>
 8005190:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <UART_SetConfig+0x7d4>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	0800521b 	.word	0x0800521b
 800519c:	08005277 	.word	0x08005277
 80051a0:	08005223 	.word	0x08005223
 80051a4:	08005277 	.word	0x08005277
 80051a8:	08005277 	.word	0x08005277
 80051ac:	08005277 	.word	0x08005277
 80051b0:	08005233 	.word	0x08005233
 80051b4:	08005277 	.word	0x08005277
 80051b8:	08005277 	.word	0x08005277
 80051bc:	08005277 	.word	0x08005277
 80051c0:	08005277 	.word	0x08005277
 80051c4:	08005277 	.word	0x08005277
 80051c8:	08005277 	.word	0x08005277
 80051cc:	08005277 	.word	0x08005277
 80051d0:	08005243 	.word	0x08005243
 80051d4:	08005277 	.word	0x08005277
 80051d8:	08005277 	.word	0x08005277
 80051dc:	08005277 	.word	0x08005277
 80051e0:	08005277 	.word	0x08005277
 80051e4:	08005277 	.word	0x08005277
 80051e8:	08005277 	.word	0x08005277
 80051ec:	08005277 	.word	0x08005277
 80051f0:	08005277 	.word	0x08005277
 80051f4:	08005277 	.word	0x08005277
 80051f8:	08005277 	.word	0x08005277
 80051fc:	08005277 	.word	0x08005277
 8005200:	08005277 	.word	0x08005277
 8005204:	08005277 	.word	0x08005277
 8005208:	08005277 	.word	0x08005277
 800520c:	08005277 	.word	0x08005277
 8005210:	08005269 	.word	0x08005269
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d02a      	beq.n	800526e <UART_SetConfig+0x8aa>
 8005218:	e02d      	b.n	8005276 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800521a:	f7fe fd45 	bl	8003ca8 <HAL_RCCEx_GetD3PCLK1Freq>
 800521e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005220:	e02f      	b.n	8005282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fd54 	bl	8003cd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005230:	e027      	b.n	8005282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005232:	f107 0318 	add.w	r3, r7, #24
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe fea0 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005240:	e01f      	b.n	8005282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005242:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <UART_SetConfig+0x904>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800524e:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <UART_SetConfig+0x904>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	08db      	lsrs	r3, r3, #3
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <UART_SetConfig+0x90c>)
 800525a:	fa22 f303 	lsr.w	r3, r2, r3
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005260:	e00f      	b.n	8005282 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005262:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <UART_SetConfig+0x90c>)
 8005264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005266:	e00c      	b.n	8005282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005268:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <UART_SetConfig+0x910>)
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800526c:	e009      	b.n	8005282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005274:	e005      	b.n	8005282 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 81ee 	beq.w	8005666 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <UART_SetConfig+0x914>)
 8005290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005294:	461a      	mov	r2, r3
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	fbb3 f3f2 	udiv	r3, r3, r2
 800529c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d305      	bcc.n	80052ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d910      	bls.n	80052dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80052c0:	e1d1      	b.n	8005666 <UART_SetConfig+0xca2>
 80052c2:	bf00      	nop
 80052c4:	40011c00 	.word	0x40011c00
 80052c8:	58024400 	.word	0x58024400
 80052cc:	58000c00 	.word	0x58000c00
 80052d0:	03d09000 	.word	0x03d09000
 80052d4:	003d0900 	.word	0x003d0900
 80052d8:	08006894 	.word	0x08006894
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052de:	2200      	movs	r2, #0
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	60fa      	str	r2, [r7, #12]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	4ac0      	ldr	r2, [pc, #768]	; (80055ec <UART_SetConfig+0xc28>)
 80052ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2200      	movs	r2, #0
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	607a      	str	r2, [r7, #4]
 80052f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052fe:	f7fb f84f 	bl	80003a0 <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	020b      	lsls	r3, r1, #8
 8005314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005318:	0202      	lsls	r2, r0, #8
 800531a:	6979      	ldr	r1, [r7, #20]
 800531c:	6849      	ldr	r1, [r1, #4]
 800531e:	0849      	lsrs	r1, r1, #1
 8005320:	2000      	movs	r0, #0
 8005322:	460c      	mov	r4, r1
 8005324:	4605      	mov	r5, r0
 8005326:	eb12 0804 	adds.w	r8, r2, r4
 800532a:	eb43 0905 	adc.w	r9, r3, r5
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	469a      	mov	sl, r3
 8005336:	4693      	mov	fp, r2
 8005338:	4652      	mov	r2, sl
 800533a:	465b      	mov	r3, fp
 800533c:	4640      	mov	r0, r8
 800533e:	4649      	mov	r1, r9
 8005340:	f7fb f82e 	bl	80003a0 <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4613      	mov	r3, r2
 800534a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005352:	d308      	bcc.n	8005366 <UART_SetConfig+0x9a2>
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535a:	d204      	bcs.n	8005366 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005362:	60da      	str	r2, [r3, #12]
 8005364:	e17f      	b.n	8005666 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800536c:	e17b      	b.n	8005666 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005376:	f040 80bd 	bne.w	80054f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800537a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800537e:	2b20      	cmp	r3, #32
 8005380:	dc48      	bgt.n	8005414 <UART_SetConfig+0xa50>
 8005382:	2b00      	cmp	r3, #0
 8005384:	db7b      	blt.n	800547e <UART_SetConfig+0xaba>
 8005386:	2b20      	cmp	r3, #32
 8005388:	d879      	bhi.n	800547e <UART_SetConfig+0xaba>
 800538a:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x9cc>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	0800541b 	.word	0x0800541b
 8005394:	08005423 	.word	0x08005423
 8005398:	0800547f 	.word	0x0800547f
 800539c:	0800547f 	.word	0x0800547f
 80053a0:	0800542b 	.word	0x0800542b
 80053a4:	0800547f 	.word	0x0800547f
 80053a8:	0800547f 	.word	0x0800547f
 80053ac:	0800547f 	.word	0x0800547f
 80053b0:	0800543b 	.word	0x0800543b
 80053b4:	0800547f 	.word	0x0800547f
 80053b8:	0800547f 	.word	0x0800547f
 80053bc:	0800547f 	.word	0x0800547f
 80053c0:	0800547f 	.word	0x0800547f
 80053c4:	0800547f 	.word	0x0800547f
 80053c8:	0800547f 	.word	0x0800547f
 80053cc:	0800547f 	.word	0x0800547f
 80053d0:	0800544b 	.word	0x0800544b
 80053d4:	0800547f 	.word	0x0800547f
 80053d8:	0800547f 	.word	0x0800547f
 80053dc:	0800547f 	.word	0x0800547f
 80053e0:	0800547f 	.word	0x0800547f
 80053e4:	0800547f 	.word	0x0800547f
 80053e8:	0800547f 	.word	0x0800547f
 80053ec:	0800547f 	.word	0x0800547f
 80053f0:	0800547f 	.word	0x0800547f
 80053f4:	0800547f 	.word	0x0800547f
 80053f8:	0800547f 	.word	0x0800547f
 80053fc:	0800547f 	.word	0x0800547f
 8005400:	0800547f 	.word	0x0800547f
 8005404:	0800547f 	.word	0x0800547f
 8005408:	0800547f 	.word	0x0800547f
 800540c:	0800547f 	.word	0x0800547f
 8005410:	08005471 	.word	0x08005471
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d02e      	beq.n	8005476 <UART_SetConfig+0xab2>
 8005418:	e031      	b.n	800547e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800541a:	f7fd fa5b 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 800541e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005420:	e033      	b.n	800548a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005422:	f7fd fa6d 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8005426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005428:	e02f      	b.n	800548a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800542a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe fc50 	bl	8003cd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005438:	e027      	b.n	800548a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800543a:	f107 0318 	add.w	r3, r7, #24
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe fd9c 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005448:	e01f      	b.n	800548a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800544a:	4b69      	ldr	r3, [pc, #420]	; (80055f0 <UART_SetConfig+0xc2c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005456:	4b66      	ldr	r3, [pc, #408]	; (80055f0 <UART_SetConfig+0xc2c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	08db      	lsrs	r3, r3, #3
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	4a64      	ldr	r2, [pc, #400]	; (80055f4 <UART_SetConfig+0xc30>)
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005468:	e00f      	b.n	800548a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800546a:	4b62      	ldr	r3, [pc, #392]	; (80055f4 <UART_SetConfig+0xc30>)
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800546e:	e00c      	b.n	800548a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005470:	4b61      	ldr	r3, [pc, #388]	; (80055f8 <UART_SetConfig+0xc34>)
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005474:	e009      	b.n	800548a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800547c:	e005      	b.n	800548a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80ea 	beq.w	8005666 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	4a55      	ldr	r2, [pc, #340]	; (80055ec <UART_SetConfig+0xc28>)
 8005498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549c:	461a      	mov	r2, r3
 800549e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054a4:	005a      	lsls	r2, r3, #1
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	441a      	add	r2, r3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2b0f      	cmp	r3, #15
 80054bc:	d916      	bls.n	80054ec <UART_SetConfig+0xb28>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d212      	bcs.n	80054ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f023 030f 	bic.w	r3, r3, #15
 80054ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	b29a      	uxth	r2, r3
 80054dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054de:	4313      	orrs	r3, r2
 80054e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	e0bc      	b.n	8005666 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054f2:	e0b8      	b.n	8005666 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	dc4b      	bgt.n	8005594 <UART_SetConfig+0xbd0>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f2c0 8087 	blt.w	8005610 <UART_SetConfig+0xc4c>
 8005502:	2b20      	cmp	r3, #32
 8005504:	f200 8084 	bhi.w	8005610 <UART_SetConfig+0xc4c>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0xb4c>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	0800559b 	.word	0x0800559b
 8005514:	080055a3 	.word	0x080055a3
 8005518:	08005611 	.word	0x08005611
 800551c:	08005611 	.word	0x08005611
 8005520:	080055ab 	.word	0x080055ab
 8005524:	08005611 	.word	0x08005611
 8005528:	08005611 	.word	0x08005611
 800552c:	08005611 	.word	0x08005611
 8005530:	080055bb 	.word	0x080055bb
 8005534:	08005611 	.word	0x08005611
 8005538:	08005611 	.word	0x08005611
 800553c:	08005611 	.word	0x08005611
 8005540:	08005611 	.word	0x08005611
 8005544:	08005611 	.word	0x08005611
 8005548:	08005611 	.word	0x08005611
 800554c:	08005611 	.word	0x08005611
 8005550:	080055cb 	.word	0x080055cb
 8005554:	08005611 	.word	0x08005611
 8005558:	08005611 	.word	0x08005611
 800555c:	08005611 	.word	0x08005611
 8005560:	08005611 	.word	0x08005611
 8005564:	08005611 	.word	0x08005611
 8005568:	08005611 	.word	0x08005611
 800556c:	08005611 	.word	0x08005611
 8005570:	08005611 	.word	0x08005611
 8005574:	08005611 	.word	0x08005611
 8005578:	08005611 	.word	0x08005611
 800557c:	08005611 	.word	0x08005611
 8005580:	08005611 	.word	0x08005611
 8005584:	08005611 	.word	0x08005611
 8005588:	08005611 	.word	0x08005611
 800558c:	08005611 	.word	0x08005611
 8005590:	08005603 	.word	0x08005603
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d037      	beq.n	8005608 <UART_SetConfig+0xc44>
 8005598:	e03a      	b.n	8005610 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800559a:	f7fd f99b 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 800559e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055a0:	e03c      	b.n	800561c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a2:	f7fd f9ad 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 80055a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055a8:	e038      	b.n	800561c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe fb90 	bl	8003cd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055b8:	e030      	b.n	800561c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ba:	f107 0318 	add.w	r3, r7, #24
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fcdc 	bl	8003f7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c8:	e028      	b.n	800561c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <UART_SetConfig+0xc2c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d012      	beq.n	80055fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <UART_SetConfig+0xc2c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	08db      	lsrs	r3, r3, #3
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <UART_SetConfig+0xc30>)
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055e8:	e018      	b.n	800561c <UART_SetConfig+0xc58>
 80055ea:	bf00      	nop
 80055ec:	08006894 	.word	0x08006894
 80055f0:	58024400 	.word	0x58024400
 80055f4:	03d09000 	.word	0x03d09000
 80055f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80055fc:	4b24      	ldr	r3, [pc, #144]	; (8005690 <UART_SetConfig+0xccc>)
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005600:	e00c      	b.n	800561c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <UART_SetConfig+0xcd0>)
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005606:	e009      	b.n	800561c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800560e:	e005      	b.n	800561c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800561a:	bf00      	nop
    }

    if (pclk != 0U)
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d021      	beq.n	8005666 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	4a1c      	ldr	r2, [pc, #112]	; (8005698 <UART_SetConfig+0xcd4>)
 8005628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800562c:	461a      	mov	r2, r3
 800562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005630:	fbb3 f2f2 	udiv	r2, r3, r2
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	441a      	add	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	2b0f      	cmp	r3, #15
 800564a:	d909      	bls.n	8005660 <UART_SetConfig+0xc9c>
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005652:	d205      	bcs.n	8005660 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	b29a      	uxth	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	e002      	b.n	8005666 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2201      	movs	r2, #1
 800566a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2201      	movs	r2, #1
 8005672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2200      	movs	r2, #0
 8005680:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005682:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005686:	4618      	mov	r0, r3
 8005688:	3748      	adds	r7, #72	; 0x48
 800568a:	46bd      	mov	sp, r7
 800568c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005690:	03d09000 	.word	0x03d09000
 8005694:	003d0900 	.word	0x003d0900
 8005698:	08006894 	.word	0x08006894

0800569c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579a:	d10a      	bne.n	80057b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b098      	sub	sp, #96	; 0x60
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f0:	f7fb fdc0 	bl	8001374 <HAL_GetTick>
 80057f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b08      	cmp	r3, #8
 8005802:	d12f      	bne.n	8005864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580c:	2200      	movs	r2, #0
 800580e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f88e 	bl	8005934 <UART_WaitOnFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d022      	beq.n	8005864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005832:	653b      	str	r3, [r7, #80]	; 0x50
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
 800583e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800584a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e6      	bne.n	800581e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e063      	b.n	800592c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b04      	cmp	r3, #4
 8005870:	d149      	bne.n	8005906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587a:	2200      	movs	r2, #0
 800587c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f857 	bl	8005934 <UART_WaitOnFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d03c      	beq.n	8005906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	623b      	str	r3, [r7, #32]
   return(result);
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
 80058ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e6      	bne.n	800588c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3308      	adds	r3, #8
 80058c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058de:	61fa      	str	r2, [r7, #28]
 80058e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	69b9      	ldr	r1, [r7, #24]
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	617b      	str	r3, [r7, #20]
   return(result);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e012      	b.n	800592c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3758      	adds	r7, #88	; 0x58
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005944:	e049      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d045      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594e:	f7fb fd11 	bl	8001374 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <UART_WaitOnFlagUntilTimeout+0x30>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e048      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d031      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b08      	cmp	r3, #8
 8005982:	d110      	bne.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2208      	movs	r2, #8
 800598a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f839 	bl	8005a04 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2208      	movs	r2, #8
 8005996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e029      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b4:	d111      	bne.n	80059da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f81f 	bl	8005a04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e00f      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69da      	ldr	r2, [r3, #28]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d0a6      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b095      	sub	sp, #84	; 0x54
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e6      	bne.n	8005a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <UART_EndRxTransfer+0xc8>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d118      	bne.n	8005aac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f023 0310 	bic.w	r3, r3, #16
 8005a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6979      	ldr	r1, [r7, #20]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e6      	bne.n	8005a7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005ac0:	bf00      	nop
 8005ac2:	3754      	adds	r7, #84	; 0x54
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	effffffe 	.word	0xeffffffe

08005ad0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e027      	b.n	8005b36 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2224      	movs	r2, #36	; 0x24
 8005af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e02d      	b.n	8005bb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	; 0x24
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f850 	bl	8005c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e02d      	b.n	8005c32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2224      	movs	r2, #36	; 0x24
 8005be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f812 	bl	8005c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c5c:	e031      	b.n	8005cc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c5e:	2310      	movs	r3, #16
 8005c60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c62:	2310      	movs	r3, #16
 8005c64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	0e5b      	lsrs	r3, r3, #25
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	0f5b      	lsrs	r3, r3, #29
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	7b3a      	ldrb	r2, [r7, #12]
 8005c8a:	4911      	ldr	r1, [pc, #68]	; (8005cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8005c8c:	5c8a      	ldrb	r2, [r1, r2]
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c92:	7b3a      	ldrb	r2, [r7, #12]
 8005c94:	490f      	ldr	r1, [pc, #60]	; (8005cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8005c96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	7b7a      	ldrb	r2, [r7, #13]
 8005ca8:	4909      	ldr	r1, [pc, #36]	; (8005cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8005caa:	5c8a      	ldrb	r2, [r1, r2]
 8005cac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cb0:	7b7a      	ldrb	r2, [r7, #13]
 8005cb2:	4908      	ldr	r1, [pc, #32]	; (8005cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8005cb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	080068ac 	.word	0x080068ac
 8005cd4:	080068b4 	.word	0x080068b4

08005cd8 <malloc>:
 8005cd8:	4b02      	ldr	r3, [pc, #8]	; (8005ce4 <malloc+0xc>)
 8005cda:	4601      	mov	r1, r0
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	f000 b823 	b.w	8005d28 <_malloc_r>
 8005ce2:	bf00      	nop
 8005ce4:	2400005c 	.word	0x2400005c

08005ce8 <sbrk_aligned>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	4e0e      	ldr	r6, [pc, #56]	; (8005d24 <sbrk_aligned+0x3c>)
 8005cec:	460c      	mov	r4, r1
 8005cee:	6831      	ldr	r1, [r6, #0]
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	b911      	cbnz	r1, 8005cfa <sbrk_aligned+0x12>
 8005cf4:	f000 f8cc 	bl	8005e90 <_sbrk_r>
 8005cf8:	6030      	str	r0, [r6, #0]
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f000 f8c7 	bl	8005e90 <_sbrk_r>
 8005d02:	1c43      	adds	r3, r0, #1
 8005d04:	d00a      	beq.n	8005d1c <sbrk_aligned+0x34>
 8005d06:	1cc4      	adds	r4, r0, #3
 8005d08:	f024 0403 	bic.w	r4, r4, #3
 8005d0c:	42a0      	cmp	r0, r4
 8005d0e:	d007      	beq.n	8005d20 <sbrk_aligned+0x38>
 8005d10:	1a21      	subs	r1, r4, r0
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 f8bc 	bl	8005e90 <_sbrk_r>
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d101      	bne.n	8005d20 <sbrk_aligned+0x38>
 8005d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d20:	4620      	mov	r0, r4
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	240001b0 	.word	0x240001b0

08005d28 <_malloc_r>:
 8005d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d2c:	1ccd      	adds	r5, r1, #3
 8005d2e:	f025 0503 	bic.w	r5, r5, #3
 8005d32:	3508      	adds	r5, #8
 8005d34:	2d0c      	cmp	r5, #12
 8005d36:	bf38      	it	cc
 8005d38:	250c      	movcc	r5, #12
 8005d3a:	2d00      	cmp	r5, #0
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	db01      	blt.n	8005d44 <_malloc_r+0x1c>
 8005d40:	42a9      	cmp	r1, r5
 8005d42:	d905      	bls.n	8005d50 <_malloc_r+0x28>
 8005d44:	230c      	movs	r3, #12
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	2600      	movs	r6, #0
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e24 <_malloc_r+0xfc>
 8005d54:	f000 f868 	bl	8005e28 <__malloc_lock>
 8005d58:	f8d8 3000 	ldr.w	r3, [r8]
 8005d5c:	461c      	mov	r4, r3
 8005d5e:	bb5c      	cbnz	r4, 8005db8 <_malloc_r+0x90>
 8005d60:	4629      	mov	r1, r5
 8005d62:	4638      	mov	r0, r7
 8005d64:	f7ff ffc0 	bl	8005ce8 <sbrk_aligned>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	d155      	bne.n	8005e1a <_malloc_r+0xf2>
 8005d6e:	f8d8 4000 	ldr.w	r4, [r8]
 8005d72:	4626      	mov	r6, r4
 8005d74:	2e00      	cmp	r6, #0
 8005d76:	d145      	bne.n	8005e04 <_malloc_r+0xdc>
 8005d78:	2c00      	cmp	r4, #0
 8005d7a:	d048      	beq.n	8005e0e <_malloc_r+0xe6>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4638      	mov	r0, r7
 8005d82:	eb04 0903 	add.w	r9, r4, r3
 8005d86:	f000 f883 	bl	8005e90 <_sbrk_r>
 8005d8a:	4581      	cmp	r9, r0
 8005d8c:	d13f      	bne.n	8005e0e <_malloc_r+0xe6>
 8005d8e:	6821      	ldr	r1, [r4, #0]
 8005d90:	1a6d      	subs	r5, r5, r1
 8005d92:	4629      	mov	r1, r5
 8005d94:	4638      	mov	r0, r7
 8005d96:	f7ff ffa7 	bl	8005ce8 <sbrk_aligned>
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d037      	beq.n	8005e0e <_malloc_r+0xe6>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	442b      	add	r3, r5
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	f8d8 3000 	ldr.w	r3, [r8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d038      	beq.n	8005e1e <_malloc_r+0xf6>
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	42a2      	cmp	r2, r4
 8005db0:	d12b      	bne.n	8005e0a <_malloc_r+0xe2>
 8005db2:	2200      	movs	r2, #0
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	e00f      	b.n	8005dd8 <_malloc_r+0xb0>
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	1b52      	subs	r2, r2, r5
 8005dbc:	d41f      	bmi.n	8005dfe <_malloc_r+0xd6>
 8005dbe:	2a0b      	cmp	r2, #11
 8005dc0:	d917      	bls.n	8005df2 <_malloc_r+0xca>
 8005dc2:	1961      	adds	r1, r4, r5
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	6025      	str	r5, [r4, #0]
 8005dc8:	bf18      	it	ne
 8005dca:	6059      	strne	r1, [r3, #4]
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	bf08      	it	eq
 8005dd0:	f8c8 1000 	streq.w	r1, [r8]
 8005dd4:	5162      	str	r2, [r4, r5]
 8005dd6:	604b      	str	r3, [r1, #4]
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f104 060b 	add.w	r6, r4, #11
 8005dde:	f000 f829 	bl	8005e34 <__malloc_unlock>
 8005de2:	f026 0607 	bic.w	r6, r6, #7
 8005de6:	1d23      	adds	r3, r4, #4
 8005de8:	1af2      	subs	r2, r6, r3
 8005dea:	d0ae      	beq.n	8005d4a <_malloc_r+0x22>
 8005dec:	1b9b      	subs	r3, r3, r6
 8005dee:	50a3      	str	r3, [r4, r2]
 8005df0:	e7ab      	b.n	8005d4a <_malloc_r+0x22>
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	6862      	ldr	r2, [r4, #4]
 8005df6:	d1dd      	bne.n	8005db4 <_malloc_r+0x8c>
 8005df8:	f8c8 2000 	str.w	r2, [r8]
 8005dfc:	e7ec      	b.n	8005dd8 <_malloc_r+0xb0>
 8005dfe:	4623      	mov	r3, r4
 8005e00:	6864      	ldr	r4, [r4, #4]
 8005e02:	e7ac      	b.n	8005d5e <_malloc_r+0x36>
 8005e04:	4634      	mov	r4, r6
 8005e06:	6876      	ldr	r6, [r6, #4]
 8005e08:	e7b4      	b.n	8005d74 <_malloc_r+0x4c>
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	e7cc      	b.n	8005da8 <_malloc_r+0x80>
 8005e0e:	230c      	movs	r3, #12
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	4638      	mov	r0, r7
 8005e14:	f000 f80e 	bl	8005e34 <__malloc_unlock>
 8005e18:	e797      	b.n	8005d4a <_malloc_r+0x22>
 8005e1a:	6025      	str	r5, [r4, #0]
 8005e1c:	e7dc      	b.n	8005dd8 <_malloc_r+0xb0>
 8005e1e:	605b      	str	r3, [r3, #4]
 8005e20:	deff      	udf	#255	; 0xff
 8005e22:	bf00      	nop
 8005e24:	240001ac 	.word	0x240001ac

08005e28 <__malloc_lock>:
 8005e28:	4801      	ldr	r0, [pc, #4]	; (8005e30 <__malloc_lock+0x8>)
 8005e2a:	f000 b86b 	b.w	8005f04 <__retarget_lock_acquire_recursive>
 8005e2e:	bf00      	nop
 8005e30:	240002f0 	.word	0x240002f0

08005e34 <__malloc_unlock>:
 8005e34:	4801      	ldr	r0, [pc, #4]	; (8005e3c <__malloc_unlock+0x8>)
 8005e36:	f000 b866 	b.w	8005f06 <__retarget_lock_release_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	240002f0 	.word	0x240002f0

08005e40 <siprintf>:
 8005e40:	b40e      	push	{r1, r2, r3}
 8005e42:	b500      	push	{lr}
 8005e44:	b09c      	sub	sp, #112	; 0x70
 8005e46:	ab1d      	add	r3, sp, #116	; 0x74
 8005e48:	9002      	str	r0, [sp, #8]
 8005e4a:	9006      	str	r0, [sp, #24]
 8005e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e50:	4809      	ldr	r0, [pc, #36]	; (8005e78 <siprintf+0x38>)
 8005e52:	9107      	str	r1, [sp, #28]
 8005e54:	9104      	str	r1, [sp, #16]
 8005e56:	4909      	ldr	r1, [pc, #36]	; (8005e7c <siprintf+0x3c>)
 8005e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e5c:	9105      	str	r1, [sp, #20]
 8005e5e:	6800      	ldr	r0, [r0, #0]
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	a902      	add	r1, sp, #8
 8005e64:	f000 f904 	bl	8006070 <_svfiprintf_r>
 8005e68:	9b02      	ldr	r3, [sp, #8]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	b01c      	add	sp, #112	; 0x70
 8005e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e74:	b003      	add	sp, #12
 8005e76:	4770      	bx	lr
 8005e78:	2400005c 	.word	0x2400005c
 8005e7c:	ffff0208 	.word	0xffff0208

08005e80 <memset>:
 8005e80:	4402      	add	r2, r0
 8005e82:	4603      	mov	r3, r0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d100      	bne.n	8005e8a <memset+0xa>
 8005e88:	4770      	bx	lr
 8005e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8e:	e7f9      	b.n	8005e84 <memset+0x4>

08005e90 <_sbrk_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d06      	ldr	r5, [pc, #24]	; (8005eac <_sbrk_r+0x1c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fa ffa6 	bl	8000dec <_sbrk>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_sbrk_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_sbrk_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	240002ec 	.word	0x240002ec

08005eb0 <__errno>:
 8005eb0:	4b01      	ldr	r3, [pc, #4]	; (8005eb8 <__errno+0x8>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	2400005c 	.word	0x2400005c

08005ebc <__libc_init_array>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	4d0d      	ldr	r5, [pc, #52]	; (8005ef4 <__libc_init_array+0x38>)
 8005ec0:	4c0d      	ldr	r4, [pc, #52]	; (8005ef8 <__libc_init_array+0x3c>)
 8005ec2:	1b64      	subs	r4, r4, r5
 8005ec4:	10a4      	asrs	r4, r4, #2
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	42a6      	cmp	r6, r4
 8005eca:	d109      	bne.n	8005ee0 <__libc_init_array+0x24>
 8005ecc:	4d0b      	ldr	r5, [pc, #44]	; (8005efc <__libc_init_array+0x40>)
 8005ece:	4c0c      	ldr	r4, [pc, #48]	; (8005f00 <__libc_init_array+0x44>)
 8005ed0:	f000 fbae 	bl	8006630 <_init>
 8005ed4:	1b64      	subs	r4, r4, r5
 8005ed6:	10a4      	asrs	r4, r4, #2
 8005ed8:	2600      	movs	r6, #0
 8005eda:	42a6      	cmp	r6, r4
 8005edc:	d105      	bne.n	8005eea <__libc_init_array+0x2e>
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee4:	4798      	blx	r3
 8005ee6:	3601      	adds	r6, #1
 8005ee8:	e7ee      	b.n	8005ec8 <__libc_init_array+0xc>
 8005eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eee:	4798      	blx	r3
 8005ef0:	3601      	adds	r6, #1
 8005ef2:	e7f2      	b.n	8005eda <__libc_init_array+0x1e>
 8005ef4:	080068f8 	.word	0x080068f8
 8005ef8:	080068f8 	.word	0x080068f8
 8005efc:	080068f8 	.word	0x080068f8
 8005f00:	080068fc 	.word	0x080068fc

08005f04 <__retarget_lock_acquire_recursive>:
 8005f04:	4770      	bx	lr

08005f06 <__retarget_lock_release_recursive>:
 8005f06:	4770      	bx	lr

08005f08 <memcpy>:
 8005f08:	440a      	add	r2, r1
 8005f0a:	4291      	cmp	r1, r2
 8005f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f10:	d100      	bne.n	8005f14 <memcpy+0xc>
 8005f12:	4770      	bx	lr
 8005f14:	b510      	push	{r4, lr}
 8005f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f1e:	4291      	cmp	r1, r2
 8005f20:	d1f9      	bne.n	8005f16 <memcpy+0xe>
 8005f22:	bd10      	pop	{r4, pc}

08005f24 <_free_r>:
 8005f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f26:	2900      	cmp	r1, #0
 8005f28:	d044      	beq.n	8005fb4 <_free_r+0x90>
 8005f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f2e:	9001      	str	r0, [sp, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f1a1 0404 	sub.w	r4, r1, #4
 8005f36:	bfb8      	it	lt
 8005f38:	18e4      	addlt	r4, r4, r3
 8005f3a:	f7ff ff75 	bl	8005e28 <__malloc_lock>
 8005f3e:	4a1e      	ldr	r2, [pc, #120]	; (8005fb8 <_free_r+0x94>)
 8005f40:	9801      	ldr	r0, [sp, #4]
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	b933      	cbnz	r3, 8005f54 <_free_r+0x30>
 8005f46:	6063      	str	r3, [r4, #4]
 8005f48:	6014      	str	r4, [r2, #0]
 8005f4a:	b003      	add	sp, #12
 8005f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f50:	f7ff bf70 	b.w	8005e34 <__malloc_unlock>
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d908      	bls.n	8005f6a <_free_r+0x46>
 8005f58:	6825      	ldr	r5, [r4, #0]
 8005f5a:	1961      	adds	r1, r4, r5
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	bf01      	itttt	eq
 8005f60:	6819      	ldreq	r1, [r3, #0]
 8005f62:	685b      	ldreq	r3, [r3, #4]
 8005f64:	1949      	addeq	r1, r1, r5
 8005f66:	6021      	streq	r1, [r4, #0]
 8005f68:	e7ed      	b.n	8005f46 <_free_r+0x22>
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b10b      	cbz	r3, 8005f74 <_free_r+0x50>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d9fa      	bls.n	8005f6a <_free_r+0x46>
 8005f74:	6811      	ldr	r1, [r2, #0]
 8005f76:	1855      	adds	r5, r2, r1
 8005f78:	42a5      	cmp	r5, r4
 8005f7a:	d10b      	bne.n	8005f94 <_free_r+0x70>
 8005f7c:	6824      	ldr	r4, [r4, #0]
 8005f7e:	4421      	add	r1, r4
 8005f80:	1854      	adds	r4, r2, r1
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	d1e0      	bne.n	8005f4a <_free_r+0x26>
 8005f88:	681c      	ldr	r4, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	6053      	str	r3, [r2, #4]
 8005f8e:	440c      	add	r4, r1
 8005f90:	6014      	str	r4, [r2, #0]
 8005f92:	e7da      	b.n	8005f4a <_free_r+0x26>
 8005f94:	d902      	bls.n	8005f9c <_free_r+0x78>
 8005f96:	230c      	movs	r3, #12
 8005f98:	6003      	str	r3, [r0, #0]
 8005f9a:	e7d6      	b.n	8005f4a <_free_r+0x26>
 8005f9c:	6825      	ldr	r5, [r4, #0]
 8005f9e:	1961      	adds	r1, r4, r5
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf04      	itt	eq
 8005fa4:	6819      	ldreq	r1, [r3, #0]
 8005fa6:	685b      	ldreq	r3, [r3, #4]
 8005fa8:	6063      	str	r3, [r4, #4]
 8005faa:	bf04      	itt	eq
 8005fac:	1949      	addeq	r1, r1, r5
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	6054      	str	r4, [r2, #4]
 8005fb2:	e7ca      	b.n	8005f4a <_free_r+0x26>
 8005fb4:	b003      	add	sp, #12
 8005fb6:	bd30      	pop	{r4, r5, pc}
 8005fb8:	240001ac 	.word	0x240001ac

08005fbc <__ssputs_r>:
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	688e      	ldr	r6, [r1, #8]
 8005fc2:	461f      	mov	r7, r3
 8005fc4:	42be      	cmp	r6, r7
 8005fc6:	680b      	ldr	r3, [r1, #0]
 8005fc8:	4682      	mov	sl, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	4690      	mov	r8, r2
 8005fce:	d82c      	bhi.n	800602a <__ssputs_r+0x6e>
 8005fd0:	898a      	ldrh	r2, [r1, #12]
 8005fd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fd6:	d026      	beq.n	8006026 <__ssputs_r+0x6a>
 8005fd8:	6965      	ldr	r5, [r4, #20]
 8005fda:	6909      	ldr	r1, [r1, #16]
 8005fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe0:	eba3 0901 	sub.w	r9, r3, r1
 8005fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fe8:	1c7b      	adds	r3, r7, #1
 8005fea:	444b      	add	r3, r9
 8005fec:	106d      	asrs	r5, r5, #1
 8005fee:	429d      	cmp	r5, r3
 8005ff0:	bf38      	it	cc
 8005ff2:	461d      	movcc	r5, r3
 8005ff4:	0553      	lsls	r3, r2, #21
 8005ff6:	d527      	bpl.n	8006048 <__ssputs_r+0x8c>
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7ff fe95 	bl	8005d28 <_malloc_r>
 8005ffe:	4606      	mov	r6, r0
 8006000:	b360      	cbz	r0, 800605c <__ssputs_r+0xa0>
 8006002:	6921      	ldr	r1, [r4, #16]
 8006004:	464a      	mov	r2, r9
 8006006:	f7ff ff7f 	bl	8005f08 <memcpy>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006014:	81a3      	strh	r3, [r4, #12]
 8006016:	6126      	str	r6, [r4, #16]
 8006018:	6165      	str	r5, [r4, #20]
 800601a:	444e      	add	r6, r9
 800601c:	eba5 0509 	sub.w	r5, r5, r9
 8006020:	6026      	str	r6, [r4, #0]
 8006022:	60a5      	str	r5, [r4, #8]
 8006024:	463e      	mov	r6, r7
 8006026:	42be      	cmp	r6, r7
 8006028:	d900      	bls.n	800602c <__ssputs_r+0x70>
 800602a:	463e      	mov	r6, r7
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	4632      	mov	r2, r6
 8006030:	4641      	mov	r1, r8
 8006032:	f000 faab 	bl	800658c <memmove>
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	1b9b      	subs	r3, r3, r6
 800603a:	60a3      	str	r3, [r4, #8]
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	4433      	add	r3, r6
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	2000      	movs	r0, #0
 8006044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006048:	462a      	mov	r2, r5
 800604a:	f000 fab9 	bl	80065c0 <_realloc_r>
 800604e:	4606      	mov	r6, r0
 8006050:	2800      	cmp	r0, #0
 8006052:	d1e0      	bne.n	8006016 <__ssputs_r+0x5a>
 8006054:	6921      	ldr	r1, [r4, #16]
 8006056:	4650      	mov	r0, sl
 8006058:	f7ff ff64 	bl	8005f24 <_free_r>
 800605c:	230c      	movs	r3, #12
 800605e:	f8ca 3000 	str.w	r3, [sl]
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	f04f 30ff 	mov.w	r0, #4294967295
 800606e:	e7e9      	b.n	8006044 <__ssputs_r+0x88>

08006070 <_svfiprintf_r>:
 8006070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	4698      	mov	r8, r3
 8006076:	898b      	ldrh	r3, [r1, #12]
 8006078:	061b      	lsls	r3, r3, #24
 800607a:	b09d      	sub	sp, #116	; 0x74
 800607c:	4607      	mov	r7, r0
 800607e:	460d      	mov	r5, r1
 8006080:	4614      	mov	r4, r2
 8006082:	d50e      	bpl.n	80060a2 <_svfiprintf_r+0x32>
 8006084:	690b      	ldr	r3, [r1, #16]
 8006086:	b963      	cbnz	r3, 80060a2 <_svfiprintf_r+0x32>
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	f7ff fe4d 	bl	8005d28 <_malloc_r>
 800608e:	6028      	str	r0, [r5, #0]
 8006090:	6128      	str	r0, [r5, #16]
 8006092:	b920      	cbnz	r0, 800609e <_svfiprintf_r+0x2e>
 8006094:	230c      	movs	r3, #12
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	e0d0      	b.n	8006240 <_svfiprintf_r+0x1d0>
 800609e:	2340      	movs	r3, #64	; 0x40
 80060a0:	616b      	str	r3, [r5, #20]
 80060a2:	2300      	movs	r3, #0
 80060a4:	9309      	str	r3, [sp, #36]	; 0x24
 80060a6:	2320      	movs	r3, #32
 80060a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b0:	2330      	movs	r3, #48	; 0x30
 80060b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006258 <_svfiprintf_r+0x1e8>
 80060b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ba:	f04f 0901 	mov.w	r9, #1
 80060be:	4623      	mov	r3, r4
 80060c0:	469a      	mov	sl, r3
 80060c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060c6:	b10a      	cbz	r2, 80060cc <_svfiprintf_r+0x5c>
 80060c8:	2a25      	cmp	r2, #37	; 0x25
 80060ca:	d1f9      	bne.n	80060c0 <_svfiprintf_r+0x50>
 80060cc:	ebba 0b04 	subs.w	fp, sl, r4
 80060d0:	d00b      	beq.n	80060ea <_svfiprintf_r+0x7a>
 80060d2:	465b      	mov	r3, fp
 80060d4:	4622      	mov	r2, r4
 80060d6:	4629      	mov	r1, r5
 80060d8:	4638      	mov	r0, r7
 80060da:	f7ff ff6f 	bl	8005fbc <__ssputs_r>
 80060de:	3001      	adds	r0, #1
 80060e0:	f000 80a9 	beq.w	8006236 <_svfiprintf_r+0x1c6>
 80060e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e6:	445a      	add	r2, fp
 80060e8:	9209      	str	r2, [sp, #36]	; 0x24
 80060ea:	f89a 3000 	ldrb.w	r3, [sl]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80a1 	beq.w	8006236 <_svfiprintf_r+0x1c6>
 80060f4:	2300      	movs	r3, #0
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060fe:	f10a 0a01 	add.w	sl, sl, #1
 8006102:	9304      	str	r3, [sp, #16]
 8006104:	9307      	str	r3, [sp, #28]
 8006106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800610a:	931a      	str	r3, [sp, #104]	; 0x68
 800610c:	4654      	mov	r4, sl
 800610e:	2205      	movs	r2, #5
 8006110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006114:	4850      	ldr	r0, [pc, #320]	; (8006258 <_svfiprintf_r+0x1e8>)
 8006116:	f7fa f8f3 	bl	8000300 <memchr>
 800611a:	9a04      	ldr	r2, [sp, #16]
 800611c:	b9d8      	cbnz	r0, 8006156 <_svfiprintf_r+0xe6>
 800611e:	06d0      	lsls	r0, r2, #27
 8006120:	bf44      	itt	mi
 8006122:	2320      	movmi	r3, #32
 8006124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006128:	0711      	lsls	r1, r2, #28
 800612a:	bf44      	itt	mi
 800612c:	232b      	movmi	r3, #43	; 0x2b
 800612e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006132:	f89a 3000 	ldrb.w	r3, [sl]
 8006136:	2b2a      	cmp	r3, #42	; 0x2a
 8006138:	d015      	beq.n	8006166 <_svfiprintf_r+0xf6>
 800613a:	9a07      	ldr	r2, [sp, #28]
 800613c:	4654      	mov	r4, sl
 800613e:	2000      	movs	r0, #0
 8006140:	f04f 0c0a 	mov.w	ip, #10
 8006144:	4621      	mov	r1, r4
 8006146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800614a:	3b30      	subs	r3, #48	; 0x30
 800614c:	2b09      	cmp	r3, #9
 800614e:	d94d      	bls.n	80061ec <_svfiprintf_r+0x17c>
 8006150:	b1b0      	cbz	r0, 8006180 <_svfiprintf_r+0x110>
 8006152:	9207      	str	r2, [sp, #28]
 8006154:	e014      	b.n	8006180 <_svfiprintf_r+0x110>
 8006156:	eba0 0308 	sub.w	r3, r0, r8
 800615a:	fa09 f303 	lsl.w	r3, r9, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	9304      	str	r3, [sp, #16]
 8006162:	46a2      	mov	sl, r4
 8006164:	e7d2      	b.n	800610c <_svfiprintf_r+0x9c>
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	1d19      	adds	r1, r3, #4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	9103      	str	r1, [sp, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfbb      	ittet	lt
 8006172:	425b      	neglt	r3, r3
 8006174:	f042 0202 	orrlt.w	r2, r2, #2
 8006178:	9307      	strge	r3, [sp, #28]
 800617a:	9307      	strlt	r3, [sp, #28]
 800617c:	bfb8      	it	lt
 800617e:	9204      	strlt	r2, [sp, #16]
 8006180:	7823      	ldrb	r3, [r4, #0]
 8006182:	2b2e      	cmp	r3, #46	; 0x2e
 8006184:	d10c      	bne.n	80061a0 <_svfiprintf_r+0x130>
 8006186:	7863      	ldrb	r3, [r4, #1]
 8006188:	2b2a      	cmp	r3, #42	; 0x2a
 800618a:	d134      	bne.n	80061f6 <_svfiprintf_r+0x186>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9203      	str	r2, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	bfb8      	it	lt
 8006198:	f04f 33ff 	movlt.w	r3, #4294967295
 800619c:	3402      	adds	r4, #2
 800619e:	9305      	str	r3, [sp, #20]
 80061a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006268 <_svfiprintf_r+0x1f8>
 80061a4:	7821      	ldrb	r1, [r4, #0]
 80061a6:	2203      	movs	r2, #3
 80061a8:	4650      	mov	r0, sl
 80061aa:	f7fa f8a9 	bl	8000300 <memchr>
 80061ae:	b138      	cbz	r0, 80061c0 <_svfiprintf_r+0x150>
 80061b0:	9b04      	ldr	r3, [sp, #16]
 80061b2:	eba0 000a 	sub.w	r0, r0, sl
 80061b6:	2240      	movs	r2, #64	; 0x40
 80061b8:	4082      	lsls	r2, r0
 80061ba:	4313      	orrs	r3, r2
 80061bc:	3401      	adds	r4, #1
 80061be:	9304      	str	r3, [sp, #16]
 80061c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c4:	4825      	ldr	r0, [pc, #148]	; (800625c <_svfiprintf_r+0x1ec>)
 80061c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061ca:	2206      	movs	r2, #6
 80061cc:	f7fa f898 	bl	8000300 <memchr>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d038      	beq.n	8006246 <_svfiprintf_r+0x1d6>
 80061d4:	4b22      	ldr	r3, [pc, #136]	; (8006260 <_svfiprintf_r+0x1f0>)
 80061d6:	bb1b      	cbnz	r3, 8006220 <_svfiprintf_r+0x1b0>
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	3307      	adds	r3, #7
 80061dc:	f023 0307 	bic.w	r3, r3, #7
 80061e0:	3308      	adds	r3, #8
 80061e2:	9303      	str	r3, [sp, #12]
 80061e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e6:	4433      	add	r3, r6
 80061e8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ea:	e768      	b.n	80060be <_svfiprintf_r+0x4e>
 80061ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f0:	460c      	mov	r4, r1
 80061f2:	2001      	movs	r0, #1
 80061f4:	e7a6      	b.n	8006144 <_svfiprintf_r+0xd4>
 80061f6:	2300      	movs	r3, #0
 80061f8:	3401      	adds	r4, #1
 80061fa:	9305      	str	r3, [sp, #20]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f04f 0c0a 	mov.w	ip, #10
 8006202:	4620      	mov	r0, r4
 8006204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006208:	3a30      	subs	r2, #48	; 0x30
 800620a:	2a09      	cmp	r2, #9
 800620c:	d903      	bls.n	8006216 <_svfiprintf_r+0x1a6>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0c6      	beq.n	80061a0 <_svfiprintf_r+0x130>
 8006212:	9105      	str	r1, [sp, #20]
 8006214:	e7c4      	b.n	80061a0 <_svfiprintf_r+0x130>
 8006216:	fb0c 2101 	mla	r1, ip, r1, r2
 800621a:	4604      	mov	r4, r0
 800621c:	2301      	movs	r3, #1
 800621e:	e7f0      	b.n	8006202 <_svfiprintf_r+0x192>
 8006220:	ab03      	add	r3, sp, #12
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	462a      	mov	r2, r5
 8006226:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <_svfiprintf_r+0x1f4>)
 8006228:	a904      	add	r1, sp, #16
 800622a:	4638      	mov	r0, r7
 800622c:	f3af 8000 	nop.w
 8006230:	1c42      	adds	r2, r0, #1
 8006232:	4606      	mov	r6, r0
 8006234:	d1d6      	bne.n	80061e4 <_svfiprintf_r+0x174>
 8006236:	89ab      	ldrh	r3, [r5, #12]
 8006238:	065b      	lsls	r3, r3, #25
 800623a:	f53f af2d 	bmi.w	8006098 <_svfiprintf_r+0x28>
 800623e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006240:	b01d      	add	sp, #116	; 0x74
 8006242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006246:	ab03      	add	r3, sp, #12
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	462a      	mov	r2, r5
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <_svfiprintf_r+0x1f4>)
 800624e:	a904      	add	r1, sp, #16
 8006250:	4638      	mov	r0, r7
 8006252:	f000 f879 	bl	8006348 <_printf_i>
 8006256:	e7eb      	b.n	8006230 <_svfiprintf_r+0x1c0>
 8006258:	080068bc 	.word	0x080068bc
 800625c:	080068c6 	.word	0x080068c6
 8006260:	00000000 	.word	0x00000000
 8006264:	08005fbd 	.word	0x08005fbd
 8006268:	080068c2 	.word	0x080068c2

0800626c <_printf_common>:
 800626c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	4616      	mov	r6, r2
 8006272:	4699      	mov	r9, r3
 8006274:	688a      	ldr	r2, [r1, #8]
 8006276:	690b      	ldr	r3, [r1, #16]
 8006278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800627c:	4293      	cmp	r3, r2
 800627e:	bfb8      	it	lt
 8006280:	4613      	movlt	r3, r2
 8006282:	6033      	str	r3, [r6, #0]
 8006284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006288:	4607      	mov	r7, r0
 800628a:	460c      	mov	r4, r1
 800628c:	b10a      	cbz	r2, 8006292 <_printf_common+0x26>
 800628e:	3301      	adds	r3, #1
 8006290:	6033      	str	r3, [r6, #0]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	0699      	lsls	r1, r3, #26
 8006296:	bf42      	ittt	mi
 8006298:	6833      	ldrmi	r3, [r6, #0]
 800629a:	3302      	addmi	r3, #2
 800629c:	6033      	strmi	r3, [r6, #0]
 800629e:	6825      	ldr	r5, [r4, #0]
 80062a0:	f015 0506 	ands.w	r5, r5, #6
 80062a4:	d106      	bne.n	80062b4 <_printf_common+0x48>
 80062a6:	f104 0a19 	add.w	sl, r4, #25
 80062aa:	68e3      	ldr	r3, [r4, #12]
 80062ac:	6832      	ldr	r2, [r6, #0]
 80062ae:	1a9b      	subs	r3, r3, r2
 80062b0:	42ab      	cmp	r3, r5
 80062b2:	dc26      	bgt.n	8006302 <_printf_common+0x96>
 80062b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062b8:	1e13      	subs	r3, r2, #0
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	bf18      	it	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	0692      	lsls	r2, r2, #26
 80062c2:	d42b      	bmi.n	800631c <_printf_common+0xb0>
 80062c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c8:	4649      	mov	r1, r9
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d01e      	beq.n	8006310 <_printf_common+0xa4>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	6922      	ldr	r2, [r4, #16]
 80062d6:	f003 0306 	and.w	r3, r3, #6
 80062da:	2b04      	cmp	r3, #4
 80062dc:	bf02      	ittt	eq
 80062de:	68e5      	ldreq	r5, [r4, #12]
 80062e0:	6833      	ldreq	r3, [r6, #0]
 80062e2:	1aed      	subeq	r5, r5, r3
 80062e4:	68a3      	ldr	r3, [r4, #8]
 80062e6:	bf0c      	ite	eq
 80062e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ec:	2500      	movne	r5, #0
 80062ee:	4293      	cmp	r3, r2
 80062f0:	bfc4      	itt	gt
 80062f2:	1a9b      	subgt	r3, r3, r2
 80062f4:	18ed      	addgt	r5, r5, r3
 80062f6:	2600      	movs	r6, #0
 80062f8:	341a      	adds	r4, #26
 80062fa:	42b5      	cmp	r5, r6
 80062fc:	d11a      	bne.n	8006334 <_printf_common+0xc8>
 80062fe:	2000      	movs	r0, #0
 8006300:	e008      	b.n	8006314 <_printf_common+0xa8>
 8006302:	2301      	movs	r3, #1
 8006304:	4652      	mov	r2, sl
 8006306:	4649      	mov	r1, r9
 8006308:	4638      	mov	r0, r7
 800630a:	47c0      	blx	r8
 800630c:	3001      	adds	r0, #1
 800630e:	d103      	bne.n	8006318 <_printf_common+0xac>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	3501      	adds	r5, #1
 800631a:	e7c6      	b.n	80062aa <_printf_common+0x3e>
 800631c:	18e1      	adds	r1, r4, r3
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	2030      	movs	r0, #48	; 0x30
 8006322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006326:	4422      	add	r2, r4
 8006328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800632c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006330:	3302      	adds	r3, #2
 8006332:	e7c7      	b.n	80062c4 <_printf_common+0x58>
 8006334:	2301      	movs	r3, #1
 8006336:	4622      	mov	r2, r4
 8006338:	4649      	mov	r1, r9
 800633a:	4638      	mov	r0, r7
 800633c:	47c0      	blx	r8
 800633e:	3001      	adds	r0, #1
 8006340:	d0e6      	beq.n	8006310 <_printf_common+0xa4>
 8006342:	3601      	adds	r6, #1
 8006344:	e7d9      	b.n	80062fa <_printf_common+0x8e>
	...

08006348 <_printf_i>:
 8006348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	7e0f      	ldrb	r7, [r1, #24]
 800634e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006350:	2f78      	cmp	r7, #120	; 0x78
 8006352:	4691      	mov	r9, r2
 8006354:	4680      	mov	r8, r0
 8006356:	460c      	mov	r4, r1
 8006358:	469a      	mov	sl, r3
 800635a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800635e:	d807      	bhi.n	8006370 <_printf_i+0x28>
 8006360:	2f62      	cmp	r7, #98	; 0x62
 8006362:	d80a      	bhi.n	800637a <_printf_i+0x32>
 8006364:	2f00      	cmp	r7, #0
 8006366:	f000 80d4 	beq.w	8006512 <_printf_i+0x1ca>
 800636a:	2f58      	cmp	r7, #88	; 0x58
 800636c:	f000 80c0 	beq.w	80064f0 <_printf_i+0x1a8>
 8006370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006378:	e03a      	b.n	80063f0 <_printf_i+0xa8>
 800637a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800637e:	2b15      	cmp	r3, #21
 8006380:	d8f6      	bhi.n	8006370 <_printf_i+0x28>
 8006382:	a101      	add	r1, pc, #4	; (adr r1, 8006388 <_printf_i+0x40>)
 8006384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063f5 	.word	0x080063f5
 8006390:	08006371 	.word	0x08006371
 8006394:	08006371 	.word	0x08006371
 8006398:	08006371 	.word	0x08006371
 800639c:	08006371 	.word	0x08006371
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	08006371 	.word	0x08006371
 80063a8:	08006371 	.word	0x08006371
 80063ac:	08006371 	.word	0x08006371
 80063b0:	08006371 	.word	0x08006371
 80063b4:	080064f9 	.word	0x080064f9
 80063b8:	08006421 	.word	0x08006421
 80063bc:	080064b3 	.word	0x080064b3
 80063c0:	08006371 	.word	0x08006371
 80063c4:	08006371 	.word	0x08006371
 80063c8:	0800651b 	.word	0x0800651b
 80063cc:	08006371 	.word	0x08006371
 80063d0:	08006421 	.word	0x08006421
 80063d4:	08006371 	.word	0x08006371
 80063d8:	08006371 	.word	0x08006371
 80063dc:	080064bb 	.word	0x080064bb
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	1d1a      	adds	r2, r3, #4
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	602a      	str	r2, [r5, #0]
 80063e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f0:	2301      	movs	r3, #1
 80063f2:	e09f      	b.n	8006534 <_printf_i+0x1ec>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	0607      	lsls	r7, r0, #24
 80063fa:	f103 0104 	add.w	r1, r3, #4
 80063fe:	6029      	str	r1, [r5, #0]
 8006400:	d501      	bpl.n	8006406 <_printf_i+0xbe>
 8006402:	681e      	ldr	r6, [r3, #0]
 8006404:	e003      	b.n	800640e <_printf_i+0xc6>
 8006406:	0646      	lsls	r6, r0, #25
 8006408:	d5fb      	bpl.n	8006402 <_printf_i+0xba>
 800640a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800640e:	2e00      	cmp	r6, #0
 8006410:	da03      	bge.n	800641a <_printf_i+0xd2>
 8006412:	232d      	movs	r3, #45	; 0x2d
 8006414:	4276      	negs	r6, r6
 8006416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641a:	485a      	ldr	r0, [pc, #360]	; (8006584 <_printf_i+0x23c>)
 800641c:	230a      	movs	r3, #10
 800641e:	e012      	b.n	8006446 <_printf_i+0xfe>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	6029      	str	r1, [r5, #0]
 8006428:	0605      	lsls	r5, r0, #24
 800642a:	d501      	bpl.n	8006430 <_printf_i+0xe8>
 800642c:	681e      	ldr	r6, [r3, #0]
 800642e:	e002      	b.n	8006436 <_printf_i+0xee>
 8006430:	0641      	lsls	r1, r0, #25
 8006432:	d5fb      	bpl.n	800642c <_printf_i+0xe4>
 8006434:	881e      	ldrh	r6, [r3, #0]
 8006436:	4853      	ldr	r0, [pc, #332]	; (8006584 <_printf_i+0x23c>)
 8006438:	2f6f      	cmp	r7, #111	; 0x6f
 800643a:	bf0c      	ite	eq
 800643c:	2308      	moveq	r3, #8
 800643e:	230a      	movne	r3, #10
 8006440:	2100      	movs	r1, #0
 8006442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006446:	6865      	ldr	r5, [r4, #4]
 8006448:	60a5      	str	r5, [r4, #8]
 800644a:	2d00      	cmp	r5, #0
 800644c:	bfa2      	ittt	ge
 800644e:	6821      	ldrge	r1, [r4, #0]
 8006450:	f021 0104 	bicge.w	r1, r1, #4
 8006454:	6021      	strge	r1, [r4, #0]
 8006456:	b90e      	cbnz	r6, 800645c <_printf_i+0x114>
 8006458:	2d00      	cmp	r5, #0
 800645a:	d04b      	beq.n	80064f4 <_printf_i+0x1ac>
 800645c:	4615      	mov	r5, r2
 800645e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006462:	fb03 6711 	mls	r7, r3, r1, r6
 8006466:	5dc7      	ldrb	r7, [r0, r7]
 8006468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800646c:	4637      	mov	r7, r6
 800646e:	42bb      	cmp	r3, r7
 8006470:	460e      	mov	r6, r1
 8006472:	d9f4      	bls.n	800645e <_printf_i+0x116>
 8006474:	2b08      	cmp	r3, #8
 8006476:	d10b      	bne.n	8006490 <_printf_i+0x148>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07de      	lsls	r6, r3, #31
 800647c:	d508      	bpl.n	8006490 <_printf_i+0x148>
 800647e:	6923      	ldr	r3, [r4, #16]
 8006480:	6861      	ldr	r1, [r4, #4]
 8006482:	4299      	cmp	r1, r3
 8006484:	bfde      	ittt	le
 8006486:	2330      	movle	r3, #48	; 0x30
 8006488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800648c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006490:	1b52      	subs	r2, r2, r5
 8006492:	6122      	str	r2, [r4, #16]
 8006494:	f8cd a000 	str.w	sl, [sp]
 8006498:	464b      	mov	r3, r9
 800649a:	aa03      	add	r2, sp, #12
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff fee4 	bl	800626c <_printf_common>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d14a      	bne.n	800653e <_printf_i+0x1f6>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	b004      	add	sp, #16
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	f043 0320 	orr.w	r3, r3, #32
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	4833      	ldr	r0, [pc, #204]	; (8006588 <_printf_i+0x240>)
 80064bc:	2778      	movs	r7, #120	; 0x78
 80064be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	6829      	ldr	r1, [r5, #0]
 80064c6:	061f      	lsls	r7, r3, #24
 80064c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064cc:	d402      	bmi.n	80064d4 <_printf_i+0x18c>
 80064ce:	065f      	lsls	r7, r3, #25
 80064d0:	bf48      	it	mi
 80064d2:	b2b6      	uxthmi	r6, r6
 80064d4:	07df      	lsls	r7, r3, #31
 80064d6:	bf48      	it	mi
 80064d8:	f043 0320 	orrmi.w	r3, r3, #32
 80064dc:	6029      	str	r1, [r5, #0]
 80064de:	bf48      	it	mi
 80064e0:	6023      	strmi	r3, [r4, #0]
 80064e2:	b91e      	cbnz	r6, 80064ec <_printf_i+0x1a4>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	f023 0320 	bic.w	r3, r3, #32
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	2310      	movs	r3, #16
 80064ee:	e7a7      	b.n	8006440 <_printf_i+0xf8>
 80064f0:	4824      	ldr	r0, [pc, #144]	; (8006584 <_printf_i+0x23c>)
 80064f2:	e7e4      	b.n	80064be <_printf_i+0x176>
 80064f4:	4615      	mov	r5, r2
 80064f6:	e7bd      	b.n	8006474 <_printf_i+0x12c>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	6826      	ldr	r6, [r4, #0]
 80064fc:	6961      	ldr	r1, [r4, #20]
 80064fe:	1d18      	adds	r0, r3, #4
 8006500:	6028      	str	r0, [r5, #0]
 8006502:	0635      	lsls	r5, r6, #24
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	d501      	bpl.n	800650c <_printf_i+0x1c4>
 8006508:	6019      	str	r1, [r3, #0]
 800650a:	e002      	b.n	8006512 <_printf_i+0x1ca>
 800650c:	0670      	lsls	r0, r6, #25
 800650e:	d5fb      	bpl.n	8006508 <_printf_i+0x1c0>
 8006510:	8019      	strh	r1, [r3, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	6123      	str	r3, [r4, #16]
 8006516:	4615      	mov	r5, r2
 8006518:	e7bc      	b.n	8006494 <_printf_i+0x14c>
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	1d1a      	adds	r2, r3, #4
 800651e:	602a      	str	r2, [r5, #0]
 8006520:	681d      	ldr	r5, [r3, #0]
 8006522:	6862      	ldr	r2, [r4, #4]
 8006524:	2100      	movs	r1, #0
 8006526:	4628      	mov	r0, r5
 8006528:	f7f9 feea 	bl	8000300 <memchr>
 800652c:	b108      	cbz	r0, 8006532 <_printf_i+0x1ea>
 800652e:	1b40      	subs	r0, r0, r5
 8006530:	6060      	str	r0, [r4, #4]
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	2300      	movs	r3, #0
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653c:	e7aa      	b.n	8006494 <_printf_i+0x14c>
 800653e:	6923      	ldr	r3, [r4, #16]
 8006540:	462a      	mov	r2, r5
 8006542:	4649      	mov	r1, r9
 8006544:	4640      	mov	r0, r8
 8006546:	47d0      	blx	sl
 8006548:	3001      	adds	r0, #1
 800654a:	d0ad      	beq.n	80064a8 <_printf_i+0x160>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	079b      	lsls	r3, r3, #30
 8006550:	d413      	bmi.n	800657a <_printf_i+0x232>
 8006552:	68e0      	ldr	r0, [r4, #12]
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	4298      	cmp	r0, r3
 8006558:	bfb8      	it	lt
 800655a:	4618      	movlt	r0, r3
 800655c:	e7a6      	b.n	80064ac <_printf_i+0x164>
 800655e:	2301      	movs	r3, #1
 8006560:	4632      	mov	r2, r6
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	47d0      	blx	sl
 8006568:	3001      	adds	r0, #1
 800656a:	d09d      	beq.n	80064a8 <_printf_i+0x160>
 800656c:	3501      	adds	r5, #1
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	9903      	ldr	r1, [sp, #12]
 8006572:	1a5b      	subs	r3, r3, r1
 8006574:	42ab      	cmp	r3, r5
 8006576:	dcf2      	bgt.n	800655e <_printf_i+0x216>
 8006578:	e7eb      	b.n	8006552 <_printf_i+0x20a>
 800657a:	2500      	movs	r5, #0
 800657c:	f104 0619 	add.w	r6, r4, #25
 8006580:	e7f5      	b.n	800656e <_printf_i+0x226>
 8006582:	bf00      	nop
 8006584:	080068cd 	.word	0x080068cd
 8006588:	080068de 	.word	0x080068de

0800658c <memmove>:
 800658c:	4288      	cmp	r0, r1
 800658e:	b510      	push	{r4, lr}
 8006590:	eb01 0402 	add.w	r4, r1, r2
 8006594:	d902      	bls.n	800659c <memmove+0x10>
 8006596:	4284      	cmp	r4, r0
 8006598:	4623      	mov	r3, r4
 800659a:	d807      	bhi.n	80065ac <memmove+0x20>
 800659c:	1e43      	subs	r3, r0, #1
 800659e:	42a1      	cmp	r1, r4
 80065a0:	d008      	beq.n	80065b4 <memmove+0x28>
 80065a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065aa:	e7f8      	b.n	800659e <memmove+0x12>
 80065ac:	4402      	add	r2, r0
 80065ae:	4601      	mov	r1, r0
 80065b0:	428a      	cmp	r2, r1
 80065b2:	d100      	bne.n	80065b6 <memmove+0x2a>
 80065b4:	bd10      	pop	{r4, pc}
 80065b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065be:	e7f7      	b.n	80065b0 <memmove+0x24>

080065c0 <_realloc_r>:
 80065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c4:	4680      	mov	r8, r0
 80065c6:	4614      	mov	r4, r2
 80065c8:	460e      	mov	r6, r1
 80065ca:	b921      	cbnz	r1, 80065d6 <_realloc_r+0x16>
 80065cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	4611      	mov	r1, r2
 80065d2:	f7ff bba9 	b.w	8005d28 <_malloc_r>
 80065d6:	b92a      	cbnz	r2, 80065e4 <_realloc_r+0x24>
 80065d8:	f7ff fca4 	bl	8005f24 <_free_r>
 80065dc:	4625      	mov	r5, r4
 80065de:	4628      	mov	r0, r5
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	f000 f81b 	bl	800661e <_malloc_usable_size_r>
 80065e8:	4284      	cmp	r4, r0
 80065ea:	4607      	mov	r7, r0
 80065ec:	d802      	bhi.n	80065f4 <_realloc_r+0x34>
 80065ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065f2:	d812      	bhi.n	800661a <_realloc_r+0x5a>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4640      	mov	r0, r8
 80065f8:	f7ff fb96 	bl	8005d28 <_malloc_r>
 80065fc:	4605      	mov	r5, r0
 80065fe:	2800      	cmp	r0, #0
 8006600:	d0ed      	beq.n	80065de <_realloc_r+0x1e>
 8006602:	42bc      	cmp	r4, r7
 8006604:	4622      	mov	r2, r4
 8006606:	4631      	mov	r1, r6
 8006608:	bf28      	it	cs
 800660a:	463a      	movcs	r2, r7
 800660c:	f7ff fc7c 	bl	8005f08 <memcpy>
 8006610:	4631      	mov	r1, r6
 8006612:	4640      	mov	r0, r8
 8006614:	f7ff fc86 	bl	8005f24 <_free_r>
 8006618:	e7e1      	b.n	80065de <_realloc_r+0x1e>
 800661a:	4635      	mov	r5, r6
 800661c:	e7df      	b.n	80065de <_realloc_r+0x1e>

0800661e <_malloc_usable_size_r>:
 800661e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006622:	1f18      	subs	r0, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfbc      	itt	lt
 8006628:	580b      	ldrlt	r3, [r1, r0]
 800662a:	18c0      	addlt	r0, r0, r3
 800662c:	4770      	bx	lr
	...

08006630 <_init>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr

0800663c <_fini>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr
