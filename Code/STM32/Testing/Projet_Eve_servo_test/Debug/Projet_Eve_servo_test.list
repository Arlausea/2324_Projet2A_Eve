
Projet_Eve_servo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b0  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  24000010  08005df4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000158  08005df4  00020158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010bd5  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002260  00000000  00000000  00030c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000af0  00000000  00000000  00032eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000858  00000000  00000000  000339a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f9aa  00000000  00000000  00034200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010704  00000000  00000000  00063baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00132ccb  00000000  00000000  000742ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002bfc  00000000  00000000  001a6f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001a9b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005b48 	.word	0x08005b48

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	08005b48 	.word	0x08005b48

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, size_t data_blk_size)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005f8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005fc:	6019      	str	r1, [r3, #0]
 80005fe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000602:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800060c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000610:	4602      	mov	r2, r0
 8000612:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000614:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000618:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <dyn2_crc+0xd4>)
 800061e:	4618      	mov	r0, r3
 8000620:	4611      	mov	r1, r2
 8000622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000626:	461a      	mov	r2, r3
 8000628:	f005 fa80 	bl	8005b2c <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 800062c:	2300      	movs	r3, #0
 800062e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000632:	e031      	b.n	8000698 <dyn2_crc+0xac>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000634:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000638:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29a      	uxth	r2, r3
 8000642:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000646:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800064a:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800064e:	6809      	ldr	r1, [r1, #0]
 8000650:	440b      	add	r3, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4053      	eors	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000660:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000664:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	b21a      	sxth	r2, r3
 800066e:	f8b7 1214 	ldrh.w	r1, [r7, #532]	; 0x214
 8000672:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800067a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800067e:	b21b      	sxth	r3, r3
 8000680:	4053      	eors	r3, r2
 8000682:	b21a      	sxth	r2, r3
 8000684:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000688:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800068c:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800068e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000692:	3301      	adds	r3, #1
 8000694:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000698:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 800069c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80006a0:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d8c4      	bhi.n	8000634 <dyn2_crc+0x48>
	}
	return crc_accum;
 80006aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006ae:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006b2:	881b      	ldrh	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	08005b60 	.word	0x08005b60

080006c4 <dyn2_append_crc>:
uint8_t* dyn2_append_crc(uint8_t* instruction,uint16_t bufferSize){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
		return NULL;
	}

	memcpy(instruction_sent, instruction, bufferSize);
	*/
	unsigned short crc = dyn2_crc(0, instruction, bufferSize - 2);
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	3b02      	subs	r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff ff87 	bl	80005ec <dyn2_crc>
 80006de:	4603      	mov	r3, r0
 80006e0:	81fb      	strh	r3, [r7, #14]
	unsigned char crc_l = crc & 0x00FF;
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	737b      	strb	r3, [r7, #13]
	unsigned char crc_h = (crc >> 8) & 0x00FF;
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	733b      	strb	r3, [r7, #12]

	instruction[bufferSize - 2] = crc_l;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	3b02      	subs	r3, #2
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	7b7a      	ldrb	r2, [r7, #13]
 80006f8:	701a      	strb	r2, [r3, #0]
	instruction[bufferSize - 1] = crc_h;
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	7b3a      	ldrb	r2, [r7, #12]
 8000704:	701a      	strb	r2, [r3, #0]

	return instruction;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <dyn2_send>:
	// Send the string through UART
	HAL_UART_Transmit(&huart3, (uint8_t*)arrayString, strlen(arrayString), HAL_MAX_DELAY);
}

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
int dyn2_send(uint8_t* buffer,uint16_t size){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]

	//dyn2_debug_sendArrayAsString(buffer_crc, size); // for debuging purposes

	HAL_HalfDuplex_EnableTransmitter(&huart4);
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <dyn2_send+0x3c>)
 800071e:	f003 ff91 	bl	8004644 <HAL_HalfDuplex_EnableTransmitter>

	HAL_UART_Transmit(&huart4, buffer, size, TIMEOUT);
 8000722:	887a      	ldrh	r2, [r7, #2]
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <dyn2_send+0x3c>)
 800072a:	f003 fefd 	bl	8004528 <HAL_UART_Transmit>
	// Wait until UART transmission is complete
	while (HAL_UART_GetState(&huart4) != HAL_UART_STATE_READY);
 800072e:	bf00      	nop
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <dyn2_send+0x3c>)
 8000732:	f004 f82f 	bl	8004794 <HAL_UART_GetState>
 8000736:	4603      	mov	r3, r0
 8000738:	2b20      	cmp	r3, #32
 800073a:	d1f9      	bne.n	8000730 <dyn2_send+0x20>
	HAL_HalfDuplex_EnableReceiver(&huart4);
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <dyn2_send+0x3c>)
 800073e:	f003 ffd5 	bl	80046ec <HAL_HalfDuplex_EnableReceiver>

	return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2400002c 	.word	0x2400002c

08000750 <dyn2_led>:
	uint16_t size = (uint16_t) NbOfElements(Dynamixel_PING);

	dyn2_send(Dynamixel_PING,size);
}
// Status 1 : Led ON, status 0 : Led OFF
int dyn2_led(MOTOR motor,int status){
 8000750:	b084      	sub	sp, #16
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	f107 0c20 	add.w	ip, r7, #32
 800075c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//			/*débutparam, address 65:*/ ,0x41,0x00
//			/*value in the address*/,0x01
//			/*on calcule le CRC après */,0x00,0x00};
	uint8_t DYN2_LED[13];
	// HEADER
	DYN2_LED[0] = HEADER_1;
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <dyn2_led+0xb4>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	703b      	strb	r3, [r7, #0]
	DYN2_LED[1] = HEADER_2;
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <dyn2_led+0xb8>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	707b      	strb	r3, [r7, #1]
	DYN2_LED[2] = HEADER_3;
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <dyn2_led+0xbc>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	70bb      	strb	r3, [r7, #2]
	DYN2_LED[3] = HEADER_4;
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <dyn2_led+0xc0>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	70fb      	strb	r3, [r7, #3]
	// ID
	DYN2_LED[4]= motor.id;
 8000778:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800077c:	b2db      	uxtb	r3, r3
 800077e:	713b      	strb	r3, [r7, #4]
	// LENGTH
	DYN2_LED[5]= NbOfElements(DYN2_LED)- 7; // tkt ca marche
 8000780:	2306      	movs	r3, #6
 8000782:	717b      	strb	r3, [r7, #5]
	DYN2_LED[6]= 0x00;
 8000784:	2300      	movs	r3, #0
 8000786:	71bb      	strb	r3, [r7, #6]
	// INSTRUCTION
	DYN2_LED[7]= WRITE;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <dyn2_led+0xc4>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	71fb      	strb	r3, [r7, #7]
	// PARAMETERS
	// ADDRRESS

	if (motor.model==XL320) {
 800078e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d102      	bne.n	800079c <dyn2_led+0x4c>
		DYN2_LED[8]= XL320_ADDRESS_LED;
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <dyn2_led+0xc8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	723b      	strb	r3, [r7, #8]
	}
	if (motor.model==XL430) {
 800079c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <dyn2_led+0x5a>
		DYN2_LED[8]= XL430_ADDRESS_LED;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <dyn2_led+0xcc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	723b      	strb	r3, [r7, #8]
	}
	DYN2_LED[9]= 0x00;
 80007aa:	2300      	movs	r3, #0
 80007ac:	727b      	strb	r3, [r7, #9]
	// VALUE
	switch(status){
 80007ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <dyn2_led+0x70>
 80007b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d004      	beq.n	80007c8 <dyn2_led+0x78>
 80007be:	e007      	b.n	80007d0 <dyn2_led+0x80>
	case 0:
		DYN2_LED[10]=LED_OFF;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <dyn2_led+0xd0>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	72bb      	strb	r3, [r7, #10]
		break;
 80007c6:	e006      	b.n	80007d6 <dyn2_led+0x86>
	case 1:
		DYN2_LED[10]=LED_ON;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <dyn2_led+0xd4>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	72bb      	strb	r3, [r7, #10]
		break;
 80007ce:	e002      	b.n	80007d6 <dyn2_led+0x86>
	default :
		return ERROR_LED_VALUE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <dyn2_led+0xd8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	e00e      	b.n	80007f4 <dyn2_led+0xa4>
	}
	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_LED);
 80007d6:	230d      	movs	r3, #13
 80007d8:	82fb      	strh	r3, [r7, #22]
	uint8_t* DYN2_LED_CRC = dyn2_append_crc(DYN2_LED,size);
 80007da:	8afa      	ldrh	r2, [r7, #22]
 80007dc:	463b      	mov	r3, r7
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff6f 	bl	80006c4 <dyn2_append_crc>
 80007e6:	6138      	str	r0, [r7, #16]

	dyn2_send(DYN2_LED_CRC,size);
 80007e8:	8afb      	ldrh	r3, [r7, #22]
 80007ea:	4619      	mov	r1, r3
 80007ec:	6938      	ldr	r0, [r7, #16]
 80007ee:	f7ff ff8f 	bl	8000710 <dyn2_send>

	return 0;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007fe:	b004      	add	sp, #16
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	08005d85 	.word	0x08005d85
 8000808:	08005d86 	.word	0x08005d86
 800080c:	08005d87 	.word	0x08005d87
 8000810:	08005d88 	.word	0x08005d88
 8000814:	08005d84 	.word	0x08005d84
 8000818:	08005d8d 	.word	0x08005d8d
 800081c:	08005d8a 	.word	0x08005d8a
 8000820:	08005d9b 	.word	0x08005d9b
 8000824:	08005d99 	.word	0x08005d99
 8000828:	08005d90 	.word	0x08005d90

0800082c <dyn2_torque>:

// TORQUE_ON => writing in EEPROM is IMPOSSIBLE and the motor can rotate, TORQUE_OFF =>
int dyn2_torque(MOTOR motor,int mode){
 800082c:	b084      	sub	sp, #16
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	f107 0c20 	add.w	ip, r7, #32
 8000838:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t DYN2_TORQUE[13];
	// HEADER
	DYN2_TORQUE[0] = HEADER_1;
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <dyn2_torque+0xb4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	703b      	strb	r3, [r7, #0]
	DYN2_TORQUE[1] = HEADER_2;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <dyn2_torque+0xb8>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	707b      	strb	r3, [r7, #1]
	DYN2_TORQUE[2] = HEADER_3;
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <dyn2_torque+0xbc>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	70bb      	strb	r3, [r7, #2]
	DYN2_TORQUE[3] = HEADER_4;
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <dyn2_torque+0xc0>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	70fb      	strb	r3, [r7, #3]
	// ID
	DYN2_TORQUE[4]= motor.id;
 8000854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000858:	b2db      	uxtb	r3, r3
 800085a:	713b      	strb	r3, [r7, #4]
	// LENGTH
	DYN2_TORQUE[5]= NbOfElements(DYN2_TORQUE)- 7; // tkt ça marche
 800085c:	2306      	movs	r3, #6
 800085e:	717b      	strb	r3, [r7, #5]
	DYN2_TORQUE[6]= 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	71bb      	strb	r3, [r7, #6]
	// INSTRUCTION
	DYN2_TORQUE[7]= WRITE;
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <dyn2_torque+0xc4>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	71fb      	strb	r3, [r7, #7]
	// PARAMETERS
	// ADDRRESS
	if (motor.model == XL430) {
 800086a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d102      	bne.n	8000878 <dyn2_torque+0x4c>
		DYN2_TORQUE[8]= XL430_ADDRESS_TORQUE;
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <dyn2_torque+0xc8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	723b      	strb	r3, [r7, #8]
	}
	if (motor.model == XL320) {
 8000878:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d102      	bne.n	8000886 <dyn2_torque+0x5a>
		DYN2_TORQUE[8]= XL320_ADDRESS_TORQUE;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <dyn2_torque+0xcc>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	723b      	strb	r3, [r7, #8]
	}
	DYN2_TORQUE[9]= 0x00;
 8000886:	2300      	movs	r3, #0
 8000888:	727b      	strb	r3, [r7, #9]
	// VALUE
	switch(mode){
 800088a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d004      	beq.n	800089c <dyn2_torque+0x70>
 8000892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d004      	beq.n	80008a4 <dyn2_torque+0x78>
 800089a:	e007      	b.n	80008ac <dyn2_torque+0x80>
	case 0:
		DYN2_TORQUE[10]=TORQUE_OFF;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <dyn2_torque+0xd0>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	72bb      	strb	r3, [r7, #10]
		break;
 80008a2:	e006      	b.n	80008b2 <dyn2_torque+0x86>
	case 1:
		DYN2_TORQUE[10]=TORQUE_ON;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <dyn2_torque+0xd4>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	72bb      	strb	r3, [r7, #10]
		break;
 80008aa:	e002      	b.n	80008b2 <dyn2_torque+0x86>
	default :
		return ERROR_TORQUE_VALUE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <dyn2_torque+0xd8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	e00e      	b.n	80008d0 <dyn2_torque+0xa4>
	}

	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_TORQUE);
 80008b2:	230d      	movs	r3, #13
 80008b4:	82fb      	strh	r3, [r7, #22]
	uint8_t* DYN2_TORQUE_CRC = dyn2_append_crc(DYN2_TORQUE,size);
 80008b6:	8afa      	ldrh	r2, [r7, #22]
 80008b8:	463b      	mov	r3, r7
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff01 	bl	80006c4 <dyn2_append_crc>
 80008c2:	6138      	str	r0, [r7, #16]

	dyn2_send(DYN2_TORQUE_CRC,size);
 80008c4:	8afb      	ldrh	r3, [r7, #22]
 80008c6:	4619      	mov	r1, r3
 80008c8:	6938      	ldr	r0, [r7, #16]
 80008ca:	f7ff ff21 	bl	8000710 <dyn2_send>
	return 0;
 80008ce:	2300      	movs	r3, #0

}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008da:	b004      	add	sp, #16
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	08005d85 	.word	0x08005d85
 80008e4:	08005d86 	.word	0x08005d86
 80008e8:	08005d87 	.word	0x08005d87
 80008ec:	08005d88 	.word	0x08005d88
 80008f0:	08005d84 	.word	0x08005d84
 80008f4:	08005d89 	.word	0x08005d89
 80008f8:	08005d8c 	.word	0x08005d8c
 80008fc:	08005d9a 	.word	0x08005d9a
 8000900:	08005d98 	.word	0x08005d98
 8000904:	08005d94 	.word	0x08005d94

08000908 <dyn2_position>:

void dyn2_position(MOTOR motor,float angleInDeg) {
 8000908:	b084      	sub	sp, #16
 800090a:	b580      	push	{r7, lr}
 800090c:	b090      	sub	sp, #64	; 0x40
 800090e:	af00      	add	r7, sp, #0
 8000910:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8000914:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000918:	ed87 0a01 	vstr	s0, [r7, #4]
	if (motor.model == XL430) {
 800091c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000920:	2b00      	cmp	r3, #0
 8000922:	d157      	bne.n	80009d4 <dyn2_position+0xcc>
		// Value range: 0 to 4095
		uint8_t DYN2_POSITION[16];
		// HEADER
		DYN2_POSITION[0] = HEADER_1;
 8000924:	4b5a      	ldr	r3, [pc, #360]	; (8000a90 <dyn2_position+0x188>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	763b      	strb	r3, [r7, #24]
		DYN2_POSITION[1] = HEADER_2;
 800092a:	4b5a      	ldr	r3, [pc, #360]	; (8000a94 <dyn2_position+0x18c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	767b      	strb	r3, [r7, #25]
		DYN2_POSITION[2] = HEADER_3;
 8000930:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <dyn2_position+0x190>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	76bb      	strb	r3, [r7, #26]
		DYN2_POSITION[3] = HEADER_4;
 8000936:	4b59      	ldr	r3, [pc, #356]	; (8000a9c <dyn2_position+0x194>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	76fb      	strb	r3, [r7, #27]
		// ID
		DYN2_POSITION[4]= motor.id;
 800093c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000940:	b2db      	uxtb	r3, r3
 8000942:	773b      	strb	r3, [r7, #28]
		// LENGTH
		DYN2_POSITION[5]= NbOfElements(DYN2_POSITION)- 7; // tkt ca marche
 8000944:	2309      	movs	r3, #9
 8000946:	777b      	strb	r3, [r7, #29]
		DYN2_POSITION[6]= 0x00;
 8000948:	2300      	movs	r3, #0
 800094a:	77bb      	strb	r3, [r7, #30]
		// INSTRUCTION
		DYN2_POSITION[7]= WRITE;
 800094c:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <dyn2_position+0x198>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	77fb      	strb	r3, [r7, #31]
		// PARAMETERS
		// VALUE

		DYN2_POSITION[8]= XL430_ADDRESS_POSITION;
 8000952:	4b54      	ldr	r3, [pc, #336]	; (8000aa4 <dyn2_position+0x19c>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	f887 3020 	strb.w	r3, [r7, #32]
		DYN2_POSITION[9]= 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if(angleInDeg>360){
 8000960:	edd7 7a01 	vldr	s15, [r7, #4]
 8000964:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000aa8 <dyn2_position+0x1a0>
 8000968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800096c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000970:	dd01      	ble.n	8000976 <dyn2_position+0x6e>
			angleInDeg = 360;
 8000972:	4b4e      	ldr	r3, [pc, #312]	; (8000aac <dyn2_position+0x1a4>)
 8000974:	607b      	str	r3, [r7, #4]
		}
		int Angle_Value =(int) (angleInDeg/0.088);
 8000976:	edd7 7a01 	vldr	s15, [r7, #4]
 800097a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800097e:	ed9f 5b40 	vldr	d5, [pc, #256]	; 8000a80 <dyn2_position+0x178>
 8000982:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000986:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800098a:	ee17 3a90 	vmov	r3, s15
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c

		DYN2_POSITION[10] = (Angle_Value >> 24) & 0xFF; // Extract the most significant byte
 8000990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000992:	0e1b      	lsrs	r3, r3, #24
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		DYN2_POSITION[11] = (Angle_Value >> 16) & 0xFF; // Extract the second most significant byte
 800099a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800099c:	141b      	asrs	r3, r3, #16
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		DYN2_POSITION[12] = (Angle_Value >> 8) & 0xFF;  // Extract the third most significant byte
 80009a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DYN2_POSITION[13] = Angle_Value & 0xFF;          // Extract the least significant byte
 80009ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		// SENDING
		uint16_t size = (uint16_t) NbOfElements(DYN2_POSITION);
 80009b6:	2310      	movs	r3, #16
 80009b8:	877b      	strh	r3, [r7, #58]	; 0x3a
		uint8_t* DYN2_POSITION_CRC = dyn2_append_crc(DYN2_POSITION,size);
 80009ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	4611      	mov	r1, r2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fe7e 	bl	80006c4 <dyn2_append_crc>
 80009c8:	6378      	str	r0, [r7, #52]	; 0x34

		dyn2_send(DYN2_POSITION_CRC,size);
 80009ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80009cc:	4619      	mov	r1, r3
 80009ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80009d0:	f7ff fe9e 	bl	8000710 <dyn2_send>
	}
	if (motor.model == XL320) {
 80009d4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d149      	bne.n	8000a70 <dyn2_position+0x168>
		// Value range: 0 to 1023
		uint8_t DYN2_POSITION[14];
		// HEADER
		DYN2_POSITION[0] = HEADER_1;
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <dyn2_position+0x188>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	723b      	strb	r3, [r7, #8]
		DYN2_POSITION[1] = HEADER_2;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <dyn2_position+0x18c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	727b      	strb	r3, [r7, #9]
		DYN2_POSITION[2] = HEADER_3;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <dyn2_position+0x190>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	72bb      	strb	r3, [r7, #10]
		DYN2_POSITION[3] = HEADER_4;
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <dyn2_position+0x194>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	72fb      	strb	r3, [r7, #11]
		// ID
		DYN2_POSITION[4]= motor.id;
 80009f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	733b      	strb	r3, [r7, #12]
		// LENGTH
		DYN2_POSITION[5]= NbOfElements(DYN2_POSITION)- 7; // tkt ca marche
 80009fc:	2307      	movs	r3, #7
 80009fe:	737b      	strb	r3, [r7, #13]
		DYN2_POSITION[6]= 0x00;
 8000a00:	2300      	movs	r3, #0
 8000a02:	73bb      	strb	r3, [r7, #14]
		// INSTRUCTION
		DYN2_POSITION[7]= WRITE;
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <dyn2_position+0x198>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	73fb      	strb	r3, [r7, #15]
		// PARAMETERS
		// ADDRRESS

		// VALUE

		DYN2_POSITION[8]= XL320_ADDRESS_POSITION;
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <dyn2_position+0x1a8>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	743b      	strb	r3, [r7, #16]
		DYN2_POSITION[9]= 0x00;
 8000a10:	2300      	movs	r3, #0
 8000a12:	747b      	strb	r3, [r7, #17]
		if(angleInDeg>300){
 8000a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a18:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000ab4 <dyn2_position+0x1ac>
 8000a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a24:	dd01      	ble.n	8000a2a <dyn2_position+0x122>
			angleInDeg = 300;
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <dyn2_position+0x1b0>)
 8000a28:	607b      	str	r3, [r7, #4]
		}
		int Angle_Value =(int) (angleInDeg/0.29);
 8000a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a2e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a32:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000a88 <dyn2_position+0x180>
 8000a36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a3e:	ee17 3a90 	vmov	r3, s15
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30


		DYN2_POSITION[10] = (Angle_Value >> 8) & 0xFF;
 8000a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a46:	121b      	asrs	r3, r3, #8
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	74bb      	strb	r3, [r7, #18]
		DYN2_POSITION[11] = Angle_Value & 0xFF;
 8000a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	74fb      	strb	r3, [r7, #19]
		// SENDING
		uint16_t size = (uint16_t) NbOfElements(DYN2_POSITION);
 8000a52:	230e      	movs	r3, #14
 8000a54:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint8_t* DYN2_POSITION_CRC = dyn2_append_crc(DYN2_POSITION,size);
 8000a56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe30 	bl	80006c4 <dyn2_append_crc>
 8000a64:	62b8      	str	r0, [r7, #40]	; 0x28

		dyn2_send(DYN2_POSITION_CRC,size);
 8000a66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a6c:	f7ff fe50 	bl	8000710 <dyn2_send>
	}

}
 8000a70:	bf00      	nop
 8000a72:	3740      	adds	r7, #64	; 0x40
 8000a74:	46bd      	mov	sp, r7
 8000a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a7a:	b004      	add	sp, #16
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	020c49ba 	.word	0x020c49ba
 8000a84:	3fb6872b 	.word	0x3fb6872b
 8000a88:	28f5c28f 	.word	0x28f5c28f
 8000a8c:	3fd28f5c 	.word	0x3fd28f5c
 8000a90:	08005d85 	.word	0x08005d85
 8000a94:	08005d86 	.word	0x08005d86
 8000a98:	08005d87 	.word	0x08005d87
 8000a9c:	08005d88 	.word	0x08005d88
 8000aa0:	08005d84 	.word	0x08005d84
 8000aa4:	08005d8b 	.word	0x08005d8b
 8000aa8:	43b40000 	.word	0x43b40000
 8000aac:	43b40000 	.word	0x43b40000
 8000ab0:	08005d8e 	.word	0x08005d8e
 8000ab4:	43960000 	.word	0x43960000
 8000ab8:	43960000 	.word	0x43960000

08000abc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac8:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000ad4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000ae2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000af2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000b00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x6c>)
 8000b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]

}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	58024400 	.word	0x58024400

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0f6      	sub	sp, #472	; 0x1d8
 8000b30:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f000 fb5f 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b36:	f000 f897 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f7ff ffbf 	bl	8000abc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b3e:	f000 fa15 	bl	8000f6c <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000b42:	f000 f9c7 	bl	8000ed4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  MOTOR XL430_1 = {
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8000b4c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000b54:	4a3d      	ldr	r2, [pc, #244]	; (8000c4c <main+0x120>)
 8000b56:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	2294      	movs	r2, #148	; 0x94
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 ffe4 	bl	8005b2c <memcpy>
 8000b64:	2301      	movs	r3, #1
 8000b66:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
      .baudrate = 57600,
      .uart = huart4, // Assuming huart4 is already defined elsewhere
      .id = 1
  };

  MOTOR XL320_1 = {
 8000b6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b6e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b7a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000b7e:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <main+0x124>)
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b86:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000b8a:	4a30      	ldr	r2, [pc, #192]	; (8000c4c <main+0x120>)
 8000b8c:	3308      	adds	r3, #8
 8000b8e:	4611      	mov	r1, r2
 8000b90:	2294      	movs	r2, #148	; 0x94
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 ffca 	bl	8005b2c <memcpy>
 8000b98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      .model = XL320,
      .baudrate = 1000000,
      .uart = huart4, // Assuming huart4 is already defined elsewhere
      .id = 1
  };
  dyn2_torque(XL430_1,TORQUE_ON);
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <main+0x128>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	9324      	str	r3, [sp, #144]	; 0x90
 8000bac:	4668      	mov	r0, sp
 8000bae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000bb2:	2290      	movs	r2, #144	; 0x90
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f004 ffb9 	bl	8005b2c <memcpy>
 8000bba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc0:	f7ff fe34 	bl	800082c <dyn2_torque>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  dyn2_led(XL430_1,LED_ON);
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <main+0x12c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	9324      	str	r3, [sp, #144]	; 0x90
 8000bca:	4668      	mov	r0, sp
 8000bcc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000bd0:	2290      	movs	r2, #144	; 0x90
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f004 ffaa 	bl	8005b2c <memcpy>
 8000bd8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bde:	f7ff fdb7 	bl	8000750 <dyn2_led>
	  dyn2_position(XL430_1,90);
 8000be2:	4668      	mov	r0, sp
 8000be4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000be8:	2290      	movs	r2, #144	; 0x90
 8000bea:	4619      	mov	r1, r3
 8000bec:	f004 ff9e 	bl	8005b2c <memcpy>
 8000bf0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8000c5c <main+0x130>
 8000bfa:	f7ff fe85 	bl	8000908 <dyn2_position>
	  HAL_Delay(1000);
 8000bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c02:	f000 fb89 	bl	8001318 <HAL_Delay>
	  dyn2_led(XL430_1,LED_OFF);
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <main+0x134>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	9324      	str	r3, [sp, #144]	; 0x90
 8000c0c:	4668      	mov	r0, sp
 8000c0e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000c12:	2290      	movs	r2, #144	; 0x90
 8000c14:	4619      	mov	r1, r3
 8000c16:	f004 ff89 	bl	8005b2c <memcpy>
 8000c1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c20:	f7ff fd96 	bl	8000750 <dyn2_led>
	  dyn2_position(XL430_1,0);
 8000c24:	4668      	mov	r0, sp
 8000c26:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000c2a:	2290      	movs	r2, #144	; 0x90
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f004 ff7d 	bl	8005b2c <memcpy>
 8000c32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c38:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000c64 <main+0x138>
 8000c3c:	f7ff fe64 	bl	8000908 <dyn2_position>

	  HAL_Delay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f000 fb68 	bl	8001318 <HAL_Delay>
	  dyn2_led(XL430_1,LED_ON);
 8000c48:	e7bc      	b.n	8000bc4 <main+0x98>
 8000c4a:	bf00      	nop
 8000c4c:	2400002c 	.word	0x2400002c
 8000c50:	000f4240 	.word	0x000f4240
 8000c54:	08005d98 	.word	0x08005d98
 8000c58:	08005d99 	.word	0x08005d99
 8000c5c:	42b40000 	.word	0x42b40000
 8000c60:	08005d9b 	.word	0x08005d9b
 8000c64:	00000000 	.word	0x00000000

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09c      	sub	sp, #112	; 0x70
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	224c      	movs	r2, #76	; 0x4c
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 ff2c 	bl	8005ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2220      	movs	r2, #32
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 ff26 	bl	8005ad4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <SystemClock_Config+0xe0>)
 8000c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c92:	2004      	movs	r0, #4
 8000c94:	f000 fdf8 	bl	8001888 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <SystemClock_Config+0xe4>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <SystemClock_Config+0xe4>)
 8000ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <SystemClock_Config+0xe4>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb4:	bf00      	nop
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <SystemClock_Config+0xe4>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc2:	d1f8      	bne.n	8000cb6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000cda:	2318      	movs	r3, #24
 8000cdc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cea:	230c      	movs	r3, #12
 8000cec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fe1e 	bl	800193c <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d06:	f000 f823 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	233f      	movs	r3, #63	; 0x3f
 8000d0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fa36 	bl	80021a0 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000d3a:	f000 f809 	bl	8000d50 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3770      	adds	r7, #112	; 0x70
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	58024800 	.word	0x58024800

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_MspInit+0x30>)
 8000d64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d68:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x30>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x30>)
 8000d74:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	58024400 	.word	0x58024400

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 fa7c 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de8:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <SystemInit+0xd0>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <SystemInit+0xd0>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <SystemInit+0xd4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d807      	bhi.n	8000e14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <SystemInit+0xd4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 030f 	bic.w	r3, r3, #15
 8000e0c:	4a2a      	ldr	r2, [pc, #168]	; (8000eb8 <SystemInit+0xd4>)
 8000e0e:	f043 0303 	orr.w	r3, r3, #3
 8000e12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <SystemInit+0xd8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <SystemInit+0xd8>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <SystemInit+0xd8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <SystemInit+0xd8>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4924      	ldr	r1, [pc, #144]	; (8000ebc <SystemInit+0xd8>)
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <SystemInit+0xdc>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <SystemInit+0xd4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d007      	beq.n	8000e4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <SystemInit+0xd4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 030f 	bic.w	r3, r3, #15
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <SystemInit+0xd4>)
 8000e48:	f043 0303 	orr.w	r3, r3, #3
 8000e4c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <SystemInit+0xd8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <SystemInit+0xd8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <SystemInit+0xd8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <SystemInit+0xd8>)
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <SystemInit+0xe0>)
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <SystemInit+0xd8>)
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <SystemInit+0xe4>)
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <SystemInit+0xd8>)
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <SystemInit+0xe8>)
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <SystemInit+0xd8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <SystemInit+0xd8>)
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <SystemInit+0xe8>)
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <SystemInit+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <SystemInit+0xd8>)
 8000e86:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <SystemInit+0xe8>)
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <SystemInit+0xd8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <SystemInit+0xd8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <SystemInit+0xd8>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <SystemInit+0xd8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <SystemInit+0xec>)
 8000ea4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ea8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	52002000 	.word	0x52002000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ec4:	02020200 	.word	0x02020200
 8000ec8:	01ff0000 	.word	0x01ff0000
 8000ecc:	01010280 	.word	0x01010280
 8000ed0:	52004000 	.word	0x52004000

08000ed4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_UART4_Init+0x90>)
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <MX_UART4_Init+0x94>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_UART4_Init+0x90>)
 8000ee0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ee4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_UART4_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_UART4_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_UART4_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_UART4_Init+0x90>)
 8000efa:	2208      	movs	r2, #8
 8000efc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f1e:	f003 faab 	bl	8004478 <HAL_HalfDuplex_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f28:	f7ff ff12 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f30:	f004 fd05 	bl	800593e <HAL_UARTEx_SetTxFifoThreshold>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f3a:	f7ff ff09 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f42:	f004 fd3a 	bl	80059ba <HAL_UARTEx_SetRxFifoThreshold>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f4c:	f7ff ff00 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_UART4_Init+0x90>)
 8000f52:	f004 fcbb 	bl	80058cc <HAL_UARTEx_DisableFifoMode>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f5c:	f7ff fef8 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2400002c 	.word	0x2400002c
 8000f68:	40004c00 	.word	0x40004c00

08000f6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <MX_USART3_UART_Init+0x94>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fb6:	f003 fa5f 	bl	8004478 <HAL_HalfDuplex_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fc0:	f7ff fec6 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fc8:	f004 fcb9 	bl	800593e <HAL_UARTEx_SetTxFifoThreshold>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fd2:	f7ff febd 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fda:	f004 fcee 	bl	80059ba <HAL_UARTEx_SetRxFifoThreshold>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe4:	f7ff feb4 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_USART3_UART_Init+0x90>)
 8000fea:	f004 fc6f 	bl	80058cc <HAL_UARTEx_DisableFifoMode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f7ff feac 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	240000c0 	.word	0x240000c0
 8001000:	40004800 	.word	0x40004800

08001004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0bc      	sub	sp, #240	; 0xf0
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	22c0      	movs	r2, #192	; 0xc0
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fd55 	bl	8005ad4 <memset>
  if(uartHandle->Instance==UART4)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a58      	ldr	r2, [pc, #352]	; (8001190 <HAL_UART_MspInit+0x18c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d146      	bne.n	80010c2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001034:	f04f 0202 	mov.w	r2, #2
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fc34 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001056:	f7ff fe7b 	bl	8000d50 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800105a:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <HAL_UART_MspInit+0x190>)
 800105c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001060:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <HAL_UART_MspInit+0x190>)
 8001062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001066:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800106a:	4b4a      	ldr	r3, [pc, #296]	; (8001194 <HAL_UART_MspInit+0x190>)
 800106c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	4b46      	ldr	r3, [pc, #280]	; (8001194 <HAL_UART_MspInit+0x190>)
 800107a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800107e:	4a45      	ldr	r2, [pc, #276]	; (8001194 <HAL_UART_MspInit+0x190>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001088:	4b42      	ldr	r3, [pc, #264]	; (8001194 <HAL_UART_MspInit+0x190>)
 800108a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109c:	2312      	movs	r3, #18
 800109e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010ae:	2308      	movs	r3, #8
 80010b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010b8:	4619      	mov	r1, r3
 80010ba:	4837      	ldr	r0, [pc, #220]	; (8001198 <HAL_UART_MspInit+0x194>)
 80010bc:	f000 fa34 	bl	8001528 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010c0:	e061      	b.n	8001186 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a35      	ldr	r2, [pc, #212]	; (800119c <HAL_UART_MspInit+0x198>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d15c      	bne.n	8001186 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010cc:	f04f 0202 	mov.w	r2, #2
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fbe8 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_UART_MspInit+0xee>
      Error_Handler();
 80010ee:	f7ff fe2f 	bl	8000d50 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <HAL_UART_MspInit+0x190>)
 80010f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <HAL_UART_MspInit+0x190>)
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_UART_MspInit+0x190>)
 8001104:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_UART_MspInit+0x190>)
 8001112:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <HAL_UART_MspInit+0x190>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_UART_MspInit+0x190>)
 8001122:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001136:	2312      	movs	r3, #18
 8001138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001148:	2307      	movs	r3, #7
 800114a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001152:	4619      	mov	r1, r3
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <HAL_UART_MspInit+0x194>)
 8001156:	f000 f9e7 	bl	8001528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 800115a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001174:	2307      	movs	r3, #7
 8001176:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_UART_MspInit+0x194>)
 8001182:	f000 f9d1 	bl	8001528 <HAL_GPIO_Init>
}
 8001186:	bf00      	nop
 8001188:	37f0      	adds	r7, #240	; 0xf0
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40004c00 	.word	0x40004c00
 8001194:	58024400 	.word	0x58024400
 8001198:	58020c00 	.word	0x58020c00
 800119c:	40004800 	.word	0x40004800

080011a0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a4:	f7ff fe1e 	bl	8000de4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f004 fc89 	bl	8005ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fcab 	bl	8000b2c <main>
  bx  lr
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80011dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011e0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80011e4:	08005de4 	.word	0x08005de4
  ldr r2, =_sbss
 80011e8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80011ec:	24000158 	.word	0x24000158

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f962 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001200:	f001 f984 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8001204:	4602      	mov	r2, r0
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_Init+0x68>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	4913      	ldr	r1, [pc, #76]	; (8001260 <HAL_Init+0x6c>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_Init+0x68>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_Init+0x6c>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_Init+0x70>)
 8001236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_Init+0x74>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f814 	bl	800126c <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e002      	b.n	8001254 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800124e:	f7ff fd85 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	58024400 	.word	0x58024400
 8001260:	08005d9c 	.word	0x08005d9c
 8001264:	24000004 	.word	0x24000004
 8001268:	24000000 	.word	0x24000000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e021      	b.n	80012c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_InitTick+0x64>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_InitTick+0x60>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f939 	bl	800150e <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f000 f911 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x68>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2400000c 	.word	0x2400000c
 80012d0:	24000000 	.word	0x24000000
 80012d4:	24000008 	.word	0x24000008

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2400000c 	.word	0x2400000c
 80012fc:	24000154 	.word	0x24000154

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	24000154 	.word	0x24000154

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff ffee 	bl	8001300 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffde 	bl	8001300 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2400000c 	.word	0x2400000c

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	4313      	orrs	r3, r2
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	05fa0000 	.word	0x05fa0000

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff47 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff5e 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff90 	bl	8001418 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5f 	bl	80013c4 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffb2 	bl	8001480 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <HAL_GPIO_Init+0x234>)
 8001538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800153a:	e194      	b.n	8001866 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8186 	beq.w	8001860 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d005      	beq.n	800156c <HAL_GPIO_Init+0x44>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d130      	bne.n	80015ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a2:	2201      	movs	r2, #1
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f003 0201 	and.w	r2, r3, #1
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d017      	beq.n	800160a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2203      	movs	r2, #3
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d123      	bne.n	800165e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	69b9      	ldr	r1, [r7, #24]
 800165a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0203 	and.w	r2, r3, #3
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80e0 	beq.w	8001860 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_GPIO_Init+0x238>)
 80016a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016a6:	4a2e      	ldr	r2, [pc, #184]	; (8001760 <HAL_GPIO_Init+0x238>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_GPIO_Init+0x238>)
 80016b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016be:	4a29      	ldr	r2, [pc, #164]	; (8001764 <HAL_GPIO_Init+0x23c>)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a20      	ldr	r2, [pc, #128]	; (8001768 <HAL_GPIO_Init+0x240>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d052      	beq.n	8001790 <HAL_GPIO_Init+0x268>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_GPIO_Init+0x244>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d031      	beq.n	8001756 <HAL_GPIO_Init+0x22e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <HAL_GPIO_Init+0x248>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d02b      	beq.n	8001752 <HAL_GPIO_Init+0x22a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_GPIO_Init+0x24c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d025      	beq.n	800174e <HAL_GPIO_Init+0x226>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_GPIO_Init+0x250>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_GPIO_Init+0x222>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_GPIO_Init+0x254>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x21e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_GPIO_Init+0x258>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x21a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_GPIO_Init+0x25c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x216>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_GPIO_Init+0x260>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x212>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_GPIO_Init+0x264>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x20e>
 8001732:	2309      	movs	r3, #9
 8001734:	e02d      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 8001736:	230a      	movs	r3, #10
 8001738:	e02b      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 800173a:	2308      	movs	r3, #8
 800173c:	e029      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 800173e:	2307      	movs	r3, #7
 8001740:	e027      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 8001742:	2306      	movs	r3, #6
 8001744:	e025      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 8001746:	2305      	movs	r3, #5
 8001748:	e023      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 800174a:	2304      	movs	r3, #4
 800174c:	e021      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 800174e:	2303      	movs	r3, #3
 8001750:	e01f      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 8001752:	2302      	movs	r3, #2
 8001754:	e01d      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 8001756:	2301      	movs	r3, #1
 8001758:	e01b      	b.n	8001792 <HAL_GPIO_Init+0x26a>
 800175a:	bf00      	nop
 800175c:	58000080 	.word	0x58000080
 8001760:	58024400 	.word	0x58024400
 8001764:	58000400 	.word	0x58000400
 8001768:	58020000 	.word	0x58020000
 800176c:	58020400 	.word	0x58020400
 8001770:	58020800 	.word	0x58020800
 8001774:	58020c00 	.word	0x58020c00
 8001778:	58021000 	.word	0x58021000
 800177c:	58021400 	.word	0x58021400
 8001780:	58021800 	.word	0x58021800
 8001784:	58021c00 	.word	0x58021c00
 8001788:	58022000 	.word	0x58022000
 800178c:	58022400 	.word	0x58022400
 8001790:	2300      	movs	r3, #0
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	f002 0203 	and.w	r2, r2, #3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4093      	lsls	r3, r2
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a2:	4938      	ldr	r1, [pc, #224]	; (8001884 <HAL_GPIO_Init+0x35c>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	3301      	adds	r3, #1
 8001864:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	f47f ae63 	bne.w	800153c <HAL_GPIO_Init+0x14>
  }
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	3724      	adds	r7, #36	; 0x24
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	58000400 	.word	0x58000400

08001888 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001890:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	2b06      	cmp	r3, #6
 800189a:	d00a      	beq.n	80018b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e040      	b.n	8001930 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e03e      	b.n	8001930 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80018ba:	491f      	ldr	r1, [pc, #124]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4313      	orrs	r3, r2
 80018c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018c2:	f7ff fd1d 	bl	8001300 <HAL_GetTick>
 80018c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018c8:	e009      	b.n	80018de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018ca:	f7ff fd19 	bl	8001300 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018d8:	d901      	bls.n	80018de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e028      	b.n	8001930 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ea:	d1ee      	bne.n	80018ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b1e      	cmp	r3, #30
 80018f0:	d008      	beq.n	8001904 <HAL_PWREx_ConfigSupply+0x7c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b2e      	cmp	r3, #46	; 0x2e
 80018f6:	d005      	beq.n	8001904 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b1d      	cmp	r3, #29
 80018fc:	d002      	beq.n	8001904 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b2d      	cmp	r3, #45	; 0x2d
 8001902:	d114      	bne.n	800192e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001904:	f7ff fcfc 	bl	8001300 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800190a:	e009      	b.n	8001920 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800190c:	f7ff fcf8 	bl	8001300 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800191a:	d901      	bls.n	8001920 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e007      	b.n	8001930 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_PWREx_ConfigSupply+0xb0>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d1ee      	bne.n	800190c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	58024800 	.word	0x58024800

0800193c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f000 bc1f 	b.w	800218e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80b3 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195e:	4b95      	ldr	r3, [pc, #596]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001968:	4b92      	ldr	r3, [pc, #584]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	2b10      	cmp	r3, #16
 8001972:	d007      	beq.n	8001984 <HAL_RCC_OscConfig+0x48>
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001976:	2b18      	cmp	r3, #24
 8001978:	d112      	bne.n	80019a0 <HAL_RCC_OscConfig+0x64>
 800197a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d10d      	bne.n	80019a0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8098 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x186>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8093 	bne.w	8001ac2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e3f6      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d106      	bne.n	80019b8 <HAL_RCC_OscConfig+0x7c>
 80019aa:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a81      	ldr	r2, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e058      	b.n	8001a6a <HAL_RCC_OscConfig+0x12e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0xaa>
 80019c0:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a7b      	ldr	r2, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a78      	ldr	r2, [pc, #480]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a75      	ldr	r2, [pc, #468]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e041      	b.n	8001a6a <HAL_RCC_OscConfig+0x12e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ee:	d112      	bne.n	8001a16 <HAL_RCC_OscConfig+0xda>
 80019f0:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6f      	ldr	r2, [pc, #444]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a6c      	ldr	r2, [pc, #432]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a69      	ldr	r2, [pc, #420]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e029      	b.n	8001a6a <HAL_RCC_OscConfig+0x12e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001a1e:	d112      	bne.n	8001a46 <HAL_RCC_OscConfig+0x10a>
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a60      	ldr	r2, [pc, #384]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a5d      	ldr	r2, [pc, #372]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e011      	b.n	8001a6a <HAL_RCC_OscConfig+0x12e>
 8001a46:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a5a      	ldr	r2, [pc, #360]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d013      	beq.n	8001a9a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff fc45 	bl	8001300 <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fc41 	bl	8001300 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e380      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a8c:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x13e>
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fc31 	bl	8001300 <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fc2d 	bl	8001300 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b64      	cmp	r3, #100	; 0x64
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e36c      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x166>
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 808c 	beq.w	8001bea <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ada:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1bc>
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	2b18      	cmp	r3, #24
 8001aec:	d137      	bne.n	8001b5e <HAL_RCC_OscConfig+0x222>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d132      	bne.n	8001b5e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x1d4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e33e      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 0219 	bic.w	r2, r3, #25
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4925      	ldr	r1, [pc, #148]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fbed 	bl	8001300 <HAL_GetTick>
 8001b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fbe9 	bl	8001300 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e328      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	4917      	ldr	r1, [pc, #92]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5c:	e045      	b.n	8001bea <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d028      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 0219 	bic.w	r2, r3, #25
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4910      	ldr	r1, [pc, #64]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fbc2 	bl	8001300 <HAL_GetTick>
 8001b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff fbbe 	bl	8001300 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e2fd      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	061b      	lsls	r3, r3, #24
 8001bac:	4901      	ldr	r1, [pc, #4]	; (8001bb4 <HAL_RCC_OscConfig+0x278>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
 8001bb2:	e01a      	b.n	8001bea <HAL_RCC_OscConfig+0x2ae>
 8001bb4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	4b97      	ldr	r3, [pc, #604]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a96      	ldr	r2, [pc, #600]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fb9c 	bl	8001300 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fb98 	bl	8001300 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e2d7      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bde:	4b8e      	ldr	r3, [pc, #568]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06a      	beq.n	8001ccc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf6:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bfe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c00:	4b85      	ldr	r3, [pc, #532]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d007      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2e0>
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b18      	cmp	r3, #24
 8001c10:	d11b      	bne.n	8001c4a <HAL_RCC_OscConfig+0x30e>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d116      	bne.n	8001c4a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c1c:	4b7e      	ldr	r3, [pc, #504]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2f8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b80      	cmp	r3, #128	; 0x80
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e2ac      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c34:	4b78      	ldr	r3, [pc, #480]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	4975      	ldr	r1, [pc, #468]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c48:	e040      	b.n	8001ccc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d023      	beq.n	8001c9a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c52:	4b71      	ldr	r3, [pc, #452]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a70      	ldr	r2, [pc, #448]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fb4f 	bl	8001300 <HAL_GetTick>
 8001c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c66:	f7ff fb4b 	bl	8001300 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e28a      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c78:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c84:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	4961      	ldr	r1, [pc, #388]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
 8001c98:	e018      	b.n	8001ccc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a5e      	ldr	r2, [pc, #376]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fb2b 	bl	8001300 <HAL_GetTick>
 8001caa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cae:	f7ff fb27 	bl	8001300 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e266      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cc0:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d036      	beq.n	8001d46 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d019      	beq.n	8001d14 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce0:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff fb08 	bl	8001300 <HAL_GetTick>
 8001cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fb04 	bl	8001300 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e243      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d06:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x3b8>
 8001d12:	e018      	b.n	8001d46 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d14:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d18:	4a3f      	ldr	r2, [pc, #252]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff faee 	bl	8001300 <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff faea 	bl	8001300 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e229      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d3a:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d019      	beq.n	8001d8e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d66:	f7ff facb 	bl	8001300 <HAL_GetTick>
 8001d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d6e:	f7ff fac7 	bl	8001300 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e206      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x432>
 8001d8c:	e018      	b.n	8001dc0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a21      	ldr	r2, [pc, #132]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fab1 	bl	8001300 <HAL_GetTick>
 8001d9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da2:	f7ff faad 	bl	8001300 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1ec      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80af 	beq.w	8001f2c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_RCC_OscConfig+0x4e0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <HAL_RCC_OscConfig+0x4e0>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dda:	f7ff fa91 	bl	8001300 <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fa8d 	bl	8001300 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1cc      	b.n	800218e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_OscConfig+0x4e0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4e4>
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a02      	ldr	r2, [pc, #8]	; (8001e18 <HAL_RCC_OscConfig+0x4dc>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	e05b      	b.n	8001ece <HAL_RCC_OscConfig+0x592>
 8001e16:	bf00      	nop
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58024800 	.word	0x58024800
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d112      	bne.n	8001e4e <HAL_RCC_OscConfig+0x512>
 8001e28:	4b9d      	ldr	r3, [pc, #628]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a9c      	ldr	r2, [pc, #624]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	4b9a      	ldr	r3, [pc, #616]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a99      	ldr	r2, [pc, #612]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	4b97      	ldr	r3, [pc, #604]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a96      	ldr	r2, [pc, #600]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	e03f      	b.n	8001ece <HAL_RCC_OscConfig+0x592>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d112      	bne.n	8001e7c <HAL_RCC_OscConfig+0x540>
 8001e56:	4b92      	ldr	r3, [pc, #584]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	4a91      	ldr	r2, [pc, #580]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
 8001e62:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a8e      	ldr	r2, [pc, #568]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6e:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a8b      	ldr	r2, [pc, #556]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	e028      	b.n	8001ece <HAL_RCC_OscConfig+0x592>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b85      	cmp	r3, #133	; 0x85
 8001e82:	d112      	bne.n	8001eaa <HAL_RCC_OscConfig+0x56e>
 8001e84:	4b86      	ldr	r3, [pc, #536]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e88:	4a85      	ldr	r2, [pc, #532]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e90:	4b83      	ldr	r3, [pc, #524]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	4a82      	ldr	r2, [pc, #520]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a7f      	ldr	r2, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	e011      	b.n	8001ece <HAL_RCC_OscConfig+0x592>
 8001eaa:	4b7d      	ldr	r3, [pc, #500]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a7c      	ldr	r2, [pc, #496]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a79      	ldr	r2, [pc, #484]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	4b77      	ldr	r3, [pc, #476]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a76      	ldr	r2, [pc, #472]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fa13 	bl	8001300 <HAL_GetTick>
 8001eda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff fa0f 	bl	8001300 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e14c      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ee      	beq.n	8001ede <HAL_RCC_OscConfig+0x5a2>
 8001f00:	e014      	b.n	8001f2c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f02:	f7ff f9fd 	bl	8001300 <HAL_GetTick>
 8001f06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7ff f9f9 	bl	8001300 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e136      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f20:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ee      	bne.n	8001f0a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 812b 	beq.w	800218c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f36:	4b5a      	ldr	r3, [pc, #360]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f3e:	2b18      	cmp	r3, #24
 8001f40:	f000 80bb 	beq.w	80020ba <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	f040 8095 	bne.w	8002078 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a53      	ldr	r2, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f9d1 	bl	8001300 <HAL_GetTick>
 8001f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff f9cd 	bl	8001300 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e10c      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f84:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x768>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	430a      	orrs	r2, r1
 8001f94:	4942      	ldr	r1, [pc, #264]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	628b      	str	r3, [r1, #40]	; 0x28
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	041b      	lsls	r3, r3, #16
 8001fb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fca:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	4a32      	ldr	r2, [pc, #200]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe0:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_RCC_OscConfig+0x76c>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fe8:	00d2      	lsls	r2, r2, #3
 8001fea:	492d      	ldr	r1, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	f023 020c 	bic.w	r2, r3, #12
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	4928      	ldr	r1, [pc, #160]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002002:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	f023 0202 	bic.w	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4924      	ldr	r1, [pc, #144]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8002010:	4313      	orrs	r3, r2
 8002012:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8002026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8002032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f956 	bl	8001300 <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff f952 	bl	8001300 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e091      	b.n	800218e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x71c>
 8002076:	e089      	b.n	800218c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_RCC_OscConfig+0x764>)
 800207e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff f93c 	bl	8001300 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800208a:	e00f      	b.n	80020ac <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7ff f938 	bl	8001300 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d908      	bls.n	80020ac <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e077      	b.n	800218e <HAL_RCC_OscConfig+0x852>
 800209e:	bf00      	nop
 80020a0:	58024400 	.word	0x58024400
 80020a4:	fffffc0c 	.word	0xfffffc0c
 80020a8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e9      	bne.n	800208c <HAL_RCC_OscConfig+0x750>
 80020b8:	e068      	b.n	800218c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020c0:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d031      	beq.n	8002132 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d12a      	bne.n	8002132 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d122      	bne.n	8002132 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d11a      	bne.n	8002132 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0a5b      	lsrs	r3, r3, #9
 8002100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d111      	bne.n	8002132 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d108      	bne.n	8002132 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	0e1b      	lsrs	r3, r3, #24
 8002124:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e02b      	b.n	800218e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002140:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d01f      	beq.n	800218c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002158:	f7ff f8d2 	bl	8001300 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800215e:	bf00      	nop
 8002160:	f7ff f8ce 	bl	8001300 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	4293      	cmp	r3, r2
 800216a:	d0f9      	beq.n	8002160 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 800216e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_RCC_OscConfig+0x860>)
 8002172:	4013      	ands	r3, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002178:	00d2      	lsls	r2, r2, #3
 800217a:	4907      	ldr	r1, [pc, #28]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 800217c:	4313      	orrs	r3, r2
 800217e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_RCC_OscConfig+0x85c>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3730      	adds	r7, #48	; 0x30
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	58024400 	.word	0x58024400
 800219c:	ffff0007 	.word	0xffff0007

080021a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e19c      	b.n	80024ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b8a      	ldr	r3, [pc, #552]	; (80023e0 <HAL_RCC_ClockConfig+0x240>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d910      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b87      	ldr	r3, [pc, #540]	; (80023e0 <HAL_RCC_ClockConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 020f 	bic.w	r2, r3, #15
 80021ca:	4985      	ldr	r1, [pc, #532]	; (80023e0 <HAL_RCC_ClockConfig+0x240>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b83      	ldr	r3, [pc, #524]	; (80023e0 <HAL_RCC_ClockConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e184      	b.n	80024ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d010      	beq.n	8002212 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	4b7b      	ldr	r3, [pc, #492]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d908      	bls.n	8002212 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002200:	4b78      	ldr	r3, [pc, #480]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	4975      	ldr	r1, [pc, #468]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 800220e:	4313      	orrs	r3, r2
 8002210:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d010      	beq.n	8002240 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800222a:	429a      	cmp	r2, r3
 800222c:	d908      	bls.n	8002240 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800222e:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	496a      	ldr	r1, [pc, #424]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 800223c:	4313      	orrs	r3, r2
 800223e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d010      	beq.n	800226e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002258:	429a      	cmp	r2, r3
 800225a:	d908      	bls.n	800226e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800225c:	4b61      	ldr	r3, [pc, #388]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	495e      	ldr	r1, [pc, #376]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 800226a:	4313      	orrs	r3, r2
 800226c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002286:	429a      	cmp	r2, r3
 8002288:	d908      	bls.n	800229c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800228a:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4953      	ldr	r1, [pc, #332]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002298:	4313      	orrs	r3, r2
 800229a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d908      	bls.n	80022ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f023 020f 	bic.w	r2, r3, #15
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4947      	ldr	r1, [pc, #284]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d055      	beq.n	8002382 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4940      	ldr	r1, [pc, #256]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022f0:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0f6      	b.n	80024ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d107      	bne.n	8002318 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d115      	bne.n	8002340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0ea      	b.n	80024ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0de      	b.n	80024ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002330:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0d6      	b.n	80024ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002340:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f023 0207 	bic.w	r2, r3, #7
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4925      	ldr	r1, [pc, #148]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 800234e:	4313      	orrs	r3, r2
 8002350:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002352:	f7fe ffd5 	bl	8001300 <HAL_GetTick>
 8002356:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002358:	e00a      	b.n	8002370 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235a:	f7fe ffd1 	bl	8001300 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0be      	b.n	80024ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002370:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	429a      	cmp	r2, r3
 8002380:	d1eb      	bne.n	800235a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	429a      	cmp	r2, r3
 800239c:	d208      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f023 020f 	bic.w	r2, r3, #15
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	490e      	ldr	r1, [pc, #56]	; (80023e4 <HAL_RCC_ClockConfig+0x244>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_ClockConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d214      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_RCC_ClockConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 020f 	bic.w	r2, r3, #15
 80023c6:	4906      	ldr	r1, [pc, #24]	; (80023e0 <HAL_RCC_ClockConfig+0x240>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_RCC_ClockConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e086      	b.n	80024ee <HAL_RCC_ClockConfig+0x34e>
 80023e0:	52002000 	.word	0x52002000
 80023e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d010      	beq.n	8002416 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002400:	429a      	cmp	r2, r3
 8002402:	d208      	bcs.n	8002416 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002404:	4b3c      	ldr	r3, [pc, #240]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	4939      	ldr	r1, [pc, #228]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002412:	4313      	orrs	r3, r2
 8002414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d010      	beq.n	8002444 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800242e:	429a      	cmp	r2, r3
 8002430:	d208      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002432:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	492e      	ldr	r1, [pc, #184]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002440:	4313      	orrs	r3, r2
 8002442:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800245c:	429a      	cmp	r2, r3
 800245e:	d208      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4922      	ldr	r1, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 800246e:	4313      	orrs	r3, r2
 8002470:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d010      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69da      	ldr	r2, [r3, #28]
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800248a:	429a      	cmp	r2, r3
 800248c:	d208      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4917      	ldr	r1, [pc, #92]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 800249c:	4313      	orrs	r3, r2
 800249e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80024a0:	f000 f834 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	4912      	ldr	r1, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x35c>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_RCC_ClockConfig+0x358>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <HAL_RCC_ClockConfig+0x35c>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x360>)
 80024d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x364>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_RCC_ClockConfig+0x368>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fec2 	bl	800126c <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	58024400 	.word	0x58024400
 80024fc:	08005d9c 	.word	0x08005d9c
 8002500:	24000004 	.word	0x24000004
 8002504:	24000000 	.word	0x24000000
 8002508:	24000008 	.word	0x24000008

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002512:	4bb3      	ldr	r3, [pc, #716]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800251a:	2b18      	cmp	r3, #24
 800251c:	f200 8155 	bhi.w	80027ca <HAL_RCC_GetSysClockFreq+0x2be>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	0800258d 	.word	0x0800258d
 800252c:	080027cb 	.word	0x080027cb
 8002530:	080027cb 	.word	0x080027cb
 8002534:	080027cb 	.word	0x080027cb
 8002538:	080027cb 	.word	0x080027cb
 800253c:	080027cb 	.word	0x080027cb
 8002540:	080027cb 	.word	0x080027cb
 8002544:	080027cb 	.word	0x080027cb
 8002548:	080025b3 	.word	0x080025b3
 800254c:	080027cb 	.word	0x080027cb
 8002550:	080027cb 	.word	0x080027cb
 8002554:	080027cb 	.word	0x080027cb
 8002558:	080027cb 	.word	0x080027cb
 800255c:	080027cb 	.word	0x080027cb
 8002560:	080027cb 	.word	0x080027cb
 8002564:	080027cb 	.word	0x080027cb
 8002568:	080025b9 	.word	0x080025b9
 800256c:	080027cb 	.word	0x080027cb
 8002570:	080027cb 	.word	0x080027cb
 8002574:	080027cb 	.word	0x080027cb
 8002578:	080027cb 	.word	0x080027cb
 800257c:	080027cb 	.word	0x080027cb
 8002580:	080027cb 	.word	0x080027cb
 8002584:	080027cb 	.word	0x080027cb
 8002588:	080025bf 	.word	0x080025bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800258c:	4b94      	ldr	r3, [pc, #592]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d009      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002598:	4b91      	ldr	r3, [pc, #580]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	08db      	lsrs	r3, r3, #3
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	4a90      	ldr	r2, [pc, #576]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80025aa:	e111      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025ac:	4b8d      	ldr	r3, [pc, #564]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025ae:	61bb      	str	r3, [r7, #24]
      break;
 80025b0:	e10e      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80025b2:	4b8d      	ldr	r3, [pc, #564]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025b4:	61bb      	str	r3, [r7, #24]
      break;
 80025b6:	e10b      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80025b8:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025ba:	61bb      	str	r3, [r7, #24]
      break;
 80025bc:	e108      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80025c8:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025d4:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80025de:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e2:	08db      	lsrs	r3, r3, #3
 80025e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80e1 	beq.w	80027c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b02      	cmp	r3, #2
 8002606:	f000 8083 	beq.w	8002710 <HAL_RCC_GetSysClockFreq+0x204>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b02      	cmp	r3, #2
 800260e:	f200 80a1 	bhi.w	8002754 <HAL_RCC_GetSysClockFreq+0x248>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x114>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d056      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800261e:	e099      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d02d      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800262c:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	4a6b      	ldr	r2, [pc, #428]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002656:	4b62      	ldr	r3, [pc, #392]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002666:	ed97 6a02 	vldr	s12, [r7, #8]
 800266a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80027f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800266e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800267a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800267e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002682:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002686:	e087      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	eddf 6a58 	vldr	s13, [pc, #352]	; 80027f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800269a:	4b51      	ldr	r3, [pc, #324]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80027f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026ca:	e065      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80027f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80026f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80027f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800270e:	e043      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80027fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800271e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002732:	ed97 6a02 	vldr	s12, [r7, #8]
 8002736:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80027f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800273a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800273e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002752:	e021      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80027f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002776:	ed97 6a02 	vldr	s12, [r7, #8]
 800277a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80027f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800277e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800278a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002796:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	0a5b      	lsrs	r3, r3, #9
 800279e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a2:	3301      	adds	r3, #1
 80027a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80027b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027bc:	ee17 3a90 	vmov	r3, s15
 80027c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80027c2:	e005      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
      break;
 80027c8:	e002      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027cc:	61bb      	str	r3, [r7, #24]
      break;
 80027ce:	bf00      	nop
  }

  return sysclockfreq;
 80027d0:	69bb      	ldr	r3, [r7, #24]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	58024400 	.word	0x58024400
 80027e4:	03d09000 	.word	0x03d09000
 80027e8:	003d0900 	.word	0x003d0900
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	46000000 	.word	0x46000000
 80027f4:	4c742400 	.word	0x4c742400
 80027f8:	4a742400 	.word	0x4a742400
 80027fc:	4af42400 	.word	0x4af42400

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002806:	f7ff fe81 	bl	800250c <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_RCC_GetHCLKFreq+0x50>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490f      	ldr	r1, [pc, #60]	; (8002854 <HAL_RCC_GetHCLKFreq+0x54>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_RCC_GetHCLKFreq+0x50>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_GetHCLKFreq+0x54>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_RCC_GetHCLKFreq+0x58>)
 800283c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_RCC_GetHCLKFreq+0x58>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	58024400 	.word	0x58024400
 8002854:	08005d9c 	.word	0x08005d9c
 8002858:	24000004 	.word	0x24000004
 800285c:	24000000 	.word	0x24000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002864:	f7ff ffcc 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4904      	ldr	r1, [pc, #16]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	58024400 	.word	0x58024400
 8002888:	08005d9c 	.word	0x08005d9c

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002890:	f7ff ffb6 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4904      	ldr	r1, [pc, #16]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	58024400 	.word	0x58024400
 80028b4:	08005d9c 	.word	0x08005d9c

080028b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028bc:	b0c8      	sub	sp, #288	; 0x120
 80028be:	af00      	add	r7, sp, #0
 80028c0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80028dc:	2500      	movs	r5, #0
 80028de:	ea54 0305 	orrs.w	r3, r4, r5
 80028e2:	d049      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80028e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028ee:	d02f      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80028f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028f4:	d828      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80028f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028fa:	d01a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80028fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002900:	d822      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290a:	d007      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800290c:	e01c      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800290e:	4ba7      	ldr	r3, [pc, #668]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	4aa6      	ldr	r2, [pc, #664]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800291a:	e01a      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800291c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002920:	3308      	adds	r3, #8
 8002922:	2102      	movs	r1, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f001 fc43 	bl	80041b0 <RCCEx_PLL2_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002930:	e00f      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002936:	3328      	adds	r3, #40	; 0x28
 8002938:	2102      	movs	r1, #2
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fcea 	bl	8004314 <RCCEx_PLL3_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002946:	e004      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800294e:	e000      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002952:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800295a:	4b94      	ldr	r3, [pc, #592]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800295c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002968:	4a90      	ldr	r2, [pc, #576]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800296a:	430b      	orrs	r3, r1
 800296c:	6513      	str	r3, [r2, #80]	; 0x50
 800296e:	e003      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002974:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002984:	f04f 0900 	mov.w	r9, #0
 8002988:	ea58 0309 	orrs.w	r3, r8, r9
 800298c:	d047      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800298e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	2b04      	cmp	r3, #4
 8002996:	d82a      	bhi.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b5 	.word	0x080029b5
 80029a4:	080029c3 	.word	0x080029c3
 80029a8:	080029d9 	.word	0x080029d9
 80029ac:	080029f7 	.word	0x080029f7
 80029b0:	080029f7 	.word	0x080029f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b4:	4b7d      	ldr	r3, [pc, #500]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	4a7c      	ldr	r2, [pc, #496]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029c0:	e01a      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fbf0 	bl	80041b0 <RCCEx_PLL2_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029d6:	e00f      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029dc:	3328      	adds	r3, #40	; 0x28
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fc97 	bl	8004314 <RCCEx_PLL3_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029ec:	e004      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029f4:	e000      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80029f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a00:	4b6a      	ldr	r3, [pc, #424]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a04:	f023 0107 	bic.w	r1, r3, #7
 8002a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	4a67      	ldr	r2, [pc, #412]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a10:	430b      	orrs	r3, r1
 8002a12:	6513      	str	r3, [r2, #80]	; 0x50
 8002a14:	e003      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002a2a:	f04f 0b00 	mov.w	fp, #0
 8002a2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a32:	d054      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a3e:	d036      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002a40:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a44:	d82f      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4a:	d032      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a50:	d829      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a52:	2bc0      	cmp	r3, #192	; 0xc0
 8002a54:	d02f      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002a56:	2bc0      	cmp	r3, #192	; 0xc0
 8002a58:	d825      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d018      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002a5e:	2b80      	cmp	r3, #128	; 0x80
 8002a60:	d821      	bhi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d007      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002a6a:	e01c      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002a78:	e01e      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a7e:	3308      	adds	r3, #8
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fb94 	bl	80041b0 <RCCEx_PLL2_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002a8e:	e013      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a94:	3328      	adds	r3, #40	; 0x28
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fc3b 	bl	8004314 <RCCEx_PLL3_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002aac:	e004      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	4a37      	ldr	r2, [pc, #220]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6513      	str	r3, [r2, #80]	; 0x50
 8002ad4:	e003      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ada:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002aea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002af4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002af8:	460b      	mov	r3, r1
 8002afa:	4313      	orrs	r3, r2
 8002afc:	d05c      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b08:	d03b      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b0a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b0e:	d834      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b14:	d037      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b1a:	d82e      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002b1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b20:	d033      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002b22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b26:	d828      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2c:	d01a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d822      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3c:	d007      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002b3e:	e01c      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002b4c:	e01e      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b52:	3308      	adds	r3, #8
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fb2a 	bl	80041b0 <RCCEx_PLL2_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002b62:	e013      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b68:	3328      	adds	r3, #40	; 0x28
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 fbd1 	bl	8004314 <RCCEx_PLL3_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002b78:	e008      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b80:	e004      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002b82:	bf00      	nop
 8002b84:	e002      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	4a02      	ldr	r2, [pc, #8]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6513      	str	r3, [r2, #80]	; 0x50
 8002ba8:	e006      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002baa:	bf00      	nop
 8002bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002bce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	d03a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	2b30      	cmp	r3, #48	; 0x30
 8002be0:	d01f      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002be2:	2b30      	cmp	r3, #48	; 0x30
 8002be4:	d819      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d00c      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d815      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d019      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d111      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf6:	4bae      	ldr	r3, [pc, #696]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	4aad      	ldr	r2, [pc, #692]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002c02:	e011      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c08:	3308      	adds	r3, #8
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 facf 	bl	80041b0 <RCCEx_PLL2_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002c18:	e006      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c20:	e002      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002c22:	bf00      	nop
 8002c24:	e000      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c30:	4b9f      	ldr	r3, [pc, #636]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c34:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	4a9c      	ldr	r2, [pc, #624]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c40:	430b      	orrs	r3, r1
 8002c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c44:	e003      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002c5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002c64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	d051      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c78:	d035      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c7e:	d82e      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002c80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c84:	d031      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c8a:	d828      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c90:	d01a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	d822      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d007      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002ca2:	e01c      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4b82      	ldr	r3, [pc, #520]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	4a81      	ldr	r2, [pc, #516]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cb0:	e01c      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 fa78 	bl	80041b0 <RCCEx_PLL2_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cc6:	e011      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ccc:	3328      	adds	r3, #40	; 0x28
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 fb1f 	bl	8004314 <RCCEx_PLL3_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cdc:	e006      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cf4:	4b6e      	ldr	r3, [pc, #440]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d02:	4a6b      	ldr	r2, [pc, #428]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6513      	str	r3, [r2, #80]	; 0x50
 8002d08:	e003      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002d28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	d053      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3c:	d033      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d42:	d82c      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d48:	d02f      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002d4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d4e:	d826      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d54:	d02b      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d5a:	d820      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d60:	d012      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d66:	d81a      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d022      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d115      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d76:	3308      	adds	r3, #8
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 fa18 	bl	80041b0 <RCCEx_PLL2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d86:	e015      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8c:	3328      	adds	r3, #40	; 0x28
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 fabf 	bl	8004314 <RCCEx_PLL3_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002da4:	e006      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002da6:	bf00      	nop
 8002da8:	e004      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dbc:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dca:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6513      	str	r3, [r2, #80]	; 0x50
 8002dd0:	e003      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002de6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002df0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4313      	orrs	r3, r2
 8002df8:	d060      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e02:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002e06:	d039      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002e08:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002e0c:	d832      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e12:	d035      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e18:	d82c      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1e:	d031      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d826      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e2a:	d02d      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002e2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e30:	d820      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e36:	d012      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3c:	d81a      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d024      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e46:	d115      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 f9ad 	bl	80041b0 <RCCEx_PLL2_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e5c:	e017      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e62:	3328      	adds	r3, #40	; 0x28
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 fa54 	bl	8004314 <RCCEx_PLL3_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e72:	e00c      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e7c:	bf00      	nop
 8002e7e:	e006      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e80:	bf00      	nop
 8002e82:	e004      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e84:	bf00      	nop
 8002e86:	e002      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10e      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ea6:	4a02      	ldr	r2, [pc, #8]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002eac:	e006      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002eae:	bf00      	nop
 8002eb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	d037      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee6:	d00e      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d816      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d018      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ef6:	d111      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef8:	4bc4      	ldr	r3, [pc, #784]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	4ac3      	ldr	r2, [pc, #780]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f04:	e00f      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f94e 	bl	80041b0 <RCCEx_PLL2_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f1a:	e004      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f2e:	4bb7      	ldr	r3, [pc, #732]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f3c:	4ab3      	ldr	r2, [pc, #716]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	6513      	str	r3, [r2, #80]	; 0x50
 8002f42:	e003      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	d039      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d81c      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002f76:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002fb9 	.word	0x08002fb9
 8002f80:	08002f8d 	.word	0x08002f8d
 8002f84:	08002f9b 	.word	0x08002f9b
 8002f88:	08002fb9 	.word	0x08002fb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f8c:	4b9f      	ldr	r3, [pc, #636]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	4a9e      	ldr	r2, [pc, #632]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002f98:	e00f      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 f904 	bl	80041b0 <RCCEx_PLL2_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002fae:	e004      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fb6:	e000      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fc2:	4b92      	ldr	r3, [pc, #584]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f023 0103 	bic.w	r1, r3, #3
 8002fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd0:	4a8e      	ldr	r2, [pc, #568]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd6:	e003      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ff6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f000 8099 	beq.w	8003134 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003002:	4b83      	ldr	r3, [pc, #524]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a82      	ldr	r2, [pc, #520]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800300e:	f7fe f977 	bl	8001300 <HAL_GetTick>
 8003012:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003016:	e00b      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003018:	f7fe f972 	bl	8001300 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b64      	cmp	r3, #100	; 0x64
 8003026:	d903      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800302e:	e005      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003030:	4b77      	ldr	r3, [pc, #476]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ed      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800303c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003040:	2b00      	cmp	r3, #0
 8003042:	d173      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003044:	4b71      	ldr	r3, [pc, #452]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800304c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003050:	4053      	eors	r3, r2
 8003052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003056:	2b00      	cmp	r3, #0
 8003058:	d015      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800305a:	4b6c      	ldr	r3, [pc, #432]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003062:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003066:	4b69      	ldr	r3, [pc, #420]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a68      	ldr	r2, [pc, #416]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003072:	4b66      	ldr	r3, [pc, #408]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a65      	ldr	r2, [pc, #404]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800307e:	4a63      	ldr	r2, [pc, #396]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800308a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800308e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003092:	d118      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f934 	bl	8001300 <HAL_GetTick>
 8003098:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800309c:	e00d      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe f92f 	bl	8001300 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80030a8:	1ad2      	subs	r2, r2, r3
 80030aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d903      	bls.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80030b8:	e005      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ba:	4b54      	ldr	r3, [pc, #336]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0eb      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80030c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d129      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030de:	d10e      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 80030e0:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80030e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030f0:	091a      	lsrs	r2, r3, #4
 80030f2:	4b48      	ldr	r3, [pc, #288]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	4a45      	ldr	r2, [pc, #276]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6113      	str	r3, [r2, #16]
 80030fc:	e005      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x852>
 80030fe:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	4a42      	ldr	r2, [pc, #264]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003104:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003108:	6113      	str	r3, [r2, #16]
 800310a:	4b40      	ldr	r3, [pc, #256]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800310c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800310e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311a:	4a3c      	ldr	r2, [pc, #240]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800311c:	430b      	orrs	r3, r1
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	e008      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003122:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003126:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800312a:	e003      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003130:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f002 0301 	and.w	r3, r2, #1
 8003140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800314a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800314e:	460b      	mov	r3, r1
 8003150:	4313      	orrs	r3, r2
 8003152:	f000 8090 	beq.w	8003276 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315e:	2b28      	cmp	r3, #40	; 0x28
 8003160:	d870      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	0800324d 	.word	0x0800324d
 800316c:	08003245 	.word	0x08003245
 8003170:	08003245 	.word	0x08003245
 8003174:	08003245 	.word	0x08003245
 8003178:	08003245 	.word	0x08003245
 800317c:	08003245 	.word	0x08003245
 8003180:	08003245 	.word	0x08003245
 8003184:	08003245 	.word	0x08003245
 8003188:	08003219 	.word	0x08003219
 800318c:	08003245 	.word	0x08003245
 8003190:	08003245 	.word	0x08003245
 8003194:	08003245 	.word	0x08003245
 8003198:	08003245 	.word	0x08003245
 800319c:	08003245 	.word	0x08003245
 80031a0:	08003245 	.word	0x08003245
 80031a4:	08003245 	.word	0x08003245
 80031a8:	0800322f 	.word	0x0800322f
 80031ac:	08003245 	.word	0x08003245
 80031b0:	08003245 	.word	0x08003245
 80031b4:	08003245 	.word	0x08003245
 80031b8:	08003245 	.word	0x08003245
 80031bc:	08003245 	.word	0x08003245
 80031c0:	08003245 	.word	0x08003245
 80031c4:	08003245 	.word	0x08003245
 80031c8:	0800324d 	.word	0x0800324d
 80031cc:	08003245 	.word	0x08003245
 80031d0:	08003245 	.word	0x08003245
 80031d4:	08003245 	.word	0x08003245
 80031d8:	08003245 	.word	0x08003245
 80031dc:	08003245 	.word	0x08003245
 80031e0:	08003245 	.word	0x08003245
 80031e4:	08003245 	.word	0x08003245
 80031e8:	0800324d 	.word	0x0800324d
 80031ec:	08003245 	.word	0x08003245
 80031f0:	08003245 	.word	0x08003245
 80031f4:	08003245 	.word	0x08003245
 80031f8:	08003245 	.word	0x08003245
 80031fc:	08003245 	.word	0x08003245
 8003200:	08003245 	.word	0x08003245
 8003204:	08003245 	.word	0x08003245
 8003208:	0800324d 	.word	0x0800324d
 800320c:	58024400 	.word	0x58024400
 8003210:	58024800 	.word	0x58024800
 8003214:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321c:	3308      	adds	r3, #8
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 ffc5 	bl	80041b0 <RCCEx_PLL2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800322c:	e00f      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800322e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003232:	3328      	adds	r3, #40	; 0x28
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f001 f86c 	bl	8004314 <RCCEx_PLL3_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003242:	e004      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800324c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003256:	4bc0      	ldr	r3, [pc, #768]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800325e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	4abc      	ldr	r2, [pc, #752]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003268:	430b      	orrs	r3, r1
 800326a:	6553      	str	r3, [r2, #84]	; 0x54
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003272:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f002 0302 	and.w	r3, r2, #2
 8003282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800328c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003290:	460b      	mov	r3, r1
 8003292:	4313      	orrs	r3, r2
 8003294:	d043      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d824      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80032a2:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	080032c1 	.word	0x080032c1
 80032b0:	080032d7 	.word	0x080032d7
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032f5 	.word	0x080032f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c4:	3308      	adds	r3, #8
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 ff71 	bl	80041b0 <RCCEx_PLL2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032d4:	e00f      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032da:	3328      	adds	r3, #40	; 0x28
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 f818 	bl	8004314 <RCCEx_PLL3_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80032ea:	e004      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032fe:	4b96      	ldr	r3, [pc, #600]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f023 0107 	bic.w	r1, r3, #7
 8003306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330e:	4a92      	ldr	r2, [pc, #584]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003310:	430b      	orrs	r3, r1
 8003312:	6553      	str	r3, [r2, #84]	; 0x54
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800331a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800331e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f002 0304 	and.w	r3, r2, #4
 800332a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800332e:	2300      	movs	r3, #0
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003334:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d043      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800333e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003346:	2b05      	cmp	r3, #5
 8003348:	d824      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	0800339d 	.word	0x0800339d
 8003354:	08003369 	.word	0x08003369
 8003358:	0800337f 	.word	0x0800337f
 800335c:	0800339d 	.word	0x0800339d
 8003360:	0800339d 	.word	0x0800339d
 8003364:	0800339d 	.word	0x0800339d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800336c:	3308      	adds	r3, #8
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ff1d 	bl	80041b0 <RCCEx_PLL2_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800337c:	e00f      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800337e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003382:	3328      	adds	r3, #40	; 0x28
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ffc4 	bl	8004314 <RCCEx_PLL3_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003392:	e004      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800339c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a6:	4b6c      	ldr	r3, [pc, #432]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f023 0107 	bic.w	r1, r3, #7
 80033ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b6:	4a68      	ldr	r2, [pc, #416]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6593      	str	r3, [r2, #88]	; 0x58
 80033bc:	e003      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f002 0320 	and.w	r3, r2, #32
 80033d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033e0:	460b      	mov	r3, r1
 80033e2:	4313      	orrs	r3, r2
 80033e4:	d055      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80033e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f2:	d033      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80033f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f8:	d82c      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d02f      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003404:	d826      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003406:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800340a:	d02b      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800340c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003410:	d820      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003416:	d012      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800341c:	d81a      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d022      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003426:	d115      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342c:	3308      	adds	r3, #8
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f000 febd 	bl	80041b0 <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800343c:	e015      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800343e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003442:	3328      	adds	r3, #40	; 0x28
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 ff64 	bl	8004314 <RCCEx_PLL3_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003452:	e00a      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800345a:	e006      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800345c:	bf00      	nop
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003460:	bf00      	nop
 8003462:	e002      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003464:	bf00      	nop
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003472:	4b39      	ldr	r3, [pc, #228]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800347a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003482:	4a35      	ldr	r2, [pc, #212]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003484:	430b      	orrs	r3, r1
 8003486:	6553      	str	r3, [r2, #84]	; 0x54
 8003488:	e003      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800348e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800349e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80034a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4313      	orrs	r3, r2
 80034b0:	d058      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80034b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034be:	d033      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80034c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80034c4:	d82c      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d02f      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80034cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d0:	d826      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80034d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034d6:	d02b      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80034d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034dc:	d820      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	d012      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e8:	d81a      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d022      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d115      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f8:	3308      	adds	r3, #8
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fe57 	bl	80041b0 <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003508:	e015      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800350a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350e:	3328      	adds	r3, #40	; 0x28
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fefe 	bl	8004314 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800351e:	e00a      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003526:	e006      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003528:	bf00      	nop
 800352a:	e004      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800352c:	bf00      	nop
 800352e:	e002      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003536:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10e      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800354e:	4a02      	ldr	r2, [pc, #8]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003550:	430b      	orrs	r3, r1
 8003552:	6593      	str	r3, [r2, #88]	; 0x58
 8003554:	e006      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003556:	bf00      	nop
 8003558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003560:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800357a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d055      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003588:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800358c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003590:	d033      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003592:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003596:	d82c      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359c:	d02f      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800359e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a2:	d826      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80035a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035a8:	d02b      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80035aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035ae:	d820      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80035b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b4:	d012      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80035b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ba:	d81a      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d022      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c4:	d115      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ca:	3308      	adds	r3, #8
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fdee 	bl	80041b0 <RCCEx_PLL2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035da:	e015      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	3328      	adds	r3, #40	; 0x28
 80035e2:	2102      	movs	r1, #2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fe95 	bl	8004314 <RCCEx_PLL3_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80035f0:	e00a      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035f8:	e006      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80035fa:	bf00      	nop
 80035fc:	e004      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003608:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003610:	4ba1      	ldr	r3, [pc, #644]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003620:	4a9d      	ldr	r2, [pc, #628]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003622:	430b      	orrs	r3, r1
 8003624:	6593      	str	r3, [r2, #88]	; 0x58
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800362c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f002 0308 	and.w	r3, r2, #8
 800363c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003646:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800364a:	460b      	mov	r3, r1
 800364c:	4313      	orrs	r3, r2
 800364e:	d01e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	d10c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800365e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003662:	3328      	adds	r3, #40	; 0x28
 8003664:	2102      	movs	r1, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fe54 	bl	8004314 <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003678:	4b87      	ldr	r3, [pc, #540]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003688:	4a83      	ldr	r2, [pc, #524]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800368e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f002 0310 	and.w	r3, r2, #16
 800369a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80036a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d01e      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80036ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ba:	d10c      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c0:	3328      	adds	r3, #40	; 0x28
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fe25 	bl	8004314 <RCCEx_PLL3_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036d6:	4b70      	ldr	r3, [pc, #448]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036e6:	4a6c      	ldr	r2, [pc, #432]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80036f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003702:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d03e      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003710:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003718:	d022      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800371a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800371e:	d81b      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d00b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800372a:	e015      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800372c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003730:	3308      	adds	r3, #8
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fd3b 	bl	80041b0 <RCCEx_PLL2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003740:	e00f      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003746:	3328      	adds	r3, #40	; 0x28
 8003748:	2102      	movs	r1, #2
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fde2 	bl	8004314 <RCCEx_PLL3_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003756:	e004      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003762:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800376a:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003776:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800377a:	4a47      	ldr	r2, [pc, #284]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800377c:	430b      	orrs	r3, r1
 800377e:	6593      	str	r3, [r2, #88]	; 0x58
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003786:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800378a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003796:	67bb      	str	r3, [r7, #120]	; 0x78
 8003798:	2300      	movs	r3, #0
 800379a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800379c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80037a0:	460b      	mov	r3, r1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80037a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037b2:	d01f      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80037b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037b8:	d818      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80037ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037be:	d003      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80037c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c4:	d007      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80037c6:	e011      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c8:	4b33      	ldr	r3, [pc, #204]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4a32      	ldr	r2, [pc, #200]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80037d4:	e00f      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037da:	3328      	adds	r3, #40	; 0x28
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd98 	bl	8004314 <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80037ea:	e004      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80037f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a22      	ldr	r2, [pc, #136]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6553      	str	r3, [r2, #84]	; 0x54
 8003814:	e003      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800381a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800381e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800382a:	673b      	str	r3, [r7, #112]	; 0x70
 800382c:	2300      	movs	r3, #0
 800382e:	677b      	str	r3, [r7, #116]	; 0x74
 8003830:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003834:	460b      	mov	r3, r1
 8003836:	4313      	orrs	r3, r2
 8003838:	d034      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800383a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d007      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800384a:	e011      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a11      	ldr	r2, [pc, #68]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003858:	e00e      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800385a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800385e:	3308      	adds	r3, #8
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fca4 	bl	80041b0 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10d      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	4a02      	ldr	r2, [pc, #8]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003890:	430b      	orrs	r3, r1
 8003892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003894:	e006      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003896:	bf00      	nop
 8003898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80038b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b2:	2300      	movs	r3, #0
 80038b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d00c      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c4:	3328      	adds	r3, #40	; 0x28
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fd23 	bl	8004314 <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80038e6:	663b      	str	r3, [r7, #96]	; 0x60
 80038e8:	2300      	movs	r3, #0
 80038ea:	667b      	str	r3, [r7, #100]	; 0x64
 80038ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d038      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80038f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003902:	d018      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003908:	d811      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800390a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390e:	d014      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003914:	d80b      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d011      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	d106      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4bc3      	ldr	r3, [pc, #780]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4ac2      	ldr	r2, [pc, #776]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003934:	e004      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800393e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003940:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003948:	4bb9      	ldr	r3, [pc, #740]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	4ab5      	ldr	r2, [pc, #724]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800395a:	430b      	orrs	r3, r1
 800395c:	6553      	str	r3, [r2, #84]	; 0x54
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003964:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003974:	65bb      	str	r3, [r7, #88]	; 0x58
 8003976:	2300      	movs	r3, #0
 8003978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800397a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003984:	4baa      	ldr	r3, [pc, #680]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003992:	4aa7      	ldr	r2, [pc, #668]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003994:	430b      	orrs	r3, r1
 8003996:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80039a4:	653b      	str	r3, [r7, #80]	; 0x50
 80039a6:	2300      	movs	r3, #0
 80039a8:	657b      	str	r3, [r7, #84]	; 0x54
 80039aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039b4:	4b9e      	ldr	r3, [pc, #632]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	4a9b      	ldr	r2, [pc, #620]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80039c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80039d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80039d6:	2300      	movs	r3, #0
 80039d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80039de:	460b      	mov	r3, r1
 80039e0:	4313      	orrs	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80039e4:	4b92      	ldr	r3, [pc, #584]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80039ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f2:	4a8f      	ldr	r2, [pc, #572]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003a04:	643b      	str	r3, [r7, #64]	; 0x40
 8003a06:	2300      	movs	r3, #0
 8003a08:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a14:	4b86      	ldr	r3, [pc, #536]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	4a85      	ldr	r2, [pc, #532]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a1e:	6113      	str	r3, [r2, #16]
 8003a20:	4b83      	ldr	r3, [pc, #524]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a22:	6919      	ldr	r1, [r3, #16]
 8003a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a2c:	4a80      	ldr	r2, [pc, #512]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a40:	2300      	movs	r3, #0
 8003a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a44:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a4e:	4b78      	ldr	r3, [pc, #480]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	4a74      	ldr	r2, [pc, #464]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a70:	2300      	movs	r3, #0
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a7e:	4b6c      	ldr	r3, [pc, #432]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8e:	4a68      	ldr	r2, [pc, #416]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	d011      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fb79 	bl	80041b0 <RCCEx_PLL2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ad0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	2100      	movs	r1, #0
 8003ade:	6239      	str	r1, [r7, #32]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d011      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af4:	3308      	adds	r3, #8
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fb59 	bl	80041b0 <RCCEx_PLL2_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003b04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	61b9      	str	r1, [r7, #24]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	d011      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b34:	3308      	adds	r3, #8
 8003b36:	2102      	movs	r1, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fb39 	bl	80041b0 <RCCEx_PLL2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b50:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	6139      	str	r1, [r7, #16]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	d011      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b74:	3328      	adds	r3, #40	; 0x28
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fbcb 	bl	8004314 <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003b84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
 8003bae:	d011      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb4:	3328      	adds	r3, #40	; 0x28
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fbab 	bl	8004314 <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	2100      	movs	r1, #0
 8003bde:	6039      	str	r1, [r7, #0]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d011      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf4:	3328      	adds	r3, #40	; 0x28
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fb8b 	bl	8004314 <RCCEx_PLL3_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003c14:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	58024400 	.word	0x58024400

08003c34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003c38:	f7fe fde2 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4904      	ldr	r1, [pc, #16]	; (8003c5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	08005d9c 	.word	0x08005d9c

08003c60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	; 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c68:	4ba1      	ldr	r3, [pc, #644]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c72:	4b9f      	ldr	r3, [pc, #636]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	0b1b      	lsrs	r3, r3, #12
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c7e:	4b9c      	ldr	r3, [pc, #624]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c8a:	4b99      	ldr	r3, [pc, #612]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	08db      	lsrs	r3, r3, #3
 8003c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8111 	beq.w	8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	f000 8083 	beq.w	8003dbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	f200 80a1 	bhi.w	8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d056      	beq.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003cca:	e099      	b.n	8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ccc:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d02d      	beq.n	8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cd8:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	08db      	lsrs	r3, r3, #3
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	4a84      	ldr	r2, [pc, #528]	; (8003ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d02:	4b7b      	ldr	r3, [pc, #492]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d32:	e087      	b.n	8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003efc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d46:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d76:	e065      	b.n	8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d8a:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dba:	e043      	b.n	8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dce:	4b48      	ldr	r3, [pc, #288]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003de2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dfe:	e021      	b.n	8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003e44:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	0a5b      	lsrs	r3, r3, #9
 8003e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e6a:	ee17 2a90 	vmov	r2, s15
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e72:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e98:	ee17 2a90 	vmov	r2, s15
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec6:	ee17 2a90 	vmov	r2, s15
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ece:	e008      	b.n	8003ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
}
 8003ee2:	bf00      	nop
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	03d09000 	.word	0x03d09000
 8003ef8:	46000000 	.word	0x46000000
 8003efc:	4c742400 	.word	0x4c742400
 8003f00:	4a742400 	.word	0x4a742400
 8003f04:	4af42400 	.word	0x4af42400

08003f08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f10:	4ba1      	ldr	r3, [pc, #644]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003f1a:	4b9f      	ldr	r3, [pc, #636]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	0d1b      	lsrs	r3, r3, #20
 8003f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f26:	4b9c      	ldr	r3, [pc, #624]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003f32:	4b99      	ldr	r3, [pc, #612]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	08db      	lsrs	r3, r3, #3
 8003f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8111 	beq.w	8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	f000 8083 	beq.w	8004064 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	f200 80a1 	bhi.w	80040a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d056      	beq.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f72:	e099      	b.n	80040a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f74:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02d      	beq.n	8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f80:	4b85      	ldr	r3, [pc, #532]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	08db      	lsrs	r3, r3, #3
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	4a84      	ldr	r2, [pc, #528]	; (800419c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b7b      	ldr	r3, [pc, #492]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fda:	e087      	b.n	80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004002:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800401e:	e065      	b.n	80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800402e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004032:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004042:	ed97 6a03 	vldr	s12, [r7, #12]
 8004046:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800404a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004062:	e043      	b.n	80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004076:	4b48      	ldr	r3, [pc, #288]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004086:	ed97 6a03 	vldr	s12, [r7, #12]
 800408a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800408e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040a6:	e021      	b.n	80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ba:	4b37      	ldr	r3, [pc, #220]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	0a5b      	lsrs	r3, r3, #9
 80040f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004106:	edd7 6a07 	vldr	s13, [r7, #28]
 800410a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800410e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004112:	ee17 2a90 	vmov	r2, s15
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800411a:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	0c1b      	lsrs	r3, r3, #16
 8004120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004124:	ee07 3a90 	vmov	s15, r3
 8004128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004134:	edd7 6a07 	vldr	s13, [r7, #28]
 8004138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004140:	ee17 2a90 	vmov	r2, s15
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800415e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004162:	edd7 6a07 	vldr	s13, [r7, #28]
 8004166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800416a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416e:	ee17 2a90 	vmov	r2, s15
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004176:	e008      	b.n	800418a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
}
 800418a:	bf00      	nop
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	58024400 	.word	0x58024400
 800419c:	03d09000 	.word	0x03d09000
 80041a0:	46000000 	.word	0x46000000
 80041a4:	4c742400 	.word	0x4c742400
 80041a8:	4a742400 	.word	0x4a742400
 80041ac:	4af42400 	.word	0x4af42400

080041b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041be:	4b53      	ldr	r3, [pc, #332]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d101      	bne.n	80041ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e099      	b.n	8004302 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041ce:	4b4f      	ldr	r3, [pc, #316]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a4e      	ldr	r2, [pc, #312]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80041d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041da:	f7fd f891 	bl	8001300 <HAL_GetTick>
 80041de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041e2:	f7fd f88d 	bl	8001300 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e086      	b.n	8004302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004200:	4b42      	ldr	r3, [pc, #264]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	493f      	ldr	r1, [pc, #252]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	628b      	str	r3, [r1, #40]	; 0x28
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	3b01      	subs	r3, #1
 800421a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	025b      	lsls	r3, r3, #9
 8004226:	b29b      	uxth	r3, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	3b01      	subs	r3, #1
 800423e:	061b      	lsls	r3, r3, #24
 8004240:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004244:	4931      	ldr	r1, [pc, #196]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800424a:	4b30      	ldr	r3, [pc, #192]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	492d      	ldr	r1, [pc, #180]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800425c:	4b2b      	ldr	r3, [pc, #172]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	f023 0220 	bic.w	r2, r3, #32
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4928      	ldr	r1, [pc, #160]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800426e:	4b27      	ldr	r3, [pc, #156]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	4a26      	ldr	r2, [pc, #152]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004274:	f023 0310 	bic.w	r3, r3, #16
 8004278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800427c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <RCCEx_PLL2_Config+0x160>)
 8004280:	4013      	ands	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	69d2      	ldr	r2, [r2, #28]
 8004286:	00d2      	lsls	r2, r2, #3
 8004288:	4920      	ldr	r1, [pc, #128]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	4a1e      	ldr	r2, [pc, #120]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 8004294:	f043 0310 	orr.w	r3, r3, #16
 8004298:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042ac:	e00f      	b.n	80042ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042b4:	4b15      	ldr	r3, [pc, #84]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042c0:	e005      	b.n	80042ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	4a11      	ldr	r2, [pc, #68]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042da:	f7fd f811 	bl	8001300 <HAL_GetTick>
 80042de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042e0:	e008      	b.n	80042f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042e2:	f7fd f80d 	bl	8001300 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e006      	b.n	8004302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <RCCEx_PLL2_Config+0x15c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	58024400 	.word	0x58024400
 8004310:	ffff0007 	.word	0xffff0007

08004314 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004322:	4b53      	ldr	r3, [pc, #332]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b03      	cmp	r3, #3
 800432c:	d101      	bne.n	8004332 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e099      	b.n	8004466 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004332:	4b4f      	ldr	r3, [pc, #316]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4e      	ldr	r2, [pc, #312]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433e:	f7fc ffdf 	bl	8001300 <HAL_GetTick>
 8004342:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004344:	e008      	b.n	8004358 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004346:	f7fc ffdb 	bl	8001300 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e086      	b.n	8004466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004358:	4b45      	ldr	r3, [pc, #276]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004364:	4b42      	ldr	r3, [pc, #264]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	051b      	lsls	r3, r3, #20
 8004372:	493f      	ldr	r1, [pc, #252]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004374:	4313      	orrs	r3, r2
 8004376:	628b      	str	r3, [r1, #40]	; 0x28
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	3b01      	subs	r3, #1
 800437e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	3b01      	subs	r3, #1
 8004388:	025b      	lsls	r3, r3, #9
 800438a:	b29b      	uxth	r3, r3
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	3b01      	subs	r3, #1
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	061b      	lsls	r3, r3, #24
 80043a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043a8:	4931      	ldr	r1, [pc, #196]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043ae:	4b30      	ldr	r3, [pc, #192]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	492d      	ldr	r1, [pc, #180]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	4928      	ldr	r1, [pc, #160]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	4a26      	ldr	r2, [pc, #152]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <RCCEx_PLL3_Config+0x160>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	69d2      	ldr	r2, [r2, #28]
 80043ea:	00d2      	lsls	r2, r2, #3
 80043ec:	4920      	ldr	r1, [pc, #128]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043f2:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a19      	ldr	r2, [pc, #100]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800440a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800440e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004410:	e00f      	b.n	8004432 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800441e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004422:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004424:	e005      	b.n	8004432 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	4a11      	ldr	r2, [pc, #68]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800442c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004430:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443e:	f7fc ff5f 	bl	8001300 <HAL_GetTick>
 8004442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004444:	e008      	b.n	8004458 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004446:	f7fc ff5b 	bl	8001300 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <RCCEx_PLL3_Config+0x15c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	58024400 	.word	0x58024400
 8004474:	ffff0007 	.word	0xffff0007

08004478 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e04a      	b.n	8004520 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fc fdb1 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2224      	movs	r2, #36	; 0x24
 80044a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f980 	bl	80047c0 <UART_SetConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e02a      	b.n	8004520 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 ffe0 	bl	8005498 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80044f6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0208 	orr.w	r2, r2, #8
 8004506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f001 f85f 	bl	80055dc <UART_CheckIdleState>
 800451e:	4603      	mov	r3, r0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	2b20      	cmp	r3, #32
 8004540:	d17b      	bne.n	800463a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_UART_Transmit+0x26>
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e074      	b.n	800463c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2221      	movs	r2, #33	; 0x21
 800455e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004562:	f7fc fecd 	bl	8001300 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	d108      	bne.n	8004594 <HAL_UART_Transmit+0x6c>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e003      	b.n	800459c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800459c:	e030      	b.n	8004600 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f001 f8c1 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e03d      	b.n	800463c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3302      	adds	r3, #2
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e007      	b.n	80045ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	3301      	adds	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1c8      	bne.n	800459e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2200      	movs	r2, #0
 8004614:	2140      	movs	r1, #64	; 0x40
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f001 f88a 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e006      	b.n	800463c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800463a:	2302      	movs	r3, #2
  }
}
 800463c:	4618      	mov	r0, r3
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b08f      	sub	sp, #60	; 0x3c
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8004656:	2302      	movs	r3, #2
 8004658:	e042      	b.n	80046e0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2224      	movs	r2, #36	; 0x24
 8004666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	61fb      	str	r3, [r7, #28]
   return(result);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f023 030c 	bic.w	r3, r3, #12
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800468a:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f043 0308 	orr.w	r3, r3, #8
 80046b0:	633b      	str	r3, [r7, #48]	; 0x30
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6979      	ldr	r1, [r7, #20]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	613b      	str	r3, [r7, #16]
   return(result);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e6      	bne.n	800469c <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	373c      	adds	r7, #60	; 0x3c
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b08f      	sub	sp, #60	; 0x3c
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_HalfDuplex_EnableReceiver+0x16>
 80046fe:	2302      	movs	r3, #2
 8004700:	e042      	b.n	8004788 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2224      	movs	r2, #36	; 0x24
 800470e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f023 030c 	bic.w	r3, r3, #12
 8004726:	637b      	str	r3, [r7, #52]	; 0x34
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004732:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e6      	bne.n	8004712 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	60bb      	str	r3, [r7, #8]
   return(result);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	633b      	str	r3, [r7, #48]	; 0x30
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6979      	ldr	r1, [r7, #20]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	613b      	str	r3, [r7, #16]
   return(result);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e6      	bne.n	8004744 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	373c      	adds	r7, #60	; 0x3c
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047aa:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4313      	orrs	r3, r2
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b092      	sub	sp, #72	; 0x48
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	431a      	orrs	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	431a      	orrs	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4bbe      	ldr	r3, [pc, #760]	; (8004ae8 <UART_SetConfig+0x328>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4ab3      	ldr	r2, [pc, #716]	; (8004aec <UART_SetConfig+0x32c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004828:	4313      	orrs	r3, r2
 800482a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	4baf      	ldr	r3, [pc, #700]	; (8004af0 <UART_SetConfig+0x330>)
 8004834:	4013      	ands	r3, r2
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800483c:	430b      	orrs	r3, r1
 800483e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	f023 010f 	bic.w	r1, r3, #15
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4aa6      	ldr	r2, [pc, #664]	; (8004af4 <UART_SetConfig+0x334>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d177      	bne.n	8004950 <UART_SetConfig+0x190>
 8004860:	4ba5      	ldr	r3, [pc, #660]	; (8004af8 <UART_SetConfig+0x338>)
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004868:	2b28      	cmp	r3, #40	; 0x28
 800486a:	d86d      	bhi.n	8004948 <UART_SetConfig+0x188>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0xb4>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004919 	.word	0x08004919
 8004878:	08004949 	.word	0x08004949
 800487c:	08004949 	.word	0x08004949
 8004880:	08004949 	.word	0x08004949
 8004884:	08004949 	.word	0x08004949
 8004888:	08004949 	.word	0x08004949
 800488c:	08004949 	.word	0x08004949
 8004890:	08004949 	.word	0x08004949
 8004894:	08004921 	.word	0x08004921
 8004898:	08004949 	.word	0x08004949
 800489c:	08004949 	.word	0x08004949
 80048a0:	08004949 	.word	0x08004949
 80048a4:	08004949 	.word	0x08004949
 80048a8:	08004949 	.word	0x08004949
 80048ac:	08004949 	.word	0x08004949
 80048b0:	08004949 	.word	0x08004949
 80048b4:	08004929 	.word	0x08004929
 80048b8:	08004949 	.word	0x08004949
 80048bc:	08004949 	.word	0x08004949
 80048c0:	08004949 	.word	0x08004949
 80048c4:	08004949 	.word	0x08004949
 80048c8:	08004949 	.word	0x08004949
 80048cc:	08004949 	.word	0x08004949
 80048d0:	08004949 	.word	0x08004949
 80048d4:	08004931 	.word	0x08004931
 80048d8:	08004949 	.word	0x08004949
 80048dc:	08004949 	.word	0x08004949
 80048e0:	08004949 	.word	0x08004949
 80048e4:	08004949 	.word	0x08004949
 80048e8:	08004949 	.word	0x08004949
 80048ec:	08004949 	.word	0x08004949
 80048f0:	08004949 	.word	0x08004949
 80048f4:	08004939 	.word	0x08004939
 80048f8:	08004949 	.word	0x08004949
 80048fc:	08004949 	.word	0x08004949
 8004900:	08004949 	.word	0x08004949
 8004904:	08004949 	.word	0x08004949
 8004908:	08004949 	.word	0x08004949
 800490c:	08004949 	.word	0x08004949
 8004910:	08004949 	.word	0x08004949
 8004914:	08004941 	.word	0x08004941
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491e:	e326      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004926:	e322      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492e:	e31e      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004936:	e31a      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004938:	2320      	movs	r3, #32
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800493e:	e316      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004946:	e312      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494e:	e30e      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a69      	ldr	r2, [pc, #420]	; (8004afc <UART_SetConfig+0x33c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d130      	bne.n	80049bc <UART_SetConfig+0x1fc>
 800495a:	4b67      	ldr	r3, [pc, #412]	; (8004af8 <UART_SetConfig+0x338>)
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b05      	cmp	r3, #5
 8004964:	d826      	bhi.n	80049b4 <UART_SetConfig+0x1f4>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <UART_SetConfig+0x1ac>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004985 	.word	0x08004985
 8004970:	0800498d 	.word	0x0800498d
 8004974:	08004995 	.word	0x08004995
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	2300      	movs	r3, #0
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498a:	e2f0      	b.n	8004f6e <UART_SetConfig+0x7ae>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004992:	e2ec      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499a:	e2e8      	b.n	8004f6e <UART_SetConfig+0x7ae>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a2:	e2e4      	b.n	8004f6e <UART_SetConfig+0x7ae>
 80049a4:	2320      	movs	r3, #32
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049aa:	e2e0      	b.n	8004f6e <UART_SetConfig+0x7ae>
 80049ac:	2340      	movs	r3, #64	; 0x40
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b2:	e2dc      	b.n	8004f6e <UART_SetConfig+0x7ae>
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ba:	e2d8      	b.n	8004f6e <UART_SetConfig+0x7ae>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a4f      	ldr	r2, [pc, #316]	; (8004b00 <UART_SetConfig+0x340>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d130      	bne.n	8004a28 <UART_SetConfig+0x268>
 80049c6:	4b4c      	ldr	r3, [pc, #304]	; (8004af8 <UART_SetConfig+0x338>)
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d826      	bhi.n	8004a20 <UART_SetConfig+0x260>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x218>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	08004a01 	.word	0x08004a01
 80049e4:	08004a09 	.word	0x08004a09
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f6:	e2ba      	b.n	8004f6e <UART_SetConfig+0x7ae>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fe:	e2b6      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a06:	e2b2      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0e:	e2ae      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a10:	2320      	movs	r3, #32
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a16:	e2aa      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e2a6      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e2a2      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a35      	ldr	r2, [pc, #212]	; (8004b04 <UART_SetConfig+0x344>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d130      	bne.n	8004a94 <UART_SetConfig+0x2d4>
 8004a32:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <UART_SetConfig+0x338>)
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d826      	bhi.n	8004a8c <UART_SetConfig+0x2cc>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0x284>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004a5d 	.word	0x08004a5d
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	08004a6d 	.word	0x08004a6d
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a62:	e284      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a64:	2304      	movs	r3, #4
 8004a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6a:	e280      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a72:	e27c      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7a:	e278      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a82:	e274      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a84:	2340      	movs	r3, #64	; 0x40
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8a:	e270      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e26c      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <UART_SetConfig+0x348>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d142      	bne.n	8004b24 <UART_SetConfig+0x364>
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <UART_SetConfig+0x338>)
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d838      	bhi.n	8004b1c <UART_SetConfig+0x35c>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x2f0>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ac9 	.word	0x08004ac9
 8004ab4:	08004ad1 	.word	0x08004ad1
 8004ab8:	08004ad9 	.word	0x08004ad9
 8004abc:	08004ae1 	.word	0x08004ae1
 8004ac0:	08004b0d 	.word	0x08004b0d
 8004ac4:	08004b15 	.word	0x08004b15
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ace:	e24e      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ad6:	e24a      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ade:	e246      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae6:	e242      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ae8:	cfff69f3 	.word	0xcfff69f3
 8004aec:	58000c00 	.word	0x58000c00
 8004af0:	11fff4ff 	.word	0x11fff4ff
 8004af4:	40011000 	.word	0x40011000
 8004af8:	58024400 	.word	0x58024400
 8004afc:	40004400 	.word	0x40004400
 8004b00:	40004800 	.word	0x40004800
 8004b04:	40004c00 	.word	0x40004c00
 8004b08:	40005000 	.word	0x40005000
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b12:	e22c      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004b14:	2340      	movs	r3, #64	; 0x40
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1a:	e228      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b22:	e224      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4ab1      	ldr	r2, [pc, #708]	; (8004df0 <UART_SetConfig+0x630>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d176      	bne.n	8004c1c <UART_SetConfig+0x45c>
 8004b2e:	4bb1      	ldr	r3, [pc, #708]	; (8004df4 <UART_SetConfig+0x634>)
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b36:	2b28      	cmp	r3, #40	; 0x28
 8004b38:	d86c      	bhi.n	8004c14 <UART_SetConfig+0x454>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <UART_SetConfig+0x380>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004be5 	.word	0x08004be5
 8004b44:	08004c15 	.word	0x08004c15
 8004b48:	08004c15 	.word	0x08004c15
 8004b4c:	08004c15 	.word	0x08004c15
 8004b50:	08004c15 	.word	0x08004c15
 8004b54:	08004c15 	.word	0x08004c15
 8004b58:	08004c15 	.word	0x08004c15
 8004b5c:	08004c15 	.word	0x08004c15
 8004b60:	08004bed 	.word	0x08004bed
 8004b64:	08004c15 	.word	0x08004c15
 8004b68:	08004c15 	.word	0x08004c15
 8004b6c:	08004c15 	.word	0x08004c15
 8004b70:	08004c15 	.word	0x08004c15
 8004b74:	08004c15 	.word	0x08004c15
 8004b78:	08004c15 	.word	0x08004c15
 8004b7c:	08004c15 	.word	0x08004c15
 8004b80:	08004bf5 	.word	0x08004bf5
 8004b84:	08004c15 	.word	0x08004c15
 8004b88:	08004c15 	.word	0x08004c15
 8004b8c:	08004c15 	.word	0x08004c15
 8004b90:	08004c15 	.word	0x08004c15
 8004b94:	08004c15 	.word	0x08004c15
 8004b98:	08004c15 	.word	0x08004c15
 8004b9c:	08004c15 	.word	0x08004c15
 8004ba0:	08004bfd 	.word	0x08004bfd
 8004ba4:	08004c15 	.word	0x08004c15
 8004ba8:	08004c15 	.word	0x08004c15
 8004bac:	08004c15 	.word	0x08004c15
 8004bb0:	08004c15 	.word	0x08004c15
 8004bb4:	08004c15 	.word	0x08004c15
 8004bb8:	08004c15 	.word	0x08004c15
 8004bbc:	08004c15 	.word	0x08004c15
 8004bc0:	08004c05 	.word	0x08004c05
 8004bc4:	08004c15 	.word	0x08004c15
 8004bc8:	08004c15 	.word	0x08004c15
 8004bcc:	08004c15 	.word	0x08004c15
 8004bd0:	08004c15 	.word	0x08004c15
 8004bd4:	08004c15 	.word	0x08004c15
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004c15 	.word	0x08004c15
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bea:	e1c0      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf2:	e1bc      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfa:	e1b8      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c02:	e1b4      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c04:	2320      	movs	r3, #32
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0a:	e1b0      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c0c:	2340      	movs	r3, #64	; 0x40
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c12:	e1ac      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1a:	e1a8      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a75      	ldr	r2, [pc, #468]	; (8004df8 <UART_SetConfig+0x638>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d130      	bne.n	8004c88 <UART_SetConfig+0x4c8>
 8004c26:	4b73      	ldr	r3, [pc, #460]	; (8004df4 <UART_SetConfig+0x634>)
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d826      	bhi.n	8004c80 <UART_SetConfig+0x4c0>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0x478>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c51 	.word	0x08004c51
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	08004c61 	.word	0x08004c61
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c71 	.word	0x08004c71
 8004c4c:	08004c79 	.word	0x08004c79
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c56:	e18a      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5e:	e186      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c66:	e182      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6e:	e17e      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c70:	2320      	movs	r3, #32
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c76:	e17a      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c78:	2340      	movs	r3, #64	; 0x40
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7e:	e176      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c86:	e172      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5b      	ldr	r2, [pc, #364]	; (8004dfc <UART_SetConfig+0x63c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d130      	bne.n	8004cf4 <UART_SetConfig+0x534>
 8004c92:	4b58      	ldr	r3, [pc, #352]	; (8004df4 <UART_SetConfig+0x634>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d826      	bhi.n	8004cec <UART_SetConfig+0x52c>
 8004c9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <UART_SetConfig+0x4e4>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cbd 	.word	0x08004cbd
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	08004ccd 	.word	0x08004ccd
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cc2:	e154      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cca:	e150      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd2:	e14c      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e148      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004cdc:	2320      	movs	r3, #32
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e144      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ce4:	2340      	movs	r3, #64	; 0x40
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e140      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e13c      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a41      	ldr	r2, [pc, #260]	; (8004e00 <UART_SetConfig+0x640>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	f040 8082 	bne.w	8004e04 <UART_SetConfig+0x644>
 8004d00:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <UART_SetConfig+0x634>)
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d08:	2b28      	cmp	r3, #40	; 0x28
 8004d0a:	d86d      	bhi.n	8004de8 <UART_SetConfig+0x628>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <UART_SetConfig+0x554>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004db9 	.word	0x08004db9
 8004d18:	08004de9 	.word	0x08004de9
 8004d1c:	08004de9 	.word	0x08004de9
 8004d20:	08004de9 	.word	0x08004de9
 8004d24:	08004de9 	.word	0x08004de9
 8004d28:	08004de9 	.word	0x08004de9
 8004d2c:	08004de9 	.word	0x08004de9
 8004d30:	08004de9 	.word	0x08004de9
 8004d34:	08004dc1 	.word	0x08004dc1
 8004d38:	08004de9 	.word	0x08004de9
 8004d3c:	08004de9 	.word	0x08004de9
 8004d40:	08004de9 	.word	0x08004de9
 8004d44:	08004de9 	.word	0x08004de9
 8004d48:	08004de9 	.word	0x08004de9
 8004d4c:	08004de9 	.word	0x08004de9
 8004d50:	08004de9 	.word	0x08004de9
 8004d54:	08004dc9 	.word	0x08004dc9
 8004d58:	08004de9 	.word	0x08004de9
 8004d5c:	08004de9 	.word	0x08004de9
 8004d60:	08004de9 	.word	0x08004de9
 8004d64:	08004de9 	.word	0x08004de9
 8004d68:	08004de9 	.word	0x08004de9
 8004d6c:	08004de9 	.word	0x08004de9
 8004d70:	08004de9 	.word	0x08004de9
 8004d74:	08004dd1 	.word	0x08004dd1
 8004d78:	08004de9 	.word	0x08004de9
 8004d7c:	08004de9 	.word	0x08004de9
 8004d80:	08004de9 	.word	0x08004de9
 8004d84:	08004de9 	.word	0x08004de9
 8004d88:	08004de9 	.word	0x08004de9
 8004d8c:	08004de9 	.word	0x08004de9
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004dd9 	.word	0x08004dd9
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004de9 	.word	0x08004de9
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004de9 	.word	0x08004de9
 8004db0:	08004de9 	.word	0x08004de9
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dbe:	e0d6      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e0d2      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004dc8:	2308      	movs	r3, #8
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e0ce      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e0ca      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004dd8:	2320      	movs	r3, #32
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dde:	e0c6      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de6:	e0c2      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e0be      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004df0:	40011400 	.word	0x40011400
 8004df4:	58024400 	.word	0x58024400
 8004df8:	40007800 	.word	0x40007800
 8004dfc:	40007c00 	.word	0x40007c00
 8004e00:	40011800 	.word	0x40011800
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4aad      	ldr	r2, [pc, #692]	; (80050c0 <UART_SetConfig+0x900>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d176      	bne.n	8004efc <UART_SetConfig+0x73c>
 8004e0e:	4bad      	ldr	r3, [pc, #692]	; (80050c4 <UART_SetConfig+0x904>)
 8004e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e16:	2b28      	cmp	r3, #40	; 0x28
 8004e18:	d86c      	bhi.n	8004ef4 <UART_SetConfig+0x734>
 8004e1a:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0x660>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004ec5 	.word	0x08004ec5
 8004e24:	08004ef5 	.word	0x08004ef5
 8004e28:	08004ef5 	.word	0x08004ef5
 8004e2c:	08004ef5 	.word	0x08004ef5
 8004e30:	08004ef5 	.word	0x08004ef5
 8004e34:	08004ef5 	.word	0x08004ef5
 8004e38:	08004ef5 	.word	0x08004ef5
 8004e3c:	08004ef5 	.word	0x08004ef5
 8004e40:	08004ecd 	.word	0x08004ecd
 8004e44:	08004ef5 	.word	0x08004ef5
 8004e48:	08004ef5 	.word	0x08004ef5
 8004e4c:	08004ef5 	.word	0x08004ef5
 8004e50:	08004ef5 	.word	0x08004ef5
 8004e54:	08004ef5 	.word	0x08004ef5
 8004e58:	08004ef5 	.word	0x08004ef5
 8004e5c:	08004ef5 	.word	0x08004ef5
 8004e60:	08004ed5 	.word	0x08004ed5
 8004e64:	08004ef5 	.word	0x08004ef5
 8004e68:	08004ef5 	.word	0x08004ef5
 8004e6c:	08004ef5 	.word	0x08004ef5
 8004e70:	08004ef5 	.word	0x08004ef5
 8004e74:	08004ef5 	.word	0x08004ef5
 8004e78:	08004ef5 	.word	0x08004ef5
 8004e7c:	08004ef5 	.word	0x08004ef5
 8004e80:	08004edd 	.word	0x08004edd
 8004e84:	08004ef5 	.word	0x08004ef5
 8004e88:	08004ef5 	.word	0x08004ef5
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004ef5 	.word	0x08004ef5
 8004e94:	08004ef5 	.word	0x08004ef5
 8004e98:	08004ef5 	.word	0x08004ef5
 8004e9c:	08004ef5 	.word	0x08004ef5
 8004ea0:	08004ee5 	.word	0x08004ee5
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08004ef5 	.word	0x08004ef5
 8004eac:	08004ef5 	.word	0x08004ef5
 8004eb0:	08004ef5 	.word	0x08004ef5
 8004eb4:	08004ef5 	.word	0x08004ef5
 8004eb8:	08004ef5 	.word	0x08004ef5
 8004ebc:	08004ef5 	.word	0x08004ef5
 8004ec0:	08004eed 	.word	0x08004eed
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e050      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e04c      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e048      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004edc:	2310      	movs	r3, #16
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee2:	e044      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e040      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004eec:	2340      	movs	r3, #64	; 0x40
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e03c      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efa:	e038      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a71      	ldr	r2, [pc, #452]	; (80050c8 <UART_SetConfig+0x908>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d130      	bne.n	8004f68 <UART_SetConfig+0x7a8>
 8004f06:	4b6f      	ldr	r3, [pc, #444]	; (80050c4 <UART_SetConfig+0x904>)
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	2b05      	cmp	r3, #5
 8004f10:	d826      	bhi.n	8004f60 <UART_SetConfig+0x7a0>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x758>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f31 	.word	0x08004f31
 8004f1c:	08004f39 	.word	0x08004f39
 8004f20:	08004f41 	.word	0x08004f41
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	2302      	movs	r3, #2
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e01a      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e016      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e012      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e00e      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004f50:	2320      	movs	r3, #32
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e00a      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e006      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e002      	b.n	8004f6e <UART_SetConfig+0x7ae>
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a55      	ldr	r2, [pc, #340]	; (80050c8 <UART_SetConfig+0x908>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	f040 80f8 	bne.w	800516a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	dc46      	bgt.n	8005010 <UART_SetConfig+0x850>
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	db75      	blt.n	8005072 <UART_SetConfig+0x8b2>
 8004f86:	3b02      	subs	r3, #2
 8004f88:	2b1e      	cmp	r3, #30
 8004f8a:	d872      	bhi.n	8005072 <UART_SetConfig+0x8b2>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0x7d4>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08005017 	.word	0x08005017
 8004f98:	08005073 	.word	0x08005073
 8004f9c:	0800501f 	.word	0x0800501f
 8004fa0:	08005073 	.word	0x08005073
 8004fa4:	08005073 	.word	0x08005073
 8004fa8:	08005073 	.word	0x08005073
 8004fac:	0800502f 	.word	0x0800502f
 8004fb0:	08005073 	.word	0x08005073
 8004fb4:	08005073 	.word	0x08005073
 8004fb8:	08005073 	.word	0x08005073
 8004fbc:	08005073 	.word	0x08005073
 8004fc0:	08005073 	.word	0x08005073
 8004fc4:	08005073 	.word	0x08005073
 8004fc8:	08005073 	.word	0x08005073
 8004fcc:	0800503f 	.word	0x0800503f
 8004fd0:	08005073 	.word	0x08005073
 8004fd4:	08005073 	.word	0x08005073
 8004fd8:	08005073 	.word	0x08005073
 8004fdc:	08005073 	.word	0x08005073
 8004fe0:	08005073 	.word	0x08005073
 8004fe4:	08005073 	.word	0x08005073
 8004fe8:	08005073 	.word	0x08005073
 8004fec:	08005073 	.word	0x08005073
 8004ff0:	08005073 	.word	0x08005073
 8004ff4:	08005073 	.word	0x08005073
 8004ff8:	08005073 	.word	0x08005073
 8004ffc:	08005073 	.word	0x08005073
 8005000:	08005073 	.word	0x08005073
 8005004:	08005073 	.word	0x08005073
 8005008:	08005073 	.word	0x08005073
 800500c:	08005065 	.word	0x08005065
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d02a      	beq.n	800506a <UART_SetConfig+0x8aa>
 8005014:	e02d      	b.n	8005072 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005016:	f7fe fe0d 	bl	8003c34 <HAL_RCCEx_GetD3PCLK1Freq>
 800501a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800501c:	e02f      	b.n	800507e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800501e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fe1c 	bl	8003c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800502c:	e027      	b.n	800507e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800502e:	f107 0318 	add.w	r3, r7, #24
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe ff68 	bl	8003f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800503c:	e01f      	b.n	800507e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <UART_SetConfig+0x904>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800504a:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <UART_SetConfig+0x904>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	08db      	lsrs	r3, r3, #3
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <UART_SetConfig+0x90c>)
 8005056:	fa22 f303 	lsr.w	r3, r2, r3
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800505c:	e00f      	b.n	800507e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <UART_SetConfig+0x90c>)
 8005060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005062:	e00c      	b.n	800507e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005064:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <UART_SetConfig+0x910>)
 8005066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005068:	e009      	b.n	800507e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005070:	e005      	b.n	800507e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800507c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 81ee 	beq.w	8005462 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <UART_SetConfig+0x914>)
 800508c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005090:	461a      	mov	r2, r3
 8005092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005094:	fbb3 f3f2 	udiv	r3, r3, r2
 8005098:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d305      	bcc.n	80050b6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d910      	bls.n	80050d8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80050bc:	e1d1      	b.n	8005462 <UART_SetConfig+0xca2>
 80050be:	bf00      	nop
 80050c0:	40011c00 	.word	0x40011c00
 80050c4:	58024400 	.word	0x58024400
 80050c8:	58000c00 	.word	0x58000c00
 80050cc:	03d09000 	.word	0x03d09000
 80050d0:	003d0900 	.word	0x003d0900
 80050d4:	08005dac 	.word	0x08005dac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050da:	2200      	movs	r2, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	60fa      	str	r2, [r7, #12]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	4ac0      	ldr	r2, [pc, #768]	; (80053e8 <UART_SetConfig+0xc28>)
 80050e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2200      	movs	r2, #0
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050fa:	f7fb f8f9 	bl	80002f0 <__aeabi_uldivmod>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	020b      	lsls	r3, r1, #8
 8005110:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005114:	0202      	lsls	r2, r0, #8
 8005116:	6979      	ldr	r1, [r7, #20]
 8005118:	6849      	ldr	r1, [r1, #4]
 800511a:	0849      	lsrs	r1, r1, #1
 800511c:	2000      	movs	r0, #0
 800511e:	460c      	mov	r4, r1
 8005120:	4605      	mov	r5, r0
 8005122:	eb12 0804 	adds.w	r8, r2, r4
 8005126:	eb43 0905 	adc.w	r9, r3, r5
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	469a      	mov	sl, r3
 8005132:	4693      	mov	fp, r2
 8005134:	4652      	mov	r2, sl
 8005136:	465b      	mov	r3, fp
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	f7fb f8d8 	bl	80002f0 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4613      	mov	r3, r2
 8005146:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514e:	d308      	bcc.n	8005162 <UART_SetConfig+0x9a2>
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005156:	d204      	bcs.n	8005162 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800515e:	60da      	str	r2, [r3, #12]
 8005160:	e17f      	b.n	8005462 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005168:	e17b      	b.n	8005462 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005172:	f040 80bd 	bne.w	80052f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005176:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800517a:	2b20      	cmp	r3, #32
 800517c:	dc48      	bgt.n	8005210 <UART_SetConfig+0xa50>
 800517e:	2b00      	cmp	r3, #0
 8005180:	db7b      	blt.n	800527a <UART_SetConfig+0xaba>
 8005182:	2b20      	cmp	r3, #32
 8005184:	d879      	bhi.n	800527a <UART_SetConfig+0xaba>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <UART_SetConfig+0x9cc>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	08005217 	.word	0x08005217
 8005190:	0800521f 	.word	0x0800521f
 8005194:	0800527b 	.word	0x0800527b
 8005198:	0800527b 	.word	0x0800527b
 800519c:	08005227 	.word	0x08005227
 80051a0:	0800527b 	.word	0x0800527b
 80051a4:	0800527b 	.word	0x0800527b
 80051a8:	0800527b 	.word	0x0800527b
 80051ac:	08005237 	.word	0x08005237
 80051b0:	0800527b 	.word	0x0800527b
 80051b4:	0800527b 	.word	0x0800527b
 80051b8:	0800527b 	.word	0x0800527b
 80051bc:	0800527b 	.word	0x0800527b
 80051c0:	0800527b 	.word	0x0800527b
 80051c4:	0800527b 	.word	0x0800527b
 80051c8:	0800527b 	.word	0x0800527b
 80051cc:	08005247 	.word	0x08005247
 80051d0:	0800527b 	.word	0x0800527b
 80051d4:	0800527b 	.word	0x0800527b
 80051d8:	0800527b 	.word	0x0800527b
 80051dc:	0800527b 	.word	0x0800527b
 80051e0:	0800527b 	.word	0x0800527b
 80051e4:	0800527b 	.word	0x0800527b
 80051e8:	0800527b 	.word	0x0800527b
 80051ec:	0800527b 	.word	0x0800527b
 80051f0:	0800527b 	.word	0x0800527b
 80051f4:	0800527b 	.word	0x0800527b
 80051f8:	0800527b 	.word	0x0800527b
 80051fc:	0800527b 	.word	0x0800527b
 8005200:	0800527b 	.word	0x0800527b
 8005204:	0800527b 	.word	0x0800527b
 8005208:	0800527b 	.word	0x0800527b
 800520c:	0800526d 	.word	0x0800526d
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d02e      	beq.n	8005272 <UART_SetConfig+0xab2>
 8005214:	e031      	b.n	800527a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005216:	f7fd fb23 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 800521a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800521c:	e033      	b.n	8005286 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521e:	f7fd fb35 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8005222:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005224:	e02f      	b.n	8005286 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe fd18 	bl	8003c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005234:	e027      	b.n	8005286 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005236:	f107 0318 	add.w	r3, r7, #24
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe fe64 	bl	8003f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005244:	e01f      	b.n	8005286 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005246:	4b69      	ldr	r3, [pc, #420]	; (80053ec <UART_SetConfig+0xc2c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005252:	4b66      	ldr	r3, [pc, #408]	; (80053ec <UART_SetConfig+0xc2c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	08db      	lsrs	r3, r3, #3
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	4a64      	ldr	r2, [pc, #400]	; (80053f0 <UART_SetConfig+0xc30>)
 800525e:	fa22 f303 	lsr.w	r3, r2, r3
 8005262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005264:	e00f      	b.n	8005286 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005266:	4b62      	ldr	r3, [pc, #392]	; (80053f0 <UART_SetConfig+0xc30>)
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800526a:	e00c      	b.n	8005286 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800526c:	4b61      	ldr	r3, [pc, #388]	; (80053f4 <UART_SetConfig+0xc34>)
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005270:	e009      	b.n	8005286 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005278:	e005      	b.n	8005286 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80ea 	beq.w	8005462 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	4a55      	ldr	r2, [pc, #340]	; (80053e8 <UART_SetConfig+0xc28>)
 8005294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005298:	461a      	mov	r2, r3
 800529a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529c:	fbb3 f3f2 	udiv	r3, r3, r2
 80052a0:	005a      	lsls	r2, r3, #1
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	441a      	add	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	2b0f      	cmp	r3, #15
 80052b8:	d916      	bls.n	80052e8 <UART_SetConfig+0xb28>
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c0:	d212      	bcs.n	80052e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f023 030f 	bic.w	r3, r3, #15
 80052ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052da:	4313      	orrs	r3, r2
 80052dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	e0bc      	b.n	8005462 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80052ee:	e0b8      	b.n	8005462 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	dc4b      	bgt.n	8005390 <UART_SetConfig+0xbd0>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f2c0 8087 	blt.w	800540c <UART_SetConfig+0xc4c>
 80052fe:	2b20      	cmp	r3, #32
 8005300:	f200 8084 	bhi.w	800540c <UART_SetConfig+0xc4c>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0xb4c>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	08005397 	.word	0x08005397
 8005310:	0800539f 	.word	0x0800539f
 8005314:	0800540d 	.word	0x0800540d
 8005318:	0800540d 	.word	0x0800540d
 800531c:	080053a7 	.word	0x080053a7
 8005320:	0800540d 	.word	0x0800540d
 8005324:	0800540d 	.word	0x0800540d
 8005328:	0800540d 	.word	0x0800540d
 800532c:	080053b7 	.word	0x080053b7
 8005330:	0800540d 	.word	0x0800540d
 8005334:	0800540d 	.word	0x0800540d
 8005338:	0800540d 	.word	0x0800540d
 800533c:	0800540d 	.word	0x0800540d
 8005340:	0800540d 	.word	0x0800540d
 8005344:	0800540d 	.word	0x0800540d
 8005348:	0800540d 	.word	0x0800540d
 800534c:	080053c7 	.word	0x080053c7
 8005350:	0800540d 	.word	0x0800540d
 8005354:	0800540d 	.word	0x0800540d
 8005358:	0800540d 	.word	0x0800540d
 800535c:	0800540d 	.word	0x0800540d
 8005360:	0800540d 	.word	0x0800540d
 8005364:	0800540d 	.word	0x0800540d
 8005368:	0800540d 	.word	0x0800540d
 800536c:	0800540d 	.word	0x0800540d
 8005370:	0800540d 	.word	0x0800540d
 8005374:	0800540d 	.word	0x0800540d
 8005378:	0800540d 	.word	0x0800540d
 800537c:	0800540d 	.word	0x0800540d
 8005380:	0800540d 	.word	0x0800540d
 8005384:	0800540d 	.word	0x0800540d
 8005388:	0800540d 	.word	0x0800540d
 800538c:	080053ff 	.word	0x080053ff
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d037      	beq.n	8005404 <UART_SetConfig+0xc44>
 8005394:	e03a      	b.n	800540c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005396:	f7fd fa63 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 800539a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800539c:	e03c      	b.n	8005418 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800539e:	f7fd fa75 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 80053a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053a4:	e038      	b.n	8005418 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fc58 	bl	8003c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053b4:	e030      	b.n	8005418 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053b6:	f107 0318 	add.w	r3, r7, #24
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fda4 	bl	8003f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053c4:	e028      	b.n	8005418 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <UART_SetConfig+0xc2c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d012      	beq.n	80053f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053d2:	4b06      	ldr	r3, [pc, #24]	; (80053ec <UART_SetConfig+0xc2c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <UART_SetConfig+0xc30>)
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053e4:	e018      	b.n	8005418 <UART_SetConfig+0xc58>
 80053e6:	bf00      	nop
 80053e8:	08005dac 	.word	0x08005dac
 80053ec:	58024400 	.word	0x58024400
 80053f0:	03d09000 	.word	0x03d09000
 80053f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80053f8:	4b24      	ldr	r3, [pc, #144]	; (800548c <UART_SetConfig+0xccc>)
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053fc:	e00c      	b.n	8005418 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053fe:	4b24      	ldr	r3, [pc, #144]	; (8005490 <UART_SetConfig+0xcd0>)
 8005400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005402:	e009      	b.n	8005418 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800540a:	e005      	b.n	8005418 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005416:	bf00      	nop
    }

    if (pclk != 0U)
 8005418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d021      	beq.n	8005462 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <UART_SetConfig+0xcd4>)
 8005424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005428:	461a      	mov	r2, r3
 800542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	441a      	add	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d909      	bls.n	800545c <UART_SetConfig+0xc9c>
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544e:	d205      	bcs.n	800545c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	b29a      	uxth	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60da      	str	r2, [r3, #12]
 800545a:	e002      	b.n	8005462 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2201      	movs	r2, #1
 8005466:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2201      	movs	r2, #1
 800546e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2200      	movs	r2, #0
 800547c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800547e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005482:	4618      	mov	r0, r3
 8005484:	3748      	adds	r7, #72	; 0x48
 8005486:	46bd      	mov	sp, r7
 8005488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548c:	03d09000 	.word	0x03d09000
 8005490:	003d0900 	.word	0x003d0900
 8005494:	08005dac 	.word	0x08005dac

08005498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01a      	beq.n	80055ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005596:	d10a      	bne.n	80055ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b098      	sub	sp, #96	; 0x60
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055ec:	f7fb fe88 	bl	8001300 <HAL_GetTick>
 80055f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d12f      	bne.n	8005660 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005608:	2200      	movs	r2, #0
 800560a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f88e 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d022      	beq.n	8005660 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562e:	653b      	str	r3, [r7, #80]	; 0x50
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
 800563a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800563e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e6      	bne.n	800561a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e063      	b.n	8005728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d149      	bne.n	8005702 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800566e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005676:	2200      	movs	r2, #0
 8005678:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f857 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d03c      	beq.n	8005702 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	623b      	str	r3, [r7, #32]
   return(result);
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800569c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a6:	633b      	str	r3, [r7, #48]	; 0x30
 80056a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e6      	bne.n	8005688 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056da:	61fa      	str	r2, [r7, #28]
 80056dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	69b9      	ldr	r1, [r7, #24]
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	617b      	str	r3, [r7, #20]
   return(result);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e012      	b.n	8005728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3758      	adds	r7, #88	; 0x58
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	e049      	b.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d045      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574a:	f7fb fdd9 	bl	8001300 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	429a      	cmp	r2, r3
 8005758:	d302      	bcc.n	8005760 <UART_WaitOnFlagUntilTimeout+0x30>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e048      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d031      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b08      	cmp	r3, #8
 800577e:	d110      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2208      	movs	r2, #8
 8005786:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f839 	bl	8005800 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2208      	movs	r2, #8
 8005792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e029      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b0:	d111      	bne.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f81f 	bl	8005800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e00f      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4013      	ands	r3, r2
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d0a6      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b095      	sub	sp, #84	; 0x54
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800581c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005826:	643b      	str	r3, [r7, #64]	; 0x40
 8005828:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800582c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e6      	bne.n	8005808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	61fb      	str	r3, [r7, #28]
   return(result);
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <UART_EndRxTransfer+0xc8>)
 800584e:	4013      	ands	r3, r2
 8005850:	64bb      	str	r3, [r7, #72]	; 0x48
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3308      	adds	r3, #8
 8005858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800585a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e5      	bne.n	800583a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d118      	bne.n	80058a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	60bb      	str	r3, [r7, #8]
   return(result);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f023 0310 	bic.w	r3, r3, #16
 800588a:	647b      	str	r3, [r7, #68]	; 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6979      	ldr	r1, [r7, #20]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	613b      	str	r3, [r7, #16]
   return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e6      	bne.n	8005876 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 80058bc:	bf00      	nop
 80058be:	3754      	adds	r7, #84	; 0x54
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	effffffe 	.word	0xeffffffe

080058cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80058de:	2302      	movs	r3, #2
 80058e0:	e027      	b.n	8005932 <HAL_UARTEx_DisableFifoMode+0x66>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2224      	movs	r2, #36	; 0x24
 80058ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005952:	2302      	movs	r3, #2
 8005954:	e02d      	b.n	80059b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2224      	movs	r2, #36	; 0x24
 8005962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f850 	bl	8005a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e02d      	b.n	8005a2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2224      	movs	r2, #36	; 0x24
 80059de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f812 	bl	8005a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d108      	bne.n	8005a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a58:	e031      	b.n	8005abe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a5a:	2310      	movs	r3, #16
 8005a5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a5e:	2310      	movs	r3, #16
 8005a60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	0e5b      	lsrs	r3, r3, #25
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	0f5b      	lsrs	r3, r3, #29
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	7b3a      	ldrb	r2, [r7, #12]
 8005a86:	4911      	ldr	r1, [pc, #68]	; (8005acc <UARTEx_SetNbDataToProcess+0x94>)
 8005a88:	5c8a      	ldrb	r2, [r1, r2]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a8e:	7b3a      	ldrb	r2, [r7, #12]
 8005a90:	490f      	ldr	r1, [pc, #60]	; (8005ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8005a92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	7b7a      	ldrb	r2, [r7, #13]
 8005aa4:	4909      	ldr	r1, [pc, #36]	; (8005acc <UARTEx_SetNbDataToProcess+0x94>)
 8005aa6:	5c8a      	ldrb	r2, [r1, r2]
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005aac:	7b7a      	ldrb	r2, [r7, #13]
 8005aae:	4908      	ldr	r1, [pc, #32]	; (8005ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ab0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	08005dc4 	.word	0x08005dc4
 8005ad0:	08005dcc 	.word	0x08005dcc

08005ad4 <memset>:
 8005ad4:	4402      	add	r2, r0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d100      	bne.n	8005ade <memset+0xa>
 8005adc:	4770      	bx	lr
 8005ade:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae2:	e7f9      	b.n	8005ad8 <memset+0x4>

08005ae4 <__libc_init_array>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4d0d      	ldr	r5, [pc, #52]	; (8005b1c <__libc_init_array+0x38>)
 8005ae8:	4c0d      	ldr	r4, [pc, #52]	; (8005b20 <__libc_init_array+0x3c>)
 8005aea:	1b64      	subs	r4, r4, r5
 8005aec:	10a4      	asrs	r4, r4, #2
 8005aee:	2600      	movs	r6, #0
 8005af0:	42a6      	cmp	r6, r4
 8005af2:	d109      	bne.n	8005b08 <__libc_init_array+0x24>
 8005af4:	4d0b      	ldr	r5, [pc, #44]	; (8005b24 <__libc_init_array+0x40>)
 8005af6:	4c0c      	ldr	r4, [pc, #48]	; (8005b28 <__libc_init_array+0x44>)
 8005af8:	f000 f826 	bl	8005b48 <_init>
 8005afc:	1b64      	subs	r4, r4, r5
 8005afe:	10a4      	asrs	r4, r4, #2
 8005b00:	2600      	movs	r6, #0
 8005b02:	42a6      	cmp	r6, r4
 8005b04:	d105      	bne.n	8005b12 <__libc_init_array+0x2e>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0c:	4798      	blx	r3
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7ee      	b.n	8005af0 <__libc_init_array+0xc>
 8005b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b16:	4798      	blx	r3
 8005b18:	3601      	adds	r6, #1
 8005b1a:	e7f2      	b.n	8005b02 <__libc_init_array+0x1e>
 8005b1c:	08005ddc 	.word	0x08005ddc
 8005b20:	08005ddc 	.word	0x08005ddc
 8005b24:	08005ddc 	.word	0x08005ddc
 8005b28:	08005de0 	.word	0x08005de0

08005b2c <memcpy>:
 8005b2c:	440a      	add	r2, r1
 8005b2e:	4291      	cmp	r1, r2
 8005b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b34:	d100      	bne.n	8005b38 <memcpy+0xc>
 8005b36:	4770      	bx	lr
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b42:	4291      	cmp	r1, r2
 8005b44:	d1f9      	bne.n	8005b3a <memcpy+0xe>
 8005b46:	bd10      	pop	{r4, pc}

08005b48 <_init>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr

08005b54 <_fini>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr
