
Projet_Eve_servo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c0  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000148  24000010  08005c00  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000158  08005c00  00020158  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f9f6  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000020ae  00000000  00000000  0002fa77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ae0  00000000  00000000  00031b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f979  00000000  00000000  00032608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010644  00000000  00000000  00061f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132baa  00000000  00000000  000725c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000083f  00000000  00000000  001a516f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002b68  00000000  00000000  001a59b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001a8518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005958 	.word	0x08005958

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	08005958 	.word	0x08005958

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <dyn2_crc>:




unsigned short dyn2_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, size_t data_blk_size)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80005f8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005fc:	6019      	str	r1, [r3, #0]
 80005fe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000602:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800060c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000610:	4602      	mov	r2, r0
 8000612:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8000614:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000618:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <dyn2_crc+0xd4>)
 800061e:	4618      	mov	r0, r3
 8000620:	4611      	mov	r1, r2
 8000622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000626:	461a      	mov	r2, r3
 8000628:	f005 f988 	bl	800593c <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 800062c:	2300      	movs	r3, #0
 800062e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000632:	e031      	b.n	8000698 <dyn2_crc+0xac>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000634:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000638:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29a      	uxth	r2, r3
 8000642:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000646:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800064a:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 800064e:	6809      	ldr	r1, [r1, #0]
 8000650:	440b      	add	r3, r1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4053      	eors	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000660:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000664:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	b21a      	sxth	r2, r3
 800066e:	f8b7 1214 	ldrh.w	r1, [r7, #532]	; 0x214
 8000672:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800067a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800067e:	b21b      	sxth	r3, r3
 8000680:	4053      	eors	r3, r2
 8000682:	b21a      	sxth	r2, r3
 8000684:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000688:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800068c:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 800068e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000692:	3301      	adds	r3, #1
 8000694:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000698:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 800069c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80006a0:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d8c4      	bhi.n	8000634 <dyn2_crc+0x48>
	}
	return crc_accum;
 80006aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80006ae:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80006b2:	881b      	ldrh	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	08005970 	.word	0x08005970

080006c4 <dyn2_append_crc>:
uint8_t* dyn2_append_crc(uint8_t* instruction,uint16_t bufferSize){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	807b      	strh	r3, [r7, #2]
		return NULL;
	}

	memcpy(instruction_sent, instruction, bufferSize);
	*/
	unsigned short crc = dyn2_crc(0, instruction, bufferSize - 2);
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	3b02      	subs	r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff ff87 	bl	80005ec <dyn2_crc>
 80006de:	4603      	mov	r3, r0
 80006e0:	81fb      	strh	r3, [r7, #14]
	unsigned char crc_l = crc & 0x00FF;
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	737b      	strb	r3, [r7, #13]
	unsigned char crc_h = (crc >> 8) & 0x00FF;
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	733b      	strb	r3, [r7, #12]

	instruction[bufferSize - 2] = crc_l;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	3b02      	subs	r3, #2
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	7b7a      	ldrb	r2, [r7, #13]
 80006f8:	701a      	strb	r2, [r3, #0]
	instruction[bufferSize - 1] = crc_h;
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	7b3a      	ldrb	r2, [r7, #12]
 8000704:	701a      	strb	r2, [r3, #0]

	return instruction;
 8000706:	687b      	ldr	r3, [r7, #4]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <dyn2_send>:
	// Send the string through UART
	HAL_UART_Transmit(&huart3, (uint8_t*)arrayString, strlen(arrayString), HAL_MAX_DELAY);
}

// int dyn2_send(..., uint8_t * buffer, uint16_t size)
int dyn2_send(uint8_t* buffer,uint16_t size){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]

	//dyn2_debug_sendArrayAsString(buffer_crc, size); // for debuging purposes

	HAL_HalfDuplex_EnableTransmitter(&huart4);
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <dyn2_send+0x3c>)
 800071e:	f003 fe99 	bl	8004454 <HAL_HalfDuplex_EnableTransmitter>

	HAL_UART_Transmit(&huart4, buffer, size, TIMEOUT);
 8000722:	887a      	ldrh	r2, [r7, #2]
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <dyn2_send+0x3c>)
 800072a:	f003 fe05 	bl	8004338 <HAL_UART_Transmit>
	// Wait until UART transmission is complete
	while (HAL_UART_GetState(&huart4) != HAL_UART_STATE_READY);
 800072e:	bf00      	nop
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <dyn2_send+0x3c>)
 8000732:	f003 ff37 	bl	80045a4 <HAL_UART_GetState>
 8000736:	4603      	mov	r3, r0
 8000738:	2b20      	cmp	r3, #32
 800073a:	d1f9      	bne.n	8000730 <dyn2_send+0x20>
	HAL_HalfDuplex_EnableReceiver(&huart4);
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <dyn2_send+0x3c>)
 800073e:	f003 fedd 	bl	80044fc <HAL_HalfDuplex_EnableReceiver>

	return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2400002c 	.word	0x2400002c

08000750 <dyn2_led>:
	uint16_t size = (uint16_t) NbOfElements(Dynamixel_PING);

	dyn2_send(Dynamixel_PING,size);
}
// Status 1 : Led ON, status 0 : Led OFF
int dyn2_led(uint8_t id,int status){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
//			/*débutparam, address 65:*/ ,0x41,0x00
//			/*value in the address*/,0x01
//			/*on calcule le CRC après */,0x00,0x00};
	uint8_t DYN2_LED[13];
	// HEADER
	DYN2_LED[0] = HEADER_1;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <dyn2_led+0x8c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	723b      	strb	r3, [r7, #8]
	DYN2_LED[1] = HEADER_2;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <dyn2_led+0x90>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	727b      	strb	r3, [r7, #9]
	DYN2_LED[2] = HEADER_3;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <dyn2_led+0x94>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	72bb      	strb	r3, [r7, #10]
	DYN2_LED[3] = HEADER_4;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <dyn2_led+0x98>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	72fb      	strb	r3, [r7, #11]
	// ID
	DYN2_LED[4]= id;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	733b      	strb	r3, [r7, #12]
	// LENGTH
	DYN2_LED[5]= NbOfElements(DYN2_LED)- 7; // tkt ca marche
 8000778:	2306      	movs	r3, #6
 800077a:	737b      	strb	r3, [r7, #13]
	DYN2_LED[6]= 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	73bb      	strb	r3, [r7, #14]
	// INSTRUCTION
	DYN2_LED[7]= WRITE;
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <dyn2_led+0x9c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	73fb      	strb	r3, [r7, #15]
	// PARAMETERS
	// ADDRRESS
	DYN2_LED[8]= ADDRESS_LED;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <dyn2_led+0xa0>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	743b      	strb	r3, [r7, #16]
	DYN2_LED[9]= 0x00;
 800078c:	2300      	movs	r3, #0
 800078e:	747b      	strb	r3, [r7, #17]
	// VALUE
	switch(status){
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <dyn2_led+0x4e>
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d004      	beq.n	80007a6 <dyn2_led+0x56>
 800079c:	e007      	b.n	80007ae <dyn2_led+0x5e>
	case 0:
		DYN2_LED[10]=LED_OFF;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <dyn2_led+0xa4>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	74bb      	strb	r3, [r7, #18]
		break;
 80007a4:	e006      	b.n	80007b4 <dyn2_led+0x64>
	case 1:
		DYN2_LED[10]=LED_ON;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <dyn2_led+0xa8>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	74bb      	strb	r3, [r7, #18]
		break;
 80007ac:	e002      	b.n	80007b4 <dyn2_led+0x64>
	default :
		return ERROR_LED_VALUE;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <dyn2_led+0xac>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	e00f      	b.n	80007d4 <dyn2_led+0x84>
	}
	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_LED);
 80007b4:	230d      	movs	r3, #13
 80007b6:	83fb      	strh	r3, [r7, #30]
	uint8_t* DYN2_LED_CRC = dyn2_append_crc(DYN2_LED,size);
 80007b8:	8bfa      	ldrh	r2, [r7, #30]
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff7f 	bl	80006c4 <dyn2_append_crc>
 80007c6:	61b8      	str	r0, [r7, #24]

	dyn2_send(DYN2_LED_CRC,size);
 80007c8:	8bfb      	ldrh	r3, [r7, #30]
 80007ca:	4619      	mov	r1, r3
 80007cc:	69b8      	ldr	r0, [r7, #24]
 80007ce:	f7ff ff9f 	bl	8000710 <dyn2_send>

	return 0;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08005b95 	.word	0x08005b95
 80007e0:	08005b96 	.word	0x08005b96
 80007e4:	08005b97 	.word	0x08005b97
 80007e8:	08005b98 	.word	0x08005b98
 80007ec:	08005b94 	.word	0x08005b94
 80007f0:	08005b9a 	.word	0x08005b9a
 80007f4:	08005ba7 	.word	0x08005ba7
 80007f8:	08005ba5 	.word	0x08005ba5
 80007fc:	08005b9c 	.word	0x08005b9c

08000800 <dyn2_torque>:

// TORQUE_ON => writing in EEPROM is IMPOSSIBLE and the motor can rotate, TORQUE_OFF =>
int dyn2_torque(uint8_t ID,int mode){
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
	uint8_t DYN2_TORQUE[13];
	// HEADER
	DYN2_TORQUE[0] = HEADER_1;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <dyn2_torque+0x8c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	723b      	strb	r3, [r7, #8]
	DYN2_TORQUE[1] = HEADER_2;
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <dyn2_torque+0x90>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	727b      	strb	r3, [r7, #9]
	DYN2_TORQUE[2] = HEADER_3;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <dyn2_torque+0x94>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	72bb      	strb	r3, [r7, #10]
	DYN2_TORQUE[3] = HEADER_4;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <dyn2_torque+0x98>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	72fb      	strb	r3, [r7, #11]
	// ID
	DYN2_TORQUE[4]= ID;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	733b      	strb	r3, [r7, #12]
	// LENGTH
	DYN2_TORQUE[5]= NbOfElements(DYN2_TORQUE)- 7; // tkt ca marche
 8000828:	2306      	movs	r3, #6
 800082a:	737b      	strb	r3, [r7, #13]
	DYN2_TORQUE[6]= 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	73bb      	strb	r3, [r7, #14]
	// INSTRUCTION
	DYN2_TORQUE[7]= WRITE;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <dyn2_torque+0x9c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	73fb      	strb	r3, [r7, #15]
	// PARAMETERS
	// ADDRRESS
	DYN2_TORQUE[8]= ADDRESS_TORQUE;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <dyn2_torque+0xa0>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	743b      	strb	r3, [r7, #16]
	DYN2_TORQUE[9]= 0x00;
 800083c:	2300      	movs	r3, #0
 800083e:	747b      	strb	r3, [r7, #17]
	// VALUE
	switch(mode){
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d003      	beq.n	800084e <dyn2_torque+0x4e>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d004      	beq.n	8000856 <dyn2_torque+0x56>
 800084c:	e007      	b.n	800085e <dyn2_torque+0x5e>
	case 0:
		DYN2_TORQUE[10]=TORQUE_OFF;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <dyn2_torque+0xa4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	74bb      	strb	r3, [r7, #18]
		break;
 8000854:	e006      	b.n	8000864 <dyn2_torque+0x64>
	case 1:
		DYN2_TORQUE[10]=TORQUE_ON;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <dyn2_torque+0xa8>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	74bb      	strb	r3, [r7, #18]
		break;
 800085c:	e002      	b.n	8000864 <dyn2_torque+0x64>
	default :
		return ERROR_TORQUE_VALUE;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <dyn2_torque+0xac>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	e00f      	b.n	8000884 <dyn2_torque+0x84>
	}

	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_TORQUE);
 8000864:	230d      	movs	r3, #13
 8000866:	83fb      	strh	r3, [r7, #30]
	uint8_t* DYN2_TORQUE_CRC = dyn2_append_crc(DYN2_TORQUE,size);
 8000868:	8bfa      	ldrh	r2, [r7, #30]
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff27 	bl	80006c4 <dyn2_append_crc>
 8000876:	61b8      	str	r0, [r7, #24]

	dyn2_send(DYN2_TORQUE_CRC,size);
 8000878:	8bfb      	ldrh	r3, [r7, #30]
 800087a:	4619      	mov	r1, r3
 800087c:	69b8      	ldr	r0, [r7, #24]
 800087e:	f7ff ff47 	bl	8000710 <dyn2_send>
	return 0;
 8000882:	2300      	movs	r3, #0

}
 8000884:	4618      	mov	r0, r3
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	08005b95 	.word	0x08005b95
 8000890:	08005b96 	.word	0x08005b96
 8000894:	08005b97 	.word	0x08005b97
 8000898:	08005b98 	.word	0x08005b98
 800089c:	08005b94 	.word	0x08005b94
 80008a0:	08005b99 	.word	0x08005b99
 80008a4:	08005ba6 	.word	0x08005ba6
 80008a8:	08005ba4 	.word	0x08005ba4
 80008ac:	08005ba0 	.word	0x08005ba0

080008b0 <dyn2_position>:

void dyn2_position(uint8_t ID,float angleInDeg) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	ed87 0a00 	vstr	s0, [r7]
 80008bc:	71fb      	strb	r3, [r7, #7]
	// Value range: 0 to 4095
	uint8_t DYN2_POSITION[16];
	// HEADER
	DYN2_POSITION[0] = HEADER_1;
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <dyn2_position+0xa8>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	733b      	strb	r3, [r7, #12]
	DYN2_POSITION[1] = HEADER_2;
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <dyn2_position+0xac>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	737b      	strb	r3, [r7, #13]
	DYN2_POSITION[2] = HEADER_3;
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <dyn2_position+0xb0>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	73bb      	strb	r3, [r7, #14]
	DYN2_POSITION[3] = HEADER_4;
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <dyn2_position+0xb4>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	73fb      	strb	r3, [r7, #15]
	// ID
	DYN2_POSITION[4]= ID;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	743b      	strb	r3, [r7, #16]
	// LENGTH
	DYN2_POSITION[5]= NbOfElements(DYN2_POSITION)- 7; // tkt ca marche
 80008da:	2309      	movs	r3, #9
 80008dc:	747b      	strb	r3, [r7, #17]
	DYN2_POSITION[6]= 0x00;
 80008de:	2300      	movs	r3, #0
 80008e0:	74bb      	strb	r3, [r7, #18]
	// INSTRUCTION
	DYN2_POSITION[7]= WRITE;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <dyn2_position+0xb8>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	74fb      	strb	r3, [r7, #19]
	// PARAMETERS
	// ADDRRESS
	DYN2_POSITION[8]= ADDRESS_POSITION;
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <dyn2_position+0xbc>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	753b      	strb	r3, [r7, #20]
	DYN2_POSITION[9]= 0x00;
 80008ee:	2300      	movs	r3, #0
 80008f0:	757b      	strb	r3, [r7, #21]
	// VALUE
	if(angleInDeg>360){
 80008f2:	edd7 7a00 	vldr	s15, [r7]
 80008f6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000970 <dyn2_position+0xc0>
 80008fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000902:	dd01      	ble.n	8000908 <dyn2_position+0x58>
		angleInDeg = 360;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <dyn2_position+0xc4>)
 8000906:	603b      	str	r3, [r7, #0]
	}
	int Angle_Value =(int) (angleInDeg/0.088);
 8000908:	edd7 7a00 	vldr	s15, [r7]
 800090c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000910:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000950 <dyn2_position+0xa0>
 8000914:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000918:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800091c:	ee17 3a90 	vmov	r3, s15
 8000920:	627b      	str	r3, [r7, #36]	; 0x24

	DYN2_POSITION[10]=TORQUE_OFF;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <dyn2_position+0xc8>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	75bb      	strb	r3, [r7, #22]


	// SENDING
	uint16_t size = (uint16_t) NbOfElements(DYN2_POSITION);
 8000928:	2310      	movs	r3, #16
 800092a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t* DYN2_POSITION_CRC = dyn2_append_crc(DYN2_POSITION,size);
 800092c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fec5 	bl	80006c4 <dyn2_append_crc>
 800093a:	61f8      	str	r0, [r7, #28]

	dyn2_send(DYN2_POSITION_CRC,size);
 800093c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800093e:	4619      	mov	r1, r3
 8000940:	69f8      	ldr	r0, [r7, #28]
 8000942:	f7ff fee5 	bl	8000710 <dyn2_send>

//	uint8_t Dynamixel_ChangePosition_XL430[] = {0xFF, 0xFF, 0xFD, 0x00,/*id*/ 0x01, /*length*/0x09, 0x00,/*type instruction, ici write*/0x03
//			/*débutparam, address 116:*/ ,0x74,0x00
//			/*value in the address :2048*/,0x00,0x08,0x00,0x00
//			/*CRC*/				,0xCA,0x89};
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	020c49ba 	.word	0x020c49ba
 8000954:	3fb6872b 	.word	0x3fb6872b
 8000958:	08005b95 	.word	0x08005b95
 800095c:	08005b96 	.word	0x08005b96
 8000960:	08005b97 	.word	0x08005b97
 8000964:	08005b98 	.word	0x08005b98
 8000968:	08005b94 	.word	0x08005b94
 800096c:	08005b9b 	.word	0x08005b9b
 8000970:	43b40000 	.word	0x43b40000
 8000974:	43b40000 	.word	0x43b40000
 8000978:	08005ba6 	.word	0x08005ba6

0800097c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_GPIO_Init+0x6c>)
 8000984:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <MX_GPIO_Init+0x6c>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_GPIO_Init+0x6c>)
 8000994:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_GPIO_Init+0x6c>)
 80009a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <MX_GPIO_Init+0x6c>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_GPIO_Init+0x6c>)
 80009b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_GPIO_Init+0x6c>)
 80009c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <MX_GPIO_Init+0x6c>)
 80009c6:	f043 0308 	orr.w	r3, r3, #8
 80009ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_GPIO_Init+0x6c>)
 80009d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d4:	f003 0308 	and.w	r3, r3, #8
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]

}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	58024400 	.word	0x58024400

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f000 fb07 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f83f 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f7ff ffbf 	bl	800097c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009fe:	f000 f9bd 	bl	8000d7c <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000a02:	f000 f96f 	bl	8000ce4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  uint8_t ID = 0x01;
 8000a06:	2301      	movs	r3, #1
 8000a08:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  dyn2_torque(ID,TORQUE_ON);
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <main+0x78>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fef3 	bl	8000800 <dyn2_torque>

	  dyn2_led(ID,LED_ON);
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <main+0x7c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe93 	bl	8000750 <dyn2_led>
	  dyn2_position(ID,180);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000a6c <main+0x80>
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff3d 	bl	80008b0 <dyn2_position>
	  HAL_Delay(1000);
 8000a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3a:	f000 fb75 	bl	8001128 <HAL_Delay>
	  dyn2_led(ID,LED_OFF);
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <main+0x84>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe81 	bl	8000750 <dyn2_led>
	  dyn2_position(ID,0);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000a74 <main+0x88>
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff2b 	bl	80008b0 <dyn2_position>

	  HAL_Delay(1000);
 8000a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5e:	f000 fb63 	bl	8001128 <HAL_Delay>
	  dyn2_torque(ID,TORQUE_ON);
 8000a62:	e7d2      	b.n	8000a0a <main+0x1e>
 8000a64:	08005ba4 	.word	0x08005ba4
 8000a68:	08005ba5 	.word	0x08005ba5
 8000a6c:	43340000 	.word	0x43340000
 8000a70:	08005ba7 	.word	0x08005ba7
 8000a74:	00000000 	.word	0x00000000

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09c      	sub	sp, #112	; 0x70
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	224c      	movs	r2, #76	; 0x4c
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 ff2c 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2220      	movs	r2, #32
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f004 ff26 	bl	80058e4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <SystemClock_Config+0xe0>)
 8000a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aa2:	2004      	movs	r0, #4
 8000aa4:	f000 fdf8 	bl	8001698 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <SystemClock_Config+0xe4>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <SystemClock_Config+0xe4>)
 8000ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <SystemClock_Config+0xe4>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ac4:	bf00      	nop
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <SystemClock_Config+0xe4>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad2:	d1f8      	bne.n	8000ac6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000aea:	2318      	movs	r3, #24
 8000aec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af2:	2304      	movs	r3, #4
 8000af4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000afa:	230c      	movs	r3, #12
 8000afc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fe1e 	bl	800174c <HAL_RCC_OscConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b16:	f000 f823 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1a:	233f      	movs	r3, #63	; 0x3f
 8000b1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fa36 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000b4a:	f000 f809 	bl	8000b60 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3770      	adds	r7, #112	; 0x70
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58024800 	.word	0x58024800

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_MspInit+0x30>)
 8000b74:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x30>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x30>)
 8000b84:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	58024400 	.word	0x58024400

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 fa7c 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <SystemInit+0xd0>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <SystemInit+0xd0>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <SystemInit+0xd4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d807      	bhi.n	8000c24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <SystemInit+0xd4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f023 030f 	bic.w	r3, r3, #15
 8000c1c:	4a2a      	ldr	r2, [pc, #168]	; (8000cc8 <SystemInit+0xd4>)
 8000c1e:	f043 0303 	orr.w	r3, r3, #3
 8000c22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <SystemInit+0xd8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <SystemInit+0xd8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <SystemInit+0xd8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <SystemInit+0xd8>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4924      	ldr	r1, [pc, #144]	; (8000ccc <SystemInit+0xd8>)
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <SystemInit+0xdc>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <SystemInit+0xd4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d007      	beq.n	8000c5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <SystemInit+0xd4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 030f 	bic.w	r3, r3, #15
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <SystemInit+0xd4>)
 8000c58:	f043 0303 	orr.w	r3, r3, #3
 8000c5c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <SystemInit+0xd8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <SystemInit+0xd8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <SystemInit+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <SystemInit+0xd8>)
 8000c72:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <SystemInit+0xe0>)
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <SystemInit+0xd8>)
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <SystemInit+0xe4>)
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <SystemInit+0xd8>)
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <SystemInit+0xe8>)
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <SystemInit+0xd8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <SystemInit+0xd8>)
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <SystemInit+0xe8>)
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <SystemInit+0xd8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <SystemInit+0xd8>)
 8000c96:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <SystemInit+0xe8>)
 8000c98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <SystemInit+0xd8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <SystemInit+0xd8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <SystemInit+0xd8>)
 8000ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000caa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <SystemInit+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <SystemInit+0xec>)
 8000cb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	52002000 	.word	0x52002000
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd4:	02020200 	.word	0x02020200
 8000cd8:	01ff0000 	.word	0x01ff0000
 8000cdc:	01010280 	.word	0x01010280
 8000ce0:	52004000 	.word	0x52004000

08000ce4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_UART4_Init+0x90>)
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_UART4_Init+0x94>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_UART4_Init+0x90>)
 8000cf0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000cf4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_UART4_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MX_UART4_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d2e:	f003 faab 	bl	8004288 <HAL_HalfDuplex_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d38:	f7ff ff12 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d40:	f004 fd05 	bl	800574e <HAL_UARTEx_SetTxFifoThreshold>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d4a:	f7ff ff09 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d52:	f004 fd3a 	bl	80057ca <HAL_UARTEx_SetRxFifoThreshold>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f7ff ff00 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_UART4_Init+0x90>)
 8000d62:	f004 fcbb 	bl	80056dc <HAL_UARTEx_DisableFifoMode>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f7ff fef8 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2400002c 	.word	0x2400002c
 8000d78:	40004c00 	.word	0x40004c00

08000d7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <MX_USART3_UART_Init+0x94>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000dc4:	4811      	ldr	r0, [pc, #68]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000dc6:	f003 fa5f 	bl	8004288 <HAL_HalfDuplex_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dd0:	f7ff fec6 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000dd8:	f004 fcb9 	bl	800574e <HAL_UARTEx_SetTxFifoThreshold>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000de2:	f7ff febd 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000dea:	f004 fcee 	bl	80057ca <HAL_UARTEx_SetRxFifoThreshold>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000df4:	f7ff feb4 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_USART3_UART_Init+0x90>)
 8000dfa:	f004 fc6f 	bl	80056dc <HAL_UARTEx_DisableFifoMode>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e04:	f7ff feac 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	240000c0 	.word	0x240000c0
 8000e10:	40004800 	.word	0x40004800

08000e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0bc      	sub	sp, #240	; 0xf0
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	22c0      	movs	r2, #192	; 0xc0
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 fd55 	bl	80058e4 <memset>
  if(uartHandle->Instance==UART4)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a58      	ldr	r2, [pc, #352]	; (8000fa0 <HAL_UART_MspInit+0x18c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d146      	bne.n	8000ed2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e44:	f04f 0202 	mov.w	r2, #2
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fc34 	bl	80026c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e66:	f7ff fe7b 	bl	8000b60 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e6a:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000e6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e70:	4a4c      	ldr	r2, [pc, #304]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e76:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e7a:	4b4a      	ldr	r3, [pc, #296]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000e7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e88:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e8e:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e98:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000e9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4837      	ldr	r0, [pc, #220]	; (8000fa8 <HAL_UART_MspInit+0x194>)
 8000ecc:	f000 fa34 	bl	8001338 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ed0:	e061      	b.n	8000f96 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a35      	ldr	r2, [pc, #212]	; (8000fac <HAL_UART_MspInit+0x198>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d15c      	bne.n	8000f96 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000edc:	f04f 0202 	mov.w	r2, #2
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fbe8 	bl	80026c8 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000efe:	f7ff fe2f 	bl	8000b60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000f04:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000f14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_UART_MspInit+0x190>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f46:	2312      	movs	r3, #18
 8000f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f62:	4619      	mov	r1, r3
 8000f64:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <HAL_UART_MspInit+0x194>)
 8000f66:	f000 f9e7 	bl	8001338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8000f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f84:	2307      	movs	r3, #7
 8000f86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_UART_MspInit+0x194>)
 8000f92:	f000 f9d1 	bl	8001338 <HAL_GPIO_Init>
}
 8000f96:	bf00      	nop
 8000f98:	37f0      	adds	r7, #240	; 0xf0
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40004c00 	.word	0x40004c00
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58020c00 	.word	0x58020c00
 8000fac:	40004800 	.word	0x40004800

08000fb0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb4:	f7ff fe1e 	bl	8000bf4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	; (8000ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f004 fc89 	bl	80058f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fd03 	bl	80009ec <main>
  bx  lr
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000fec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ff4:	08005bf0 	.word	0x08005bf0
  ldr r2, =_sbss
 8000ff8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ffc:	24000158 	.word	0x24000158

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100a:	2003      	movs	r0, #3
 800100c:	f000 f962 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001010:	f001 f984 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8001014:	4602      	mov	r2, r0
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_Init+0x68>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	4913      	ldr	r1, [pc, #76]	; (8001070 <HAL_Init+0x6c>)
 8001022:	5ccb      	ldrb	r3, [r1, r3]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_Init+0x68>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_Init+0x6c>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_Init+0x70>)
 8001046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_Init+0x74>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f814 	bl	800107c <HAL_InitTick>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e002      	b.n	8001064 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800105e:	f7ff fd85 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400
 8001070:	08005ba8 	.word	0x08005ba8
 8001074:	24000004 	.word	0x24000004
 8001078:	24000000 	.word	0x24000000

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_InitTick+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e021      	b.n	80010d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_InitTick+0x64>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_InitTick+0x60>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f939 	bl	800131e <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f911 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x68>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2400000c 	.word	0x2400000c
 80010e0:	24000000 	.word	0x24000000
 80010e4:	24000008 	.word	0x24000008

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2400000c 	.word	0x2400000c
 800110c:	24000154 	.word	0x24000154

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	24000154 	.word	0x24000154

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2400000c 	.word	0x2400000c

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	4313      	orrs	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	05fa0000 	.word	0x05fa0000

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff47 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff5e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff90 	bl	8001228 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5f 	bl	80011d4 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffb2 	bl	8001290 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001346:	4b89      	ldr	r3, [pc, #548]	; (800156c <HAL_GPIO_Init+0x234>)
 8001348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800134a:	e194      	b.n	8001676 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2101      	movs	r1, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8186 	beq.w	8001670 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d005      	beq.n	800137c <HAL_GPIO_Init+0x44>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d130      	bne.n	80013de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013b2:	2201      	movs	r2, #1
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 0201 	and.w	r2, r3, #1
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d017      	beq.n	800141a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d123      	bne.n	800146e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	69b9      	ldr	r1, [r7, #24]
 800146a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0203 	and.w	r2, r3, #3
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80e0 	beq.w	8001670 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x238>)
 80014b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014b6:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <HAL_GPIO_Init+0x238>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_GPIO_Init+0x238>)
 80014c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ce:	4a29      	ldr	r2, [pc, #164]	; (8001574 <HAL_GPIO_Init+0x23c>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <HAL_GPIO_Init+0x240>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d052      	beq.n	80015a0 <HAL_GPIO_Init+0x268>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a1f      	ldr	r2, [pc, #124]	; (800157c <HAL_GPIO_Init+0x244>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d031      	beq.n	8001566 <HAL_GPIO_Init+0x22e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_GPIO_Init+0x248>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d02b      	beq.n	8001562 <HAL_GPIO_Init+0x22a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_GPIO_Init+0x24c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d025      	beq.n	800155e <HAL_GPIO_Init+0x226>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <HAL_GPIO_Init+0x250>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d01f      	beq.n	800155a <HAL_GPIO_Init+0x222>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_GPIO_Init+0x254>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x21e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_GPIO_Init+0x258>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x21a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_GPIO_Init+0x25c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x216>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_GPIO_Init+0x260>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x212>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_GPIO_Init+0x264>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x20e>
 8001542:	2309      	movs	r3, #9
 8001544:	e02d      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001546:	230a      	movs	r3, #10
 8001548:	e02b      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800154a:	2308      	movs	r3, #8
 800154c:	e029      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800154e:	2307      	movs	r3, #7
 8001550:	e027      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001552:	2306      	movs	r3, #6
 8001554:	e025      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001556:	2305      	movs	r3, #5
 8001558:	e023      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800155a:	2304      	movs	r3, #4
 800155c:	e021      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800155e:	2303      	movs	r3, #3
 8001560:	e01f      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001562:	2302      	movs	r3, #2
 8001564:	e01d      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 8001566:	2301      	movs	r3, #1
 8001568:	e01b      	b.n	80015a2 <HAL_GPIO_Init+0x26a>
 800156a:	bf00      	nop
 800156c:	58000080 	.word	0x58000080
 8001570:	58024400 	.word	0x58024400
 8001574:	58000400 	.word	0x58000400
 8001578:	58020000 	.word	0x58020000
 800157c:	58020400 	.word	0x58020400
 8001580:	58020800 	.word	0x58020800
 8001584:	58020c00 	.word	0x58020c00
 8001588:	58021000 	.word	0x58021000
 800158c:	58021400 	.word	0x58021400
 8001590:	58021800 	.word	0x58021800
 8001594:	58021c00 	.word	0x58021c00
 8001598:	58022000 	.word	0x58022000
 800159c:	58022400 	.word	0x58022400
 80015a0:	2300      	movs	r3, #0
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	f002 0203 	and.w	r2, r2, #3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4093      	lsls	r3, r2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b2:	4938      	ldr	r1, [pc, #224]	; (8001694 <HAL_GPIO_Init+0x35c>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3301      	adds	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	f47f ae63 	bne.w	800134c <HAL_GPIO_Init+0x14>
  }
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	3724      	adds	r7, #36	; 0x24
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	58000400 	.word	0x58000400

08001698 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_PWREx_ConfigSupply+0xb0>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	d00a      	beq.n	80016c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d001      	beq.n	80016be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e040      	b.n	8001740 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e03e      	b.n	8001740 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_PWREx_ConfigSupply+0xb0>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80016ca:	491f      	ldr	r1, [pc, #124]	; (8001748 <HAL_PWREx_ConfigSupply+0xb0>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016d2:	f7ff fd1d 	bl	8001110 <HAL_GetTick>
 80016d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016d8:	e009      	b.n	80016ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016da:	f7ff fd19 	bl	8001110 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e8:	d901      	bls.n	80016ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e028      	b.n	8001740 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_PWREx_ConfigSupply+0xb0>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fa:	d1ee      	bne.n	80016da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b1e      	cmp	r3, #30
 8001700:	d008      	beq.n	8001714 <HAL_PWREx_ConfigSupply+0x7c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b2e      	cmp	r3, #46	; 0x2e
 8001706:	d005      	beq.n	8001714 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b1d      	cmp	r3, #29
 800170c:	d002      	beq.n	8001714 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b2d      	cmp	r3, #45	; 0x2d
 8001712:	d114      	bne.n	800173e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001714:	f7ff fcfc 	bl	8001110 <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800171a:	e009      	b.n	8001730 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800171c:	f7ff fcf8 	bl	8001110 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800172a:	d901      	bls.n	8001730 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e007      	b.n	8001740 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_PWREx_ConfigSupply+0xb0>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d1ee      	bne.n	800171c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	58024800 	.word	0x58024800

0800174c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	f000 bc1f 	b.w	8001f9e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80b3 	beq.w	80018d4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176e:	4b95      	ldr	r3, [pc, #596]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001778:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	2b10      	cmp	r3, #16
 8001782:	d007      	beq.n	8001794 <HAL_RCC_OscConfig+0x48>
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	2b18      	cmp	r3, #24
 8001788:	d112      	bne.n	80017b0 <HAL_RCC_OscConfig+0x64>
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d10d      	bne.n	80017b0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8098 	beq.w	80018d2 <HAL_RCC_OscConfig+0x186>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 8093 	bne.w	80018d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e3f6      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d106      	bne.n	80017c8 <HAL_RCC_OscConfig+0x7c>
 80017ba:	4b82      	ldr	r3, [pc, #520]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a81      	ldr	r2, [pc, #516]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e058      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d112      	bne.n	80017f6 <HAL_RCC_OscConfig+0xaa>
 80017d0:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a7b      	ldr	r2, [pc, #492]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a78      	ldr	r2, [pc, #480]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80017e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a75      	ldr	r2, [pc, #468]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	e041      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fe:	d112      	bne.n	8001826 <HAL_RCC_OscConfig+0xda>
 8001800:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6f      	ldr	r2, [pc, #444]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6c      	ldr	r2, [pc, #432]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001812:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a69      	ldr	r2, [pc, #420]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e029      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800182e:	d112      	bne.n	8001856 <HAL_RCC_OscConfig+0x10a>
 8001830:	4b64      	ldr	r3, [pc, #400]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a60      	ldr	r2, [pc, #384]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a5d      	ldr	r2, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800184e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e011      	b.n	800187a <HAL_RCC_OscConfig+0x12e>
 8001856:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800185c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b58      	ldr	r3, [pc, #352]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a57      	ldr	r2, [pc, #348]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b55      	ldr	r3, [pc, #340]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a54      	ldr	r2, [pc, #336]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001874:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001878:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d013      	beq.n	80018aa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fc45 	bl	8001110 <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188a:	f7ff fc41 	bl	8001110 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b64      	cmp	r3, #100	; 0x64
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e380      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x13e>
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fc31 	bl	8001110 <HAL_GetTick>
 80018ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b2:	f7ff fc2d 	bl	8001110 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	; 0x64
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e36c      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x166>
 80018d0:	e000      	b.n	80018d4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 808c 	beq.w	80019fa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018ec:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <HAL_RCC_OscConfig+0x1bc>
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	2b18      	cmp	r3, #24
 80018fc:	d137      	bne.n	800196e <HAL_RCC_OscConfig+0x222>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d132      	bne.n	800196e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_OscConfig+0x1d4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e33e      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 0219 	bic.w	r2, r3, #25
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4925      	ldr	r1, [pc, #148]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff fbed 	bl	8001110 <HAL_GetTick>
 8001936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff fbe9 	bl	8001110 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e328      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	4917      	ldr	r1, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196c:	e045      	b.n	80019fa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d028      	beq.n	80019c8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0219 	bic.w	r2, r3, #25
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	4910      	ldr	r1, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fbc2 	bl	8001110 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff fbbe 	bl	8001110 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e2fd      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	061b      	lsls	r3, r3, #24
 80019bc:	4901      	ldr	r1, [pc, #4]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
 80019c2:	e01a      	b.n	80019fa <HAL_RCC_OscConfig+0x2ae>
 80019c4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c8:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a96      	ldr	r2, [pc, #600]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fb9c 	bl	8001110 <HAL_GetTick>
 80019d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fb98 	bl	8001110 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e2d7      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019ee:	4b8e      	ldr	r3, [pc, #568]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d06a      	beq.n	8001adc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a06:	4b88      	ldr	r3, [pc, #544]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a10:	4b85      	ldr	r3, [pc, #532]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d007      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2e0>
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b18      	cmp	r3, #24
 8001a20:	d11b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x30e>
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d116      	bne.n	8001a5a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a2c:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2f8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b80      	cmp	r3, #128	; 0x80
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e2ac      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a44:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	4975      	ldr	r1, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a58:	e040      	b.n	8001adc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d023      	beq.n	8001aaa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a62:	4b71      	ldr	r3, [pc, #452]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a70      	ldr	r2, [pc, #448]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fb4f 	bl	8001110 <HAL_GetTick>
 8001a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a76:	f7ff fb4b 	bl	8001110 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e28a      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a88:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a94:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	4961      	ldr	r1, [pc, #388]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fb2b 	bl	8001110 <HAL_GetTick>
 8001aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001abe:	f7ff fb27 	bl	8001110 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e266      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ad0:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d036      	beq.n	8001b56 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d019      	beq.n	8001b24 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af0:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af4:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff fb08 	bl	8001110 <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b04:	f7ff fb04 	bl	8001110 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e243      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b16:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x3b8>
 8001b22:	e018      	b.n	8001b56 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b24:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b28:	4a3f      	ldr	r2, [pc, #252]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff faee 	bl	8001110 <HAL_GetTick>
 8001b34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff faea 	bl	8001110 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e229      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d036      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d019      	beq.n	8001b9e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2e      	ldr	r2, [pc, #184]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b76:	f7ff facb 	bl	8001110 <HAL_GetTick>
 8001b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7e:	f7ff fac7 	bl	8001110 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e206      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x432>
 8001b9c:	e018      	b.n	8001bd0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fab1 	bl	8001110 <HAL_GetTick>
 8001bae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb2:	f7ff faad 	bl	8001110 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e1ec      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80af 	beq.w	8001d3c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_RCC_OscConfig+0x4e0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_RCC_OscConfig+0x4e0>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bea:	f7ff fa91 	bl	8001110 <HAL_GetTick>
 8001bee:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf2:	f7ff fa8d 	bl	8001110 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1cc      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_OscConfig+0x4e0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d10b      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4e4>
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1c:	4a02      	ldr	r2, [pc, #8]	; (8001c28 <HAL_RCC_OscConfig+0x4dc>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6713      	str	r3, [r2, #112]	; 0x70
 8001c24:	e05b      	b.n	8001cde <HAL_RCC_OscConfig+0x592>
 8001c26:	bf00      	nop
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	58024800 	.word	0x58024800
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d112      	bne.n	8001c5e <HAL_RCC_OscConfig+0x512>
 8001c38:	4b9d      	ldr	r3, [pc, #628]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	4a9c      	ldr	r2, [pc, #624]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	6713      	str	r3, [r2, #112]	; 0x70
 8001c44:	4b9a      	ldr	r3, [pc, #616]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a99      	ldr	r2, [pc, #612]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a96      	ldr	r2, [pc, #600]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5c:	e03f      	b.n	8001cde <HAL_RCC_OscConfig+0x592>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d112      	bne.n	8001c8c <HAL_RCC_OscConfig+0x540>
 8001c66:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a91      	ldr	r2, [pc, #580]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70
 8001c72:	4b8f      	ldr	r3, [pc, #572]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a8e      	ldr	r2, [pc, #568]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	4b8c      	ldr	r3, [pc, #560]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a8b      	ldr	r2, [pc, #556]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	e028      	b.n	8001cde <HAL_RCC_OscConfig+0x592>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b85      	cmp	r3, #133	; 0x85
 8001c92:	d112      	bne.n	8001cba <HAL_RCC_OscConfig+0x56e>
 8001c94:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	4a85      	ldr	r2, [pc, #532]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca0:	4b83      	ldr	r3, [pc, #524]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a82      	ldr	r2, [pc, #520]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cac:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a7f      	ldr	r2, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb8:	e011      	b.n	8001cde <HAL_RCC_OscConfig+0x592>
 8001cba:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	4a7c      	ldr	r2, [pc, #496]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	4b7a      	ldr	r3, [pc, #488]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	4b77      	ldr	r3, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a76      	ldr	r2, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d015      	beq.n	8001d12 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fa13 	bl	8001110 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff fa0f 	bl	8001110 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e14c      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ee      	beq.n	8001cee <HAL_RCC_OscConfig+0x5a2>
 8001d10:	e014      	b.n	8001d3c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7ff f9fd 	bl	8001110 <HAL_GetTick>
 8001d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff f9f9 	bl	8001110 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e136      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ee      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 812b 	beq.w	8001f9c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d4e:	2b18      	cmp	r3, #24
 8001d50:	f000 80bb 	beq.w	8001eca <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	f040 8095 	bne.w	8001e88 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a53      	ldr	r2, [pc, #332]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f9d1 	bl	8001110 <HAL_GetTick>
 8001d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff f9cd 	bl	8001110 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e10c      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d84:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d90:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d94:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCC_OscConfig+0x768>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	430a      	orrs	r2, r1
 8001da4:	4942      	ldr	r1, [pc, #264]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	628b      	str	r3, [r1, #40]	; 0x28
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	3b01      	subs	r3, #1
 8001dba:	025b      	lsls	r3, r3, #9
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001dda:	4935      	ldr	r1, [pc, #212]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001de0:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df0:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_RCC_OscConfig+0x76c>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001df8:	00d2      	lsls	r2, r2, #3
 8001dfa:	492d      	ldr	r1, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f023 020c 	bic.w	r2, r3, #12
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4928      	ldr	r1, [pc, #160]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	f023 0202 	bic.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4924      	ldr	r1, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f956 	bl	8001110 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff f952 	bl	8001110 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e091      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x71c>
 8001e86:	e089      	b.n	8001f9c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_RCC_OscConfig+0x764>)
 8001e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f93c 	bl	8001110 <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e9a:	e00f      	b.n	8001ebc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f938 	bl	8001110 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d908      	bls.n	8001ebc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e077      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
 8001eae:	bf00      	nop
 8001eb0:	58024400 	.word	0x58024400
 8001eb4:	fffffc0c 	.word	0xfffffc0c
 8001eb8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e9      	bne.n	8001e9c <HAL_RCC_OscConfig+0x750>
 8001ec8:	e068      	b.n	8001f9c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001eca:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ed0:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d031      	beq.n	8001f42 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	f003 0203 	and.w	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d12a      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d122      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d11a      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	0a5b      	lsrs	r3, r3, #9
 8001f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d111      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	0c1b      	lsrs	r3, r3, #16
 8001f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d108      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0e1b      	lsrs	r3, r3, #24
 8001f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e02b      	b.n	8001f9e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f50:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d01f      	beq.n	8001f9c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f68:	f7ff f8d2 	bl	8001110 <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f6e:	bf00      	nop
 8001f70:	f7ff f8ce 	bl	8001110 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d0f9      	beq.n	8001f70 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_RCC_OscConfig+0x860>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f88:	00d2      	lsls	r2, r2, #3
 8001f8a:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_RCC_OscConfig+0x85c>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3730      	adds	r7, #48	; 0x30
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	ffff0007 	.word	0xffff0007

08001fb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e19c      	b.n	80022fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b8a      	ldr	r3, [pc, #552]	; (80021f0 <HAL_RCC_ClockConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d910      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b87      	ldr	r3, [pc, #540]	; (80021f0 <HAL_RCC_ClockConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 020f 	bic.w	r2, r3, #15
 8001fda:	4985      	ldr	r1, [pc, #532]	; (80021f0 <HAL_RCC_ClockConfig+0x240>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b83      	ldr	r3, [pc, #524]	; (80021f0 <HAL_RCC_ClockConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e184      	b.n	80022fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d010      	beq.n	8002022 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800200c:	429a      	cmp	r2, r3
 800200e:	d908      	bls.n	8002022 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002010:	4b78      	ldr	r3, [pc, #480]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4975      	ldr	r1, [pc, #468]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 800201e:	4313      	orrs	r3, r2
 8002020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d010      	beq.n	8002050 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800203a:	429a      	cmp	r2, r3
 800203c:	d908      	bls.n	8002050 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800203e:	4b6d      	ldr	r3, [pc, #436]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	496a      	ldr	r1, [pc, #424]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 800204c:	4313      	orrs	r3, r2
 800204e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	d010      	beq.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002068:	429a      	cmp	r2, r3
 800206a:	d908      	bls.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800206c:	4b61      	ldr	r3, [pc, #388]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	495e      	ldr	r1, [pc, #376]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 800207a:	4313      	orrs	r3, r2
 800207c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d010      	beq.n	80020ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002096:	429a      	cmp	r2, r3
 8002098:	d908      	bls.n	80020ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800209a:	4b56      	ldr	r3, [pc, #344]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4953      	ldr	r1, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d908      	bls.n	80020da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f023 020f 	bic.w	r2, r3, #15
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4947      	ldr	r1, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d055      	beq.n	8002192 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020e6:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	4940      	ldr	r1, [pc, #256]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002100:	4b3c      	ldr	r3, [pc, #240]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d121      	bne.n	8002150 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0f6      	b.n	80022fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d107      	bne.n	8002128 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d115      	bne.n	8002150 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0ea      	b.n	80022fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002130:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0de      	b.n	80022fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0d6      	b.n	80022fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f023 0207 	bic.w	r2, r3, #7
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4925      	ldr	r1, [pc, #148]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 800215e:	4313      	orrs	r3, r2
 8002160:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002162:	f7fe ffd5 	bl	8001110 <HAL_GetTick>
 8002166:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002168:	e00a      	b.n	8002180 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216a:	f7fe ffd1 	bl	8001110 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0be      	b.n	80022fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	429a      	cmp	r2, r3
 8002190:	d1eb      	bne.n	800216a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d208      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f023 020f 	bic.w	r2, r3, #15
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x244>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_ClockConfig+0x240>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d214      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_RCC_ClockConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 020f 	bic.w	r2, r3, #15
 80021d6:	4906      	ldr	r1, [pc, #24]	; (80021f0 <HAL_RCC_ClockConfig+0x240>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_RCC_ClockConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e086      	b.n	80022fe <HAL_RCC_ClockConfig+0x34e>
 80021f0:	52002000 	.word	0x52002000
 80021f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d010      	beq.n	8002226 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002210:	429a      	cmp	r2, r3
 8002212:	d208      	bcs.n	8002226 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002214:	4b3c      	ldr	r3, [pc, #240]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	4939      	ldr	r1, [pc, #228]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 8002222:	4313      	orrs	r3, r2
 8002224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d010      	beq.n	8002254 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800223e:	429a      	cmp	r2, r3
 8002240:	d208      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	492e      	ldr	r1, [pc, #184]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 8002250:	4313      	orrs	r3, r2
 8002252:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800226c:	429a      	cmp	r2, r3
 800226e:	d208      	bcs.n	8002282 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 800227e:	4313      	orrs	r3, r2
 8002280:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800229a:	429a      	cmp	r2, r3
 800229c:	d208      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	4917      	ldr	r1, [pc, #92]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80022b0:	f000 f834 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	4912      	ldr	r1, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x35c>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_RCC_ClockConfig+0x358>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_RCC_ClockConfig+0x35c>)
 80022d8:	5cd3      	ldrb	r3, [r2, r3]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x360>)
 80022e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x364>)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x368>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fec2 	bl	800107c <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	58024400 	.word	0x58024400
 800230c:	08005ba8 	.word	0x08005ba8
 8002310:	24000004 	.word	0x24000004
 8002314:	24000000 	.word	0x24000000
 8002318:	24000008 	.word	0x24000008

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002322:	4bb3      	ldr	r3, [pc, #716]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800232a:	2b18      	cmp	r3, #24
 800232c:	f200 8155 	bhi.w	80025da <HAL_RCC_GetSysClockFreq+0x2be>
 8002330:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002336:	bf00      	nop
 8002338:	0800239d 	.word	0x0800239d
 800233c:	080025db 	.word	0x080025db
 8002340:	080025db 	.word	0x080025db
 8002344:	080025db 	.word	0x080025db
 8002348:	080025db 	.word	0x080025db
 800234c:	080025db 	.word	0x080025db
 8002350:	080025db 	.word	0x080025db
 8002354:	080025db 	.word	0x080025db
 8002358:	080023c3 	.word	0x080023c3
 800235c:	080025db 	.word	0x080025db
 8002360:	080025db 	.word	0x080025db
 8002364:	080025db 	.word	0x080025db
 8002368:	080025db 	.word	0x080025db
 800236c:	080025db 	.word	0x080025db
 8002370:	080025db 	.word	0x080025db
 8002374:	080025db 	.word	0x080025db
 8002378:	080023c9 	.word	0x080023c9
 800237c:	080025db 	.word	0x080025db
 8002380:	080025db 	.word	0x080025db
 8002384:	080025db 	.word	0x080025db
 8002388:	080025db 	.word	0x080025db
 800238c:	080025db 	.word	0x080025db
 8002390:	080025db 	.word	0x080025db
 8002394:	080025db 	.word	0x080025db
 8002398:	080023cf 	.word	0x080023cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800239c:	4b94      	ldr	r3, [pc, #592]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023a8:	4b91      	ldr	r3, [pc, #580]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	4a90      	ldr	r2, [pc, #576]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80023ba:	e111      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023bc:	4b8d      	ldr	r3, [pc, #564]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023be:	61bb      	str	r3, [r7, #24]
      break;
 80023c0:	e10e      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80023c2:	4b8d      	ldr	r3, [pc, #564]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023c4:	61bb      	str	r3, [r7, #24]
      break;
 80023c6:	e10b      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80023c8:	4b8c      	ldr	r3, [pc, #560]	; (80025fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023ca:	61bb      	str	r3, [r7, #24]
      break;
 80023cc:	e108      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023ce:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023d8:	4b85      	ldr	r3, [pc, #532]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023e4:	4b82      	ldr	r3, [pc, #520]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023ee:	4b80      	ldr	r3, [pc, #512]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	08db      	lsrs	r3, r3, #3
 80023f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002406:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80e1 	beq.w	80025d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b02      	cmp	r3, #2
 8002416:	f000 8083 	beq.w	8002520 <HAL_RCC_GetSysClockFreq+0x204>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b02      	cmp	r3, #2
 800241e:	f200 80a1 	bhi.w	8002564 <HAL_RCC_GetSysClockFreq+0x248>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x114>
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d056      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800242e:	e099      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d02d      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800243c:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	08db      	lsrs	r3, r3, #3
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	4a6b      	ldr	r2, [pc, #428]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
 800244c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002466:	4b62      	ldr	r3, [pc, #392]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002476:	ed97 6a02 	vldr	s12, [r7, #8]
 800247a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002600 <HAL_RCC_GetSysClockFreq+0x2e4>
 800247e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800248a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002492:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002496:	e087      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002604 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024aa:	4b51      	ldr	r3, [pc, #324]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80024be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002600 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024da:	e065      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002608 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ee:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002502:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002600 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800250a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800250e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800251e:	e043      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800260c <HAL_RCC_GetSysClockFreq+0x2f0>
 800252e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002532:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002542:	ed97 6a02 	vldr	s12, [r7, #8]
 8002546:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002600 <HAL_RCC_GetSysClockFreq+0x2e4>
 800254a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800254e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800255a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002562:	e021      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002608 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002586:	ed97 6a02 	vldr	s12, [r7, #8]
 800258a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002600 <HAL_RCC_GetSysClockFreq+0x2e4>
 800258e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800259a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800259e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	0a5b      	lsrs	r3, r3, #9
 80025ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b2:	3301      	adds	r3, #1
 80025b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	ee07 3a90 	vmov	s15, r3
 80025bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80025c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025cc:	ee17 3a90 	vmov	r3, s15
 80025d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
      break;
 80025d8:	e002      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025dc:	61bb      	str	r3, [r7, #24]
      break;
 80025de:	bf00      	nop
  }

  return sysclockfreq;
 80025e0:	69bb      	ldr	r3, [r7, #24]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	58024400 	.word	0x58024400
 80025f4:	03d09000 	.word	0x03d09000
 80025f8:	003d0900 	.word	0x003d0900
 80025fc:	007a1200 	.word	0x007a1200
 8002600:	46000000 	.word	0x46000000
 8002604:	4c742400 	.word	0x4c742400
 8002608:	4a742400 	.word	0x4a742400
 800260c:	4af42400 	.word	0x4af42400

08002610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002616:	f7ff fe81 	bl	800231c <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_RCC_GetHCLKFreq+0x50>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490f      	ldr	r1, [pc, #60]	; (8002664 <HAL_RCC_GetHCLKFreq+0x54>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_RCC_GetHCLKFreq+0x50>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_RCC_GetHCLKFreq+0x54>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <HAL_RCC_GetHCLKFreq+0x58>)
 800264c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800264e:	4a07      	ldr	r2, [pc, #28]	; (800266c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <HAL_RCC_GetHCLKFreq+0x58>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	58024400 	.word	0x58024400
 8002664:	08005ba8 	.word	0x08005ba8
 8002668:	24000004 	.word	0x24000004
 800266c:	24000000 	.word	0x24000000

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002674:	f7ff ffcc 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4904      	ldr	r1, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	58024400 	.word	0x58024400
 8002698:	08005ba8 	.word	0x08005ba8

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80026a0:	f7ff ffb6 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	58024400 	.word	0x58024400
 80026c4:	08005ba8 	.word	0x08005ba8

080026c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026cc:	b0c8      	sub	sp, #288	; 0x120
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80026ec:	2500      	movs	r5, #0
 80026ee:	ea54 0305 	orrs.w	r3, r4, r5
 80026f2:	d049      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026fe:	d02f      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002704:	d828      	bhi.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800270a:	d01a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800270c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002710:	d822      	bhi.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800271a:	d007      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800271c:	e01c      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271e:	4ba7      	ldr	r3, [pc, #668]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	4aa6      	ldr	r2, [pc, #664]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800272a:	e01a      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800272c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002730:	3308      	adds	r3, #8
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f001 fc43 	bl	8003fc0 <RCCEx_PLL2_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002740:	e00f      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002746:	3328      	adds	r3, #40	; 0x28
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f001 fcea 	bl	8004124 <RCCEx_PLL3_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002756:	e004      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800275e:	e000      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002762:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800276a:	4b94      	ldr	r3, [pc, #592]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800276c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002778:	4a90      	ldr	r2, [pc, #576]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800277a:	430b      	orrs	r3, r1
 800277c:	6513      	str	r3, [r2, #80]	; 0x50
 800277e:	e003      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002780:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002784:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002794:	f04f 0900 	mov.w	r9, #0
 8002798:	ea58 0309 	orrs.w	r3, r8, r9
 800279c:	d047      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800279e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d82a      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80027a8:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027c5 	.word	0x080027c5
 80027b4:	080027d3 	.word	0x080027d3
 80027b8:	080027e9 	.word	0x080027e9
 80027bc:	08002807 	.word	0x08002807
 80027c0:	08002807 	.word	0x08002807
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c4:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	4a7c      	ldr	r2, [pc, #496]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027d0:	e01a      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027d6:	3308      	adds	r3, #8
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 fbf0 	bl	8003fc0 <RCCEx_PLL2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027e6:	e00f      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ec:	3328      	adds	r3, #40	; 0x28
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 fc97 	bl	8004124 <RCCEx_PLL3_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027fc:	e004      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002804:	e000      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002814:	f023 0107 	bic.w	r1, r3, #7
 8002818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	4a67      	ldr	r2, [pc, #412]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002820:	430b      	orrs	r3, r1
 8002822:	6513      	str	r3, [r2, #80]	; 0x50
 8002824:	e003      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800282a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800282e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800283a:	f04f 0b00 	mov.w	fp, #0
 800283e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002842:	d054      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800284e:	d036      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002850:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002854:	d82f      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285a:	d032      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800285c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002860:	d829      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002862:	2bc0      	cmp	r3, #192	; 0xc0
 8002864:	d02f      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002866:	2bc0      	cmp	r3, #192	; 0xc0
 8002868:	d825      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800286a:	2b80      	cmp	r3, #128	; 0x80
 800286c:	d018      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800286e:	2b80      	cmp	r3, #128	; 0x80
 8002870:	d821      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d007      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800287a:	e01c      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800287c:	4b4f      	ldr	r3, [pc, #316]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	4a4e      	ldr	r2, [pc, #312]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002888:	e01e      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800288a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800288e:	3308      	adds	r3, #8
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f001 fb94 	bl	8003fc0 <RCCEx_PLL2_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800289e:	e013      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a4:	3328      	adds	r3, #40	; 0x28
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fc3b 	bl	8004124 <RCCEx_PLL3_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80028b4:	e008      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028bc:	e004      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80028be:	bf00      	nop
 80028c0:	e002      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80028c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80028d0:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80028d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	4a37      	ldr	r2, [pc, #220]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6513      	str	r3, [r2, #80]	; 0x50
 80028e4:	e003      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80028ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80028fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002904:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002908:	460b      	mov	r3, r1
 800290a:	4313      	orrs	r3, r2
 800290c:	d05c      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800290e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002918:	d03b      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800291a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800291e:	d834      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002924:	d037      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292a:	d82e      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800292c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002930:	d033      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002932:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002936:	d828      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d01a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d822      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294c:	d007      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800294e:	e01c      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800295c:	e01e      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800295e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002962:	3308      	adds	r3, #8
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fb2a 	bl	8003fc0 <RCCEx_PLL2_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002972:	e013      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002978:	3328      	adds	r3, #40	; 0x28
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f001 fbd1 	bl	8004124 <RCCEx_PLL3_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002988:	e008      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002990:	e004      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002992:	bf00      	nop
 8002994:	e002      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002996:	bf00      	nop
 8002998:	e000      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800299a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800299c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10d      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80029ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b2:	4a02      	ldr	r2, [pc, #8]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029b4:	430b      	orrs	r3, r1
 80029b6:	6513      	str	r3, [r2, #80]	; 0x50
 80029b8:	e006      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80029ba:	bf00      	nop
 80029bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80029d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80029de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80029e2:	460b      	mov	r3, r1
 80029e4:	4313      	orrs	r3, r2
 80029e6:	d03a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80029e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	2b30      	cmp	r3, #48	; 0x30
 80029f0:	d01f      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80029f2:	2b30      	cmp	r3, #48	; 0x30
 80029f4:	d819      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d00c      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d815      	bhi.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d019      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d111      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a06:	4bae      	ldr	r3, [pc, #696]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	4aad      	ldr	r2, [pc, #692]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002a12:	e011      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a18:	3308      	adds	r3, #8
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 facf 	bl	8003fc0 <RCCEx_PLL2_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002a28:	e006      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a30:	e002      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002a40:	4b9f      	ldr	r3, [pc, #636]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	4a9c      	ldr	r2, [pc, #624]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a50:	430b      	orrs	r3, r1
 8002a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a54:	e003      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002a6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002a74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	d051      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a88:	d035      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a8e:	d82e      	bhi.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a94:	d031      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a9a:	d828      	bhi.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa0:	d01a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa6:	d822      	bhi.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab0:	d007      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002ab2:	e01c      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab4:	4b82      	ldr	r3, [pc, #520]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	4a81      	ldr	r2, [pc, #516]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ac0:	e01c      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 fa78 	bl	8003fc0 <RCCEx_PLL2_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ad6:	e011      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002adc:	3328      	adds	r3, #40	; 0x28
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 fb1f 	bl	8004124 <RCCEx_PLL3_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aec:	e006      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002af4:	e002      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002afc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b04:	4b6e      	ldr	r3, [pc, #440]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b12:	4a6b      	ldr	r2, [pc, #428]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6513      	str	r3, [r2, #80]	; 0x50
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b1e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	d053      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4c:	d033      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b52:	d82c      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b58:	d02f      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b5e:	d826      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b64:	d02b      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002b66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b6a:	d820      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b70:	d012      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b76:	d81a      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d022      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b80:	d115      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b86:	3308      	adds	r3, #8
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fa18 	bl	8003fc0 <RCCEx_PLL2_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b96:	e015      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b9c:	3328      	adds	r3, #40	; 0x28
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 fabf 	bl	8004124 <RCCEx_PLL3_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bb4:	e006      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002bb6:	bf00      	nop
 8002bb8:	e004      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002bba:	bf00      	nop
 8002bbc:	e002      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002bcc:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bda:	4a39      	ldr	r2, [pc, #228]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6513      	str	r3, [r2, #80]	; 0x50
 8002be0:	e003      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002be6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4313      	orrs	r3, r2
 8002c08:	d060      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c12:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002c16:	d039      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002c18:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002c1c:	d832      	bhi.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c22:	d035      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c28:	d82c      	bhi.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d031      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c34:	d826      	bhi.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c3a:	d02d      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c40:	d820      	bhi.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c46:	d012      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4c:	d81a      	bhi.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d024      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c56:	d115      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 f9ad 	bl	8003fc0 <RCCEx_PLL2_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c6c:	e017      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c72:	3328      	adds	r3, #40	; 0x28
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fa54 	bl	8004124 <RCCEx_PLL3_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c82:	e00c      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c8a:	e008      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c8c:	bf00      	nop
 8002c8e:	e006      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c90:	bf00      	nop
 8002c92:	e004      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c94:	bf00      	nop
 8002c96:	e002      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cb6:	4a02      	ldr	r2, [pc, #8]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6593      	str	r3, [r2, #88]	; 0x58
 8002cbc:	e006      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002cbe:	bf00      	nop
 8002cc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	d037      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf6:	d00e      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cfc:	d816      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d06:	d111      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d08:	4bc4      	ldr	r3, [pc, #784]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	4ac3      	ldr	r2, [pc, #780]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d14:	e00f      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f94e 	bl	8003fc0 <RCCEx_PLL2_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d2a:	e004      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d32:	e000      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d3e:	4bb7      	ldr	r3, [pc, #732]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4c:	4ab3      	ldr	r2, [pc, #716]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6513      	str	r3, [r2, #80]	; 0x50
 8002d52:	e003      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	d039      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d81c      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002d86:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002dc9 	.word	0x08002dc9
 8002d90:	08002d9d 	.word	0x08002d9d
 8002d94:	08002dab 	.word	0x08002dab
 8002d98:	08002dc9 	.word	0x08002dc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d9c:	4b9f      	ldr	r3, [pc, #636]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	4a9e      	ldr	r2, [pc, #632]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002da8:	e00f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dae:	3308      	adds	r3, #8
 8002db0:	2102      	movs	r1, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 f904 	bl	8003fc0 <RCCEx_PLL2_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002dbe:	e004      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dd2:	4b92      	ldr	r3, [pc, #584]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	f023 0103 	bic.w	r1, r3, #3
 8002dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	4a8e      	ldr	r2, [pc, #568]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de2:	430b      	orrs	r3, r1
 8002de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002de6:	e003      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f000 8099 	beq.w	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e12:	4b83      	ldr	r3, [pc, #524]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a82      	ldr	r2, [pc, #520]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f977 	bl	8001110 <HAL_GetTick>
 8002e22:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e26:	e00b      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fe f972 	bl	8001110 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b64      	cmp	r3, #100	; 0x64
 8002e36:	d903      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e3e:	e005      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e40:	4b77      	ldr	r3, [pc, #476]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ed      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d173      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e54:	4b71      	ldr	r3, [pc, #452]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e60:	4053      	eors	r3, r2
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d015      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e6a:	4b6c      	ldr	r3, [pc, #432]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e76:	4b69      	ldr	r3, [pc, #420]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a68      	ldr	r2, [pc, #416]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e82:	4b66      	ldr	r3, [pc, #408]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a65      	ldr	r2, [pc, #404]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e8e:	4a63      	ldr	r2, [pc, #396]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea2:	d118      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f934 	bl	8001110 <HAL_GetTick>
 8002ea8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eac:	e00d      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe f92f 	bl	8001110 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002eb8:	1ad2      	subs	r2, r2, r3
 8002eba:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d903      	bls.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002ec8:	e005      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eca:	4b54      	ldr	r3, [pc, #336]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0eb      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d129      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eee:	d10e      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f00:	091a      	lsrs	r2, r3, #4
 8002f02:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	4a45      	ldr	r2, [pc, #276]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6113      	str	r3, [r2, #16]
 8002f0c:	e005      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002f0e:	4b43      	ldr	r3, [pc, #268]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	4a42      	ldr	r2, [pc, #264]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f18:	6113      	str	r3, [r2, #16]
 8002f1a:	4b40      	ldr	r3, [pc, #256]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	4a3c      	ldr	r2, [pc, #240]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f30:	e008      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002f3a:	e003      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f002 0301 	and.w	r3, r2, #1
 8002f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f000 8090 	beq.w	8003086 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6e:	2b28      	cmp	r3, #40	; 0x28
 8002f70:	d870      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	0800305d 	.word	0x0800305d
 8002f7c:	08003055 	.word	0x08003055
 8002f80:	08003055 	.word	0x08003055
 8002f84:	08003055 	.word	0x08003055
 8002f88:	08003055 	.word	0x08003055
 8002f8c:	08003055 	.word	0x08003055
 8002f90:	08003055 	.word	0x08003055
 8002f94:	08003055 	.word	0x08003055
 8002f98:	08003029 	.word	0x08003029
 8002f9c:	08003055 	.word	0x08003055
 8002fa0:	08003055 	.word	0x08003055
 8002fa4:	08003055 	.word	0x08003055
 8002fa8:	08003055 	.word	0x08003055
 8002fac:	08003055 	.word	0x08003055
 8002fb0:	08003055 	.word	0x08003055
 8002fb4:	08003055 	.word	0x08003055
 8002fb8:	0800303f 	.word	0x0800303f
 8002fbc:	08003055 	.word	0x08003055
 8002fc0:	08003055 	.word	0x08003055
 8002fc4:	08003055 	.word	0x08003055
 8002fc8:	08003055 	.word	0x08003055
 8002fcc:	08003055 	.word	0x08003055
 8002fd0:	08003055 	.word	0x08003055
 8002fd4:	08003055 	.word	0x08003055
 8002fd8:	0800305d 	.word	0x0800305d
 8002fdc:	08003055 	.word	0x08003055
 8002fe0:	08003055 	.word	0x08003055
 8002fe4:	08003055 	.word	0x08003055
 8002fe8:	08003055 	.word	0x08003055
 8002fec:	08003055 	.word	0x08003055
 8002ff0:	08003055 	.word	0x08003055
 8002ff4:	08003055 	.word	0x08003055
 8002ff8:	0800305d 	.word	0x0800305d
 8002ffc:	08003055 	.word	0x08003055
 8003000:	08003055 	.word	0x08003055
 8003004:	08003055 	.word	0x08003055
 8003008:	08003055 	.word	0x08003055
 800300c:	08003055 	.word	0x08003055
 8003010:	08003055 	.word	0x08003055
 8003014:	08003055 	.word	0x08003055
 8003018:	0800305d 	.word	0x0800305d
 800301c:	58024400 	.word	0x58024400
 8003020:	58024800 	.word	0x58024800
 8003024:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302c:	3308      	adds	r3, #8
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f000 ffc5 	bl	8003fc0 <RCCEx_PLL2_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800303c:	e00f      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003042:	3328      	adds	r3, #40	; 0x28
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f001 f86c 	bl	8004124 <RCCEx_PLL3_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003052:	e004      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800305c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003066:	4bc0      	ldr	r3, [pc, #768]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003076:	4abc      	ldr	r2, [pc, #752]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003078:	430b      	orrs	r3, r1
 800307a:	6553      	str	r3, [r2, #84]	; 0x54
 800307c:	e003      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003082:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f002 0302 	and.w	r3, r2, #2
 8003092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800309c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80030a0:	460b      	mov	r3, r1
 80030a2:	4313      	orrs	r3, r2
 80030a4:	d043      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80030a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d824      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	08003105 	.word	0x08003105
 80030bc:	080030d1 	.word	0x080030d1
 80030c0:	080030e7 	.word	0x080030e7
 80030c4:	08003105 	.word	0x08003105
 80030c8:	08003105 	.word	0x08003105
 80030cc:	08003105 	.word	0x08003105
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d4:	3308      	adds	r3, #8
 80030d6:	2101      	movs	r1, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 ff71 	bl	8003fc0 <RCCEx_PLL2_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030e4:	e00f      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ea:	3328      	adds	r3, #40	; 0x28
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 f818 	bl	8004124 <RCCEx_PLL3_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030fa:	e004      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003102:	e000      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003106:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10b      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800310e:	4b96      	ldr	r3, [pc, #600]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	f023 0107 	bic.w	r1, r3, #7
 8003116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800311a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311e:	4a92      	ldr	r2, [pc, #584]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003120:	430b      	orrs	r3, r1
 8003122:	6553      	str	r3, [r2, #84]	; 0x54
 8003124:	e003      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003126:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800312a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800312e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	f002 0304 	and.w	r3, r2, #4
 800313a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800313e:	2300      	movs	r3, #0
 8003140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003144:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003148:	460b      	mov	r3, r1
 800314a:	4313      	orrs	r3, r2
 800314c:	d043      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800314e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003156:	2b05      	cmp	r3, #5
 8003158:	d824      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800315a:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	080031ad 	.word	0x080031ad
 8003164:	08003179 	.word	0x08003179
 8003168:	0800318f 	.word	0x0800318f
 800316c:	080031ad 	.word	0x080031ad
 8003170:	080031ad 	.word	0x080031ad
 8003174:	080031ad 	.word	0x080031ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800317c:	3308      	adds	r3, #8
 800317e:	2101      	movs	r1, #1
 8003180:	4618      	mov	r0, r3
 8003182:	f000 ff1d 	bl	8003fc0 <RCCEx_PLL2_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800318c:	e00f      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800318e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003192:	3328      	adds	r3, #40	; 0x28
 8003194:	2101      	movs	r1, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f000 ffc4 	bl	8004124 <RCCEx_PLL3_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031a2:	e004      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80031ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031b6:	4b6c      	ldr	r3, [pc, #432]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f023 0107 	bic.w	r1, r3, #7
 80031be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031c6:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6593      	str	r3, [r2, #88]	; 0x58
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f002 0320 	and.w	r3, r2, #32
 80031e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031f0:	460b      	mov	r3, r1
 80031f2:	4313      	orrs	r3, r2
 80031f4:	d055      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80031f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003202:	d033      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003208:	d82c      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d02f      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d826      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003216:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800321a:	d02b      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800321c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003220:	d820      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003226:	d012      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322c:	d81a      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d022      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003236:	d115      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323c:	3308      	adds	r3, #8
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f000 febd 	bl	8003fc0 <RCCEx_PLL2_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800324c:	e015      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800324e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003252:	3328      	adds	r3, #40	; 0x28
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f000 ff64 	bl	8004124 <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003262:	e00a      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800326a:	e006      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800326c:	bf00      	nop
 800326e:	e004      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003270:	bf00      	nop
 8003272:	e002      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003274:	bf00      	nop
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10b      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800328a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800328e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003292:	4a35      	ldr	r2, [pc, #212]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003294:	430b      	orrs	r3, r1
 8003296:	6553      	str	r3, [r2, #84]	; 0x54
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800329e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80032ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80032b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80032bc:	460b      	mov	r3, r1
 80032be:	4313      	orrs	r3, r2
 80032c0:	d058      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80032c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032ce:	d033      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80032d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032d4:	d82c      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	d02f      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d826      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80032e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e6:	d02b      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80032e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ec:	d820      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80032ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f2:	d012      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f8:	d81a      	bhi.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d022      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d115      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003308:	3308      	adds	r3, #8
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fe57 	bl	8003fc0 <RCCEx_PLL2_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003318:	e015      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800331a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800331e:	3328      	adds	r3, #40	; 0x28
 8003320:	2102      	movs	r1, #2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fefe 	bl	8004124 <RCCEx_PLL3_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800332e:	e00a      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003336:	e006      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003338:	bf00      	nop
 800333a:	e004      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003346:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10e      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800335e:	4a02      	ldr	r2, [pc, #8]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003360:	430b      	orrs	r3, r1
 8003362:	6593      	str	r3, [r2, #88]	; 0x58
 8003364:	e006      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003366:	bf00      	nop
 8003368:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003370:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800338a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d055      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003398:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800339c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033a0:	d033      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80033a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033a6:	d82c      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80033a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ac:	d02f      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80033ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b2:	d826      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80033b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033b8:	d02b      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80033ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033be:	d820      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80033c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c4:	d012      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ca:	d81a      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d022      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80033d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d4:	d115      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033da:	3308      	adds	r3, #8
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fdee 	bl	8003fc0 <RCCEx_PLL2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033ea:	e015      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f0:	3328      	adds	r3, #40	; 0x28
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fe95 	bl	8004124 <RCCEx_PLL3_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003400:	e00a      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003408:	e006      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800340a:	bf00      	nop
 800340c:	e004      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800340e:	bf00      	nop
 8003410:	e002      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003412:	bf00      	nop
 8003414:	e000      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003418:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003420:	4ba1      	ldr	r3, [pc, #644]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003430:	4a9d      	ldr	r2, [pc, #628]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003432:	430b      	orrs	r3, r1
 8003434:	6593      	str	r3, [r2, #88]	; 0x58
 8003436:	e003      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800343c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f002 0308 	and.w	r3, r2, #8
 800344c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003456:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d01e      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346c:	d10c      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003472:	3328      	adds	r3, #40	; 0x28
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fe54 	bl	8004124 <RCCEx_PLL3_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003488:	4b87      	ldr	r3, [pc, #540]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003498:	4a83      	ldr	r2, [pc, #524]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800349a:	430b      	orrs	r3, r1
 800349c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800349e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f002 0310 	and.w	r3, r2, #16
 80034aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80034b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d01e      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80034be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d0:	3328      	adds	r3, #40	; 0x28
 80034d2:	2102      	movs	r1, #2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fe25 	bl	8004124 <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034e6:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034f6:	4a6c      	ldr	r2, [pc, #432]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800350c:	2300      	movs	r3, #0
 800350e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003512:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003516:	460b      	mov	r3, r1
 8003518:	4313      	orrs	r3, r2
 800351a:	d03e      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800351c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003520:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003528:	d022      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800352a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352e:	d81b      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d00b      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800353a:	e015      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003540:	3308      	adds	r3, #8
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fd3b 	bl	8003fc0 <RCCEx_PLL2_Config>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003550:	e00f      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003556:	3328      	adds	r3, #40	; 0x28
 8003558:	2102      	movs	r1, #2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fde2 	bl	8004124 <RCCEx_PLL3_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003566:	e004      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003572:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800357a:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003586:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800358a:	4a47      	ldr	r2, [pc, #284]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6593      	str	r3, [r2, #88]	; 0x58
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003596:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800359a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80035a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80035a8:	2300      	movs	r3, #0
 80035aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80035b0:	460b      	mov	r3, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80035b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c2:	d01f      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80035c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c8:	d818      	bhi.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80035ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ce:	d003      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80035d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d4:	d007      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80035d6:	e011      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d8:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	4a32      	ldr	r2, [pc, #200]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80035e4:	e00f      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ea:	3328      	adds	r3, #40	; 0x28
 80035ec:	2101      	movs	r1, #1
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fd98 	bl	8004124 <RCCEx_PLL3_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80035fa:	e004      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003602:	e000      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003606:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800360e:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003620:	430b      	orrs	r3, r1
 8003622:	6553      	str	r3, [r2, #84]	; 0x54
 8003624:	e003      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003626:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800362a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800362e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800363a:	673b      	str	r3, [r7, #112]	; 0x70
 800363c:	2300      	movs	r3, #0
 800363e:	677b      	str	r3, [r7, #116]	; 0x74
 8003640:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003644:	460b      	mov	r3, r1
 8003646:	4313      	orrs	r3, r2
 8003648:	d034      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800364a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d007      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800365a:	e011      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003668:	e00e      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800366a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366e:	3308      	adds	r3, #8
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fca4 	bl	8003fc0 <RCCEx_PLL2_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800367e:	e003      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003688:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10d      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	4a02      	ldr	r2, [pc, #8]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036a0:	430b      	orrs	r3, r1
 80036a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a4:	e006      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80036a6:	bf00      	nop
 80036a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80036c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80036c2:	2300      	movs	r3, #0
 80036c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80036ca:	460b      	mov	r3, r1
 80036cc:	4313      	orrs	r3, r2
 80036ce:	d00c      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	3328      	adds	r3, #40	; 0x28
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fd23 	bl	8004124 <RCCEx_PLL3_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80036f6:	663b      	str	r3, [r7, #96]	; 0x60
 80036f8:	2300      	movs	r3, #0
 80036fa:	667b      	str	r3, [r7, #100]	; 0x64
 80036fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003700:	460b      	mov	r3, r1
 8003702:	4313      	orrs	r3, r2
 8003704:	d038      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003712:	d018      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003718:	d811      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800371a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371e:	d014      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003724:	d80b      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d011      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372e:	d106      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003730:	4bc3      	ldr	r3, [pc, #780]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	4ac2      	ldr	r2, [pc, #776]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003744:	e004      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800374e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003758:	4bb9      	ldr	r3, [pc, #740]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	4ab5      	ldr	r2, [pc, #724]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800376a:	430b      	orrs	r3, r1
 800376c:	6553      	str	r3, [r2, #84]	; 0x54
 800376e:	e003      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003774:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003784:	65bb      	str	r3, [r7, #88]	; 0x58
 8003786:	2300      	movs	r3, #0
 8003788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800378a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003794:	4baa      	ldr	r3, [pc, #680]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003798:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800379c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a2:	4aa7      	ldr	r2, [pc, #668]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80037b4:	653b      	str	r3, [r7, #80]	; 0x50
 80037b6:	2300      	movs	r3, #0
 80037b8:	657b      	str	r3, [r7, #84]	; 0x54
 80037ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80037be:	460b      	mov	r3, r1
 80037c0:	4313      	orrs	r3, r2
 80037c2:	d009      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c4:	4b9e      	ldr	r3, [pc, #632]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80037cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a9b      	ldr	r2, [pc, #620]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80037d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80037e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e6:	2300      	movs	r3, #0
 80037e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80037ee:	460b      	mov	r3, r1
 80037f0:	4313      	orrs	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80037f4:	4b92      	ldr	r3, [pc, #584]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80037fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003802:	4a8f      	ldr	r2, [pc, #572]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003804:	430b      	orrs	r3, r1
 8003806:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003814:	643b      	str	r3, [r7, #64]	; 0x40
 8003816:	2300      	movs	r3, #0
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
 800381a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800381e:	460b      	mov	r3, r1
 8003820:	4313      	orrs	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003824:	4b86      	ldr	r3, [pc, #536]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4a85      	ldr	r2, [pc, #532]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800382a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800382e:	6113      	str	r3, [r2, #16]
 8003830:	4b83      	ldr	r3, [pc, #524]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003832:	6919      	ldr	r1, [r3, #16]
 8003834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003838:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800383c:	4a80      	ldr	r2, [pc, #512]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800383e:	430b      	orrs	r3, r1
 8003840:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003850:	2300      	movs	r3, #0
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003858:	460b      	mov	r3, r1
 800385a:	4313      	orrs	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800385e:	4b78      	ldr	r3, [pc, #480]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	4a74      	ldr	r2, [pc, #464]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800386e:	430b      	orrs	r3, r1
 8003870:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
 8003880:	2300      	movs	r3, #0
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
 8003884:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800388e:	4b6c      	ldr	r3, [pc, #432]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389e:	4a68      	ldr	r2, [pc, #416]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	2100      	movs	r1, #0
 80038ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d011      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c4:	3308      	adds	r3, #8
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fb79 	bl	8003fc0 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	2100      	movs	r1, #0
 80038ee:	6239      	str	r1, [r7, #32]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d011      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003904:	3308      	adds	r3, #8
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fb59 	bl	8003fc0 <RCCEx_PLL2_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003914:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003920:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	2100      	movs	r1, #0
 800392e:	61b9      	str	r1, [r7, #24]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800393a:	460b      	mov	r3, r1
 800393c:	4313      	orrs	r3, r2
 800393e:	d011      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003944:	3308      	adds	r3, #8
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fb39 	bl	8003fc0 <RCCEx_PLL2_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003954:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003960:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	2100      	movs	r1, #0
 800396e:	6139      	str	r1, [r7, #16]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	d011      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003984:	3328      	adds	r3, #40	; 0x28
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fbcb 	bl	8004124 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003994:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80039a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	2100      	movs	r1, #0
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d011      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c4:	3328      	adds	r3, #40	; 0x28
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fbab 	bl	8004124 <RCCEx_PLL3_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80039d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80039e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	2100      	movs	r1, #0
 80039ee:	6039      	str	r1, [r7, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039fa:	460b      	mov	r3, r1
 80039fc:	4313      	orrs	r3, r2
 80039fe:	d011      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a04:	3328      	adds	r3, #40	; 0x28
 8003a06:	2102      	movs	r1, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fb8b 	bl	8004124 <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003a14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003a24:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3e:	bf00      	nop
 8003a40:	58024400 	.word	0x58024400

08003a44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003a48:	f7fe fde2 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	58024400 	.word	0x58024400
 8003a6c:	08005ba8 	.word	0x08005ba8

08003a70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b089      	sub	sp, #36	; 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a78:	4ba1      	ldr	r3, [pc, #644]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a82:	4b9f      	ldr	r3, [pc, #636]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	0b1b      	lsrs	r3, r3, #12
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a8e:	4b9c      	ldr	r3, [pc, #624]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a9a:	4b99      	ldr	r3, [pc, #612]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8111 	beq.w	8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	f000 8083 	beq.w	8003bcc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	f200 80a1 	bhi.w	8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d056      	beq.n	8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ada:	e099      	b.n	8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003adc:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02d      	beq.n	8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ae8:	4b85      	ldr	r3, [pc, #532]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	08db      	lsrs	r3, r3, #3
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	4a84      	ldr	r2, [pc, #528]	; (8003d04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
 8003af8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b12:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b42:	e087      	b.n	8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b56:	4b6a      	ldr	r3, [pc, #424]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b86:	e065      	b.n	8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9a:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bca:	e043      	b.n	8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bde:	4b48      	ldr	r3, [pc, #288]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c0e:	e021      	b.n	8003c54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c22:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003c54:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	0a5b      	lsrs	r3, r3, #9
 8003c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7a:	ee17 2a90 	vmov	r2, s15
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c82:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca8:	ee17 2a90 	vmov	r2, s15
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	0e1b      	lsrs	r3, r3, #24
 8003cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd6:	ee17 2a90 	vmov	r2, s15
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003cde:	e008      	b.n	8003cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
}
 8003cf2:	bf00      	nop
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	58024400 	.word	0x58024400
 8003d04:	03d09000 	.word	0x03d09000
 8003d08:	46000000 	.word	0x46000000
 8003d0c:	4c742400 	.word	0x4c742400
 8003d10:	4a742400 	.word	0x4a742400
 8003d14:	4af42400 	.word	0x4af42400

08003d18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d20:	4ba1      	ldr	r3, [pc, #644]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003d2a:	4b9f      	ldr	r3, [pc, #636]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	0d1b      	lsrs	r3, r3, #20
 8003d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d36:	4b9c      	ldr	r3, [pc, #624]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003d42:	4b99      	ldr	r3, [pc, #612]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8111 	beq.w	8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	f000 8083 	beq.w	8003e74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	f200 80a1 	bhi.w	8003eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d056      	beq.n	8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d82:	e099      	b.n	8003eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d84:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02d      	beq.n	8003dec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d90:	4b85      	ldr	r3, [pc, #532]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	4a84      	ldr	r2, [pc, #528]	; (8003fac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	ee07 3a90 	vmov	s15, r3
 8003da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b7b      	ldr	r3, [pc, #492]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003dea:	e087      	b.n	8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e12:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e2e:	e065      	b.n	8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b59      	ldr	r3, [pc, #356]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e56:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e72:	e043      	b.n	8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b48      	ldr	r3, [pc, #288]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb6:	e021      	b.n	8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ede:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003efc:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	0a5b      	lsrs	r3, r3, #9
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f22:	ee17 2a90 	vmov	r2, s15
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	0c1b      	lsrs	r3, r3, #16
 8003f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f50:	ee17 2a90 	vmov	r2, s15
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	0e1b      	lsrs	r3, r3, #24
 8003f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7e:	ee17 2a90 	vmov	r2, s15
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f86:	e008      	b.n	8003f9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
}
 8003f9a:	bf00      	nop
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	03d09000 	.word	0x03d09000
 8003fb0:	46000000 	.word	0x46000000
 8003fb4:	4c742400 	.word	0x4c742400
 8003fb8:	4a742400 	.word	0x4a742400
 8003fbc:	4af42400 	.word	0x4af42400

08003fc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fce:	4b53      	ldr	r3, [pc, #332]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d101      	bne.n	8003fde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e099      	b.n	8004112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fde:	4b4f      	ldr	r3, [pc, #316]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a4e      	ldr	r2, [pc, #312]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8003fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fea:	f7fd f891 	bl	8001110 <HAL_GetTick>
 8003fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ff2:	f7fd f88d 	bl	8001110 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e086      	b.n	8004112 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004004:	4b45      	ldr	r3, [pc, #276]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004010:	4b42      	ldr	r3, [pc, #264]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	493f      	ldr	r1, [pc, #252]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8004020:	4313      	orrs	r3, r2
 8004022:	628b      	str	r3, [r1, #40]	; 0x28
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	3b01      	subs	r3, #1
 800402a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	3b01      	subs	r3, #1
 8004034:	025b      	lsls	r3, r3, #9
 8004036:	b29b      	uxth	r3, r3
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	3b01      	subs	r3, #1
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	3b01      	subs	r3, #1
 800404e:	061b      	lsls	r3, r3, #24
 8004050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004054:	4931      	ldr	r1, [pc, #196]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800405a:	4b30      	ldr	r3, [pc, #192]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	492d      	ldr	r1, [pc, #180]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8004068:	4313      	orrs	r3, r2
 800406a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800406c:	4b2b      	ldr	r3, [pc, #172]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	f023 0220 	bic.w	r2, r3, #32
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	4928      	ldr	r1, [pc, #160]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800407e:	4b27      	ldr	r3, [pc, #156]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	4a26      	ldr	r2, [pc, #152]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8004084:	f023 0310 	bic.w	r3, r3, #16
 8004088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 800408c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <RCCEx_PLL2_Config+0x160>)
 8004090:	4013      	ands	r3, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	69d2      	ldr	r2, [r2, #28]
 8004096:	00d2      	lsls	r2, r2, #3
 8004098:	4920      	ldr	r1, [pc, #128]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800409e:	4b1f      	ldr	r3, [pc, #124]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	4a1e      	ldr	r2, [pc, #120]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040bc:	e00f      	b.n	80040de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80040c4:	4b15      	ldr	r3, [pc, #84]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a14      	ldr	r2, [pc, #80]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040d0:	e005      	b.n	80040de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	4a11      	ldr	r2, [pc, #68]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a0e      	ldr	r2, [pc, #56]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 80040e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ea:	f7fd f811 	bl	8001110 <HAL_GetTick>
 80040ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040f0:	e008      	b.n	8004104 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040f2:	f7fd f80d 	bl	8001110 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e006      	b.n	8004112 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <RCCEx_PLL2_Config+0x15c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	58024400 	.word	0x58024400
 8004120:	ffff0007 	.word	0xffff0007

08004124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004132:	4b53      	ldr	r3, [pc, #332]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b03      	cmp	r3, #3
 800413c:	d101      	bne.n	8004142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e099      	b.n	8004276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004142:	4b4f      	ldr	r3, [pc, #316]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a4e      	ldr	r2, [pc, #312]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414e:	f7fc ffdf 	bl	8001110 <HAL_GetTick>
 8004152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004154:	e008      	b.n	8004168 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004156:	f7fc ffdb 	bl	8001110 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e086      	b.n	8004276 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004168:	4b45      	ldr	r3, [pc, #276]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004174:	4b42      	ldr	r3, [pc, #264]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	051b      	lsls	r3, r3, #20
 8004182:	493f      	ldr	r1, [pc, #252]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004184:	4313      	orrs	r3, r2
 8004186:	628b      	str	r3, [r1, #40]	; 0x28
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	3b01      	subs	r3, #1
 800418e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	3b01      	subs	r3, #1
 8004198:	025b      	lsls	r3, r3, #9
 800419a:	b29b      	uxth	r3, r3
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041b8:	4931      	ldr	r1, [pc, #196]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	492d      	ldr	r1, [pc, #180]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4928      	ldr	r1, [pc, #160]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041e2:	4b27      	ldr	r3, [pc, #156]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a26      	ldr	r2, [pc, #152]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f2:	4b24      	ldr	r3, [pc, #144]	; (8004284 <RCCEx_PLL3_Config+0x160>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	69d2      	ldr	r2, [r2, #28]
 80041fa:	00d2      	lsls	r2, r2, #3
 80041fc:	4920      	ldr	r1, [pc, #128]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004202:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 800421a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800421e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004220:	e00f      	b.n	8004242 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	4a14      	ldr	r2, [pc, #80]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 800422e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004234:	e005      	b.n	8004242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	4a11      	ldr	r2, [pc, #68]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 800423c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004242:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424e:	f7fc ff5f 	bl	8001110 <HAL_GetTick>
 8004252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004254:	e008      	b.n	8004268 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004256:	f7fc ff5b 	bl	8001110 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e006      	b.n	8004276 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <RCCEx_PLL3_Config+0x15c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400
 8004284:	ffff0007 	.word	0xffff0007

08004288 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e04a      	b.n	8004330 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fc fdb1 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2224      	movs	r2, #36	; 0x24
 80042b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f980 	bl	80045d0 <UART_SetConfig>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e02a      	b.n	8004330 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 ffe0 	bl	80052a8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004306:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0208 	orr.w	r2, r2, #8
 8004316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f001 f85f 	bl	80053ec <UART_CheckIdleState>
 800432e:	4603      	mov	r3, r0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	2b20      	cmp	r3, #32
 8004350:	d17b      	bne.n	800444a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <HAL_UART_Transmit+0x26>
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e074      	b.n	800444c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2221      	movs	r2, #33	; 0x21
 800436e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004372:	f7fc fecd 	bl	8001110 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	d108      	bne.n	80043a4 <HAL_UART_Transmit+0x6c>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d104      	bne.n	80043a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e003      	b.n	80043ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043ac:	e030      	b.n	8004410 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f001 f8c1 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e03d      	b.n	800444c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	3302      	adds	r3, #2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e007      	b.n	80043fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1c8      	bne.n	80043ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2200      	movs	r2, #0
 8004424:	2140      	movs	r1, #64	; 0x40
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f001 f88a 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e006      	b.n	800444c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e000      	b.n	800444c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800444a:	2302      	movs	r3, #2
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b08f      	sub	sp, #60	; 0x3c
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8004466:	2302      	movs	r3, #2
 8004468:	e042      	b.n	80044f0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2224      	movs	r2, #36	; 0x24
 8004476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	61fb      	str	r3, [r7, #28]
   return(result);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f023 030c 	bic.w	r3, r3, #12
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449a:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800449e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e6      	bne.n	800447a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f043 0308 	orr.w	r3, r3, #8
 80044c0:	633b      	str	r3, [r7, #48]	; 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	613b      	str	r3, [r7, #16]
   return(result);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e6      	bne.n	80044ac <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	373c      	adds	r7, #60	; 0x3c
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b08f      	sub	sp, #60	; 0x3c
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_HalfDuplex_EnableReceiver+0x16>
 800450e:	2302      	movs	r3, #2
 8004510:	e042      	b.n	8004598 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2224      	movs	r2, #36	; 0x24
 800451e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f023 030c 	bic.w	r3, r3, #12
 8004536:	637b      	str	r3, [r7, #52]	; 0x34
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004542:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e6      	bne.n	8004522 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	60bb      	str	r3, [r7, #8]
   return(result);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f043 0304 	orr.w	r3, r3, #4
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6979      	ldr	r1, [r7, #20]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	613b      	str	r3, [r7, #16]
   return(result);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e6      	bne.n	8004554 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	373c      	adds	r7, #60	; 0x3c
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ba:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4313      	orrs	r3, r2
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d4:	b092      	sub	sp, #72	; 0x48
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4bbe      	ldr	r3, [pc, #760]	; (80048f8 <UART_SetConfig+0x328>)
 8004600:	4013      	ands	r3, r2
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004608:	430b      	orrs	r3, r1
 800460a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4ab3      	ldr	r2, [pc, #716]	; (80048fc <UART_SetConfig+0x32c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004638:	4313      	orrs	r3, r2
 800463a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	4baf      	ldr	r3, [pc, #700]	; (8004900 <UART_SetConfig+0x330>)
 8004644:	4013      	ands	r3, r2
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800464c:	430b      	orrs	r3, r1
 800464e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	f023 010f 	bic.w	r1, r3, #15
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4aa6      	ldr	r2, [pc, #664]	; (8004904 <UART_SetConfig+0x334>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d177      	bne.n	8004760 <UART_SetConfig+0x190>
 8004670:	4ba5      	ldr	r3, [pc, #660]	; (8004908 <UART_SetConfig+0x338>)
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004678:	2b28      	cmp	r3, #40	; 0x28
 800467a:	d86d      	bhi.n	8004758 <UART_SetConfig+0x188>
 800467c:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <UART_SetConfig+0xb4>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	08004729 	.word	0x08004729
 8004688:	08004759 	.word	0x08004759
 800468c:	08004759 	.word	0x08004759
 8004690:	08004759 	.word	0x08004759
 8004694:	08004759 	.word	0x08004759
 8004698:	08004759 	.word	0x08004759
 800469c:	08004759 	.word	0x08004759
 80046a0:	08004759 	.word	0x08004759
 80046a4:	08004731 	.word	0x08004731
 80046a8:	08004759 	.word	0x08004759
 80046ac:	08004759 	.word	0x08004759
 80046b0:	08004759 	.word	0x08004759
 80046b4:	08004759 	.word	0x08004759
 80046b8:	08004759 	.word	0x08004759
 80046bc:	08004759 	.word	0x08004759
 80046c0:	08004759 	.word	0x08004759
 80046c4:	08004739 	.word	0x08004739
 80046c8:	08004759 	.word	0x08004759
 80046cc:	08004759 	.word	0x08004759
 80046d0:	08004759 	.word	0x08004759
 80046d4:	08004759 	.word	0x08004759
 80046d8:	08004759 	.word	0x08004759
 80046dc:	08004759 	.word	0x08004759
 80046e0:	08004759 	.word	0x08004759
 80046e4:	08004741 	.word	0x08004741
 80046e8:	08004759 	.word	0x08004759
 80046ec:	08004759 	.word	0x08004759
 80046f0:	08004759 	.word	0x08004759
 80046f4:	08004759 	.word	0x08004759
 80046f8:	08004759 	.word	0x08004759
 80046fc:	08004759 	.word	0x08004759
 8004700:	08004759 	.word	0x08004759
 8004704:	08004749 	.word	0x08004749
 8004708:	08004759 	.word	0x08004759
 800470c:	08004759 	.word	0x08004759
 8004710:	08004759 	.word	0x08004759
 8004714:	08004759 	.word	0x08004759
 8004718:	08004759 	.word	0x08004759
 800471c:	08004759 	.word	0x08004759
 8004720:	08004759 	.word	0x08004759
 8004724:	08004751 	.word	0x08004751
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e326      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e322      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473e:	e31e      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004746:	e31a      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004748:	2320      	movs	r3, #32
 800474a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474e:	e316      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004750:	2340      	movs	r3, #64	; 0x40
 8004752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004756:	e312      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475e:	e30e      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a69      	ldr	r2, [pc, #420]	; (800490c <UART_SetConfig+0x33c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d130      	bne.n	80047cc <UART_SetConfig+0x1fc>
 800476a:	4b67      	ldr	r3, [pc, #412]	; (8004908 <UART_SetConfig+0x338>)
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b05      	cmp	r3, #5
 8004774:	d826      	bhi.n	80047c4 <UART_SetConfig+0x1f4>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0x1ac>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	08004795 	.word	0x08004795
 8004780:	0800479d 	.word	0x0800479d
 8004784:	080047a5 	.word	0x080047a5
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047bd 	.word	0x080047bd
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479a:	e2f0      	b.n	8004d7e <UART_SetConfig+0x7ae>
 800479c:	2304      	movs	r3, #4
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a2:	e2ec      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80047a4:	2308      	movs	r3, #8
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047aa:	e2e8      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80047ac:	2310      	movs	r3, #16
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b2:	e2e4      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80047b4:	2320      	movs	r3, #32
 80047b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ba:	e2e0      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80047bc:	2340      	movs	r3, #64	; 0x40
 80047be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c2:	e2dc      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ca:	e2d8      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a4f      	ldr	r2, [pc, #316]	; (8004910 <UART_SetConfig+0x340>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d130      	bne.n	8004838 <UART_SetConfig+0x268>
 80047d6:	4b4c      	ldr	r3, [pc, #304]	; (8004908 <UART_SetConfig+0x338>)
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d826      	bhi.n	8004830 <UART_SetConfig+0x260>
 80047e2:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <UART_SetConfig+0x218>)
 80047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e8:	08004801 	.word	0x08004801
 80047ec:	08004809 	.word	0x08004809
 80047f0:	08004811 	.word	0x08004811
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004829 	.word	0x08004829
 8004800:	2300      	movs	r3, #0
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004806:	e2ba      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480e:	e2b6      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004816:	e2b2      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481e:	e2ae      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004820:	2320      	movs	r3, #32
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004826:	e2aa      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004828:	2340      	movs	r3, #64	; 0x40
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482e:	e2a6      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004836:	e2a2      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a35      	ldr	r2, [pc, #212]	; (8004914 <UART_SetConfig+0x344>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d130      	bne.n	80048a4 <UART_SetConfig+0x2d4>
 8004842:	4b31      	ldr	r3, [pc, #196]	; (8004908 <UART_SetConfig+0x338>)
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	2b05      	cmp	r3, #5
 800484c:	d826      	bhi.n	800489c <UART_SetConfig+0x2cc>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0x284>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	0800486d 	.word	0x0800486d
 8004858:	08004875 	.word	0x08004875
 800485c:	0800487d 	.word	0x0800487d
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004872:	e284      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800487a:	e280      	b.n	8004d7e <UART_SetConfig+0x7ae>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004882:	e27c      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488a:	e278      	b.n	8004d7e <UART_SetConfig+0x7ae>
 800488c:	2320      	movs	r3, #32
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004892:	e274      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004894:	2340      	movs	r3, #64	; 0x40
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489a:	e270      	b.n	8004d7e <UART_SetConfig+0x7ae>
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a2:	e26c      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <UART_SetConfig+0x348>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d142      	bne.n	8004934 <UART_SetConfig+0x364>
 80048ae:	4b16      	ldr	r3, [pc, #88]	; (8004908 <UART_SetConfig+0x338>)
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d838      	bhi.n	800492c <UART_SetConfig+0x35c>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <UART_SetConfig+0x2f0>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048e1 	.word	0x080048e1
 80048c8:	080048e9 	.word	0x080048e9
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	0800491d 	.word	0x0800491d
 80048d4:	08004925 	.word	0x08004925
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048de:	e24e      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048e6:	e24a      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ee:	e246      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048f6:	e242      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80048f8:	cfff69f3 	.word	0xcfff69f3
 80048fc:	58000c00 	.word	0x58000c00
 8004900:	11fff4ff 	.word	0x11fff4ff
 8004904:	40011000 	.word	0x40011000
 8004908:	58024400 	.word	0x58024400
 800490c:	40004400 	.word	0x40004400
 8004910:	40004800 	.word	0x40004800
 8004914:	40004c00 	.word	0x40004c00
 8004918:	40005000 	.word	0x40005000
 800491c:	2320      	movs	r3, #32
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004922:	e22c      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492a:	e228      	b.n	8004d7e <UART_SetConfig+0x7ae>
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004932:	e224      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4ab1      	ldr	r2, [pc, #708]	; (8004c00 <UART_SetConfig+0x630>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d176      	bne.n	8004a2c <UART_SetConfig+0x45c>
 800493e:	4bb1      	ldr	r3, [pc, #708]	; (8004c04 <UART_SetConfig+0x634>)
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004946:	2b28      	cmp	r3, #40	; 0x28
 8004948:	d86c      	bhi.n	8004a24 <UART_SetConfig+0x454>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x380>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	080049f5 	.word	0x080049f5
 8004954:	08004a25 	.word	0x08004a25
 8004958:	08004a25 	.word	0x08004a25
 800495c:	08004a25 	.word	0x08004a25
 8004960:	08004a25 	.word	0x08004a25
 8004964:	08004a25 	.word	0x08004a25
 8004968:	08004a25 	.word	0x08004a25
 800496c:	08004a25 	.word	0x08004a25
 8004970:	080049fd 	.word	0x080049fd
 8004974:	08004a25 	.word	0x08004a25
 8004978:	08004a25 	.word	0x08004a25
 800497c:	08004a25 	.word	0x08004a25
 8004980:	08004a25 	.word	0x08004a25
 8004984:	08004a25 	.word	0x08004a25
 8004988:	08004a25 	.word	0x08004a25
 800498c:	08004a25 	.word	0x08004a25
 8004990:	08004a05 	.word	0x08004a05
 8004994:	08004a25 	.word	0x08004a25
 8004998:	08004a25 	.word	0x08004a25
 800499c:	08004a25 	.word	0x08004a25
 80049a0:	08004a25 	.word	0x08004a25
 80049a4:	08004a25 	.word	0x08004a25
 80049a8:	08004a25 	.word	0x08004a25
 80049ac:	08004a25 	.word	0x08004a25
 80049b0:	08004a0d 	.word	0x08004a0d
 80049b4:	08004a25 	.word	0x08004a25
 80049b8:	08004a25 	.word	0x08004a25
 80049bc:	08004a25 	.word	0x08004a25
 80049c0:	08004a25 	.word	0x08004a25
 80049c4:	08004a25 	.word	0x08004a25
 80049c8:	08004a25 	.word	0x08004a25
 80049cc:	08004a25 	.word	0x08004a25
 80049d0:	08004a15 	.word	0x08004a15
 80049d4:	08004a25 	.word	0x08004a25
 80049d8:	08004a25 	.word	0x08004a25
 80049dc:	08004a25 	.word	0x08004a25
 80049e0:	08004a25 	.word	0x08004a25
 80049e4:	08004a25 	.word	0x08004a25
 80049e8:	08004a25 	.word	0x08004a25
 80049ec:	08004a25 	.word	0x08004a25
 80049f0:	08004a1d 	.word	0x08004a1d
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fa:	e1c0      	b.n	8004d7e <UART_SetConfig+0x7ae>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a02:	e1bc      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0a:	e1b8      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a12:	e1b4      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a14:	2320      	movs	r3, #32
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1a:	e1b0      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a1c:	2340      	movs	r3, #64	; 0x40
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a22:	e1ac      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2a:	e1a8      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a75      	ldr	r2, [pc, #468]	; (8004c08 <UART_SetConfig+0x638>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d130      	bne.n	8004a98 <UART_SetConfig+0x4c8>
 8004a36:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <UART_SetConfig+0x634>)
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	d826      	bhi.n	8004a90 <UART_SetConfig+0x4c0>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <UART_SetConfig+0x478>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a61 	.word	0x08004a61
 8004a4c:	08004a69 	.word	0x08004a69
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a66:	e18a      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6e:	e186      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a70:	2308      	movs	r3, #8
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a76:	e182      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7e:	e17e      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a80:	2320      	movs	r3, #32
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a86:	e17a      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a88:	2340      	movs	r3, #64	; 0x40
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8e:	e176      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a96:	e172      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a5b      	ldr	r2, [pc, #364]	; (8004c0c <UART_SetConfig+0x63c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d130      	bne.n	8004b04 <UART_SetConfig+0x534>
 8004aa2:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <UART_SetConfig+0x634>)
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d826      	bhi.n	8004afc <UART_SetConfig+0x52c>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0x4e4>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004acd 	.word	0x08004acd
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	08004add 	.word	0x08004add
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ad2:	e154      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ada:	e150      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004adc:	2308      	movs	r3, #8
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae2:	e14c      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aea:	e148      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004aec:	2320      	movs	r3, #32
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af2:	e144      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004af4:	2340      	movs	r3, #64	; 0x40
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afa:	e140      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b02:	e13c      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a41      	ldr	r2, [pc, #260]	; (8004c10 <UART_SetConfig+0x640>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	f040 8082 	bne.w	8004c14 <UART_SetConfig+0x644>
 8004b10:	4b3c      	ldr	r3, [pc, #240]	; (8004c04 <UART_SetConfig+0x634>)
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b18:	2b28      	cmp	r3, #40	; 0x28
 8004b1a:	d86d      	bhi.n	8004bf8 <UART_SetConfig+0x628>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <UART_SetConfig+0x554>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004bc9 	.word	0x08004bc9
 8004b28:	08004bf9 	.word	0x08004bf9
 8004b2c:	08004bf9 	.word	0x08004bf9
 8004b30:	08004bf9 	.word	0x08004bf9
 8004b34:	08004bf9 	.word	0x08004bf9
 8004b38:	08004bf9 	.word	0x08004bf9
 8004b3c:	08004bf9 	.word	0x08004bf9
 8004b40:	08004bf9 	.word	0x08004bf9
 8004b44:	08004bd1 	.word	0x08004bd1
 8004b48:	08004bf9 	.word	0x08004bf9
 8004b4c:	08004bf9 	.word	0x08004bf9
 8004b50:	08004bf9 	.word	0x08004bf9
 8004b54:	08004bf9 	.word	0x08004bf9
 8004b58:	08004bf9 	.word	0x08004bf9
 8004b5c:	08004bf9 	.word	0x08004bf9
 8004b60:	08004bf9 	.word	0x08004bf9
 8004b64:	08004bd9 	.word	0x08004bd9
 8004b68:	08004bf9 	.word	0x08004bf9
 8004b6c:	08004bf9 	.word	0x08004bf9
 8004b70:	08004bf9 	.word	0x08004bf9
 8004b74:	08004bf9 	.word	0x08004bf9
 8004b78:	08004bf9 	.word	0x08004bf9
 8004b7c:	08004bf9 	.word	0x08004bf9
 8004b80:	08004bf9 	.word	0x08004bf9
 8004b84:	08004be1 	.word	0x08004be1
 8004b88:	08004bf9 	.word	0x08004bf9
 8004b8c:	08004bf9 	.word	0x08004bf9
 8004b90:	08004bf9 	.word	0x08004bf9
 8004b94:	08004bf9 	.word	0x08004bf9
 8004b98:	08004bf9 	.word	0x08004bf9
 8004b9c:	08004bf9 	.word	0x08004bf9
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004be9 	.word	0x08004be9
 8004ba8:	08004bf9 	.word	0x08004bf9
 8004bac:	08004bf9 	.word	0x08004bf9
 8004bb0:	08004bf9 	.word	0x08004bf9
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004bf9 	.word	0x08004bf9
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bce:	e0d6      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bd6:	e0d2      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004bd8:	2308      	movs	r3, #8
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bde:	e0ce      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004be0:	2310      	movs	r3, #16
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be6:	e0ca      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004be8:	2320      	movs	r3, #32
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bee:	e0c6      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004bf0:	2340      	movs	r3, #64	; 0x40
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf6:	e0c2      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfe:	e0be      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004c00:	40011400 	.word	0x40011400
 8004c04:	58024400 	.word	0x58024400
 8004c08:	40007800 	.word	0x40007800
 8004c0c:	40007c00 	.word	0x40007c00
 8004c10:	40011800 	.word	0x40011800
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4aad      	ldr	r2, [pc, #692]	; (8004ed0 <UART_SetConfig+0x900>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d176      	bne.n	8004d0c <UART_SetConfig+0x73c>
 8004c1e:	4bad      	ldr	r3, [pc, #692]	; (8004ed4 <UART_SetConfig+0x904>)
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c26:	2b28      	cmp	r3, #40	; 0x28
 8004c28:	d86c      	bhi.n	8004d04 <UART_SetConfig+0x734>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <UART_SetConfig+0x660>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004cd5 	.word	0x08004cd5
 8004c34:	08004d05 	.word	0x08004d05
 8004c38:	08004d05 	.word	0x08004d05
 8004c3c:	08004d05 	.word	0x08004d05
 8004c40:	08004d05 	.word	0x08004d05
 8004c44:	08004d05 	.word	0x08004d05
 8004c48:	08004d05 	.word	0x08004d05
 8004c4c:	08004d05 	.word	0x08004d05
 8004c50:	08004cdd 	.word	0x08004cdd
 8004c54:	08004d05 	.word	0x08004d05
 8004c58:	08004d05 	.word	0x08004d05
 8004c5c:	08004d05 	.word	0x08004d05
 8004c60:	08004d05 	.word	0x08004d05
 8004c64:	08004d05 	.word	0x08004d05
 8004c68:	08004d05 	.word	0x08004d05
 8004c6c:	08004d05 	.word	0x08004d05
 8004c70:	08004ce5 	.word	0x08004ce5
 8004c74:	08004d05 	.word	0x08004d05
 8004c78:	08004d05 	.word	0x08004d05
 8004c7c:	08004d05 	.word	0x08004d05
 8004c80:	08004d05 	.word	0x08004d05
 8004c84:	08004d05 	.word	0x08004d05
 8004c88:	08004d05 	.word	0x08004d05
 8004c8c:	08004d05 	.word	0x08004d05
 8004c90:	08004ced 	.word	0x08004ced
 8004c94:	08004d05 	.word	0x08004d05
 8004c98:	08004d05 	.word	0x08004d05
 8004c9c:	08004d05 	.word	0x08004d05
 8004ca0:	08004d05 	.word	0x08004d05
 8004ca4:	08004d05 	.word	0x08004d05
 8004ca8:	08004d05 	.word	0x08004d05
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004cf5 	.word	0x08004cf5
 8004cb4:	08004d05 	.word	0x08004d05
 8004cb8:	08004d05 	.word	0x08004d05
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004d05 	.word	0x08004d05
 8004cc4:	08004d05 	.word	0x08004d05
 8004cc8:	08004d05 	.word	0x08004d05
 8004ccc:	08004d05 	.word	0x08004d05
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e050      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e04c      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e048      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e044      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfa:	e040      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004cfc:	2340      	movs	r3, #64	; 0x40
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d02:	e03c      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0a:	e038      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a71      	ldr	r2, [pc, #452]	; (8004ed8 <UART_SetConfig+0x908>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d130      	bne.n	8004d78 <UART_SetConfig+0x7a8>
 8004d16:	4b6f      	ldr	r3, [pc, #444]	; (8004ed4 <UART_SetConfig+0x904>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d826      	bhi.n	8004d70 <UART_SetConfig+0x7a0>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x758>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d41 	.word	0x08004d41
 8004d2c:	08004d49 	.word	0x08004d49
 8004d30:	08004d51 	.word	0x08004d51
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d61 	.word	0x08004d61
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d46:	e01a      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e016      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e012      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e00e      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d60:	2320      	movs	r3, #32
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e00a      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d68:	2340      	movs	r3, #64	; 0x40
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6e:	e006      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d76:	e002      	b.n	8004d7e <UART_SetConfig+0x7ae>
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a55      	ldr	r2, [pc, #340]	; (8004ed8 <UART_SetConfig+0x908>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	f040 80f8 	bne.w	8004f7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	dc46      	bgt.n	8004e20 <UART_SetConfig+0x850>
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	db75      	blt.n	8004e82 <UART_SetConfig+0x8b2>
 8004d96:	3b02      	subs	r3, #2
 8004d98:	2b1e      	cmp	r3, #30
 8004d9a:	d872      	bhi.n	8004e82 <UART_SetConfig+0x8b2>
 8004d9c:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0x7d4>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004e27 	.word	0x08004e27
 8004da8:	08004e83 	.word	0x08004e83
 8004dac:	08004e2f 	.word	0x08004e2f
 8004db0:	08004e83 	.word	0x08004e83
 8004db4:	08004e83 	.word	0x08004e83
 8004db8:	08004e83 	.word	0x08004e83
 8004dbc:	08004e3f 	.word	0x08004e3f
 8004dc0:	08004e83 	.word	0x08004e83
 8004dc4:	08004e83 	.word	0x08004e83
 8004dc8:	08004e83 	.word	0x08004e83
 8004dcc:	08004e83 	.word	0x08004e83
 8004dd0:	08004e83 	.word	0x08004e83
 8004dd4:	08004e83 	.word	0x08004e83
 8004dd8:	08004e83 	.word	0x08004e83
 8004ddc:	08004e4f 	.word	0x08004e4f
 8004de0:	08004e83 	.word	0x08004e83
 8004de4:	08004e83 	.word	0x08004e83
 8004de8:	08004e83 	.word	0x08004e83
 8004dec:	08004e83 	.word	0x08004e83
 8004df0:	08004e83 	.word	0x08004e83
 8004df4:	08004e83 	.word	0x08004e83
 8004df8:	08004e83 	.word	0x08004e83
 8004dfc:	08004e83 	.word	0x08004e83
 8004e00:	08004e83 	.word	0x08004e83
 8004e04:	08004e83 	.word	0x08004e83
 8004e08:	08004e83 	.word	0x08004e83
 8004e0c:	08004e83 	.word	0x08004e83
 8004e10:	08004e83 	.word	0x08004e83
 8004e14:	08004e83 	.word	0x08004e83
 8004e18:	08004e83 	.word	0x08004e83
 8004e1c:	08004e75 	.word	0x08004e75
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d02a      	beq.n	8004e7a <UART_SetConfig+0x8aa>
 8004e24:	e02d      	b.n	8004e82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e26:	f7fe fe0d 	bl	8003a44 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004e2c:	e02f      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe fe1c 	bl	8003a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e3c:	e027      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e3e:	f107 0318 	add.w	r3, r7, #24
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fe ff68 	bl	8003d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e4c:	e01f      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4e:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <UART_SetConfig+0x904>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <UART_SetConfig+0x904>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <UART_SetConfig+0x90c>)
 8004e66:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e6c:	e00f      	b.n	8004e8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <UART_SetConfig+0x90c>)
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e72:	e00c      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e74:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <UART_SetConfig+0x910>)
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e78:	e009      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e80:	e005      	b.n	8004e8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004e8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 81ee 	beq.w	8005272 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <UART_SetConfig+0x914>)
 8004e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d305      	bcc.n	8004ec6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d910      	bls.n	8004ee8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ecc:	e1d1      	b.n	8005272 <UART_SetConfig+0xca2>
 8004ece:	bf00      	nop
 8004ed0:	40011c00 	.word	0x40011c00
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	58000c00 	.word	0x58000c00
 8004edc:	03d09000 	.word	0x03d09000
 8004ee0:	003d0900 	.word	0x003d0900
 8004ee4:	08005bb8 	.word	0x08005bb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eea:	2200      	movs	r2, #0
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	60fa      	str	r2, [r7, #12]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	4ac0      	ldr	r2, [pc, #768]	; (80051f8 <UART_SetConfig+0xc28>)
 8004ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2200      	movs	r2, #0
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f0a:	f7fb f9f1 	bl	80002f0 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	020b      	lsls	r3, r1, #8
 8004f20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f24:	0202      	lsls	r2, r0, #8
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	6849      	ldr	r1, [r1, #4]
 8004f2a:	0849      	lsrs	r1, r1, #1
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4605      	mov	r5, r0
 8004f32:	eb12 0804 	adds.w	r8, r2, r4
 8004f36:	eb43 0905 	adc.w	r9, r3, r5
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	469a      	mov	sl, r3
 8004f42:	4693      	mov	fp, r2
 8004f44:	4652      	mov	r2, sl
 8004f46:	465b      	mov	r3, fp
 8004f48:	4640      	mov	r0, r8
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	f7fb f9d0 	bl	80002f0 <__aeabi_uldivmod>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4613      	mov	r3, r2
 8004f56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5e:	d308      	bcc.n	8004f72 <UART_SetConfig+0x9a2>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f66:	d204      	bcs.n	8004f72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e17f      	b.n	8005272 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004f78:	e17b      	b.n	8005272 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f82:	f040 80bd 	bne.w	8005100 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	dc48      	bgt.n	8005020 <UART_SetConfig+0xa50>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	db7b      	blt.n	800508a <UART_SetConfig+0xaba>
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d879      	bhi.n	800508a <UART_SetConfig+0xaba>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x9cc>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08005027 	.word	0x08005027
 8004fa0:	0800502f 	.word	0x0800502f
 8004fa4:	0800508b 	.word	0x0800508b
 8004fa8:	0800508b 	.word	0x0800508b
 8004fac:	08005037 	.word	0x08005037
 8004fb0:	0800508b 	.word	0x0800508b
 8004fb4:	0800508b 	.word	0x0800508b
 8004fb8:	0800508b 	.word	0x0800508b
 8004fbc:	08005047 	.word	0x08005047
 8004fc0:	0800508b 	.word	0x0800508b
 8004fc4:	0800508b 	.word	0x0800508b
 8004fc8:	0800508b 	.word	0x0800508b
 8004fcc:	0800508b 	.word	0x0800508b
 8004fd0:	0800508b 	.word	0x0800508b
 8004fd4:	0800508b 	.word	0x0800508b
 8004fd8:	0800508b 	.word	0x0800508b
 8004fdc:	08005057 	.word	0x08005057
 8004fe0:	0800508b 	.word	0x0800508b
 8004fe4:	0800508b 	.word	0x0800508b
 8004fe8:	0800508b 	.word	0x0800508b
 8004fec:	0800508b 	.word	0x0800508b
 8004ff0:	0800508b 	.word	0x0800508b
 8004ff4:	0800508b 	.word	0x0800508b
 8004ff8:	0800508b 	.word	0x0800508b
 8004ffc:	0800508b 	.word	0x0800508b
 8005000:	0800508b 	.word	0x0800508b
 8005004:	0800508b 	.word	0x0800508b
 8005008:	0800508b 	.word	0x0800508b
 800500c:	0800508b 	.word	0x0800508b
 8005010:	0800508b 	.word	0x0800508b
 8005014:	0800508b 	.word	0x0800508b
 8005018:	0800508b 	.word	0x0800508b
 800501c:	0800507d 	.word	0x0800507d
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d02e      	beq.n	8005082 <UART_SetConfig+0xab2>
 8005024:	e031      	b.n	800508a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005026:	f7fd fb23 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 800502a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800502c:	e033      	b.n	8005096 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800502e:	f7fd fb35 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 8005032:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005034:	e02f      	b.n	8005096 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fd18 	bl	8003a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005044:	e027      	b.n	8005096 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005046:	f107 0318 	add.w	r3, r7, #24
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fe64 	bl	8003d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005054:	e01f      	b.n	8005096 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005056:	4b69      	ldr	r3, [pc, #420]	; (80051fc <UART_SetConfig+0xc2c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005062:	4b66      	ldr	r3, [pc, #408]	; (80051fc <UART_SetConfig+0xc2c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	08db      	lsrs	r3, r3, #3
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	4a64      	ldr	r2, [pc, #400]	; (8005200 <UART_SetConfig+0xc30>)
 800506e:	fa22 f303 	lsr.w	r3, r2, r3
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005074:	e00f      	b.n	8005096 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005076:	4b62      	ldr	r3, [pc, #392]	; (8005200 <UART_SetConfig+0xc30>)
 8005078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800507a:	e00c      	b.n	8005096 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800507c:	4b61      	ldr	r3, [pc, #388]	; (8005204 <UART_SetConfig+0xc34>)
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005088:	e005      	b.n	8005096 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80ea 	beq.w	8005272 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	4a55      	ldr	r2, [pc, #340]	; (80051f8 <UART_SetConfig+0xc28>)
 80050a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b0:	005a      	lsls	r2, r3, #1
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	441a      	add	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d916      	bls.n	80050f8 <UART_SetConfig+0xb28>
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d212      	bcs.n	80050f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f023 030f 	bic.w	r3, r3, #15
 80050da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050ea:	4313      	orrs	r3, r2
 80050ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	e0bc      	b.n	8005272 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80050fe:	e0b8      	b.n	8005272 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005100:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005104:	2b20      	cmp	r3, #32
 8005106:	dc4b      	bgt.n	80051a0 <UART_SetConfig+0xbd0>
 8005108:	2b00      	cmp	r3, #0
 800510a:	f2c0 8087 	blt.w	800521c <UART_SetConfig+0xc4c>
 800510e:	2b20      	cmp	r3, #32
 8005110:	f200 8084 	bhi.w	800521c <UART_SetConfig+0xc4c>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0xb4c>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	080051a7 	.word	0x080051a7
 8005120:	080051af 	.word	0x080051af
 8005124:	0800521d 	.word	0x0800521d
 8005128:	0800521d 	.word	0x0800521d
 800512c:	080051b7 	.word	0x080051b7
 8005130:	0800521d 	.word	0x0800521d
 8005134:	0800521d 	.word	0x0800521d
 8005138:	0800521d 	.word	0x0800521d
 800513c:	080051c7 	.word	0x080051c7
 8005140:	0800521d 	.word	0x0800521d
 8005144:	0800521d 	.word	0x0800521d
 8005148:	0800521d 	.word	0x0800521d
 800514c:	0800521d 	.word	0x0800521d
 8005150:	0800521d 	.word	0x0800521d
 8005154:	0800521d 	.word	0x0800521d
 8005158:	0800521d 	.word	0x0800521d
 800515c:	080051d7 	.word	0x080051d7
 8005160:	0800521d 	.word	0x0800521d
 8005164:	0800521d 	.word	0x0800521d
 8005168:	0800521d 	.word	0x0800521d
 800516c:	0800521d 	.word	0x0800521d
 8005170:	0800521d 	.word	0x0800521d
 8005174:	0800521d 	.word	0x0800521d
 8005178:	0800521d 	.word	0x0800521d
 800517c:	0800521d 	.word	0x0800521d
 8005180:	0800521d 	.word	0x0800521d
 8005184:	0800521d 	.word	0x0800521d
 8005188:	0800521d 	.word	0x0800521d
 800518c:	0800521d 	.word	0x0800521d
 8005190:	0800521d 	.word	0x0800521d
 8005194:	0800521d 	.word	0x0800521d
 8005198:	0800521d 	.word	0x0800521d
 800519c:	0800520f 	.word	0x0800520f
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d037      	beq.n	8005214 <UART_SetConfig+0xc44>
 80051a4:	e03a      	b.n	800521c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a6:	f7fd fa63 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 80051aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051ac:	e03c      	b.n	8005228 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ae:	f7fd fa75 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 80051b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051b4:	e038      	b.n	8005228 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fc58 	bl	8003a70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051c4:	e030      	b.n	8005228 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051c6:	f107 0318 	add.w	r3, r7, #24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fda4 	bl	8003d18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d4:	e028      	b.n	8005228 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <UART_SetConfig+0xc2c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d012      	beq.n	8005208 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <UART_SetConfig+0xc2c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	08db      	lsrs	r3, r3, #3
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <UART_SetConfig+0xc30>)
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051f4:	e018      	b.n	8005228 <UART_SetConfig+0xc58>
 80051f6:	bf00      	nop
 80051f8:	08005bb8 	.word	0x08005bb8
 80051fc:	58024400 	.word	0x58024400
 8005200:	03d09000 	.word	0x03d09000
 8005204:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005208:	4b24      	ldr	r3, [pc, #144]	; (800529c <UART_SetConfig+0xccc>)
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800520c:	e00c      	b.n	8005228 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800520e:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <UART_SetConfig+0xcd0>)
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005212:	e009      	b.n	8005228 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800521a:	e005      	b.n	8005228 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005226:	bf00      	nop
    }

    if (pclk != 0U)
 8005228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d021      	beq.n	8005272 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <UART_SetConfig+0xcd4>)
 8005234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005238:	461a      	mov	r2, r3
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	441a      	add	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	2b0f      	cmp	r3, #15
 8005256:	d909      	bls.n	800526c <UART_SetConfig+0xc9c>
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525e:	d205      	bcs.n	800526c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	b29a      	uxth	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	e002      	b.n	8005272 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2201      	movs	r2, #1
 8005276:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2201      	movs	r2, #1
 800527e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2200      	movs	r2, #0
 800528c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800528e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005292:	4618      	mov	r0, r3
 8005294:	3748      	adds	r7, #72	; 0x48
 8005296:	46bd      	mov	sp, r7
 8005298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529c:	03d09000 	.word	0x03d09000
 80052a0:	003d0900 	.word	0x003d0900
 80052a4:	08005bb8 	.word	0x08005bb8

080052a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01a      	beq.n	80053be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a6:	d10a      	bne.n	80053be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b098      	sub	sp, #96	; 0x60
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053fc:	f7fb fe88 	bl	8001110 <HAL_GetTick>
 8005400:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d12f      	bne.n	8005470 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f88e 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d022      	beq.n	8005470 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800543e:	653b      	str	r3, [r7, #80]	; 0x50
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
 800544a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800544e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e063      	b.n	8005538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d149      	bne.n	8005512 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800547e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005486:	2200      	movs	r2, #0
 8005488:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f857 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d03c      	beq.n	8005512 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	623b      	str	r3, [r7, #32]
   return(result);
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
 80054b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ea:	61fa      	str	r2, [r7, #28]
 80054ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	69b9      	ldr	r1, [r7, #24]
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	617b      	str	r3, [r7, #20]
   return(result);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e5      	bne.n	80054ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e012      	b.n	8005538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3758      	adds	r7, #88	; 0x58
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005550:	e049      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d045      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555a:	f7fb fdd9 	bl	8001110 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <UART_WaitOnFlagUntilTimeout+0x30>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e048      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d031      	beq.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d110      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2208      	movs	r2, #8
 8005596:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f839 	bl	8005610 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2208      	movs	r2, #8
 80055a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e029      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c0:	d111      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f81f 	bl	8005610 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e00f      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4013      	ands	r3, r2
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	429a      	cmp	r2, r3
 8005602:	d0a6      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b095      	sub	sp, #84	; 0x54
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800562c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	643b      	str	r3, [r7, #64]	; 0x40
 8005638:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800563c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e6      	bne.n	8005618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	61fb      	str	r3, [r7, #28]
   return(result);
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <UART_EndRxTransfer+0xc8>)
 800565e:	4013      	ands	r3, r2
 8005660:	64bb      	str	r3, [r7, #72]	; 0x48
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3308      	adds	r3, #8
 8005668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e5      	bne.n	800564a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d118      	bne.n	80056b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	60bb      	str	r3, [r7, #8]
   return(result);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0310 	bic.w	r3, r3, #16
 800569a:	647b      	str	r3, [r7, #68]	; 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e6      	bne.n	8005686 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80056cc:	bf00      	nop
 80056ce:	3754      	adds	r7, #84	; 0x54
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	effffffe 	.word	0xeffffffe

080056dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e027      	b.n	8005742 <HAL_UARTEx_DisableFifoMode+0x66>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2224      	movs	r2, #36	; 0x24
 80056fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005720:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005762:	2302      	movs	r3, #2
 8005764:	e02d      	b.n	80057c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2224      	movs	r2, #36	; 0x24
 8005772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f850 	bl	8005848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057de:	2302      	movs	r3, #2
 80057e0:	e02d      	b.n	800583e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2224      	movs	r2, #36	; 0x24
 80057ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0201 	bic.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f812 	bl	8005848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005868:	e031      	b.n	80058ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800586a:	2310      	movs	r3, #16
 800586c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800586e:	2310      	movs	r3, #16
 8005870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	0e5b      	lsrs	r3, r3, #25
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	0f5b      	lsrs	r3, r3, #29
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	7b3a      	ldrb	r2, [r7, #12]
 8005896:	4911      	ldr	r1, [pc, #68]	; (80058dc <UARTEx_SetNbDataToProcess+0x94>)
 8005898:	5c8a      	ldrb	r2, [r1, r2]
 800589a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800589e:	7b3a      	ldrb	r2, [r7, #12]
 80058a0:	490f      	ldr	r1, [pc, #60]	; (80058e0 <UARTEx_SetNbDataToProcess+0x98>)
 80058a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	7b7a      	ldrb	r2, [r7, #13]
 80058b4:	4909      	ldr	r1, [pc, #36]	; (80058dc <UARTEx_SetNbDataToProcess+0x94>)
 80058b6:	5c8a      	ldrb	r2, [r1, r2]
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058bc:	7b7a      	ldrb	r2, [r7, #13]
 80058be:	4908      	ldr	r1, [pc, #32]	; (80058e0 <UARTEx_SetNbDataToProcess+0x98>)
 80058c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	08005bd0 	.word	0x08005bd0
 80058e0:	08005bd8 	.word	0x08005bd8

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <__libc_init_array>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4d0d      	ldr	r5, [pc, #52]	; (800592c <__libc_init_array+0x38>)
 80058f8:	4c0d      	ldr	r4, [pc, #52]	; (8005930 <__libc_init_array+0x3c>)
 80058fa:	1b64      	subs	r4, r4, r5
 80058fc:	10a4      	asrs	r4, r4, #2
 80058fe:	2600      	movs	r6, #0
 8005900:	42a6      	cmp	r6, r4
 8005902:	d109      	bne.n	8005918 <__libc_init_array+0x24>
 8005904:	4d0b      	ldr	r5, [pc, #44]	; (8005934 <__libc_init_array+0x40>)
 8005906:	4c0c      	ldr	r4, [pc, #48]	; (8005938 <__libc_init_array+0x44>)
 8005908:	f000 f826 	bl	8005958 <_init>
 800590c:	1b64      	subs	r4, r4, r5
 800590e:	10a4      	asrs	r4, r4, #2
 8005910:	2600      	movs	r6, #0
 8005912:	42a6      	cmp	r6, r4
 8005914:	d105      	bne.n	8005922 <__libc_init_array+0x2e>
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	f855 3b04 	ldr.w	r3, [r5], #4
 800591c:	4798      	blx	r3
 800591e:	3601      	adds	r6, #1
 8005920:	e7ee      	b.n	8005900 <__libc_init_array+0xc>
 8005922:	f855 3b04 	ldr.w	r3, [r5], #4
 8005926:	4798      	blx	r3
 8005928:	3601      	adds	r6, #1
 800592a:	e7f2      	b.n	8005912 <__libc_init_array+0x1e>
 800592c:	08005be8 	.word	0x08005be8
 8005930:	08005be8 	.word	0x08005be8
 8005934:	08005be8 	.word	0x08005be8
 8005938:	08005bec 	.word	0x08005bec

0800593c <memcpy>:
 800593c:	440a      	add	r2, r1
 800593e:	4291      	cmp	r1, r2
 8005940:	f100 33ff 	add.w	r3, r0, #4294967295
 8005944:	d100      	bne.n	8005948 <memcpy+0xc>
 8005946:	4770      	bx	lr
 8005948:	b510      	push	{r4, lr}
 800594a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800594e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005952:	4291      	cmp	r1, r2
 8005954:	d1f9      	bne.n	800594a <memcpy+0xe>
 8005956:	bd10      	pop	{r4, pc}

08005958 <_init>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr

08005964 <_fini>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr
